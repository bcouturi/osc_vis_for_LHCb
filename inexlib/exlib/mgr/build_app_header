
# to be sourced in <app>/mgr/build scripts.

#//////////////////////////////////////////////////////
#/// related to exlib and graphics ////////////////////
#//////////////////////////////////////////////////////

if [ "${exlib_mgr}" = "" ] ; then
  echo "exlib/mgr/build_app_header : exlib_mgr variable not set."
  exit
fi

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
build_x11=no
build_cocoa=no
build_ios=no
build_iossim=no
build_android=no
build_no_screen=no

build_install=no

inlib_args=
for arg in ${build_args} ; do
  case ${arg} in
    -x11)        build_x11=yes;;
    -X11)        build_x11=yes;;
    -cocoa)      build_cocoa=yes;;
    -ios)        build_ios=yes;;
    -iossim)     build_iossim=yes;;
    -android)    build_android=yes;;
    -no_screen)  build_no_screen=yes;;
    # etc :
    -install)    build_install=yes;;
    -*)          inlib_args="${inlib_args} ${arg}";;
  esac
done

# guess preferred screen handling :
if [ ${build_no_screen} = "yes" ] ; then
  echo dummy > /dev/null

elif [ ${build_x11} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null
elif [ ${build_cocoa} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_mac"
elif [ ${build_ios} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_ios"
elif [ ${build_iossim} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_iossim"

elif [ ${build_android} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_android"

else
  if [ `uname` = "Darwin" ] ; then
    build_cocoa=yes
    inlib_args="${inlib_args} -sdk_mac"
  elif [ `uname` = "Linux" ] ; then
    build_x11=yes
    # take default compiler : clang on Mac, gnu on Linux.
  fi
fi

build_args="${inlib_args}"

args_ourex=
for arg in ${build_args} ; do
  case ${arg} in
    -gnu)         args_ourex="${args_ourex} ${arg}";;
    -intel)       args_ourex="${args_ourex} ${arg}";;
    -clang)       args_ourex="${args_ourex} ${arg}";;
    -visual)      args_ourex="${args_ourex} ${arg}";;
    -sdk_mac)     args_ourex="${args_ourex} ${arg}";;
    -sdk_ios)     args_ourex="${args_ourex} ${arg}";;
    -sdk_iossim)  args_ourex="${args_ourex} ${arg}";;
    -sdk_android) args_ourex="${args_ourex} ${arg}";;
    -g)           args_ourex="${args_ourex} ${arg}";;
    -x)           args_ourex="${args_ourex} ${arg}";;
    -v)           args_ourex="${args_ourex} ${arg}";;
# we don't want the below :
#   -clean)      args_ourex="${args_ourex} ${arg}";;
  esac
done

inlib_mgr=${exlib_mgr}/../../inlib/mgr
. ${inlib_mgr}/build_app_header

if [ "${app}" = "" ] ; then
  echo "exlib/mgr/build_app_header : app variable not set."
  exit
fi

if [ ${build_cocoa} = "yes" ] ; then
  app_main=main.mm
elif [ ${build_ios} = "yes" ] ; then
  app_main=main.m
elif [ ${build_iossim} = "yes" ] ; then
  app_main=main.m
fi

app_bundle_url=fr.in2p3.lal

ourex_dir=${exlib_mgr}/../../ourex
ourex_mgr=${exlib_mgr}/../../ourex/mgr

# common ourex :
gtkglarea_home=${ourex_dir}/gtkglarea
XmOpenGLArea_home=${ourex_dir}/XmOpenGLArea
CoinGL_home=${ourex_dir}/CoinGL
HEPVis_home=${ourex_dir}/HEPVis
SOPHYA_home=${ourex_dir}/SOPHYA
Wt_home=${ourex_dir}/Wt
cfitsio_home=${ourex_dir}/cfitsio
csz_home=${ourex_dir}/csz
dcmtk_home=${ourex_dir}/dcmtk
freetype_home=${ourex_dir}/freetype
expat_home=${ourex_dir}/expat
geant4_home=${ourex_dir}/geant4
gl2ps_home=${ourex_dir}/gl2ps
glutess_home=${ourex_dir}/glutess
graphviz_home=${ourex_dir}/graphviz
hdf5_home=${ourex_dir}/hdf5
jpeg_home=${ourex_dir}/jpeg
lua_home=${ourex_dir}/lua
png_home=${ourex_dir}/png
pythia8_home=${ourex_dir}/pythia8
#xercesc_home=${ourex_dir}/xercesc
zip_home=${ourex_dir}/zip
zlib_home=${ourex_dir}/zlib
fruitstrap_home=${ourex_dir}/fruitstrap
gldum_home=${ourex_dir}/gldum

CoinPython_home=${ourex_dir}/CoinPython
HEPVisPython_home=${ourex_dir}/HEPVisPython

