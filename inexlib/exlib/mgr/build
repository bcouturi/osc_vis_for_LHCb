#!/bin/sh -f

build_has_iv=yes

what=""

build_verbose=no
args=
build_args=

while test $# -ge 1 ; do
  case $1 in
    -v) build_verbose=yes;build_args="${build_args} $1";;
    -iv) build_has_iv=yes;args="${args} $1";;
    -*) build_args="${build_args} $1";args="${args} $1";;
     *) if [ $# = 1 ] ; then
          what=$1
        else         
          echo "unknwon option : $1"
        fi
        ;;
  esac
  shift
done

if [ "${what}" = "" ] ; then
  # before starting cleanup :
  inlib_mgr=../../inlib/mgr

  ${inlib_mgr}/find_rm ../examples/cpp 'exlib_example_*'
  ${inlib_mgr}/find_rm ../examples/cpp 'moc_*'
  ${inlib_mgr}/find_rm ../exlib '*.gch.*'
  ${inlib_mgr}/find_rm ../exlib '*.cxx'
  find ../exlib -name "*" -exec grep inlib.license {} \;

  find ../exlib -name '*' -type f -exec ./build ${build_args} {} \;
#  exit

  dirs=
  dirs="${dirs} ../apps"
  dirs="${dirs} ../tests"
  for dir in ${dirs} ; do
    find ${dir} -maxdepth 1 -name '*.cpp' -type f -exec ./build ${build_args} {} \;
  done

  # NOTE : for exas, we use the local build script.
  find ../examples/cpp -maxdepth 1 -name '*.cpp' -type f -exec ./build_exa ${build_args} {} \;

  exit
fi

if [ -d "${what}" ] ; then
  find ${what} -maxdepth 1 -name "*" -type f -exec ./build ${args} {} \;
  exit
fi

base_name=`basename ${what}`

if [ "${what}" = "${base_name}" ] ; then
  # only the name entered, find exact places :
  found="`find .. -name "${base_name}" -print`"
  if [ "${found}" = "" ] ; then
    echo "not found."
  else
    find .. -name "${base_name}" -type f -print -exec ./build ${args} {} \;
  fi
  exit
fi

if [ "`echo ${what} | grep examples`" != "" ] ; then
  ./build_exa ${args} ${what}
  exit
fi

dir=`dirname ${what}`
name=`basename ${what}`
group=`basename ${dir}`

name=`echo ${name} | sed -e 's:\.cpp::g'`

if [ ${build_verbose} = yes ] ; then
  echo "build : ${what} ..."
fi

#echo "dir : ${dir} ..."
#echo "group : ${group} ..."
##echo "base_name : ${base_name} ..."
#echo "name : ${name} ..."
#exit

if [ ${group} = "CVS" ] ; then exit;fi
if [ ${name} = "README" ] ; then exit;fi

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////
exlib_mgr=.
. ${exlib_mgr}/build_app_header

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////
if [ ${build_visual} = "yes" ] ; then
  # rm painfull warnings about API strcpy, etc... deprecated.
  cppflags="${cppflags} /wd4996"
  ccflags0="${ccflags0} /wd4996"
fi

#////////////////////////////////////
#/// swig ///////////////////////////
#////////////////////////////////////
swig_incs=
#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

is_plugin=no
is_app=no
is_test=no
is_swig_py=no
is_swig_lua=no
is_flex=no
is_yacc=no

if [ ${group} = "apps" ] ; then
  is_app=yes
fi
if [ ${group} = "tests" ] ; then
  is_app=yes
  is_test=yes
fi

objs=""
libs=""

f77_objs=""
f77_libs=""

use_our_stl=${build_use_our_stl}

/bin/mkdir -p ${build_path}

if [ ${is_app} = "yes" ] ; then

  #//////////////////////////////////////////////////////////
  #/// look for an //exlib_build_use in the app main cpp ////
  #//////////////////////////////////////////////////////////
  #app_use_main="../apps/${name}.cpp"
  app_use_main="${what}"
  . ./app_use
  
  if [ ${is_test} = "yes" ] ; then
    if [ ${name} = "lua_swig" ] ; then # tests/lua
      use_inlib=yes
      use_lua=yes
      
      use_exlib=yes
      use_freetype=yes
      use_glutess=yes
      use_GL=yes
      use_gl2ps=yes

      if [ ${build_visual} = "yes" ] ; then
        use_win32=yes
      else
        use_X11=yes
        use_GLX=yes
      fi

      cppfiles="${cppfiles} ../exlib/lua/inlib_swig_lua.cpp"
      cppfiles="${cppfiles} ../exlib/lua/exlib_swig_lua.cpp"
    fi

  fi

else # lib

  if [ ${name} = "glutess" ] ; then
    use_glutess=yes
  fi

  if [ ${group} = "cern_root" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      echo "not tested with Win32/cl.exe"
      exit
    fi

    if [ ${name} = "inlib_LinkDef.h" ] ; then exit;fi
    if [ ${name} = "inlib_def.h" ] ; then exit;fi

    if [ ${name} = "h2root" ] ; then
      use_inlib=yes
      use_cern_root=yes
    fi

    if [ ${name} = "inlib_cern_root" ] ; then
      is_plugin=yes
      is_so_plugin=yes

      if [ "${ROOTSYS}" = "" ] ; then
        echo "You have to 'source setup' ROOT."
        exit
      fi

      # look if root-config is around :
      ${exlib_mgr}/check_app root-config 'root-config program not found. You have to <source setup> CERN-ROOT.'
      use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

      rcint_exe=`root-config --bindir`/rootcint

      # Generating the inlib CERN-ROOT CINT wrapping :
      eval ${rcint_exe} -f G__inlib.cpp -c -I../../inlib ${dir}/inlib_def.h ${dir}/inlib_LinkDef.h 

      cern_root_flags=`root-config --cflags`

      obj=${build_path}/G__inlib.o
      eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${cern_root_flags} -I../../inlib G__inlib.cpp 
      objs="${objs} ${obj}"
      /bin/rm -f G__inlib.h G__inlib.cpp

      libs="${libs} `root-config --libs`"

    fi

    if [ ${name} = "exlib_LinkDef.h" ] ; then exit;fi
    if [ ${name} = "exlib_def.h" ] ; then exit;fi

    if [ ${name} = "exlib_cern_root" ] ; then
      is_plugin=yes
      is_so_plugin=yes

      if [ "${ROOTSYS}" = "" ] ; then
        echo "You have to 'source setup' ROOT."
        exit
      fi

      # look if root-config is around :
      ${exlib_mgr}/check_app root-config 'root-config program not found. You have to <source setup> CERN-ROOT.'
      use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

      rcint_exe=`root-config --bindir`/rootcint

      # Generating the inlib CERN-ROOT CINT wrapping :
      eval ${rcint_exe} -f G__exlib.cpp -c -I../../inlib -I../../exlib ${dir}/exlib_def.h ${dir}/exlib_LinkDef.h 

      cern_root_flags=`root-config --cflags`

      obj=${build_path}/G__exlib.o
      eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${cern_root_flags} -I../../inlib -I../../exlib G__exlib.cpp 
      objs="${objs} ${obj}"
      /bin/rm -f G__exlib.h G__exlib.cpp

      libs="${libs} `root-config --libs`"

    fi

  fi

  if [ ${group} = "swig" ] ; then
    if [ ${name} = "plotter" ] ; then
      use_inlib=yes
      use_freetype=yes
      use_glutess=yes
    fi
  fi

  if [ ${group} = "py" ] ; then

    if [ ${name} = "inlib_i" ] ; then exit;fi
    if [ ${name} = "inlib.i" ] ; then exit;fi
    if [ ${name} = "inlib.py" ] ; then exit;fi
    if [ ${name} = "inlib.pyc" ] ; then exit;fi
    if [ ${name} = "inlib_swig_py.icc" ] ; then exit;fi

    if [ ${name} = "inlib_swig.i" ] ; then
      use_swig=yes
      is_swig_py=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"
    fi
    if [ ${name} = "inlib_swig_py" ] ; then
      is_plugin=yes
      is_py_plugin=yes
      use_inlib=yes
      use_Python=yes
    fi

    if [ ${name} = "exlib.py" ] ; then exit;fi
    if [ ${name} = "exlib.pyc" ] ; then exit;fi
    if [ ${name} = "exlib_swig_py.icc" ] ; then exit;fi

    if [ ${name} = "exlib_swig.i" ] ; then
      use_swig=yes
      is_swig_py=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"

      swig_incs="${swig_incs} -I../../inlib/inlib/io"

      swig_incs="${swig_incs} -I../../exlib"
      swig_incs="${swig_incs} -I../../exlib/exlib/swig"
      swig_incs="${swig_incs} -I../../ourex/glutess"
      swig_incs="${swig_incs} -I../../ourex/glutess/glutess"
#      swig_incs="${swig_incs} -I../../ourex/freetype/include"
      swig_incs="${swig_incs} -I../../ourex/gl2ps"
      swig_incs="${swig_incs} -I../../ourex/gl2ps/gl2ps"
      swig_incs="${swig_incs} -I../../exlib/exlib/sg"
    fi
    if [ ${name} = "exlib_swig_py" ] ; then
      is_plugin=yes
      is_py_plugin=yes
      use_inlib=yes
      use_exlib=yes
      use_Python=yes
      use_freetype=yes
      use_glutess=yes
      use_GL=yes
      use_gl2ps=yes

      if [ ${build_visual} = "yes" ] ; then
        use_win32=yes
      else
        use_X11=yes
        use_GLX=yes
      fi
    fi

  fi

  if [ ${group} = "yacc" ] ; then
    use_inlib=yes

    if [ ${name} = "cexpr_lexer.l" ] ; then
      use_yacc=yes
      is_flex=yes
    fi

    if [ ${name} = "cexpr_eval.y" ] ; then
      use_yacc=yes
      is_yacc=yes
    fi

  fi

  if [ ${group} = "lua" ] ; then

    if [ ${name} = "inlib_i" ] ; then exit;fi
    if [ ${name} = "inlib.i" ] ; then exit;fi
#    if [ ${name} = "inlib.py" ] ; then exit;fi
#    if [ ${name} = "inlib.pyc" ] ; then exit;fi
    if [ ${name} = "inlib_swig_lua.icc" ] ; then exit;fi

    if [ ${name} = "inlib_swig.i" ] ; then
      use_swig=yes
      is_swig_lua=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"
    fi
    if [ ${name} = "inlib_swig_lua" ] ; then
      is_plugin=yes
      is_lua_plugin=yes
      use_inlib=yes
      use_lua=yes
    fi

#    if [ ${name} = "exlib.py" ] ; then exit;fi
#    if [ ${name} = "exlib.pyc" ] ; then exit;fi
    if [ ${name} = "exlib_swig_lua.icc" ] ; then exit;fi

    if [ ${name} = "exlib_swig.i" ] ; then
      use_swig=yes
      is_swig_lua=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"

      swig_incs="${swig_incs} -I../../inlib/inlib/io"

      swig_incs="${swig_incs} -I../../exlib"
      swig_incs="${swig_incs} -I../../exlib/exlib/swig"
      swig_incs="${swig_incs} -I../../ourex/glutess"
      swig_incs="${swig_incs} -I../../ourex/glutess/glutess"
#      swig_incs="${swig_incs} -I../../ourex/freetype/include"
      swig_incs="${swig_incs} -I../../ourex/gl2ps"
      swig_incs="${swig_incs} -I../../ourex/gl2ps/gl2ps"
      swig_incs="${swig_incs} -I../../exlib/exlib/sg"
    fi
    if [ ${name} = "exlib_swig_lua" ] ; then
      is_plugin=yes
      is_lua_plugin=yes
      use_inlib=yes
      use_exlib=yes
      use_lua=yes
      use_freetype=yes
      use_glutess=yes
      use_GL=yes
      use_gl2ps=yes

      if [ ${build_visual} = "yes" ] ; then
        use_win32=yes
      else
        use_X11=yes
        use_GLX=yes
      fi
    fi

  fi

  if [ ${group} = "win32" ] ; then
    if [ ${build_visual} != "yes" ] ; then
      exit
    fi
    if [ ${name} = "plotter" ] ; then
      use_inlib=yes
      use_freetype=yes
      use_glutess=yes
    fi
  fi

  if [ ${group} = "X11" ] ; then
    use_X11=yes
    use_GL=yes
    use_GLX=yes

    if [ ${name} = "gui_dispatcher" ] ; then
      use_freetype=yes # because of gui_viewer
      use_jpeg=yes
      use_glutess=yes
    fi

    if [ ${name} = "plotter" ] ; then
      use_freetype=yes
      use_glutess=yes
    fi
    use_inlib=yes
  fi

  if [ ${group} = "hdf5" ] ; then
    use_hdf5=yes
    use_inlib=yes
    if [ ${name} = "helper.icc" ] ; then exit;fi
    if [ ${name} = "hdf5o.icc" ] ; then exit;fi
    if [ ${name} = "keys_menu" ] ; then
      raise_GL=yes
      use_freetype=yes
      use_glutess=yes
    fi
    if [ ${name} = "cbk" ] ; then
      raise_GL=yes
      use_freetype=yes
      use_glutess=yes
    fi
  fi

  if [ ${group} = "sg" ] ; then
    use_inlib=yes

    if [ ${name} = "text_freetype" ] ; then use_freetype=yes ;fi
    if [ ${name} = "text_freetype" ] ; then use_glutess=yes ;fi

    if [ ${name} = "text_freetype_marker" ] ; then use_freetype=yes ;fi
    if [ ${name} = "text_freetype_marker" ] ; then use_glutess=yes ;fi

    if [ ${name} = "tools" ] ; then use_freetype=yes ;fi
    if [ ${name} = "axis" ] ; then use_freetype=yes ;fi
    if [ ${name} = "plotter" ] ; then use_freetype=yes ;fi
    if [ ${name} = "plots" ] ; then use_freetype=yes ;fi
    if [ ${name} = "text" ] ; then use_freetype=yes ;fi
    if [ ${name} = "scroll_text" ] ; then use_freetype=yes ;fi
    if [ ${name} = "scroll_infos" ] ; then use_freetype=yes ;fi
    if [ ${name} = "keyboard" ] ; then use_freetype=yes ;fi
    if [ ${name} = "numeric" ] ; then use_freetype=yes ;fi
    if [ ${name} = "edvalop" ] ; then use_freetype=yes ;fi
    if [ ${name} = "colors" ] ; then use_freetype=yes ;fi
    if [ ${name} = "entry" ] ; then use_freetype=yes ;fi
    if [ ${name} = "entries" ] ; then use_freetype=yes ;fi
    if [ ${name} = "infos" ] ; then use_freetype=yes ;fi
    if [ ${name} = "legend" ] ; then use_freetype=yes ;fi
    if [ ${name} = "text_button" ] ; then use_freetype=yes ;fi
    if [ ${name} = "image_text_button" ] ; then use_freetype=yes ;fi
    if [ ${name} = "list" ] ; then use_freetype=yes ;fi
    if [ ${name} = "set_plotter_camera" ] ; then use_freetype=yes ;fi
    if [ ${name} = "plots_viewer" ] ; then use_freetype=yes ;fi
    if [ ${name} = "wall_cbk" ] ; then use_freetype=yes ;fi
    if [ ${name} = "write_gl2ps" ] ; then use_freetype=yes ;fi
    if [ ${name} = "valop2sg" ] ; then use_freetype=yes ;fi

    if [ ${name} = "image" ] ; then use_jpeg=yes ;fi
    if [ ${name} = "plots_viewer" ] ; then use_jpeg=yes ;fi
    if [ ${name} = "wall_cbk" ] ; then use_jpeg=yes ;fi

    if [ ${name} = "write_gl2ps" ] ; then use_gl2ps=yes ;fi

    if [ ${name} = "tessellate" ] ; then use_glutess=yes ;fi
    if [ ${name} = "polyhedron" ] ; then use_glutess=yes ;fi
    if [ ${name} = "axis" ] ; then use_glutess=yes ;fi
    if [ ${name} = "text" ] ; then use_glutess=yes ;fi
    if [ ${name} = "text_button" ] ; then use_glutess=yes ;fi
    if [ ${name} = "image_text_button" ] ; then use_glutess=yes ;fi
    if [ ${name} = "colors" ] ; then use_glutess=yes ;fi
    if [ ${name} = "entries" ] ; then use_glutess=yes ;fi
    if [ ${name} = "entry" ] ; then use_glutess=yes ;fi
    if [ ${name} = "list" ] ; then use_glutess=yes ;fi
    if [ ${name} = "infos" ] ; then use_glutess=yes ;fi
    if [ ${name} = "scroll_infos" ] ; then use_glutess=yes ;fi
    if [ ${name} = "scroll_text" ] ; then use_glutess=yes ;fi
    if [ ${name} = "keyboard" ] ; then use_glutess=yes ;fi
    if [ ${name} = "numeric" ] ; then use_glutess=yes ;fi
    if [ ${name} = "edvalop" ] ; then use_glutess=yes ;fi
    if [ ${name} = "legend" ] ; then use_glutess=yes ;fi
    if [ ${name} = "plotter" ] ; then use_glutess=yes ;fi
    if [ ${name} = "plots" ] ; then use_glutess=yes ;fi
    if [ ${name} = "tools" ] ; then use_glutess=yes ;fi
    if [ ${name} = "set_plotter_camera" ] ; then use_glutess=yes ;fi
    if [ ${name} = "valop2sg" ] ; then use_glutess=yes ;fi

    if [ ${name} = "polyhedron" ] ; then raise_GL=yes ;fi
    if [ ${name} = "render_GL" ] ; then raise_GL=yes ;fi
    if [ ${name} = "entries" ] ; then raise_GL=yes ;fi
    if [ ${name} = "gl" ] ; then raise_GL=yes ;fi
    if [ ${name} = "edvalop" ] ; then raise_GL=yes ;fi
    if [ ${name} = "image" ] ; then raise_GL=yes ;fi
    if [ ${name} = "image_button" ] ; then raise_GL=yes ;fi
    if [ ${name} = "image_text_button" ] ; then raise_GL=yes ;fi
    if [ ${name} = "pixels" ] ; then raise_GL=yes ;fi
    if [ ${name} = "xmas_tree" ] ; then raise_GL=yes ;fi
    if [ ${name} = "viewer" ] ; then raise_GL=yes ;fi

    if [ ${name} = "rsgml" ] ; then
      use_freetype=yes
      use_glutess=yes
      raise_GL=yes
      use_expat=yes
      use_zlib=yes
    fi

    if [ ${name} = "rbsg" ] ; then
      use_freetype=yes
      use_glutess=yes
      raise_GL=yes
      use_zlib=yes
    fi

    if [ ${name} = "gl" ] ; then
      if [ ${build_visual} = "yes" ] ; then
        echo "WARNING : today -DEXLIB_HAS_VBO not supported."
      else
        cppflags="${cppflags} -DEXLIB_HAS_VBO"
      fi
    fi
    if [ ${name} = "polyhedron" ] ; then
      if [ ${build_visual} = "yes" ] ; then
        echo "WARNING : today -DEXLIB_HAS_VBO not supported."
      else
        cppflags="${cppflags} -DEXLIB_HAS_VBO"
      fi
    fi

    if [ ${name} = "gui_params" ] ; then use_glutess=yes ;fi
    if [ ${name} = "gui_params" ] ; then raise_GL=yes ;fi
    if [ ${name} = "gui_params" ] ; then use_freetype=yes ;fi

    if [ ${name} = "button_grid" ] ; then use_glutess=yes ;fi
    if [ ${name} = "button_grid" ] ; then raise_GL=yes ;fi
    if [ ${name} = "button_grid" ] ; then use_freetype=yes ;fi

    if [ ${name} = "texts" ] ; then use_freetype=yes ;fi
    if [ ${name} = "texts" ] ; then use_glutess=yes ;fi

    if [ ${name} = "file_chooser" ] ; then use_freetype=yes ;fi
    if [ ${name} = "file_chooser" ] ; then raise_GL=yes ;fi
    if [ ${name} = "file_chooser" ] ; then use_glutess=yes ;fi

    # OpenGL + glutess :
    if [ ${name} = "plots_viewer" ] ; then raise_GL=yes ;fi
    if [ ${name} = "plots_viewer" ] ; then use_glutess=yes ;fi

    if [ ${name} = "list" ] ; then raise_GL=yes ;fi
    if [ ${name} = "list" ] ; then use_glutess=yes ;fi

    if [ ${name} = "scenario" ] ; then
      use_freetype=yes
      use_glutess=yes
      raise_GL=yes
    fi
  fi

  if [ ${group} = "cbk" ] ; then
    use_inlib=yes
    use_jpeg=yes
    use_freetype=yes
    use_glutess=yes
    if [ ${name} = "hdf5" ] ; then use_hdf5=yes ;fi

    raise_GL=yes

    if [ ${name} = "ftp" ] ; then use_expat=yes ;fi
    if [ ${name} = "aida_obj" ] ; then use_expat=yes ;fi
    if [ ${name} = "wall" ] ; then use_expat=yes ;fi

    if [ ${name} = "scenario" ] ; then
      use_zlib=yes
      cppflags="${cppflags} -DEXLIB_XML_PARSER_HAS_ZLIB"  
    fi

    #if [ ${name} = "base_diapo" ] ; then
    #  use_zip=yes
    #fi

    if [ ${name} = "diaporama" ] ; then
      use_zip=yes
    #  cppflags="${cppflags} -DEXLIB_HAS_JPEG"  
    #  use_jpeg=yes
    #  cppflags="${cppflags} -DEXLIB_HAS_PNG"  
    #  use_png=yes
    fi
  fi

  if [ ${group} = "GL" ] ; then
    if [ ${name} = "test" ] ; then
      raise_GL=yes
    fi
  fi

  if [ ${name} = "exas" ] ; then
    use_zlib=yes
    cppflags="${cppflags} -DEXLIB_HAS_ROOT"  
    cppflags="${cppflags} -DEXLIB_HAS_JPEG"  
    use_jpeg=yes
    cppflags="${cppflags} -DEXLIB_HAS_PNG"  
    use_png=yes
    if [ ${build_visual} = "no" ] ; then
      if [ ${build_clang} = "no" ] ; then
        use_SOPHYA=yes
        cppflags="${cppflags} -DEXLIB_HAS_SOPHYA"  
      fi
    fi

    use_expat=yes # exa_slides_scenarios
  fi

  if [ ${name} = "strings" ] ; then
    use_inlib=yes
  fi
  if [ ${name} = "iopener" ] ; then
    use_inlib=yes
  fi

  if [ ${name} = "lhc1" -o ${group} = "cbk" ] ; then
    cppflags="${cppflags} -DEXLIB_HAS_PNG"  
    use_png=yes
  fi

  if [ ${name} = "load_node" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    raise_GL=yes
  fi

  if [ ${name} = "load_img" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    raise_GL=yes
  fi

  if [ ${name} = "open_image_file" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    raise_GL=yes
  fi

  if [ ${name} = "aida_opener" -o ${name} = "csv_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_expat=yes
    use_zlib=yes
    raise_GL=yes
  fi

  if [ ${name} = "jpeg_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_zlib=yes
    raise_GL=yes
    use_jpeg=yes
  fi

  if [ ${name} = "png_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_zlib=yes
    raise_GL=yes
    use_png=yes
  fi

  if [ ${name} = "cfitsio_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_expat=yes
    use_zlib=yes
    raise_GL=yes
    use_cfitsio=yes
  fi

  if [ ${name} = "scenarios_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_expat=yes
    use_zlib=yes
    raise_GL=yes
  fi

  if [ ${name} = "slides_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_expat=yes
    use_zlib=yes
    raise_GL=yes
  fi

  if [ ${name} = "zvid_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_zip=yes
    use_zlib=yes
    raise_GL=yes
    cppflags="${cppflags} -DEXLIB_HAS_JPEG"  
    use_jpeg=yes
    cppflags="${cppflags} -DEXLIB_HAS_PNG"  
    use_png=yes
  fi

  if [ ${name} = "exsg_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_expat=yes
    use_zlib=yes
    raise_GL=yes
  fi

  if [ ${name} = "bsg_opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_zlib=yes
    raise_GL=yes
  fi

  if [ ${name} = "opener" ] ; then
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_expat=yes
    raise_GL=yes
  fi

  if [ ${group} = "X11" ] ; then
    if [ ${name} = "main_cpp" ] ; then
      echo "bypass X11/main_cpp."
      exit
      cppflags="${cppflags} -DEXLIB_APP=xxx"  
      use_inlib=yes
      use_freetype=yes
      use_glutess=yes
      use_expat=yes
      raise_GL=yes
    fi
  fi

  if [ ${group} = "Wt" ] ; then
    if [ ${name} = "main_cpp" ] ; then
      echo "bypass Wt/main_cpp."
      exit
      cppflags="${cppflags} -DEXLIB_APP=xxx"  
      use_Wt=yes
      use_boost=yes
      use_inlib=yes
      use_freetype=yes
      use_glutess=yes
      use_expat=yes
      raise_GL=yes
    fi
    if [ ${name} = "render" ] ; then
      use_inlib=yes
      use_Wt=yes
      use_boost=yes

      #cppflags="${cppflags} -DEXLIB_HAS_JPEG"  
      use_jpeg=yes

      G4_cppflags=""
    fi
  fi

  if [ ${group} = "app" ] ; then
    use_inlib=yes

    use_freetype=yes
    use_glutess=yes
    use_expat=yes

    cppflags="${cppflags} -DEXLIB_HAS_JPEG"  
    use_jpeg=yes

    cppflags="${cppflags} -DEXLIB_HAS_PNG"  
    use_png=yes

    if [ ${build_has_iv} = "yes" ] ; then
      use_HEPVis=yes
      use_CoinGL=yes
      cppflags="${cppflags} -DEXLIB_HAS_IV"  
    fi

    cppflags="${cppflags} -DEXLIB_HAS_ROOT"  

    raise_GL=yes

    cppflags="${cppflags} -DEXLIB_HAS_GL2PS"  
    cppflags="${cppflags} -DWALL_DATA_CLIENT"  
    use_gl2ps=yes

    if [ ${name} = "main" ] ; then
      use_gl2ps=yes
    fi

    if [ ${name} = "exas" ] ; then
      use_zip=yes
    fi

    #if [ ${name} = "main_mm" ] ; then exit; fi
    #if [ ${name} = "GLView_mm" ] ; then exit; fi
    #if [ ${name} = "GLView.h" ] ; then exit; fi
    #if [ ${name} = "NSLog_streambuf" ] ; then exit; fi

  fi

  if [ ${name} = "gui_viewer" ] ; then
    use_inlib=yes

    use_freetype=yes
    use_glutess=yes

    cppflags="${cppflags} -DEXLIB_HAS_JPEG"  
    use_jpeg=yes

    cppflags="${cppflags} -DEXLIB_HAS_PNG"  
    use_png=yes

    cppflags="${cppflags} -DWALL_DATA_CLIENT"  

    raise_GL=yes
  fi

  if [ ${group} = "rroot" ] ; then
    if [ ${name} = "geo" ] ; then use_glutess=yes ;fi
    if [ ${name} = "scenario" ] ; then
      use_inlib=yes
      raise_GL=yes
      # for gui_viewer :
      use_freetype=yes
      use_jpeg=yes
      use_glutess=yes
    fi
    if [ ${name} = "opener" ] ; then
      use_zlib=yes
    fi
  fi

  if [ ${name} = "gzip_buffer" ] ; then
    use_inlib=yes
    use_zlib=yes
  fi
  if [ ${name} = "gzip" ] ; then
    use_zlib=yes
    use_inlib=yes
  fi
  if [ ${name} = "zip" ] ; then
    use_zlib=yes
    use_zip=yes
    use_inlib=yes
  fi
  if [ ${name} = "zit" ] ; then
    use_zlib=yes
    use_zip=yes
    use_inlib=yes
  fi
  if [ ${name} = "unzip" ] ; then
    use_zip=yes
    use_inlib=yes
  fi
  if [ ${name} = "raxml" ] ; then
    use_inlib=yes
    use_expat=yes
  fi
  if [ ${name} = "parser" ] ; then
    use_zlib=yes
    use_expat=yes
    cppflags="${cppflags} -DEXLIB_XML_PARSER_HAS_ZLIB"  
  fi
  if [ ${name} = "jpeg" ] ; then
    use_jpeg=yes
    use_inlib=yes
  fi
  if [ ${name} = "png" ] ; then
    use_png=yes  
    use_inlib=yes
  fi
  if [ ${name} = "OpenGL" ] ; then
    raise_GL=yes
  fi

  if [ ${name} = "hepvis" ] ; then
    use_X11=yes
    use_GL=yes
    use_GLX=yes
    use_HEPVis=yes
    use_CoinGL=yes
  fi

  if [ ${name} = "send" ] ; then
    use_X11=yes
    use_GL=yes
    use_GLX=yes
    use_CoinGL=yes
  fi

  if [ ${group} = "graphviz" ] ; then
    use_graphviz=yes
    use_inlib=yes
    use_freetype=yes
    use_glutess=yes
    use_zlib=yes
    G4_cppflags=""
  fi

  if [ ${group} = "povama" ] ; then
    raise_GL=yes
    use_glutess=yes
    use_inlib=yes
    use_zlib=yes
    if [ ${build_visual} = "yes" ] ; then
      echo "WARNING : today -DEXLIB_HAS_VBO not supported."
    else
      cppflags="${cppflags} -DEXLIB_HAS_VBO"
    fi
  fi

  if [ ${group} = "dcmtk" ] ; then
    use_inlib=yes
    use_dcmtk=yes
  fi

  if [ ${group} = "geant4" ] ; then
    if [ ${name} = "inexlib.gmk" ] ; then exit; fi
    if [ ${name} = "A01app.cc" ] ; then exit; fi

    use_inlib=yes

    raise_GL=yes
    use_geant4=yes
    if [ ${name} = "viewer" ] ; then
      use_freetype=yes
      use_jpeg=yes
      use_glutess=yes
      use_expat=yes
      cppflags="${cppflags} -DWALL_DATA_CLIENT"  
      use_zlib=yes  #WALL_DATA_CLIENT
      use_zip=yes
    fi
    if [ ${name} = "session" ] ; then
      use_X11=yes
      use_GLX=yes
      use_freetype=yes
      use_jpeg=yes
      use_glutess=yes
      use_expat=yes
      cppflags="${cppflags} -DWALL_DATA_CLIENT"  
      use_zlib=yes  #WALL_DATA_CLIENT
      use_zip=yes
    fi
    if [ ${name} = "user_session" ] ; then
      use_X11=yes
      use_GLX=yes
      use_freetype=yes
      use_jpeg=yes
      use_exlib=yes
      use_glutess=yes
      use_expat=yes
      use_zlib=yes
      use_zip=yes
    fi
    if [ ${name} = "visited_volume" ] ; then
      use_glutess=yes
    fi
    if [ ${name} = "event_timer" ] ; then
      use_freetype=yes
      use_glutess=yes
    fi
    if [ ${name} = "vis" ] ; then
      use_freetype=yes
      use_glutess=yes
    fi

    if [ ${name} = "rgdml" ] ; then
      use_expat=yes
    fi

    if [ ${name} = "exas" ] ; then
      use_freetype=yes
      use_exlib=yes
      use_glutess=yes
      use_expat=yes
      use_zip=yes
      cppflags="${cppflags} -DEXLIB_HAS_PYTHIA8"  
      use_pythia8=yes
    fi

    if [ ${name} = "geo" ] ; then use_glutess=yes ;fi

    if [ ${name} = "viewer" ] ; then
      cppflags="${cppflags} -DEXLIB_HAS_PYTHIA8"  
      use_pythia8=yes
    fi
    if [ ${name} = "primary_generator" ] ; then
      cppflags="${cppflags} -DEXLIB_HAS_PYTHIA8"  
      use_pythia8=yes
    fi

    if [ ${name} = "opener" ] ; then
      use_freetype=yes
      use_jpeg=yes
      use_glutess=yes
      use_zlib=yes
    fi

  fi

  if [ ${group} = "edep" ] ; then
    use_inlib=yes
    use_expat=yes
    if [ ${name} = "geo" ] ; then use_glutess=yes ;fi
  fi

  if [ ${group} = "iv" ] ; then
    if [ ${build_has_iv} = "yes" ] ; then
      use_CoinGL=yes
      use_HEPVis=yes
      use_inlib=yes
      use_zlib=yes
    else
      echo "has not iv"
      exit
    fi
  fi

  if [ ${group} = "2root" ] ; then
    use_inlib=yes
    use_cern_root=yes
  fi

  if [ ${group} = "AIDA" ] ; then
    use_inlib=yes
    use_AIDA=yes
  fi

  if [ ${group} = "SOPHYA" ] ; then
    use_inlib=yes
    use_SOPHYA=yes
  fi

  if [ ${group} = "agora" ] ; then
    raise_GL=yes
    use_inlib=yes
    use_glutess=yes
    use_freetype=yes
    use_jpeg=yes
    use_expat=yes
    use_zlib=yes
  fi

  if [ ${group} = "pmx" ] ; then
    raise_GL=yes
    use_inlib=yes
    use_glutess=yes
    use_freetype=yes
    use_jpeg=yes
    use_expat=yes
    use_zlib=yes
  fi

  if [ ${group} = "nemo3" ] ; then
    raise_GL=yes
    use_inlib=yes
    use_glutess=yes
    use_freetype=yes
    use_jpeg=yes
    use_expat=yes
    use_zlib=yes
  fi

  if [ ${group} = "geant3" ] ; then
    use_inlib=yes
    if [ ${name} = "sof77" ] ; then
      use_glutess=yes
      raise_GL=yes
    fi
  fi

  if [ ${name} = "readfile.icc" ] ; then exit;fi

  if [ ${name} = "geo" ] ; then
    use_inlib=yes
    #use_zlib=yes
    use_GL=yes
    raise_GL=yes
  fi

  if [ ${name} = "cfitsio" ] ; then
    use_cfitsio=yes
    use_inlib=yes
  fi

  if [ ${name} = "rcfitsio_ntuple" ] ; then
    use_cfitsio=yes
    use_inlib=yes
  fi

  if [ ${name} = "fits_image" ] ; then
    use_cfitsio=yes
    use_inlib=yes
  fi

  if [ ${name} = "sqlite" ] ; then
    use_inlib=yes
    use_sqlite=yes
  fi

  if [ ${name} = "unzip" ] ; then use_zlib=yes ;fi

  if [ ${group} = "wroot" ] ; then
    if [ ${name} = "zip" ] ; then use_zlib=yes ;fi
  fi
  if [ ${group} = "xml" ] ; then
    use_inlib=yes
    use_expat=yes
  fi

  if [ ${group} = "hbook" ] ; then
    if [ ${name} = "wfile" ] ; then
      use_inlib=yes
    fi
    if [ ${name} = "wntuple" ] ; then
      use_inlib=yes
    fi
  fi

  if [ ${group} = "nemo3" ] ; then
    if [ ${name} = "cln" ] ; then
      use_inlib=yes
    fi
  fi

fi  # end if app

#////////////////////////////////////
#/// external packages //////////////
#////////////////////////////////////
if [ "${raise_GL}" = "yes" ] ; then
  if [ `uname` = "Darwin" ] ; then
    if [ ${build_ios} = "yes" ] ; then
      cppflags="${cppflags} -DEXLIB_GL_GLES"
#    else
#      # if no X11 include around, then the below seems needed :
#      cppflags="${cppflags} -DAPPLE_GL"
    fi
  else
    use_GL=yes
  fi
fi

. ${inlib_mgr}/use_inlib
. ${exlib_mgr}/use_exlib

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

if [ "${use_png}" = "yes" ] ; then use_zlib=yes; fi  
if [ "${use_hdf5}" = "yes" ] ; then use_zlib=yes; fi

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

. ./use_glutess
. ./use_gl2ps
. ./use_csz
. ./use_Qt
. ./use_gtk
. ./use_gtkglarea
. ./use_Xm
. ./use_XmOpenGLArea
. ./use_X11
. ./use_win32
. ./use_Wt
. ./use_HEPVis
. ./use_CoinGL
. ./use_GL
. ./use_freetype
. ./use_jpeg
. ./use_zlib
. ./use_zip     # must be after use_zlib
. ./use_png     # must be after use_zlib
. ./use_expat
. ./use_hdf5    # must be after use_zlib
. ./use_SOPHYA
. ./use_cfitsio
. ./use_sqlite
. ./use_Python
. ./use_lua
. ./use_boost
. ./use_graphviz
. ./use_dcmtk

. ./use_swig
. ./use_yacc

exlib_mgr=. # to check_app

. ./use_geant4
. ./use_AIDA
. ./use_cern_root # :-(
. ./use_cernlib   # :-(
. ./use_pythia8

if [ "${use_lm}" = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    libs="${libs}"
  else 
    libs="${libs} -lm"
  fi
fi

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

# let the freedom to not use G4_cppflags for some components :
if [ ${name} != "inlib_swig_py" -a ${name} != "exlib_swig_py" ] ; then
  cppflags="${G4_cppflags} ${cppflags}"
fi

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

for file in ${cppfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cpp::g'`
  obj="${oname}.o"
  if [ ${build_visual} = "yes" ] ; then
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${file}
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${file}
  fi
  objs="${objs} ${obj}"
done

/bin/rm -f ${rm_files}

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////
#set -x

if [ ${is_app} = "yes" ] ; then

  if [ ${is_test} = "yes" ] ; then
    file_exe="${build_path}/test_${name}"
  else
    file_exe="${build_path}/${name}"
  fi
  if [ ${build_visual} = "yes" ] ; then
    file_exe="${file_exe}.exe"
  fi

  /bin/rm -f ${file_exe}
 
  obj="${build_path}/main.o"
  if [ ${build_visual} = "yes" ] ; then
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${what}
    objs="${objs} ${obj}"
    eval ${cpp_linker} /OPT:NOREF /out:${file_exe} ${objs} ${libs}
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${what}
    objs="${objs} ${obj}"
    eval ${cpp_linker} -o ${file_exe} ${objs} ${libs}
  fi

  /bin/rm -f ${objs}
  /bin/rm -f moc_Qt.cpp

elif [ ${is_plugin} = "yes" ] ; then

  if [ ${build_visual} = "yes" ] ; then

    file_o="${build_path}/${name}.o"
    file_a="${build_path}/${name}.a"
    file_symbs="${build_path}/${name}.symbs"
    file_def="${build_path}/${name}.def"
    file_lib="${build_path}/${name}.lib"
    file_exp="${build_path}/${name}.exp"

    file_plugin="${build_path}/${name}.dll"

    eval ${cpp_compiler} /c ${cppflags} /Fo${file_o} /Tp${what}
    objs="${objs} ${file_o}"

    lib.exe /nologo /machine:ix86 /out:${file_a} ${objs}

    # Build the obuild_windef.exe utility program :
    cl.exe /nologo /DWIN32 /MD /O2 /W3 /Feinlib_windef.exe ${inlib_mgr}/../apps/windef.c

    # Building the .def file :
    dumpbin.exe /symbols /out:${file_symbs} ${file_a}

    ./inlib_windef.exe ${name} < ${file_symbs} > ${file_def}

    # Building the linking library :
    # It produces a .exp file.
    lib.exe /nologo /machine:ix86 /out:${file_lib} /def:${file_def}

    eval ${cpp_linker} /dll /out:${file_plugin} ${file_exp} ${file_a} ${file_lib} ${libs}

    /bin/rm -f ${file_a} ${file_o} ${file_symbs} ${file_def} ${file_lib} ${file_exp} inlib_windef.exe

  else

    plugin_flags=
    if [ `uname` = "Darwin" ] ; then
      file_plugin="${build_path}/${name}.bundle"
      plugin_flags="${plugin_flags} -bundle -twolevel_namespace"
    elif [ `uname` = "Linux" ] ; then
      file_plugin="${build_path}/lib${name}.so"
      plugin_flags="${plugin_flags} -fPIC -shared "
    fi

    /bin/rm -f ${file_plugin}

    file_o="./${name}.o"
    if [ ${build_visual} = "yes" ] ; then
      eval ${cpp_compiler} /c ${cppflags} /Fo${file_o} ${what}
    else
      eval ${cpp_compiler} -c ${cppflags} -o ${file_o} ${what}
    fi
    objs="${objs} ${file_o}"

    ${cpp_linker} ${plugin_flags} -o ${file_plugin} ${objs} ${libs}

  fi

  if [ "${is_so_plugin}" = "yes" ] ; then
    /bin/mv ${file_plugin} ${build_path}/${name}.so
  fi

  if [ "${is_py_plugin}" = "yes" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      /bin/mv ${file_plugin} ${build_path}/${name}.pyd
    else
      /bin/mv ${file_plugin} ${build_path}/${name}.so
    fi
  fi

  /bin/rm -f ${objs}

elif [ ${is_swig_py} = "yes" ] ; then

  name=`echo ${name} | sed -e 's:\.i::g'`
 
  if [ ! -d ${pivy_home} ] ; then
    echo "Directory ${pivy_home} not found."
    exit
  fi

  swig_incs="-I${pivy_home} -I${pivy_home}/fake_headers ${swig_incs}"

  swig_flags="-includeall"
  swig_flags="${swig_flags} -D__PIVY__"
  swig_flags="${swig_flags} -w302,306,307,312,389,361,362,467,503,509,510"
  swig_flags="${swig_flags} -fcompact"

  swig_out_file=../exlib/py/${name}_py.icc
    
  eval ${swig_exe} -interface ${name}_py -python -c++ ${swig_flags} ${swig_incs} -o ${swig_out_file} ../exlib/py/${name}.i
    
  sed -e 's#PyErr_Format(PyExc_RuntimeError, mesg)#PyErr_Format(PyExc_RuntimeError, "%s",mesg)#g' ${swig_out_file} > tmp_0
  mv tmp_0 ${swig_out_file}
  /bin/rm -f tmp_0

elif [ ${is_swig_lua} = "yes" ] ; then

  name=`echo ${name} | sed -e 's:\.i::g'`

  swig_incs="-I${pivy_home} -I${pivy_home}/fake_headers ${swig_incs}"

  swig_flags="-includeall"
#  swig_flags="${swig_flags} -modern"
#  swig_flags="${swig_flags} -D__PIVY__"
  swig_flags="${swig_flags} -w302,306,307,312,389,361,362,467,503,509,510"
  swig_flags="${swig_flags} -fcompact"

  swig_out_file=../exlib/lua/${name}_lua.icc
    
  eval ${swig_exe} -lua -c++ ${swig_flags} ${swig_incs} -o ${swig_out_file} ../exlib/lua/${name}.i
#  eval ${swig_exe} -interface ${name}_lua -lua -c++ ${swig_flags} ${swig_incs} -o ${swig_out_file} ../exlib/lua/${name}.i
    
#  sed -e 's#PyErr_Format(PyExc_RuntimeError, mesg)#PyErr_Format(PyExc_RuntimeError, "%s",mesg)#g' ${swig_out_file} > tmp_0
#  mv tmp_0 ${swig_out_file}
#  /bin/rm -f tmp_0

elif [ ${is_flex} = "yes" ] ; then

  eval ${flex_exe} ${what}

  # Remove include unistd.h that does not compile on NT :
  sed 's|#include <unistd.h>||g' lex.yy.c > tmp0
  sed 's|static int yy_get_next_buffer (void );|//static int yy_get_next_buffer (void );|g' tmp0 > tmp1
  sed 's|static int yy_get_next_buffer (void)|static int yy_get_next_buffer(exlib::yacc::cexpr_lexer\& aLexer)|g' tmp1 > tmp2
  sed 's|yy_get_next_buffer(  )|yy_get_next_buffer(aLexer)|g' tmp2 > tmp3
  sed 's|yy|cexpr_lexer_|g' tmp3 > ../exlib/yacc/cexpr_lexer.cpp
  rm -f lex.yy.c
  rm -f tmp0 tmp1 tmp2 tmp3

elif [ ${is_yacc} = "yes" ] ; then

  eval ${yacc_exe} -d ${what}

  sed 's|yylex()|yylex(aParser.lexer())|g' y.tab.c > tmp0
  sed 's|extern int yyparse(void)|//extern int yyparse(void)|g' tmp0 > tmp1
  sed 's|yyparse(void)|yyparse(exlib::yacc::cexpr_eval\& aParser)|g' tmp1 > tmp2
  sed 's|yyerror("|yyerror(aParser,"|g' tmp2 > tmp3
  # change names :
  sed 's|yylex|cexpr_lexer_lex|g' tmp3 > tmp4
  #sed 's|yylval|cexpr_lval|g' y.tab.c > tmp
  sed 's|yy|cexpr_eval_|g' tmp4 > ../exlib/yacc/cexpr_eval.cpp

  sed 's|yy|cexpr_eval_|g' y.tab.h > tmp0
  grep -v 'IS_DECLARED' tmp0 > tmp1
  grep -v '#endif' tmp1 | grep -v '#ifdef YYSTYPE' > tmp2

  cat > ../exlib/yacc/cexpr_tokens <<HEAD_END
// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_yacc_cexpr_tokens
#define exlib_yacc_cexpr_tokens

namespace inlib {class valop;}

HEAD_END

  cat tmp2 >> ../exlib/yacc/cexpr_tokens

  cat >> ../exlib/yacc/cexpr_tokens <<TAIL_END

#endif
TAIL_END

  rm -f y.tab.c
  rm -f y.tab.h
  rm -f tmp0 tmp1 tmp2 tmp3 tmp4 tmp5


else

  #c++ -x c++-header ${cppflags} ${what}  
  #exit

  file="${dir}/${name}.cxx" #.cxx must be at the same place.
  /bin/cp ${what} ${file}

  file_o="./${name}.o"
  if [ ${build_visual} = "yes" ] ; then
    eval ${cpp_compiler} /c ${cppflags} /Fo${file_o} /Tp${file}
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${file_o} ${file}
  fi
  /bin/rm -f ${file_o}
  /bin/rm -f ${file}

fi

/bin/rm -f ${objs}
