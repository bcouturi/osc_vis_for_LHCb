
if [ "${use_Qt}" = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    echo "exlib/mgr/use_Qt : cl.exe : use_Qt not yet supported."
    exit
  fi

  #/////////////////////////////////////////////////////////////
  #/// use an lcg installation ? (lxplus or local) /////////////
  #/// If so, it coworks with the env variable BUILD_CONFIG ////
  #/////////////////////////////////////////////////////////////
  on_lxplus=no
  if [ "`uname -n | grep lxplus`" != "" ] ; then
    on_lxplus=yes
  fi

  moc_exe=
   
  if [ `uname` = Darwin ] ; then

    if [ -d /opt/local/libexec/qt5/include/QtUiTools ] ; then

      Qt_home=/opt/local/libexec/qt5

      Qt_frameworks="${Qt_home}/lib"
      cppflags="${cppflags} -F${Qt_frameworks}"

      libs="${libs} -F${Qt_frameworks} -framework QtOpenGL"
      libs="${libs} -framework QtGui -framework QtCore"
      libs="${libs} -framework QtWidgets"

      moc_exe="${Qt_home}/bin/moc"
      
      cppflags="${cppflags} -std=c++11"

    elif [ -d /opt/local/libexec/qt4/include/Qt ] ; then

      Qt_home=/opt/local/libexec/qt4

      cppflags="${cppflags} -I${Qt_home}/include"

      libs="${libs} -L${Qt_home}/lib -lQtOpenGL -lQtGUI -lQtCore"

      moc_exe="${Qt_home}/bin/moc"

      #Qt_ld_library_path="${Qt_home}/lib"

    fi

  elif [ "${on_lxplus}" = "yes" ] ; then

    build_use_qt5=no

    if   [ "${BUILD_CONFIG}" = "x86_64-slc5-gcc43-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.4.2/x86_64-slc5-gcc43-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-slc5-gcc46-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.6.3p2/x86_64-slc5-gcc46-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-slc6-gcc46-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.8.3/x86_64-slc6-gcc46-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-slc6-gcc48-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.8.4/x86_64-slc6-gcc48-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-slc6-gcc49-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.8.4-f642c/x86_64-slc6-gcc49-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-slc6-gcc62-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.8.7-0b84e/x86_64-slc6-gcc62-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-centos7-gcc62-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.8.7-0b84e/x86_64-centos7-gcc62-opt"
    elif [ "${BUILD_CONFIG}" = "x86_64-centos7-gcc7-opt" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt/4.8.7-0b84e/x86_64-centos7-gcc7-opt"
    elif [ "${BUILD_CONFIG}" = "LCG_96_gcc8" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt5/5.12.1-d6e2e/x86_64-centos7-gcc8-opt"
      build_use_qt5=yes
    elif [ "${BUILD_CONFIG}" = "LCG_95_gcc8" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt5/5.11.1-88bfc/x86_64-centos7-gcc8-opt"
      build_use_qt5=yes
    elif [ "${BUILD_CONFIG}" = "LCG_95_gcc7" ] ; then
      lcg_area=/cvmfs/lhcb.cern.ch/lib/lcg/releases
      Qt_home="${lcg_area}/qt5/5.11.1-88bfc/x86_64-centos7-gcc7-opt"
      build_use_qt5=yes
    elif [ "${BUILD_CONFIG}" = "LCG97apython3_gcc9" ] ; then
      lcg_area=/cvmfs/sft.cern.ch/lcg/releases
      Qt_home="${lcg_area}/qt5/5.12.4-d91b2/x86_64-centos7-gcc9-opt"
      build_use_qt5=yes
    else
      echo 'exlib/mgr/use_Qt : lxplus :'
      echo '  you have to define the BUILD_CONFIG variable, for example :'
      echo '    x86_64-slc5-gcc46-opt'
      echo '  and ensure to be in the corresponding environment. In particular'
      echo '  to be sure to have setup the corresponding compiler. Here :'
      echo '    sh> g++ --version'
      echo '  should return a 4.6.x version number.'
      exit
    fi

    cppflags="${cppflags} -I${Qt_home}/include"

    if [ "${build_use_qt5}" = "yes" ] ; then
      libs="${libs} -L${Qt_home}/lib -lQt5OpenGL -lQt5Widgets -lQt5Gui -lQt5Core"
    else
      libs="${libs} -L${Qt_home}/lib -lQtOpenGL -lQtGui -lQtCore"
    fi

    moc_exe="${Qt_home}/bin/moc"

    Qt_ld_library_path="${Qt_home}/lib"

    Qt_plugin_path="${Qt_home}/plugins"
   
  elif [ -d /usr/include/x86_64-linux-gnu/qt5 ] ; then  #ostackess.
    Qt_home=/usr

    Qt_inc="${Qt_home}/include/x86_64-linux-gnu/qt5"
    Qt_lib="${Qt_home}/lib/x86_64-linux-gnu"

    cppflags="${cppflags} -I${Qt_inc}"

    items="Qt53DCore Qt53DRenderer Qt53DExtras"
    for item in ${items} ; do
      if [ -f ${Qt_lib}/lib${item}.so ] ; then libs="${libs} ${Qt_lib}/lib${item}.so";fi
    done

    libs="${libs} ${Qt_lib}/libQt5OpenGL.so"
    libs="${libs} ${Qt_lib}/libQt5Widgets.so"
    libs="${libs} ${Qt_lib}/libQt5Gui.so"
    libs="${libs} ${Qt_lib}/libQt5Core.so"

    Qt_ld_library_path="${Qt_lib}"

    moc_exe="${Qt_home}/lib/x86_64-linux-gnu/qt5/bin/moc"

  elif [ -d /usr/include/qt4 ] ; then
    Qt_home=/usr

    cppflags="${cppflags} -I${Qt_home}/include/qt4"

    libs="${libs} -L${Qt_home}/lib -lQtOpenGL -lQtGui -lQtCore"

    moc_exe="${Qt_home}/bin/moc"

    Qt_ld_library_path="${Qt_home}/lib"

  elif [ -d /usr/include/Qt ] ; then
    Qt_home=/usr

    cppflags="${cppflags} -I${Qt_home}/include/Qt"

    libs="${libs} -L${Qt_home}/lib -lQtOpenGL -lQtGui -lQtCore"

    Qt_ld_library_path="${Qt_home}/lib"

    moc_exe="${Qt_home}/bin/moc-qt4"

  fi

  if [ "${moc_exe}" = "" ] ; then
    echo "exlib/mgr/use_Qt : Qt not found."
    exit
  fi

fi

