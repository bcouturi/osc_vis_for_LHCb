# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import exlib_swig_py
else:
    import exlib_swig_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_SwigPyIterator

    def value(self):
        return exlib_swig_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return exlib_swig_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return exlib_swig_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return exlib_swig_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return exlib_swig_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return exlib_swig_py.SwigPyIterator_copy(self)

    def next(self):
        return exlib_swig_py.SwigPyIterator_next(self)

    def __next__(self):
        return exlib_swig_py.SwigPyIterator___next__(self)

    def previous(self):
        return exlib_swig_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return exlib_swig_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return exlib_swig_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return exlib_swig_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return exlib_swig_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return exlib_swig_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return exlib_swig_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return exlib_swig_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in exlib_swig_py:
exlib_swig_py.SwigPyIterator_swigregister(SwigPyIterator)

class std_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return exlib_swig_py.std_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return exlib_swig_py.std_vector_double___nonzero__(self)

    def __bool__(self):
        return exlib_swig_py.std_vector_double___bool__(self)

    def __len__(self):
        return exlib_swig_py.std_vector_double___len__(self)

    def __getslice__(self, i, j):
        return exlib_swig_py.std_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return exlib_swig_py.std_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return exlib_swig_py.std_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return exlib_swig_py.std_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return exlib_swig_py.std_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return exlib_swig_py.std_vector_double___setitem__(self, *args)

    def pop(self):
        return exlib_swig_py.std_vector_double_pop(self)

    def append(self, x):
        return exlib_swig_py.std_vector_double_append(self, x)

    def empty(self):
        return exlib_swig_py.std_vector_double_empty(self)

    def size(self):
        return exlib_swig_py.std_vector_double_size(self)

    def swap(self, v):
        return exlib_swig_py.std_vector_double_swap(self, v)

    def begin(self):
        return exlib_swig_py.std_vector_double_begin(self)

    def end(self):
        return exlib_swig_py.std_vector_double_end(self)

    def rbegin(self):
        return exlib_swig_py.std_vector_double_rbegin(self)

    def rend(self):
        return exlib_swig_py.std_vector_double_rend(self)

    def clear(self):
        return exlib_swig_py.std_vector_double_clear(self)

    def get_allocator(self):
        return exlib_swig_py.std_vector_double_get_allocator(self)

    def pop_back(self):
        return exlib_swig_py.std_vector_double_pop_back(self)

    def erase(self, *args):
        return exlib_swig_py.std_vector_double_erase(self, *args)

    def __init__(self, *args):
        exlib_swig_py.std_vector_double_swiginit(self, exlib_swig_py.new_std_vector_double(*args))

    def push_back(self, x):
        return exlib_swig_py.std_vector_double_push_back(self, x)

    def front(self):
        return exlib_swig_py.std_vector_double_front(self)

    def back(self):
        return exlib_swig_py.std_vector_double_back(self)

    def assign(self, n, x):
        return exlib_swig_py.std_vector_double_assign(self, n, x)

    def resize(self, *args):
        return exlib_swig_py.std_vector_double_resize(self, *args)

    def insert(self, *args):
        return exlib_swig_py.std_vector_double_insert(self, *args)

    def reserve(self, n):
        return exlib_swig_py.std_vector_double_reserve(self, n)

    def capacity(self):
        return exlib_swig_py.std_vector_double_capacity(self)
    __swig_destroy__ = exlib_swig_py.delete_std_vector_double

# Register std_vector_double in exlib_swig_py:
exlib_swig_py.std_vector_double_swigregister(std_vector_double)

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = exlib_swig_py.ios_base_erase_event
    imbue_event = exlib_swig_py.ios_base_imbue_event
    copyfmt_event = exlib_swig_py.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return exlib_swig_py.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return exlib_swig_py.ios_base_flags(self, *args)

    def setf(self, *args):
        return exlib_swig_py.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return exlib_swig_py.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return exlib_swig_py.ios_base_precision(self, *args)

    def width(self, *args):
        return exlib_swig_py.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return exlib_swig_py.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return exlib_swig_py.ios_base_imbue(self, __loc)

    def getloc(self):
        return exlib_swig_py.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return exlib_swig_py.ios_base_xalloc()

    def iword(self, __ix):
        return exlib_swig_py.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return exlib_swig_py.ios_base_pword(self, __ix)
    __swig_destroy__ = exlib_swig_py.delete_ios_base

# Register ios_base in exlib_swig_py:
exlib_swig_py.ios_base_swigregister(ios_base)
cvar = exlib_swig_py.cvar
ios_base.boolalpha = exlib_swig_py.cvar.ios_base_boolalpha
ios_base.dec = exlib_swig_py.cvar.ios_base_dec
ios_base.fixed = exlib_swig_py.cvar.ios_base_fixed
ios_base.hex = exlib_swig_py.cvar.ios_base_hex
ios_base.internal = exlib_swig_py.cvar.ios_base_internal
ios_base.left = exlib_swig_py.cvar.ios_base_left
ios_base.oct = exlib_swig_py.cvar.ios_base_oct
ios_base.right = exlib_swig_py.cvar.ios_base_right
ios_base.scientific = exlib_swig_py.cvar.ios_base_scientific
ios_base.showbase = exlib_swig_py.cvar.ios_base_showbase
ios_base.showpoint = exlib_swig_py.cvar.ios_base_showpoint
ios_base.showpos = exlib_swig_py.cvar.ios_base_showpos
ios_base.skipws = exlib_swig_py.cvar.ios_base_skipws
ios_base.unitbuf = exlib_swig_py.cvar.ios_base_unitbuf
ios_base.uppercase = exlib_swig_py.cvar.ios_base_uppercase
ios_base.adjustfield = exlib_swig_py.cvar.ios_base_adjustfield
ios_base.basefield = exlib_swig_py.cvar.ios_base_basefield
ios_base.floatfield = exlib_swig_py.cvar.ios_base_floatfield
ios_base.badbit = exlib_swig_py.cvar.ios_base_badbit
ios_base.eofbit = exlib_swig_py.cvar.ios_base_eofbit
ios_base.failbit = exlib_swig_py.cvar.ios_base_failbit
ios_base.goodbit = exlib_swig_py.cvar.ios_base_goodbit
ios_base.app = exlib_swig_py.cvar.ios_base_app
ios_base.ate = exlib_swig_py.cvar.ios_base_ate
ios_base.binary = exlib_swig_py.cvar.ios_base_binary
ios_base.ios_base_in = exlib_swig_py.cvar.ios_base_ios_base_in
ios_base.out = exlib_swig_py.cvar.ios_base_out
ios_base.trunc = exlib_swig_py.cvar.ios_base_trunc
ios_base.beg = exlib_swig_py.cvar.ios_base_beg
ios_base.cur = exlib_swig_py.cvar.ios_base_cur
ios_base.end = exlib_swig_py.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return exlib_swig_py.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    return exlib_swig_py.ios_base_xalloc()

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return exlib_swig_py.ios_rdstate(self)

    def clear(self, *args):
        return exlib_swig_py.ios_clear(self, *args)

    def setstate(self, __state):
        return exlib_swig_py.ios_setstate(self, __state)

    def good(self):
        return exlib_swig_py.ios_good(self)

    def eof(self):
        return exlib_swig_py.ios_eof(self)

    def fail(self):
        return exlib_swig_py.ios_fail(self)

    def bad(self):
        return exlib_swig_py.ios_bad(self)

    def exceptions(self, *args):
        return exlib_swig_py.ios_exceptions(self, *args)

    def __init__(self, __sb):
        exlib_swig_py.ios_swiginit(self, exlib_swig_py.new_ios(__sb))
    __swig_destroy__ = exlib_swig_py.delete_ios

    def tie(self, *args):
        return exlib_swig_py.ios_tie(self, *args)

    def rdbuf(self, *args):
        return exlib_swig_py.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return exlib_swig_py.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return exlib_swig_py.ios_fill(self, *args)

    def imbue(self, __loc):
        return exlib_swig_py.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return exlib_swig_py.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return exlib_swig_py.ios_widen(self, __c)

# Register ios in exlib_swig_py:
exlib_swig_py.ios_swigregister(ios)

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        exlib_swig_py.ostream_swiginit(self, exlib_swig_py.new_ostream(__sb))
    __swig_destroy__ = exlib_swig_py.delete_ostream

    def __lshift__(self, *args):
        return exlib_swig_py.ostream___lshift__(self, *args)

    def put(self, __c):
        return exlib_swig_py.ostream_put(self, __c)

    def write(self, __s, __n):
        return exlib_swig_py.ostream_write(self, __s, __n)

    def flush(self):
        return exlib_swig_py.ostream_flush(self)

    def tellp(self):
        return exlib_swig_py.ostream_tellp(self)

    def seekp(self, *args):
        return exlib_swig_py.ostream_seekp(self, *args)

# Register ostream in exlib_swig_py:
exlib_swig_py.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        exlib_swig_py.istream_swiginit(self, exlib_swig_py.new_istream(__sb))
    __swig_destroy__ = exlib_swig_py.delete_istream

    def __rshift__(self, *args):
        return exlib_swig_py.istream___rshift__(self, *args)

    def gcount(self):
        return exlib_swig_py.istream_gcount(self)

    def get(self, *args):
        return exlib_swig_py.istream_get(self, *args)

    def getline(self, *args):
        return exlib_swig_py.istream_getline(self, *args)

    def ignore(self, *args):
        return exlib_swig_py.istream_ignore(self, *args)

    def peek(self):
        return exlib_swig_py.istream_peek(self)

    def read(self, __s, __n):
        return exlib_swig_py.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return exlib_swig_py.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return exlib_swig_py.istream_putback(self, __c)

    def unget(self):
        return exlib_swig_py.istream_unget(self)

    def sync(self):
        return exlib_swig_py.istream_sync(self)

    def tellg(self):
        return exlib_swig_py.istream_tellg(self)

    def seekg(self, *args):
        return exlib_swig_py.istream_seekg(self, *args)

# Register istream in exlib_swig_py:
exlib_swig_py.istream_swigregister(istream)

class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        exlib_swig_py.iostream_swiginit(self, exlib_swig_py.new_iostream(__sb))
    __swig_destroy__ = exlib_swig_py.delete_iostream

# Register iostream in exlib_swig_py:
exlib_swig_py.iostream_swigregister(iostream)

endl_cb_ptr = exlib_swig_py.endl_cb_ptr
endl = exlib_swig_py.endl
ends_cb_ptr = exlib_swig_py.ends_cb_ptr
ends = exlib_swig_py.ends
flush_cb_ptr = exlib_swig_py.flush_cb_ptr
flush = exlib_swig_py.flush

def snpf(*args):
    return exlib_swig_py.snpf(*args)

def sprintf(*args):
    return exlib_swig_py.sprintf(*args)

def pi():
    return exlib_swig_py.pi()

def two_pi():
    return exlib_swig_py.two_pi()

def half_pi():
    return exlib_swig_py.half_pi()

def deg2rad():
    return exlib_swig_py.deg2rad()

def in_domain_all(arg1):
    return exlib_swig_py.in_domain_all(arg1)

def in_domain_log(a_x):
    return exlib_swig_py.in_domain_log(a_x)

def in_domain_tan(a_x):
    return exlib_swig_py.in_domain_tan(a_x)

def in_domain_acos(a_x):
    return exlib_swig_py.in_domain_acos(a_x)
class random_flat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def shoot(self):
        return exlib_swig_py.random_flat_shoot(self)

    def __init__(self):
        exlib_swig_py.random_flat_swiginit(self, exlib_swig_py.new_random_flat())
    __swig_destroy__ = exlib_swig_py.delete_random_flat

# Register random_flat in exlib_swig_py:
exlib_swig_py.random_flat_swigregister(random_flat)

class random_gauss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        exlib_swig_py.random_gauss_swiginit(self, exlib_swig_py.new_random_gauss(*args))

    def shoot(self):
        return exlib_swig_py.random_gauss_shoot(self)
    __swig_destroy__ = exlib_swig_py.delete_random_gauss

# Register random_gauss in exlib_swig_py:
exlib_swig_py.random_gauss_swigregister(random_gauss)

class random_bw(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        exlib_swig_py.random_bw_swiginit(self, exlib_swig_py.new_random_bw(*args))

    def shoot(self):
        return exlib_swig_py.random_bw_shoot(self)
    __swig_destroy__ = exlib_swig_py.delete_random_bw

# Register random_bw in exlib_swig_py:
exlib_swig_py.random_bw_swigregister(random_bw)

class random_exp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        exlib_swig_py.random_exp_swiginit(self, exlib_swig_py.new_random_exp(*args))

    def shoot(self):
        return exlib_swig_py.random_exp_shoot(self)
    __swig_destroy__ = exlib_swig_py.delete_random_exp

# Register random_exp in exlib_swig_py:
exlib_swig_py.random_exp_swigregister(random_exp)


def str_dup(a_cstr, a_inc=True):
    return exlib_swig_py.str_dup(a_cstr, a_inc)

def str_del(a_cstr):
    return exlib_swig_py.str_del(a_cstr)

def str_new(*args):
    return exlib_swig_py.str_new(*args)

def str_cat(*args):
    return exlib_swig_py.str_cat(*args)

def str_rev(a_s):
    return exlib_swig_py.str_rev(a_s)

def str_sub(a_s, a_pos, a_sz=0):
    return exlib_swig_py.str_sub(a_s, a_pos, a_sz)

def str_rep(a_s, a_pos, a_sz, a_new):
    return exlib_swig_py.str_rep(a_s, a_pos, a_sz, a_new)

def sout(a_string):
    return exlib_swig_py.sout(a_string)

def is_upper(a_char):
    return exlib_swig_py.is_upper(a_char)

def is_lower(a_char):
    return exlib_swig_py.is_lower(a_char)

def is_digit(a_char):
    return exlib_swig_py.is_digit(a_char)

def is_letter(a_char):
    return exlib_swig_py.is_letter(a_char)

def is_printable(a_char):
    return exlib_swig_py.is_printable(a_char)

def int32_format():
    return exlib_swig_py.int32_format()

def int64_format():
    return exlib_swig_py.int64_format()

def uint32_format():
    return exlib_swig_py.uint32_format()

def uint64_format():
    return exlib_swig_py.uint64_format()

def uint32_mx():
    return exlib_swig_py.uint32_mx()

def uint64_mx():
    return exlib_swig_py.uint64_mx()
class fits_bit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_c = property(exlib_swig_py.fits_bit_m_c_get, exlib_swig_py.fits_bit_m_c_set)

    def __init__(self):
        exlib_swig_py.fits_bit_swiginit(self, exlib_swig_py.new_fits_bit())
    __swig_destroy__ = exlib_swig_py.delete_fits_bit

# Register fits_bit in exlib_swig_py:
exlib_swig_py.fits_bit_swigregister(fits_bit)

class csv_time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_l = property(exlib_swig_py.csv_time_m_l_get, exlib_swig_py.csv_time_m_l_set)

    def __init__(self):
        exlib_swig_py.csv_time_swiginit(self, exlib_swig_py.new_csv_time())
    __swig_destroy__ = exlib_swig_py.delete_csv_time

# Register csv_time in exlib_swig_py:
exlib_swig_py.csv_time_swigregister(csv_time)


def size_char():
    return exlib_swig_py.size_char()

def size_short():
    return exlib_swig_py.size_short()

def size_int():
    return exlib_swig_py.size_int()

def size_int64():
    return exlib_swig_py.size_int64()

def size_float():
    return exlib_swig_py.size_float()

def size_double():
    return exlib_swig_py.size_double()

def tosx(a_value):
    return exlib_swig_py.tosx(a_value)

def tos(*args):
    return exlib_swig_py.tos(*args)

def to(*args):
    return exlib_swig_py.to(*args)

def d2s(a_value):
    return exlib_swig_py.d2s(a_value)

def soutd(a_value):
    return exlib_swig_py.soutd(a_value)

def words(*args):
    return exlib_swig_py.words(*args)

def sep():
    return exlib_swig_py.sep()

def psep():
    return exlib_swig_py.psep()

def res_sep():
    return exlib_swig_py.res_sep()

def isenv(a_string):
    return exlib_swig_py.isenv(a_string)

def getenv(a_string, a_value):
    return exlib_swig_py.getenv(a_string, a_value)

def get_env_bool(a_string, a_v):
    return exlib_swig_py.get_env_bool(a_string, a_v)

def putenv(a_env, a_value):
    return exlib_swig_py.putenv(a_env, a_value)

def rmenv(a_env):
    return exlib_swig_py.rmenv(a_env)

def check_getenv(a_out, a_new, a_old, a_env):
    return exlib_swig_py.check_getenv(a_out, a_new, a_old, a_env)

def execute(a_string):
    return exlib_swig_py.execute(a_string)

def env_append(a_env, a_sep, a_vals):
    return exlib_swig_py.env_append(a_env, a_sep, a_vals)

def env_path_append(a_env, a_paths):
    return exlib_swig_py.env_path_append(a_env, a_paths)

def env_append_path(a_env, a_path):
    return exlib_swig_py.env_append_path(a_env, a_path)

def expand_vars(a_string):
    return exlib_swig_py.expand_vars(a_string)

def file_name(a_path, a_name):
    return exlib_swig_py.file_name(a_path, a_name)

def plugin_prefix():
    return exlib_swig_py.plugin_prefix()

def plugin_suffix():
    return exlib_swig_py.plugin_suffix()

def plugin_name(a_name):
    return exlib_swig_py.plugin_name(a_name)

def so_name(a_name):
    return exlib_swig_py.so_name(a_name)

def signature(a_file, a_head, a_num):
    return exlib_swig_py.signature(a_file, a_head, a_num)

def is_gzip(a_file, a_is):
    return exlib_swig_py.is_gzip(a_file, a_is)

def gzip_usize(a_file, a_usz):
    return exlib_swig_py.gzip_usize(a_file, a_usz)

def suffix(a_string, a_back=True):
    return exlib_swig_py.suffix(a_string, a_back)

def nosuffix(a_string, a_back=True):
    return exlib_swig_py.nosuffix(a_string, a_back)

def base_name(a_path):
    return exlib_swig_py.base_name(a_path)

def is_absolute_path(a_path):
    return exlib_swig_py.is_absolute_path(a_path)

def path_name_suffix(a_string, a_path, a_name, a_suffix):
    return exlib_swig_py.path_name_suffix(a_string, a_path, a_name, a_suffix)

def dir_name(a_path, a_num=1):
    return exlib_swig_py.dir_name(a_path, a_num)

def is_f77(a_path):
    return exlib_swig_py.is_f77(a_path)

def is_cpp(a_path):
    return exlib_swig_py.is_cpp(a_path)

def exists(a_string):
    return exlib_swig_py.exists(a_string)

def size(a_file, a_size):
    return exlib_swig_py.size(a_file, a_size)

def is_empty(a_file):
    return exlib_swig_py.is_empty(a_file)

def file_write(*args):
    return exlib_swig_py.file_write(*args)

def read_buff(a_file, a_buff, a_lbuf, a_length):
    return exlib_swig_py.read_buff(a_file, a_buff, a_lbuf, a_length)

def read_cstring(a_file, a_buff, a_lbuf, a_length):
    return exlib_swig_py.read_cstring(a_file, a_buff, a_lbuf, a_length)

def read(a_file, a_text):
    return exlib_swig_py.read(a_file, a_text)

def read_num(*args):
    return exlib_swig_py.read_num(*args)

def read_bytes(a_file, a_buffer, a_length):
    return exlib_swig_py.read_bytes(a_file, a_buffer, a_length)

def write_bytes(a_file, a_buffer, a_length):
    return exlib_swig_py.write_bytes(a_file, a_buffer, a_length)

def is_zip(a_file, a_is):
    return exlib_swig_py.is_zip(a_file, a_is)

def is_jpeg(a_file, a_is):
    return exlib_swig_py.is_jpeg(a_file, a_is)

def is_png(a_file, a_is):
    return exlib_swig_py.is_png(a_file, a_is)

def is_root(a_file, a_is):
    return exlib_swig_py.is_root(a_file, a_is)

def is_iv(a_file, a_is):
    return exlib_swig_py.is_iv(a_file, a_is)

def is_fog(a_file, a_is):
    return exlib_swig_py.is_fog(a_file, a_is)

def is_dot(a_file, a_is):
    return exlib_swig_py.is_dot(a_file, a_is)

def is_dcm(a_file, a_is):
    return exlib_swig_py.is_dcm(a_file, a_is)

def is_aida(a_file, a_is):
    return exlib_swig_py.is_aida(a_file, a_is)

def is_gdml(a_file, a_is):
    return exlib_swig_py.is_gdml(a_file, a_is)

def is_exsg(*args):
    return exlib_swig_py.is_exsg(*args)

def is_bsg(*args):
    return exlib_swig_py.is_bsg(*args)

def is_scenarios(a_file, a_is):
    return exlib_swig_py.is_scenarios(a_file, a_is)

def is_slides(a_file, a_is):
    return exlib_swig_py.is_slides(a_file, a_is)

def is_fits(a_file, a_is):
    return exlib_swig_py.is_fits(a_file, a_is)

def is_hdf(a_file, a_is):
    return exlib_swig_py.is_hdf(a_file, a_is)

def is_ps(a_file, a_is):
    return exlib_swig_py.is_ps(a_file, a_is)

def is_csv(*args):
    return exlib_swig_py.is_csv(*args)

def is_hippo(a_file, a_is):
    return exlib_swig_py.is_hippo(a_file, a_is)

def mime_type(a_file, a_mime):
    return exlib_swig_py.mime_type(a_file, a_mime)

def s_format_guessed():
    return exlib_swig_py.s_format_guessed()

def s_format_hdf5():
    return exlib_swig_py.s_format_hdf5()

def s_format_fits():
    return exlib_swig_py.s_format_fits()

def s_format_fog():
    return exlib_swig_py.s_format_fog()

def s_format_dot():
    return exlib_swig_py.s_format_dot()

def s_format_dcm():
    return exlib_swig_py.s_format_dcm()

def s_format_iv():
    return exlib_swig_py.s_format_iv()

def s_format_jpeg():
    return exlib_swig_py.s_format_jpeg()

def s_format_png():
    return exlib_swig_py.s_format_png()

def s_format_root():
    return exlib_swig_py.s_format_root()

def s_format_csv():
    return exlib_swig_py.s_format_csv()

def s_format_hippo():
    return exlib_swig_py.s_format_hippo()

def s_format_scenarios():
    return exlib_swig_py.s_format_scenarios()

def s_format_slides():
    return exlib_swig_py.s_format_slides()

def s_format_zvid():
    return exlib_swig_py.s_format_zvid()

def s_format_exsg():
    return exlib_swig_py.s_format_exsg()

def s_format_gdml():
    return exlib_swig_py.s_format_gdml()

def s_format_mac():
    return exlib_swig_py.s_format_mac()

def s_format_cmnd():
    return exlib_swig_py.s_format_cmnd()

def s_format_aida():
    return exlib_swig_py.s_format_aida()

def s_format_bsg():
    return exlib_swig_py.s_format_bsg()

def s_ext_hdf5():
    return exlib_swig_py.s_ext_hdf5()

def s_ext_fits():
    return exlib_swig_py.s_ext_fits()

def s_ext_fog():
    return exlib_swig_py.s_ext_fog()

def s_ext_dot():
    return exlib_swig_py.s_ext_dot()

def s_ext_dcm():
    return exlib_swig_py.s_ext_dcm()

def s_ext_iv():
    return exlib_swig_py.s_ext_iv()

def s_ext_hiv():
    return exlib_swig_py.s_ext_hiv()

def s_ext_jpg():
    return exlib_swig_py.s_ext_jpg()

def s_ext_png():
    return exlib_swig_py.s_ext_png()

def s_ext_root():
    return exlib_swig_py.s_ext_root()

def s_ext_csv():
    return exlib_swig_py.s_ext_csv()

def s_ext_hiptxt():
    return exlib_swig_py.s_ext_hiptxt()

def s_ext_tnt():
    return exlib_swig_py.s_ext_tnt()

def s_ext_scenarios():
    return exlib_swig_py.s_ext_scenarios()

def s_ext_slides():
    return exlib_swig_py.s_ext_slides()

def s_ext_zvid():
    return exlib_swig_py.s_ext_zvid()

def s_ext_exsg():
    return exlib_swig_py.s_ext_exsg()

def s_ext_gdml():
    return exlib_swig_py.s_ext_gdml()

def s_ext_mac():
    return exlib_swig_py.s_ext_mac()

def s_ext_cmnd():
    return exlib_swig_py.s_ext_cmnd()

def s_ext_aida():
    return exlib_swig_py.s_ext_aida()

def s_ext_bsg():
    return exlib_swig_py.s_ext_bsg()

def formats(a_v):
    return exlib_swig_py.formats(a_v)

def ext_fmt(a_ext):
    return exlib_swig_py.ext_fmt(a_ext)

def found(a_file, a_what, a_found):
    return exlib_swig_py.found(a_file, a_what, a_found)

def std_remove(*args):
    return exlib_swig_py.std_remove(*args)

def std_rename(a_from, a_to):
    return exlib_swig_py.std_rename(a_from, a_to)
chmod_user = exlib_swig_py.chmod_user
chmod_group = exlib_swig_py.chmod_group
chmod_other = exlib_swig_py.chmod_other
chmod_all = exlib_swig_py.chmod_all
chmod_add = exlib_swig_py.chmod_add
chmod_sub = exlib_swig_py.chmod_sub
chmod_read = exlib_swig_py.chmod_read
chmod_write = exlib_swig_py.chmod_write
chmod_exec = exlib_swig_py.chmod_exec

def chmod(a_file, a_who, a_op, a_what):
    return exlib_swig_py.chmod(a_file, a_who, a_op, a_what)

def quote(a_path):
    return exlib_swig_py.quote(a_path)

def mv(a_from, a_to):
    return exlib_swig_py.mv(a_from, a_to)

def cp(a_from, a_to):
    return exlib_swig_py.cp(a_from, a_to)

def rm(a_file):
    return exlib_swig_py.rm(a_file)
class reader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_reader

    def open(self, arg2):
        return exlib_swig_py.reader_open(self, arg2)

    def close(self):
        return exlib_swig_py.reader_close(self)

    def is_open(self):
        return exlib_swig_py.reader_is_open(self)

    def read(self, arg2, arg3, arg4):
        return exlib_swig_py.reader_read(self, arg2, arg3, arg4)

# Register reader in exlib_swig_py:
exlib_swig_py.reader_swigregister(reader)

class FILE_reader(reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def open(self, a_file):
        return exlib_swig_py.FILE_reader_open(self, a_file)

    def close(self):
        return exlib_swig_py.FILE_reader_close(self)

    def is_open(self):
        return exlib_swig_py.FILE_reader_is_open(self)

    def read(self, a_buff, a_lbuf, a_length):
        return exlib_swig_py.FILE_reader_read(self, a_buff, a_lbuf, a_length)

    def __init__(self):
        exlib_swig_py.FILE_reader_swiginit(self, exlib_swig_py.new_FILE_reader())
    __swig_destroy__ = exlib_swig_py.delete_FILE_reader

# Register FILE_reader in exlib_swig_py:
exlib_swig_py.FILE_reader_swigregister(FILE_reader)


def key_axis_x_title():
    return exlib_swig_py.key_axis_x_title()

def key_axis_y_title():
    return exlib_swig_py.key_axis_y_title()

def key_axis_z_title():
    return exlib_swig_py.key_axis_z_title()
class base_histo_duidd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def title(self, *args):
        return exlib_swig_py.base_histo_duidd_title(self, *args)

    def set_title(self, a_title):
        return exlib_swig_py.base_histo_duidd_set_title(self, a_title)

    def dimension(self):
        return exlib_swig_py.base_histo_duidd_dimension(self)

    def entries(self):
        return exlib_swig_py.base_histo_duidd_entries(self)

    def all_entries(self):
        return exlib_swig_py.base_histo_duidd_all_entries(self)

    def extra_entries(self):
        return exlib_swig_py.base_histo_duidd_extra_entries(self)

    def equivalent_bin_entries(self):
        return exlib_swig_py.base_histo_duidd_equivalent_bin_entries(self)

    def sum_bin_heights(self):
        return exlib_swig_py.base_histo_duidd_sum_bin_heights(self)

    def sum_all_bin_heights(self):
        return exlib_swig_py.base_histo_duidd_sum_all_bin_heights(self)

    def sum_extra_bin_heights(self):
        return exlib_swig_py.base_histo_duidd_sum_extra_bin_heights(self)

    def min_bin_height(self):
        return exlib_swig_py.base_histo_duidd_min_bin_height(self)

    def max_bin_height(self):
        return exlib_swig_py.base_histo_duidd_max_bin_height(self)

    def get_entries(self):
        return exlib_swig_py.base_histo_duidd_get_entries(self)

    def get_Sw(self):
        return exlib_swig_py.base_histo_duidd_get_Sw(self)

    def get_Sw2(self):
        return exlib_swig_py.base_histo_duidd_get_Sw2(self)

    def get_ith_axis_Sxw(self, a_axis, a_value):
        return exlib_swig_py.base_histo_duidd_get_ith_axis_Sxw(self, a_axis, a_value)

    def get_ith_axis_Sx2w(self, a_axis, a_value):
        return exlib_swig_py.base_histo_duidd_get_ith_axis_Sx2w(self, a_axis, a_value)

    def get_all_entries(self):
        return exlib_swig_py.base_histo_duidd_get_all_entries(self)

    def get_indices(self, aOffset, aIs):
        return exlib_swig_py.base_histo_duidd_get_indices(self, aOffset, aIs)

    def is_out(self, aOffset):
        return exlib_swig_py.base_histo_duidd_is_out(self, aOffset)

    def get_offset(self, aIs, a_offset):
        return exlib_swig_py.base_histo_duidd_get_offset(self, aIs, a_offset)

    def bins_entries(self):
        return exlib_swig_py.base_histo_duidd_bins_entries(self)

    def bins_sum_w(self):
        return exlib_swig_py.base_histo_duidd_bins_sum_w(self)

    def bins_sum_w2(self):
        return exlib_swig_py.base_histo_duidd_bins_sum_w2(self)

    def bins_sum_xw(self):
        return exlib_swig_py.base_histo_duidd_bins_sum_xw(self)

    def bins_sum_x2w(self):
        return exlib_swig_py.base_histo_duidd_bins_sum_x2w(self)

    def get_axis(self, aIndex):
        return exlib_swig_py.base_histo_duidd_get_axis(self, aIndex)

    def get_bins(self):
        return exlib_swig_py.base_histo_duidd_get_bins(self)

    def get_title(self):
        return exlib_swig_py.base_histo_duidd_get_title(self)

    def get_dimension(self):
        return exlib_swig_py.base_histo_duidd_get_dimension(self)

    def is_valid(self):
        return exlib_swig_py.base_histo_duidd_is_valid(self)

    def annotations(self, *args):
        return exlib_swig_py.base_histo_duidd_annotations(self, *args)

    def add_annotation(self, a_key, a_value):
        return exlib_swig_py.base_histo_duidd_add_annotation(self, a_key, a_value)

    def annotation(self, a_key, a_value):
        return exlib_swig_py.base_histo_duidd_annotation(self, a_key, a_value)

# Register base_histo_duidd in exlib_swig_py:
exlib_swig_py.base_histo_duidd_swigregister(base_histo_duidd)

class b1_duidd(base_histo_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bin_error(self, arg2):
        return exlib_swig_py.b1_duidd_bin_error(self, arg2)

    def update_fast_getters(self):
        return exlib_swig_py.b1_duidd_update_fast_getters(self)

    def coord_to_index(self, aCoord):
        return exlib_swig_py.b1_duidd_coord_to_index(self, aCoord)

    def mean(self):
        return exlib_swig_py.b1_duidd_mean(self)

    def rms(self):
        return exlib_swig_py.b1_duidd_rms(self)

    def bin_entries(self, aI):
        return exlib_swig_py.b1_duidd_bin_entries(self, aI)

    def bin_Sw(self, aI):
        return exlib_swig_py.b1_duidd_bin_Sw(self, aI)

    def bin_Sw2(self, aI):
        return exlib_swig_py.b1_duidd_bin_Sw2(self, aI)

    def bin_Sxw(self, aI):
        return exlib_swig_py.b1_duidd_bin_Sxw(self, aI)

    def bin_Sx2w(self, aI):
        return exlib_swig_py.b1_duidd_bin_Sx2w(self, aI)

    def bin_height(self, aI):
        return exlib_swig_py.b1_duidd_bin_height(self, aI)

    def bin_center(self, aI):
        return exlib_swig_py.b1_duidd_bin_center(self, aI)

    def bin_mean(self, aI):
        return exlib_swig_py.b1_duidd_bin_mean(self, aI)

    def bin_rms(self, aI):
        return exlib_swig_py.b1_duidd_bin_rms(self, aI)

    def axis(self, *args):
        return exlib_swig_py.b1_duidd_axis(self, *args)

    def hprint(self, a_out):
        return exlib_swig_py.b1_duidd_hprint(self, a_out)

    def configure(self, *args):
        return exlib_swig_py.b1_duidd_configure(self, *args)

# Register b1_duidd in exlib_swig_py:
exlib_swig_py.b1_duidd_swigregister(b1_duidd)

class b2_duidd(base_histo_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bin_error(self, arg2, arg3):
        return exlib_swig_py.b2_duidd_bin_error(self, arg2, arg3)

    def update_fast_getters(self):
        return exlib_swig_py.b2_duidd_update_fast_getters(self)

    def mean_x(self):
        return exlib_swig_py.b2_duidd_mean_x(self)

    def mean_y(self):
        return exlib_swig_py.b2_duidd_mean_y(self)

    def rms_x(self):
        return exlib_swig_py.b2_duidd_rms_x(self)

    def rms_y(self):
        return exlib_swig_py.b2_duidd_rms_y(self)

    def coord_to_index_x(self, aCoord):
        return exlib_swig_py.b2_duidd_coord_to_index_x(self, aCoord)

    def coord_to_index_y(self, aCoord):
        return exlib_swig_py.b2_duidd_coord_to_index_y(self, aCoord)

    def bin_entries(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_entries(self, aI, aJ)

    def bin_Sw(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_Sw(self, aI, aJ)

    def bin_Sw2(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_Sw2(self, aI, aJ)

    def bin_Sxw(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_Sxw(self, aI, aJ)

    def bin_Sx2w(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_Sx2w(self, aI, aJ)

    def bin_Syw(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_Syw(self, aI, aJ)

    def bin_Sy2w(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_Sy2w(self, aI, aJ)

    def bin_height(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_height(self, aI, aJ)

    def bin_center_x(self, aI):
        return exlib_swig_py.b2_duidd_bin_center_x(self, aI)

    def bin_center_y(self, aJ):
        return exlib_swig_py.b2_duidd_bin_center_y(self, aJ)

    def bin_mean_x(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_mean_x(self, aI, aJ)

    def bin_mean_y(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_mean_y(self, aI, aJ)

    def bin_rms_x(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_rms_x(self, aI, aJ)

    def bin_rms_y(self, aI, aJ):
        return exlib_swig_py.b2_duidd_bin_rms_y(self, aI, aJ)

    def axis_x(self, *args):
        return exlib_swig_py.b2_duidd_axis_x(self, *args)

    def axis_y(self, *args):
        return exlib_swig_py.b2_duidd_axis_y(self, *args)

    def bin_entries_x(self, aI):
        return exlib_swig_py.b2_duidd_bin_entries_x(self, aI)

    def bin_height_x(self, aI):
        return exlib_swig_py.b2_duidd_bin_height_x(self, aI)

    def bin_entries_y(self, aJ):
        return exlib_swig_py.b2_duidd_bin_entries_y(self, aJ)

    def bin_height_y(self, aJ):
        return exlib_swig_py.b2_duidd_bin_height_y(self, aJ)

    def hprint(self, a_out):
        return exlib_swig_py.b2_duidd_hprint(self, a_out)

    def configure(self, *args):
        return exlib_swig_py.b2_duidd_configure(self, *args)

# Register b2_duidd in exlib_swig_py:
exlib_swig_py.b2_duidd_swigregister(b2_duidd)

class b3_duidd(base_histo_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bin_error(self, arg2, arg3, arg4):
        return exlib_swig_py.b3_duidd_bin_error(self, arg2, arg3, arg4)

    def update_fast_getters(self):
        return exlib_swig_py.b3_duidd_update_fast_getters(self)

    def coord_to_index_x(self, aCoord):
        return exlib_swig_py.b3_duidd_coord_to_index_x(self, aCoord)

    def coord_to_index_y(self, aCoord):
        return exlib_swig_py.b3_duidd_coord_to_index_y(self, aCoord)

    def coord_to_index_z(self, aCoord):
        return exlib_swig_py.b3_duidd_coord_to_index_z(self, aCoord)

    def mean_x(self):
        return exlib_swig_py.b3_duidd_mean_x(self)

    def mean_y(self):
        return exlib_swig_py.b3_duidd_mean_y(self)

    def mean_z(self):
        return exlib_swig_py.b3_duidd_mean_z(self)

    def rms_x(self):
        return exlib_swig_py.b3_duidd_rms_x(self)

    def rms_y(self):
        return exlib_swig_py.b3_duidd_rms_y(self)

    def rms_z(self):
        return exlib_swig_py.b3_duidd_rms_z(self)

    def bin_entries(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_entries(self, aI, aJ, aK)

    def bin_height(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_height(self, aI, aJ, aK)

    def bin_center_x(self, aI):
        return exlib_swig_py.b3_duidd_bin_center_x(self, aI)

    def bin_center_y(self, aJ):
        return exlib_swig_py.b3_duidd_bin_center_y(self, aJ)

    def bin_center_z(self, aK):
        return exlib_swig_py.b3_duidd_bin_center_z(self, aK)

    def bin_mean_x(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_mean_x(self, aI, aJ, aK)

    def bin_mean_y(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_mean_y(self, aI, aJ, aK)

    def bin_mean_z(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_mean_z(self, aI, aJ, aK)

    def bin_rms_x(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_rms_x(self, aI, aJ, aK)

    def bin_rms_y(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_rms_y(self, aI, aJ, aK)

    def bin_rms_z(self, aI, aJ, aK):
        return exlib_swig_py.b3_duidd_bin_rms_z(self, aI, aJ, aK)

    def axis_x(self, *args):
        return exlib_swig_py.b3_duidd_axis_x(self, *args)

    def axis_y(self, *args):
        return exlib_swig_py.b3_duidd_axis_y(self, *args)

    def axis_z(self, *args):
        return exlib_swig_py.b3_duidd_axis_z(self, *args)

    def bin_entries_x(self, aI):
        return exlib_swig_py.b3_duidd_bin_entries_x(self, aI)

    def bin_entries_y(self, aJ):
        return exlib_swig_py.b3_duidd_bin_entries_y(self, aJ)

    def bin_entries_z(self, aK):
        return exlib_swig_py.b3_duidd_bin_entries_z(self, aK)

    def bin_height_x(self, aI):
        return exlib_swig_py.b3_duidd_bin_height_x(self, aI)

    def bin_height_y(self, aJ):
        return exlib_swig_py.b3_duidd_bin_height_y(self, aJ)

    def bin_height_z(self, aK):
        return exlib_swig_py.b3_duidd_bin_height_z(self, aK)

    def hprint(self, a_out):
        return exlib_swig_py.b3_duidd_hprint(self, a_out)
    __swig_destroy__ = exlib_swig_py.delete_b3_duidd

    def configure(self, *args):
        return exlib_swig_py.b3_duidd_configure(self, *args)

# Register b3_duidd in exlib_swig_py:
exlib_swig_py.b3_duidd_swigregister(b3_duidd)

class h1_duidd(b1_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI):
        return exlib_swig_py.h1_duidd_bin_error(self, aI)

    def scale(self, aFactor):
        return exlib_swig_py.h1_duidd_scale(self, aFactor)

    def copy_from_data(self, a_from):
        return exlib_swig_py.h1_duidd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return exlib_swig_py.h1_duidd_get_histo_data(self)

    def reset(self):
        return exlib_swig_py.h1_duidd_reset(self)

    def fill(self, aX, aWeight=1):
        return exlib_swig_py.h1_duidd_fill(self, aX, aWeight)

    def add(self, a_histo):
        return exlib_swig_py.h1_duidd_add(self, a_histo)

    def subtract(self, a_histo):
        return exlib_swig_py.h1_duidd_subtract(self, a_histo)

    def multiply(self, *args):
        return exlib_swig_py.h1_duidd_multiply(self, *args)

    def divide(self, a_histo):
        return exlib_swig_py.h1_duidd_divide(self, a_histo)

    def gather_bins(self, a_factor):
        return exlib_swig_py.h1_duidd_gather_bins(self, a_factor)
    __swig_destroy__ = exlib_swig_py.delete_h1_duidd

    def __init__(self, *args):
        exlib_swig_py.h1_duidd_swiginit(self, exlib_swig_py.new_h1_duidd(*args))

# Register h1_duidd in exlib_swig_py:
exlib_swig_py.h1_duidd_swigregister(h1_duidd)

class h2_duidd(b2_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI, aJ):
        return exlib_swig_py.h2_duidd_bin_error(self, aI, aJ)

    def scale(self, aFactor):
        return exlib_swig_py.h2_duidd_scale(self, aFactor)

    def copy_from_data(self, a_from):
        return exlib_swig_py.h2_duidd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return exlib_swig_py.h2_duidd_get_histo_data(self)

    def reset(self):
        return exlib_swig_py.h2_duidd_reset(self)

    def fill(self, aX, aY, aWeight=1):
        return exlib_swig_py.h2_duidd_fill(self, aX, aY, aWeight)

    def add(self, a_histo):
        return exlib_swig_py.h2_duidd_add(self, a_histo)

    def subtract(self, a_histo):
        return exlib_swig_py.h2_duidd_subtract(self, a_histo)

    def multiply(self, *args):
        return exlib_swig_py.h2_duidd_multiply(self, *args)

    def divide(self, a_histo):
        return exlib_swig_py.h2_duidd_divide(self, a_histo)
    __swig_destroy__ = exlib_swig_py.delete_h2_duidd

    def __init__(self, *args):
        exlib_swig_py.h2_duidd_swiginit(self, exlib_swig_py.new_h2_duidd(*args))

# Register h2_duidd in exlib_swig_py:
exlib_swig_py.h2_duidd_swigregister(h2_duidd)

class h3_duidd(b3_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI, aJ, aK):
        return exlib_swig_py.h3_duidd_bin_error(self, aI, aJ, aK)

    def scale(self, aFactor):
        return exlib_swig_py.h3_duidd_scale(self, aFactor)

    def copy_from_data(self, a_from):
        return exlib_swig_py.h3_duidd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return exlib_swig_py.h3_duidd_get_histo_data(self)

    def reset(self):
        return exlib_swig_py.h3_duidd_reset(self)

    def fill(self, aX, aY, aZ, aWeight=1):
        return exlib_swig_py.h3_duidd_fill(self, aX, aY, aZ, aWeight)

    def add(self, a_histo):
        return exlib_swig_py.h3_duidd_add(self, a_histo)

    def subtract(self, a_histo):
        return exlib_swig_py.h3_duidd_subtract(self, a_histo)

    def multiply(self, *args):
        return exlib_swig_py.h3_duidd_multiply(self, *args)

    def divide(self, a_histo):
        return exlib_swig_py.h3_duidd_divide(self, a_histo)
    __swig_destroy__ = exlib_swig_py.delete_h3_duidd

    def __init__(self, *args):
        exlib_swig_py.h3_duidd_swiginit(self, exlib_swig_py.new_h3_duidd(*args))

# Register h3_duidd in exlib_swig_py:
exlib_swig_py.h3_duidd_swigregister(h3_duidd)

class p1_duiddd(b1_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI):
        return exlib_swig_py.p1_duiddd_bin_error(self, aI)

    def multiply(self, aFactor):
        return exlib_swig_py.p1_duiddd_multiply(self, aFactor)

    def scale(self, aFactor):
        return exlib_swig_py.p1_duiddd_scale(self, aFactor)

    def bin_Svw(self, aI):
        return exlib_swig_py.p1_duiddd_bin_Svw(self, aI)

    def bin_Sv2w(self, aI):
        return exlib_swig_py.p1_duiddd_bin_Sv2w(self, aI)

    def reset(self):
        return exlib_swig_py.p1_duiddd_reset(self)

    def copy_from_data(self, a_from):
        return exlib_swig_py.p1_duiddd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return exlib_swig_py.p1_duiddd_get_histo_data(self)

    def fill(self, aX, aV, aWeight=1):
        return exlib_swig_py.p1_duiddd_fill(self, aX, aV, aWeight)

    def bin_rms_value(self, aI):
        return exlib_swig_py.p1_duiddd_bin_rms_value(self, aI)

    def add(self, a_histo):
        return exlib_swig_py.p1_duiddd_add(self, a_histo)

    def subtract(self, a_histo):
        return exlib_swig_py.p1_duiddd_subtract(self, a_histo)

    def gather_bins(self, a_factor):
        return exlib_swig_py.p1_duiddd_gather_bins(self, a_factor)

    def cut_v(self):
        return exlib_swig_py.p1_duiddd_cut_v(self)

    def min_v(self):
        return exlib_swig_py.p1_duiddd_min_v(self)

    def max_v(self):
        return exlib_swig_py.p1_duiddd_max_v(self)
    __swig_destroy__ = exlib_swig_py.delete_p1_duiddd

    def __init__(self, *args):
        exlib_swig_py.p1_duiddd_swiginit(self, exlib_swig_py.new_p1_duiddd(*args))

    def bins_sum_vw(self):
        return exlib_swig_py.p1_duiddd_bins_sum_vw(self)

    def bins_sum_v2w(self):
        return exlib_swig_py.p1_duiddd_bins_sum_v2w(self)

# Register p1_duiddd in exlib_swig_py:
exlib_swig_py.p1_duiddd_swigregister(p1_duiddd)

class p2_duiddd(b2_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI, aJ):
        return exlib_swig_py.p2_duiddd_bin_error(self, aI, aJ)

    def multiply(self, aFactor):
        return exlib_swig_py.p2_duiddd_multiply(self, aFactor)

    def scale(self, aFactor):
        return exlib_swig_py.p2_duiddd_scale(self, aFactor)

    def bin_Svw(self, aI, aJ):
        return exlib_swig_py.p2_duiddd_bin_Svw(self, aI, aJ)

    def bin_Sv2w(self, aI, aJ):
        return exlib_swig_py.p2_duiddd_bin_Sv2w(self, aI, aJ)

    def reset(self):
        return exlib_swig_py.p2_duiddd_reset(self)

    def copy_from_data(self, a_from):
        return exlib_swig_py.p2_duiddd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return exlib_swig_py.p2_duiddd_get_histo_data(self)

    def fill(self, aX, aY, aV, aWeight=1):
        return exlib_swig_py.p2_duiddd_fill(self, aX, aY, aV, aWeight)

    def bin_rms_value(self, aI, aJ):
        return exlib_swig_py.p2_duiddd_bin_rms_value(self, aI, aJ)

    def add(self, a_histo):
        return exlib_swig_py.p2_duiddd_add(self, a_histo)

    def subtract(self, a_histo):
        return exlib_swig_py.p2_duiddd_subtract(self, a_histo)

    def cut_v(self):
        return exlib_swig_py.p2_duiddd_cut_v(self)

    def min_v(self):
        return exlib_swig_py.p2_duiddd_min_v(self)

    def max_v(self):
        return exlib_swig_py.p2_duiddd_max_v(self)
    __swig_destroy__ = exlib_swig_py.delete_p2_duiddd

    def __init__(self, *args):
        exlib_swig_py.p2_duiddd_swiginit(self, exlib_swig_py.new_p2_duiddd(*args))

    def bins_sum_vw(self):
        return exlib_swig_py.p2_duiddd_bins_sum_vw(self)

    def bins_sum_v2w(self):
        return exlib_swig_py.p2_duiddd_bins_sum_v2w(self)

# Register p2_duiddd in exlib_swig_py:
exlib_swig_py.p2_duiddd_swigregister(p2_duiddd)

class histo_h1d(h1_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.histo_h1d_s_class()
    __swig_destroy__ = exlib_swig_py.delete_histo_h1d

    def __init__(self, *args):
        exlib_swig_py.histo_h1d_swiginit(self, exlib_swig_py.new_histo_h1d(*args))

# Register histo_h1d in exlib_swig_py:
exlib_swig_py.histo_h1d_swigregister(histo_h1d)

def histo_h1d_s_class():
    return exlib_swig_py.histo_h1d_s_class()

class histo_h2d(h2_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.histo_h2d_s_class()
    __swig_destroy__ = exlib_swig_py.delete_histo_h2d

    def __init__(self, *args):
        exlib_swig_py.histo_h2d_swiginit(self, exlib_swig_py.new_histo_h2d(*args))

# Register histo_h2d in exlib_swig_py:
exlib_swig_py.histo_h2d_swigregister(histo_h2d)

def histo_h2d_s_class():
    return exlib_swig_py.histo_h2d_s_class()

class histo_h3d(h3_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.histo_h3d_s_class()
    __swig_destroy__ = exlib_swig_py.delete_histo_h3d

    def __init__(self, *args):
        exlib_swig_py.histo_h3d_swiginit(self, exlib_swig_py.new_histo_h3d(*args))

# Register histo_h3d in exlib_swig_py:
exlib_swig_py.histo_h3d_swigregister(histo_h3d)

def histo_h3d_s_class():
    return exlib_swig_py.histo_h3d_s_class()

class histo_p1d(p1_duiddd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.histo_p1d_s_class()
    __swig_destroy__ = exlib_swig_py.delete_histo_p1d

    def __init__(self, *args):
        exlib_swig_py.histo_p1d_swiginit(self, exlib_swig_py.new_histo_p1d(*args))

# Register histo_p1d in exlib_swig_py:
exlib_swig_py.histo_p1d_swigregister(histo_p1d)

def histo_p1d_s_class():
    return exlib_swig_py.histo_p1d_s_class()

class histo_p2d(p2_duiddd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.histo_p2d_s_class()
    __swig_destroy__ = exlib_swig_py.delete_histo_p2d

    def __init__(self, *args):
        exlib_swig_py.histo_p2d_swiginit(self, exlib_swig_py.new_histo_p2d(*args))

# Register histo_p2d in exlib_swig_py:
exlib_swig_py.histo_p2d_swigregister(histo_p2d)

def histo_p2d_s_class():
    return exlib_swig_py.histo_p2d_s_class()

INLIB_MAJOR_VERSION = exlib_swig_py.INLIB_MAJOR_VERSION
INLIB_MINOR_VERSION = exlib_swig_py.INLIB_MINOR_VERSION
INLIB_PATCH_VERSION = exlib_swig_py.INLIB_PATCH_VERSION
INLIB_VERSION = exlib_swig_py.INLIB_VERSION
INLIB_VERSION_VRP = exlib_swig_py.INLIB_VERSION_VRP

def version():
    return exlib_swig_py.version()

def begin(a_writer):
    return exlib_swig_py.begin(a_writer)

def end(a_writer):
    return exlib_swig_py.end(a_writer)

def bin_to_string(a_index):
    return exlib_swig_py.bin_to_string(a_index)

def write_annotations(a_annotations, a_writer, aShift):
    return exlib_swig_py.write_annotations(a_annotations, a_writer, aShift)

def write_axis(aAxis, aDirection, a_writer, aShift):
    return exlib_swig_py.write_axis(aAxis, aDirection, a_writer, aShift)

def write_bin(*args):
    return exlib_swig_py.write_bin(*args)

def write(*args):
    return exlib_swig_py.write(*args)
class waxml_file(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        exlib_swig_py.waxml_file_swiginit(self, exlib_swig_py.new_waxml_file())
    __swig_destroy__ = exlib_swig_py.delete_waxml_file

    def open(self, a_file):
        return exlib_swig_py.waxml_file_open(self, a_file)

    def close(self):
        return exlib_swig_py.waxml_file_close(self)

    def writer(self):
        return exlib_swig_py.waxml_file_writer(self)

    def write(self, *args):
        return exlib_swig_py.waxml_file_write(self, *args)

# Register waxml_file in exlib_swig_py:
exlib_swig_py.waxml_file_swigregister(waxml_file)

class vec2_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_vec2_float

    def __init__(self, *args):
        exlib_swig_py.vec2_float_swiginit(self, exlib_swig_py.new_vec2_float(*args))

    def v0(self, *args):
        return exlib_swig_py.vec2_float_v0(self, *args)

    def v1(self, *args):
        return exlib_swig_py.vec2_float_v1(self, *args)

    def x(self):
        return exlib_swig_py.vec2_float_x(self)

    def y(self):
        return exlib_swig_py.vec2_float_y(self)

    def set_value(self, *args):
        return exlib_swig_py.vec2_float_set_value(self, *args)

    def value(self, a0, a1):
        return exlib_swig_py.vec2_float_value(self, a0, a1)

    def length(self):
        return exlib_swig_py.vec2_float_length(self)

    def normalize(self):
        return exlib_swig_py.vec2_float_normalize(self)

    def dot(self, aV):
        return exlib_swig_py.vec2_float_dot(self, aV)

    def cross(self, aV):
        return exlib_swig_py.vec2_float_cross(self, aV)

    def equal(self, aV):
        return exlib_swig_py.vec2_float_equal(self, aV)

    def divide(self, a_T):
        return exlib_swig_py.vec2_float_divide(self, a_T)

    def add(self, *args):
        return exlib_swig_py.vec2_float_add(self, *args)

    def subtract(self, *args):
        return exlib_swig_py.vec2_float_subtract(self, *args)

    def __add__(self, a_v):
        return exlib_swig_py.vec2_float___add__(self, a_v)

    def __sub__(self, a_v):
        return exlib_swig_py.vec2_float___sub__(self, a_v)

    def __mul__(self, a_v):
        return exlib_swig_py.vec2_float___mul__(self, a_v)

    def __eq__(self, a_v):
        return exlib_swig_py.vec2_float___eq__(self, a_v)

    def __ne__(self, a_v):
        return exlib_swig_py.vec2_float___ne__(self, a_v)

    def size(self):
        return exlib_swig_py.vec2_float_size(self)

    def data(self):
        return exlib_swig_py.vec2_float_data(self)

# Register vec2_float in exlib_swig_py:
exlib_swig_py.vec2_float_swigregister(vec2_float)

class vec3_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_vec3_float

    def __init__(self, *args):
        exlib_swig_py.vec3_float_swiginit(self, exlib_swig_py.new_vec3_float(*args))

    def v0(self, *args):
        return exlib_swig_py.vec3_float_v0(self, *args)

    def v1(self, *args):
        return exlib_swig_py.vec3_float_v1(self, *args)

    def v2(self, *args):
        return exlib_swig_py.vec3_float_v2(self, *args)

    def x(self):
        return exlib_swig_py.vec3_float_x(self)

    def y(self):
        return exlib_swig_py.vec3_float_y(self)

    def z(self):
        return exlib_swig_py.vec3_float_z(self)

    def set_value(self, *args):
        return exlib_swig_py.vec3_float_set_value(self, *args)

    def value(self, a0, a1, a2):
        return exlib_swig_py.vec3_float_value(self, a0, a1, a2)

    def length(self):
        return exlib_swig_py.vec3_float_length(self)

    def normalize(self):
        return exlib_swig_py.vec3_float_normalize(self)

    def dot(self, aV):
        return exlib_swig_py.vec3_float_dot(self, aV)

    def cross(self, aV):
        return exlib_swig_py.vec3_float_cross(self, aV)

    def equal(self, aV):
        return exlib_swig_py.vec3_float_equal(self, aV)

    def divide(self, a_T):
        return exlib_swig_py.vec3_float_divide(self, a_T)

    def multiply(self, a_T):
        return exlib_swig_py.vec3_float_multiply(self, a_T)

    def add(self, *args):
        return exlib_swig_py.vec3_float_add(self, *args)

    def subtract(self, *args):
        return exlib_swig_py.vec3_float_subtract(self, *args)

    def cos_angle(self, a_v, a_cos):
        return exlib_swig_py.vec3_float_cos_angle(self, a_v, a_cos)

    def __imul__(self, a_v):
        return exlib_swig_py.vec3_float___imul__(self, a_v)

    def __add__(self, a_v):
        return exlib_swig_py.vec3_float___add__(self, a_v)

    def __sub__(self, a_v):
        return exlib_swig_py.vec3_float___sub__(self, a_v)

    def __mul__(self, a_v):
        return exlib_swig_py.vec3_float___mul__(self, a_v)

    def __eq__(self, a_v):
        return exlib_swig_py.vec3_float___eq__(self, a_v)

    def __ne__(self, a_v):
        return exlib_swig_py.vec3_float___ne__(self, a_v)

    def size(self):
        return exlib_swig_py.vec3_float_size(self)

    def data(self):
        return exlib_swig_py.vec3_float_data(self)

# Register vec3_float in exlib_swig_py:
exlib_swig_py.vec3_float_swigregister(vec3_float)

class vec3_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_vec3_double

    def __init__(self, *args):
        exlib_swig_py.vec3_double_swiginit(self, exlib_swig_py.new_vec3_double(*args))

    def v0(self, *args):
        return exlib_swig_py.vec3_double_v0(self, *args)

    def v1(self, *args):
        return exlib_swig_py.vec3_double_v1(self, *args)

    def v2(self, *args):
        return exlib_swig_py.vec3_double_v2(self, *args)

    def x(self):
        return exlib_swig_py.vec3_double_x(self)

    def y(self):
        return exlib_swig_py.vec3_double_y(self)

    def z(self):
        return exlib_swig_py.vec3_double_z(self)

    def set_value(self, *args):
        return exlib_swig_py.vec3_double_set_value(self, *args)

    def value(self, a0, a1, a2):
        return exlib_swig_py.vec3_double_value(self, a0, a1, a2)

    def length(self):
        return exlib_swig_py.vec3_double_length(self)

    def normalize(self):
        return exlib_swig_py.vec3_double_normalize(self)

    def dot(self, aV):
        return exlib_swig_py.vec3_double_dot(self, aV)

    def cross(self, aV):
        return exlib_swig_py.vec3_double_cross(self, aV)

    def equal(self, aV):
        return exlib_swig_py.vec3_double_equal(self, aV)

    def divide(self, a_T):
        return exlib_swig_py.vec3_double_divide(self, a_T)

    def multiply(self, a_T):
        return exlib_swig_py.vec3_double_multiply(self, a_T)

    def add(self, *args):
        return exlib_swig_py.vec3_double_add(self, *args)

    def subtract(self, *args):
        return exlib_swig_py.vec3_double_subtract(self, *args)

    def cos_angle(self, a_v, a_cos):
        return exlib_swig_py.vec3_double_cos_angle(self, a_v, a_cos)

    def __imul__(self, a_v):
        return exlib_swig_py.vec3_double___imul__(self, a_v)

    def __add__(self, a_v):
        return exlib_swig_py.vec3_double___add__(self, a_v)

    def __sub__(self, a_v):
        return exlib_swig_py.vec3_double___sub__(self, a_v)

    def __mul__(self, a_v):
        return exlib_swig_py.vec3_double___mul__(self, a_v)

    def __eq__(self, a_v):
        return exlib_swig_py.vec3_double___eq__(self, a_v)

    def __ne__(self, a_v):
        return exlib_swig_py.vec3_double___ne__(self, a_v)

    def size(self):
        return exlib_swig_py.vec3_double_size(self)

    def data(self):
        return exlib_swig_py.vec3_double_data(self)

# Register vec3_double in exlib_swig_py:
exlib_swig_py.vec3_double_swigregister(vec3_double)

class vec4_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_vec4_float

    def __init__(self, *args):
        exlib_swig_py.vec4_float_swiginit(self, exlib_swig_py.new_vec4_float(*args))

    def v0(self, *args):
        return exlib_swig_py.vec4_float_v0(self, *args)

    def v1(self, *args):
        return exlib_swig_py.vec4_float_v1(self, *args)

    def v2(self, *args):
        return exlib_swig_py.vec4_float_v2(self, *args)

    def v3(self, *args):
        return exlib_swig_py.vec4_float_v3(self, *args)

    def value(self, a0, a1, a2, a3):
        return exlib_swig_py.vec4_float_value(self, a0, a1, a2, a3)

    def set_value(self, *args):
        return exlib_swig_py.vec4_float_set_value(self, *args)

    def length(self):
        return exlib_swig_py.vec4_float_length(self)

    def normalize(self):
        return exlib_swig_py.vec4_float_normalize(self)

    def equal(self, aV):
        return exlib_swig_py.vec4_float_equal(self, aV)

    def multiply(self, a_T):
        return exlib_swig_py.vec4_float_multiply(self, a_T)

    def divide(self, a_T):
        return exlib_swig_py.vec4_float_divide(self, a_T)

    def add(self, *args):
        return exlib_swig_py.vec4_float_add(self, *args)

    def subtract(self, *args):
        return exlib_swig_py.vec4_float_subtract(self, *args)

    def __add__(self, a_v):
        return exlib_swig_py.vec4_float___add__(self, a_v)

    def __sub__(self, a_v):
        return exlib_swig_py.vec4_float___sub__(self, a_v)

    def __mul__(self, a_v):
        return exlib_swig_py.vec4_float___mul__(self, a_v)

    def __eq__(self, a_v):
        return exlib_swig_py.vec4_float___eq__(self, a_v)

    def __ne__(self, a_v):
        return exlib_swig_py.vec4_float___ne__(self, a_v)

    def size(self):
        return exlib_swig_py.vec4_float_size(self)

    def data(self):
        return exlib_swig_py.vec4_float_data(self)

# Register vec4_float in exlib_swig_py:
exlib_swig_py.vec4_float_swigregister(vec4_float)

class mat_float_4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_mat_float_4

    def __init__(self, *args):
        exlib_swig_py.mat_float_4_swiginit(self, exlib_swig_py.new_mat_float_4(*args))

    def set_value(self, aR, aC, a_value):
        return exlib_swig_py.mat_float_4_set_value(self, aR, aC, a_value)

    def value(self, *args):
        return exlib_swig_py.mat_float_4_value(self, *args)

    def set_matrix(self, a_m):
        return exlib_swig_py.mat_float_4_set_matrix(self, a_m)

    def set_constant(self, a_v):
        return exlib_swig_py.mat_float_4_set_constant(self, a_v)

    def set_zero(self):
        return exlib_swig_py.mat_float_4_set_zero(self)

    def set_identity(self):
        return exlib_swig_py.mat_float_4_set_identity(self)

    def set_diagonal(self, a_s):
        return exlib_swig_py.mat_float_4_set_diagonal(self, a_s)

    def mul_mtx(self, a_m):
        return exlib_swig_py.mat_float_4_mul_mtx(self, a_m)

    def left_mul_mtx(self, a_m):
        return exlib_swig_py.mat_float_4_left_mul_mtx(self, a_m)

    def data(self):
        return exlib_swig_py.mat_float_4_data(self)

    def size(self):
        return exlib_swig_py.mat_float_4_size(self)

    def equal(self, *args):
        return exlib_swig_py.mat_float_4_equal(self, *args)

    def trace(self):
        return exlib_swig_py.mat_float_4_trace(self)

    def transpose(self):
        return exlib_swig_py.mat_float_4_transpose(self)

    def multiply(self, a_T):
        return exlib_swig_py.mat_float_4_multiply(self, a_T)

    def is_symmetric(self):
        return exlib_swig_py.mat_float_4_is_symmetric(self)

    def is_antisymmetric(self):
        return exlib_swig_py.mat_float_4_is_antisymmetric(self)

    def symmetric_part(self, a_res):
        return exlib_swig_py.mat_float_4_symmetric_part(self, a_res)

    def antisymmetric_part(self, a_res):
        return exlib_swig_py.mat_float_4_antisymmetric_part(self, a_res)

    def determinant(self):
        return exlib_swig_py.mat_float_4_determinant(self)

    def invert(self, a_result):
        return exlib_swig_py.mat_float_4_invert(self, a_result)

    def __call__(self, a_r, a_c):
        return exlib_swig_py.mat_float_4___call__(self, a_r, a_c)

    def __eq__(self, a_array):
        return exlib_swig_py.mat_float_4___eq__(self, a_array)

    def __ne__(self, a_array):
        return exlib_swig_py.mat_float_4___ne__(self, a_array)

    def __iadd__(self, a_m):
        return exlib_swig_py.mat_float_4___iadd__(self, a_m)

    def __isub__(self, a_m):
        return exlib_swig_py.mat_float_4___isub__(self, a_m)

    def __imul__(self, *args):
        return exlib_swig_py.mat_float_4___imul__(self, *args)

# Register mat_float_4 in exlib_swig_py:
exlib_swig_py.mat_float_4_swigregister(mat_float_4)

class mat4_float(mat_float_4):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_mat4_float

    def __init__(self, *args):
        exlib_swig_py.mat4_float_swiginit(self, exlib_swig_py.new_mat4_float(*args))

    def set_matrix(self, *args):
        return exlib_swig_py.mat4_float_set_matrix(self, *args)

    def set_scale(self, *args):
        return exlib_swig_py.mat4_float_set_scale(self, *args)

    def set_translate(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4_float_set_translate(self, a_x, a_y, a_z)

    def set_rotate(self, a_x, a_y, a_z, a_angle):
        return exlib_swig_py.mat4_float_set_rotate(self, a_x, a_y, a_z, a_angle)

    def set_ortho(self, a_l, a_r, a_b, a_t, a_n, a_f):
        return exlib_swig_py.mat4_float_set_ortho(self, a_l, a_r, a_b, a_t, a_n, a_f)

    def set_frustum(self, a_l, a_r, a_b, a_t, a_n, a_f):
        return exlib_swig_py.mat4_float_set_frustum(self, a_l, a_r, a_b, a_t, a_n, a_f)

    def get_translate(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4_float_get_translate(self, a_x, a_y, a_z)

    def mul_4(self, a_x, a_y, a_z, a_p):
        return exlib_swig_py.mat4_float_mul_4(self, a_x, a_y, a_z, a_p)

    def mul_3(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4_float_mul_3(self, a_x, a_y, a_z)

    def mul_2(self, a_x, a_y):
        return exlib_swig_py.mat4_float_mul_2(self, a_x, a_y)

    def mul_scale(self, *args):
        return exlib_swig_py.mat4_float_mul_scale(self, *args)

    def mul_translate(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4_float_mul_translate(self, a_x, a_y, a_z)

    def mul_rotate(self, a_x, a_y, a_z, a_angle):
        return exlib_swig_py.mat4_float_mul_rotate(self, a_x, a_y, a_z, a_angle)

    def left_mul_rotate(self, a_x, a_y, a_z, a_angle):
        return exlib_swig_py.mat4_float_left_mul_rotate(self, a_x, a_y, a_z, a_angle)

    def left_mul_scale(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4_float_left_mul_scale(self, a_x, a_y, a_z)

    def left_mul_translate(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4_float_left_mul_translate(self, a_x, a_y, a_z)

    def v00(self, *args):
        return exlib_swig_py.mat4_float_v00(self, *args)

    def v10(self, *args):
        return exlib_swig_py.mat4_float_v10(self, *args)

    def v20(self, *args):
        return exlib_swig_py.mat4_float_v20(self, *args)

    def v30(self, *args):
        return exlib_swig_py.mat4_float_v30(self, *args)

    def v01(self, *args):
        return exlib_swig_py.mat4_float_v01(self, *args)

    def v11(self, *args):
        return exlib_swig_py.mat4_float_v11(self, *args)

    def v21(self, *args):
        return exlib_swig_py.mat4_float_v21(self, *args)

    def v31(self, *args):
        return exlib_swig_py.mat4_float_v31(self, *args)

    def v02(self, *args):
        return exlib_swig_py.mat4_float_v02(self, *args)

    def v12(self, *args):
        return exlib_swig_py.mat4_float_v12(self, *args)

    def v22(self, *args):
        return exlib_swig_py.mat4_float_v22(self, *args)

    def v32(self, *args):
        return exlib_swig_py.mat4_float_v32(self, *args)

    def v03(self, *args):
        return exlib_swig_py.mat4_float_v03(self, *args)

    def v13(self, *args):
        return exlib_swig_py.mat4_float_v13(self, *args)

    def v23(self, *args):
        return exlib_swig_py.mat4_float_v23(self, *args)

    def v33(self, *args):
        return exlib_swig_py.mat4_float_v33(self, *args)

    def mul_mtx_rot_root(self, a_00, a_01, a_02, a_10, a_11, a_12, a_20, a_21, a_22):
        return exlib_swig_py.mat4_float_mul_mtx_rot_root(self, a_00, a_01, a_02, a_10, a_11, a_12, a_20, a_21, a_22)

# Register mat4_float in exlib_swig_py:
exlib_swig_py.mat4_float_swigregister(mat4_float)

class qrot_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_qrot_float

    def __init__(self, *args):
        exlib_swig_py.qrot_float_swiginit(self, exlib_swig_py.new_qrot_float(*args))

    def __imul__(self, a_q):
        return exlib_swig_py.qrot_float___imul__(self, a_q)

    def __eq__(self, a_r):
        return exlib_swig_py.qrot_float___eq__(self, a_r)

    def __ne__(self, a_r):
        return exlib_swig_py.qrot_float___ne__(self, a_r)

    def __mul__(self, a_r):
        return exlib_swig_py.qrot_float___mul__(self, a_r)

    def invert(self):
        return exlib_swig_py.qrot_float_invert(self)

    def inverse(self, a_r):
        return exlib_swig_py.qrot_float_inverse(self, a_r)

    def set_value(self, *args):
        return exlib_swig_py.qrot_float_set_value(self, *args)

    def value(self, *args):
        return exlib_swig_py.qrot_float_value(self, *args)

    def mult_vec(self, a_in, a_out):
        return exlib_swig_py.qrot_float_mult_vec(self, a_in, a_out)

    def mul_3f(self, a_x, a_y, a_z):
        return exlib_swig_py.qrot_float_mul_3f(self, a_x, a_y, a_z)

    def quat(self, *args):
        return exlib_swig_py.qrot_float_quat(self, *args)

# Register qrot_float in exlib_swig_py:
exlib_swig_py.qrot_float_swigregister(qrot_float)

class vec3f(vec3_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_vec3f

    def __init__(self, *args):
        exlib_swig_py.vec3f_swiginit(self, exlib_swig_py.new_vec3f(*args))

    def __mul__(self, a_v):
        return exlib_swig_py.vec3f___mul__(self, a_v)

    def __add__(self, a_v):
        return exlib_swig_py.vec3f___add__(self, a_v)

    def __sub__(self, a_v):
        return exlib_swig_py.vec3f___sub__(self, a_v)

    def __iadd__(self, a_v):
        return exlib_swig_py.vec3f___iadd__(self, a_v)

    def __imul__(self, a_v):
        return exlib_swig_py.vec3f___imul__(self, a_v)

    def __neg__(self):
        return exlib_swig_py.vec3f___neg__(self)

# Register vec3f in exlib_swig_py:
exlib_swig_py.vec3f_swigregister(vec3f)


def __mul__(a_f, a_v):
    return exlib_swig_py.__mul__(a_f, a_v)
class rotf(qrot_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_rotf

    def __init__(self, *args):
        exlib_swig_py.rotf_swiginit(self, exlib_swig_py.new_rotf(*args))

    def __imul__(self, a_q):
        return exlib_swig_py.rotf___imul__(self, a_q)

    def __mul__(self, a_r):
        return exlib_swig_py.rotf___mul__(self, a_r)

    def set_value(self, a_from, a_to):
        return exlib_swig_py.rotf_set_value(self, a_from, a_to)

# Register rotf in exlib_swig_py:
exlib_swig_py.rotf_swigregister(rotf)

class vec4f(vec4_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_vec4f

    def __init__(self, *args):
        exlib_swig_py.vec4f_swiginit(self, exlib_swig_py.new_vec4f(*args))

    def __mul__(self, a_v):
        return exlib_swig_py.vec4f___mul__(self, a_v)

    def __add__(self, a_v):
        return exlib_swig_py.vec4f___add__(self, a_v)

    def __sub__(self, a_v):
        return exlib_swig_py.vec4f___sub__(self, a_v)

    def __iadd__(self, a_v):
        return exlib_swig_py.vec4f___iadd__(self, a_v)

    def __imul__(self, a_v):
        return exlib_swig_py.vec4f___imul__(self, a_v)

    def __neg__(self):
        return exlib_swig_py.vec4f___neg__(self)

# Register vec4f in exlib_swig_py:
exlib_swig_py.vec4f_swigregister(vec4f)

class colorf(vec4f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_colorf

    def __init__(self, *args):
        exlib_swig_py.colorf_swiginit(self, exlib_swig_py.new_colorf(*args))

    def r(self):
        return exlib_swig_py.colorf_r(self)

    def g(self):
        return exlib_swig_py.colorf_g(self)

    def b(self):
        return exlib_swig_py.colorf_b(self)

    def a(self):
        return exlib_swig_py.colorf_a(self)

    def set_r(self, a_v):
        return exlib_swig_py.colorf_set_r(self, a_v)

    def set_g(self, a_v):
        return exlib_swig_py.colorf_set_g(self, a_v)

    def set_b(self, a_v):
        return exlib_swig_py.colorf_set_b(self, a_v)

    def set_a(self, a_v):
        return exlib_swig_py.colorf_set_a(self, a_v)

    def tos(self):
        return exlib_swig_py.colorf_tos(self)

    @staticmethod
    def aquamarine():
        return exlib_swig_py.colorf_aquamarine()

    @staticmethod
    def mediumaquamarine():
        return exlib_swig_py.colorf_mediumaquamarine()

    @staticmethod
    def black():
        return exlib_swig_py.colorf_black()

    @staticmethod
    def blue():
        return exlib_swig_py.colorf_blue()

    @staticmethod
    def cadetblue():
        return exlib_swig_py.colorf_cadetblue()

    @staticmethod
    def cornflowerblue():
        return exlib_swig_py.colorf_cornflowerblue()

    @staticmethod
    def darkslateblue():
        return exlib_swig_py.colorf_darkslateblue()

    @staticmethod
    def lightblue():
        return exlib_swig_py.colorf_lightblue()

    @staticmethod
    def lightsteelblue():
        return exlib_swig_py.colorf_lightsteelblue()

    @staticmethod
    def mediumblue():
        return exlib_swig_py.colorf_mediumblue()

    @staticmethod
    def mediumslateblue():
        return exlib_swig_py.colorf_mediumslateblue()

    @staticmethod
    def midnightblue():
        return exlib_swig_py.colorf_midnightblue()

    @staticmethod
    def navyblue():
        return exlib_swig_py.colorf_navyblue()

    @staticmethod
    def navy():
        return exlib_swig_py.colorf_navy()

    @staticmethod
    def skyblue():
        return exlib_swig_py.colorf_skyblue()

    @staticmethod
    def slateblue():
        return exlib_swig_py.colorf_slateblue()

    @staticmethod
    def steelblue():
        return exlib_swig_py.colorf_steelblue()

    @staticmethod
    def coral():
        return exlib_swig_py.colorf_coral()

    @staticmethod
    def cyan():
        return exlib_swig_py.colorf_cyan()

    @staticmethod
    def firebrick():
        return exlib_swig_py.colorf_firebrick()

    @staticmethod
    def brown():
        return exlib_swig_py.colorf_brown()

    @staticmethod
    def gold():
        return exlib_swig_py.colorf_gold()

    @staticmethod
    def goldenrod():
        return exlib_swig_py.colorf_goldenrod()

    @staticmethod
    def green():
        return exlib_swig_py.colorf_green()

    @staticmethod
    def darkgreen():
        return exlib_swig_py.colorf_darkgreen()

    @staticmethod
    def darkolivegreen():
        return exlib_swig_py.colorf_darkolivegreen()

    @staticmethod
    def forestgreen():
        return exlib_swig_py.colorf_forestgreen()

    @staticmethod
    def limegreen():
        return exlib_swig_py.colorf_limegreen()

    @staticmethod
    def mediumseagreen():
        return exlib_swig_py.colorf_mediumseagreen()

    @staticmethod
    def mediumspringgreen():
        return exlib_swig_py.colorf_mediumspringgreen()

    @staticmethod
    def palegreen():
        return exlib_swig_py.colorf_palegreen()

    @staticmethod
    def seagreen():
        return exlib_swig_py.colorf_seagreen()

    @staticmethod
    def springgreen():
        return exlib_swig_py.colorf_springgreen()

    @staticmethod
    def yellowgreen():
        return exlib_swig_py.colorf_yellowgreen()

    @staticmethod
    def darkslategrey():
        return exlib_swig_py.colorf_darkslategrey()

    @staticmethod
    def dimgrey():
        return exlib_swig_py.colorf_dimgrey()

    @staticmethod
    def lightgrey():
        return exlib_swig_py.colorf_lightgrey()

    @staticmethod
    def grey():
        return exlib_swig_py.colorf_grey()

    @staticmethod
    def khaki():
        return exlib_swig_py.colorf_khaki()

    @staticmethod
    def magenta():
        return exlib_swig_py.colorf_magenta()

    @staticmethod
    def maroon():
        return exlib_swig_py.colorf_maroon()

    @staticmethod
    def orange():
        return exlib_swig_py.colorf_orange()

    @staticmethod
    def orchid():
        return exlib_swig_py.colorf_orchid()

    @staticmethod
    def darkorchid():
        return exlib_swig_py.colorf_darkorchid()

    @staticmethod
    def mediumorchid():
        return exlib_swig_py.colorf_mediumorchid()

    @staticmethod
    def pink():
        return exlib_swig_py.colorf_pink()

    @staticmethod
    def plum():
        return exlib_swig_py.colorf_plum()

    @staticmethod
    def red():
        return exlib_swig_py.colorf_red()

    @staticmethod
    def indianred():
        return exlib_swig_py.colorf_indianred()

    @staticmethod
    def mediumvioletred():
        return exlib_swig_py.colorf_mediumvioletred()

    @staticmethod
    def orangered():
        return exlib_swig_py.colorf_orangered()

    @staticmethod
    def violetred():
        return exlib_swig_py.colorf_violetred()

    @staticmethod
    def salmon():
        return exlib_swig_py.colorf_salmon()

    @staticmethod
    def sienna():
        return exlib_swig_py.colorf_sienna()

    @staticmethod
    def tan():
        return exlib_swig_py.colorf_tan()

    @staticmethod
    def thistle():
        return exlib_swig_py.colorf_thistle()

    @staticmethod
    def turquoise():
        return exlib_swig_py.colorf_turquoise()

    @staticmethod
    def darkturquoise():
        return exlib_swig_py.colorf_darkturquoise()

    @staticmethod
    def mediumturquoise():
        return exlib_swig_py.colorf_mediumturquoise()

    @staticmethod
    def violet():
        return exlib_swig_py.colorf_violet()

    @staticmethod
    def blueviolet():
        return exlib_swig_py.colorf_blueviolet()

    @staticmethod
    def wheat():
        return exlib_swig_py.colorf_wheat()

    @staticmethod
    def white():
        return exlib_swig_py.colorf_white()

    @staticmethod
    def yellow():
        return exlib_swig_py.colorf_yellow()

    @staticmethod
    def greenyellow():
        return exlib_swig_py.colorf_greenyellow()

    @staticmethod
    def to(a_color):
        return exlib_swig_py.colorf_to(a_color)

# Register colorf in exlib_swig_py:
exlib_swig_py.colorf_swigregister(colorf)

def colorf_aquamarine():
    return exlib_swig_py.colorf_aquamarine()

def colorf_mediumaquamarine():
    return exlib_swig_py.colorf_mediumaquamarine()

def colorf_black():
    return exlib_swig_py.colorf_black()

def colorf_blue():
    return exlib_swig_py.colorf_blue()

def colorf_cadetblue():
    return exlib_swig_py.colorf_cadetblue()

def colorf_cornflowerblue():
    return exlib_swig_py.colorf_cornflowerblue()

def colorf_darkslateblue():
    return exlib_swig_py.colorf_darkslateblue()

def colorf_lightblue():
    return exlib_swig_py.colorf_lightblue()

def colorf_lightsteelblue():
    return exlib_swig_py.colorf_lightsteelblue()

def colorf_mediumblue():
    return exlib_swig_py.colorf_mediumblue()

def colorf_mediumslateblue():
    return exlib_swig_py.colorf_mediumslateblue()

def colorf_midnightblue():
    return exlib_swig_py.colorf_midnightblue()

def colorf_navyblue():
    return exlib_swig_py.colorf_navyblue()

def colorf_navy():
    return exlib_swig_py.colorf_navy()

def colorf_skyblue():
    return exlib_swig_py.colorf_skyblue()

def colorf_slateblue():
    return exlib_swig_py.colorf_slateblue()

def colorf_steelblue():
    return exlib_swig_py.colorf_steelblue()

def colorf_coral():
    return exlib_swig_py.colorf_coral()

def colorf_cyan():
    return exlib_swig_py.colorf_cyan()

def colorf_firebrick():
    return exlib_swig_py.colorf_firebrick()

def colorf_brown():
    return exlib_swig_py.colorf_brown()

def colorf_gold():
    return exlib_swig_py.colorf_gold()

def colorf_goldenrod():
    return exlib_swig_py.colorf_goldenrod()

def colorf_green():
    return exlib_swig_py.colorf_green()

def colorf_darkgreen():
    return exlib_swig_py.colorf_darkgreen()

def colorf_darkolivegreen():
    return exlib_swig_py.colorf_darkolivegreen()

def colorf_forestgreen():
    return exlib_swig_py.colorf_forestgreen()

def colorf_limegreen():
    return exlib_swig_py.colorf_limegreen()

def colorf_mediumseagreen():
    return exlib_swig_py.colorf_mediumseagreen()

def colorf_mediumspringgreen():
    return exlib_swig_py.colorf_mediumspringgreen()

def colorf_palegreen():
    return exlib_swig_py.colorf_palegreen()

def colorf_seagreen():
    return exlib_swig_py.colorf_seagreen()

def colorf_springgreen():
    return exlib_swig_py.colorf_springgreen()

def colorf_yellowgreen():
    return exlib_swig_py.colorf_yellowgreen()

def colorf_darkslategrey():
    return exlib_swig_py.colorf_darkslategrey()

def colorf_dimgrey():
    return exlib_swig_py.colorf_dimgrey()

def colorf_lightgrey():
    return exlib_swig_py.colorf_lightgrey()

def colorf_grey():
    return exlib_swig_py.colorf_grey()

def colorf_khaki():
    return exlib_swig_py.colorf_khaki()

def colorf_magenta():
    return exlib_swig_py.colorf_magenta()

def colorf_maroon():
    return exlib_swig_py.colorf_maroon()

def colorf_orange():
    return exlib_swig_py.colorf_orange()

def colorf_orchid():
    return exlib_swig_py.colorf_orchid()

def colorf_darkorchid():
    return exlib_swig_py.colorf_darkorchid()

def colorf_mediumorchid():
    return exlib_swig_py.colorf_mediumorchid()

def colorf_pink():
    return exlib_swig_py.colorf_pink()

def colorf_plum():
    return exlib_swig_py.colorf_plum()

def colorf_red():
    return exlib_swig_py.colorf_red()

def colorf_indianred():
    return exlib_swig_py.colorf_indianred()

def colorf_mediumvioletred():
    return exlib_swig_py.colorf_mediumvioletred()

def colorf_orangered():
    return exlib_swig_py.colorf_orangered()

def colorf_violetred():
    return exlib_swig_py.colorf_violetred()

def colorf_salmon():
    return exlib_swig_py.colorf_salmon()

def colorf_sienna():
    return exlib_swig_py.colorf_sienna()

def colorf_tan():
    return exlib_swig_py.colorf_tan()

def colorf_thistle():
    return exlib_swig_py.colorf_thistle()

def colorf_turquoise():
    return exlib_swig_py.colorf_turquoise()

def colorf_darkturquoise():
    return exlib_swig_py.colorf_darkturquoise()

def colorf_mediumturquoise():
    return exlib_swig_py.colorf_mediumturquoise()

def colorf_violet():
    return exlib_swig_py.colorf_violet()

def colorf_blueviolet():
    return exlib_swig_py.colorf_blueviolet()

def colorf_wheat():
    return exlib_swig_py.colorf_wheat()

def colorf_white():
    return exlib_swig_py.colorf_white()

def colorf_yellow():
    return exlib_swig_py.colorf_yellow()

def colorf_greenyellow():
    return exlib_swig_py.colorf_greenyellow()

def colorf_to(a_color):
    return exlib_swig_py.colorf_to(a_color)

class cmp_colorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a_a, a_b):
        return exlib_swig_py.cmp_colorf___call__(self, a_a, a_b)

    def __init__(self):
        exlib_swig_py.cmp_colorf_swiginit(self, exlib_swig_py.new_cmp_colorf())
    __swig_destroy__ = exlib_swig_py.delete_cmp_colorf

# Register cmp_colorf in exlib_swig_py:
exlib_swig_py.cmp_colorf_swigregister(cmp_colorf)


def rcmp(*args):
    return exlib_swig_py.rcmp(*args)
class field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def write(self, arg2):
        return exlib_swig_py.field_write(self, arg2)

    def read(self, arg2):
        return exlib_swig_py.field_read(self, arg2)

    def dump(self, arg2):
        return exlib_swig_py.field_dump(self, arg2)

    def touch(self):
        return exlib_swig_py.field_touch(self)

    def touched(self):
        return exlib_swig_py.field_touched(self)

    def reset_touched(self):
        return exlib_swig_py.field_reset_touched(self)

# Register field in exlib_swig_py:
exlib_swig_py.field_swigregister(field)

class bsf_bool(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bsf_bool

    def __eq__(self, *args):
        return exlib_swig_py.bsf_bool___eq__(self, *args)

    def __ne__(self, *args):
        return exlib_swig_py.bsf_bool___ne__(self, *args)

    def __nonzero__(self):
        return exlib_swig_py.bsf_bool___nonzero__(self)
    __bool__ = __nonzero__



    def value(self, *args):
        return exlib_swig_py.bsf_bool_value(self, *args)

    def value_no_cmp(self, a_value):
        return exlib_swig_py.bsf_bool_value_no_cmp(self, a_value)

# Register bsf_bool in exlib_swig_py:
exlib_swig_py.bsf_bool_swigregister(bsf_bool)

class bsf_float(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bsf_float

    def __eq__(self, *args):
        return exlib_swig_py.bsf_float___eq__(self, *args)

    def __ne__(self, *args):
        return exlib_swig_py.bsf_float___ne__(self, *args)

    def value(self, *args):
        return exlib_swig_py.bsf_float_value(self, *args)

    def value_no_cmp(self, a_value):
        return exlib_swig_py.bsf_float_value_no_cmp(self, a_value)

# Register bsf_float in exlib_swig_py:
exlib_swig_py.bsf_float_swigregister(bsf_float)

class bsf_string(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bsf_string

    def __eq__(self, *args):
        return exlib_swig_py.bsf_string___eq__(self, *args)

    def __ne__(self, *args):
        return exlib_swig_py.bsf_string___ne__(self, *args)

    def value(self, *args):
        return exlib_swig_py.bsf_string_value(self, *args)

    def value_no_cmp(self, a_value):
        return exlib_swig_py.bsf_string_value_no_cmp(self, a_value)

# Register bsf_string in exlib_swig_py:
exlib_swig_py.bsf_string_swigregister(bsf_string)

class bsf_rotf(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bsf_rotf

    def __eq__(self, *args):
        return exlib_swig_py.bsf_rotf___eq__(self, *args)

    def __ne__(self, *args):
        return exlib_swig_py.bsf_rotf___ne__(self, *args)

    def value(self, *args):
        return exlib_swig_py.bsf_rotf_value(self, *args)

    def value_no_cmp(self, a_value):
        return exlib_swig_py.bsf_rotf_value_no_cmp(self, a_value)

# Register bsf_rotf in exlib_swig_py:
exlib_swig_py.bsf_rotf_swigregister(bsf_rotf)

class bsf_colorf(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bsf_colorf

    def __eq__(self, *args):
        return exlib_swig_py.bsf_colorf___eq__(self, *args)

    def __ne__(self, *args):
        return exlib_swig_py.bsf_colorf___ne__(self, *args)

    def value(self, *args):
        return exlib_swig_py.bsf_colorf_value(self, *args)

    def value_no_cmp(self, a_value):
        return exlib_swig_py.bsf_colorf_value_no_cmp(self, a_value)

# Register bsf_colorf in exlib_swig_py:
exlib_swig_py.bsf_colorf_swigregister(bsf_colorf)

class bsf_winding_type(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bsf_winding_type

    def __eq__(self, *args):
        return exlib_swig_py.bsf_winding_type___eq__(self, *args)

    def __ne__(self, *args):
        return exlib_swig_py.bsf_winding_type___ne__(self, *args)

    def value(self, *args):
        return exlib_swig_py.bsf_winding_type_value(self, *args)

    def value_no_cmp(self, a_value):
        return exlib_swig_py.bsf_winding_type_value_no_cmp(self, a_value)

# Register bsf_winding_type in exlib_swig_py:
exlib_swig_py.bsf_winding_type_swigregister(bsf_winding_type)

class iwbuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_iwbuf

    def write(self, *args):
        return exlib_swig_py.iwbuf_write(self, *args)

    def write_vec(self, *args):
        return exlib_swig_py.iwbuf_write_vec(self, *args)

    def write_cstr(self, a_cstr):
        return exlib_swig_py.iwbuf_write_cstr(self, a_cstr)

    def write_img(self, arg2, arg3, arg4, arg5):
        return exlib_swig_py.iwbuf_write_img(self, arg2, arg3, arg4, arg5)

    def write_std_vec_vec(self, *args):
        return exlib_swig_py.iwbuf_write_std_vec_vec(self, *args)

    def buf(self):
        return exlib_swig_py.iwbuf_buf(self)

    def length(self):
        return exlib_swig_py.iwbuf_length(self)

# Register iwbuf in exlib_swig_py:
exlib_swig_py.iwbuf_swigregister(iwbuf)

class irbuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_irbuf

    def read(self, *args):
        return exlib_swig_py.irbuf_read(self, *args)

    def read_vec(self, *args):
        return exlib_swig_py.irbuf_read_vec(self, *args)

    def read_cstr(self, arg2):
        return exlib_swig_py.irbuf_read_cstr(self, arg2)

    def read_img(self, arg2, arg3, arg4, arg5):
        return exlib_swig_py.irbuf_read_img(self, arg2, arg3, arg4, arg5)

    def read_std_vec_vec(self, *args):
        return exlib_swig_py.irbuf_read_std_vec_vec(self, *args)

# Register irbuf in exlib_swig_py:
exlib_swig_py.irbuf_swigregister(irbuf)

class sf_bool(bsf_bool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.sf_bool_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.sf_bool_read(self, a_buffer)

    def dump(self, a_out):
        return exlib_swig_py.sf_bool_dump(self, a_out)

    def __init__(self, *args):
        exlib_swig_py.sf_bool_swiginit(self, exlib_swig_py.new_sf_bool(*args))
    __swig_destroy__ = exlib_swig_py.delete_sf_bool

# Register sf_bool in exlib_swig_py:
exlib_swig_py.sf_bool_swigregister(sf_bool)

class sf_float(bsf_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.sf_float_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.sf_float_read(self, a_buffer)

    def dump(self, a_out):
        return exlib_swig_py.sf_float_dump(self, a_out)

    def __init__(self, *args):
        exlib_swig_py.sf_float_swiginit(self, exlib_swig_py.new_sf_float(*args))
    __swig_destroy__ = exlib_swig_py.delete_sf_float

# Register sf_float in exlib_swig_py:
exlib_swig_py.sf_float_swigregister(sf_float)

line_solid = exlib_swig_py.line_solid
line_dashed = exlib_swig_py.line_dashed
line_dotted = exlib_swig_py.line_dotted
line_dash_dotted = exlib_swig_py.line_dash_dotted
marker_dot = exlib_swig_py.marker_dot
marker_plus = exlib_swig_py.marker_plus
marker_asterisk = exlib_swig_py.marker_asterisk
marker_cross = exlib_swig_py.marker_cross
marker_star = exlib_swig_py.marker_star
marker_circle_line = exlib_swig_py.marker_circle_line
marker_circle_filled = exlib_swig_py.marker_circle_filled
marker_triangle_up_line = exlib_swig_py.marker_triangle_up_line
marker_triangle_up_filled = exlib_swig_py.marker_triangle_up_filled
marker_triangle_down_line = exlib_swig_py.marker_triangle_down_line
marker_triangle_down_filled = exlib_swig_py.marker_triangle_down_filled
marker_david_star_line = exlib_swig_py.marker_david_star_line
marker_david_star_filled = exlib_swig_py.marker_david_star_filled
marker_swiss_cross_line = exlib_swig_py.marker_swiss_cross_line
marker_swiss_cross_filled = exlib_swig_py.marker_swiss_cross_filled
marker_diamond_line = exlib_swig_py.marker_diamond_line
marker_diamond_filled = exlib_swig_py.marker_diamond_filled
marker_square_line = exlib_swig_py.marker_square_line
marker_square_filled = exlib_swig_py.marker_square_filled
marker_penta_star_line = exlib_swig_py.marker_penta_star_line
marker_penta_star_filled = exlib_swig_py.marker_penta_star_filled
area_solid = exlib_swig_py.area_solid
area_hatched = exlib_swig_py.area_hatched
area_checker = exlib_swig_py.area_checker
area_edged = exlib_swig_py.area_edged
projection_none = exlib_swig_py.projection_none
projection_rz = exlib_swig_py.projection_rz
projection_phiz = exlib_swig_py.projection_phiz
projection_zr = exlib_swig_py.projection_zr
projection_zphi = exlib_swig_py.projection_zphi
painting_uniform = exlib_swig_py.painting_uniform
painting_by_value = exlib_swig_py.painting_by_value
painting_by_level = exlib_swig_py.painting_by_level
painting_grey_scale = exlib_swig_py.painting_grey_scale
painting_violet_to_red = exlib_swig_py.painting_violet_to_red
painting_grey_scale_inverse = exlib_swig_py.painting_grey_scale_inverse
hatching_none = exlib_swig_py.hatching_none
hatching_right = exlib_swig_py.hatching_right
hatching_left = exlib_swig_py.hatching_left
hatching_left_and_right = exlib_swig_py.hatching_left_and_right
left = exlib_swig_py.left
center = exlib_swig_py.center
right = exlib_swig_py.right
bottom = exlib_swig_py.bottom
middle = exlib_swig_py.middle
top = exlib_swig_py.top
latin = exlib_swig_py.latin
greek = exlib_swig_py.greek
special = exlib_swig_py.special
font_outline = exlib_swig_py.font_outline
font_filled = exlib_swig_py.font_filled
arrow_up = exlib_swig_py.arrow_up
arrow_down = exlib_swig_py.arrow_down
arrow_left = exlib_swig_py.arrow_left
arrow_right = exlib_swig_py.arrow_right
winding_ccw = exlib_swig_py.winding_ccw
winding_cw = exlib_swig_py.winding_cw
move_rotate_right = exlib_swig_py.move_rotate_right
move_translate_right = exlib_swig_py.move_translate_right
move_rotate_left = exlib_swig_py.move_rotate_left
move_translate_left = exlib_swig_py.move_translate_left
move_up = exlib_swig_py.move_up
move_down = exlib_swig_py.move_down
move_forward = exlib_swig_py.move_forward
move_backward = exlib_swig_py.move_backward
move_zoom_in = exlib_swig_py.move_zoom_in
move_zoom_out = exlib_swig_py.move_zoom_out
move_rotate_around_focal_right = exlib_swig_py.move_rotate_around_focal_right
move_rotate_around_focal_left = exlib_swig_py.move_rotate_around_focal_left
anim_left = exlib_swig_py.anim_left
anim_right = exlib_swig_py.anim_right
anim_up = exlib_swig_py.anim_up
anim_down = exlib_swig_py.anim_down
key_left = exlib_swig_py.key_left
key_right = exlib_swig_py.key_right
key_up = exlib_swig_py.key_up
key_down = exlib_swig_py.key_down
number_uint = exlib_swig_py.number_uint
number_int = exlib_swig_py.number_int
number_real = exlib_swig_py.number_real
number_ip = exlib_swig_py.number_ip

def tex_expand_size(a_w, a_h, a_ew, a_eh):
    return exlib_swig_py.tex_expand_size(a_w, a_h, a_ew, a_eh)
class sf_string(bsf_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.sf_string_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.sf_string_read(self, a_buffer)

    def dump(self, arg2):
        return exlib_swig_py.sf_string_dump(self, arg2)
    __swig_destroy__ = exlib_swig_py.delete_sf_string

    def __init__(self, *args):
        exlib_swig_py.sf_string_swiginit(self, exlib_swig_py.new_sf_string(*args))

# Register sf_string in exlib_swig_py:
exlib_swig_py.sf_string_swigregister(sf_string)

class sf_rotf(bsf_rotf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.sf_rotf_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.sf_rotf_read(self, a_buffer)

    def dump(self, arg2):
        return exlib_swig_py.sf_rotf_dump(self, arg2)
    __swig_destroy__ = exlib_swig_py.delete_sf_rotf

    def __init__(self, *args):
        exlib_swig_py.sf_rotf_swiginit(self, exlib_swig_py.new_sf_rotf(*args))

# Register sf_rotf in exlib_swig_py:
exlib_swig_py.sf_rotf_swigregister(sf_rotf)

class sf_vec_colorf(bsf_colorf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.sf_vec_colorf_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.sf_vec_colorf_read(self, a_buffer)

    def dump(self, a_out):
        return exlib_swig_py.sf_vec_colorf_dump(self, a_out)
    __swig_destroy__ = exlib_swig_py.delete_sf_vec_colorf

    def __init__(self, *args):
        exlib_swig_py.sf_vec_colorf_swiginit(self, exlib_swig_py.new_sf_vec_colorf(*args))

# Register sf_vec_colorf in exlib_swig_py:
exlib_swig_py.sf_vec_colorf_swigregister(sf_vec_colorf)

class sf_enum_winding_type(bsf_winding_type):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.sf_enum_winding_type_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.sf_enum_winding_type_read(self, a_buffer)

    def dump(self, arg2):
        return exlib_swig_py.sf_enum_winding_type_dump(self, arg2)
    __swig_destroy__ = exlib_swig_py.delete_sf_enum_winding_type

    def __init__(self, *args):
        exlib_swig_py.sf_enum_winding_type_swiginit(self, exlib_swig_py.new_sf_enum_winding_type(*args))

# Register sf_enum_winding_type in exlib_swig_py:
exlib_swig_py.sf_enum_winding_type_swigregister(sf_enum_winding_type)

class bmf_string(field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_bmf_string

    def __eq__(self, a_from):
        return exlib_swig_py.bmf_string___eq__(self, a_from)

    def __ne__(self, a_from):
        return exlib_swig_py.bmf_string___ne__(self, a_from)

    def size(self):
        return exlib_swig_py.bmf_string_size(self)

    def empty(self):
        return exlib_swig_py.bmf_string_empty(self)

    def values(self, *args):
        return exlib_swig_py.bmf_string_values(self, *args)

    def add(self, *args):
        return exlib_swig_py.bmf_string_add(self, *args)

    def insert(self, a_it, a_value):
        return exlib_swig_py.bmf_string_insert(self, a_it, a_value)

    def set_value(self, a_index, a_value):
        return exlib_swig_py.bmf_string_set_value(self, a_index, a_value)

    def get_value(self, a_index, a_value):
        return exlib_swig_py.bmf_string_get_value(self, a_index, a_value)

    def clear(self):
        return exlib_swig_py.bmf_string_clear(self)

    def set_values(self, a_values):
        return exlib_swig_py.bmf_string_set_values(self, a_values)

# Register bmf_string in exlib_swig_py:
exlib_swig_py.bmf_string_swigregister(bmf_string)

class mf_string(bmf_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write(self, a_buffer):
        return exlib_swig_py.mf_string_write(self, a_buffer)

    def read(self, a_buffer):
        return exlib_swig_py.mf_string_read(self, a_buffer)

    def dump(self, a_out):
        return exlib_swig_py.mf_string_dump(self, a_out)
    __swig_destroy__ = exlib_swig_py.delete_mf_string

    def __init__(self, *args):
        exlib_swig_py.mf_string_swiginit(self, exlib_swig_py.new_mf_string(*args))

# Register mf_string in exlib_swig_py:
exlib_swig_py.mf_string_swigregister(mf_string)


def __lshift__(a_out, arg2):
    return exlib_swig_py.__lshift__(a_out, arg2)

def set_from_vec(arg1, arg2):
    return exlib_swig_py.set_from_vec(arg1, arg2)

def get_data(a_v):
    return exlib_swig_py.get_data(a_v)

def tick_modeling_none():
    return exlib_swig_py.tick_modeling_none()

def tick_modeling_hippo():
    return exlib_swig_py.tick_modeling_hippo()

def tick_modeling_hplot():
    return exlib_swig_py.tick_modeling_hplot()

def infos_modeling_ROOT():
    return exlib_swig_py.infos_modeling_ROOT()

def encoding_none():
    return exlib_swig_py.encoding_none()

def encoding_PAW():
    return exlib_swig_py.encoding_PAW()

def modeling_boxes():
    return exlib_swig_py.modeling_boxes()

def modeling_wire_boxes():
    return exlib_swig_py.modeling_wire_boxes()

def modeling_lines():
    return exlib_swig_py.modeling_lines()

def modeling_segments():
    return exlib_swig_py.modeling_segments()

def modeling_points():
    return exlib_swig_py.modeling_points()

def modeling_top_lines():
    return exlib_swig_py.modeling_top_lines()

def modeling_texts():
    return exlib_swig_py.modeling_texts()

def modeling_curve():
    return exlib_swig_py.modeling_curve()

def modeling_filled_curve():
    return exlib_swig_py.modeling_filled_curve()

def modeling_bar_chart():
    return exlib_swig_py.modeling_bar_chart()

def modeling_solid():
    return exlib_swig_py.modeling_solid()

def modeling_wire_frame():
    return exlib_swig_py.modeling_wire_frame()

def modeling_reduced_wire_frame():
    return exlib_swig_py.modeling_reduced_wire_frame()

def modeling_polygon():
    return exlib_swig_py.modeling_polygon()

def modeling_none():
    return exlib_swig_py.modeling_none()

def modeling_I():
    return exlib_swig_py.modeling_I()

def modeling_plus():
    return exlib_swig_py.modeling_plus()

def light_model_base_color():
    return exlib_swig_py.light_model_base_color()

def light_model_phong():
    return exlib_swig_py.light_model_phong()

def font_hershey():
    return exlib_swig_py.font_hershey()

def font_arialbd_ttf():
    return exlib_swig_py.font_arialbd_ttf()

def font_timesbd_ttf():
    return exlib_swig_py.font_timesbd_ttf()

def font_symbol_ttf():
    return exlib_swig_py.font_symbol_ttf()

def font_stixgeneral_otf():
    return exlib_swig_py.font_stixgeneral_otf()

def font_helvetica_ttf():
    return exlib_swig_py.font_helvetica_ttf()

def font_times_roman_ttf():
    return exlib_swig_py.font_times_roman_ttf()

def font_ROOT_62():
    return exlib_swig_py.font_ROOT_62()

def s_node_end():
    return exlib_swig_py.s_node_end()

def s_clear_scene():
    return exlib_swig_py.s_clear_scene()
class std_pair_std_string_inlib_colorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        exlib_swig_py.std_pair_std_string_inlib_colorf_swiginit(self, exlib_swig_py.new_std_pair_std_string_inlib_colorf(*args))
    first = property(exlib_swig_py.std_pair_std_string_inlib_colorf_first_get, exlib_swig_py.std_pair_std_string_inlib_colorf_first_set)
    second = property(exlib_swig_py.std_pair_std_string_inlib_colorf_second_get, exlib_swig_py.std_pair_std_string_inlib_colorf_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = exlib_swig_py.delete_std_pair_std_string_inlib_colorf

# Register std_pair_std_string_inlib_colorf in exlib_swig_py:
exlib_swig_py.std_pair_std_string_inlib_colorf_swigregister(std_pair_std_string_inlib_colorf)

class style_color(std_pair_std_string_inlib_colorf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_style_color

    def __init__(self, *args):
        exlib_swig_py.style_color_swiginit(self, exlib_swig_py.new_style_color(*args))

# Register style_color in exlib_swig_py:
exlib_swig_py.style_color_swigregister(style_color)

class std_map_unsigned_int_inlib_sg_style_color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___nonzero__(self)

    def __bool__(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___bool__(self)

    def __len__(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___getitem__(self, key)

    def __delitem__(self, key):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___delitem__(self, key)

    def has_key(self, key):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_has_key(self, key)

    def keys(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_keys(self)

    def values(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_values(self)

    def items(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_items(self)

    def __contains__(self, key):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___contains__(self, key)

    def key_iterator(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_key_iterator(self)

    def value_iterator(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_value_iterator(self)

    def __setitem__(self, *args):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color___setitem__(self, *args)

    def asdict(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_asdict(self)

    def __init__(self, *args):
        exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_swiginit(self, exlib_swig_py.new_std_map_unsigned_int_inlib_sg_style_color(*args))

    def empty(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_empty(self)

    def size(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_size(self)

    def swap(self, v):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_swap(self, v)

    def begin(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_begin(self)

    def end(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_end(self)

    def rbegin(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_rbegin(self)

    def rend(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_rend(self)

    def clear(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_clear(self)

    def get_allocator(self):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_get_allocator(self)

    def count(self, x):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_count(self, x)

    def erase(self, *args):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_erase(self, *args)

    def find(self, x):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_find(self, x)

    def lower_bound(self, x):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_lower_bound(self, x)

    def upper_bound(self, x):
        return exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_upper_bound(self, x)
    __swig_destroy__ = exlib_swig_py.delete_std_map_unsigned_int_inlib_sg_style_color

# Register std_map_unsigned_int_inlib_sg_style_color in exlib_swig_py:
exlib_swig_py.std_map_unsigned_int_inlib_sg_style_color_swigregister(std_map_unsigned_int_inlib_sg_style_color)

class style_colormap(std_map_unsigned_int_inlib_sg_style_color):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.style_colormap_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.style_colormap_check_class_name()
    __swig_destroy__ = exlib_swig_py.delete_style_colormap

    def __init__(self, *args):
        exlib_swig_py.style_colormap_swiginit(self, exlib_swig_py.new_style_colormap(*args))

    def get_color(self, *args):
        return exlib_swig_py.style_colormap_get_color(self, *args)

    def get_string_color(self, a_index, a_s):
        return exlib_swig_py.style_colormap_get_string_color(self, a_index, a_s)

    def add(self, a_color):
        return exlib_swig_py.style_colormap_add(self, a_color)

# Register style_colormap in exlib_swig_py:
exlib_swig_py.style_colormap_swigregister(style_colormap)

def style_colormap_s_class():
    return exlib_swig_py.style_colormap_s_class()

def style_colormap_check_class_name():
    return exlib_swig_py.style_colormap_check_class_name()

class style_default_colormap(style_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_default():
        return exlib_swig_py.style_default_colormap_s_default()

    def __init__(self):
        exlib_swig_py.style_default_colormap_swiginit(self, exlib_swig_py.new_style_default_colormap())
    __swig_destroy__ = exlib_swig_py.delete_style_default_colormap

# Register style_default_colormap in exlib_swig_py:
exlib_swig_py.style_default_colormap_swigregister(style_default_colormap)

def style_default_colormap_s_default():
    return exlib_swig_py.style_default_colormap_s_default()

class style_ROOT_colormap(style_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        exlib_swig_py.style_ROOT_colormap_swiginit(self, exlib_swig_py.new_style_ROOT_colormap())
    __swig_destroy__ = exlib_swig_py.delete_style_ROOT_colormap

# Register style_ROOT_colormap in exlib_swig_py:
exlib_swig_py.style_ROOT_colormap_swigregister(style_ROOT_colormap)

class style_povama_colormap(style_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        exlib_swig_py.style_povama_colormap_swiginit(self, exlib_swig_py.new_style_povama_colormap())
    __swig_destroy__ = exlib_swig_py.delete_style_povama_colormap

# Register style_povama_colormap in exlib_swig_py:
exlib_swig_py.style_povama_colormap_swigregister(style_povama_colormap)


def to_ulong(a_s, a_v):
    return exlib_swig_py.to_ulong(a_s, a_v)

def find_color(a_cmaps, a_s, a_col):
    return exlib_swig_py.find_color(a_cmaps, a_s, a_col)

def fpi():
    return exlib_swig_py.fpi()

def ftwo_pi():
    return exlib_swig_py.ftwo_pi()

def fhalf_pi():
    return exlib_swig_py.fhalf_pi()

def fcos(x):
    return exlib_swig_py.fcos(x)

def fsin(x):
    return exlib_swig_py.fsin(x)

def facos(x):
    return exlib_swig_py.facos(x)

def fasin(x):
    return exlib_swig_py.fasin(x)

def ftan(x):
    return exlib_swig_py.ftan(x)

def fatan(x):
    return exlib_swig_py.fatan(x)

def fatan2(x, y):
    return exlib_swig_py.fatan2(x, y)

def fsqrt(x):
    return exlib_swig_py.fsqrt(x)

def fpow(x, y):
    return exlib_swig_py.fpow(x, y)

def fexp(x):
    return exlib_swig_py.fexp(x)

def flog(x):
    return exlib_swig_py.flog(x)

def flog10(x):
    return exlib_swig_py.flog10(x)

def ffloor(x):
    return exlib_swig_py.ffloor(x)

def ffabs(x):
    return exlib_swig_py.ffabs(x)

def fceil(x):
    return exlib_swig_py.fceil(x)

def fdeg2rad():
    return exlib_swig_py.fdeg2rad()

def frad2deg():
    return exlib_swig_py.frad2deg()

def fround(a_x):
    return exlib_swig_py.fround(a_x)
class style_parser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_style_parser

    def __init__(self, *args):
        exlib_swig_py.style_parser_swiginit(self, exlib_swig_py.new_style_parser(*args))

    @staticmethod
    def no_limit():
        return exlib_swig_py.style_parser_no_limit()

    def copy(self, a_from):
        return exlib_swig_py.style_parser_copy(self, a_from)

    def equal(self, a_from):
        return exlib_swig_py.style_parser_equal(self, a_from)

    def reset(self):
        return exlib_swig_py.style_parser_reset(self)

    def tos(self):
        return exlib_swig_py.style_parser_tos(self)

    def color(self, *args):
        return exlib_swig_py.style_parser_color(self, *args)

    def highlight_color(self, *args):
        return exlib_swig_py.style_parser_highlight_color(self, *args)

    def back_color(self, *args):
        return exlib_swig_py.style_parser_back_color(self, *args)

    def line_width(self, *args):
        return exlib_swig_py.style_parser_line_width(self, *args)

    def back_shadow(self, *args):
        return exlib_swig_py.style_parser_back_shadow(self, *args)

    def marker_style(self, *args):
        return exlib_swig_py.style_parser_marker_style(self, *args)

    def marker_size(self, *args):
        return exlib_swig_py.style_parser_marker_size(self, *args)

    def font_size(self, *args):
        return exlib_swig_py.style_parser_font_size(self, *args)

    def area_style(self, *args):
        return exlib_swig_py.style_parser_area_style(self, *args)

    def modeling(self, *args):
        return exlib_swig_py.style_parser_modeling(self, *args)

    def light_model(self, *args):
        return exlib_swig_py.style_parser_light_model(self, *args)

    def tick_modeling(self, *args):
        return exlib_swig_py.style_parser_tick_modeling(self, *args)

    def encoding(self, *args):
        return exlib_swig_py.style_parser_encoding(self, *args)

    def smoothing(self, *args):
        return exlib_swig_py.style_parser_smoothing(self, *args)

    def hinting(self, *args):
        return exlib_swig_py.style_parser_hinting(self, *args)

    def painting(self, *args):
        return exlib_swig_py.style_parser_painting(self, *args)

    def hatching(self, *args):
        return exlib_swig_py.style_parser_hatching(self, *args)

    def projection(self, *args):
        return exlib_swig_py.style_parser_projection(self, *args)

    def line_pattern(self, *args):
        return exlib_swig_py.style_parser_line_pattern(self, *args)

    def font(self, *args):
        return exlib_swig_py.style_parser_font(self, *args)

    def divisions(self, *args):
        return exlib_swig_py.style_parser_divisions(self, *args)

    def rotation_steps(self, *args):
        return exlib_swig_py.style_parser_rotation_steps(self, *args)

    def offset(self, *args):
        return exlib_swig_py.style_parser_offset(self, *args)

    def strip_width(self, *args):
        return exlib_swig_py.style_parser_strip_width(self, *args)

    def angle(self, *args):
        return exlib_swig_py.style_parser_angle(self, *args)

    def scale(self, *args):
        return exlib_swig_py.style_parser_scale(self, *args)

    def bar_offset(self, *args):
        return exlib_swig_py.style_parser_bar_offset(self, *args)

    def bar_width(self, *args):
        return exlib_swig_py.style_parser_bar_width(self, *args)

    def multi_node_limit(self, *args):
        return exlib_swig_py.style_parser_multi_node_limit(self, *args)

    def spacing(self, *args):
        return exlib_swig_py.style_parser_spacing(self, *args)

    def visible(self, *args):
        return exlib_swig_py.style_parser_visible(self, *args)

    def editable(self, *args):
        return exlib_swig_py.style_parser_editable(self, *args)

    def automated(self, *args):
        return exlib_swig_py.style_parser_automated(self, *args)

    def cut(self, *args):
        return exlib_swig_py.style_parser_cut(self, *args)

    def options(self, *args):
        return exlib_swig_py.style_parser_options(self, *args)

    def color_mapping(self, *args):
        return exlib_swig_py.style_parser_color_mapping(self, *args)

    def enforced(self, *args):
        return exlib_swig_py.style_parser_enforced(self, *args)

    def translation(self, *args):
        return exlib_swig_py.style_parser_translation(self, *args)

    def front_face(self, *args):
        return exlib_swig_py.style_parser_front_face(self, *args)

    def hjust(self, *args):
        return exlib_swig_py.style_parser_hjust(self, *args)

    def vjust(self, *args):
        return exlib_swig_py.style_parser_vjust(self, *args)

    @staticmethod
    def scolor(a_col, a_s):
        return exlib_swig_py.style_parser_scolor(a_col, a_s)

    @staticmethod
    def shjust(*args):
        return exlib_swig_py.style_parser_shjust(*args)

    @staticmethod
    def svjust(*args):
        return exlib_swig_py.style_parser_svjust(*args)

    @staticmethod
    def smarker_style(*args):
        return exlib_swig_py.style_parser_smarker_style(*args)

    @staticmethod
    def sarea_style(*args):
        return exlib_swig_py.style_parser_sarea_style(*args)

    @staticmethod
    def spainting_policies(a_v):
        return exlib_swig_py.style_parser_spainting_policies(a_v)

    @staticmethod
    def spainting_policy(*args):
        return exlib_swig_py.style_parser_spainting_policy(*args)

    @staticmethod
    def shatching_policy(*args):
        return exlib_swig_py.style_parser_shatching_policy(*args)

    @staticmethod
    def sprojection_type(*args):
        return exlib_swig_py.style_parser_sprojection_type(*args)

    @staticmethod
    def sline_pattern(a_s, aPattern):
        return exlib_swig_py.style_parser_sline_pattern(a_s, aPattern)

    def parse(self, a_out, a_cmaps, a_s):
        return exlib_swig_py.style_parser_parse(self, a_out, a_cmaps, a_s)

# Register style_parser in exlib_swig_py:
exlib_swig_py.style_parser_swigregister(style_parser)

def style_parser_no_limit():
    return exlib_swig_py.style_parser_no_limit()

def style_parser_scolor(a_col, a_s):
    return exlib_swig_py.style_parser_scolor(a_col, a_s)

def style_parser_shjust(*args):
    return exlib_swig_py.style_parser_shjust(*args)

def style_parser_svjust(*args):
    return exlib_swig_py.style_parser_svjust(*args)

def style_parser_smarker_style(*args):
    return exlib_swig_py.style_parser_smarker_style(*args)

def style_parser_sarea_style(*args):
    return exlib_swig_py.style_parser_sarea_style(*args)

def style_parser_spainting_policies(a_v):
    return exlib_swig_py.style_parser_spainting_policies(a_v)

def style_parser_spainting_policy(*args):
    return exlib_swig_py.style_parser_spainting_policy(*args)

def style_parser_shatching_policy(*args):
    return exlib_swig_py.style_parser_shatching_policy(*args)

def style_parser_sprojection_type(*args):
    return exlib_swig_py.style_parser_sprojection_type(*args)

def style_parser_sline_pattern(a_s, aPattern):
    return exlib_swig_py.style_parser_sline_pattern(a_s, aPattern)

class base_colormap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_color(self, arg2):
        return exlib_swig_py.base_colormap_get_color(self, arg2)

    def cast(self, arg2):
        return exlib_swig_py.base_colormap_cast(self, arg2)
    __swig_destroy__ = exlib_swig_py.delete_base_colormap

    def colorn(self):
        return exlib_swig_py.base_colormap_colorn(self)

    def valn(self):
        return exlib_swig_py.base_colormap_valn(self)

    def color(self, a_index):
        return exlib_swig_py.base_colormap_color(self, a_index)

    def value(self, a_index):
        return exlib_swig_py.base_colormap_value(self, a_index)

    def set_PAW_coloring(self):
        return exlib_swig_py.base_colormap_set_PAW_coloring(self)

# Register base_colormap in exlib_swig_py:
exlib_swig_py.base_colormap_swigregister(base_colormap)

class by_value_colormap(base_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.by_value_colormap_s_class()

    def get_color(self, a_value):
        return exlib_swig_py.by_value_colormap_get_color(self, a_value)

    def cast(self, a_class):
        return exlib_swig_py.by_value_colormap_cast(self, a_class)

    def __init__(self, *args):
        exlib_swig_py.by_value_colormap_swiginit(self, exlib_swig_py.new_by_value_colormap(*args))
    __swig_destroy__ = exlib_swig_py.delete_by_value_colormap

# Register by_value_colormap in exlib_swig_py:
exlib_swig_py.by_value_colormap_swigregister(by_value_colormap)

def by_value_colormap_s_class():
    return exlib_swig_py.by_value_colormap_s_class()

class grey_scale_colormap(base_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.grey_scale_colormap_s_class()

    def get_color(self, a_value):
        return exlib_swig_py.grey_scale_colormap_get_color(self, a_value)

    def cast(self, a_class):
        return exlib_swig_py.grey_scale_colormap_cast(self, a_class)

    def __init__(self, *args):
        exlib_swig_py.grey_scale_colormap_swiginit(self, exlib_swig_py.new_grey_scale_colormap(*args))
    __swig_destroy__ = exlib_swig_py.delete_grey_scale_colormap

# Register grey_scale_colormap in exlib_swig_py:
exlib_swig_py.grey_scale_colormap_swigregister(grey_scale_colormap)

def grey_scale_colormap_s_class():
    return exlib_swig_py.grey_scale_colormap_s_class()

class grey_scale_inverse_colormap(base_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.grey_scale_inverse_colormap_s_class()

    def get_color(self, a_value):
        return exlib_swig_py.grey_scale_inverse_colormap_get_color(self, a_value)

    def cast(self, a_class):
        return exlib_swig_py.grey_scale_inverse_colormap_cast(self, a_class)

    def __init__(self, *args):
        exlib_swig_py.grey_scale_inverse_colormap_swiginit(self, exlib_swig_py.new_grey_scale_inverse_colormap(*args))
    __swig_destroy__ = exlib_swig_py.delete_grey_scale_inverse_colormap

# Register grey_scale_inverse_colormap in exlib_swig_py:
exlib_swig_py.grey_scale_inverse_colormap_swigregister(grey_scale_inverse_colormap)

def grey_scale_inverse_colormap_s_class():
    return exlib_swig_py.grey_scale_inverse_colormap_s_class()

class violet_to_red_colormap(base_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.violet_to_red_colormap_s_class()

    def get_color(self, a_value):
        return exlib_swig_py.violet_to_red_colormap_get_color(self, a_value)

    def cast(self, a_class):
        return exlib_swig_py.violet_to_red_colormap_cast(self, a_class)

    def __init__(self, *args):
        exlib_swig_py.violet_to_red_colormap_swiginit(self, exlib_swig_py.new_violet_to_red_colormap(*args))
    __swig_destroy__ = exlib_swig_py.delete_violet_to_red_colormap

# Register violet_to_red_colormap in exlib_swig_py:
exlib_swig_py.violet_to_red_colormap_swigregister(violet_to_red_colormap)

def violet_to_red_colormap_s_class():
    return exlib_swig_py.violet_to_red_colormap_s_class()

class const_colormap(base_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.const_colormap_s_class()

    def get_color(self, arg2):
        return exlib_swig_py.const_colormap_get_color(self, arg2)

    def cast(self, a_class):
        return exlib_swig_py.const_colormap_cast(self, a_class)

    def __init__(self, *args):
        exlib_swig_py.const_colormap_swiginit(self, exlib_swig_py.new_const_colormap(*args))
    __swig_destroy__ = exlib_swig_py.delete_const_colormap

# Register const_colormap in exlib_swig_py:
exlib_swig_py.const_colormap_swigregister(const_colormap)

def const_colormap_s_class():
    return exlib_swig_py.const_colormap_s_class()

class action(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a_out):
        exlib_swig_py.action_swiginit(self, exlib_swig_py.new_action(a_out))
    __swig_destroy__ = exlib_swig_py.delete_action

    def out(self):
        return exlib_swig_py.action_out(self)

# Register action in exlib_swig_py:
exlib_swig_py.action_swigregister(action)

class search_action(action):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_search_action

    def __init__(self, *args):
        exlib_swig_py.search_action_swiginit(self, exlib_swig_py.new_search_action(*args))

    def reset(self):
        return exlib_swig_py.search_action_reset(self)
    search_node_of_class = exlib_swig_py.search_action_search_node_of_class
    search_path_to_node = exlib_swig_py.search_action_search_path_to_node
    search_path_to_node_of_class = exlib_swig_py.search_action_search_path_to_node_of_class

    def what(self):
        return exlib_swig_py.search_action_what(self)

    def set_what(self, a_v):
        return exlib_swig_py.search_action_set_what(self, a_v)

    def set_done(self, a_value):
        return exlib_swig_py.search_action_set_done(self, a_value)

    def done(self):
        return exlib_swig_py.search_action_done(self)

    def add_obj(self, a_obj):
        return exlib_swig_py.search_action_add_obj(self, a_obj)

    def objs(self):
        return exlib_swig_py.search_action_objs(self)

    def set_class(self, a_class):
        return exlib_swig_py.search_action_set_class(self, a_class)

    def sclass(self, *args):
        return exlib_swig_py.search_action_sclass(self, *args)

    def set_node(self, a_v):
        return exlib_swig_py.search_action_set_node(self, a_v)

    def node(self):
        return exlib_swig_py.search_action_node(self)

    def path_push(self, a_v):
        return exlib_swig_py.search_action_path_push(self, a_v)

    def path_pop(self):
        return exlib_swig_py.search_action_path_pop(self)

    def path(self):
        return exlib_swig_py.search_action_path(self)

    def clear_path(self):
        return exlib_swig_py.search_action_clear_path(self)

    def do_path(self):
        return exlib_swig_py.search_action_do_path(self)

    def add_path(self, a_p):
        return exlib_swig_py.search_action_add_path(self, a_p)

    def paths(self):
        return exlib_swig_py.search_action_paths(self)

# Register search_action in exlib_swig_py:
exlib_swig_py.search_action_swigregister(search_action)

class win_action(action):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a_out, a_ww, a_wh):
        exlib_swig_py.win_action_swiginit(self, exlib_swig_py.new_win_action(a_out, a_ww, a_wh))
    __swig_destroy__ = exlib_swig_py.delete_win_action

    def ww(self):
        return exlib_swig_py.win_action_ww(self)

    def wh(self):
        return exlib_swig_py.win_action_wh(self)

# Register win_action in exlib_swig_py:
exlib_swig_py.win_action_swigregister(win_action)

class mat4f(mat4_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_mat4f

    def __init__(self, *args):
        exlib_swig_py.mat4f_swiginit(self, exlib_swig_py.new_mat4f(*args))

    def mul_2f(self, a_x, a_y):
        return exlib_swig_py.mat4f_mul_2f(self, a_x, a_y)

    def mul_3f(self, a_x, a_y, a_z):
        return exlib_swig_py.mat4f_mul_3f(self, a_x, a_y, a_z)

    def mul_4f(self, a_x, a_y, a_z, a_w):
        return exlib_swig_py.mat4f_mul_4f(self, a_x, a_y, a_z, a_w)

# Register mat4f in exlib_swig_py:
exlib_swig_py.mat4f_swigregister(mat4f)

class state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_state

    def __init__(self, *args):
        exlib_swig_py.state_swiginit(self, exlib_swig_py.new_state(*args))

    def screen2ndc(self, a_x, a_y, a_wcx, a_wcy, a_wcz, a_wcw):
        return exlib_swig_py.state_screen2ndc(self, a_x, a_y, a_wcx, a_wcy, a_wcz, a_wcw)

    def screen2wc(self, a_x, a_y, a_wcx, a_wcy, a_wcz):
        return exlib_swig_py.state_screen2wc(self, a_x, a_y, a_wcx, a_wcy, a_wcz)

    def screen2pwc(self, a_x, a_y, a_wcx, a_wcy, a_wcz):
        return exlib_swig_py.state_screen2pwc(self, a_x, a_y, a_wcx, a_wcy, a_wcz)

    def camera_proj_only(self, a_mtx):
        return exlib_swig_py.state_camera_proj_only(self, a_mtx)
    m_ww = property(exlib_swig_py.state_m_ww_get, exlib_swig_py.state_m_ww_set)
    m_wh = property(exlib_swig_py.state_m_wh_get, exlib_swig_py.state_m_wh_set)
    m_proj = property(exlib_swig_py.state_m_proj_get, exlib_swig_py.state_m_proj_set)
    m_model = property(exlib_swig_py.state_m_model_get, exlib_swig_py.state_m_model_set)
    m_GL_DEPTH_TEST = property(exlib_swig_py.state_m_GL_DEPTH_TEST_get, exlib_swig_py.state_m_GL_DEPTH_TEST_set)
    m_GL_LIGHTING = property(exlib_swig_py.state_m_GL_LIGHTING_get, exlib_swig_py.state_m_GL_LIGHTING_set)
    m_GL_CULL_FACE = property(exlib_swig_py.state_m_GL_CULL_FACE_get, exlib_swig_py.state_m_GL_CULL_FACE_set)
    m_GL_POLYGON_OFFSET_FILL = property(exlib_swig_py.state_m_GL_POLYGON_OFFSET_FILL_get, exlib_swig_py.state_m_GL_POLYGON_OFFSET_FILL_set)
    m_GL_TEXTURE_2D = property(exlib_swig_py.state_m_GL_TEXTURE_2D_get, exlib_swig_py.state_m_GL_TEXTURE_2D_set)
    m_use_vbo = property(exlib_swig_py.state_m_use_vbo_get, exlib_swig_py.state_m_use_vbo_set)
    m_winding = property(exlib_swig_py.state_m_winding_get, exlib_swig_py.state_m_winding_set)
    m_color = property(exlib_swig_py.state_m_color_get, exlib_swig_py.state_m_color_set)
    m_light = property(exlib_swig_py.state_m_light_get, exlib_swig_py.state_m_light_set)
    m_line_width = property(exlib_swig_py.state_m_line_width_get, exlib_swig_py.state_m_line_width_set)
    m_line_pattern = property(exlib_swig_py.state_m_line_pattern_get, exlib_swig_py.state_m_line_pattern_set)
    m_point_size = property(exlib_swig_py.state_m_point_size_get, exlib_swig_py.state_m_point_size_set)
    m_camera_ortho = property(exlib_swig_py.state_m_camera_ortho_get, exlib_swig_py.state_m_camera_ortho_set)
    m_camera_znear = property(exlib_swig_py.state_m_camera_znear_get, exlib_swig_py.state_m_camera_znear_set)
    m_camera_zfar = property(exlib_swig_py.state_m_camera_zfar_get, exlib_swig_py.state_m_camera_zfar_set)
    m_camera_position = property(exlib_swig_py.state_m_camera_position_get, exlib_swig_py.state_m_camera_position_set)
    m_camera_orientation = property(exlib_swig_py.state_m_camera_orientation_get, exlib_swig_py.state_m_camera_orientation_set)
    m_camera_lrbt = property(exlib_swig_py.state_m_camera_lrbt_get, exlib_swig_py.state_m_camera_lrbt_set)

# Register state in exlib_swig_py:
exlib_swig_py.state_swigregister(state)

class states(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a_ww, a_wh):
        exlib_swig_py.states_swiginit(self, exlib_swig_py.new_states(a_ww, a_wh))
    __swig_destroy__ = exlib_swig_py.delete_states

    def state(self):
        return exlib_swig_py.states_state(self)

    def pop_state(self):
        return exlib_swig_py.states_pop_state(self)

    def push_state(self):
        return exlib_swig_py.states_push_state(self)

    def save_state(self, a_state):
        return exlib_swig_py.states_save_state(self, a_state)

    def saved_state(self, *args):
        return exlib_swig_py.states_saved_state(self, *args)

# Register states in exlib_swig_py:
exlib_swig_py.states_swigregister(states)

class matrix_action(win_action, states):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def load_proj_matrix(self, a_mtx):
        return exlib_swig_py.matrix_action_load_proj_matrix(self, a_mtx)

    def load_model_matrix(self, a_mtx):
        return exlib_swig_py.matrix_action_load_model_matrix(self, a_mtx)
    __swig_destroy__ = exlib_swig_py.delete_matrix_action

    def __init__(self, *args):
        exlib_swig_py.matrix_action_swiginit(self, exlib_swig_py.new_matrix_action(*args))

    def push_matrices(self):
        return exlib_swig_py.matrix_action_push_matrices(self)

    def pop_matrices(self):
        return exlib_swig_py.matrix_action_pop_matrices(self)

    def projection_matrix(self):
        return exlib_swig_py.matrix_action_projection_matrix(self)

    def model_matrix(self):
        return exlib_swig_py.matrix_action_model_matrix(self)

    def end(self):
        return exlib_swig_py.matrix_action_end(self)

    def cur(self):
        return exlib_swig_py.matrix_action_cur(self)

    def project_point(self, a_x, a_y, a_z, a_w):
        return exlib_swig_py.matrix_action_project_point(self, a_x, a_y, a_z, a_w)

    def model_point(self, a_x, a_y, a_z, a_w):
        return exlib_swig_py.matrix_action_model_point(self, a_x, a_y, a_z, a_w)

    def projected_origin(self, a_x, a_y, a_z):
        return exlib_swig_py.matrix_action_projected_origin(self, a_x, a_y, a_z)

    def matrices_to_identity(self):
        return exlib_swig_py.matrix_action_matrices_to_identity(self)

    def matrices_from_state(self):
        return exlib_swig_py.matrix_action_matrices_from_state(self)

# Register matrix_action in exlib_swig_py:
exlib_swig_py.matrix_action_swigregister(matrix_action)


def points():
    return exlib_swig_py.points()

def lines():
    return exlib_swig_py.lines()

def line_loop():
    return exlib_swig_py.line_loop()

def line_strip():
    return exlib_swig_py.line_strip()

def triangles():
    return exlib_swig_py.triangles()

def triangle_strip():
    return exlib_swig_py.triangle_strip()

def triangle_fan():
    return exlib_swig_py.triangle_fan()

def is_line(a_mode):
    return exlib_swig_py.is_line(a_mode)
class primitive_visitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_primitive_visitor

    def add_one_point(self, a_x, a_y, a_z):
        return exlib_swig_py.primitive_visitor_add_one_point(self, a_x, a_y, a_z)

    def add_triangles(self, *args):
        return exlib_swig_py.primitive_visitor_add_triangles(self, *args)

    def add_line_loop(self, *args):
        return exlib_swig_py.primitive_visitor_add_line_loop(self, *args)

    def add_triangle_fan_xy(self, a_floatn, a_xys, a_stop=False, a_triangle_revert=False):
        return exlib_swig_py.primitive_visitor_add_triangle_fan_xy(self, a_floatn, a_xys, a_stop, a_triangle_revert)

    def add_triangle_strip_xy(self, a_floatn, a_xys, a_stop=False, a_triangle_revert=False):
        return exlib_swig_py.primitive_visitor_add_triangle_strip_xy(self, a_floatn, a_xys, a_stop, a_triangle_revert)

    def add_triangles_xy(self, a_floatn, a_xys, a_stop=False, a_triangle_revert=False):
        return exlib_swig_py.primitive_visitor_add_triangles_xy(self, a_floatn, a_xys, a_stop, a_triangle_revert)

    def add_line_loop_xy(self, a_floatn, a_xys, a_stop=False):
        return exlib_swig_py.primitive_visitor_add_line_loop_xy(self, a_floatn, a_xys, a_stop)

    def add_line_strip_xy(self, a_floatn, a_xys, a_stop=False):
        return exlib_swig_py.primitive_visitor_add_line_strip_xy(self, a_floatn, a_xys, a_stop)

    def add_primitive_xy(self, a_mode, a_floatn, a_xys, a_stop=False, a_triangle_revert=False):
        return exlib_swig_py.primitive_visitor_add_primitive_xy(self, a_mode, a_floatn, a_xys, a_stop, a_triangle_revert)

    def add_primitive(self, *args):
        return exlib_swig_py.primitive_visitor_add_primitive(self, *args)

    def add_line_strip(self, *args):
        return exlib_swig_py.primitive_visitor_add_line_strip(self, *args)

    def add_lines_xy(self, *args):
        return exlib_swig_py.primitive_visitor_add_lines_xy(self, *args)

    def add_lines(self, *args):
        return exlib_swig_py.primitive_visitor_add_lines(self, *args)

    def add_points(self, *args):
        return exlib_swig_py.primitive_visitor_add_points(self, *args)

    def add_triangle_fan(self, *args):
        return exlib_swig_py.primitive_visitor_add_triangle_fan(self, *args)

    def add_triangle_fan_texture(self, a_floatn, a_xyzs, arg4, arg5):
        return exlib_swig_py.primitive_visitor_add_triangle_fan_texture(self, a_floatn, a_xyzs, arg4, arg5)

    def add_triangle_strip(self, *args):
        return exlib_swig_py.primitive_visitor_add_triangle_strip(self, *args)

    def add_triangle_strip_texture(self, a_floatn, a_xyzs, arg4, arg5):
        return exlib_swig_py.primitive_visitor_add_triangle_strip_texture(self, a_floatn, a_xyzs, arg4, arg5)

# Register primitive_visitor in exlib_swig_py:
exlib_swig_py.primitive_visitor_swigregister(primitive_visitor)

class write_action(matrix_action, primitive_visitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def buffer(self):
        return exlib_swig_py.write_action_buffer(self)

    def beg_node(self, arg2):
        return exlib_swig_py.write_action_beg_node(self, arg2)

    def end_node(self, arg2):
        return exlib_swig_py.write_action_end_node(self, arg2)

    def switch_do_all_children(self):
        return exlib_swig_py.write_action_switch_do_all_children(self)
    __swig_destroy__ = exlib_swig_py.delete_write_action

# Register write_action in exlib_swig_py:
exlib_swig_py.write_action_swigregister(write_action)

class node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.node_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.node_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.node_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.node_copy(self)

    def s_cls(self):
        return exlib_swig_py.node_s_cls(self)

    def node_fields(self):
        return exlib_swig_py.node_node_fields(self)

    def render(self, arg2):
        return exlib_swig_py.node_render(self, arg2)

    def pick(self, arg2):
        return exlib_swig_py.node_pick(self, arg2)

    def bbox(self, arg2):
        return exlib_swig_py.node_bbox(self, arg2)

    def search(self, a_action):
        return exlib_swig_py.node_search(self, a_action)

    def write(self, a_action):
        return exlib_swig_py.node_write(self, a_action)

    def event(self, arg2):
        return exlib_swig_py.node_event(self, arg2)
    __swig_destroy__ = exlib_swig_py.delete_node

    def reset_touched(self):
        return exlib_swig_py.node_reset_touched(self)

    def fields(self, *args):
        return exlib_swig_py.node_fields(self, *args)

# Register node in exlib_swig_py:
exlib_swig_py.node_swigregister(node)

def node_s_class():
    return exlib_swig_py.node_s_class()

def node_check_class_name():
    return exlib_swig_py.node_check_class_name()

class style(node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    color = property(exlib_swig_py.style_color_get, exlib_swig_py.style_color_set)
    highlight_color = property(exlib_swig_py.style_highlight_color_get, exlib_swig_py.style_highlight_color_set)
    back_color = property(exlib_swig_py.style_back_color_get, exlib_swig_py.style_back_color_set)
    line_width = property(exlib_swig_py.style_line_width_get, exlib_swig_py.style_line_width_set)
    marker_size = property(exlib_swig_py.style_marker_size_get, exlib_swig_py.style_marker_size_set)
    font_size = property(exlib_swig_py.style_font_size_get, exlib_swig_py.style_font_size_set)
    line_pattern = property(exlib_swig_py.style_line_pattern_get, exlib_swig_py.style_line_pattern_set)
    marker_style = property(exlib_swig_py.style_marker_style_get, exlib_swig_py.style_marker_style_set)
    area_style = property(exlib_swig_py.style_area_style_get, exlib_swig_py.style_area_style_set)
    modeling = property(exlib_swig_py.style_modeling_get, exlib_swig_py.style_modeling_set)
    light_model = property(exlib_swig_py.style_light_model_get, exlib_swig_py.style_light_model_set)
    tick_modeling = property(exlib_swig_py.style_tick_modeling_get, exlib_swig_py.style_tick_modeling_set)
    encoding = property(exlib_swig_py.style_encoding_get, exlib_swig_py.style_encoding_set)
    smoothing = property(exlib_swig_py.style_smoothing_get, exlib_swig_py.style_smoothing_set)
    hinting = property(exlib_swig_py.style_hinting_get, exlib_swig_py.style_hinting_set)
    cut = property(exlib_swig_py.style_cut_get, exlib_swig_py.style_cut_set)
    painting = property(exlib_swig_py.style_painting_get, exlib_swig_py.style_painting_set)
    hatching = property(exlib_swig_py.style_hatching_get, exlib_swig_py.style_hatching_set)
    projection = property(exlib_swig_py.style_projection_get, exlib_swig_py.style_projection_set)
    font = property(exlib_swig_py.style_font_get, exlib_swig_py.style_font_set)
    multi_node_limit = property(exlib_swig_py.style_multi_node_limit_get, exlib_swig_py.style_multi_node_limit_set)
    divisions = property(exlib_swig_py.style_divisions_get, exlib_swig_py.style_divisions_set)
    rotation_steps = property(exlib_swig_py.style_rotation_steps_get, exlib_swig_py.style_rotation_steps_set)
    spacing = property(exlib_swig_py.style_spacing_get, exlib_swig_py.style_spacing_set)
    angle = property(exlib_swig_py.style_angle_get, exlib_swig_py.style_angle_set)
    scale = property(exlib_swig_py.style_scale_get, exlib_swig_py.style_scale_set)
    offset = property(exlib_swig_py.style_offset_get, exlib_swig_py.style_offset_set)
    strip_width = property(exlib_swig_py.style_strip_width_get, exlib_swig_py.style_strip_width_set)
    visible = property(exlib_swig_py.style_visible_get, exlib_swig_py.style_visible_set)
    bar_offset = property(exlib_swig_py.style_bar_offset_get, exlib_swig_py.style_bar_offset_set)
    bar_width = property(exlib_swig_py.style_bar_width_get, exlib_swig_py.style_bar_width_set)
    editable = property(exlib_swig_py.style_editable_get, exlib_swig_py.style_editable_set)
    automated = property(exlib_swig_py.style_automated_get, exlib_swig_py.style_automated_set)
    options = property(exlib_swig_py.style_options_get, exlib_swig_py.style_options_set)
    color_mapping = property(exlib_swig_py.style_color_mapping_get, exlib_swig_py.style_color_mapping_set)
    enforced = property(exlib_swig_py.style_enforced_get, exlib_swig_py.style_enforced_set)
    translation = property(exlib_swig_py.style_translation_get, exlib_swig_py.style_translation_set)

    def copy(self):
        return exlib_swig_py.style_copy(self)

    def s_cls(self):
        return exlib_swig_py.style_s_cls(self)
    __swig_destroy__ = exlib_swig_py.delete_style

    def __init__(self, *args):
        exlib_swig_py.style_swiginit(self, exlib_swig_py.new_style(*args))

    def from_string(self, a_out, a_cmaps, a_s):
        return exlib_swig_py.style_from_string(self, a_out, a_cmaps, a_s)

# Register style in exlib_swig_py:
exlib_swig_py.style_swigregister(style)

class text_style(node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    visible = property(exlib_swig_py.text_style_visible_get, exlib_swig_py.text_style_visible_set)
    color = property(exlib_swig_py.text_style_color_get, exlib_swig_py.text_style_color_set)
    back_color = property(exlib_swig_py.text_style_back_color_get, exlib_swig_py.text_style_back_color_set)
    back_shadow = property(exlib_swig_py.text_style_back_shadow_get, exlib_swig_py.text_style_back_shadow_set)
    modeling = property(exlib_swig_py.text_style_modeling_get, exlib_swig_py.text_style_modeling_set)
    font = property(exlib_swig_py.text_style_font_get, exlib_swig_py.text_style_font_set)
    font_size = property(exlib_swig_py.text_style_font_size_get, exlib_swig_py.text_style_font_size_set)
    encoding = property(exlib_swig_py.text_style_encoding_get, exlib_swig_py.text_style_encoding_set)
    smoothing = property(exlib_swig_py.text_style_smoothing_get, exlib_swig_py.text_style_smoothing_set)
    hinting = property(exlib_swig_py.text_style_hinting_get, exlib_swig_py.text_style_hinting_set)
    hjust = property(exlib_swig_py.text_style_hjust_get, exlib_swig_py.text_style_hjust_set)
    vjust = property(exlib_swig_py.text_style_vjust_get, exlib_swig_py.text_style_vjust_set)
    scale = property(exlib_swig_py.text_style_scale_get, exlib_swig_py.text_style_scale_set)
    x_orientation = property(exlib_swig_py.text_style_x_orientation_get, exlib_swig_py.text_style_x_orientation_set)
    y_orientation = property(exlib_swig_py.text_style_y_orientation_get, exlib_swig_py.text_style_y_orientation_set)
    rotated = property(exlib_swig_py.text_style_rotated_get, exlib_swig_py.text_style_rotated_set)
    line_width = property(exlib_swig_py.text_style_line_width_get, exlib_swig_py.text_style_line_width_set)
    line_pattern = property(exlib_swig_py.text_style_line_pattern_get, exlib_swig_py.text_style_line_pattern_set)
    enforced = property(exlib_swig_py.text_style_enforced_get, exlib_swig_py.text_style_enforced_set)
    translation = property(exlib_swig_py.text_style_translation_get, exlib_swig_py.text_style_translation_set)
    front_face = property(exlib_swig_py.text_style_front_face_get, exlib_swig_py.text_style_front_face_set)

    def copy(self):
        return exlib_swig_py.text_style_copy(self)

    def s_cls(self):
        return exlib_swig_py.text_style_s_cls(self)
    __swig_destroy__ = exlib_swig_py.delete_text_style

    def __init__(self, *args):
        exlib_swig_py.text_style_swiginit(self, exlib_swig_py.new_text_style(*args))

    def from_string(self, a_out, a_cmaps, a_s):
        return exlib_swig_py.text_style_from_string(self, a_out, a_cmaps, a_s)

# Register text_style in exlib_swig_py:
exlib_swig_py.text_style_swigregister(text_style)

class line_style(node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.line_style_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.line_style_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.line_style_cast(self, a_class)
    visible = property(exlib_swig_py.line_style_visible_get, exlib_swig_py.line_style_visible_set)
    color = property(exlib_swig_py.line_style_color_get, exlib_swig_py.line_style_color_set)
    width = property(exlib_swig_py.line_style_width_get, exlib_swig_py.line_style_width_set)
    pattern = property(exlib_swig_py.line_style_pattern_get, exlib_swig_py.line_style_pattern_set)

    def copy(self):
        return exlib_swig_py.line_style_copy(self)

    def s_cls(self):
        return exlib_swig_py.line_style_s_cls(self)
    __swig_destroy__ = exlib_swig_py.delete_line_style

    def __init__(self, *args):
        exlib_swig_py.line_style_swiginit(self, exlib_swig_py.new_line_style(*args))

    def from_string(self, a_out, a_cmaps, a_s):
        return exlib_swig_py.line_style_from_string(self, a_out, a_cmaps, a_s)

# Register line_style in exlib_swig_py:
exlib_swig_py.line_style_swigregister(line_style)

def line_style_s_class():
    return exlib_swig_py.line_style_s_class()

def line_style_check_class_name():
    return exlib_swig_py.line_style_check_class_name()

class pick_element(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_pick_element

    def __init__(self, *args):
        exlib_swig_py.pick_element_swiginit(self, exlib_swig_py.new_pick_element(*args))

    def node(self, *args):
        return exlib_swig_py.pick_element_node(self, *args)

    def zs(self, *args):
        return exlib_swig_py.pick_element_zs(self, *args)

    def ws(self, *args):
        return exlib_swig_py.pick_element_ws(self, *args)

    def state(self, *args):
        return exlib_swig_py.pick_element_state(self, *args)

# Register pick_element in exlib_swig_py:
exlib_swig_py.pick_element_swigregister(pick_element)

class pick_action(matrix_action, primitive_visitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_pick_action

    def __init__(self, *args):
        exlib_swig_py.pick_action_swiginit(self, exlib_swig_py.new_pick_action(*args))

    def reset(self):
        return exlib_swig_py.pick_action_reset(self)

    def set_area(self, a_l, a_r, a_b, a_t):
        return exlib_swig_py.pick_action_set_area(self, a_l, a_r, a_b, a_t)

    def set_stop_at_first(self, a_value):
        return exlib_swig_py.pick_action_set_stop_at_first(self, a_value)

    def stop_at_first(self):
        return exlib_swig_py.pick_action_stop_at_first(self)

    def set_done(self, a_value):
        return exlib_swig_py.pick_action_set_done(self, a_value)

    def done(self):
        return exlib_swig_py.pick_action_done(self)

    def set_node(self, a_node):
        return exlib_swig_py.pick_action_set_node(self, a_node)

    def node(self):
        return exlib_swig_py.pick_action_node(self)

    def add_pick(self, a_node, a_zs, a_ws, a_state):
        return exlib_swig_py.pick_action_add_pick(self, a_node, a_zs, a_ws, a_state)

    def picks(self):
        return exlib_swig_py.pick_action_picks(self)

    def dump_picks(self):
        return exlib_swig_py.pick_action_dump_picks(self)

    def closest_pick(self):
        return exlib_swig_py.pick_action_closest_pick(self)

    def zs(self, *args):
        return exlib_swig_py.pick_action_zs(self, *args)

    def ws(self, *args):
        return exlib_swig_py.pick_action_ws(self, *args)

    def add__primitive_xy(self, a_node, a_mode, a_floatn, a_xys, a_stop=False, a_triangle_revert=False):
        return exlib_swig_py.pick_action_add__primitive_xy(self, a_node, a_mode, a_floatn, a_xys, a_stop, a_triangle_revert)

    def add__line_strip_xy(self, a_node, a_floatn, a_xys, a_stop=False):
        return exlib_swig_py.pick_action_add__line_strip_xy(self, a_node, a_floatn, a_xys, a_stop)

    def add__lines_xy(self, a_node, a_xys, a_stop=False):
        return exlib_swig_py.pick_action_add__lines_xy(self, a_node, a_xys, a_stop)

    def add__primitive(self, *args):
        return exlib_swig_py.pick_action_add__primitive(self, *args)

    def add__line_strip(self, a_node, a_floatn, a_xyzs, a_stop=False):
        return exlib_swig_py.pick_action_add__line_strip(self, a_node, a_floatn, a_xyzs, a_stop)

    def add__triangles(self, a_node, a_floatn, a_xyzs, a_stop=False):
        return exlib_swig_py.pick_action_add__triangles(self, a_node, a_floatn, a_xyzs, a_stop)

    def add__lines(self, a_node, a_xyzs, a_stop=False):
        return exlib_swig_py.pick_action_add__lines(self, a_node, a_xyzs, a_stop)

    def is_inside(self, a_x, a_y, a_z, a_w):
        return exlib_swig_py.pick_action_is_inside(self, a_x, a_y, a_z, a_w)

    def intersect_line(self, a_bx, a_by, a_bz, a_bw, a_ex, a_ey, a_ez, a_ew):
        return exlib_swig_py.pick_action_intersect_line(self, a_bx, a_by, a_bz, a_bw, a_ex, a_ey, a_ez, a_ew)

# Register pick_action in exlib_swig_py:
exlib_swig_py.pick_action_swigregister(pick_action)

class event(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def cast(self, arg2):
        return exlib_swig_py.event_cast(self, arg2)

    def copy(self):
        return exlib_swig_py.event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_event

# Register event in exlib_swig_py:
exlib_swig_py.event_swigregister(event)

class devrot_event(event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.devrot_event_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.devrot_event_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.devrot_event_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.devrot_event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_devrot_event

    def __init__(self, *args):
        exlib_swig_py.devrot_event_swiginit(self, exlib_swig_py.new_devrot_event(*args))

# Register devrot_event in exlib_swig_py:
exlib_swig_py.devrot_event_swigregister(devrot_event)

def devrot_event_s_class():
    return exlib_swig_py.devrot_event_s_class()

def devrot_event_check_class_name():
    return exlib_swig_py.devrot_event_check_class_name()

class size_event(event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.size_event_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.size_event_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.size_event_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.size_event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_size_event

    def __init__(self, *args):
        exlib_swig_py.size_event_swiginit(self, exlib_swig_py.new_size_event(*args))

    def old_width(self):
        return exlib_swig_py.size_event_old_width(self)

    def old_height(self):
        return exlib_swig_py.size_event_old_height(self)

    def width(self):
        return exlib_swig_py.size_event_width(self)

    def height(self):
        return exlib_swig_py.size_event_height(self)

# Register size_event in exlib_swig_py:
exlib_swig_py.size_event_swigregister(size_event)

def size_event_s_class():
    return exlib_swig_py.size_event_s_class()

def size_event_check_class_name():
    return exlib_swig_py.size_event_check_class_name()

class down_event(event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.down_event_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.down_event_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.down_event_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.down_event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_down_event

    def __init__(self, *args):
        exlib_swig_py.down_event_swiginit(self, exlib_swig_py.new_down_event(*args))

    def x(self):
        return exlib_swig_py.down_event_x(self)

    def y(self):
        return exlib_swig_py.down_event_y(self)

# Register down_event in exlib_swig_py:
exlib_swig_py.down_event_swigregister(down_event)

def down_event_s_class():
    return exlib_swig_py.down_event_s_class()

def down_event_check_class_name():
    return exlib_swig_py.down_event_check_class_name()

class up_event(event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.up_event_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.up_event_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.up_event_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.up_event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_up_event

    def __init__(self, *args):
        exlib_swig_py.up_event_swiginit(self, exlib_swig_py.new_up_event(*args))

    def x(self):
        return exlib_swig_py.up_event_x(self)

    def y(self):
        return exlib_swig_py.up_event_y(self)

# Register up_event in exlib_swig_py:
exlib_swig_py.up_event_swigregister(up_event)

def up_event_s_class():
    return exlib_swig_py.up_event_s_class()

def up_event_check_class_name():
    return exlib_swig_py.up_event_check_class_name()

class move_event(event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.move_event_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.move_event_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.move_event_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.move_event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_move_event

    def __init__(self, *args):
        exlib_swig_py.move_event_swiginit(self, exlib_swig_py.new_move_event(*args))

    def x(self):
        return exlib_swig_py.move_event_x(self)

    def y(self):
        return exlib_swig_py.move_event_y(self)

    def ox(self):
        return exlib_swig_py.move_event_ox(self)

    def oy(self):
        return exlib_swig_py.move_event_oy(self)

    def is_touch(self):
        return exlib_swig_py.move_event_is_touch(self)

# Register move_event in exlib_swig_py:
exlib_swig_py.move_event_swigregister(move_event)

def move_event_s_class():
    return exlib_swig_py.move_event_s_class()

def move_event_check_class_name():
    return exlib_swig_py.move_event_check_class_name()

class anim_event(event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.anim_event_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.anim_event_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.anim_event_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.anim_event_copy(self)
    __swig_destroy__ = exlib_swig_py.delete_anim_event

    def __init__(self, *args):
        exlib_swig_py.anim_event_swiginit(self, exlib_swig_py.new_anim_event(*args))

    def seconds(self):
        return exlib_swig_py.anim_event_seconds(self)

    def micro_seconds(self):
        return exlib_swig_py.anim_event_micro_seconds(self)

    def set_some_found(self, a_v):
        return exlib_swig_py.anim_event_set_some_found(self, a_v)

    def some_found(self):
        return exlib_swig_py.anim_event_some_found(self)

# Register anim_event in exlib_swig_py:
exlib_swig_py.anim_event_swigregister(anim_event)

def anim_event_s_class():
    return exlib_swig_py.anim_event_s_class()

def anim_event_check_class_name():
    return exlib_swig_py.anim_event_check_class_name()

class event_action(matrix_action):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_swig_py.delete_event_action

    def __init__(self, *args):
        exlib_swig_py.event_action_swiginit(self, exlib_swig_py.new_event_action(*args))

    def reset(self):
        return exlib_swig_py.event_action_reset(self)

    def get_event(self, *args):
        return exlib_swig_py.event_action_get_event(self, *args)

    def set_done(self, a_value):
        return exlib_swig_py.event_action_set_done(self, a_value)

    def done(self):
        return exlib_swig_py.event_action_done(self)

    def set_do_switch_children(self, a_value):
        return exlib_swig_py.event_action_set_do_switch_children(self, a_value)

    def do_switch_children(self):
        return exlib_swig_py.event_action_do_switch_children(self)

# Register event_action in exlib_swig_py:
exlib_swig_py.event_action_swigregister(event_action)

class group(node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def s_class():
        return exlib_swig_py.group_s_class()

    @staticmethod
    def check_class_name():
        return exlib_swig_py.group_check_class_name()

    def cast(self, a_class):
        return exlib_swig_py.group_cast(self, a_class)

    def copy(self):
        return exlib_swig_py.group_copy(self)

    def s_cls(self):
        return exlib_swig_py.group_s_cls(self)

    def render(self, a_action):
        return exlib_swig_py.group_render(self, a_action)

    def pick(self, a_action):
        return exlib_swig_py.group_pick(self, a_action)

    def bbox(self, a_action):
        return exlib_swig_py.group_bbox(self, a_action)

    def event(self, a_action):
        return exlib_swig_py.group_event(self, a_action)

    def search(self, a_action):
        return exlib_swig_py.group_search(self, a_action)

    def write(self, a_action):
        return exlib_swig_py.group_write(self, a_action)
    __swig_destroy__ = exlib_swig_py.delete_group

    def __init__(self, *args):
        exlib_swig_py.group_swiginit(self, exlib_swig_py.new_group(*args))

    def add(self, a_node):
        return exlib_swig_py.group_add(self, a_node)

    def set(self, a_index, a_node):
        return exlib_swig_py.group_set(self, a_index, a_node)

    def replace(self, a_from, a_to, a_del):
        return exlib_swig_py.group_replace(self, a_from, a_to, a_del)

    def swap(self, a_1, a_2):
        return exlib_swig_py.group_swap(self, a_1, a_2)

    def rsearch_from(self, a_node, a_class, a_inc_a_node=True):
        return exlib_swig_py.group_rsearch_from(self, a_node, a_class, a_inc_a_node)

    def remove(self, a_node):
        return exlib_swig_py.group_remove(self, a_node)

    def delete_from(self, a_node, a_inc_a_node=True):
        return exlib_swig_py.group_delete_from(self, a_node, a_inc_a_node)

    def transfer(self, a_from):
        return exlib_swig_py.group_transfer(self, a_from)

    def clear(self):
        return exlib_swig_py.group_clear(self)

    def raw_clear(self):
        return exlib_swig_py.group_raw_clear(self)

    def size(self):
        return exlib_swig_py.group_size(self)

    def empty(self):
        return exlib_swig_py.group_empty(self)

    def children(self, *args):
        return exlib_swig_py.group_children(self, *args)

# Register group in exlib_swig_py:
exlib_swig_py.group_swigregister(group)

def group_s_class():
    return exlib_swig_py.group_s_class()

def group_check_class_name():
    return exlib_swig_py.group_check_class_name()



