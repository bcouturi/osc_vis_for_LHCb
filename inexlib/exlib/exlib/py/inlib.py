# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import inlib_swig_py
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class PySwigIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return inlib_swig_py.PySwigIterator_value(*args)
    def incr(*args): return inlib_swig_py.PySwigIterator_incr(*args)
    def decr(*args): return inlib_swig_py.PySwigIterator_decr(*args)
    def distance(*args): return inlib_swig_py.PySwigIterator_distance(*args)
    def equal(*args): return inlib_swig_py.PySwigIterator_equal(*args)
    def copy(*args): return inlib_swig_py.PySwigIterator_copy(*args)
    def next(*args): return inlib_swig_py.PySwigIterator_next(*args)
    def previous(*args): return inlib_swig_py.PySwigIterator_previous(*args)
    def advance(*args): return inlib_swig_py.PySwigIterator_advance(*args)
    def __eq__(*args): return inlib_swig_py.PySwigIterator___eq__(*args)
    def __ne__(*args): return inlib_swig_py.PySwigIterator___ne__(*args)
    def __iadd__(*args): return inlib_swig_py.PySwigIterator___iadd__(*args)
    def __isub__(*args): return inlib_swig_py.PySwigIterator___isub__(*args)
    def __add__(*args): return inlib_swig_py.PySwigIterator___add__(*args)
    def __sub__(*args): return inlib_swig_py.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = inlib_swig_py.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class std_vector_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return inlib_swig_py.std_vector_double_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return inlib_swig_py.std_vector_double___nonzero__(*args)
    def __len__(*args): return inlib_swig_py.std_vector_double___len__(*args)
    def pop(*args): return inlib_swig_py.std_vector_double_pop(*args)
    def __getslice__(*args): return inlib_swig_py.std_vector_double___getslice__(*args)
    def __setslice__(*args): return inlib_swig_py.std_vector_double___setslice__(*args)
    def __delslice__(*args): return inlib_swig_py.std_vector_double___delslice__(*args)
    def __delitem__(*args): return inlib_swig_py.std_vector_double___delitem__(*args)
    def __getitem__(*args): return inlib_swig_py.std_vector_double___getitem__(*args)
    def __setitem__(*args): return inlib_swig_py.std_vector_double___setitem__(*args)
    def append(*args): return inlib_swig_py.std_vector_double_append(*args)
    def empty(*args): return inlib_swig_py.std_vector_double_empty(*args)
    def size(*args): return inlib_swig_py.std_vector_double_size(*args)
    def clear(*args): return inlib_swig_py.std_vector_double_clear(*args)
    def swap(*args): return inlib_swig_py.std_vector_double_swap(*args)
    def get_allocator(*args): return inlib_swig_py.std_vector_double_get_allocator(*args)
    def begin(*args): return inlib_swig_py.std_vector_double_begin(*args)
    def end(*args): return inlib_swig_py.std_vector_double_end(*args)
    def rbegin(*args): return inlib_swig_py.std_vector_double_rbegin(*args)
    def rend(*args): return inlib_swig_py.std_vector_double_rend(*args)
    def pop_back(*args): return inlib_swig_py.std_vector_double_pop_back(*args)
    def erase(*args): return inlib_swig_py.std_vector_double_erase(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_std_vector_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return inlib_swig_py.std_vector_double_push_back(*args)
    def front(*args): return inlib_swig_py.std_vector_double_front(*args)
    def back(*args): return inlib_swig_py.std_vector_double_back(*args)
    def assign(*args): return inlib_swig_py.std_vector_double_assign(*args)
    def resize(*args): return inlib_swig_py.std_vector_double_resize(*args)
    def insert(*args): return inlib_swig_py.std_vector_double_insert(*args)
    def reserve(*args): return inlib_swig_py.std_vector_double_reserve(*args)
    def capacity(*args): return inlib_swig_py.std_vector_double_capacity(*args)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_double
    __del__ = lambda self : None;
std_vector_double_swigregister = inlib_swig_py.std_vector_double_swigregister
std_vector_double_swigregister(std_vector_double)

class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = inlib_swig_py.ios_base_erase_event
    imbue_event = inlib_swig_py.ios_base_imbue_event
    copyfmt_event = inlib_swig_py.ios_base_copyfmt_event
    def register_callback(*args): return inlib_swig_py.ios_base_register_callback(*args)
    def flags(*args): return inlib_swig_py.ios_base_flags(*args)
    def setf(*args): return inlib_swig_py.ios_base_setf(*args)
    def unsetf(*args): return inlib_swig_py.ios_base_unsetf(*args)
    def precision(*args): return inlib_swig_py.ios_base_precision(*args)
    def width(*args): return inlib_swig_py.ios_base_width(*args)
    sync_with_stdio = staticmethod(inlib_swig_py.ios_base_sync_with_stdio)
    def imbue(*args): return inlib_swig_py.ios_base_imbue(*args)
    def getloc(*args): return inlib_swig_py.ios_base_getloc(*args)
    xalloc = staticmethod(inlib_swig_py.ios_base_xalloc)
    def iword(*args): return inlib_swig_py.ios_base_iword(*args)
    def pword(*args): return inlib_swig_py.ios_base_pword(*args)
    __swig_destroy__ = inlib_swig_py.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = inlib_swig_py.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = inlib_swig_py.cvar
ios_base.boolalpha = inlib_swig_py.cvar.ios_base_boolalpha
ios_base.dec = inlib_swig_py.cvar.ios_base_dec
ios_base.fixed = inlib_swig_py.cvar.ios_base_fixed
ios_base.hex = inlib_swig_py.cvar.ios_base_hex
ios_base.internal = inlib_swig_py.cvar.ios_base_internal
ios_base.left = inlib_swig_py.cvar.ios_base_left
ios_base.oct = inlib_swig_py.cvar.ios_base_oct
ios_base.right = inlib_swig_py.cvar.ios_base_right
ios_base.scientific = inlib_swig_py.cvar.ios_base_scientific
ios_base.showbase = inlib_swig_py.cvar.ios_base_showbase
ios_base.showpoint = inlib_swig_py.cvar.ios_base_showpoint
ios_base.showpos = inlib_swig_py.cvar.ios_base_showpos
ios_base.skipws = inlib_swig_py.cvar.ios_base_skipws
ios_base.unitbuf = inlib_swig_py.cvar.ios_base_unitbuf
ios_base.uppercase = inlib_swig_py.cvar.ios_base_uppercase
ios_base.adjustfield = inlib_swig_py.cvar.ios_base_adjustfield
ios_base.basefield = inlib_swig_py.cvar.ios_base_basefield
ios_base.floatfield = inlib_swig_py.cvar.ios_base_floatfield
ios_base.badbit = inlib_swig_py.cvar.ios_base_badbit
ios_base.eofbit = inlib_swig_py.cvar.ios_base_eofbit
ios_base.failbit = inlib_swig_py.cvar.ios_base_failbit
ios_base.goodbit = inlib_swig_py.cvar.ios_base_goodbit
ios_base.app = inlib_swig_py.cvar.ios_base_app
ios_base.ate = inlib_swig_py.cvar.ios_base_ate
ios_base.binary = inlib_swig_py.cvar.ios_base_binary
ios_base.ios_base_in = inlib_swig_py.cvar.ios_base_ios_base_in
ios_base.out = inlib_swig_py.cvar.ios_base_out
ios_base.trunc = inlib_swig_py.cvar.ios_base_trunc
ios_base.beg = inlib_swig_py.cvar.ios_base_beg
ios_base.cur = inlib_swig_py.cvar.ios_base_cur
ios_base.end = inlib_swig_py.cvar.ios_base_end
ios_base_sync_with_stdio = inlib_swig_py.ios_base_sync_with_stdio
ios_base_xalloc = inlib_swig_py.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def rdstate(*args): return inlib_swig_py.ios_rdstate(*args)
    def clear(*args): return inlib_swig_py.ios_clear(*args)
    def setstate(*args): return inlib_swig_py.ios_setstate(*args)
    def good(*args): return inlib_swig_py.ios_good(*args)
    def eof(*args): return inlib_swig_py.ios_eof(*args)
    def fail(*args): return inlib_swig_py.ios_fail(*args)
    def bad(*args): return inlib_swig_py.ios_bad(*args)
    def exceptions(*args): return inlib_swig_py.ios_exceptions(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_ios
    __del__ = lambda self : None;
    def tie(*args): return inlib_swig_py.ios_tie(*args)
    def rdbuf(*args): return inlib_swig_py.ios_rdbuf(*args)
    def copyfmt(*args): return inlib_swig_py.ios_copyfmt(*args)
    def fill(*args): return inlib_swig_py.ios_fill(*args)
    def imbue(*args): return inlib_swig_py.ios_imbue(*args)
    def narrow(*args): return inlib_swig_py.ios_narrow(*args)
    def widen(*args): return inlib_swig_py.ios_widen(*args)
ios_swigregister = inlib_swig_py.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args): return inlib_swig_py.ostream___lshift__(*args)
    def put(*args): return inlib_swig_py.ostream_put(*args)
    def write(*args): return inlib_swig_py.ostream_write(*args)
    def flush(*args): return inlib_swig_py.ostream_flush(*args)
    def tellp(*args): return inlib_swig_py.ostream_tellp(*args)
    def seekp(*args): return inlib_swig_py.ostream_seekp(*args)
ostream_swigregister = inlib_swig_py.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args): return inlib_swig_py.istream___rshift__(*args)
    def gcount(*args): return inlib_swig_py.istream_gcount(*args)
    def get(*args): return inlib_swig_py.istream_get(*args)
    def getline(*args): return inlib_swig_py.istream_getline(*args)
    def ignore(*args): return inlib_swig_py.istream_ignore(*args)
    def peek(*args): return inlib_swig_py.istream_peek(*args)
    def read(*args): return inlib_swig_py.istream_read(*args)
    def readsome(*args): return inlib_swig_py.istream_readsome(*args)
    def putback(*args): return inlib_swig_py.istream_putback(*args)
    def unget(*args): return inlib_swig_py.istream_unget(*args)
    def sync(*args): return inlib_swig_py.istream_sync(*args)
    def tellg(*args): return inlib_swig_py.istream_tellg(*args)
    def seekg(*args): return inlib_swig_py.istream_seekg(*args)
istream_swigregister = inlib_swig_py.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = inlib_swig_py.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = inlib_swig_py.endl_cb_ptr
endl = inlib_swig_py.endl
ends_cb_ptr = inlib_swig_py.ends_cb_ptr
ends = inlib_swig_py.ends
flush_cb_ptr = inlib_swig_py.flush_cb_ptr
flush = inlib_swig_py.flush
snpf = inlib_swig_py.snpf
sprintf = inlib_swig_py.sprintf
pi = inlib_swig_py.pi
two_pi = inlib_swig_py.two_pi
half_pi = inlib_swig_py.half_pi
deg2rad = inlib_swig_py.deg2rad
in_domain_all = inlib_swig_py.in_domain_all
in_domain_log = inlib_swig_py.in_domain_log
in_domain_tan = inlib_swig_py.in_domain_tan
in_domain_acos = inlib_swig_py.in_domain_acos
class random_flat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def shoot(*args): return inlib_swig_py.random_flat_shoot(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_random_flat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_random_flat
    __del__ = lambda self : None;
random_flat_swigregister = inlib_swig_py.random_flat_swigregister
random_flat_swigregister(random_flat)

class random_gauss(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_random_gauss(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(*args): return inlib_swig_py.random_gauss_shoot(*args)
    __swig_destroy__ = inlib_swig_py.delete_random_gauss
    __del__ = lambda self : None;
random_gauss_swigregister = inlib_swig_py.random_gauss_swigregister
random_gauss_swigregister(random_gauss)

class random_bw(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_random_bw(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(*args): return inlib_swig_py.random_bw_shoot(*args)
    __swig_destroy__ = inlib_swig_py.delete_random_bw
    __del__ = lambda self : None;
random_bw_swigregister = inlib_swig_py.random_bw_swigregister
random_bw_swigregister(random_bw)

class random_exp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_random_exp(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(*args): return inlib_swig_py.random_exp_shoot(*args)
    __swig_destroy__ = inlib_swig_py.delete_random_exp
    __del__ = lambda self : None;
random_exp_swigregister = inlib_swig_py.random_exp_swigregister
random_exp_swigregister(random_exp)

str_del = inlib_swig_py.str_del
str_rev = inlib_swig_py.str_rev
str_rep = inlib_swig_py.str_rep
sout = inlib_swig_py.sout
is_upper = inlib_swig_py.is_upper
is_lower = inlib_swig_py.is_lower
is_digit = inlib_swig_py.is_digit
is_letter = inlib_swig_py.is_letter
is_printable = inlib_swig_py.is_printable
int32_format = inlib_swig_py.int32_format
int64_format = inlib_swig_py.int64_format
uint32_format = inlib_swig_py.uint32_format
uint64_format = inlib_swig_py.uint64_format
uint32_mx = inlib_swig_py.uint32_mx
uint64_mx = inlib_swig_py.uint64_mx
class fits_bit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m_c = _swig_property(inlib_swig_py.fits_bit_m_c_get, inlib_swig_py.fits_bit_m_c_set)
    def __init__(self, *args): 
        this = inlib_swig_py.new_fits_bit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_fits_bit
    __del__ = lambda self : None;
fits_bit_swigregister = inlib_swig_py.fits_bit_swigregister
fits_bit_swigregister(fits_bit)
str_dup = inlib_swig_py.str_dup
str_new = inlib_swig_py.str_new
str_cat = inlib_swig_py.str_cat
str_sub = inlib_swig_py.str_sub

class csv_time(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m_l = _swig_property(inlib_swig_py.csv_time_m_l_get, inlib_swig_py.csv_time_m_l_set)
    def __init__(self, *args): 
        this = inlib_swig_py.new_csv_time(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_csv_time
    __del__ = lambda self : None;
csv_time_swigregister = inlib_swig_py.csv_time_swigregister
csv_time_swigregister(csv_time)

size_char = inlib_swig_py.size_char
size_short = inlib_swig_py.size_short
size_int = inlib_swig_py.size_int
size_int64 = inlib_swig_py.size_int64
size_float = inlib_swig_py.size_float
size_double = inlib_swig_py.size_double
tosx = inlib_swig_py.tosx
d2s = inlib_swig_py.d2s
soutd = inlib_swig_py.soutd
sep = inlib_swig_py.sep
psep = inlib_swig_py.psep
res_sep = inlib_swig_py.res_sep
isenv = inlib_swig_py.isenv
getenv = inlib_swig_py.getenv
get_env_bool = inlib_swig_py.get_env_bool
putenv = inlib_swig_py.putenv
rmenv = inlib_swig_py.rmenv
check_getenv = inlib_swig_py.check_getenv
execute = inlib_swig_py.execute
env_append = inlib_swig_py.env_append
env_path_append = inlib_swig_py.env_path_append
env_append_path = inlib_swig_py.env_append_path
expand_vars = inlib_swig_py.expand_vars
file_name = inlib_swig_py.file_name
plugin_prefix = inlib_swig_py.plugin_prefix
plugin_suffix = inlib_swig_py.plugin_suffix
plugin_name = inlib_swig_py.plugin_name
so_name = inlib_swig_py.so_name
signature = inlib_swig_py.signature
is_gzip = inlib_swig_py.is_gzip
gzip_usize = inlib_swig_py.gzip_usize
base_name = inlib_swig_py.base_name
is_absolute_path = inlib_swig_py.is_absolute_path
path_name_suffix = inlib_swig_py.path_name_suffix
is_f77 = inlib_swig_py.is_f77
is_cpp = inlib_swig_py.is_cpp
exists = inlib_swig_py.exists
size = inlib_swig_py.size
is_empty = inlib_swig_py.is_empty
read_buff = inlib_swig_py.read_buff
read_cstring = inlib_swig_py.read_cstring
read = inlib_swig_py.read
read_bytes = inlib_swig_py.read_bytes
write_bytes = inlib_swig_py.write_bytes
is_zip = inlib_swig_py.is_zip
is_jpeg = inlib_swig_py.is_jpeg
is_png = inlib_swig_py.is_png
is_root = inlib_swig_py.is_root
is_iv = inlib_swig_py.is_iv
is_fog = inlib_swig_py.is_fog
is_dot = inlib_swig_py.is_dot
is_dcm = inlib_swig_py.is_dcm
is_aida = inlib_swig_py.is_aida
is_gdml = inlib_swig_py.is_gdml
is_scenarios = inlib_swig_py.is_scenarios
is_slides = inlib_swig_py.is_slides
is_fits = inlib_swig_py.is_fits
is_hdf = inlib_swig_py.is_hdf
is_ps = inlib_swig_py.is_ps
is_hippo = inlib_swig_py.is_hippo
mime_type = inlib_swig_py.mime_type
s_format_guessed = inlib_swig_py.s_format_guessed
s_format_hdf5 = inlib_swig_py.s_format_hdf5
s_format_fits = inlib_swig_py.s_format_fits
s_format_fog = inlib_swig_py.s_format_fog
s_format_dot = inlib_swig_py.s_format_dot
s_format_dcm = inlib_swig_py.s_format_dcm
s_format_iv = inlib_swig_py.s_format_iv
s_format_jpeg = inlib_swig_py.s_format_jpeg
s_format_png = inlib_swig_py.s_format_png
s_format_root = inlib_swig_py.s_format_root
s_format_csv = inlib_swig_py.s_format_csv
s_format_hippo = inlib_swig_py.s_format_hippo
s_format_scenarios = inlib_swig_py.s_format_scenarios
s_format_slides = inlib_swig_py.s_format_slides
s_format_zvid = inlib_swig_py.s_format_zvid
s_format_exsg = inlib_swig_py.s_format_exsg
s_format_gdml = inlib_swig_py.s_format_gdml
s_format_mac = inlib_swig_py.s_format_mac
s_format_cmnd = inlib_swig_py.s_format_cmnd
s_format_aida = inlib_swig_py.s_format_aida
s_format_bsg = inlib_swig_py.s_format_bsg
s_ext_hdf5 = inlib_swig_py.s_ext_hdf5
s_ext_fits = inlib_swig_py.s_ext_fits
s_ext_fog = inlib_swig_py.s_ext_fog
s_ext_dot = inlib_swig_py.s_ext_dot
s_ext_dcm = inlib_swig_py.s_ext_dcm
s_ext_iv = inlib_swig_py.s_ext_iv
s_ext_hiv = inlib_swig_py.s_ext_hiv
s_ext_jpg = inlib_swig_py.s_ext_jpg
s_ext_png = inlib_swig_py.s_ext_png
s_ext_root = inlib_swig_py.s_ext_root
s_ext_csv = inlib_swig_py.s_ext_csv
s_ext_hiptxt = inlib_swig_py.s_ext_hiptxt
s_ext_tnt = inlib_swig_py.s_ext_tnt
s_ext_scenarios = inlib_swig_py.s_ext_scenarios
s_ext_slides = inlib_swig_py.s_ext_slides
s_ext_zvid = inlib_swig_py.s_ext_zvid
s_ext_exsg = inlib_swig_py.s_ext_exsg
s_ext_gdml = inlib_swig_py.s_ext_gdml
s_ext_mac = inlib_swig_py.s_ext_mac
s_ext_cmnd = inlib_swig_py.s_ext_cmnd
s_ext_aida = inlib_swig_py.s_ext_aida
s_ext_bsg = inlib_swig_py.s_ext_bsg
formats = inlib_swig_py.formats
ext_fmt = inlib_swig_py.ext_fmt
found = inlib_swig_py.found
std_rename = inlib_swig_py.std_rename
chmod_user = inlib_swig_py.chmod_user
chmod_group = inlib_swig_py.chmod_group
chmod_other = inlib_swig_py.chmod_other
chmod_all = inlib_swig_py.chmod_all
chmod_add = inlib_swig_py.chmod_add
chmod_sub = inlib_swig_py.chmod_sub
chmod_read = inlib_swig_py.chmod_read
chmod_write = inlib_swig_py.chmod_write
chmod_exec = inlib_swig_py.chmod_exec
chmod = inlib_swig_py.chmod
quote = inlib_swig_py.quote
mv = inlib_swig_py.mv
cp = inlib_swig_py.cp
rm = inlib_swig_py.rm
class reader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_reader
    __del__ = lambda self : None;
    def open(*args): return inlib_swig_py.reader_open(*args)
    def close(*args): return inlib_swig_py.reader_close(*args)
    def is_open(*args): return inlib_swig_py.reader_is_open(*args)
    def read(*args): return inlib_swig_py.reader_read(*args)
reader_swigregister = inlib_swig_py.reader_swigregister
reader_swigregister(reader)
tos = inlib_swig_py.tos
to = inlib_swig_py.to
words = inlib_swig_py.words
suffix = inlib_swig_py.suffix
nosuffix = inlib_swig_py.nosuffix
dir_name = inlib_swig_py.dir_name
file_write = inlib_swig_py.file_write
read_num = inlib_swig_py.read_num
is_exsg = inlib_swig_py.is_exsg
is_bsg = inlib_swig_py.is_bsg
is_csv = inlib_swig_py.is_csv
std_remove = inlib_swig_py.std_remove

class FILE_reader(reader):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def open(*args): return inlib_swig_py.FILE_reader_open(*args)
    def close(*args): return inlib_swig_py.FILE_reader_close(*args)
    def is_open(*args): return inlib_swig_py.FILE_reader_is_open(*args)
    def read(*args): return inlib_swig_py.FILE_reader_read(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_FILE_reader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_FILE_reader
    __del__ = lambda self : None;
FILE_reader_swigregister = inlib_swig_py.FILE_reader_swigregister
FILE_reader_swigregister(FILE_reader)

key_axis_x_title = inlib_swig_py.key_axis_x_title
key_axis_y_title = inlib_swig_py.key_axis_y_title
key_axis_z_title = inlib_swig_py.key_axis_z_title
class base_histo_duidd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def title(*args): return inlib_swig_py.base_histo_duidd_title(*args)
    def set_title(*args): return inlib_swig_py.base_histo_duidd_set_title(*args)
    def dimension(*args): return inlib_swig_py.base_histo_duidd_dimension(*args)
    def entries(*args): return inlib_swig_py.base_histo_duidd_entries(*args)
    def all_entries(*args): return inlib_swig_py.base_histo_duidd_all_entries(*args)
    def extra_entries(*args): return inlib_swig_py.base_histo_duidd_extra_entries(*args)
    def equivalent_bin_entries(*args): return inlib_swig_py.base_histo_duidd_equivalent_bin_entries(*args)
    def sum_bin_heights(*args): return inlib_swig_py.base_histo_duidd_sum_bin_heights(*args)
    def sum_all_bin_heights(*args): return inlib_swig_py.base_histo_duidd_sum_all_bin_heights(*args)
    def sum_extra_bin_heights(*args): return inlib_swig_py.base_histo_duidd_sum_extra_bin_heights(*args)
    def min_bin_height(*args): return inlib_swig_py.base_histo_duidd_min_bin_height(*args)
    def max_bin_height(*args): return inlib_swig_py.base_histo_duidd_max_bin_height(*args)
    def get_entries(*args): return inlib_swig_py.base_histo_duidd_get_entries(*args)
    def get_Sw(*args): return inlib_swig_py.base_histo_duidd_get_Sw(*args)
    def get_Sw2(*args): return inlib_swig_py.base_histo_duidd_get_Sw2(*args)
    def get_ith_axis_Sxw(*args): return inlib_swig_py.base_histo_duidd_get_ith_axis_Sxw(*args)
    def get_ith_axis_Sx2w(*args): return inlib_swig_py.base_histo_duidd_get_ith_axis_Sx2w(*args)
    def get_all_entries(*args): return inlib_swig_py.base_histo_duidd_get_all_entries(*args)
    def get_indices(*args): return inlib_swig_py.base_histo_duidd_get_indices(*args)
    def is_out(*args): return inlib_swig_py.base_histo_duidd_is_out(*args)
    def get_offset(*args): return inlib_swig_py.base_histo_duidd_get_offset(*args)
    def bins_entries(*args): return inlib_swig_py.base_histo_duidd_bins_entries(*args)
    def bins_sum_w(*args): return inlib_swig_py.base_histo_duidd_bins_sum_w(*args)
    def bins_sum_w2(*args): return inlib_swig_py.base_histo_duidd_bins_sum_w2(*args)
    def bins_sum_xw(*args): return inlib_swig_py.base_histo_duidd_bins_sum_xw(*args)
    def bins_sum_x2w(*args): return inlib_swig_py.base_histo_duidd_bins_sum_x2w(*args)
    def get_axis(*args): return inlib_swig_py.base_histo_duidd_get_axis(*args)
    def get_bins(*args): return inlib_swig_py.base_histo_duidd_get_bins(*args)
    def get_title(*args): return inlib_swig_py.base_histo_duidd_get_title(*args)
    def get_dimension(*args): return inlib_swig_py.base_histo_duidd_get_dimension(*args)
    def is_valid(*args): return inlib_swig_py.base_histo_duidd_is_valid(*args)
    def annotations(*args): return inlib_swig_py.base_histo_duidd_annotations(*args)
    def add_annotation(*args): return inlib_swig_py.base_histo_duidd_add_annotation(*args)
    def annotation(*args): return inlib_swig_py.base_histo_duidd_annotation(*args)
base_histo_duidd_swigregister = inlib_swig_py.base_histo_duidd_swigregister
base_histo_duidd_swigregister(base_histo_duidd)

class b1_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.b1_duidd_bin_error(*args)
    def update_fast_getters(*args): return inlib_swig_py.b1_duidd_update_fast_getters(*args)
    def coord_to_index(*args): return inlib_swig_py.b1_duidd_coord_to_index(*args)
    def mean(*args): return inlib_swig_py.b1_duidd_mean(*args)
    def rms(*args): return inlib_swig_py.b1_duidd_rms(*args)
    def bin_entries(*args): return inlib_swig_py.b1_duidd_bin_entries(*args)
    def bin_Sw(*args): return inlib_swig_py.b1_duidd_bin_Sw(*args)
    def bin_Sw2(*args): return inlib_swig_py.b1_duidd_bin_Sw2(*args)
    def bin_Sxw(*args): return inlib_swig_py.b1_duidd_bin_Sxw(*args)
    def bin_Sx2w(*args): return inlib_swig_py.b1_duidd_bin_Sx2w(*args)
    def bin_height(*args): return inlib_swig_py.b1_duidd_bin_height(*args)
    def bin_center(*args): return inlib_swig_py.b1_duidd_bin_center(*args)
    def bin_mean(*args): return inlib_swig_py.b1_duidd_bin_mean(*args)
    def bin_rms(*args): return inlib_swig_py.b1_duidd_bin_rms(*args)
    def axis(*args): return inlib_swig_py.b1_duidd_axis(*args)
    def hprint(*args): return inlib_swig_py.b1_duidd_hprint(*args)
    def configure(*args): return inlib_swig_py.b1_duidd_configure(*args)
b1_duidd_swigregister = inlib_swig_py.b1_duidd_swigregister
b1_duidd_swigregister(b1_duidd)

class b2_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.b2_duidd_bin_error(*args)
    def update_fast_getters(*args): return inlib_swig_py.b2_duidd_update_fast_getters(*args)
    def mean_x(*args): return inlib_swig_py.b2_duidd_mean_x(*args)
    def mean_y(*args): return inlib_swig_py.b2_duidd_mean_y(*args)
    def rms_x(*args): return inlib_swig_py.b2_duidd_rms_x(*args)
    def rms_y(*args): return inlib_swig_py.b2_duidd_rms_y(*args)
    def coord_to_index_x(*args): return inlib_swig_py.b2_duidd_coord_to_index_x(*args)
    def coord_to_index_y(*args): return inlib_swig_py.b2_duidd_coord_to_index_y(*args)
    def bin_entries(*args): return inlib_swig_py.b2_duidd_bin_entries(*args)
    def bin_Sw(*args): return inlib_swig_py.b2_duidd_bin_Sw(*args)
    def bin_Sw2(*args): return inlib_swig_py.b2_duidd_bin_Sw2(*args)
    def bin_Sxw(*args): return inlib_swig_py.b2_duidd_bin_Sxw(*args)
    def bin_Sx2w(*args): return inlib_swig_py.b2_duidd_bin_Sx2w(*args)
    def bin_Syw(*args): return inlib_swig_py.b2_duidd_bin_Syw(*args)
    def bin_Sy2w(*args): return inlib_swig_py.b2_duidd_bin_Sy2w(*args)
    def bin_height(*args): return inlib_swig_py.b2_duidd_bin_height(*args)
    def bin_center_x(*args): return inlib_swig_py.b2_duidd_bin_center_x(*args)
    def bin_center_y(*args): return inlib_swig_py.b2_duidd_bin_center_y(*args)
    def bin_mean_x(*args): return inlib_swig_py.b2_duidd_bin_mean_x(*args)
    def bin_mean_y(*args): return inlib_swig_py.b2_duidd_bin_mean_y(*args)
    def bin_rms_x(*args): return inlib_swig_py.b2_duidd_bin_rms_x(*args)
    def bin_rms_y(*args): return inlib_swig_py.b2_duidd_bin_rms_y(*args)
    def axis_x(*args): return inlib_swig_py.b2_duidd_axis_x(*args)
    def axis_y(*args): return inlib_swig_py.b2_duidd_axis_y(*args)
    def bin_entries_x(*args): return inlib_swig_py.b2_duidd_bin_entries_x(*args)
    def bin_height_x(*args): return inlib_swig_py.b2_duidd_bin_height_x(*args)
    def bin_entries_y(*args): return inlib_swig_py.b2_duidd_bin_entries_y(*args)
    def bin_height_y(*args): return inlib_swig_py.b2_duidd_bin_height_y(*args)
    def hprint(*args): return inlib_swig_py.b2_duidd_hprint(*args)
    def configure(*args): return inlib_swig_py.b2_duidd_configure(*args)
b2_duidd_swigregister = inlib_swig_py.b2_duidd_swigregister
b2_duidd_swigregister(b2_duidd)

class b3_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.b3_duidd_bin_error(*args)
    def update_fast_getters(*args): return inlib_swig_py.b3_duidd_update_fast_getters(*args)
    def coord_to_index_x(*args): return inlib_swig_py.b3_duidd_coord_to_index_x(*args)
    def coord_to_index_y(*args): return inlib_swig_py.b3_duidd_coord_to_index_y(*args)
    def coord_to_index_z(*args): return inlib_swig_py.b3_duidd_coord_to_index_z(*args)
    def mean_x(*args): return inlib_swig_py.b3_duidd_mean_x(*args)
    def mean_y(*args): return inlib_swig_py.b3_duidd_mean_y(*args)
    def mean_z(*args): return inlib_swig_py.b3_duidd_mean_z(*args)
    def rms_x(*args): return inlib_swig_py.b3_duidd_rms_x(*args)
    def rms_y(*args): return inlib_swig_py.b3_duidd_rms_y(*args)
    def rms_z(*args): return inlib_swig_py.b3_duidd_rms_z(*args)
    def bin_entries(*args): return inlib_swig_py.b3_duidd_bin_entries(*args)
    def bin_height(*args): return inlib_swig_py.b3_duidd_bin_height(*args)
    def bin_center_x(*args): return inlib_swig_py.b3_duidd_bin_center_x(*args)
    def bin_center_y(*args): return inlib_swig_py.b3_duidd_bin_center_y(*args)
    def bin_center_z(*args): return inlib_swig_py.b3_duidd_bin_center_z(*args)
    def bin_mean_x(*args): return inlib_swig_py.b3_duidd_bin_mean_x(*args)
    def bin_mean_y(*args): return inlib_swig_py.b3_duidd_bin_mean_y(*args)
    def bin_mean_z(*args): return inlib_swig_py.b3_duidd_bin_mean_z(*args)
    def bin_rms_x(*args): return inlib_swig_py.b3_duidd_bin_rms_x(*args)
    def bin_rms_y(*args): return inlib_swig_py.b3_duidd_bin_rms_y(*args)
    def bin_rms_z(*args): return inlib_swig_py.b3_duidd_bin_rms_z(*args)
    def axis_x(*args): return inlib_swig_py.b3_duidd_axis_x(*args)
    def axis_y(*args): return inlib_swig_py.b3_duidd_axis_y(*args)
    def axis_z(*args): return inlib_swig_py.b3_duidd_axis_z(*args)
    def bin_entries_x(*args): return inlib_swig_py.b3_duidd_bin_entries_x(*args)
    def bin_entries_y(*args): return inlib_swig_py.b3_duidd_bin_entries_y(*args)
    def bin_entries_z(*args): return inlib_swig_py.b3_duidd_bin_entries_z(*args)
    def bin_height_x(*args): return inlib_swig_py.b3_duidd_bin_height_x(*args)
    def bin_height_y(*args): return inlib_swig_py.b3_duidd_bin_height_y(*args)
    def bin_height_z(*args): return inlib_swig_py.b3_duidd_bin_height_z(*args)
    def hprint(*args): return inlib_swig_py.b3_duidd_hprint(*args)
    __swig_destroy__ = inlib_swig_py.delete_b3_duidd
    __del__ = lambda self : None;
    def configure(*args): return inlib_swig_py.b3_duidd_configure(*args)
b3_duidd_swigregister = inlib_swig_py.b3_duidd_swigregister
b3_duidd_swigregister(b3_duidd)

class h1_duidd(b1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.h1_duidd_bin_error(*args)
    def scale(*args): return inlib_swig_py.h1_duidd_scale(*args)
    def copy_from_data(*args): return inlib_swig_py.h1_duidd_copy_from_data(*args)
    def get_histo_data(*args): return inlib_swig_py.h1_duidd_get_histo_data(*args)
    def reset(*args): return inlib_swig_py.h1_duidd_reset(*args)
    def fill(*args): return inlib_swig_py.h1_duidd_fill(*args)
    def add(*args): return inlib_swig_py.h1_duidd_add(*args)
    def subtract(*args): return inlib_swig_py.h1_duidd_subtract(*args)
    def multiply(*args): return inlib_swig_py.h1_duidd_multiply(*args)
    def divide(*args): return inlib_swig_py.h1_duidd_divide(*args)
    def gather_bins(*args): return inlib_swig_py.h1_duidd_gather_bins(*args)
    __swig_destroy__ = inlib_swig_py.delete_h1_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_h1_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h1_duidd_swigregister = inlib_swig_py.h1_duidd_swigregister
h1_duidd_swigregister(h1_duidd)

class h2_duidd(b2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.h2_duidd_bin_error(*args)
    def scale(*args): return inlib_swig_py.h2_duidd_scale(*args)
    def copy_from_data(*args): return inlib_swig_py.h2_duidd_copy_from_data(*args)
    def get_histo_data(*args): return inlib_swig_py.h2_duidd_get_histo_data(*args)
    def reset(*args): return inlib_swig_py.h2_duidd_reset(*args)
    def fill(*args): return inlib_swig_py.h2_duidd_fill(*args)
    def add(*args): return inlib_swig_py.h2_duidd_add(*args)
    def subtract(*args): return inlib_swig_py.h2_duidd_subtract(*args)
    def multiply(*args): return inlib_swig_py.h2_duidd_multiply(*args)
    def divide(*args): return inlib_swig_py.h2_duidd_divide(*args)
    __swig_destroy__ = inlib_swig_py.delete_h2_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_h2_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h2_duidd_swigregister = inlib_swig_py.h2_duidd_swigregister
h2_duidd_swigregister(h2_duidd)

class h3_duidd(b3_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.h3_duidd_bin_error(*args)
    def scale(*args): return inlib_swig_py.h3_duidd_scale(*args)
    def copy_from_data(*args): return inlib_swig_py.h3_duidd_copy_from_data(*args)
    def get_histo_data(*args): return inlib_swig_py.h3_duidd_get_histo_data(*args)
    def reset(*args): return inlib_swig_py.h3_duidd_reset(*args)
    def fill(*args): return inlib_swig_py.h3_duidd_fill(*args)
    def add(*args): return inlib_swig_py.h3_duidd_add(*args)
    def subtract(*args): return inlib_swig_py.h3_duidd_subtract(*args)
    def multiply(*args): return inlib_swig_py.h3_duidd_multiply(*args)
    def divide(*args): return inlib_swig_py.h3_duidd_divide(*args)
    __swig_destroy__ = inlib_swig_py.delete_h3_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_h3_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h3_duidd_swigregister = inlib_swig_py.h3_duidd_swigregister
h3_duidd_swigregister(h3_duidd)

class p1_duiddd(b1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.p1_duiddd_bin_error(*args)
    def multiply(*args): return inlib_swig_py.p1_duiddd_multiply(*args)
    def scale(*args): return inlib_swig_py.p1_duiddd_scale(*args)
    def bin_Svw(*args): return inlib_swig_py.p1_duiddd_bin_Svw(*args)
    def bin_Sv2w(*args): return inlib_swig_py.p1_duiddd_bin_Sv2w(*args)
    def reset(*args): return inlib_swig_py.p1_duiddd_reset(*args)
    def copy_from_data(*args): return inlib_swig_py.p1_duiddd_copy_from_data(*args)
    def get_histo_data(*args): return inlib_swig_py.p1_duiddd_get_histo_data(*args)
    def fill(*args): return inlib_swig_py.p1_duiddd_fill(*args)
    def bin_rms_value(*args): return inlib_swig_py.p1_duiddd_bin_rms_value(*args)
    def add(*args): return inlib_swig_py.p1_duiddd_add(*args)
    def subtract(*args): return inlib_swig_py.p1_duiddd_subtract(*args)
    def gather_bins(*args): return inlib_swig_py.p1_duiddd_gather_bins(*args)
    def cut_v(*args): return inlib_swig_py.p1_duiddd_cut_v(*args)
    def min_v(*args): return inlib_swig_py.p1_duiddd_min_v(*args)
    def max_v(*args): return inlib_swig_py.p1_duiddd_max_v(*args)
    __swig_destroy__ = inlib_swig_py.delete_p1_duiddd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_p1_duiddd(*args)
        try: self.this.append(this)
        except: self.this = this
    def bins_sum_vw(*args): return inlib_swig_py.p1_duiddd_bins_sum_vw(*args)
    def bins_sum_v2w(*args): return inlib_swig_py.p1_duiddd_bins_sum_v2w(*args)
p1_duiddd_swigregister = inlib_swig_py.p1_duiddd_swigregister
p1_duiddd_swigregister(p1_duiddd)

class p2_duiddd(b2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return inlib_swig_py.p2_duiddd_bin_error(*args)
    def multiply(*args): return inlib_swig_py.p2_duiddd_multiply(*args)
    def scale(*args): return inlib_swig_py.p2_duiddd_scale(*args)
    def bin_Svw(*args): return inlib_swig_py.p2_duiddd_bin_Svw(*args)
    def bin_Sv2w(*args): return inlib_swig_py.p2_duiddd_bin_Sv2w(*args)
    def reset(*args): return inlib_swig_py.p2_duiddd_reset(*args)
    def copy_from_data(*args): return inlib_swig_py.p2_duiddd_copy_from_data(*args)
    def get_histo_data(*args): return inlib_swig_py.p2_duiddd_get_histo_data(*args)
    def fill(*args): return inlib_swig_py.p2_duiddd_fill(*args)
    def bin_rms_value(*args): return inlib_swig_py.p2_duiddd_bin_rms_value(*args)
    def add(*args): return inlib_swig_py.p2_duiddd_add(*args)
    def subtract(*args): return inlib_swig_py.p2_duiddd_subtract(*args)
    def cut_v(*args): return inlib_swig_py.p2_duiddd_cut_v(*args)
    def min_v(*args): return inlib_swig_py.p2_duiddd_min_v(*args)
    def max_v(*args): return inlib_swig_py.p2_duiddd_max_v(*args)
    __swig_destroy__ = inlib_swig_py.delete_p2_duiddd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_p2_duiddd(*args)
        try: self.this.append(this)
        except: self.this = this
    def bins_sum_vw(*args): return inlib_swig_py.p2_duiddd_bins_sum_vw(*args)
    def bins_sum_v2w(*args): return inlib_swig_py.p2_duiddd_bins_sum_v2w(*args)
p2_duiddd_swigregister = inlib_swig_py.p2_duiddd_swigregister
p2_duiddd_swigregister(p2_duiddd)

class histo_h1d(h1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.histo_h1d_s_class)
    __swig_destroy__ = inlib_swig_py.delete_histo_h1d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_h1d(*args)
        try: self.this.append(this)
        except: self.this = this
histo_h1d_swigregister = inlib_swig_py.histo_h1d_swigregister
histo_h1d_swigregister(histo_h1d)
histo_h1d_s_class = inlib_swig_py.histo_h1d_s_class

class histo_h2d(h2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.histo_h2d_s_class)
    __swig_destroy__ = inlib_swig_py.delete_histo_h2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_h2d(*args)
        try: self.this.append(this)
        except: self.this = this
histo_h2d_swigregister = inlib_swig_py.histo_h2d_swigregister
histo_h2d_swigregister(histo_h2d)
histo_h2d_s_class = inlib_swig_py.histo_h2d_s_class

class histo_h3d(h3_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.histo_h3d_s_class)
    __swig_destroy__ = inlib_swig_py.delete_histo_h3d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_h3d(*args)
        try: self.this.append(this)
        except: self.this = this
histo_h3d_swigregister = inlib_swig_py.histo_h3d_swigregister
histo_h3d_swigregister(histo_h3d)
histo_h3d_s_class = inlib_swig_py.histo_h3d_s_class

class histo_p1d(p1_duiddd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.histo_p1d_s_class)
    __swig_destroy__ = inlib_swig_py.delete_histo_p1d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_p1d(*args)
        try: self.this.append(this)
        except: self.this = this
histo_p1d_swigregister = inlib_swig_py.histo_p1d_swigregister
histo_p1d_swigregister(histo_p1d)
histo_p1d_s_class = inlib_swig_py.histo_p1d_s_class

class histo_p2d(p2_duiddd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.histo_p2d_s_class)
    __swig_destroy__ = inlib_swig_py.delete_histo_p2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_p2d(*args)
        try: self.this.append(this)
        except: self.this = this
histo_p2d_swigregister = inlib_swig_py.histo_p2d_swigregister
histo_p2d_swigregister(histo_p2d)
histo_p2d_s_class = inlib_swig_py.histo_p2d_s_class

INLIB_MAJOR_VERSION = inlib_swig_py.INLIB_MAJOR_VERSION
INLIB_MINOR_VERSION = inlib_swig_py.INLIB_MINOR_VERSION
INLIB_PATCH_VERSION = inlib_swig_py.INLIB_PATCH_VERSION
INLIB_VERSION = inlib_swig_py.INLIB_VERSION
INLIB_VERSION_VRP = inlib_swig_py.INLIB_VERSION_VRP
version = inlib_swig_py.version
begin = inlib_swig_py.begin
end = inlib_swig_py.end
bin_to_string = inlib_swig_py.bin_to_string
write_annotations = inlib_swig_py.write_annotations
write_axis = inlib_swig_py.write_axis
class waxml_file(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_waxml_file(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_waxml_file
    __del__ = lambda self : None;
    def open(*args): return inlib_swig_py.waxml_file_open(*args)
    def close(*args): return inlib_swig_py.waxml_file_close(*args)
    def writer(*args): return inlib_swig_py.waxml_file_writer(*args)
    def write(*args): return inlib_swig_py.waxml_file_write(*args)
waxml_file_swigregister = inlib_swig_py.waxml_file_swigregister
waxml_file_swigregister(waxml_file)
write_bin = inlib_swig_py.write_bin
write = inlib_swig_py.write

class vec2_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec2_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec2_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def v0(*args): return inlib_swig_py.vec2_float_v0(*args)
    def v1(*args): return inlib_swig_py.vec2_float_v1(*args)
    def x(*args): return inlib_swig_py.vec2_float_x(*args)
    def y(*args): return inlib_swig_py.vec2_float_y(*args)
    def set_value(*args): return inlib_swig_py.vec2_float_set_value(*args)
    def value(*args): return inlib_swig_py.vec2_float_value(*args)
    def length(*args): return inlib_swig_py.vec2_float_length(*args)
    def normalize(*args): return inlib_swig_py.vec2_float_normalize(*args)
    def dot(*args): return inlib_swig_py.vec2_float_dot(*args)
    def cross(*args): return inlib_swig_py.vec2_float_cross(*args)
    def equal(*args): return inlib_swig_py.vec2_float_equal(*args)
    def divide(*args): return inlib_swig_py.vec2_float_divide(*args)
    def add(*args): return inlib_swig_py.vec2_float_add(*args)
    def subtract(*args): return inlib_swig_py.vec2_float_subtract(*args)
    def __add__(*args): return inlib_swig_py.vec2_float___add__(*args)
    def __sub__(*args): return inlib_swig_py.vec2_float___sub__(*args)
    def __mul__(*args): return inlib_swig_py.vec2_float___mul__(*args)
    def __eq__(*args): return inlib_swig_py.vec2_float___eq__(*args)
    def __ne__(*args): return inlib_swig_py.vec2_float___ne__(*args)
    def size(*args): return inlib_swig_py.vec2_float_size(*args)
    def data(*args): return inlib_swig_py.vec2_float_data(*args)
vec2_float_swigregister = inlib_swig_py.vec2_float_swigregister
vec2_float_swigregister(vec2_float)

class vec3_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec3_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def v0(*args): return inlib_swig_py.vec3_float_v0(*args)
    def v1(*args): return inlib_swig_py.vec3_float_v1(*args)
    def v2(*args): return inlib_swig_py.vec3_float_v2(*args)
    def x(*args): return inlib_swig_py.vec3_float_x(*args)
    def y(*args): return inlib_swig_py.vec3_float_y(*args)
    def z(*args): return inlib_swig_py.vec3_float_z(*args)
    def set_value(*args): return inlib_swig_py.vec3_float_set_value(*args)
    def value(*args): return inlib_swig_py.vec3_float_value(*args)
    def length(*args): return inlib_swig_py.vec3_float_length(*args)
    def normalize(*args): return inlib_swig_py.vec3_float_normalize(*args)
    def dot(*args): return inlib_swig_py.vec3_float_dot(*args)
    def cross(*args): return inlib_swig_py.vec3_float_cross(*args)
    def equal(*args): return inlib_swig_py.vec3_float_equal(*args)
    def divide(*args): return inlib_swig_py.vec3_float_divide(*args)
    def multiply(*args): return inlib_swig_py.vec3_float_multiply(*args)
    def add(*args): return inlib_swig_py.vec3_float_add(*args)
    def subtract(*args): return inlib_swig_py.vec3_float_subtract(*args)
    def cos_angle(*args): return inlib_swig_py.vec3_float_cos_angle(*args)
    def __imul__(*args): return inlib_swig_py.vec3_float___imul__(*args)
    def __add__(*args): return inlib_swig_py.vec3_float___add__(*args)
    def __sub__(*args): return inlib_swig_py.vec3_float___sub__(*args)
    def __mul__(*args): return inlib_swig_py.vec3_float___mul__(*args)
    def __eq__(*args): return inlib_swig_py.vec3_float___eq__(*args)
    def __ne__(*args): return inlib_swig_py.vec3_float___ne__(*args)
    def size(*args): return inlib_swig_py.vec3_float_size(*args)
    def data(*args): return inlib_swig_py.vec3_float_data(*args)
vec3_float_swigregister = inlib_swig_py.vec3_float_swigregister
vec3_float_swigregister(vec3_float)

class vec3_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3_double
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec3_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def v0(*args): return inlib_swig_py.vec3_double_v0(*args)
    def v1(*args): return inlib_swig_py.vec3_double_v1(*args)
    def v2(*args): return inlib_swig_py.vec3_double_v2(*args)
    def x(*args): return inlib_swig_py.vec3_double_x(*args)
    def y(*args): return inlib_swig_py.vec3_double_y(*args)
    def z(*args): return inlib_swig_py.vec3_double_z(*args)
    def set_value(*args): return inlib_swig_py.vec3_double_set_value(*args)
    def value(*args): return inlib_swig_py.vec3_double_value(*args)
    def length(*args): return inlib_swig_py.vec3_double_length(*args)
    def normalize(*args): return inlib_swig_py.vec3_double_normalize(*args)
    def dot(*args): return inlib_swig_py.vec3_double_dot(*args)
    def cross(*args): return inlib_swig_py.vec3_double_cross(*args)
    def equal(*args): return inlib_swig_py.vec3_double_equal(*args)
    def divide(*args): return inlib_swig_py.vec3_double_divide(*args)
    def multiply(*args): return inlib_swig_py.vec3_double_multiply(*args)
    def add(*args): return inlib_swig_py.vec3_double_add(*args)
    def subtract(*args): return inlib_swig_py.vec3_double_subtract(*args)
    def cos_angle(*args): return inlib_swig_py.vec3_double_cos_angle(*args)
    def __imul__(*args): return inlib_swig_py.vec3_double___imul__(*args)
    def __add__(*args): return inlib_swig_py.vec3_double___add__(*args)
    def __sub__(*args): return inlib_swig_py.vec3_double___sub__(*args)
    def __mul__(*args): return inlib_swig_py.vec3_double___mul__(*args)
    def __eq__(*args): return inlib_swig_py.vec3_double___eq__(*args)
    def __ne__(*args): return inlib_swig_py.vec3_double___ne__(*args)
    def size(*args): return inlib_swig_py.vec3_double_size(*args)
    def data(*args): return inlib_swig_py.vec3_double_data(*args)
vec3_double_swigregister = inlib_swig_py.vec3_double_swigregister
vec3_double_swigregister(vec3_double)

class vec4_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec4_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec4_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def v0(*args): return inlib_swig_py.vec4_float_v0(*args)
    def v1(*args): return inlib_swig_py.vec4_float_v1(*args)
    def v2(*args): return inlib_swig_py.vec4_float_v2(*args)
    def v3(*args): return inlib_swig_py.vec4_float_v3(*args)
    def value(*args): return inlib_swig_py.vec4_float_value(*args)
    def set_value(*args): return inlib_swig_py.vec4_float_set_value(*args)
    def length(*args): return inlib_swig_py.vec4_float_length(*args)
    def normalize(*args): return inlib_swig_py.vec4_float_normalize(*args)
    def equal(*args): return inlib_swig_py.vec4_float_equal(*args)
    def multiply(*args): return inlib_swig_py.vec4_float_multiply(*args)
    def divide(*args): return inlib_swig_py.vec4_float_divide(*args)
    def add(*args): return inlib_swig_py.vec4_float_add(*args)
    def subtract(*args): return inlib_swig_py.vec4_float_subtract(*args)
    def __add__(*args): return inlib_swig_py.vec4_float___add__(*args)
    def __sub__(*args): return inlib_swig_py.vec4_float___sub__(*args)
    def __mul__(*args): return inlib_swig_py.vec4_float___mul__(*args)
    def __eq__(*args): return inlib_swig_py.vec4_float___eq__(*args)
    def __ne__(*args): return inlib_swig_py.vec4_float___ne__(*args)
    def size(*args): return inlib_swig_py.vec4_float_size(*args)
    def data(*args): return inlib_swig_py.vec4_float_data(*args)
vec4_float_swigregister = inlib_swig_py.vec4_float_swigregister
vec4_float_swigregister(vec4_float)

class mat_float_4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mat_float_4
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_mat_float_4(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_value(*args): return inlib_swig_py.mat_float_4_set_value(*args)
    def value(*args): return inlib_swig_py.mat_float_4_value(*args)
    def set_matrix(*args): return inlib_swig_py.mat_float_4_set_matrix(*args)
    def set_constant(*args): return inlib_swig_py.mat_float_4_set_constant(*args)
    def set_zero(*args): return inlib_swig_py.mat_float_4_set_zero(*args)
    def set_identity(*args): return inlib_swig_py.mat_float_4_set_identity(*args)
    def set_diagonal(*args): return inlib_swig_py.mat_float_4_set_diagonal(*args)
    def mul_mtx(*args): return inlib_swig_py.mat_float_4_mul_mtx(*args)
    def left_mul_mtx(*args): return inlib_swig_py.mat_float_4_left_mul_mtx(*args)
    def data(*args): return inlib_swig_py.mat_float_4_data(*args)
    def size(*args): return inlib_swig_py.mat_float_4_size(*args)
    def equal(*args): return inlib_swig_py.mat_float_4_equal(*args)
    def trace(*args): return inlib_swig_py.mat_float_4_trace(*args)
    def transpose(*args): return inlib_swig_py.mat_float_4_transpose(*args)
    def multiply(*args): return inlib_swig_py.mat_float_4_multiply(*args)
    def is_symmetric(*args): return inlib_swig_py.mat_float_4_is_symmetric(*args)
    def is_antisymmetric(*args): return inlib_swig_py.mat_float_4_is_antisymmetric(*args)
    def symmetric_part(*args): return inlib_swig_py.mat_float_4_symmetric_part(*args)
    def antisymmetric_part(*args): return inlib_swig_py.mat_float_4_antisymmetric_part(*args)
    def determinant(*args): return inlib_swig_py.mat_float_4_determinant(*args)
    def invert(*args): return inlib_swig_py.mat_float_4_invert(*args)
    def __call__(*args): return inlib_swig_py.mat_float_4___call__(*args)
    def __eq__(*args): return inlib_swig_py.mat_float_4___eq__(*args)
    def __ne__(*args): return inlib_swig_py.mat_float_4___ne__(*args)
    def __iadd__(*args): return inlib_swig_py.mat_float_4___iadd__(*args)
    def __isub__(*args): return inlib_swig_py.mat_float_4___isub__(*args)
    def __imul__(*args): return inlib_swig_py.mat_float_4___imul__(*args)
mat_float_4_swigregister = inlib_swig_py.mat_float_4_swigregister
mat_float_4_swigregister(mat_float_4)

class mat4_float(mat_float_4):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mat4_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_mat4_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_matrix(*args): return inlib_swig_py.mat4_float_set_matrix(*args)
    def set_scale(*args): return inlib_swig_py.mat4_float_set_scale(*args)
    def set_translate(*args): return inlib_swig_py.mat4_float_set_translate(*args)
    def set_rotate(*args): return inlib_swig_py.mat4_float_set_rotate(*args)
    def set_ortho(*args): return inlib_swig_py.mat4_float_set_ortho(*args)
    def set_frustum(*args): return inlib_swig_py.mat4_float_set_frustum(*args)
    def get_translate(*args): return inlib_swig_py.mat4_float_get_translate(*args)
    def mul_4(*args): return inlib_swig_py.mat4_float_mul_4(*args)
    def mul_3(*args): return inlib_swig_py.mat4_float_mul_3(*args)
    def mul_2(*args): return inlib_swig_py.mat4_float_mul_2(*args)
    def mul_scale(*args): return inlib_swig_py.mat4_float_mul_scale(*args)
    def mul_translate(*args): return inlib_swig_py.mat4_float_mul_translate(*args)
    def mul_rotate(*args): return inlib_swig_py.mat4_float_mul_rotate(*args)
    def left_mul_rotate(*args): return inlib_swig_py.mat4_float_left_mul_rotate(*args)
    def left_mul_scale(*args): return inlib_swig_py.mat4_float_left_mul_scale(*args)
    def left_mul_translate(*args): return inlib_swig_py.mat4_float_left_mul_translate(*args)
    def v00(*args): return inlib_swig_py.mat4_float_v00(*args)
    def v10(*args): return inlib_swig_py.mat4_float_v10(*args)
    def v20(*args): return inlib_swig_py.mat4_float_v20(*args)
    def v30(*args): return inlib_swig_py.mat4_float_v30(*args)
    def v01(*args): return inlib_swig_py.mat4_float_v01(*args)
    def v11(*args): return inlib_swig_py.mat4_float_v11(*args)
    def v21(*args): return inlib_swig_py.mat4_float_v21(*args)
    def v31(*args): return inlib_swig_py.mat4_float_v31(*args)
    def v02(*args): return inlib_swig_py.mat4_float_v02(*args)
    def v12(*args): return inlib_swig_py.mat4_float_v12(*args)
    def v22(*args): return inlib_swig_py.mat4_float_v22(*args)
    def v32(*args): return inlib_swig_py.mat4_float_v32(*args)
    def v03(*args): return inlib_swig_py.mat4_float_v03(*args)
    def v13(*args): return inlib_swig_py.mat4_float_v13(*args)
    def v23(*args): return inlib_swig_py.mat4_float_v23(*args)
    def v33(*args): return inlib_swig_py.mat4_float_v33(*args)
    def mul_mtx_rot_root(*args): return inlib_swig_py.mat4_float_mul_mtx_rot_root(*args)
mat4_float_swigregister = inlib_swig_py.mat4_float_swigregister
mat4_float_swigregister(mat4_float)

class qrot_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_qrot_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_qrot_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def __imul__(*args): return inlib_swig_py.qrot_float___imul__(*args)
    def __eq__(*args): return inlib_swig_py.qrot_float___eq__(*args)
    def __ne__(*args): return inlib_swig_py.qrot_float___ne__(*args)
    def __mul__(*args): return inlib_swig_py.qrot_float___mul__(*args)
    def invert(*args): return inlib_swig_py.qrot_float_invert(*args)
    def inverse(*args): return inlib_swig_py.qrot_float_inverse(*args)
    def set_value(*args): return inlib_swig_py.qrot_float_set_value(*args)
    def value(*args): return inlib_swig_py.qrot_float_value(*args)
    def mult_vec(*args): return inlib_swig_py.qrot_float_mult_vec(*args)
    def mul_3f(*args): return inlib_swig_py.qrot_float_mul_3f(*args)
    def quat(*args): return inlib_swig_py.qrot_float_quat(*args)
qrot_float_swigregister = inlib_swig_py.qrot_float_swigregister
qrot_float_swigregister(qrot_float)

class vec3f(vec3_float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __mul__(*args): return inlib_swig_py.vec3f___mul__(*args)
    def __add__(*args): return inlib_swig_py.vec3f___add__(*args)
    def __sub__(*args): return inlib_swig_py.vec3f___sub__(*args)
    def __iadd__(*args): return inlib_swig_py.vec3f___iadd__(*args)
    def __imul__(*args): return inlib_swig_py.vec3f___imul__(*args)
    def __neg__(*args): return inlib_swig_py.vec3f___neg__(*args)
vec3f_swigregister = inlib_swig_py.vec3f_swigregister
vec3f_swigregister(vec3f)

__mul__ = inlib_swig_py.__mul__
class rotf(qrot_float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rotf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rotf(*args)
        try: self.this.append(this)
        except: self.this = this
    def __imul__(*args): return inlib_swig_py.rotf___imul__(*args)
    def __mul__(*args): return inlib_swig_py.rotf___mul__(*args)
    def set_value(*args): return inlib_swig_py.rotf_set_value(*args)
rotf_swigregister = inlib_swig_py.rotf_swigregister
rotf_swigregister(rotf)

class vec4f(vec4_float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec4f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __mul__(*args): return inlib_swig_py.vec4f___mul__(*args)
    def __add__(*args): return inlib_swig_py.vec4f___add__(*args)
    def __sub__(*args): return inlib_swig_py.vec4f___sub__(*args)
    def __iadd__(*args): return inlib_swig_py.vec4f___iadd__(*args)
    def __imul__(*args): return inlib_swig_py.vec4f___imul__(*args)
    def __neg__(*args): return inlib_swig_py.vec4f___neg__(*args)
vec4f_swigregister = inlib_swig_py.vec4f_swigregister
vec4f_swigregister(vec4f)

class colorf(vec4f):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_colorf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_colorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def r(*args): return inlib_swig_py.colorf_r(*args)
    def g(*args): return inlib_swig_py.colorf_g(*args)
    def b(*args): return inlib_swig_py.colorf_b(*args)
    def a(*args): return inlib_swig_py.colorf_a(*args)
    def set_r(*args): return inlib_swig_py.colorf_set_r(*args)
    def set_g(*args): return inlib_swig_py.colorf_set_g(*args)
    def set_b(*args): return inlib_swig_py.colorf_set_b(*args)
    def set_a(*args): return inlib_swig_py.colorf_set_a(*args)
    def tos(*args): return inlib_swig_py.colorf_tos(*args)
    aquamarine = staticmethod(inlib_swig_py.colorf_aquamarine)
    mediumaquamarine = staticmethod(inlib_swig_py.colorf_mediumaquamarine)
    black = staticmethod(inlib_swig_py.colorf_black)
    blue = staticmethod(inlib_swig_py.colorf_blue)
    cadetblue = staticmethod(inlib_swig_py.colorf_cadetblue)
    cornflowerblue = staticmethod(inlib_swig_py.colorf_cornflowerblue)
    darkslateblue = staticmethod(inlib_swig_py.colorf_darkslateblue)
    lightblue = staticmethod(inlib_swig_py.colorf_lightblue)
    lightsteelblue = staticmethod(inlib_swig_py.colorf_lightsteelblue)
    mediumblue = staticmethod(inlib_swig_py.colorf_mediumblue)
    mediumslateblue = staticmethod(inlib_swig_py.colorf_mediumslateblue)
    midnightblue = staticmethod(inlib_swig_py.colorf_midnightblue)
    navyblue = staticmethod(inlib_swig_py.colorf_navyblue)
    navy = staticmethod(inlib_swig_py.colorf_navy)
    skyblue = staticmethod(inlib_swig_py.colorf_skyblue)
    slateblue = staticmethod(inlib_swig_py.colorf_slateblue)
    steelblue = staticmethod(inlib_swig_py.colorf_steelblue)
    coral = staticmethod(inlib_swig_py.colorf_coral)
    cyan = staticmethod(inlib_swig_py.colorf_cyan)
    firebrick = staticmethod(inlib_swig_py.colorf_firebrick)
    brown = staticmethod(inlib_swig_py.colorf_brown)
    gold = staticmethod(inlib_swig_py.colorf_gold)
    goldenrod = staticmethod(inlib_swig_py.colorf_goldenrod)
    green = staticmethod(inlib_swig_py.colorf_green)
    darkgreen = staticmethod(inlib_swig_py.colorf_darkgreen)
    darkolivegreen = staticmethod(inlib_swig_py.colorf_darkolivegreen)
    forestgreen = staticmethod(inlib_swig_py.colorf_forestgreen)
    limegreen = staticmethod(inlib_swig_py.colorf_limegreen)
    mediumseagreen = staticmethod(inlib_swig_py.colorf_mediumseagreen)
    mediumspringgreen = staticmethod(inlib_swig_py.colorf_mediumspringgreen)
    palegreen = staticmethod(inlib_swig_py.colorf_palegreen)
    seagreen = staticmethod(inlib_swig_py.colorf_seagreen)
    springgreen = staticmethod(inlib_swig_py.colorf_springgreen)
    yellowgreen = staticmethod(inlib_swig_py.colorf_yellowgreen)
    darkslategrey = staticmethod(inlib_swig_py.colorf_darkslategrey)
    dimgrey = staticmethod(inlib_swig_py.colorf_dimgrey)
    lightgrey = staticmethod(inlib_swig_py.colorf_lightgrey)
    grey = staticmethod(inlib_swig_py.colorf_grey)
    khaki = staticmethod(inlib_swig_py.colorf_khaki)
    magenta = staticmethod(inlib_swig_py.colorf_magenta)
    maroon = staticmethod(inlib_swig_py.colorf_maroon)
    orange = staticmethod(inlib_swig_py.colorf_orange)
    orchid = staticmethod(inlib_swig_py.colorf_orchid)
    darkorchid = staticmethod(inlib_swig_py.colorf_darkorchid)
    mediumorchid = staticmethod(inlib_swig_py.colorf_mediumorchid)
    pink = staticmethod(inlib_swig_py.colorf_pink)
    plum = staticmethod(inlib_swig_py.colorf_plum)
    red = staticmethod(inlib_swig_py.colorf_red)
    indianred = staticmethod(inlib_swig_py.colorf_indianred)
    mediumvioletred = staticmethod(inlib_swig_py.colorf_mediumvioletred)
    orangered = staticmethod(inlib_swig_py.colorf_orangered)
    violetred = staticmethod(inlib_swig_py.colorf_violetred)
    salmon = staticmethod(inlib_swig_py.colorf_salmon)
    sienna = staticmethod(inlib_swig_py.colorf_sienna)
    tan = staticmethod(inlib_swig_py.colorf_tan)
    thistle = staticmethod(inlib_swig_py.colorf_thistle)
    turquoise = staticmethod(inlib_swig_py.colorf_turquoise)
    darkturquoise = staticmethod(inlib_swig_py.colorf_darkturquoise)
    mediumturquoise = staticmethod(inlib_swig_py.colorf_mediumturquoise)
    violet = staticmethod(inlib_swig_py.colorf_violet)
    blueviolet = staticmethod(inlib_swig_py.colorf_blueviolet)
    wheat = staticmethod(inlib_swig_py.colorf_wheat)
    white = staticmethod(inlib_swig_py.colorf_white)
    yellow = staticmethod(inlib_swig_py.colorf_yellow)
    greenyellow = staticmethod(inlib_swig_py.colorf_greenyellow)
    to = staticmethod(inlib_swig_py.colorf_to)
colorf_swigregister = inlib_swig_py.colorf_swigregister
colorf_swigregister(colorf)
colorf_aquamarine = inlib_swig_py.colorf_aquamarine
colorf_mediumaquamarine = inlib_swig_py.colorf_mediumaquamarine
colorf_black = inlib_swig_py.colorf_black
colorf_blue = inlib_swig_py.colorf_blue
colorf_cadetblue = inlib_swig_py.colorf_cadetblue
colorf_cornflowerblue = inlib_swig_py.colorf_cornflowerblue
colorf_darkslateblue = inlib_swig_py.colorf_darkslateblue
colorf_lightblue = inlib_swig_py.colorf_lightblue
colorf_lightsteelblue = inlib_swig_py.colorf_lightsteelblue
colorf_mediumblue = inlib_swig_py.colorf_mediumblue
colorf_mediumslateblue = inlib_swig_py.colorf_mediumslateblue
colorf_midnightblue = inlib_swig_py.colorf_midnightblue
colorf_navyblue = inlib_swig_py.colorf_navyblue
colorf_navy = inlib_swig_py.colorf_navy
colorf_skyblue = inlib_swig_py.colorf_skyblue
colorf_slateblue = inlib_swig_py.colorf_slateblue
colorf_steelblue = inlib_swig_py.colorf_steelblue
colorf_coral = inlib_swig_py.colorf_coral
colorf_cyan = inlib_swig_py.colorf_cyan
colorf_firebrick = inlib_swig_py.colorf_firebrick
colorf_brown = inlib_swig_py.colorf_brown
colorf_gold = inlib_swig_py.colorf_gold
colorf_goldenrod = inlib_swig_py.colorf_goldenrod
colorf_green = inlib_swig_py.colorf_green
colorf_darkgreen = inlib_swig_py.colorf_darkgreen
colorf_darkolivegreen = inlib_swig_py.colorf_darkolivegreen
colorf_forestgreen = inlib_swig_py.colorf_forestgreen
colorf_limegreen = inlib_swig_py.colorf_limegreen
colorf_mediumseagreen = inlib_swig_py.colorf_mediumseagreen
colorf_mediumspringgreen = inlib_swig_py.colorf_mediumspringgreen
colorf_palegreen = inlib_swig_py.colorf_palegreen
colorf_seagreen = inlib_swig_py.colorf_seagreen
colorf_springgreen = inlib_swig_py.colorf_springgreen
colorf_yellowgreen = inlib_swig_py.colorf_yellowgreen
colorf_darkslategrey = inlib_swig_py.colorf_darkslategrey
colorf_dimgrey = inlib_swig_py.colorf_dimgrey
colorf_lightgrey = inlib_swig_py.colorf_lightgrey
colorf_grey = inlib_swig_py.colorf_grey
colorf_khaki = inlib_swig_py.colorf_khaki
colorf_magenta = inlib_swig_py.colorf_magenta
colorf_maroon = inlib_swig_py.colorf_maroon
colorf_orange = inlib_swig_py.colorf_orange
colorf_orchid = inlib_swig_py.colorf_orchid
colorf_darkorchid = inlib_swig_py.colorf_darkorchid
colorf_mediumorchid = inlib_swig_py.colorf_mediumorchid
colorf_pink = inlib_swig_py.colorf_pink
colorf_plum = inlib_swig_py.colorf_plum
colorf_red = inlib_swig_py.colorf_red
colorf_indianred = inlib_swig_py.colorf_indianred
colorf_mediumvioletred = inlib_swig_py.colorf_mediumvioletred
colorf_orangered = inlib_swig_py.colorf_orangered
colorf_violetred = inlib_swig_py.colorf_violetred
colorf_salmon = inlib_swig_py.colorf_salmon
colorf_sienna = inlib_swig_py.colorf_sienna
colorf_tan = inlib_swig_py.colorf_tan
colorf_thistle = inlib_swig_py.colorf_thistle
colorf_turquoise = inlib_swig_py.colorf_turquoise
colorf_darkturquoise = inlib_swig_py.colorf_darkturquoise
colorf_mediumturquoise = inlib_swig_py.colorf_mediumturquoise
colorf_violet = inlib_swig_py.colorf_violet
colorf_blueviolet = inlib_swig_py.colorf_blueviolet
colorf_wheat = inlib_swig_py.colorf_wheat
colorf_white = inlib_swig_py.colorf_white
colorf_yellow = inlib_swig_py.colorf_yellow
colorf_greenyellow = inlib_swig_py.colorf_greenyellow
colorf_to = inlib_swig_py.colorf_to

class cmp_colorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(*args): return inlib_swig_py.cmp_colorf___call__(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_cmp_colorf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_cmp_colorf
    __del__ = lambda self : None;
cmp_colorf_swigregister = inlib_swig_py.cmp_colorf_swigregister
cmp_colorf_swigregister(cmp_colorf)

class field(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.field_write(*args)
    def read(*args): return inlib_swig_py.field_read(*args)
    def dump(*args): return inlib_swig_py.field_dump(*args)
    def touch(*args): return inlib_swig_py.field_touch(*args)
    def touched(*args): return inlib_swig_py.field_touched(*args)
    def reset_touched(*args): return inlib_swig_py.field_reset_touched(*args)
field_swigregister = inlib_swig_py.field_swigregister
field_swigregister(field)
rcmp = inlib_swig_py.rcmp

class bsf_bool(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bsf_bool
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bsf_bool___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bsf_bool___ne__(*args)
    def value(*args): return inlib_swig_py.bsf_bool_value(*args)
    def value_no_cmp(*args): return inlib_swig_py.bsf_bool_value_no_cmp(*args)
bsf_bool_swigregister = inlib_swig_py.bsf_bool_swigregister
bsf_bool_swigregister(bsf_bool)

class bsf_float(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bsf_float
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bsf_float___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bsf_float___ne__(*args)
    def value(*args): return inlib_swig_py.bsf_float_value(*args)
    def value_no_cmp(*args): return inlib_swig_py.bsf_float_value_no_cmp(*args)
bsf_float_swigregister = inlib_swig_py.bsf_float_swigregister
bsf_float_swigregister(bsf_float)

class bsf_string(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bsf_string
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bsf_string___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bsf_string___ne__(*args)
    def value(*args): return inlib_swig_py.bsf_string_value(*args)
    def value_no_cmp(*args): return inlib_swig_py.bsf_string_value_no_cmp(*args)
bsf_string_swigregister = inlib_swig_py.bsf_string_swigregister
bsf_string_swigregister(bsf_string)

class bsf_rotf(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bsf_rotf
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bsf_rotf___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bsf_rotf___ne__(*args)
    def value(*args): return inlib_swig_py.bsf_rotf_value(*args)
    def value_no_cmp(*args): return inlib_swig_py.bsf_rotf_value_no_cmp(*args)
bsf_rotf_swigregister = inlib_swig_py.bsf_rotf_swigregister
bsf_rotf_swigregister(bsf_rotf)

class bsf_colorf(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bsf_colorf
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bsf_colorf___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bsf_colorf___ne__(*args)
    def value(*args): return inlib_swig_py.bsf_colorf_value(*args)
    def value_no_cmp(*args): return inlib_swig_py.bsf_colorf_value_no_cmp(*args)
bsf_colorf_swigregister = inlib_swig_py.bsf_colorf_swigregister
bsf_colorf_swigregister(bsf_colorf)

class bsf_winding_type(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bsf_winding_type
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bsf_winding_type___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bsf_winding_type___ne__(*args)
    def value(*args): return inlib_swig_py.bsf_winding_type_value(*args)
    def value_no_cmp(*args): return inlib_swig_py.bsf_winding_type_value_no_cmp(*args)
bsf_winding_type_swigregister = inlib_swig_py.bsf_winding_type_swigregister
bsf_winding_type_swigregister(bsf_winding_type)

class iwbuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_iwbuf
    __del__ = lambda self : None;
    def write(*args): return inlib_swig_py.iwbuf_write(*args)
    def write_vec(*args): return inlib_swig_py.iwbuf_write_vec(*args)
    def write_cstr(*args): return inlib_swig_py.iwbuf_write_cstr(*args)
    def write_img(*args): return inlib_swig_py.iwbuf_write_img(*args)
    def write_std_vec_vec(*args): return inlib_swig_py.iwbuf_write_std_vec_vec(*args)
    def buf(*args): return inlib_swig_py.iwbuf_buf(*args)
    def length(*args): return inlib_swig_py.iwbuf_length(*args)
iwbuf_swigregister = inlib_swig_py.iwbuf_swigregister
iwbuf_swigregister(iwbuf)

class irbuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_irbuf
    __del__ = lambda self : None;
    def read(*args): return inlib_swig_py.irbuf_read(*args)
    def read_vec(*args): return inlib_swig_py.irbuf_read_vec(*args)
    def read_cstr(*args): return inlib_swig_py.irbuf_read_cstr(*args)
    def read_img(*args): return inlib_swig_py.irbuf_read_img(*args)
    def read_std_vec_vec(*args): return inlib_swig_py.irbuf_read_std_vec_vec(*args)
irbuf_swigregister = inlib_swig_py.irbuf_swigregister
irbuf_swigregister(irbuf)

class sf_bool(bsf_bool):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.sf_bool_write(*args)
    def read(*args): return inlib_swig_py.sf_bool_read(*args)
    def dump(*args): return inlib_swig_py.sf_bool_dump(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_bool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_sf_bool
    __del__ = lambda self : None;
sf_bool_swigregister = inlib_swig_py.sf_bool_swigregister
sf_bool_swigregister(sf_bool)

class sf_float(bsf_float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.sf_float_write(*args)
    def read(*args): return inlib_swig_py.sf_float_read(*args)
    def dump(*args): return inlib_swig_py.sf_float_dump(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_sf_float
    __del__ = lambda self : None;
sf_float_swigregister = inlib_swig_py.sf_float_swigregister
sf_float_swigregister(sf_float)

line_solid = inlib_swig_py.line_solid
line_dashed = inlib_swig_py.line_dashed
line_dotted = inlib_swig_py.line_dotted
line_dash_dotted = inlib_swig_py.line_dash_dotted
marker_dot = inlib_swig_py.marker_dot
marker_plus = inlib_swig_py.marker_plus
marker_asterisk = inlib_swig_py.marker_asterisk
marker_cross = inlib_swig_py.marker_cross
marker_star = inlib_swig_py.marker_star
marker_circle_line = inlib_swig_py.marker_circle_line
marker_circle_filled = inlib_swig_py.marker_circle_filled
marker_triangle_up_line = inlib_swig_py.marker_triangle_up_line
marker_triangle_up_filled = inlib_swig_py.marker_triangle_up_filled
marker_triangle_down_line = inlib_swig_py.marker_triangle_down_line
marker_triangle_down_filled = inlib_swig_py.marker_triangle_down_filled
marker_david_star_line = inlib_swig_py.marker_david_star_line
marker_david_star_filled = inlib_swig_py.marker_david_star_filled
marker_swiss_cross_line = inlib_swig_py.marker_swiss_cross_line
marker_swiss_cross_filled = inlib_swig_py.marker_swiss_cross_filled
marker_diamond_line = inlib_swig_py.marker_diamond_line
marker_diamond_filled = inlib_swig_py.marker_diamond_filled
marker_square_line = inlib_swig_py.marker_square_line
marker_square_filled = inlib_swig_py.marker_square_filled
marker_penta_star_line = inlib_swig_py.marker_penta_star_line
marker_penta_star_filled = inlib_swig_py.marker_penta_star_filled
area_solid = inlib_swig_py.area_solid
area_hatched = inlib_swig_py.area_hatched
area_checker = inlib_swig_py.area_checker
area_edged = inlib_swig_py.area_edged
projection_none = inlib_swig_py.projection_none
projection_rz = inlib_swig_py.projection_rz
projection_phiz = inlib_swig_py.projection_phiz
projection_zr = inlib_swig_py.projection_zr
projection_zphi = inlib_swig_py.projection_zphi
painting_uniform = inlib_swig_py.painting_uniform
painting_by_value = inlib_swig_py.painting_by_value
painting_by_level = inlib_swig_py.painting_by_level
painting_grey_scale = inlib_swig_py.painting_grey_scale
painting_violet_to_red = inlib_swig_py.painting_violet_to_red
painting_grey_scale_inverse = inlib_swig_py.painting_grey_scale_inverse
hatching_none = inlib_swig_py.hatching_none
hatching_right = inlib_swig_py.hatching_right
hatching_left = inlib_swig_py.hatching_left
hatching_left_and_right = inlib_swig_py.hatching_left_and_right
left = inlib_swig_py.left
center = inlib_swig_py.center
right = inlib_swig_py.right
bottom = inlib_swig_py.bottom
middle = inlib_swig_py.middle
top = inlib_swig_py.top
latin = inlib_swig_py.latin
greek = inlib_swig_py.greek
special = inlib_swig_py.special
font_outline = inlib_swig_py.font_outline
font_filled = inlib_swig_py.font_filled
arrow_up = inlib_swig_py.arrow_up
arrow_down = inlib_swig_py.arrow_down
arrow_left = inlib_swig_py.arrow_left
arrow_right = inlib_swig_py.arrow_right
winding_ccw = inlib_swig_py.winding_ccw
winding_cw = inlib_swig_py.winding_cw
move_rotate_right = inlib_swig_py.move_rotate_right
move_translate_right = inlib_swig_py.move_translate_right
move_rotate_left = inlib_swig_py.move_rotate_left
move_translate_left = inlib_swig_py.move_translate_left
move_up = inlib_swig_py.move_up
move_down = inlib_swig_py.move_down
move_forward = inlib_swig_py.move_forward
move_backward = inlib_swig_py.move_backward
move_zoom_in = inlib_swig_py.move_zoom_in
move_zoom_out = inlib_swig_py.move_zoom_out
move_rotate_around_focal_right = inlib_swig_py.move_rotate_around_focal_right
move_rotate_around_focal_left = inlib_swig_py.move_rotate_around_focal_left
anim_left = inlib_swig_py.anim_left
anim_right = inlib_swig_py.anim_right
anim_up = inlib_swig_py.anim_up
anim_down = inlib_swig_py.anim_down
key_left = inlib_swig_py.key_left
key_right = inlib_swig_py.key_right
key_up = inlib_swig_py.key_up
key_down = inlib_swig_py.key_down
number_uint = inlib_swig_py.number_uint
number_int = inlib_swig_py.number_int
number_real = inlib_swig_py.number_real
number_ip = inlib_swig_py.number_ip
tex_expand_size = inlib_swig_py.tex_expand_size
class sf_string(bsf_string):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.sf_string_write(*args)
    def read(*args): return inlib_swig_py.sf_string_read(*args)
    def dump(*args): return inlib_swig_py.sf_string_dump(*args)
    __swig_destroy__ = inlib_swig_py.delete_sf_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_string(*args)
        try: self.this.append(this)
        except: self.this = this
sf_string_swigregister = inlib_swig_py.sf_string_swigregister
sf_string_swigregister(sf_string)

class sf_rotf(bsf_rotf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.sf_rotf_write(*args)
    def read(*args): return inlib_swig_py.sf_rotf_read(*args)
    def dump(*args): return inlib_swig_py.sf_rotf_dump(*args)
    __swig_destroy__ = inlib_swig_py.delete_sf_rotf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_rotf(*args)
        try: self.this.append(this)
        except: self.this = this
sf_rotf_swigregister = inlib_swig_py.sf_rotf_swigregister
sf_rotf_swigregister(sf_rotf)

class sf_vec_colorf(bsf_colorf):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.sf_vec_colorf_write(*args)
    def read(*args): return inlib_swig_py.sf_vec_colorf_read(*args)
    def dump(*args): return inlib_swig_py.sf_vec_colorf_dump(*args)
    __swig_destroy__ = inlib_swig_py.delete_sf_vec_colorf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_vec_colorf(*args)
        try: self.this.append(this)
        except: self.this = this
sf_vec_colorf_swigregister = inlib_swig_py.sf_vec_colorf_swigregister
sf_vec_colorf_swigregister(sf_vec_colorf)

class sf_enum_winding_type(bsf_winding_type):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.sf_enum_winding_type_write(*args)
    def read(*args): return inlib_swig_py.sf_enum_winding_type_read(*args)
    def dump(*args): return inlib_swig_py.sf_enum_winding_type_dump(*args)
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_winding_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_enum_winding_type(*args)
        try: self.this.append(this)
        except: self.this = this
sf_enum_winding_type_swigregister = inlib_swig_py.sf_enum_winding_type_swigregister
sf_enum_winding_type_swigregister(sf_enum_winding_type)

class bmf_string(field):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_bmf_string
    __del__ = lambda self : None;
    def __eq__(*args): return inlib_swig_py.bmf_string___eq__(*args)
    def __ne__(*args): return inlib_swig_py.bmf_string___ne__(*args)
    def size(*args): return inlib_swig_py.bmf_string_size(*args)
    def empty(*args): return inlib_swig_py.bmf_string_empty(*args)
    def values(*args): return inlib_swig_py.bmf_string_values(*args)
    def add(*args): return inlib_swig_py.bmf_string_add(*args)
    def insert(*args): return inlib_swig_py.bmf_string_insert(*args)
    def set_value(*args): return inlib_swig_py.bmf_string_set_value(*args)
    def get_value(*args): return inlib_swig_py.bmf_string_get_value(*args)
    def clear(*args): return inlib_swig_py.bmf_string_clear(*args)
    def set_values(*args): return inlib_swig_py.bmf_string_set_values(*args)
bmf_string_swigregister = inlib_swig_py.bmf_string_swigregister
bmf_string_swigregister(bmf_string)

class mf_string(bmf_string):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def write(*args): return inlib_swig_py.mf_string_write(*args)
    def read(*args): return inlib_swig_py.mf_string_read(*args)
    def dump(*args): return inlib_swig_py.mf_string_dump(*args)
    __swig_destroy__ = inlib_swig_py.delete_mf_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_mf_string(*args)
        try: self.this.append(this)
        except: self.this = this
mf_string_swigregister = inlib_swig_py.mf_string_swigregister
mf_string_swigregister(mf_string)

__lshift__ = inlib_swig_py.__lshift__
set_from_vec = inlib_swig_py.set_from_vec
get_data = inlib_swig_py.get_data
tick_modeling_none = inlib_swig_py.tick_modeling_none
tick_modeling_hippo = inlib_swig_py.tick_modeling_hippo
tick_modeling_hplot = inlib_swig_py.tick_modeling_hplot
infos_modeling_ROOT = inlib_swig_py.infos_modeling_ROOT
encoding_none = inlib_swig_py.encoding_none
encoding_PAW = inlib_swig_py.encoding_PAW
modeling_boxes = inlib_swig_py.modeling_boxes
modeling_wire_boxes = inlib_swig_py.modeling_wire_boxes
modeling_lines = inlib_swig_py.modeling_lines
modeling_segments = inlib_swig_py.modeling_segments
modeling_points = inlib_swig_py.modeling_points
modeling_top_lines = inlib_swig_py.modeling_top_lines
modeling_texts = inlib_swig_py.modeling_texts
modeling_curve = inlib_swig_py.modeling_curve
modeling_filled_curve = inlib_swig_py.modeling_filled_curve
modeling_bar_chart = inlib_swig_py.modeling_bar_chart
modeling_solid = inlib_swig_py.modeling_solid
modeling_wire_frame = inlib_swig_py.modeling_wire_frame
modeling_reduced_wire_frame = inlib_swig_py.modeling_reduced_wire_frame
modeling_polygon = inlib_swig_py.modeling_polygon
modeling_none = inlib_swig_py.modeling_none
modeling_I = inlib_swig_py.modeling_I
modeling_plus = inlib_swig_py.modeling_plus
light_model_base_color = inlib_swig_py.light_model_base_color
light_model_phong = inlib_swig_py.light_model_phong
font_hershey = inlib_swig_py.font_hershey
font_arialbd_ttf = inlib_swig_py.font_arialbd_ttf
font_timesbd_ttf = inlib_swig_py.font_timesbd_ttf
font_symbol_ttf = inlib_swig_py.font_symbol_ttf
font_stixgeneral_otf = inlib_swig_py.font_stixgeneral_otf
font_helvetica_ttf = inlib_swig_py.font_helvetica_ttf
font_times_roman_ttf = inlib_swig_py.font_times_roman_ttf
font_ROOT_62 = inlib_swig_py.font_ROOT_62
s_node_end = inlib_swig_py.s_node_end
s_clear_scene = inlib_swig_py.s_clear_scene
class style_color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_style_color
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_style_color(*args)
        try: self.this.append(this)
        except: self.this = this
style_color_swigregister = inlib_swig_py.style_color_swigregister
style_color_swigregister(style_color)

class style_colormap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.style_colormap_s_class)
    check_class_name = staticmethod(inlib_swig_py.style_colormap_check_class_name)
    __swig_destroy__ = inlib_swig_py.delete_style_colormap
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_style_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_color(*args): return inlib_swig_py.style_colormap_get_color(*args)
    def get_string_color(*args): return inlib_swig_py.style_colormap_get_string_color(*args)
    def add(*args): return inlib_swig_py.style_colormap_add(*args)
style_colormap_swigregister = inlib_swig_py.style_colormap_swigregister
style_colormap_swigregister(style_colormap)
style_colormap_s_class = inlib_swig_py.style_colormap_s_class
style_colormap_check_class_name = inlib_swig_py.style_colormap_check_class_name

class style_default_colormap(style_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_default = staticmethod(inlib_swig_py.style_default_colormap_s_default)
    def __init__(self, *args): 
        this = inlib_swig_py.new_style_default_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_style_default_colormap
    __del__ = lambda self : None;
style_default_colormap_swigregister = inlib_swig_py.style_default_colormap_swigregister
style_default_colormap_swigregister(style_default_colormap)
style_default_colormap_s_default = inlib_swig_py.style_default_colormap_s_default

class style_ROOT_colormap(style_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_style_ROOT_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_style_ROOT_colormap
    __del__ = lambda self : None;
style_ROOT_colormap_swigregister = inlib_swig_py.style_ROOT_colormap_swigregister
style_ROOT_colormap_swigregister(style_ROOT_colormap)

class style_povama_colormap(style_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_style_povama_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_style_povama_colormap
    __del__ = lambda self : None;
style_povama_colormap_swigregister = inlib_swig_py.style_povama_colormap_swigregister
style_povama_colormap_swigregister(style_povama_colormap)

to_ulong = inlib_swig_py.to_ulong
find_color = inlib_swig_py.find_color
fpi = inlib_swig_py.fpi
ftwo_pi = inlib_swig_py.ftwo_pi
fhalf_pi = inlib_swig_py.fhalf_pi
fcos = inlib_swig_py.fcos
fsin = inlib_swig_py.fsin
facos = inlib_swig_py.facos
fasin = inlib_swig_py.fasin
ftan = inlib_swig_py.ftan
fatan = inlib_swig_py.fatan
fatan2 = inlib_swig_py.fatan2
fsqrt = inlib_swig_py.fsqrt
fpow = inlib_swig_py.fpow
fexp = inlib_swig_py.fexp
flog = inlib_swig_py.flog
flog10 = inlib_swig_py.flog10
ffloor = inlib_swig_py.ffloor
ffabs = inlib_swig_py.ffabs
fceil = inlib_swig_py.fceil
fdeg2rad = inlib_swig_py.fdeg2rad
frad2deg = inlib_swig_py.frad2deg
fround = inlib_swig_py.fround
class style_parser(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_style_parser
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_style_parser(*args)
        try: self.this.append(this)
        except: self.this = this
    no_limit = staticmethod(inlib_swig_py.style_parser_no_limit)
    def copy(*args): return inlib_swig_py.style_parser_copy(*args)
    def equal(*args): return inlib_swig_py.style_parser_equal(*args)
    def reset(*args): return inlib_swig_py.style_parser_reset(*args)
    def tos(*args): return inlib_swig_py.style_parser_tos(*args)
    def color(*args): return inlib_swig_py.style_parser_color(*args)
    def highlight_color(*args): return inlib_swig_py.style_parser_highlight_color(*args)
    def back_color(*args): return inlib_swig_py.style_parser_back_color(*args)
    def line_width(*args): return inlib_swig_py.style_parser_line_width(*args)
    def back_shadow(*args): return inlib_swig_py.style_parser_back_shadow(*args)
    def marker_style(*args): return inlib_swig_py.style_parser_marker_style(*args)
    def marker_size(*args): return inlib_swig_py.style_parser_marker_size(*args)
    def font_size(*args): return inlib_swig_py.style_parser_font_size(*args)
    def area_style(*args): return inlib_swig_py.style_parser_area_style(*args)
    def modeling(*args): return inlib_swig_py.style_parser_modeling(*args)
    def light_model(*args): return inlib_swig_py.style_parser_light_model(*args)
    def tick_modeling(*args): return inlib_swig_py.style_parser_tick_modeling(*args)
    def encoding(*args): return inlib_swig_py.style_parser_encoding(*args)
    def smoothing(*args): return inlib_swig_py.style_parser_smoothing(*args)
    def hinting(*args): return inlib_swig_py.style_parser_hinting(*args)
    def painting(*args): return inlib_swig_py.style_parser_painting(*args)
    def hatching(*args): return inlib_swig_py.style_parser_hatching(*args)
    def projection(*args): return inlib_swig_py.style_parser_projection(*args)
    def line_pattern(*args): return inlib_swig_py.style_parser_line_pattern(*args)
    def font(*args): return inlib_swig_py.style_parser_font(*args)
    def divisions(*args): return inlib_swig_py.style_parser_divisions(*args)
    def rotation_steps(*args): return inlib_swig_py.style_parser_rotation_steps(*args)
    def offset(*args): return inlib_swig_py.style_parser_offset(*args)
    def strip_width(*args): return inlib_swig_py.style_parser_strip_width(*args)
    def angle(*args): return inlib_swig_py.style_parser_angle(*args)
    def scale(*args): return inlib_swig_py.style_parser_scale(*args)
    def bar_offset(*args): return inlib_swig_py.style_parser_bar_offset(*args)
    def bar_width(*args): return inlib_swig_py.style_parser_bar_width(*args)
    def multi_node_limit(*args): return inlib_swig_py.style_parser_multi_node_limit(*args)
    def spacing(*args): return inlib_swig_py.style_parser_spacing(*args)
    def visible(*args): return inlib_swig_py.style_parser_visible(*args)
    def editable(*args): return inlib_swig_py.style_parser_editable(*args)
    def automated(*args): return inlib_swig_py.style_parser_automated(*args)
    def cut(*args): return inlib_swig_py.style_parser_cut(*args)
    def options(*args): return inlib_swig_py.style_parser_options(*args)
    def color_mapping(*args): return inlib_swig_py.style_parser_color_mapping(*args)
    def enforced(*args): return inlib_swig_py.style_parser_enforced(*args)
    def translation(*args): return inlib_swig_py.style_parser_translation(*args)
    def front_face(*args): return inlib_swig_py.style_parser_front_face(*args)
    def hjust(*args): return inlib_swig_py.style_parser_hjust(*args)
    def vjust(*args): return inlib_swig_py.style_parser_vjust(*args)
    scolor = staticmethod(inlib_swig_py.style_parser_scolor)
    shjust = staticmethod(inlib_swig_py.style_parser_shjust)
    svjust = staticmethod(inlib_swig_py.style_parser_svjust)
    smarker_style = staticmethod(inlib_swig_py.style_parser_smarker_style)
    sarea_style = staticmethod(inlib_swig_py.style_parser_sarea_style)
    spainting_policies = staticmethod(inlib_swig_py.style_parser_spainting_policies)
    spainting_policy = staticmethod(inlib_swig_py.style_parser_spainting_policy)
    shatching_policy = staticmethod(inlib_swig_py.style_parser_shatching_policy)
    sprojection_type = staticmethod(inlib_swig_py.style_parser_sprojection_type)
    sline_pattern = staticmethod(inlib_swig_py.style_parser_sline_pattern)
    def parse(*args): return inlib_swig_py.style_parser_parse(*args)
style_parser_swigregister = inlib_swig_py.style_parser_swigregister
style_parser_swigregister(style_parser)
style_parser_no_limit = inlib_swig_py.style_parser_no_limit
style_parser_scolor = inlib_swig_py.style_parser_scolor
style_parser_shjust = inlib_swig_py.style_parser_shjust
style_parser_svjust = inlib_swig_py.style_parser_svjust
style_parser_smarker_style = inlib_swig_py.style_parser_smarker_style
style_parser_sarea_style = inlib_swig_py.style_parser_sarea_style
style_parser_spainting_policies = inlib_swig_py.style_parser_spainting_policies
style_parser_spainting_policy = inlib_swig_py.style_parser_spainting_policy
style_parser_shatching_policy = inlib_swig_py.style_parser_shatching_policy
style_parser_sprojection_type = inlib_swig_py.style_parser_sprojection_type
style_parser_sline_pattern = inlib_swig_py.style_parser_sline_pattern

class base_colormap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_color(*args): return inlib_swig_py.base_colormap_get_color(*args)
    def cast(*args): return inlib_swig_py.base_colormap_cast(*args)
    __swig_destroy__ = inlib_swig_py.delete_base_colormap
    __del__ = lambda self : None;
    def colorn(*args): return inlib_swig_py.base_colormap_colorn(*args)
    def valn(*args): return inlib_swig_py.base_colormap_valn(*args)
    def color(*args): return inlib_swig_py.base_colormap_color(*args)
    def value(*args): return inlib_swig_py.base_colormap_value(*args)
    def set_PAW_coloring(*args): return inlib_swig_py.base_colormap_set_PAW_coloring(*args)
base_colormap_swigregister = inlib_swig_py.base_colormap_swigregister
base_colormap_swigregister(base_colormap)

class by_value_colormap(base_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.by_value_colormap_s_class)
    def get_color(*args): return inlib_swig_py.by_value_colormap_get_color(*args)
    def cast(*args): return inlib_swig_py.by_value_colormap_cast(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_by_value_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_by_value_colormap
    __del__ = lambda self : None;
by_value_colormap_swigregister = inlib_swig_py.by_value_colormap_swigregister
by_value_colormap_swigregister(by_value_colormap)
by_value_colormap_s_class = inlib_swig_py.by_value_colormap_s_class

class grey_scale_colormap(base_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.grey_scale_colormap_s_class)
    def get_color(*args): return inlib_swig_py.grey_scale_colormap_get_color(*args)
    def cast(*args): return inlib_swig_py.grey_scale_colormap_cast(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_grey_scale_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_grey_scale_colormap
    __del__ = lambda self : None;
grey_scale_colormap_swigregister = inlib_swig_py.grey_scale_colormap_swigregister
grey_scale_colormap_swigregister(grey_scale_colormap)
grey_scale_colormap_s_class = inlib_swig_py.grey_scale_colormap_s_class

class grey_scale_inverse_colormap(base_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.grey_scale_inverse_colormap_s_class)
    def get_color(*args): return inlib_swig_py.grey_scale_inverse_colormap_get_color(*args)
    def cast(*args): return inlib_swig_py.grey_scale_inverse_colormap_cast(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_grey_scale_inverse_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_grey_scale_inverse_colormap
    __del__ = lambda self : None;
grey_scale_inverse_colormap_swigregister = inlib_swig_py.grey_scale_inverse_colormap_swigregister
grey_scale_inverse_colormap_swigregister(grey_scale_inverse_colormap)
grey_scale_inverse_colormap_s_class = inlib_swig_py.grey_scale_inverse_colormap_s_class

class violet_to_red_colormap(base_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.violet_to_red_colormap_s_class)
    def get_color(*args): return inlib_swig_py.violet_to_red_colormap_get_color(*args)
    def cast(*args): return inlib_swig_py.violet_to_red_colormap_cast(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_violet_to_red_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_violet_to_red_colormap
    __del__ = lambda self : None;
violet_to_red_colormap_swigregister = inlib_swig_py.violet_to_red_colormap_swigregister
violet_to_red_colormap_swigregister(violet_to_red_colormap)
violet_to_red_colormap_s_class = inlib_swig_py.violet_to_red_colormap_s_class

class const_colormap(base_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.const_colormap_s_class)
    def get_color(*args): return inlib_swig_py.const_colormap_get_color(*args)
    def cast(*args): return inlib_swig_py.const_colormap_cast(*args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_const_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_const_colormap
    __del__ = lambda self : None;
const_colormap_swigregister = inlib_swig_py.const_colormap_swigregister
const_colormap_swigregister(const_colormap)
const_colormap_s_class = inlib_swig_py.const_colormap_s_class

class action(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_action
    __del__ = lambda self : None;
    def out(*args): return inlib_swig_py.action_out(*args)
action_swigregister = inlib_swig_py.action_swigregister
action_swigregister(action)

class search_action(action):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_search_action
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_search_action(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return inlib_swig_py.search_action_reset(*args)
    search_node_of_class = inlib_swig_py.search_action_search_node_of_class
    search_path_to_node = inlib_swig_py.search_action_search_path_to_node
    search_path_to_node_of_class = inlib_swig_py.search_action_search_path_to_node_of_class
    def what(*args): return inlib_swig_py.search_action_what(*args)
    def set_what(*args): return inlib_swig_py.search_action_set_what(*args)
    def set_done(*args): return inlib_swig_py.search_action_set_done(*args)
    def done(*args): return inlib_swig_py.search_action_done(*args)
    def add_obj(*args): return inlib_swig_py.search_action_add_obj(*args)
    def objs(*args): return inlib_swig_py.search_action_objs(*args)
    def set_class(*args): return inlib_swig_py.search_action_set_class(*args)
    def sclass(*args): return inlib_swig_py.search_action_sclass(*args)
    def set_node(*args): return inlib_swig_py.search_action_set_node(*args)
    def node(*args): return inlib_swig_py.search_action_node(*args)
    def path_push(*args): return inlib_swig_py.search_action_path_push(*args)
    def path_pop(*args): return inlib_swig_py.search_action_path_pop(*args)
    def path(*args): return inlib_swig_py.search_action_path(*args)
    def clear_path(*args): return inlib_swig_py.search_action_clear_path(*args)
    def do_path(*args): return inlib_swig_py.search_action_do_path(*args)
    def add_path(*args): return inlib_swig_py.search_action_add_path(*args)
    def paths(*args): return inlib_swig_py.search_action_paths(*args)
search_action_swigregister = inlib_swig_py.search_action_swigregister
search_action_swigregister(search_action)

class win_action(action):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_win_action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_win_action
    __del__ = lambda self : None;
    def ww(*args): return inlib_swig_py.win_action_ww(*args)
    def wh(*args): return inlib_swig_py.win_action_wh(*args)
win_action_swigregister = inlib_swig_py.win_action_swigregister
win_action_swigregister(win_action)

class mat4f(mat4_float):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mat4f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_mat4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def mul_2f(*args): return inlib_swig_py.mat4f_mul_2f(*args)
    def mul_3f(*args): return inlib_swig_py.mat4f_mul_3f(*args)
    def mul_4f(*args): return inlib_swig_py.mat4f_mul_4f(*args)
mat4f_swigregister = inlib_swig_py.mat4f_swigregister
mat4f_swigregister(mat4f)

class state(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_state
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_state(*args)
        try: self.this.append(this)
        except: self.this = this
    def screen2ndc(*args): return inlib_swig_py.state_screen2ndc(*args)
    def screen2wc(*args): return inlib_swig_py.state_screen2wc(*args)
    def screen2pwc(*args): return inlib_swig_py.state_screen2pwc(*args)
    def camera_proj_only(*args): return inlib_swig_py.state_camera_proj_only(*args)
    m_ww = _swig_property(inlib_swig_py.state_m_ww_get, inlib_swig_py.state_m_ww_set)
    m_wh = _swig_property(inlib_swig_py.state_m_wh_get, inlib_swig_py.state_m_wh_set)
    m_proj = _swig_property(inlib_swig_py.state_m_proj_get, inlib_swig_py.state_m_proj_set)
    m_model = _swig_property(inlib_swig_py.state_m_model_get, inlib_swig_py.state_m_model_set)
    m_GL_DEPTH_TEST = _swig_property(inlib_swig_py.state_m_GL_DEPTH_TEST_get, inlib_swig_py.state_m_GL_DEPTH_TEST_set)
    m_GL_LIGHTING = _swig_property(inlib_swig_py.state_m_GL_LIGHTING_get, inlib_swig_py.state_m_GL_LIGHTING_set)
    m_GL_CULL_FACE = _swig_property(inlib_swig_py.state_m_GL_CULL_FACE_get, inlib_swig_py.state_m_GL_CULL_FACE_set)
    m_GL_POLYGON_OFFSET_FILL = _swig_property(inlib_swig_py.state_m_GL_POLYGON_OFFSET_FILL_get, inlib_swig_py.state_m_GL_POLYGON_OFFSET_FILL_set)
    m_GL_TEXTURE_2D = _swig_property(inlib_swig_py.state_m_GL_TEXTURE_2D_get, inlib_swig_py.state_m_GL_TEXTURE_2D_set)
    m_use_vbo = _swig_property(inlib_swig_py.state_m_use_vbo_get, inlib_swig_py.state_m_use_vbo_set)
    m_winding = _swig_property(inlib_swig_py.state_m_winding_get, inlib_swig_py.state_m_winding_set)
    m_color = _swig_property(inlib_swig_py.state_m_color_get, inlib_swig_py.state_m_color_set)
    m_light = _swig_property(inlib_swig_py.state_m_light_get, inlib_swig_py.state_m_light_set)
    m_line_width = _swig_property(inlib_swig_py.state_m_line_width_get, inlib_swig_py.state_m_line_width_set)
    m_line_pattern = _swig_property(inlib_swig_py.state_m_line_pattern_get, inlib_swig_py.state_m_line_pattern_set)
    m_point_size = _swig_property(inlib_swig_py.state_m_point_size_get, inlib_swig_py.state_m_point_size_set)
    m_camera_ortho = _swig_property(inlib_swig_py.state_m_camera_ortho_get, inlib_swig_py.state_m_camera_ortho_set)
    m_camera_znear = _swig_property(inlib_swig_py.state_m_camera_znear_get, inlib_swig_py.state_m_camera_znear_set)
    m_camera_zfar = _swig_property(inlib_swig_py.state_m_camera_zfar_get, inlib_swig_py.state_m_camera_zfar_set)
    m_camera_position = _swig_property(inlib_swig_py.state_m_camera_position_get, inlib_swig_py.state_m_camera_position_set)
    m_camera_orientation = _swig_property(inlib_swig_py.state_m_camera_orientation_get, inlib_swig_py.state_m_camera_orientation_set)
    m_camera_lrbt = _swig_property(inlib_swig_py.state_m_camera_lrbt_get, inlib_swig_py.state_m_camera_lrbt_set)
state_swigregister = inlib_swig_py.state_swigregister
state_swigregister(state)

class states(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_states(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_states
    __del__ = lambda self : None;
    def state(*args): return inlib_swig_py.states_state(*args)
    def pop_state(*args): return inlib_swig_py.states_pop_state(*args)
    def push_state(*args): return inlib_swig_py.states_push_state(*args)
    def save_state(*args): return inlib_swig_py.states_save_state(*args)
    def saved_state(*args): return inlib_swig_py.states_saved_state(*args)
states_swigregister = inlib_swig_py.states_swigregister
states_swigregister(states)

class matrix_action(win_action,states):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def load_proj_matrix(*args): return inlib_swig_py.matrix_action_load_proj_matrix(*args)
    def load_model_matrix(*args): return inlib_swig_py.matrix_action_load_model_matrix(*args)
    __swig_destroy__ = inlib_swig_py.delete_matrix_action
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_matrix_action(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_matrices(*args): return inlib_swig_py.matrix_action_push_matrices(*args)
    def pop_matrices(*args): return inlib_swig_py.matrix_action_pop_matrices(*args)
    def projection_matrix(*args): return inlib_swig_py.matrix_action_projection_matrix(*args)
    def model_matrix(*args): return inlib_swig_py.matrix_action_model_matrix(*args)
    def end(*args): return inlib_swig_py.matrix_action_end(*args)
    def cur(*args): return inlib_swig_py.matrix_action_cur(*args)
    def project_point(*args): return inlib_swig_py.matrix_action_project_point(*args)
    def model_point(*args): return inlib_swig_py.matrix_action_model_point(*args)
    def projected_origin(*args): return inlib_swig_py.matrix_action_projected_origin(*args)
    def matrices_to_identity(*args): return inlib_swig_py.matrix_action_matrices_to_identity(*args)
    def matrices_from_state(*args): return inlib_swig_py.matrix_action_matrices_from_state(*args)
matrix_action_swigregister = inlib_swig_py.matrix_action_swigregister
matrix_action_swigregister(matrix_action)

points = inlib_swig_py.points
lines = inlib_swig_py.lines
line_loop = inlib_swig_py.line_loop
line_strip = inlib_swig_py.line_strip
triangles = inlib_swig_py.triangles
triangle_strip = inlib_swig_py.triangle_strip
triangle_fan = inlib_swig_py.triangle_fan
is_line = inlib_swig_py.is_line
class primitive_visitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_primitive_visitor
    __del__ = lambda self : None;
    def add_one_point(*args): return inlib_swig_py.primitive_visitor_add_one_point(*args)
    def add_triangles(*args): return inlib_swig_py.primitive_visitor_add_triangles(*args)
    def add_line_loop(*args): return inlib_swig_py.primitive_visitor_add_line_loop(*args)
    def add_triangle_fan_xy(*args): return inlib_swig_py.primitive_visitor_add_triangle_fan_xy(*args)
    def add_triangle_strip_xy(*args): return inlib_swig_py.primitive_visitor_add_triangle_strip_xy(*args)
    def add_triangles_xy(*args): return inlib_swig_py.primitive_visitor_add_triangles_xy(*args)
    def add_line_loop_xy(*args): return inlib_swig_py.primitive_visitor_add_line_loop_xy(*args)
    def add_line_strip_xy(*args): return inlib_swig_py.primitive_visitor_add_line_strip_xy(*args)
    def add_primitive_xy(*args): return inlib_swig_py.primitive_visitor_add_primitive_xy(*args)
    def add_primitive(*args): return inlib_swig_py.primitive_visitor_add_primitive(*args)
    def add_line_strip(*args): return inlib_swig_py.primitive_visitor_add_line_strip(*args)
    def add_lines_xy(*args): return inlib_swig_py.primitive_visitor_add_lines_xy(*args)
    def add_lines(*args): return inlib_swig_py.primitive_visitor_add_lines(*args)
    def add_points(*args): return inlib_swig_py.primitive_visitor_add_points(*args)
    def add_triangle_fan(*args): return inlib_swig_py.primitive_visitor_add_triangle_fan(*args)
    def add_triangle_fan_texture(*args): return inlib_swig_py.primitive_visitor_add_triangle_fan_texture(*args)
    def add_triangle_strip(*args): return inlib_swig_py.primitive_visitor_add_triangle_strip(*args)
    def add_triangle_strip_texture(*args): return inlib_swig_py.primitive_visitor_add_triangle_strip_texture(*args)
primitive_visitor_swigregister = inlib_swig_py.primitive_visitor_swigregister
primitive_visitor_swigregister(primitive_visitor)

class write_action(matrix_action,primitive_visitor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def buffer(*args): return inlib_swig_py.write_action_buffer(*args)
    def beg_node(*args): return inlib_swig_py.write_action_beg_node(*args)
    def end_node(*args): return inlib_swig_py.write_action_end_node(*args)
    def switch_do_all_children(*args): return inlib_swig_py.write_action_switch_do_all_children(*args)
    __swig_destroy__ = inlib_swig_py.delete_write_action
    __del__ = lambda self : None;
write_action_swigregister = inlib_swig_py.write_action_swigregister
write_action_swigregister(write_action)

class node(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.node_s_class)
    check_class_name = staticmethod(inlib_swig_py.node_check_class_name)
    def cast(*args): return inlib_swig_py.node_cast(*args)
    def copy(*args): return inlib_swig_py.node_copy(*args)
    def s_cls(*args): return inlib_swig_py.node_s_cls(*args)
    def node_fields(*args): return inlib_swig_py.node_node_fields(*args)
    def render(*args): return inlib_swig_py.node_render(*args)
    def pick(*args): return inlib_swig_py.node_pick(*args)
    def bbox(*args): return inlib_swig_py.node_bbox(*args)
    def search(*args): return inlib_swig_py.node_search(*args)
    def write(*args): return inlib_swig_py.node_write(*args)
    def event(*args): return inlib_swig_py.node_event(*args)
    __swig_destroy__ = inlib_swig_py.delete_node
    __del__ = lambda self : None;
    def reset_touched(*args): return inlib_swig_py.node_reset_touched(*args)
    def fields(*args): return inlib_swig_py.node_fields(*args)
node_swigregister = inlib_swig_py.node_swigregister
node_swigregister(node)
node_s_class = inlib_swig_py.node_s_class
node_check_class_name = inlib_swig_py.node_check_class_name

class style(node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(inlib_swig_py.style_color_get, inlib_swig_py.style_color_set)
    highlight_color = _swig_property(inlib_swig_py.style_highlight_color_get, inlib_swig_py.style_highlight_color_set)
    back_color = _swig_property(inlib_swig_py.style_back_color_get, inlib_swig_py.style_back_color_set)
    line_width = _swig_property(inlib_swig_py.style_line_width_get, inlib_swig_py.style_line_width_set)
    marker_size = _swig_property(inlib_swig_py.style_marker_size_get, inlib_swig_py.style_marker_size_set)
    font_size = _swig_property(inlib_swig_py.style_font_size_get, inlib_swig_py.style_font_size_set)
    line_pattern = _swig_property(inlib_swig_py.style_line_pattern_get, inlib_swig_py.style_line_pattern_set)
    marker_style = _swig_property(inlib_swig_py.style_marker_style_get, inlib_swig_py.style_marker_style_set)
    area_style = _swig_property(inlib_swig_py.style_area_style_get, inlib_swig_py.style_area_style_set)
    modeling = _swig_property(inlib_swig_py.style_modeling_get, inlib_swig_py.style_modeling_set)
    light_model = _swig_property(inlib_swig_py.style_light_model_get, inlib_swig_py.style_light_model_set)
    tick_modeling = _swig_property(inlib_swig_py.style_tick_modeling_get, inlib_swig_py.style_tick_modeling_set)
    encoding = _swig_property(inlib_swig_py.style_encoding_get, inlib_swig_py.style_encoding_set)
    smoothing = _swig_property(inlib_swig_py.style_smoothing_get, inlib_swig_py.style_smoothing_set)
    hinting = _swig_property(inlib_swig_py.style_hinting_get, inlib_swig_py.style_hinting_set)
    cut = _swig_property(inlib_swig_py.style_cut_get, inlib_swig_py.style_cut_set)
    painting = _swig_property(inlib_swig_py.style_painting_get, inlib_swig_py.style_painting_set)
    hatching = _swig_property(inlib_swig_py.style_hatching_get, inlib_swig_py.style_hatching_set)
    projection = _swig_property(inlib_swig_py.style_projection_get, inlib_swig_py.style_projection_set)
    font = _swig_property(inlib_swig_py.style_font_get, inlib_swig_py.style_font_set)
    multi_node_limit = _swig_property(inlib_swig_py.style_multi_node_limit_get, inlib_swig_py.style_multi_node_limit_set)
    divisions = _swig_property(inlib_swig_py.style_divisions_get, inlib_swig_py.style_divisions_set)
    rotation_steps = _swig_property(inlib_swig_py.style_rotation_steps_get, inlib_swig_py.style_rotation_steps_set)
    spacing = _swig_property(inlib_swig_py.style_spacing_get, inlib_swig_py.style_spacing_set)
    angle = _swig_property(inlib_swig_py.style_angle_get, inlib_swig_py.style_angle_set)
    scale = _swig_property(inlib_swig_py.style_scale_get, inlib_swig_py.style_scale_set)
    offset = _swig_property(inlib_swig_py.style_offset_get, inlib_swig_py.style_offset_set)
    strip_width = _swig_property(inlib_swig_py.style_strip_width_get, inlib_swig_py.style_strip_width_set)
    visible = _swig_property(inlib_swig_py.style_visible_get, inlib_swig_py.style_visible_set)
    bar_offset = _swig_property(inlib_swig_py.style_bar_offset_get, inlib_swig_py.style_bar_offset_set)
    bar_width = _swig_property(inlib_swig_py.style_bar_width_get, inlib_swig_py.style_bar_width_set)
    editable = _swig_property(inlib_swig_py.style_editable_get, inlib_swig_py.style_editable_set)
    automated = _swig_property(inlib_swig_py.style_automated_get, inlib_swig_py.style_automated_set)
    options = _swig_property(inlib_swig_py.style_options_get, inlib_swig_py.style_options_set)
    color_mapping = _swig_property(inlib_swig_py.style_color_mapping_get, inlib_swig_py.style_color_mapping_set)
    enforced = _swig_property(inlib_swig_py.style_enforced_get, inlib_swig_py.style_enforced_set)
    translation = _swig_property(inlib_swig_py.style_translation_get, inlib_swig_py.style_translation_set)
    def copy(*args): return inlib_swig_py.style_copy(*args)
    def s_cls(*args): return inlib_swig_py.style_s_cls(*args)
    __swig_destroy__ = inlib_swig_py.delete_style
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_style(*args)
        try: self.this.append(this)
        except: self.this = this
    def from_string(*args): return inlib_swig_py.style_from_string(*args)
style_swigregister = inlib_swig_py.style_swigregister
style_swigregister(style)

class text_style(node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    visible = _swig_property(inlib_swig_py.text_style_visible_get, inlib_swig_py.text_style_visible_set)
    color = _swig_property(inlib_swig_py.text_style_color_get, inlib_swig_py.text_style_color_set)
    back_color = _swig_property(inlib_swig_py.text_style_back_color_get, inlib_swig_py.text_style_back_color_set)
    back_shadow = _swig_property(inlib_swig_py.text_style_back_shadow_get, inlib_swig_py.text_style_back_shadow_set)
    modeling = _swig_property(inlib_swig_py.text_style_modeling_get, inlib_swig_py.text_style_modeling_set)
    font = _swig_property(inlib_swig_py.text_style_font_get, inlib_swig_py.text_style_font_set)
    font_size = _swig_property(inlib_swig_py.text_style_font_size_get, inlib_swig_py.text_style_font_size_set)
    encoding = _swig_property(inlib_swig_py.text_style_encoding_get, inlib_swig_py.text_style_encoding_set)
    smoothing = _swig_property(inlib_swig_py.text_style_smoothing_get, inlib_swig_py.text_style_smoothing_set)
    hinting = _swig_property(inlib_swig_py.text_style_hinting_get, inlib_swig_py.text_style_hinting_set)
    hjust = _swig_property(inlib_swig_py.text_style_hjust_get, inlib_swig_py.text_style_hjust_set)
    vjust = _swig_property(inlib_swig_py.text_style_vjust_get, inlib_swig_py.text_style_vjust_set)
    scale = _swig_property(inlib_swig_py.text_style_scale_get, inlib_swig_py.text_style_scale_set)
    x_orientation = _swig_property(inlib_swig_py.text_style_x_orientation_get, inlib_swig_py.text_style_x_orientation_set)
    y_orientation = _swig_property(inlib_swig_py.text_style_y_orientation_get, inlib_swig_py.text_style_y_orientation_set)
    rotated = _swig_property(inlib_swig_py.text_style_rotated_get, inlib_swig_py.text_style_rotated_set)
    line_width = _swig_property(inlib_swig_py.text_style_line_width_get, inlib_swig_py.text_style_line_width_set)
    line_pattern = _swig_property(inlib_swig_py.text_style_line_pattern_get, inlib_swig_py.text_style_line_pattern_set)
    enforced = _swig_property(inlib_swig_py.text_style_enforced_get, inlib_swig_py.text_style_enforced_set)
    translation = _swig_property(inlib_swig_py.text_style_translation_get, inlib_swig_py.text_style_translation_set)
    front_face = _swig_property(inlib_swig_py.text_style_front_face_get, inlib_swig_py.text_style_front_face_set)
    def copy(*args): return inlib_swig_py.text_style_copy(*args)
    def s_cls(*args): return inlib_swig_py.text_style_s_cls(*args)
    __swig_destroy__ = inlib_swig_py.delete_text_style
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_text_style(*args)
        try: self.this.append(this)
        except: self.this = this
    def from_string(*args): return inlib_swig_py.text_style_from_string(*args)
text_style_swigregister = inlib_swig_py.text_style_swigregister
text_style_swigregister(text_style)

class line_style(node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.line_style_s_class)
    check_class_name = staticmethod(inlib_swig_py.line_style_check_class_name)
    def cast(*args): return inlib_swig_py.line_style_cast(*args)
    visible = _swig_property(inlib_swig_py.line_style_visible_get, inlib_swig_py.line_style_visible_set)
    color = _swig_property(inlib_swig_py.line_style_color_get, inlib_swig_py.line_style_color_set)
    width = _swig_property(inlib_swig_py.line_style_width_get, inlib_swig_py.line_style_width_set)
    pattern = _swig_property(inlib_swig_py.line_style_pattern_get, inlib_swig_py.line_style_pattern_set)
    def copy(*args): return inlib_swig_py.line_style_copy(*args)
    def s_cls(*args): return inlib_swig_py.line_style_s_cls(*args)
    __swig_destroy__ = inlib_swig_py.delete_line_style
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_line_style(*args)
        try: self.this.append(this)
        except: self.this = this
    def from_string(*args): return inlib_swig_py.line_style_from_string(*args)
line_style_swigregister = inlib_swig_py.line_style_swigregister
line_style_swigregister(line_style)
line_style_s_class = inlib_swig_py.line_style_s_class
line_style_check_class_name = inlib_swig_py.line_style_check_class_name

class pick_element(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_pick_element
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_pick_element(*args)
        try: self.this.append(this)
        except: self.this = this
    def node(*args): return inlib_swig_py.pick_element_node(*args)
    def zs(*args): return inlib_swig_py.pick_element_zs(*args)
    def ws(*args): return inlib_swig_py.pick_element_ws(*args)
    def state(*args): return inlib_swig_py.pick_element_state(*args)
pick_element_swigregister = inlib_swig_py.pick_element_swigregister
pick_element_swigregister(pick_element)

class pick_action(matrix_action,primitive_visitor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_pick_action
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_pick_action(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return inlib_swig_py.pick_action_reset(*args)
    def set_area(*args): return inlib_swig_py.pick_action_set_area(*args)
    def set_stop_at_first(*args): return inlib_swig_py.pick_action_set_stop_at_first(*args)
    def stop_at_first(*args): return inlib_swig_py.pick_action_stop_at_first(*args)
    def set_done(*args): return inlib_swig_py.pick_action_set_done(*args)
    def done(*args): return inlib_swig_py.pick_action_done(*args)
    def set_node(*args): return inlib_swig_py.pick_action_set_node(*args)
    def node(*args): return inlib_swig_py.pick_action_node(*args)
    def add_pick(*args): return inlib_swig_py.pick_action_add_pick(*args)
    def picks(*args): return inlib_swig_py.pick_action_picks(*args)
    def dump_picks(*args): return inlib_swig_py.pick_action_dump_picks(*args)
    def closest_pick(*args): return inlib_swig_py.pick_action_closest_pick(*args)
    def zs(*args): return inlib_swig_py.pick_action_zs(*args)
    def ws(*args): return inlib_swig_py.pick_action_ws(*args)
    def add__primitive_xy(*args): return inlib_swig_py.pick_action_add__primitive_xy(*args)
    def add__line_strip_xy(*args): return inlib_swig_py.pick_action_add__line_strip_xy(*args)
    def add__lines_xy(*args): return inlib_swig_py.pick_action_add__lines_xy(*args)
    def add__primitive(*args): return inlib_swig_py.pick_action_add__primitive(*args)
    def add__line_strip(*args): return inlib_swig_py.pick_action_add__line_strip(*args)
    def add__triangles(*args): return inlib_swig_py.pick_action_add__triangles(*args)
    def add__lines(*args): return inlib_swig_py.pick_action_add__lines(*args)
    def is_inside(*args): return inlib_swig_py.pick_action_is_inside(*args)
    def intersect_line(*args): return inlib_swig_py.pick_action_intersect_line(*args)
pick_action_swigregister = inlib_swig_py.pick_action_swigregister
pick_action_swigregister(pick_action)

class event(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def cast(*args): return inlib_swig_py.event_cast(*args)
    def copy(*args): return inlib_swig_py.event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_event
    __del__ = lambda self : None;
event_swigregister = inlib_swig_py.event_swigregister
event_swigregister(event)

class devrot_event(event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.devrot_event_s_class)
    check_class_name = staticmethod(inlib_swig_py.devrot_event_check_class_name)
    def cast(*args): return inlib_swig_py.devrot_event_cast(*args)
    def copy(*args): return inlib_swig_py.devrot_event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_devrot_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_devrot_event(*args)
        try: self.this.append(this)
        except: self.this = this
devrot_event_swigregister = inlib_swig_py.devrot_event_swigregister
devrot_event_swigregister(devrot_event)
devrot_event_s_class = inlib_swig_py.devrot_event_s_class
devrot_event_check_class_name = inlib_swig_py.devrot_event_check_class_name

class size_event(event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.size_event_s_class)
    check_class_name = staticmethod(inlib_swig_py.size_event_check_class_name)
    def cast(*args): return inlib_swig_py.size_event_cast(*args)
    def copy(*args): return inlib_swig_py.size_event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_size_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_size_event(*args)
        try: self.this.append(this)
        except: self.this = this
    def old_width(*args): return inlib_swig_py.size_event_old_width(*args)
    def old_height(*args): return inlib_swig_py.size_event_old_height(*args)
    def width(*args): return inlib_swig_py.size_event_width(*args)
    def height(*args): return inlib_swig_py.size_event_height(*args)
size_event_swigregister = inlib_swig_py.size_event_swigregister
size_event_swigregister(size_event)
size_event_s_class = inlib_swig_py.size_event_s_class
size_event_check_class_name = inlib_swig_py.size_event_check_class_name

class down_event(event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.down_event_s_class)
    check_class_name = staticmethod(inlib_swig_py.down_event_check_class_name)
    def cast(*args): return inlib_swig_py.down_event_cast(*args)
    def copy(*args): return inlib_swig_py.down_event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_down_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_down_event(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return inlib_swig_py.down_event_x(*args)
    def y(*args): return inlib_swig_py.down_event_y(*args)
down_event_swigregister = inlib_swig_py.down_event_swigregister
down_event_swigregister(down_event)
down_event_s_class = inlib_swig_py.down_event_s_class
down_event_check_class_name = inlib_swig_py.down_event_check_class_name

class up_event(event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.up_event_s_class)
    check_class_name = staticmethod(inlib_swig_py.up_event_check_class_name)
    def cast(*args): return inlib_swig_py.up_event_cast(*args)
    def copy(*args): return inlib_swig_py.up_event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_up_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_up_event(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return inlib_swig_py.up_event_x(*args)
    def y(*args): return inlib_swig_py.up_event_y(*args)
up_event_swigregister = inlib_swig_py.up_event_swigregister
up_event_swigregister(up_event)
up_event_s_class = inlib_swig_py.up_event_s_class
up_event_check_class_name = inlib_swig_py.up_event_check_class_name

class move_event(event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.move_event_s_class)
    check_class_name = staticmethod(inlib_swig_py.move_event_check_class_name)
    def cast(*args): return inlib_swig_py.move_event_cast(*args)
    def copy(*args): return inlib_swig_py.move_event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_move_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_move_event(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(*args): return inlib_swig_py.move_event_x(*args)
    def y(*args): return inlib_swig_py.move_event_y(*args)
    def ox(*args): return inlib_swig_py.move_event_ox(*args)
    def oy(*args): return inlib_swig_py.move_event_oy(*args)
    def is_touch(*args): return inlib_swig_py.move_event_is_touch(*args)
move_event_swigregister = inlib_swig_py.move_event_swigregister
move_event_swigregister(move_event)
move_event_s_class = inlib_swig_py.move_event_s_class
move_event_check_class_name = inlib_swig_py.move_event_check_class_name

class anim_event(event):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.anim_event_s_class)
    check_class_name = staticmethod(inlib_swig_py.anim_event_check_class_name)
    def cast(*args): return inlib_swig_py.anim_event_cast(*args)
    def copy(*args): return inlib_swig_py.anim_event_copy(*args)
    __swig_destroy__ = inlib_swig_py.delete_anim_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_anim_event(*args)
        try: self.this.append(this)
        except: self.this = this
    def seconds(*args): return inlib_swig_py.anim_event_seconds(*args)
    def micro_seconds(*args): return inlib_swig_py.anim_event_micro_seconds(*args)
    def set_some_found(*args): return inlib_swig_py.anim_event_set_some_found(*args)
    def some_found(*args): return inlib_swig_py.anim_event_some_found(*args)
anim_event_swigregister = inlib_swig_py.anim_event_swigregister
anim_event_swigregister(anim_event)
anim_event_s_class = inlib_swig_py.anim_event_s_class
anim_event_check_class_name = inlib_swig_py.anim_event_check_class_name

class event_action(matrix_action):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_event_action
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_event_action(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return inlib_swig_py.event_action_reset(*args)
    def get_event(*args): return inlib_swig_py.event_action_get_event(*args)
    def set_done(*args): return inlib_swig_py.event_action_set_done(*args)
    def done(*args): return inlib_swig_py.event_action_done(*args)
    def set_do_switch_children(*args): return inlib_swig_py.event_action_set_do_switch_children(*args)
    def do_switch_children(*args): return inlib_swig_py.event_action_do_switch_children(*args)
event_action_swigregister = inlib_swig_py.event_action_swigregister
event_action_swigregister(event_action)

class group(node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s_class = staticmethod(inlib_swig_py.group_s_class)
    check_class_name = staticmethod(inlib_swig_py.group_check_class_name)
    def cast(*args): return inlib_swig_py.group_cast(*args)
    def copy(*args): return inlib_swig_py.group_copy(*args)
    def s_cls(*args): return inlib_swig_py.group_s_cls(*args)
    def render(*args): return inlib_swig_py.group_render(*args)
    def pick(*args): return inlib_swig_py.group_pick(*args)
    def bbox(*args): return inlib_swig_py.group_bbox(*args)
    def event(*args): return inlib_swig_py.group_event(*args)
    def search(*args): return inlib_swig_py.group_search(*args)
    def write(*args): return inlib_swig_py.group_write(*args)
    __swig_destroy__ = inlib_swig_py.delete_group
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_group(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return inlib_swig_py.group_add(*args)
    def set(*args): return inlib_swig_py.group_set(*args)
    def replace(*args): return inlib_swig_py.group_replace(*args)
    def swap(*args): return inlib_swig_py.group_swap(*args)
    def rsearch_from(*args): return inlib_swig_py.group_rsearch_from(*args)
    def remove(*args): return inlib_swig_py.group_remove(*args)
    def delete_from(*args): return inlib_swig_py.group_delete_from(*args)
    def transfer(*args): return inlib_swig_py.group_transfer(*args)
    def clear(*args): return inlib_swig_py.group_clear(*args)
    def raw_clear(*args): return inlib_swig_py.group_raw_clear(*args)
    def size(*args): return inlib_swig_py.group_size(*args)
    def empty(*args): return inlib_swig_py.group_empty(*args)
    def children(*args): return inlib_swig_py.group_children(*args)
group_swigregister = inlib_swig_py.group_swigregister
group_swigregister(group)
group_s_class = inlib_swig_py.group_s_class
group_check_class_name = inlib_swig_py.group_check_class_name



