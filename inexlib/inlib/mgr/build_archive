
# to be sourced from another build script.

if [ "${libname}" = "" ] ; then
  echo "inlib/mgr/build_archive : variable libname not defined."
  exit
fi

if [ "${build_path}" = "" ] ; then
  echo "inlib/mgr/build_archive : build_path not defined."
  exit
fi

if [ ! -d ${build_path} ] ; then
  echo "inlib/mgr/build_archive : ${build_path} does not exist."
  exit
fi

if [ "${ar_cmd}" = "" ] ; then
  echo "inlib/mgr/build_archive : ar_cmd not defined."
  exit
fi

#if [ "${objs}" = "" ] ; then
#  /bin/rm -f tmp_0
#  find ${build_path} -name '*.o' -print > tmp_0
#  for file in $(cat tmp_0) ; do objs="${objs} ${file}"; done
#  /bin/rm -f tmp_0
#fi

if [ "${objs}" = "" ] ; then
  echo "inlib/mgr/build_archive : no objs."
else

  file_a="${build_path}/${libname}.a"
  /bin/rm -f ${file_a}

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_archive : do archive ${file_a} ..."
  fi

  if [ ${build_visual} = "yes" ] ; then

    /bin/rm -f tmp_0
    #find ${build_path} -name '*.o' -print > tmp_0
    for file in ${objs} ; do echo ${objs} >> tmp_0; done

    lib.exe /nologo /machine:ix86 /out:${file_a} @tmp_0

    /bin/rm -f tmp_0

  else

    ${ar_cmd} -cr ${file_a} ${objs}

    # Android plugin wants ranlib on the .a :
    ${ranlib_cmd} ${file_a}

  fi

  if [ ${build_shlib} = "yes" ] ; then
    if [ "${build_sdk_ios}" = "yes" ] ; then
      echo "inlib/mgr/build_archive : sdk_ios : we do not build shared lib."

    elif [ "${build_sdk_iossim}" = "yes" ] ; then
      echo "inlib/mgr/build_archive : sdk_iossim : we do not build shared lib."

    elif [ ${build_visual} = "yes" ] ; then
      echo "inlib/mgr/build_archive : visual : can't build shared lib."

    elif [ ${build_sdk_android} = "yes" ] ; then
      echo "inlib/mgr/build_archive : android : we do not build shared lib."

    else # Mac, Linux :
      file_sh="${build_path}/${libname}.${shex}"
      /bin/rm -f ${file_sh}
      if [ ${build_verbose} = yes ] ; then
        echo "inlib/mgr/build_archive : do shlib ${file_sh} ..."
      fi
      /bin/rm -f ${file_sh}
      eval ${cpp_shlib_builder} -o ${file_sh} ${objs}
    fi
  fi

fi
