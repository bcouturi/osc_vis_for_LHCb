
cc_compiler=cc_not_defined

ccflags=
mflags=

if [ ${build_gnu} = "yes" ] ; then
  compiler_kind=gnu
  cc_compiler=cc
  cc_linker=cc

elif [ ${build_intel} = "yes" ] ; then
  compiler_kind=intel
  cc_compiler=icc
  cc_linker=icc

elif [ ${build_clang} = "yes" ] ; then
  compiler_kind=clang
  cc_compiler=clang
  cc_linker=clang

elif [ ${build_sdk_mac} = "yes" ] ; then
  compiler_kind=sdk_mac
  cc_compiler=clang
  cc_linker=clang

  macosx_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
  if [ ! -d "${macosx_sdk}" ] ; then
    echo 'MacOSX sdk not found.'
    exit
  fi

  macosx_target=10.6

  ccflags="${ccflags} -isysroot ${macosx_sdk}"
  ccflags="${ccflags} -mmacosx-version-min=${macosx_target}"

  cc_linker_flags="${cc_linker_flags} -isysroot ${macosx_sdk}"

  if [ `uname -p` = x86_64 ] ; then
    ccflags="${ccflags} -arch x86_64"
    cc_linker_flags="${cc_linker_flags} -arch x86_64"
  fi

  #LANG=en_US.US-ASCII
  #export LANG

  MACOSX_DEPLOYMENT_TARGET=${macosx_target}
  export MACOSX_DEPLOYMENT_TARGET

elif [ ${build_sdk_ios} = "yes" ] ; then
  compiler_kind=sdk_ios
  cc_compiler=clang
  cc_linker=clang

  ios_vers=5.0
  ios_sdk="/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS${ios_vers}.sdk"
  if [ ! -e "${ios_sdk}" ] ; then
    echo 'iOS sdk not found.'
    exit
  fi

  ios_target=3.2

  cc_compiler="${cc_compiler} -arch armv7 -pipe -isysroot ${ios_sdk}"

  cc_linker="${cc_linker} -arch armv7 -isysroot ${ios_sdk}"
  cc_linker="${cc_linker} -miphoneos-version-min=${ios_target}"

  ccflags="${ccflags} -miphoneos-version-min=${ios_target}"

  mflags="${mflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

  LANG=en_US.US-ASCII
  export LANG

  IPHONEOS_DEPLOYMENT_TARGET=${ios_target}
  export IPHONEOS_DEPLOYMENT_TARGET

elif [ ${build_sdk_iossim} = "yes" ] ; then
  compiler_kind=sdk_iossim
  cc_compiler=clang
  cc_linker=clang

  ios_vers=5.0
  ios_sdk="/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator${ios_vers}.sdk"
  if [ ! -e "${ios_sdk}" ] ; then
    echo 'iOS sdk not found.'
    exit
  fi

  cc_compiler="${cc_compiler} -arch i386 -pipe -isysroot ${ios_sdk}"

  cc_linker="${cc_linker} -arch i386 -isysroot ${ios_sdk}"
  cc_linker="${cc_linker} -miphoneos-version-min=${ios_vers}"

  mflags="${mflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"
  ccflags="${ccflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"

elif [ ${build_visual} = "yes" ] ; then
  compiler_kind=visual
  cc_compiler=cl.exe

  if [ "${MSVCDir}" != "" ] ;  then
    # Visual Studio 2003
    cc_linker="`cygpath \"${MSVCDir}\"/bin/link.exe`"
  else
    if [ "${VCINSTALLDIR}" != "" ] ;  then
      # Visual Studio 9.0
      cc_linker="`cygpath \"${VCINSTALLDIR}\"/bin/link.exe`"
    else
      echo "env variables MSVCDir and VCINSTALLDIR not defined. You have to setup Visual."
      exit
    fi  
  fi  
  #echo ${cc_linker}
  cc_linker=`echo ${cc_linker} | sed -e 's: :\\\ :g'`

  cc_linker="${cc_linker} /nologo /DWIN32 /MD /O2 /W3" 

elif [ ${build_sdk_android} = "yes" ] ; then
  compiler_kind=sdk_android

  sdk_home=/usr/local/Android/android-sdk_r16-macosx
  ndk_home=/usr/local/Android/android-ndk-r7

  ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin

  cc_compiler=${ndk_bin}/arm-linux-androideabi-gcc

 #ccflags="${ccflags} -MMD -MP -MF <some .d path>"
 #ccflags="${ccflags} -O2 -DNDEBUG -g"
 #ccflags="${ccflags} -Ijni"
 #ccflags="${ccflags} -I${ndk_home}/sources/cxx-stl/system/include"

  ccflags="${ccflags} -fpic"
  ccflags="${ccflags} -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__"
  ccflags="${ccflags} -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__"
  ccflags="${ccflags} -Wno-psabi -march=armv5te -mtune=xscale -msoft-float"
  ccflags="${ccflags} -mthumb"
  ccflags="${ccflags} -Os"
  ccflags="${ccflags} -Wa,--noexecstack"
  ccflags="${ccflags} -ffunction-sections -funwind-tables -fstack-protector"
  ccflags="${ccflags} -fomit-frame-pointer -fno-strict-aliasing"
  ccflags="${ccflags} -finline-limit=64"
  ccflags="${ccflags} -I${ndk_home}/platforms/android-8/arch-arm/usr/include"
  ccflags="${ccflags} -DANDROID"

  cc_linker=${cc_compiler}

else
  echo 'no compiler given.'
  exit
fi

if [ ${build_visual} = "yes" ] ; then

  ccflags="${ccflags} /nologo /DWIN32 /MD /O2 /W3" 

  ccflags="${ccflags} /wd4996 /wd4267 /wd4244"

else

  if [ ${build_debug} = "yes" ] ; then
    ccflags="${ccflags} -g"
  else
    ccflags="${ccflags} -O2"
  fi

  if [ ${build_m32} = yes ] ; then ccflags="${ccflags} -m32"; fi

fi

# NOTE : if not using plugin at all -fPIC is not needed,
#        but we have some in osc software.
if [ `uname` = "Linux" ] ; then ccflags="${ccflags} -fPIC";fi

ccflags0="${ccflags}"
