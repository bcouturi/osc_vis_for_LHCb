// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_osc_env
#define inlib_osc_env

#include "system"
#include "sep"

namespace inlib {
namespace osc {

inline bool set_env(std::ostream& a_out){
  
  std::string OSC_HOME_DIR;
  if(!inlib::getenv("OSC_HOME_DIR",OSC_HOME_DIR)) {
    a_out << "inlib::osc::set_env :"
          << " Environment variable OSC_HOME_DIR not defined."
          << " You have to setup OpenScientist by sourcing "
          << " the setup script, found in the distribution,"
          << " corresponding to your kind of shell."
          << std::endl;
    return false;
  }

  std::string fs = inlib::sep();

  //NOTE : ONXROOT is used to find <ref> common .onx files.
  //       Also used in OnX/examples.
  std::string ONXROOT = OSC_HOME_DIR + fs + "Resources" + fs + "OnX";        
  if(!inlib::putenv("ONXROOT",ONXROOT)) return false;

 {std::vector<std::string> vals;
  vals.push_back(OSC_HOME_DIR+fs+"Resources"+fs+"HEPVis"+fs+"fonts");
  if(!inlib::env_path_append("TTFPATH",vals)) return false;}
  
#ifdef WIN32
  //inlib::putenv("ONX_HAS_PYTHON","no")
#else
#ifdef __APPLE__
  inlib::putenv("ONX_HAS_PYTHON","yes");
#else  // Linux
  //inlib::putenv("ONX_HAS_PYTHON","no")
#endif
#endif

 {std::vector<std::string> vals;
  vals.push_back
    (OSC_HOME_DIR+fs+"Resources"+fs+"OnX"+fs+"scripts"+fs+"Python");
  vals.push_back(OSC_HOME_DIR+fs+"Resources"+fs+"CoinPython"+fs+"scripts");
  vals.push_back
    (OSC_HOME_DIR+fs+"Resources"+fs+"HEPVis"+fs+"scripts"+fs+"Python");
  vals.push_back(OSC_HOME_DIR+fs+"bin");
  if(!inlib::env_path_append("PYTHONPATH",vals)) return false;}

  return true;
}

}}

#endif
