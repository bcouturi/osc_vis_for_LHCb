// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_bmf
#define inlib_sg_bmf

// mf for multiple field.

#include "field"

#include "../vdata"

namespace inlib {
namespace sg {

template <class T>
class bmf : public field {
  // bmf is intended to have no implementation of :
  //   virtual bool write(io::iwbuf&)  
  //   virtual bool read(io::irbuf&)  
public:
  bmf(){}
  //bmf(const T& a_value){m_values.push_back(a_value);}
  virtual ~bmf(){m_values.clear();}
public:
  bmf(const bmf& a_from):field(a_from),m_values(a_from.m_values){}
  bmf& operator=(const bmf& a_from){
    field::operator=(a_from);
    if(a_from.m_values!=m_values) m_touched = true;
    m_values = a_from.m_values;
    return *this;
  }
public:
  bmf& operator=(const std::vector<T>& a_from){
    if(a_from!=m_values) m_touched = true;
    m_values = a_from;
    return *this;
  }
  bool operator==(const bmf& a_from) const {
    return m_values==a_from.m_values;
  }
  bool operator!=(const bmf& a_from) const { 
    return !operator==(a_from);
  }
  const T& operator[](unsigned int a_index) const {
    //WARNING : no check is done on a_index.
    return m_values[a_index];    
  }
  T& operator[](unsigned int a_index) {
    //WARNING : no check is done on a_index.
    return m_values[a_index];    
  }
public:
  //unsigned int number() const {return m_values.size();}
  unsigned int size() const {return m_values.size();}
  bool empty() const {return m_values.empty();}
  const std::vector<T>& values() const {return m_values;}
  std::vector<T>& values() {return m_values;}
  void add(const T& a_value) {
    m_values.push_back(a_value);
    m_touched = true;
  }
  void add(const std::vector<T>& a_vals) {
    if(a_vals.empty()) return;
    typedef typename std::vector<T>::const_iterator const_it_t;
    for(const_it_t it=a_vals.begin();it!=a_vals.end();++it){
      m_values.push_back(*it);
    }
    m_touched = true;
  }
  typedef typename std::vector<T>::iterator it_t;
  void insert(const it_t& a_it,const T& a_value) {
    m_values.insert(a_it,a_value);
    m_touched = true;
  }
  bool set_value(unsigned int a_index,const T& a_value) {
    if(a_index>=m_values.size()) return false;
    if(m_values[a_index]!=a_value) m_touched = true;
    m_values[a_index] = a_value;
    return true;
  }
  bool get_value(unsigned int a_index,T& a_value) {
    if(a_index>=m_values.size()) {a_value=T();return false;}
    a_value = m_values[a_index];
    return true;
  }
  void clear() {
    if(m_values.size()) m_touched = true;
    m_values.clear();
  }

  void set_values(const std::vector<T>& a_values) {
    if(a_values!=m_values) m_touched = true;
    m_values = a_values;
  }
protected:
  std::vector<T> m_values;
};

}}

#endif
