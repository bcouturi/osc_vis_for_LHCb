// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_field
#define inlib_sg_field

#include <string>
#include <ostream>

#ifdef INLIB_MEM
#include "../mem"
#endif

namespace inlib {
namespace io {
class iwbuf;
class irbuf;
}}

namespace inlib {
namespace sg {

class field {
  static const std::string& s_class() {
    static const std::string s_v("inlib::sg::field");
    return s_v;
  }
/*
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<field>(this,a_class)) {return p;}
    else return 0;
  }
  virtual bool equal(const field&) const {return false;}
*/
public:
  virtual bool write(io::iwbuf&) = 0;
  virtual bool read(io::irbuf&) = 0;
  virtual bool dump(std::ostream&) = 0;
protected:
  field():m_touched(true){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~field(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  field(const field&):m_touched(true){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  field& operator=(const field&){m_touched=false;return *this;}
public:
  void touch() {m_touched = true;}
  bool touched() const {return m_touched;}
  void reset_touched() {m_touched = false;}
protected:
  bool m_touched;
};

}}

#endif
