# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import CoinXt_SWIG_Python
else:
    import CoinXt_SWIG_Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class charp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        CoinXt_SWIG_Python.charp_swiginit(self, CoinXt_SWIG_Python.new_charp())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_charp

    def assign(self, value):
        return CoinXt_SWIG_Python.charp_assign(self, value)

    def value(self):
        return CoinXt_SWIG_Python.charp_value(self)

    def cast(self):
        return CoinXt_SWIG_Python.charp_cast(self)

    @staticmethod
    def frompointer(t):
        return CoinXt_SWIG_Python.charp_frompointer(t)

# Register charp in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.charp_swigregister(charp)
cast = CoinXt_SWIG_Python.cast

def charp_frompointer(t):
    return CoinXt_SWIG_Python.charp_frompointer(t)

class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        CoinXt_SWIG_Python.intp_swiginit(self, CoinXt_SWIG_Python.new_intp())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_intp

    def assign(self, value):
        return CoinXt_SWIG_Python.intp_assign(self, value)

    def value(self):
        return CoinXt_SWIG_Python.intp_value(self)

    def cast(self):
        return CoinXt_SWIG_Python.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return CoinXt_SWIG_Python.intp_frompointer(t)

# Register intp in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.intp_swigregister(intp)

def intp_frompointer(t):
    return CoinXt_SWIG_Python.intp_frompointer(t)

class longp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        CoinXt_SWIG_Python.longp_swiginit(self, CoinXt_SWIG_Python.new_longp())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_longp

    def assign(self, value):
        return CoinXt_SWIG_Python.longp_assign(self, value)

    def value(self):
        return CoinXt_SWIG_Python.longp_value(self)

    def cast(self):
        return CoinXt_SWIG_Python.longp_cast(self)

    @staticmethod
    def frompointer(t):
        return CoinXt_SWIG_Python.longp_frompointer(t)

# Register longp in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.longp_swigregister(longp)

def longp_frompointer(t):
    return CoinXt_SWIG_Python.longp_frompointer(t)

class floatp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        CoinXt_SWIG_Python.floatp_swiginit(self, CoinXt_SWIG_Python.new_floatp())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_floatp

    def assign(self, value):
        return CoinXt_SWIG_Python.floatp_assign(self, value)

    def value(self):
        return CoinXt_SWIG_Python.floatp_value(self)

    def cast(self):
        return CoinXt_SWIG_Python.floatp_cast(self)

    @staticmethod
    def frompointer(t):
        return CoinXt_SWIG_Python.floatp_frompointer(t)

# Register floatp in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.floatp_swigregister(floatp)

def floatp_frompointer(t):
    return CoinXt_SWIG_Python.floatp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        CoinXt_SWIG_Python.doublep_swiginit(self, CoinXt_SWIG_Python.new_doublep())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_doublep

    def assign(self, value):
        return CoinXt_SWIG_Python.doublep_assign(self, value)

    def value(self):
        return CoinXt_SWIG_Python.doublep_value(self)

    def cast(self):
        return CoinXt_SWIG_Python.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return CoinXt_SWIG_Python.doublep_frompointer(t)

# Register doublep in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.doublep_swigregister(doublep)

def doublep_frompointer(t):
    return CoinXt_SWIG_Python.doublep_frompointer(t)

FALSE = CoinXt_SWIG_Python.FALSE
TRUE = CoinXt_SWIG_Python.TRUE
HAVE_INTTYPES_H = CoinXt_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = CoinXt_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = CoinXt_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = CoinXt_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = CoinXt_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = CoinXt_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = CoinXt_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = CoinXt_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = CoinXt_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = CoinXt_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = CoinXt_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = CoinXt_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = CoinXt_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = CoinXt_SWIG_Python.HAVE_UINTPTR_T
M_E = CoinXt_SWIG_Python.M_E
M_LOG2E = CoinXt_SWIG_Python.M_LOG2E
M_LOG10E = CoinXt_SWIG_Python.M_LOG10E
M_LN2 = CoinXt_SWIG_Python.M_LN2
M_LN10 = CoinXt_SWIG_Python.M_LN10
M_PI = CoinXt_SWIG_Python.M_PI
M_TWOPI = CoinXt_SWIG_Python.M_TWOPI
M_PI_2 = CoinXt_SWIG_Python.M_PI_2
M_PI_4 = CoinXt_SWIG_Python.M_PI_4
M_3PI_4 = CoinXt_SWIG_Python.M_3PI_4
M_SQRTPI = CoinXt_SWIG_Python.M_SQRTPI
M_1_PI = CoinXt_SWIG_Python.M_1_PI
M_2_PI = CoinXt_SWIG_Python.M_2_PI
M_2_SQRTPI = CoinXt_SWIG_Python.M_2_SQRTPI
M_SQRT2 = CoinXt_SWIG_Python.M_SQRT2
M_SQRT1_2 = CoinXt_SWIG_Python.M_SQRT1_2
M_LN2LO = CoinXt_SWIG_Python.M_LN2LO
M_LN2HI = CoinXt_SWIG_Python.M_LN2HI
M_SQRT3 = CoinXt_SWIG_Python.M_SQRT3
M_IVLN10 = CoinXt_SWIG_Python.M_IVLN10
M_LOG2_E = CoinXt_SWIG_Python.M_LOG2_E
M_INVLN2 = CoinXt_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = CoinXt_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = CoinXt_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = CoinXt_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = CoinXt_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = CoinXt_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = CoinXt_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbDict_swiginit(self, CoinXt_SWIG_Python.new_SbDict(*args))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbDict

    def applyToAll(self, *args):
        return CoinXt_SWIG_Python.SbDict_applyToAll(self, *args)

    def clear(self):
        return CoinXt_SWIG_Python.SbDict_clear(self)

    def enter(self, key, value):
        return CoinXt_SWIG_Python.SbDict_enter(self, key, value)

    def find(self, key, value):
        return CoinXt_SWIG_Python.SbDict_find(self, key, value)

    def makePList(self, keys, values):
        return CoinXt_SWIG_Python.SbDict_makePList(self, keys, values)

    def remove(self, key):
        return CoinXt_SWIG_Python.SbDict_remove(self, key)

    def setHashingFunction(self, func):
        return CoinXt_SWIG_Python.SbDict_setHashingFunction(self, func)

# Register SbDict in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbDict_swigregister(SbDict)

class SoType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromName(name):
        return CoinXt_SWIG_Python.SoType_fromName(name)

    def getName(self):
        return CoinXt_SWIG_Python.SoType_getName(self)

    def getParent(self):
        return CoinXt_SWIG_Python.SoType_getParent(self)

    def isDerivedFrom(self, type):
        return CoinXt_SWIG_Python.SoType_isDerivedFrom(self, type)

    @staticmethod
    def getAllDerivedFrom(type, list):
        return CoinXt_SWIG_Python.SoType_getAllDerivedFrom(type, list)

    def canCreateInstance(self):
        return CoinXt_SWIG_Python.SoType_canCreateInstance(self)

    def getData(self):
        return CoinXt_SWIG_Python.SoType_getData(self)

    def getKey(self):
        return CoinXt_SWIG_Python.SoType_getKey(self)

    def __eq__(self, type):
        return CoinXt_SWIG_Python.SoType___eq__(self, type)

    def __ne__(self, type):
        return CoinXt_SWIG_Python.SoType___ne__(self, type)

    def __lt__(self, type):
        return CoinXt_SWIG_Python.SoType___lt__(self, type)

    def __le__(self, type):
        return CoinXt_SWIG_Python.SoType___le__(self, type)

    def __ge__(self, type):
        return CoinXt_SWIG_Python.SoType___ge__(self, type)

    def __gt__(self, type):
        return CoinXt_SWIG_Python.SoType___gt__(self, type)

    @staticmethod
    def init():
        return CoinXt_SWIG_Python.SoType_init()

    @staticmethod
    def fromKey(key):
        return CoinXt_SWIG_Python.SoType_fromKey(key)

    @staticmethod
    def badType():
        return CoinXt_SWIG_Python.SoType_badType()

    def isBad(self):
        return CoinXt_SWIG_Python.SoType_isBad(self)

    def makeInternal(self):
        return CoinXt_SWIG_Python.SoType_makeInternal(self)

    def isInternal(self):
        return CoinXt_SWIG_Python.SoType_isInternal(self)

    @staticmethod
    def getNumTypes():
        return CoinXt_SWIG_Python.SoType_getNumTypes()

    def getInstantiationMethod(self):
        return CoinXt_SWIG_Python.SoType_getInstantiationMethod(self)

    def createInstance(self):
        return CoinXt_SWIG_Python.SoType_createInstance(self)

    def __init__(self):
        CoinXt_SWIG_Python.SoType_swiginit(self, CoinXt_SWIG_Python.new_SoType())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoType

# Register SoType in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoType_swigregister(SoType)

def SoType_fromName(name):
    return CoinXt_SWIG_Python.SoType_fromName(name)

def SoType_getAllDerivedFrom(type, list):
    return CoinXt_SWIG_Python.SoType_getAllDerivedFrom(type, list)

def SoType_init():
    return CoinXt_SWIG_Python.SoType_init()

def SoType_fromKey(key):
    return CoinXt_SWIG_Python.SoType_fromKey(key)

def SoType_badType():
    return CoinXt_SWIG_Python.SoType_badType()

def SoType_getNumTypes():
    return CoinXt_SWIG_Python.SoType_getNumTypes()

class SbVec2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbVec2s_swiginit(self, CoinXt_SWIG_Python.new_SbVec2s(*args))

    def dot(self, v):
        return CoinXt_SWIG_Python.SbVec2s_dot(self, v)

    def getValue(self):
        return CoinXt_SWIG_Python.SbVec2s_getValue(self)

    def negate(self):
        return CoinXt_SWIG_Python.SbVec2s_negate(self)

    def setValue(self, *args):
        return CoinXt_SWIG_Python.SbVec2s_setValue(self, *args)

    def __imul__(self, *args):
        return CoinXt_SWIG_Python.SbVec2s___imul__(self, *args)

    def __itruediv__(self, *args):
        return CoinXt_SWIG_Python.SbVec2s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return CoinXt_SWIG_Python.SbVec2s___iadd__(self, u)

    def __isub__(self, u):
        return CoinXt_SWIG_Python.SbVec2s___isub__(self, u)

    def __neg__(self):
        return CoinXt_SWIG_Python.SbVec2s___neg__(self)

    def output(self, fp):
        return CoinXt_SWIG_Python.SbVec2s_output(self, fp)

    def __add__(self, u):
        return CoinXt_SWIG_Python.SbVec2s___add__(self, u)

    def __sub__(self, u):
        return CoinXt_SWIG_Python.SbVec2s___sub__(self, u)

    def __mul__(self, d):
        return CoinXt_SWIG_Python.SbVec2s___mul__(self, d)

    def __rmul__(self, d):
        return CoinXt_SWIG_Python.SbVec2s___rmul__(self, d)

    def __div__(self, d):
        return CoinXt_SWIG_Python.SbVec2s___div__(self, d)

    def __eq__(self, u):
        return CoinXt_SWIG_Python.SbVec2s___eq__(self, u)

    def __nq__(self, u):
        return CoinXt_SWIG_Python.SbVec2s___nq__(self, u)

    def __getitem__(self, i):
        return CoinXt_SWIG_Python.SbVec2s___getitem__(self, i)

    def __setitem__(self, i, value):
        return CoinXt_SWIG_Python.SbVec2s___setitem__(self, i, value)
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbVec2s

# Register SbVec2s in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbPList_swiginit(self, CoinXt_SWIG_Python.new_SbPList(*args))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbPList

    def copy(self, l):
        return CoinXt_SWIG_Python.SbPList_copy(self, l)

    def fit(self):
        return CoinXt_SWIG_Python.SbPList_fit(self)

    def append(self, item):
        return CoinXt_SWIG_Python.SbPList_append(self, item)

    def find(self, item):
        return CoinXt_SWIG_Python.SbPList_find(self, item)

    def insert(self, item, insertbefore):
        return CoinXt_SWIG_Python.SbPList_insert(self, item, insertbefore)

    def removeItem(self, item):
        return CoinXt_SWIG_Python.SbPList_removeItem(self, item)

    def remove(self, index):
        return CoinXt_SWIG_Python.SbPList_remove(self, index)

    def removeFast(self, index):
        return CoinXt_SWIG_Python.SbPList_removeFast(self, index)

    def getLength(self):
        return CoinXt_SWIG_Python.SbPList_getLength(self)

    def truncate(self, length, fit=0):
        return CoinXt_SWIG_Python.SbPList_truncate(self, length, fit)

    def getArrayPtr(self, start=0):
        return CoinXt_SWIG_Python.SbPList_getArrayPtr(self, start)

    def __eq__(self, l):
        return CoinXt_SWIG_Python.SbPList___eq__(self, l)

    def __ne__(self, l):
        return CoinXt_SWIG_Python.SbPList___ne__(self, l)

    def get(self, index):
        return CoinXt_SWIG_Python.SbPList_get(self, index)

    def set(self, index, item):
        return CoinXt_SWIG_Python.SbPList_set(self, index, item)

    def __getitem__(self, i):
        return CoinXt_SWIG_Python.SbPList___getitem__(self, i)

    def __setitem__(self, i, val):
        return CoinXt_SWIG_Python.SbPList___setitem__(self, i, val)

    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]


# Register SbPList in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbIntList_swiginit(self, CoinXt_SWIG_Python.new_SbIntList(*args))

    def append(self, item):
        return CoinXt_SWIG_Python.SbIntList_append(self, item)

    def find(self, item):
        return CoinXt_SWIG_Python.SbIntList_find(self, item)

    def insert(self, item, addbefore):
        return CoinXt_SWIG_Python.SbIntList_insert(self, item, addbefore)

    def __setitem__(self, i, value):
        return CoinXt_SWIG_Python.SbIntList___setitem__(self, i, value)

    def __getitem__(self, i):
        return CoinXt_SWIG_Python.SbIntList___getitem__(self, i)

    def get(self, i):
        return CoinXt_SWIG_Python.SbIntList_get(self, i)
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbIntList

# Register SbIntList in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbString_swiginit(self, CoinXt_SWIG_Python.new_SbString(*args))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbString

    @staticmethod
    def hash(*args):
        return CoinXt_SWIG_Python.SbString_hash(*args)

    def getLength(self):
        return CoinXt_SWIG_Python.SbString_getLength(self)

    def makeEmpty(self, freeold=1):
        return CoinXt_SWIG_Python.SbString_makeEmpty(self, freeold)

    def getString(self):
        return CoinXt_SWIG_Python.SbString_getString(self)

    def getSubString(self, startidx, endidx=-1):
        return CoinXt_SWIG_Python.SbString_getSubString(self, startidx, endidx)

    def deleteSubString(self, startidx, endidx=-1):
        return CoinXt_SWIG_Python.SbString_deleteSubString(self, startidx, endidx)

    def addIntString(self, value):
        return CoinXt_SWIG_Python.SbString_addIntString(self, value)

    def __iadd__(self, *args):
        return CoinXt_SWIG_Python.SbString___iadd__(self, *args)

    def compareSubString(self, text, offset=0):
        return CoinXt_SWIG_Python.SbString_compareSubString(self, text, offset)

    def sprintf(self, formatstr):
        return CoinXt_SWIG_Python.SbString_sprintf(self, formatstr)

    def apply(self, func):
        return CoinXt_SWIG_Python.SbString_apply(self, func)

    def find(self, s):
        return CoinXt_SWIG_Python.SbString_find(self, s)

    def findAll(self, s, found):
        return CoinXt_SWIG_Python.SbString_findAll(self, s, found)

    def __eq__(self, *args):
        return CoinXt_SWIG_Python.SbString___eq__(self, *args)

    def __nq__(self, *args):
        return CoinXt_SWIG_Python.SbString___nq__(self, *args)

    def __getitem__(self, i):
        return CoinXt_SWIG_Python.SbString___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return CoinXt_SWIG_Python.SbString___repr__(self)

# Register SbString in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbString_swigregister(SbString)

def SbString_hash(*args):
    return CoinXt_SWIG_Python.SbString_hash(*args)

class SbName(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbName_swiginit(self, CoinXt_SWIG_Python.new_SbName(*args))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbName

    def getString(self):
        return CoinXt_SWIG_Python.SbName_getString(self)

    def getLength(self):
        return CoinXt_SWIG_Python.SbName_getLength(self)

    @staticmethod
    def isIdentStartChar(c):
        return CoinXt_SWIG_Python.SbName_isIdentStartChar(c)

    @staticmethod
    def isIdentChar(c):
        return CoinXt_SWIG_Python.SbName_isIdentChar(c)

    @staticmethod
    def isBaseNameStartChar(c):
        return CoinXt_SWIG_Python.SbName_isBaseNameStartChar(c)

    @staticmethod
    def isBaseNameChar(c):
        return CoinXt_SWIG_Python.SbName_isBaseNameChar(c)

    def __eq__(self, *args):
        return CoinXt_SWIG_Python.SbName___eq__(self, *args)

    def __nq__(self, *args):
        return CoinXt_SWIG_Python.SbName___nq__(self, *args)

    def __getitem__(self, i):
        return CoinXt_SWIG_Python.SbName___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return CoinXt_SWIG_Python.SbName___repr__(self)

# Register SbName in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbName_swigregister(SbName)

def SbName_isIdentStartChar(c):
    return CoinXt_SWIG_Python.SbName_isIdentStartChar(c)

def SbName_isIdentChar(c):
    return CoinXt_SWIG_Python.SbName_isIdentChar(c)

def SbName_isBaseNameStartChar(c):
    return CoinXt_SWIG_Python.SbName_isBaseNameStartChar(c)

def SbName_isBaseNameChar(c):
    return CoinXt_SWIG_Python.SbName_isBaseNameChar(c)

class SbTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        CoinXt_SWIG_Python.SbTime_swiginit(self, CoinXt_SWIG_Python.new_SbTime(*args))

    @staticmethod
    def getTimeOfDay():
        return CoinXt_SWIG_Python.SbTime_getTimeOfDay()

    def setToTimeOfDay(self):
        return CoinXt_SWIG_Python.SbTime_setToTimeOfDay(self)

    @staticmethod
    def zero():
        return CoinXt_SWIG_Python.SbTime_zero()

    @staticmethod
    def max():
        return CoinXt_SWIG_Python.SbTime_max()

    @staticmethod
    def maxTime():
        return CoinXt_SWIG_Python.SbTime_maxTime()

    def setValue(self, *args):
        return CoinXt_SWIG_Python.SbTime_setValue(self, *args)

    def setMsecValue(self, msec):
        return CoinXt_SWIG_Python.SbTime_setMsecValue(self, msec)

    def getValue(self, *args):
        return CoinXt_SWIG_Python.SbTime_getValue(self, *args)

    def getMsecValue(self):
        return CoinXt_SWIG_Python.SbTime_getMsecValue(self)

    def format(self, *args):
        return CoinXt_SWIG_Python.SbTime_format(self, *args)

    def formatDate(self, fmt=None):
        return CoinXt_SWIG_Python.SbTime_formatDate(self, fmt)

    def parsedate(self, date):
        return CoinXt_SWIG_Python.SbTime_parsedate(self, date)

    def __iadd__(self, tm):
        return CoinXt_SWIG_Python.SbTime___iadd__(self, tm)

    def __isub__(self, tm):
        return CoinXt_SWIG_Python.SbTime___isub__(self, tm)

    def __neg__(self):
        return CoinXt_SWIG_Python.SbTime___neg__(self)

    def __imul__(self, s):
        return CoinXt_SWIG_Python.SbTime___imul__(self, s)

    def __itruediv__(self, *args):
        return CoinXt_SWIG_Python.SbTime___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return CoinXt_SWIG_Python.SbTime___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, tm):
        return CoinXt_SWIG_Python.SbTime___mod__(self, tm)

    def __eq__(self, tm):
        return CoinXt_SWIG_Python.SbTime___eq__(self, tm)

    def __ne__(self, tm):
        return CoinXt_SWIG_Python.SbTime___ne__(self, tm)

    def __lt__(self, tm):
        return CoinXt_SWIG_Python.SbTime___lt__(self, tm)

    def __gt__(self, tm):
        return CoinXt_SWIG_Python.SbTime___gt__(self, tm)

    def __le__(self, tm):
        return CoinXt_SWIG_Python.SbTime___le__(self, tm)

    def __ge__(self, tm):
        return CoinXt_SWIG_Python.SbTime___ge__(self, tm)

    def output(self, fp):
        return CoinXt_SWIG_Python.SbTime_output(self, fp)

    def __add__(self, u):
        return CoinXt_SWIG_Python.SbTime___add__(self, u)

    def __sub__(self, u):
        return CoinXt_SWIG_Python.SbTime___sub__(self, u)

    def __mul__(self, d):
        return CoinXt_SWIG_Python.SbTime___mul__(self, d)

    def __rmul__(self, d):
        return CoinXt_SWIG_Python.SbTime___rmul__(self, d)

    def __div__(self, d):
        return CoinXt_SWIG_Python.SbTime___div__(self, d)
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SbTime

# Register SbTime in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay():
    return CoinXt_SWIG_Python.SbTime_getTimeOfDay()

def SbTime_zero():
    return CoinXt_SWIG_Python.SbTime_zero()

def SbTime_max():
    return CoinXt_SWIG_Python.SbTime_max()

def SbTime_maxTime():
    return CoinXt_SWIG_Python.SbTime_maxTime()

class SoEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        CoinXt_SWIG_Python.SoEvent_swiginit(self, CoinXt_SWIG_Python.new_SoEvent())
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoEvent

    def isOfType(self, type):
        return CoinXt_SWIG_Python.SoEvent_isOfType(self, type)

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoEvent_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoEvent_getTypeId(self)

    def setTime(self, t):
        return CoinXt_SWIG_Python.SoEvent_setTime(self, t)

    def getTime(self):
        return CoinXt_SWIG_Python.SoEvent_getTime(self)

    def setPosition(self, p):
        return CoinXt_SWIG_Python.SoEvent_setPosition(self, p)

    def getPosition(self, *args):
        return CoinXt_SWIG_Python.SoEvent_getPosition(self, *args)

    def getNormalizedPosition(self, vpRgn):
        return CoinXt_SWIG_Python.SoEvent_getNormalizedPosition(self, vpRgn)

    def setShiftDown(self, isDown):
        return CoinXt_SWIG_Python.SoEvent_setShiftDown(self, isDown)

    def wasShiftDown(self):
        return CoinXt_SWIG_Python.SoEvent_wasShiftDown(self)

    def setCtrlDown(self, isDown):
        return CoinXt_SWIG_Python.SoEvent_setCtrlDown(self, isDown)

    def wasCtrlDown(self):
        return CoinXt_SWIG_Python.SoEvent_wasCtrlDown(self)

    def setAltDown(self, isDown):
        return CoinXt_SWIG_Python.SoEvent_setAltDown(self, isDown)

    def wasAltDown(self):
        return CoinXt_SWIG_Python.SoEvent_wasAltDown(self)

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoEvent_initClass()

# Register SoEvent in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId():
    return CoinXt_SWIG_Python.SoEvent_getClassTypeId()

def SoEvent_initClass():
    return CoinXt_SWIG_Python.SoEvent_initClass()

class SoNotRec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONTAINER = CoinXt_SWIG_Python.SoNotRec_CONTAINER
    PARENT = CoinXt_SWIG_Python.SoNotRec_PARENT
    SENSOR = CoinXt_SWIG_Python.SoNotRec_SENSOR
    FIELD = CoinXt_SWIG_Python.SoNotRec_FIELD
    ENGINE = CoinXt_SWIG_Python.SoNotRec_ENGINE

    def __init__(self, notifbase):
        CoinXt_SWIG_Python.SoNotRec_swiginit(self, CoinXt_SWIG_Python.new_SoNotRec(notifbase))

    def setType(self, type):
        return CoinXt_SWIG_Python.SoNotRec_setType(self, type)

    def getBase(self):
        return CoinXt_SWIG_Python.SoNotRec_getBase(self)

    def getType(self):
        return CoinXt_SWIG_Python.SoNotRec_getType(self)

    def getPrevious(self):
        return CoinXt_SWIG_Python.SoNotRec_getPrevious(self)

    def setPrevious(self, prev):
        return CoinXt_SWIG_Python.SoNotRec_setPrevious(self, prev)

    def output(self, file):
        return CoinXt_SWIG_Python.SoNotRec_output(self, file)
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoNotRec

# Register SoNotRec in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        CoinXt_SWIG_Python.SoNotList_swiginit(self, CoinXt_SWIG_Python.new_SoNotList(*args))

    def append(self, *args):
        return CoinXt_SWIG_Python.SoNotList_append(self, *args)

    def setLastType(self, type):
        return CoinXt_SWIG_Python.SoNotList_setLastType(self, type)

    def getFirstRec(self):
        return CoinXt_SWIG_Python.SoNotList_getFirstRec(self)

    def getLastRec(self):
        return CoinXt_SWIG_Python.SoNotList_getLastRec(self)

    def getFirstRecAtNode(self):
        return CoinXt_SWIG_Python.SoNotList_getFirstRecAtNode(self)

    def getLastField(self):
        return CoinXt_SWIG_Python.SoNotList_getLastField(self)

    def getLastEngineOutput(self):
        return CoinXt_SWIG_Python.SoNotList_getLastEngineOutput(self)

    def getTimeStamp(self):
        return CoinXt_SWIG_Python.SoNotList_getTimeStamp(self)

    def output(self, *args):
        return CoinXt_SWIG_Python.SoNotList_output(self, *args)
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoNotList

# Register SoNotList in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoField

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoField_initClass()

    @staticmethod
    def initClasses():
        return CoinXt_SWIG_Python.SoField_initClasses()

    def setIgnored(self, ignore):
        return CoinXt_SWIG_Python.SoField_setIgnored(self, ignore)

    def isIgnored(self):
        return CoinXt_SWIG_Python.SoField_isIgnored(self)

    def setDefault(self, _def):
        return CoinXt_SWIG_Python.SoField_setDefault(self, _def)

    def isDefault(self):
        return CoinXt_SWIG_Python.SoField_isDefault(self)

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoField_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoField_getClassTypeId()

    def isOfType(self, type):
        return CoinXt_SWIG_Python.SoField_isOfType(self, type)

    def enableConnection(self, flag):
        return CoinXt_SWIG_Python.SoField_enableConnection(self, flag)

    def isConnectionEnabled(self):
        return CoinXt_SWIG_Python.SoField_isConnectionEnabled(self)

    def isConnectedFromEngine(self):
        return CoinXt_SWIG_Python.SoField_isConnectedFromEngine(self)

    def getConnectedEngine(self, master):
        return CoinXt_SWIG_Python.SoField_getConnectedEngine(self, master)

    def connectFrom(self, *args):
        return CoinXt_SWIG_Python.SoField_connectFrom(self, *args)

    def appendConnection(self, *args):
        return CoinXt_SWIG_Python.SoField_appendConnection(self, *args)

    def isConnectedFromField(self):
        return CoinXt_SWIG_Python.SoField_isConnectedFromField(self)

    def getConnectedField(self, master):
        return CoinXt_SWIG_Python.SoField_getConnectedField(self, master)

    def getNumConnections(self):
        return CoinXt_SWIG_Python.SoField_getNumConnections(self)

    def getForwardConnections(self, slavelist):
        return CoinXt_SWIG_Python.SoField_getForwardConnections(self, slavelist)

    def getConnections(self, masterlist):
        return CoinXt_SWIG_Python.SoField_getConnections(self, masterlist)

    def disconnect(self, *args):
        return CoinXt_SWIG_Python.SoField_disconnect(self, *args)

    def isConnected(self):
        return CoinXt_SWIG_Python.SoField_isConnected(self)

    def setContainer(self, cont):
        return CoinXt_SWIG_Python.SoField_setContainer(self, cont)

    def getContainer(self):
        return CoinXt_SWIG_Python.SoField_getContainer(self)

    def set(self, valuestring):
        return CoinXt_SWIG_Python.SoField_set(self, valuestring)

    def shouldWrite(self):
        return CoinXt_SWIG_Python.SoField_shouldWrite(self)

    def touch(self):
        return CoinXt_SWIG_Python.SoField_touch(self)

    def startNotify(self):
        return CoinXt_SWIG_Python.SoField_startNotify(self)

    def notify(self, nlist):
        return CoinXt_SWIG_Python.SoField_notify(self, nlist)

    def enableNotify(self, on):
        return CoinXt_SWIG_Python.SoField_enableNotify(self, on)

    def isNotifyEnabled(self):
        return CoinXt_SWIG_Python.SoField_isNotifyEnabled(self)

    def addAuditor(self, f, type):
        return CoinXt_SWIG_Python.SoField_addAuditor(self, f, type)

    def removeAuditor(self, f, type):
        return CoinXt_SWIG_Python.SoField_removeAuditor(self, f, type)

    def __eq__(self, f):
        return CoinXt_SWIG_Python.SoField___eq__(self, f)

    def __ne__(self, f):
        return CoinXt_SWIG_Python.SoField___ne__(self, f)

    def connectionStatusChanged(self, numconnections):
        return CoinXt_SWIG_Python.SoField_connectionStatusChanged(self, numconnections)

    def isReadOnly(self):
        return CoinXt_SWIG_Python.SoField_isReadOnly(self)

    def isSame(self, f):
        return CoinXt_SWIG_Python.SoField_isSame(self, f)

    def copyFrom(self, f):
        return CoinXt_SWIG_Python.SoField_copyFrom(self, f)

    def fixCopy(self, copyconnections):
        return CoinXt_SWIG_Python.SoField_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return CoinXt_SWIG_Python.SoField_referencesCopy(self)

    def copyConnection(self, fromfield):
        return CoinXt_SWIG_Python.SoField_copyConnection(self, fromfield)

    def read(self, _in, name):
        return CoinXt_SWIG_Python.SoField_read(self, _in, name)

    def write(self, out, name):
        return CoinXt_SWIG_Python.SoField_write(self, out, name)

    def countWriteRefs(self, out):
        return CoinXt_SWIG_Python.SoField_countWriteRefs(self, out)
    NORMAL_FIELD = CoinXt_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = CoinXt_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = CoinXt_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = CoinXt_SWIG_Python.SoField_EXPOSED_FIELD

    def setFieldType(self, type):
        return CoinXt_SWIG_Python.SoField_setFieldType(self, type)

    def getFieldType(self):
        return CoinXt_SWIG_Python.SoField_getFieldType(self)

    def getDirty(self):
        return CoinXt_SWIG_Python.SoField_getDirty(self)

    def setDirty(self, dirty):
        return CoinXt_SWIG_Python.SoField_setDirty(self, dirty)

    def evaluate(self):
        return CoinXt_SWIG_Python.SoField_evaluate(self)

    def get(self):
        return CoinXt_SWIG_Python.SoField_get(self)

# Register SoField in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoField_swigregister(SoField)

def SoField_initClass():
    return CoinXt_SWIG_Python.SoField_initClass()

def SoField_initClasses():
    return CoinXt_SWIG_Python.SoField_initClasses()

def SoField_getClassTypeId():
    return CoinXt_SWIG_Python.SoField_getClassTypeId()

class SoSField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoSField

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoSField_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoSField_getClassTypeId()

# Register SoSField in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoSField_swigregister(SoSField)

def SoSField_initClass():
    return CoinXt_SWIG_Python.SoSField_initClass()

def SoSField_getClassTypeId():
    return CoinXt_SWIG_Python.SoSField_getClassTypeId()

class SoMField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoMField

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoMField_getClassTypeId()

    def getNum(self):
        return CoinXt_SWIG_Python.SoMField_getNum(self)

    def setNum(self, num):
        return CoinXt_SWIG_Python.SoMField_setNum(self, num)

    def deleteValues(self, start, num=-1):
        return CoinXt_SWIG_Python.SoMField_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return CoinXt_SWIG_Python.SoMField_insertSpace(self, start, num)

    def set1(self, index, valuestring):
        return CoinXt_SWIG_Python.SoMField_set1(self, index, valuestring)

    def get1(self, index, valuestring):
        return CoinXt_SWIG_Python.SoMField_get1(self, index, valuestring)

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoMField_initClass()

    def enableDeleteValues(self):
        return CoinXt_SWIG_Python.SoMField_enableDeleteValues(self)

    def isDeleteValuesEnabled(self):
        return CoinXt_SWIG_Python.SoMField_isDeleteValuesEnabled(self)

    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1


    def __len__(self):
        return CoinXt_SWIG_Python.SoMField___len__(self)

# Register SoMField in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoMField_swigregister(SoMField)

def SoMField_getClassTypeId():
    return CoinXt_SWIG_Python.SoMField_getClassTypeId()

def SoMField_initClass():
    return CoinXt_SWIG_Python.SoMField_initClass()

SOXT_MAJOR_VERSION = CoinXt_SWIG_Python.SOXT_MAJOR_VERSION
SOXT_MINOR_VERSION = CoinXt_SWIG_Python.SOXT_MINOR_VERSION
SOXT_MICRO_VERSION = CoinXt_SWIG_Python.SOXT_MICRO_VERSION
SOXT_VERSION = CoinXt_SWIG_Python.SOXT_VERSION
class SoXt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def init(*args):
        return CoinXt_SWIG_Python.SoXt_init(*args)

    @staticmethod
    def mainLoop():
        return CoinXt_SWIG_Python.SoXt_mainLoop()

    @staticmethod
    def exitMainLoop():
        return CoinXt_SWIG_Python.SoXt_exitMainLoop()

    @staticmethod
    def done():
        return CoinXt_SWIG_Python.SoXt_done()

    @staticmethod
    def getTopLevelWidget():
        return CoinXt_SWIG_Python.SoXt_getTopLevelWidget()

    @staticmethod
    def getShellWidget(w):
        return CoinXt_SWIG_Python.SoXt_getShellWidget(w)

    @staticmethod
    def show(widget):
        return CoinXt_SWIG_Python.SoXt_show(widget)

    @staticmethod
    def hide(widget):
        return CoinXt_SWIG_Python.SoXt_hide(widget)

    @staticmethod
    def setWidgetSize(widget, size):
        return CoinXt_SWIG_Python.SoXt_setWidgetSize(widget, size)

    @staticmethod
    def getWidgetSize(widget):
        return CoinXt_SWIG_Python.SoXt_getWidgetSize(widget)

    @staticmethod
    def createSimpleErrorDialog(widget, title, string1, string2=None):
        return CoinXt_SWIG_Python.SoXt_createSimpleErrorDialog(widget, title, string1, string2)

    @staticmethod
    def getVersionInfo(major=None, minor=None, micro=None):
        return CoinXt_SWIG_Python.SoXt_getVersionInfo(major, minor, micro)

    @staticmethod
    def getVersionString():
        return CoinXt_SWIG_Python.SoXt_getVersionString()
    UNSPECIFIED_ERROR = CoinXt_SWIG_Python.SoXt_UNSPECIFIED_ERROR
    NO_OPENGL_CANVAS = CoinXt_SWIG_Python.SoXt_NO_OPENGL_CANVAS
    INTERNAL_ASSERT = CoinXt_SWIG_Python.SoXt_INTERNAL_ASSERT

    @staticmethod
    def setFatalErrorHandler(cb, userdata):
        return CoinXt_SWIG_Python.SoXt_setFatalErrorHandler(cb, userdata)

    @staticmethod
    def isDebugLibrary():
        return CoinXt_SWIG_Python.SoXt_isDebugLibrary()

    @staticmethod
    def isCompatible(major, minor):
        return CoinXt_SWIG_Python.SoXt_isCompatible(major, minor)
    DLL = CoinXt_SWIG_Python.SoXt_DLL
    LIB = CoinXt_SWIG_Python.SoXt_LIB
    UNKNOWN = CoinXt_SWIG_Python.SoXt_UNKNOWN

    @staticmethod
    def getABIType():
        return CoinXt_SWIG_Python.SoXt_getABIType()

    @staticmethod
    def nextEvent(arg1, arg2):
        return CoinXt_SWIG_Python.SoXt_nextEvent(arg1, arg2)

    @staticmethod
    def dispatchEvent(event):
        return CoinXt_SWIG_Python.SoXt_dispatchEvent(event)

    @staticmethod
    def getAppContext():
        return CoinXt_SWIG_Python.SoXt_getAppContext()

    @staticmethod
    def getDisplay():
        return CoinXt_SWIG_Python.SoXt_getDisplay()

    @staticmethod
    def encodeString(str):
        return CoinXt_SWIG_Python.SoXt_encodeString(str)

    @staticmethod
    def decodeString(xstring):
        return CoinXt_SWIG_Python.SoXt_decodeString(xstring)

    @staticmethod
    def getPopupArgs(display, screen, args, n):
        return CoinXt_SWIG_Python.SoXt_getPopupArgs(display, screen, args, n)

    @staticmethod
    def registerColormapLoad(widget, shell):
        return CoinXt_SWIG_Python.SoXt_registerColormapLoad(widget, shell)

    @staticmethod
    def addColormapToShell(widget, shell):
        return CoinXt_SWIG_Python.SoXt_addColormapToShell(widget, shell)

    @staticmethod
    def removeColormapFromShell(widget, shell):
        return CoinXt_SWIG_Python.SoXt_removeColormapFromShell(widget, shell)

    @staticmethod
    def addExtensionEventHandler(widget, eventType, proc, clientData):
        return CoinXt_SWIG_Python.SoXt_addExtensionEventHandler(widget, eventType, proc, clientData)

    @staticmethod
    def removeExtensionEventHandler(widget, eventType, proc, clientData):
        return CoinXt_SWIG_Python.SoXt_removeExtensionEventHandler(widget, eventType, proc, clientData)

# Register SoXt in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXt_swigregister(SoXt)

def SoXt_init(*args):
    return CoinXt_SWIG_Python.SoXt_init(*args)

def SoXt_mainLoop():
    return CoinXt_SWIG_Python.SoXt_mainLoop()

def SoXt_exitMainLoop():
    return CoinXt_SWIG_Python.SoXt_exitMainLoop()

def SoXt_done():
    return CoinXt_SWIG_Python.SoXt_done()

def SoXt_getTopLevelWidget():
    return CoinXt_SWIG_Python.SoXt_getTopLevelWidget()

def SoXt_getShellWidget(w):
    return CoinXt_SWIG_Python.SoXt_getShellWidget(w)

def SoXt_show(widget):
    return CoinXt_SWIG_Python.SoXt_show(widget)

def SoXt_hide(widget):
    return CoinXt_SWIG_Python.SoXt_hide(widget)

def SoXt_setWidgetSize(widget, size):
    return CoinXt_SWIG_Python.SoXt_setWidgetSize(widget, size)

def SoXt_getWidgetSize(widget):
    return CoinXt_SWIG_Python.SoXt_getWidgetSize(widget)

def SoXt_createSimpleErrorDialog(widget, title, string1, string2=None):
    return CoinXt_SWIG_Python.SoXt_createSimpleErrorDialog(widget, title, string1, string2)

def SoXt_getVersionInfo(major=None, minor=None, micro=None):
    return CoinXt_SWIG_Python.SoXt_getVersionInfo(major, minor, micro)

def SoXt_getVersionString():
    return CoinXt_SWIG_Python.SoXt_getVersionString()

def SoXt_setFatalErrorHandler(cb, userdata):
    return CoinXt_SWIG_Python.SoXt_setFatalErrorHandler(cb, userdata)

def SoXt_isDebugLibrary():
    return CoinXt_SWIG_Python.SoXt_isDebugLibrary()

def SoXt_isCompatible(major, minor):
    return CoinXt_SWIG_Python.SoXt_isCompatible(major, minor)

def SoXt_getABIType():
    return CoinXt_SWIG_Python.SoXt_getABIType()

def SoXt_nextEvent(arg1, arg2):
    return CoinXt_SWIG_Python.SoXt_nextEvent(arg1, arg2)

def SoXt_dispatchEvent(event):
    return CoinXt_SWIG_Python.SoXt_dispatchEvent(event)

def SoXt_getAppContext():
    return CoinXt_SWIG_Python.SoXt_getAppContext()

def SoXt_getDisplay():
    return CoinXt_SWIG_Python.SoXt_getDisplay()

def SoXt_encodeString(str):
    return CoinXt_SWIG_Python.SoXt_encodeString(str)

def SoXt_decodeString(xstring):
    return CoinXt_SWIG_Python.SoXt_decodeString(xstring)

def SoXt_getPopupArgs(display, screen, args, n):
    return CoinXt_SWIG_Python.SoXt_getPopupArgs(display, screen, args, n)

def SoXt_registerColormapLoad(widget, shell):
    return CoinXt_SWIG_Python.SoXt_registerColormapLoad(widget, shell)

def SoXt_addColormapToShell(widget, shell):
    return CoinXt_SWIG_Python.SoXt_addColormapToShell(widget, shell)

def SoXt_removeColormapFromShell(widget, shell):
    return CoinXt_SWIG_Python.SoXt_removeColormapFromShell(widget, shell)

def SoXt_addExtensionEventHandler(widget, eventType, proc, clientData):
    return CoinXt_SWIG_Python.SoXt_addExtensionEventHandler(widget, eventType, proc, clientData)

def SoXt_removeExtensionEventHandler(widget, eventType, proc, clientData):
    return CoinXt_SWIG_Python.SoXt_removeExtensionEventHandler(widget, eventType, proc, clientData)

class SoXtObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtObject_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtObject_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtObject_getTypeId(self)

    def isOfType(self, type):
        return CoinXt_SWIG_Python.SoXtObject_isOfType(self, type)

    @staticmethod
    def init():
        return CoinXt_SWIG_Python.SoXtObject_init()
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoXtObject

# Register SoXtObject in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtObject_swigregister(SoXtObject)

def SoXtObject_initClass():
    return CoinXt_SWIG_Python.SoXtObject_initClass()

def SoXtObject_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtObject_getClassTypeId()

def SoXtObject_init():
    return CoinXt_SWIG_Python.SoXtObject_init()

class SoXtComponent(SoXtObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtComponent_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtComponent_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtComponent_getTypeId(self)
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoXtComponent

    def show(self):
        return CoinXt_SWIG_Python.SoXtComponent_show(self)

    def hide(self):
        return CoinXt_SWIG_Python.SoXtComponent_hide(self)

    def setComponentCursor(self, cursor):
        return CoinXt_SWIG_Python.SoXtComponent_setComponentCursor(self, cursor)

    @staticmethod
    def setWidgetCursor(w, cursor):
        return CoinXt_SWIG_Python.SoXtComponent_setWidgetCursor(w, cursor)

    def isFullScreen(self):
        return CoinXt_SWIG_Python.SoXtComponent_isFullScreen(self)

    def setFullScreen(self, onoff):
        return CoinXt_SWIG_Python.SoXtComponent_setFullScreen(self, onoff)

    def isVisible(self):
        return CoinXt_SWIG_Python.SoXtComponent_isVisible(self)

    def isTopLevelShell(self):
        return CoinXt_SWIG_Python.SoXtComponent_isTopLevelShell(self)

    def getWidget(self):
        return CoinXt_SWIG_Python.SoXtComponent_getWidget(self)

    def getBaseWidget(self):
        return CoinXt_SWIG_Python.SoXtComponent_getBaseWidget(self)

    def getShellWidget(self):
        return CoinXt_SWIG_Python.SoXtComponent_getShellWidget(self)

    def getParentWidget(self):
        return CoinXt_SWIG_Python.SoXtComponent_getParentWidget(self)

    def setSize(self, size):
        return CoinXt_SWIG_Python.SoXtComponent_setSize(self, size)

    def getSize(self):
        return CoinXt_SWIG_Python.SoXtComponent_getSize(self)

    def setTitle(self, title):
        return CoinXt_SWIG_Python.SoXtComponent_setTitle(self, title)

    def getTitle(self):
        return CoinXt_SWIG_Python.SoXtComponent_getTitle(self)

    def setIconTitle(self, title):
        return CoinXt_SWIG_Python.SoXtComponent_setIconTitle(self, title)

    def getIconTitle(self):
        return CoinXt_SWIG_Python.SoXtComponent_getIconTitle(self)

    def getWidgetName(self):
        return CoinXt_SWIG_Python.SoXtComponent_getWidgetName(self)

    def getClassName(self):
        return CoinXt_SWIG_Python.SoXtComponent_getClassName(self)

    def setWindowCloseCallback(self, func, user=None):
        return CoinXt_SWIG_Python.SoXtComponent_setWindowCloseCallback(self, func, user)

    @staticmethod
    def getComponent(widget):
        return CoinXt_SWIG_Python.SoXtComponent_getComponent(widget)

    @staticmethod
    def initClasses():
        return CoinXt_SWIG_Python.SoXtComponent_initClasses()

    def getDisplay(self):
        return CoinXt_SWIG_Python.SoXtComponent_getDisplay(self)

    def fitSize(self, size):
        return CoinXt_SWIG_Python.SoXtComponent_fitSize(self, size)

    def addWindowCloseCallback(self, callback, closure=None):
        return CoinXt_SWIG_Python.SoXtComponent_addWindowCloseCallback(self, callback, closure)

    def removeWindowCloseCallback(self, callback, closure=None):
        return CoinXt_SWIG_Python.SoXtComponent_removeWindowCloseCallback(self, callback, closure)

# Register SoXtComponent in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtComponent_swigregister(SoXtComponent)

def SoXtComponent_initClass():
    return CoinXt_SWIG_Python.SoXtComponent_initClass()

def SoXtComponent_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtComponent_getClassTypeId()

def SoXtComponent_setWidgetCursor(w, cursor):
    return CoinXt_SWIG_Python.SoXtComponent_setWidgetCursor(w, cursor)

def SoXtComponent_getComponent(widget):
    return CoinXt_SWIG_Python.SoXtComponent_getComponent(widget)

def SoXtComponent_initClasses():
    return CoinXt_SWIG_Python.SoXtComponent_initClasses()

SO_GL_RGB = CoinXt_SWIG_Python.SO_GL_RGB
SO_GLX_RGB = CoinXt_SWIG_Python.SO_GLX_RGB
SO_GL_DOUBLE = CoinXt_SWIG_Python.SO_GL_DOUBLE
SO_GLX_DOUBLE = CoinXt_SWIG_Python.SO_GLX_DOUBLE
SO_GL_ZBUFFER = CoinXt_SWIG_Python.SO_GL_ZBUFFER
SO_GLX_ZBUFFER = CoinXt_SWIG_Python.SO_GLX_ZBUFFER
SO_GL_OVERLAY = CoinXt_SWIG_Python.SO_GL_OVERLAY
SO_GLX_OVERLAY = CoinXt_SWIG_Python.SO_GLX_OVERLAY
SO_GL_STEREO = CoinXt_SWIG_Python.SO_GL_STEREO
SO_GLX_STEREO = CoinXt_SWIG_Python.SO_GLX_STEREO
class SoXtGLWidget(SoXtComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtGLWidget_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtGLWidget_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getTypeId(self)

    def setBorder(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setBorder(self, enable)

    def isBorder(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_isBorder(self)

    def setDoubleBuffer(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setDoubleBuffer(self, enable)

    def isDoubleBuffer(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_isDoubleBuffer(self)

    def setDrawToFrontBufferEnable(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setDrawToFrontBufferEnable(self, enable)

    def isDrawToFrontBufferEnable(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_isDrawToFrontBufferEnable(self)

    def setQuadBufferStereo(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setQuadBufferStereo(self, enable)

    def isQuadBufferStereo(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_isQuadBufferStereo(self)

    def setAccumulationBuffer(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setAccumulationBuffer(self, enable)

    def getAccumulationBuffer(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getAccumulationBuffer(self)

    def setStencilBuffer(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setStencilBuffer(self, enable)

    def getStencilBuffer(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getStencilBuffer(self)

    def setAlphaChannel(self, enable):
        return CoinXt_SWIG_Python.SoXtGLWidget_setAlphaChannel(self, enable)

    def getAlphaChannel(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getAlphaChannel(self)

    def setOverlayRender(self, onoff):
        return CoinXt_SWIG_Python.SoXtGLWidget_setOverlayRender(self, onoff)

    def isOverlayRender(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_isOverlayRender(self)

    def getGLWidget(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getGLWidget(self)

    def getNormalWidget(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getNormalWidget(self)

    def getOverlayWidget(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getOverlayWidget(self)

    def hasOverlayGLArea(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_hasOverlayGLArea(self)

    def hasNormalGLArea(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_hasNormalGLArea(self)

    def getOverlayTransparentPixel(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getOverlayTransparentPixel(self)

    def getPointSizeLimits(self, range, granularity):
        return CoinXt_SWIG_Python.SoXtGLWidget_getPointSizeLimits(self, range, granularity)

    def getLineWidthLimits(self, range, granularity):
        return CoinXt_SWIG_Python.SoXtGLWidget_getLineWidthLimits(self, range, granularity)

    def getNormalContext(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getNormalContext(self)

    def getOverlayContext(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getOverlayContext(self)

    def getNormalWindow(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getNormalWindow(self)

    def getOverlayWindow(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getOverlayWindow(self)

    def getOverlayColorMapSize(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getOverlayColorMapSize(self)

    def getColorMapSize(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getColorMapSize(self)

    def setNormalVisual(self, visual):
        return CoinXt_SWIG_Python.SoXtGLWidget_setNormalVisual(self, visual)

    def getNormalVisual(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getNormalVisual(self)

    def setOverlayVisual(self, visual):
        return CoinXt_SWIG_Python.SoXtGLWidget_setOverlayVisual(self, visual)

    def getOverlayVisual(self):
        return CoinXt_SWIG_Python.SoXtGLWidget_getOverlayVisual(self)

# Register SoXtGLWidget in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtGLWidget_swigregister(SoXtGLWidget)

def SoXtGLWidget_initClass():
    return CoinXt_SWIG_Python.SoXtGLWidget_initClass()

def SoXtGLWidget_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtGLWidget_getClassTypeId()

class SoXtRenderArea(SoXtGLWidget):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtRenderArea_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtRenderArea_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getTypeId(self)

    @staticmethod
    def createInstance():
        return CoinXt_SWIG_Python.SoXtRenderArea_createInstance()

    def __init__(self, parent=None, name=None, embed=1, mouseInput=1, keyboardInput=1):
        CoinXt_SWIG_Python.SoXtRenderArea_swiginit(self, CoinXt_SWIG_Python.new_SoXtRenderArea(parent, name, embed, mouseInput, keyboardInput))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoXtRenderArea

    def setSceneGraph(self, scene):
        return CoinXt_SWIG_Python.SoXtRenderArea_setSceneGraph(self, scene)

    def getSceneGraph(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getSceneGraph(self)

    def setOverlaySceneGraph(self, scene):
        return CoinXt_SWIG_Python.SoXtRenderArea_setOverlaySceneGraph(self, scene)

    def getOverlaySceneGraph(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getOverlaySceneGraph(self)

    def setBackgroundColor(self, color):
        return CoinXt_SWIG_Python.SoXtRenderArea_setBackgroundColor(self, color)

    def getBackgroundColor(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getBackgroundColor(self)

    def setBackgroundIndex(self, idx):
        return CoinXt_SWIG_Python.SoXtRenderArea_setBackgroundIndex(self, idx)

    def getBackgroundIndex(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getBackgroundIndex(self)

    def setOverlayBackgroundIndex(self, idx):
        return CoinXt_SWIG_Python.SoXtRenderArea_setOverlayBackgroundIndex(self, idx)

    def getOverlayBackgroundIndex(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getOverlayBackgroundIndex(self)

    def setColorMap(self, start, num, colors):
        return CoinXt_SWIG_Python.SoXtRenderArea_setColorMap(self, start, num, colors)

    def setOverlayColorMap(self, start, num, colors):
        return CoinXt_SWIG_Python.SoXtRenderArea_setOverlayColorMap(self, start, num, colors)

    def setViewportRegion(self, newRegion):
        return CoinXt_SWIG_Python.SoXtRenderArea_setViewportRegion(self, newRegion)

    def getViewportRegion(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getViewportRegion(self)

    def setTransparencyType(self, type):
        return CoinXt_SWIG_Python.SoXtRenderArea_setTransparencyType(self, type)

    def getTransparencyType(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getTransparencyType(self)

    def setAntialiasing(self, smoothing, numPasses):
        return CoinXt_SWIG_Python.SoXtRenderArea_setAntialiasing(self, smoothing, numPasses)

    def getAntialiasing(self, smoothing, numPasses):
        return CoinXt_SWIG_Python.SoXtRenderArea_getAntialiasing(self, smoothing, numPasses)

    def setClearBeforeRender(self, enable, zbEnable=1):
        return CoinXt_SWIG_Python.SoXtRenderArea_setClearBeforeRender(self, enable, zbEnable)

    def isClearBeforeRender(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_isClearBeforeRender(self)

    def isClearZBufferBeforeRender(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_isClearZBufferBeforeRender(self)

    def setClearBeforeOverlayRender(self, enable):
        return CoinXt_SWIG_Python.SoXtRenderArea_setClearBeforeOverlayRender(self, enable)

    def isClearBeforeOverlayRender(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_isClearBeforeOverlayRender(self)

    def setAutoRedraw(self, enable):
        return CoinXt_SWIG_Python.SoXtRenderArea_setAutoRedraw(self, enable)

    def isAutoRedraw(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_isAutoRedraw(self)

    def setRedrawPriority(self, priority):
        return CoinXt_SWIG_Python.SoXtRenderArea_setRedrawPriority(self, priority)

    def getRedrawPriority(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getRedrawPriority(self)

    @staticmethod
    def getDefaultRedrawPriority():
        return CoinXt_SWIG_Python.SoXtRenderArea_getDefaultRedrawPriority()

    def render(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_render(self)

    def renderOverlay(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_renderOverlay(self)

    def scheduleRedraw(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_scheduleRedraw(self)

    def scheduleOverlayRedraw(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_scheduleOverlayRedraw(self)

    def redrawOnSelectionChange(self, selection):
        return CoinXt_SWIG_Python.SoXtRenderArea_redrawOnSelectionChange(self, selection)

    def redrawOverlayOnSelectionChange(self, selection):
        return CoinXt_SWIG_Python.SoXtRenderArea_redrawOverlayOnSelectionChange(self, selection)

    def setEventCallback(self, func, user=None):
        return CoinXt_SWIG_Python.SoXtRenderArea_setEventCallback(self, func, user)

    def setSceneManager(self, manager):
        return CoinXt_SWIG_Python.SoXtRenderArea_setSceneManager(self, manager)

    def getSceneManager(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getSceneManager(self)

    def setOverlaySceneManager(self, manager):
        return CoinXt_SWIG_Python.SoXtRenderArea_setOverlaySceneManager(self, manager)

    def getOverlaySceneManager(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getOverlaySceneManager(self)

    def setGLRenderAction(self, action):
        return CoinXt_SWIG_Python.SoXtRenderArea_setGLRenderAction(self, action)

    def getGLRenderAction(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getGLRenderAction(self)

    def setOverlayGLRenderAction(self, action):
        return CoinXt_SWIG_Python.SoXtRenderArea_setOverlayGLRenderAction(self, action)

    def getOverlayGLRenderAction(self):
        return CoinXt_SWIG_Python.SoXtRenderArea_getOverlayGLRenderAction(self)

    def sendSoEvent(self, event):
        return CoinXt_SWIG_Python.SoXtRenderArea_sendSoEvent(self, event)

    def registerDevice(self, device):
        return CoinXt_SWIG_Python.SoXtRenderArea_registerDevice(self, device)

    def unregisterDevice(self, device):
        return CoinXt_SWIG_Python.SoXtRenderArea_unregisterDevice(self, device)

# Register SoXtRenderArea in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtRenderArea_swigregister(SoXtRenderArea)

def SoXtRenderArea_initClass():
    return CoinXt_SWIG_Python.SoXtRenderArea_initClass()

def SoXtRenderArea_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtRenderArea_getClassTypeId()

def SoXtRenderArea_createInstance():
    return CoinXt_SWIG_Python.SoXtRenderArea_createInstance()

def SoXtRenderArea_getDefaultRedrawPriority():
    return CoinXt_SWIG_Python.SoXtRenderArea_getDefaultRedrawPriority()

class SoXtViewer(SoXtRenderArea):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtViewer_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtViewer_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtViewer_getTypeId(self)
    BROWSER = CoinXt_SWIG_Python.SoXtViewer_BROWSER
    EDITOR = CoinXt_SWIG_Python.SoXtViewer_EDITOR
    VIEW_AS_IS = CoinXt_SWIG_Python.SoXtViewer_VIEW_AS_IS
    VIEW_HIDDEN_LINE = CoinXt_SWIG_Python.SoXtViewer_VIEW_HIDDEN_LINE
    VIEW_NO_TEXTURE = CoinXt_SWIG_Python.SoXtViewer_VIEW_NO_TEXTURE
    VIEW_LOW_COMPLEXITY = CoinXt_SWIG_Python.SoXtViewer_VIEW_LOW_COMPLEXITY
    VIEW_LINE = CoinXt_SWIG_Python.SoXtViewer_VIEW_LINE
    VIEW_POINT = CoinXt_SWIG_Python.SoXtViewer_VIEW_POINT
    VIEW_BBOX = CoinXt_SWIG_Python.SoXtViewer_VIEW_BBOX
    VIEW_LOW_RES_LINE = CoinXt_SWIG_Python.SoXtViewer_VIEW_LOW_RES_LINE
    VIEW_LOW_RES_POINT = CoinXt_SWIG_Python.SoXtViewer_VIEW_LOW_RES_POINT
    VIEW_SAME_AS_STILL = CoinXt_SWIG_Python.SoXtViewer_VIEW_SAME_AS_STILL
    VIEW_WIREFRAME_OVERLAY = CoinXt_SWIG_Python.SoXtViewer_VIEW_WIREFRAME_OVERLAY
    STILL = CoinXt_SWIG_Python.SoXtViewer_STILL
    INTERACTIVE = CoinXt_SWIG_Python.SoXtViewer_INTERACTIVE
    BUFFER_SINGLE = CoinXt_SWIG_Python.SoXtViewer_BUFFER_SINGLE
    BUFFER_DOUBLE = CoinXt_SWIG_Python.SoXtViewer_BUFFER_DOUBLE
    BUFFER_INTERACTIVE = CoinXt_SWIG_Python.SoXtViewer_BUFFER_INTERACTIVE
    VARIABLE_NEAR_PLANE = CoinXt_SWIG_Python.SoXtViewer_VARIABLE_NEAR_PLANE
    CONSTANT_NEAR_PLANE = CoinXt_SWIG_Python.SoXtViewer_CONSTANT_NEAR_PLANE

    def setCamera(self, camera):
        return CoinXt_SWIG_Python.SoXtViewer_setCamera(self, camera)

    def getCamera(self):
        return CoinXt_SWIG_Python.SoXtViewer_getCamera(self)

    def setCameraType(self, type):
        return CoinXt_SWIG_Python.SoXtViewer_setCameraType(self, type)

    def getCameraType(self):
        return CoinXt_SWIG_Python.SoXtViewer_getCameraType(self)

    def toggleCameraType(self):
        return CoinXt_SWIG_Python.SoXtViewer_toggleCameraType(self)

    def viewAll(self):
        return CoinXt_SWIG_Python.SoXtViewer_viewAll(self)

    def saveHomePosition(self):
        return CoinXt_SWIG_Python.SoXtViewer_saveHomePosition(self)

    def resetToHomePosition(self):
        return CoinXt_SWIG_Python.SoXtViewer_resetToHomePosition(self)

    def setHeadlight(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setHeadlight(self, enable)

    def isHeadlight(self):
        return CoinXt_SWIG_Python.SoXtViewer_isHeadlight(self)

    def getHeadlight(self):
        return CoinXt_SWIG_Python.SoXtViewer_getHeadlight(self)

    def setDrawStyle(self, type, style):
        return CoinXt_SWIG_Python.SoXtViewer_setDrawStyle(self, type, style)

    def getDrawStyle(self, type):
        return CoinXt_SWIG_Python.SoXtViewer_getDrawStyle(self, type)

    def setBufferingType(self, type):
        return CoinXt_SWIG_Python.SoXtViewer_setBufferingType(self, type)

    def getBufferingType(self):
        return CoinXt_SWIG_Python.SoXtViewer_getBufferingType(self)

    def setViewing(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setViewing(self, enable)

    def isViewing(self):
        return CoinXt_SWIG_Python.SoXtViewer_isViewing(self)

    def setCursorEnabled(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setCursorEnabled(self, enable)

    def isCursorEnabled(self):
        return CoinXt_SWIG_Python.SoXtViewer_isCursorEnabled(self)

    def setAutoClipping(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setAutoClipping(self, enable)

    def isAutoClipping(self):
        return CoinXt_SWIG_Python.SoXtViewer_isAutoClipping(self)

    def setAutoClippingStrategy(self, strategy, value=0.6, cb=None, cbuserdata=None):
        return CoinXt_SWIG_Python.SoXtViewer_setAutoClippingStrategy(self, strategy, value, cb, cbuserdata)

    def setStereoViewing(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setStereoViewing(self, enable)

    def isStereoViewing(self):
        return CoinXt_SWIG_Python.SoXtViewer_isStereoViewing(self)

    def setStereoOffset(self, dist):
        return CoinXt_SWIG_Python.SoXtViewer_setStereoOffset(self, dist)

    def getStereoOffset(self):
        return CoinXt_SWIG_Python.SoXtViewer_getStereoOffset(self)
    STEREO_NONE = CoinXt_SWIG_Python.SoXtViewer_STEREO_NONE
    STEREO_ANAGLYPH = CoinXt_SWIG_Python.SoXtViewer_STEREO_ANAGLYPH
    STEREO_QUADBUFFER = CoinXt_SWIG_Python.SoXtViewer_STEREO_QUADBUFFER
    STEREO_INTERLEAVED_ROWS = CoinXt_SWIG_Python.SoXtViewer_STEREO_INTERLEAVED_ROWS
    STEREO_INTERLEAVED_COLUMNS = CoinXt_SWIG_Python.SoXtViewer_STEREO_INTERLEAVED_COLUMNS

    def setStereoType(self, s):
        return CoinXt_SWIG_Python.SoXtViewer_setStereoType(self, s)

    def getStereoType(self):
        return CoinXt_SWIG_Python.SoXtViewer_getStereoType(self)

    def setAnaglyphStereoColorMasks(self, left, right):
        return CoinXt_SWIG_Python.SoXtViewer_setAnaglyphStereoColorMasks(self, left, right)

    def getAnaglyphStereoColorMasks(self, left, right):
        return CoinXt_SWIG_Python.SoXtViewer_getAnaglyphStereoColorMasks(self, left, right)

    def setDetailSeek(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setDetailSeek(self, enable)

    def isDetailSeek(self):
        return CoinXt_SWIG_Python.SoXtViewer_isDetailSeek(self)

    def setSeekTime(self, seconds):
        return CoinXt_SWIG_Python.SoXtViewer_setSeekTime(self, seconds)

    def getSeekTime(self):
        return CoinXt_SWIG_Python.SoXtViewer_getSeekTime(self)

    def addStartCallback(self, func, data=None):
        return CoinXt_SWIG_Python.SoXtViewer_addStartCallback(self, func, data)

    def addFinishCallback(self, func, data=None):
        return CoinXt_SWIG_Python.SoXtViewer_addFinishCallback(self, func, data)

    def removeStartCallback(self, func, data=None):
        return CoinXt_SWIG_Python.SoXtViewer_removeStartCallback(self, func, data)

    def removeFinishCallback(self, func, data=None):
        return CoinXt_SWIG_Python.SoXtViewer_removeFinishCallback(self, func, data)

    def setWireframeOverlayColor(self, color):
        return CoinXt_SWIG_Python.SoXtViewer_setWireframeOverlayColor(self, color)

    def getWireframeOverlayColor(self):
        return CoinXt_SWIG_Python.SoXtViewer_getWireframeOverlayColor(self)

    def setDoubleBuffer(self, enable):
        return CoinXt_SWIG_Python.SoXtViewer_setDoubleBuffer(self, enable)

    def setSceneGraph(self, root):
        return CoinXt_SWIG_Python.SoXtViewer_setSceneGraph(self, root)

    def getSceneGraph(self):
        return CoinXt_SWIG_Python.SoXtViewer_getSceneGraph(self)

# Register SoXtViewer in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtViewer_swigregister(SoXtViewer)

def SoXtViewer_initClass():
    return CoinXt_SWIG_Python.SoXtViewer_initClass()

def SoXtViewer_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtViewer_getClassTypeId()

class SoXtFullViewer(SoXtViewer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtFullViewer_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtFullViewer_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtFullViewer_getTypeId(self)
    BUILD_NONE = CoinXt_SWIG_Python.SoXtFullViewer_BUILD_NONE
    BUILD_DECORATION = CoinXt_SWIG_Python.SoXtFullViewer_BUILD_DECORATION
    BUILD_POPUP = CoinXt_SWIG_Python.SoXtFullViewer_BUILD_POPUP
    BUILD_ALL = CoinXt_SWIG_Python.SoXtFullViewer_BUILD_ALL

    def setDecoration(self, on):
        return CoinXt_SWIG_Python.SoXtFullViewer_setDecoration(self, on)

    def isDecoration(self):
        return CoinXt_SWIG_Python.SoXtFullViewer_isDecoration(self)

    def setPopupMenuEnabled(self, on):
        return CoinXt_SWIG_Python.SoXtFullViewer_setPopupMenuEnabled(self, on)

    def isPopupMenuEnabled(self):
        return CoinXt_SWIG_Python.SoXtFullViewer_isPopupMenuEnabled(self)

    def getAppPushButtonParent(self):
        return CoinXt_SWIG_Python.SoXtFullViewer_getAppPushButtonParent(self)

    def addAppPushButton(self, newButton):
        return CoinXt_SWIG_Python.SoXtFullViewer_addAppPushButton(self, newButton)

    def insertAppPushButton(self, newButton, index):
        return CoinXt_SWIG_Python.SoXtFullViewer_insertAppPushButton(self, newButton, index)

    def removeAppPushButton(self, oldButton):
        return CoinXt_SWIG_Python.SoXtFullViewer_removeAppPushButton(self, oldButton)

    def findAppPushButton(self, oldButton):
        return CoinXt_SWIG_Python.SoXtFullViewer_findAppPushButton(self, oldButton)

    def lengthAppPushButton(self):
        return CoinXt_SWIG_Python.SoXtFullViewer_lengthAppPushButton(self)

    def getRenderAreaWidget(self):
        return CoinXt_SWIG_Python.SoXtFullViewer_getRenderAreaWidget(self)

    def setViewing(self, on):
        return CoinXt_SWIG_Python.SoXtFullViewer_setViewing(self, on)

    def setComponentCursor(self, cursor):
        return CoinXt_SWIG_Python.SoXtFullViewer_setComponentCursor(self, cursor)

# Register SoXtFullViewer in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtFullViewer_swigregister(SoXtFullViewer)

def SoXtFullViewer_initClass():
    return CoinXt_SWIG_Python.SoXtFullViewer_initClass()

def SoXtFullViewer_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtFullViewer_getClassTypeId()

class SoXtExaminerViewer(SoXtFullViewer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtExaminerViewer_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtExaminerViewer_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_getTypeId(self)

    @staticmethod
    def createInstance():
        return CoinXt_SWIG_Python.SoXtExaminerViewer_createInstance()

    def __init__(self, *args):
        CoinXt_SWIG_Python.SoXtExaminerViewer_swiginit(self, CoinXt_SWIG_Python.new_SoXtExaminerViewer(*args))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoXtExaminerViewer

    def setAnimationEnabled(self, enable):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_setAnimationEnabled(self, enable)

    def isAnimationEnabled(self):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_isAnimationEnabled(self)

    def stopAnimating(self):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_stopAnimating(self)

    def isAnimating(self):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_isAnimating(self)

    def setFeedbackVisibility(self, enable):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_setFeedbackVisibility(self, enable)

    def isFeedbackVisible(self):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_isFeedbackVisible(self)

    def setFeedbackSize(self, size):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_setFeedbackSize(self, size)

    def getFeedbackSize(self):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_getFeedbackSize(self)

    def setViewing(self, enable):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_setViewing(self, enable)

    def setCamera(self, camera):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_setCamera(self, camera)

    def setCursorEnabled(self, enable):
        return CoinXt_SWIG_Python.SoXtExaminerViewer_setCursorEnabled(self, enable)

# Register SoXtExaminerViewer in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtExaminerViewer_swigregister(SoXtExaminerViewer)

def SoXtExaminerViewer_initClass():
    return CoinXt_SWIG_Python.SoXtExaminerViewer_initClass()

def SoXtExaminerViewer_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtExaminerViewer_getClassTypeId()

def SoXtExaminerViewer_createInstance():
    return CoinXt_SWIG_Python.SoXtExaminerViewer_createInstance()

class SoXtPlaneViewer(SoXtFullViewer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return CoinXt_SWIG_Python.SoXtPlaneViewer_initClass()

    @staticmethod
    def getClassTypeId():
        return CoinXt_SWIG_Python.SoXtPlaneViewer_getClassTypeId()

    def getTypeId(self):
        return CoinXt_SWIG_Python.SoXtPlaneViewer_getTypeId(self)

    @staticmethod
    def createInstance():
        return CoinXt_SWIG_Python.SoXtPlaneViewer_createInstance()

    def __init__(self, *args):
        CoinXt_SWIG_Python.SoXtPlaneViewer_swiginit(self, CoinXt_SWIG_Python.new_SoXtPlaneViewer(*args))
    __swig_destroy__ = CoinXt_SWIG_Python.delete_SoXtPlaneViewer

    def setViewing(self, enable):
        return CoinXt_SWIG_Python.SoXtPlaneViewer_setViewing(self, enable)

    def setCamera(self, camera):
        return CoinXt_SWIG_Python.SoXtPlaneViewer_setCamera(self, camera)

    def setCursorEnabled(self, enable):
        return CoinXt_SWIG_Python.SoXtPlaneViewer_setCursorEnabled(self, enable)

# Register SoXtPlaneViewer in CoinXt_SWIG_Python:
CoinXt_SWIG_Python.SoXtPlaneViewer_swigregister(SoXtPlaneViewer)

def SoXtPlaneViewer_initClass():
    return CoinXt_SWIG_Python.SoXtPlaneViewer_initClass()

def SoXtPlaneViewer_getClassTypeId():
    return CoinXt_SWIG_Python.SoXtPlaneViewer_getClassTypeId()

def SoXtPlaneViewer_createInstance():
    return CoinXt_SWIG_Python.SoXtPlaneViewer_createInstance()


import CoinPython as Inventor
for x in list(locals().values()):  #G.Barrand : Python-3.x : list()
  if isinstance(x, type) and issubclass(x, Inventor.SoFieldContainer):
    for name, thing in list(x.__dict__.items()):  #G.Barrand : Python-3.x : list()
      if isinstance(thing, property):
        delattr(x, name)



