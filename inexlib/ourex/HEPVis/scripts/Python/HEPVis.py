# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import HEPVis_SWIG_Python
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class charp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_charp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_charp
    __del__ = lambda self : None;
    def assign(*args): return HEPVis_SWIG_Python.charp_assign(*args)
    def value(*args): return HEPVis_SWIG_Python.charp_value(*args)
    def cast(*args): return HEPVis_SWIG_Python.charp_cast(*args)
    frompointer = staticmethod(HEPVis_SWIG_Python.charp_frompointer)
charp_swigregister = HEPVis_SWIG_Python.charp_swigregister
charp_swigregister(charp)
cast = HEPVis_SWIG_Python.cast
charp_frompointer = HEPVis_SWIG_Python.charp_frompointer

class intp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_intp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_intp
    __del__ = lambda self : None;
    def assign(*args): return HEPVis_SWIG_Python.intp_assign(*args)
    def value(*args): return HEPVis_SWIG_Python.intp_value(*args)
    def cast(*args): return HEPVis_SWIG_Python.intp_cast(*args)
    frompointer = staticmethod(HEPVis_SWIG_Python.intp_frompointer)
intp_swigregister = HEPVis_SWIG_Python.intp_swigregister
intp_swigregister(intp)
intp_frompointer = HEPVis_SWIG_Python.intp_frompointer

class longp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_longp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_longp
    __del__ = lambda self : None;
    def assign(*args): return HEPVis_SWIG_Python.longp_assign(*args)
    def value(*args): return HEPVis_SWIG_Python.longp_value(*args)
    def cast(*args): return HEPVis_SWIG_Python.longp_cast(*args)
    frompointer = staticmethod(HEPVis_SWIG_Python.longp_frompointer)
longp_swigregister = HEPVis_SWIG_Python.longp_swigregister
longp_swigregister(longp)
longp_frompointer = HEPVis_SWIG_Python.longp_frompointer

class floatp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_floatp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_floatp
    __del__ = lambda self : None;
    def assign(*args): return HEPVis_SWIG_Python.floatp_assign(*args)
    def value(*args): return HEPVis_SWIG_Python.floatp_value(*args)
    def cast(*args): return HEPVis_SWIG_Python.floatp_cast(*args)
    frompointer = staticmethod(HEPVis_SWIG_Python.floatp_frompointer)
floatp_swigregister = HEPVis_SWIG_Python.floatp_swigregister
floatp_swigregister(floatp)
floatp_frompointer = HEPVis_SWIG_Python.floatp_frompointer

class doublep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_doublep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_doublep
    __del__ = lambda self : None;
    def assign(*args): return HEPVis_SWIG_Python.doublep_assign(*args)
    def value(*args): return HEPVis_SWIG_Python.doublep_value(*args)
    def cast(*args): return HEPVis_SWIG_Python.doublep_cast(*args)
    frompointer = staticmethod(HEPVis_SWIG_Python.doublep_frompointer)
doublep_swigregister = HEPVis_SWIG_Python.doublep_swigregister
doublep_swigregister(doublep)
doublep_frompointer = HEPVis_SWIG_Python.doublep_frompointer

FALSE = HEPVis_SWIG_Python.FALSE
TRUE = HEPVis_SWIG_Python.TRUE
HAVE_INTTYPES_H = HEPVis_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = HEPVis_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = HEPVis_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = HEPVis_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = HEPVis_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = HEPVis_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = HEPVis_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = HEPVis_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = HEPVis_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = HEPVis_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = HEPVis_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = HEPVis_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = HEPVis_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = HEPVis_SWIG_Python.HAVE_UINTPTR_T
M_E = HEPVis_SWIG_Python.M_E
M_LOG2E = HEPVis_SWIG_Python.M_LOG2E
M_LOG10E = HEPVis_SWIG_Python.M_LOG10E
M_LN2 = HEPVis_SWIG_Python.M_LN2
M_LN10 = HEPVis_SWIG_Python.M_LN10
M_PI = HEPVis_SWIG_Python.M_PI
M_TWOPI = HEPVis_SWIG_Python.M_TWOPI
M_PI_2 = HEPVis_SWIG_Python.M_PI_2
M_PI_4 = HEPVis_SWIG_Python.M_PI_4
M_3PI_4 = HEPVis_SWIG_Python.M_3PI_4
M_SQRTPI = HEPVis_SWIG_Python.M_SQRTPI
M_1_PI = HEPVis_SWIG_Python.M_1_PI
M_2_PI = HEPVis_SWIG_Python.M_2_PI
M_2_SQRTPI = HEPVis_SWIG_Python.M_2_SQRTPI
M_SQRT2 = HEPVis_SWIG_Python.M_SQRT2
M_SQRT1_2 = HEPVis_SWIG_Python.M_SQRT1_2
M_LN2LO = HEPVis_SWIG_Python.M_LN2LO
M_LN2HI = HEPVis_SWIG_Python.M_LN2HI
M_SQRT3 = HEPVis_SWIG_Python.M_SQRT3
M_IVLN10 = HEPVis_SWIG_Python.M_IVLN10
M_LOG2_E = HEPVis_SWIG_Python.M_LOG2_E
M_INVLN2 = HEPVis_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = HEPVis_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = HEPVis_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = HEPVis_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = HEPVis_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = HEPVis_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = HEPVis_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbDict(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDict
    __del__ = lambda self : None;
    def applyToAll(*args): return HEPVis_SWIG_Python.SbDict_applyToAll(*args)
    def clear(*args): return HEPVis_SWIG_Python.SbDict_clear(*args)
    def enter(*args): return HEPVis_SWIG_Python.SbDict_enter(*args)
    def find(*args): return HEPVis_SWIG_Python.SbDict_find(*args)
    def makePList(*args): return HEPVis_SWIG_Python.SbDict_makePList(*args)
    def remove(*args): return HEPVis_SWIG_Python.SbDict_remove(*args)
    def setHashingFunction(*args): return HEPVis_SWIG_Python.SbDict_setHashingFunction(*args)
SbDict_swigregister = HEPVis_SWIG_Python.SbDict_swigregister
SbDict_swigregister(SbDict)

class SoType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fromName = staticmethod(HEPVis_SWIG_Python.SoType_fromName)
    def getName(*args): return HEPVis_SWIG_Python.SoType_getName(*args)
    def getParent(*args): return HEPVis_SWIG_Python.SoType_getParent(*args)
    def isDerivedFrom(*args): return HEPVis_SWIG_Python.SoType_isDerivedFrom(*args)
    getAllDerivedFrom = staticmethod(HEPVis_SWIG_Python.SoType_getAllDerivedFrom)
    def canCreateInstance(*args): return HEPVis_SWIG_Python.SoType_canCreateInstance(*args)
    def getData(*args): return HEPVis_SWIG_Python.SoType_getData(*args)
    def getKey(*args): return HEPVis_SWIG_Python.SoType_getKey(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SoType___eq__(*args)
    def __ne__(*args): return HEPVis_SWIG_Python.SoType___ne__(*args)
    def __lt__(*args): return HEPVis_SWIG_Python.SoType___lt__(*args)
    def __le__(*args): return HEPVis_SWIG_Python.SoType___le__(*args)
    def __ge__(*args): return HEPVis_SWIG_Python.SoType___ge__(*args)
    def __gt__(*args): return HEPVis_SWIG_Python.SoType___gt__(*args)
    init = staticmethod(HEPVis_SWIG_Python.SoType_init)
    fromKey = staticmethod(HEPVis_SWIG_Python.SoType_fromKey)
    badType = staticmethod(HEPVis_SWIG_Python.SoType_badType)
    def isBad(*args): return HEPVis_SWIG_Python.SoType_isBad(*args)
    def makeInternal(*args): return HEPVis_SWIG_Python.SoType_makeInternal(*args)
    def isInternal(*args): return HEPVis_SWIG_Python.SoType_isInternal(*args)
    getNumTypes = staticmethod(HEPVis_SWIG_Python.SoType_getNumTypes)
    def getInstantiationMethod(*args): return HEPVis_SWIG_Python.SoType_getInstantiationMethod(*args)
    def createInstance(*args): return HEPVis_SWIG_Python.SoType_createInstance(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoType
    __del__ = lambda self : None;
SoType_swigregister = HEPVis_SWIG_Python.SoType_swigregister
SoType_swigregister(SoType)
SoType_fromName = HEPVis_SWIG_Python.SoType_fromName
SoType_getAllDerivedFrom = HEPVis_SWIG_Python.SoType_getAllDerivedFrom
SoType_init = HEPVis_SWIG_Python.SoType_init
SoType_fromKey = HEPVis_SWIG_Python.SoType_fromKey
SoType_badType = HEPVis_SWIG_Python.SoType_badType
SoType_getNumTypes = HEPVis_SWIG_Python.SoType_getNumTypes

class SbVec2s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbVec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return HEPVis_SWIG_Python.SbVec2s_dot(*args)
    def getValue(*args): return HEPVis_SWIG_Python.SbVec2s_getValue(*args)
    def negate(*args): return HEPVis_SWIG_Python.SbVec2s_negate(*args)
    def setValue(*args): return HEPVis_SWIG_Python.SbVec2s_setValue(*args)
    def __imul__(*args): return HEPVis_SWIG_Python.SbVec2s___imul__(*args)
    def __idiv__(*args): return HEPVis_SWIG_Python.SbVec2s___idiv__(*args)
    def __iadd__(*args): return HEPVis_SWIG_Python.SbVec2s___iadd__(*args)
    def __isub__(*args): return HEPVis_SWIG_Python.SbVec2s___isub__(*args)
    def __neg__(*args): return HEPVis_SWIG_Python.SbVec2s___neg__(*args)
    def output(*args): return HEPVis_SWIG_Python.SbVec2s_output(*args)
    def __add__(*args): return HEPVis_SWIG_Python.SbVec2s___add__(*args)
    def __sub__(*args): return HEPVis_SWIG_Python.SbVec2s___sub__(*args)
    def __mul__(*args): return HEPVis_SWIG_Python.SbVec2s___mul__(*args)
    def __rmul__(*args): return HEPVis_SWIG_Python.SbVec2s___rmul__(*args)
    def __div__(*args): return HEPVis_SWIG_Python.SbVec2s___div__(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SbVec2s___eq__(*args)
    def __nq__(*args): return HEPVis_SWIG_Python.SbVec2s___nq__(*args)
    def __getitem__(*args): return HEPVis_SWIG_Python.SbVec2s___getitem__(*args)
    def __setitem__(*args): return HEPVis_SWIG_Python.SbVec2s___setitem__(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbVec2s
    __del__ = lambda self : None;
SbVec2s_swigregister = HEPVis_SWIG_Python.SbVec2s_swigregister
SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPList
    __del__ = lambda self : None;
    def copy(*args): return HEPVis_SWIG_Python.SbPList_copy(*args)
    def fit(*args): return HEPVis_SWIG_Python.SbPList_fit(*args)
    def append(*args): return HEPVis_SWIG_Python.SbPList_append(*args)
    def find(*args): return HEPVis_SWIG_Python.SbPList_find(*args)
    def insert(*args): return HEPVis_SWIG_Python.SbPList_insert(*args)
    def removeItem(*args): return HEPVis_SWIG_Python.SbPList_removeItem(*args)
    def remove(*args): return HEPVis_SWIG_Python.SbPList_remove(*args)
    def removeFast(*args): return HEPVis_SWIG_Python.SbPList_removeFast(*args)
    def getLength(*args): return HEPVis_SWIG_Python.SbPList_getLength(*args)
    def truncate(*args): return HEPVis_SWIG_Python.SbPList_truncate(*args)
    def getArrayPtr(*args): return HEPVis_SWIG_Python.SbPList_getArrayPtr(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SbPList___eq__(*args)
    def __ne__(*args): return HEPVis_SWIG_Python.SbPList___ne__(*args)
    def get(*args): return HEPVis_SWIG_Python.SbPList_get(*args)
    def set(*args): return HEPVis_SWIG_Python.SbPList_set(*args)
    def __getitem__(*args): return HEPVis_SWIG_Python.SbPList___getitem__(*args)
    def __setitem__(*args): return HEPVis_SWIG_Python.SbPList___setitem__(*args)
    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]

SbPList_swigregister = HEPVis_SWIG_Python.SbPList_swigregister
SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbIntList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return HEPVis_SWIG_Python.SbIntList_append(*args)
    def find(*args): return HEPVis_SWIG_Python.SbIntList_find(*args)
    def insert(*args): return HEPVis_SWIG_Python.SbIntList_insert(*args)
    def __setitem__(*args): return HEPVis_SWIG_Python.SbIntList___setitem__(*args)
    def __getitem__(*args): return HEPVis_SWIG_Python.SbIntList___getitem__(*args)
    def get(*args): return HEPVis_SWIG_Python.SbIntList_get(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbIntList
    __del__ = lambda self : None;
SbIntList_swigregister = HEPVis_SWIG_Python.SbIntList_swigregister
SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbString
    __del__ = lambda self : None;
    hash = staticmethod(HEPVis_SWIG_Python.SbString_hash)
    def getLength(*args): return HEPVis_SWIG_Python.SbString_getLength(*args)
    def makeEmpty(*args): return HEPVis_SWIG_Python.SbString_makeEmpty(*args)
    def getString(*args): return HEPVis_SWIG_Python.SbString_getString(*args)
    def getSubString(*args): return HEPVis_SWIG_Python.SbString_getSubString(*args)
    def deleteSubString(*args): return HEPVis_SWIG_Python.SbString_deleteSubString(*args)
    def addIntString(*args): return HEPVis_SWIG_Python.SbString_addIntString(*args)
    def __iadd__(*args): return HEPVis_SWIG_Python.SbString___iadd__(*args)
    def compareSubString(*args): return HEPVis_SWIG_Python.SbString_compareSubString(*args)
    def sprintf(*args): return HEPVis_SWIG_Python.SbString_sprintf(*args)
    def apply(*args): return HEPVis_SWIG_Python.SbString_apply(*args)
    def find(*args): return HEPVis_SWIG_Python.SbString_find(*args)
    def findAll(*args): return HEPVis_SWIG_Python.SbString_findAll(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SbString___eq__(*args)
    def __nq__(*args): return HEPVis_SWIG_Python.SbString___nq__(*args)
    def __getitem__(*args): return HEPVis_SWIG_Python.SbString___getitem__(*args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(*args): return HEPVis_SWIG_Python.SbString___repr__(*args)
SbString_swigregister = HEPVis_SWIG_Python.SbString_swigregister
SbString_swigregister(SbString)
SbString_hash = HEPVis_SWIG_Python.SbString_hash

class SbName(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbName
    __del__ = lambda self : None;
    def getString(*args): return HEPVis_SWIG_Python.SbName_getString(*args)
    def getLength(*args): return HEPVis_SWIG_Python.SbName_getLength(*args)
    isIdentStartChar = staticmethod(HEPVis_SWIG_Python.SbName_isIdentStartChar)
    isIdentChar = staticmethod(HEPVis_SWIG_Python.SbName_isIdentChar)
    isBaseNameStartChar = staticmethod(HEPVis_SWIG_Python.SbName_isBaseNameStartChar)
    isBaseNameChar = staticmethod(HEPVis_SWIG_Python.SbName_isBaseNameChar)
    def __eq__(*args): return HEPVis_SWIG_Python.SbName___eq__(*args)
    def __nq__(*args): return HEPVis_SWIG_Python.SbName___nq__(*args)
    def __getitem__(*args): return HEPVis_SWIG_Python.SbName___getitem__(*args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(*args): return HEPVis_SWIG_Python.SbName___repr__(*args)
SbName_swigregister = HEPVis_SWIG_Python.SbName_swigregister
SbName_swigregister(SbName)
SbName_isIdentStartChar = HEPVis_SWIG_Python.SbName_isIdentStartChar
SbName_isIdentChar = HEPVis_SWIG_Python.SbName_isIdentChar
SbName_isBaseNameStartChar = HEPVis_SWIG_Python.SbName_isBaseNameStartChar
SbName_isBaseNameChar = HEPVis_SWIG_Python.SbName_isBaseNameChar

class SbTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTime(*args)
        try: self.this.append(this)
        except: self.this = this
    getTimeOfDay = staticmethod(HEPVis_SWIG_Python.SbTime_getTimeOfDay)
    def setToTimeOfDay(*args): return HEPVis_SWIG_Python.SbTime_setToTimeOfDay(*args)
    zero = staticmethod(HEPVis_SWIG_Python.SbTime_zero)
    max = staticmethod(HEPVis_SWIG_Python.SbTime_max)
    maxTime = staticmethod(HEPVis_SWIG_Python.SbTime_maxTime)
    def setValue(*args): return HEPVis_SWIG_Python.SbTime_setValue(*args)
    def setMsecValue(*args): return HEPVis_SWIG_Python.SbTime_setMsecValue(*args)
    def getValue(*args): return HEPVis_SWIG_Python.SbTime_getValue(*args)
    def getMsecValue(*args): return HEPVis_SWIG_Python.SbTime_getMsecValue(*args)
    def format(*args): return HEPVis_SWIG_Python.SbTime_format(*args)
    def formatDate(*args): return HEPVis_SWIG_Python.SbTime_formatDate(*args)
    def parsedate(*args): return HEPVis_SWIG_Python.SbTime_parsedate(*args)
    def __iadd__(*args): return HEPVis_SWIG_Python.SbTime___iadd__(*args)
    def __isub__(*args): return HEPVis_SWIG_Python.SbTime___isub__(*args)
    def __neg__(*args): return HEPVis_SWIG_Python.SbTime___neg__(*args)
    def __imul__(*args): return HEPVis_SWIG_Python.SbTime___imul__(*args)
    def __idiv__(*args): return HEPVis_SWIG_Python.SbTime___idiv__(*args)
    def __mod__(*args): return HEPVis_SWIG_Python.SbTime___mod__(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SbTime___eq__(*args)
    def __ne__(*args): return HEPVis_SWIG_Python.SbTime___ne__(*args)
    def __lt__(*args): return HEPVis_SWIG_Python.SbTime___lt__(*args)
    def __gt__(*args): return HEPVis_SWIG_Python.SbTime___gt__(*args)
    def __le__(*args): return HEPVis_SWIG_Python.SbTime___le__(*args)
    def __ge__(*args): return HEPVis_SWIG_Python.SbTime___ge__(*args)
    def output(*args): return HEPVis_SWIG_Python.SbTime_output(*args)
    def __add__(*args): return HEPVis_SWIG_Python.SbTime___add__(*args)
    def __sub__(*args): return HEPVis_SWIG_Python.SbTime___sub__(*args)
    def __mul__(*args): return HEPVis_SWIG_Python.SbTime___mul__(*args)
    def __rmul__(*args): return HEPVis_SWIG_Python.SbTime___rmul__(*args)
    def __div__(*args): return HEPVis_SWIG_Python.SbTime___div__(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTime
    __del__ = lambda self : None;
SbTime_swigregister = HEPVis_SWIG_Python.SbTime_swigregister
SbTime_swigregister(SbTime)
SbTime_getTimeOfDay = HEPVis_SWIG_Python.SbTime_getTimeOfDay
SbTime_zero = HEPVis_SWIG_Python.SbTime_zero
SbTime_max = HEPVis_SWIG_Python.SbTime_max
SbTime_maxTime = HEPVis_SWIG_Python.SbTime_maxTime

class SoEvent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEvent
    __del__ = lambda self : None;
    def isOfType(*args): return HEPVis_SWIG_Python.SoEvent_isOfType(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEvent_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoEvent_getTypeId(*args)
    def setTime(*args): return HEPVis_SWIG_Python.SoEvent_setTime(*args)
    def getTime(*args): return HEPVis_SWIG_Python.SoEvent_getTime(*args)
    def setPosition(*args): return HEPVis_SWIG_Python.SoEvent_setPosition(*args)
    def getPosition(*args): return HEPVis_SWIG_Python.SoEvent_getPosition(*args)
    def getNormalizedPosition(*args): return HEPVis_SWIG_Python.SoEvent_getNormalizedPosition(*args)
    def setShiftDown(*args): return HEPVis_SWIG_Python.SoEvent_setShiftDown(*args)
    def wasShiftDown(*args): return HEPVis_SWIG_Python.SoEvent_wasShiftDown(*args)
    def setCtrlDown(*args): return HEPVis_SWIG_Python.SoEvent_setCtrlDown(*args)
    def wasCtrlDown(*args): return HEPVis_SWIG_Python.SoEvent_wasCtrlDown(*args)
    def setAltDown(*args): return HEPVis_SWIG_Python.SoEvent_setAltDown(*args)
    def wasAltDown(*args): return HEPVis_SWIG_Python.SoEvent_wasAltDown(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoEvent_initClass)
SoEvent_swigregister = HEPVis_SWIG_Python.SoEvent_swigregister
SoEvent_swigregister(SoEvent)
SoEvent_getClassTypeId = HEPVis_SWIG_Python.SoEvent_getClassTypeId
SoEvent_initClass = HEPVis_SWIG_Python.SoEvent_initClass

class SoNotRec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONTAINER = HEPVis_SWIG_Python.SoNotRec_CONTAINER
    PARENT = HEPVis_SWIG_Python.SoNotRec_PARENT
    SENSOR = HEPVis_SWIG_Python.SoNotRec_SENSOR
    FIELD = HEPVis_SWIG_Python.SoNotRec_FIELD
    ENGINE = HEPVis_SWIG_Python.SoNotRec_ENGINE
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoNotRec(*args)
        try: self.this.append(this)
        except: self.this = this
    def setType(*args): return HEPVis_SWIG_Python.SoNotRec_setType(*args)
    def getBase(*args): return HEPVis_SWIG_Python.SoNotRec_getBase(*args)
    def getType(*args): return HEPVis_SWIG_Python.SoNotRec_getType(*args)
    def getPrevious(*args): return HEPVis_SWIG_Python.SoNotRec_getPrevious(*args)
    def setPrevious(*args): return HEPVis_SWIG_Python.SoNotRec_setPrevious(*args)
    def output(*args): return HEPVis_SWIG_Python.SoNotRec_output(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoNotRec
    __del__ = lambda self : None;
SoNotRec_swigregister = HEPVis_SWIG_Python.SoNotRec_swigregister
SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoNotList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return HEPVis_SWIG_Python.SoNotList_append(*args)
    def setLastType(*args): return HEPVis_SWIG_Python.SoNotList_setLastType(*args)
    def getFirstRec(*args): return HEPVis_SWIG_Python.SoNotList_getFirstRec(*args)
    def getLastRec(*args): return HEPVis_SWIG_Python.SoNotList_getLastRec(*args)
    def getFirstRecAtNode(*args): return HEPVis_SWIG_Python.SoNotList_getFirstRecAtNode(*args)
    def getLastField(*args): return HEPVis_SWIG_Python.SoNotList_getLastField(*args)
    def getLastEngineOutput(*args): return HEPVis_SWIG_Python.SoNotList_getLastEngineOutput(*args)
    def getTimeStamp(*args): return HEPVis_SWIG_Python.SoNotList_getTimeStamp(*args)
    def output(*args): return HEPVis_SWIG_Python.SoNotList_output(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoNotList
    __del__ = lambda self : None;
SoNotList_swigregister = HEPVis_SWIG_Python.SoNotList_swigregister
SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoField
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoField_initClass)
    initClasses = staticmethod(HEPVis_SWIG_Python.SoField_initClasses)
    def setIgnored(*args): return HEPVis_SWIG_Python.SoField_setIgnored(*args)
    def isIgnored(*args): return HEPVis_SWIG_Python.SoField_isIgnored(*args)
    def setDefault(*args): return HEPVis_SWIG_Python.SoField_setDefault(*args)
    def isDefault(*args): return HEPVis_SWIG_Python.SoField_isDefault(*args)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoField_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoField_getClassTypeId)
    def isOfType(*args): return HEPVis_SWIG_Python.SoField_isOfType(*args)
    def enableConnection(*args): return HEPVis_SWIG_Python.SoField_enableConnection(*args)
    def isConnectionEnabled(*args): return HEPVis_SWIG_Python.SoField_isConnectionEnabled(*args)
    def isConnectedFromEngine(*args): return HEPVis_SWIG_Python.SoField_isConnectedFromEngine(*args)
    def getConnectedEngine(*args): return HEPVis_SWIG_Python.SoField_getConnectedEngine(*args)
    def connectFrom(*args): return HEPVis_SWIG_Python.SoField_connectFrom(*args)
    def appendConnection(*args): return HEPVis_SWIG_Python.SoField_appendConnection(*args)
    def isConnectedFromField(*args): return HEPVis_SWIG_Python.SoField_isConnectedFromField(*args)
    def getConnectedField(*args): return HEPVis_SWIG_Python.SoField_getConnectedField(*args)
    def getNumConnections(*args): return HEPVis_SWIG_Python.SoField_getNumConnections(*args)
    def getForwardConnections(*args): return HEPVis_SWIG_Python.SoField_getForwardConnections(*args)
    def getConnections(*args): return HEPVis_SWIG_Python.SoField_getConnections(*args)
    def disconnect(*args): return HEPVis_SWIG_Python.SoField_disconnect(*args)
    def isConnected(*args): return HEPVis_SWIG_Python.SoField_isConnected(*args)
    def setContainer(*args): return HEPVis_SWIG_Python.SoField_setContainer(*args)
    def getContainer(*args): return HEPVis_SWIG_Python.SoField_getContainer(*args)
    def set(*args): return HEPVis_SWIG_Python.SoField_set(*args)
    def shouldWrite(*args): return HEPVis_SWIG_Python.SoField_shouldWrite(*args)
    def touch(*args): return HEPVis_SWIG_Python.SoField_touch(*args)
    def startNotify(*args): return HEPVis_SWIG_Python.SoField_startNotify(*args)
    def notify(*args): return HEPVis_SWIG_Python.SoField_notify(*args)
    def enableNotify(*args): return HEPVis_SWIG_Python.SoField_enableNotify(*args)
    def isNotifyEnabled(*args): return HEPVis_SWIG_Python.SoField_isNotifyEnabled(*args)
    def addAuditor(*args): return HEPVis_SWIG_Python.SoField_addAuditor(*args)
    def removeAuditor(*args): return HEPVis_SWIG_Python.SoField_removeAuditor(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SoField___eq__(*args)
    def __ne__(*args): return HEPVis_SWIG_Python.SoField___ne__(*args)
    def connectionStatusChanged(*args): return HEPVis_SWIG_Python.SoField_connectionStatusChanged(*args)
    def isReadOnly(*args): return HEPVis_SWIG_Python.SoField_isReadOnly(*args)
    def isSame(*args): return HEPVis_SWIG_Python.SoField_isSame(*args)
    def copyFrom(*args): return HEPVis_SWIG_Python.SoField_copyFrom(*args)
    def fixCopy(*args): return HEPVis_SWIG_Python.SoField_fixCopy(*args)
    def referencesCopy(*args): return HEPVis_SWIG_Python.SoField_referencesCopy(*args)
    def copyConnection(*args): return HEPVis_SWIG_Python.SoField_copyConnection(*args)
    def read(*args): return HEPVis_SWIG_Python.SoField_read(*args)
    def write(*args): return HEPVis_SWIG_Python.SoField_write(*args)
    def countWriteRefs(*args): return HEPVis_SWIG_Python.SoField_countWriteRefs(*args)
    NORMAL_FIELD = HEPVis_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = HEPVis_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = HEPVis_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = HEPVis_SWIG_Python.SoField_EXPOSED_FIELD
    def setFieldType(*args): return HEPVis_SWIG_Python.SoField_setFieldType(*args)
    def getFieldType(*args): return HEPVis_SWIG_Python.SoField_getFieldType(*args)
    def getDirty(*args): return HEPVis_SWIG_Python.SoField_getDirty(*args)
    def setDirty(*args): return HEPVis_SWIG_Python.SoField_setDirty(*args)
    def evaluate(*args): return HEPVis_SWIG_Python.SoField_evaluate(*args)
    def get(*args): return HEPVis_SWIG_Python.SoField_get(*args)
SoField_swigregister = HEPVis_SWIG_Python.SoField_swigregister
SoField_swigregister(SoField)
SoField_initClass = HEPVis_SWIG_Python.SoField_initClass
SoField_initClasses = HEPVis_SWIG_Python.SoField_initClasses
SoField_getClassTypeId = HEPVis_SWIG_Python.SoField_getClassTypeId

class SoSField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSField
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoSField_initClass)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSField_getClassTypeId)
SoSField_swigregister = HEPVis_SWIG_Python.SoSField_swigregister
SoSField_swigregister(SoSField)
SoSField_initClass = HEPVis_SWIG_Python.SoSField_initClass
SoSField_getClassTypeId = HEPVis_SWIG_Python.SoSField_getClassTypeId

class SoMField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoMField
    __del__ = lambda self : None;
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoMField_getClassTypeId)
    def getNum(*args): return HEPVis_SWIG_Python.SoMField_getNum(*args)
    def setNum(*args): return HEPVis_SWIG_Python.SoMField_setNum(*args)
    def deleteValues(*args): return HEPVis_SWIG_Python.SoMField_deleteValues(*args)
    def insertSpace(*args): return HEPVis_SWIG_Python.SoMField_insertSpace(*args)
    def set1(*args): return HEPVis_SWIG_Python.SoMField_set1(*args)
    def get1(*args): return HEPVis_SWIG_Python.SoMField_get1(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoMField_initClass)
    def enableDeleteValues(*args): return HEPVis_SWIG_Python.SoMField_enableDeleteValues(*args)
    def isDeleteValuesEnabled(*args): return HEPVis_SWIG_Python.SoMField_isDeleteValuesEnabled(*args)
    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1

    def __len__(*args): return HEPVis_SWIG_Python.SoMField___len__(*args)
SoMField_swigregister = HEPVis_SWIG_Python.SoMField_swigregister
SoMField_swigregister(SoMField)
SoMField_getClassTypeId = HEPVis_SWIG_Python.SoMField_getClassTypeId
SoMField_initClass = HEPVis_SWIG_Python.SoMField_initClass

class PySwigIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return HEPVis_SWIG_Python.PySwigIterator_value(*args)
    def incr(*args): return HEPVis_SWIG_Python.PySwigIterator_incr(*args)
    def decr(*args): return HEPVis_SWIG_Python.PySwigIterator_decr(*args)
    def distance(*args): return HEPVis_SWIG_Python.PySwigIterator_distance(*args)
    def equal(*args): return HEPVis_SWIG_Python.PySwigIterator_equal(*args)
    def copy(*args): return HEPVis_SWIG_Python.PySwigIterator_copy(*args)
    def next(*args): return HEPVis_SWIG_Python.PySwigIterator_next(*args)
    def previous(*args): return HEPVis_SWIG_Python.PySwigIterator_previous(*args)
    def advance(*args): return HEPVis_SWIG_Python.PySwigIterator_advance(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.PySwigIterator___eq__(*args)
    def __ne__(*args): return HEPVis_SWIG_Python.PySwigIterator___ne__(*args)
    def __iadd__(*args): return HEPVis_SWIG_Python.PySwigIterator___iadd__(*args)
    def __isub__(*args): return HEPVis_SWIG_Python.PySwigIterator___isub__(*args)
    def __add__(*args): return HEPVis_SWIG_Python.PySwigIterator___add__(*args)
    def __sub__(*args): return HEPVis_SWIG_Python.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = HEPVis_SWIG_Python.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class SbArguments(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbArguments(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbArguments
    __del__ = lambda self : None;
    def isAnArgument(*args): return HEPVis_SWIG_Python.SbArguments_isAnArgument(*args)
    def number(*args): return HEPVis_SWIG_Python.SbArguments_number(*args)
    def find(*args): return HEPVis_SWIG_Python.SbArguments_find(*args)
    def last(*args): return HEPVis_SWIG_Python.SbArguments_last(*args)
    def file(*args): return HEPVis_SWIG_Python.SbArguments_file(*args)
SbArguments_swigregister = HEPVis_SWIG_Python.SbArguments_swigregister
SbArguments_swigregister(SbArguments)

SbFROUND = HEPVis_SWIG_Python.SbFROUND
class SbAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxis
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAxis(*args)
        try: self.this.append(this)
        except: self.this = this
    def setLogScale(*args): return HEPVis_SWIG_Python.SbAxis_setLogScale(*args)
    def setMinimumValue(*args): return HEPVis_SWIG_Python.SbAxis_setMinimumValue(*args)
    def setMaximumValue(*args): return HEPVis_SWIG_Python.SbAxis_setMaximumValue(*args)
    def getMinimumValue(*args): return HEPVis_SWIG_Python.SbAxis_getMinimumValue(*args)
    def getMaximumValue(*args): return HEPVis_SWIG_Python.SbAxis_getMaximumValue(*args)
    def isLogScale(*args): return HEPVis_SWIG_Python.SbAxis_isLogScale(*args)
    def adjustAxis(*args): return HEPVis_SWIG_Python.SbAxis_adjustAxis(*args)
SbAxis_swigregister = HEPVis_SWIG_Python.SbAxis_swigregister
SbAxis_swigregister(SbAxis)

class SbAxisHPLOT_Text(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAxisHPLOT_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    fX = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fX_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fX_set)
    fY = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fY_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fY_set)
    fAngle = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAngle_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAngle_set)
    fSize = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fSize_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fSize_set)
    fString = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fString_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fString_set)
    fAlign = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAlign_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAlign_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxisHPLOT_Text
    __del__ = lambda self : None;
SbAxisHPLOT_Text_swigregister = HEPVis_SWIG_Python.SbAxisHPLOT_Text_swigregister
SbAxisHPLOT_Text_swigregister(SbAxisHPLOT_Text)

class SbAxisHPLOT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAxisHPLOT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxisHPLOT
    __del__ = lambda self : None;
    def paint(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_paint(*args)
    def setTitle(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTitle(*args)
    def setTimeFormat(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTimeFormat(*args)
    def setTimeOffset(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTimeOffset(*args)
    def setTickSize(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTickSize(*args)
    def setLabelOffset(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setLabelOffset(*args)
    def setLabelSize(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setLabelSize(*args)
    def setTitleOffset(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTitleOffset(*args)
    def setTitleSize(*args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTitleSize(*args)
SbAxisHPLOT_swigregister = HEPVis_SWIG_Python.SbAxisHPLOT_swigregister
SbAxisHPLOT_swigregister(SbAxisHPLOT)

class bitmap_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_bitmap_info(*args)
        try: self.this.append(this)
        except: self.this = this
    blur_bitmap = _swig_property(HEPVis_SWIG_Python.bitmap_info_blur_bitmap_get, HEPVis_SWIG_Python.bitmap_info_blur_bitmap_set)
    crop_bitmap = _swig_property(HEPVis_SWIG_Python.bitmap_info_crop_bitmap_get, HEPVis_SWIG_Python.bitmap_info_crop_bitmap_set)
    make_transparent = _swig_property(HEPVis_SWIG_Python.bitmap_info_make_transparent_get, HEPVis_SWIG_Python.bitmap_info_make_transparent_set)
    bitmap_scale_factor = _swig_property(HEPVis_SWIG_Python.bitmap_info_bitmap_scale_factor_get, HEPVis_SWIG_Python.bitmap_info_bitmap_scale_factor_set)
    ofile_pattern = _swig_property(HEPVis_SWIG_Python.bitmap_info_ofile_pattern_get, HEPVis_SWIG_Python.bitmap_info_ofile_pattern_set)
    ofile_name = _swig_property(HEPVis_SWIG_Python.bitmap_info_ofile_name_get, HEPVis_SWIG_Python.bitmap_info_ofile_name_set)
    ofile_type = _swig_property(HEPVis_SWIG_Python.bitmap_info_ofile_type_get, HEPVis_SWIG_Python.bitmap_info_ofile_type_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_bitmap_info
    __del__ = lambda self : None;
bitmap_info_swigregister = HEPVis_SWIG_Python.bitmap_info_swigregister
bitmap_info_swigregister(bitmap_info)

DVI2BITMAPURL = HEPVis_SWIG_Python.DVI2BITMAPURL
class SbDVI(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbDVI(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDVI
    __del__ = lambda self : None;
    def getImageFromStream(*args): return HEPVis_SWIG_Python.SbDVI_getImageFromStream(*args)
    def setFontGen(*args): return HEPVis_SWIG_Python.SbDVI_setFontGen(*args)
    def setForeground(*args): return HEPVis_SWIG_Python.SbDVI_setForeground(*args)
    def setBackground(*args): return HEPVis_SWIG_Python.SbDVI_setBackground(*args)
    def setTransparent(*args): return HEPVis_SWIG_Python.SbDVI_setTransparent(*args)
    def setBlur(*args): return HEPVis_SWIG_Python.SbDVI_setBlur(*args)
    def setBitmapScaleFactor(*args): return HEPVis_SWIG_Python.SbDVI_setBitmapScaleFactor(*args)
    def setResolution(*args): return HEPVis_SWIG_Python.SbDVI_setResolution(*args)
SbDVI_swigregister = HEPVis_SWIG_Python.SbDVI_swigregister
SbDVI_swigregister(SbDVI)

class SbFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def openDirectory(*args): return HEPVis_SWIG_Python.SbFile_openDirectory(*args)
    def getDirectoryEntry(*args): return HEPVis_SWIG_Python.SbFile_getDirectoryEntry(*args)
    def closeDirectory(*args): return HEPVis_SWIG_Python.SbFile_closeDirectory(*args)
    getDirectoryFiles = staticmethod(HEPVis_SWIG_Python.SbFile_getDirectoryFiles)
    getDirectoryDirectories = staticmethod(HEPVis_SWIG_Python.SbFile_getDirectoryDirectories)
    dumpDirectory = staticmethod(HEPVis_SWIG_Python.SbFile_dumpDirectory)
    isDirectory = staticmethod(HEPVis_SWIG_Python.SbFile_isDirectory)
    getWorkingDirectory = staticmethod(HEPVis_SWIG_Python.SbFile_getWorkingDirectory)
    tmpname = staticmethod(HEPVis_SWIG_Python.SbFile_tmpname)
    getFullName = staticmethod(HEPVis_SWIG_Python.SbFile_getFullName)
    exists = staticmethod(HEPVis_SWIG_Python.SbFile_exists)
    remove = staticmethod(HEPVis_SWIG_Python.SbFile_remove)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFile
    __del__ = lambda self : None;
SbFile_swigregister = HEPVis_SWIG_Python.SbFile_swigregister
SbFile_swigregister(SbFile)
SbFile_getDirectoryFiles = HEPVis_SWIG_Python.SbFile_getDirectoryFiles
SbFile_getDirectoryDirectories = HEPVis_SWIG_Python.SbFile_getDirectoryDirectories
SbFile_dumpDirectory = HEPVis_SWIG_Python.SbFile_dumpDirectory
SbFile_isDirectory = HEPVis_SWIG_Python.SbFile_isDirectory
SbFile_getWorkingDirectory = HEPVis_SWIG_Python.SbFile_getWorkingDirectory
SbFile_tmpname = HEPVis_SWIG_Python.SbFile_tmpname
SbFile_getFullName = HEPVis_SWIG_Python.SbFile_getFullName
SbFile_exists = HEPVis_SWIG_Python.SbFile_exists
SbFile_remove = HEPVis_SWIG_Python.SbFile_remove

class SbFITS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getImageFromStream = staticmethod(HEPVis_SWIG_Python.SbFITS_getImageFromStream)
    getHeaderFromStream = staticmethod(HEPVis_SWIG_Python.SbFITS_getHeaderFromStream)
    dumpHeaderInStream = staticmethod(HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream)
    putImageInStream = staticmethod(HEPVis_SWIG_Python.SbFITS_putImageInStream)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbFITS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFITS
    __del__ = lambda self : None;
SbFITS_swigregister = HEPVis_SWIG_Python.SbFITS_swigregister
SbFITS_swigregister(SbFITS)
SbFITS_getImageFromStream = HEPVis_SWIG_Python.SbFITS_getImageFromStream
SbFITS_getHeaderFromStream = HEPVis_SWIG_Python.SbFITS_getHeaderFromStream
SbFITS_dumpHeaderInStream = HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream
SbFITS_putImageInStream = HEPVis_SWIG_Python.SbFITS_putImageInStream

class SbGIF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getImageFromStream = staticmethod(HEPVis_SWIG_Python.SbGIF_getImageFromStream)
    putBytesInStream = staticmethod(HEPVis_SWIG_Python.SbGIF_putBytesInStream)
    putImageInStream = staticmethod(HEPVis_SWIG_Python.SbGIF_putImageInStream)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbGIF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbGIF
    __del__ = lambda self : None;
SbGIF_swigregister = HEPVis_SWIG_Python.SbGIF_swigregister
SbGIF_swigregister(SbGIF)
SbGIF_getImageFromStream = HEPVis_SWIG_Python.SbGIF_getImageFromStream
SbGIF_putBytesInStream = HEPVis_SWIG_Python.SbGIF_putBytesInStream
SbGIF_putImageInStream = HEPVis_SWIG_Python.SbGIF_putImageInStream

class SbHatch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbHatch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbHatch
    __del__ = lambda self : None;
    def computePolyline(*args): return HEPVis_SWIG_Python.SbHatch_computePolyline(*args)
    def checkPolyline(*args): return HEPVis_SWIG_Python.SbHatch_checkPolyline(*args)
    def setSpacing(*args): return HEPVis_SWIG_Python.SbHatch_setSpacing(*args)
    def setAngle(*args): return HEPVis_SWIG_Python.SbHatch_setAngle(*args)
    def setOffset(*args): return HEPVis_SWIG_Python.SbHatch_setOffset(*args)
    def setOffsetPoint(*args): return HEPVis_SWIG_Python.SbHatch_setOffsetPoint(*args)
    def setPrecisionFactor(*args): return HEPVis_SWIG_Python.SbHatch_setPrecisionFactor(*args)
    def setStripWidth(*args): return HEPVis_SWIG_Python.SbHatch_setStripWidth(*args)
    def getSpacing(*args): return HEPVis_SWIG_Python.SbHatch_getSpacing(*args)
    def getAngle(*args): return HEPVis_SWIG_Python.SbHatch_getAngle(*args)
    def getOffset(*args): return HEPVis_SWIG_Python.SbHatch_getOffset(*args)
    def getOffsetPoint(*args): return HEPVis_SWIG_Python.SbHatch_getOffsetPoint(*args)
    def getPrecisionFactor(*args): return HEPVis_SWIG_Python.SbHatch_getPrecisionFactor(*args)
    def getStripWidth(*args): return HEPVis_SWIG_Python.SbHatch_getStripWidth(*args)
    def getNormal(*args): return HEPVis_SWIG_Python.SbHatch_getNormal(*args)
    def getNoPoints(*args): return HEPVis_SWIG_Python.SbHatch_getNoPoints(*args)
    def getPoints(*args): return HEPVis_SWIG_Python.SbHatch_getPoints(*args)
    def getNoVertices(*args): return HEPVis_SWIG_Python.SbHatch_getNoVertices(*args)
    def getVertices(*args): return HEPVis_SWIG_Python.SbHatch_getVertices(*args)
SbHatch_swigregister = HEPVis_SWIG_Python.SbHatch_swigregister
SbHatch_swigregister(SbHatch)

class SbHatching(SbHatch):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbHatching
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbHatching(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPolyline(*args): return HEPVis_SWIG_Python.SbHatching_addPolyline(*args)
    def getHatchPointsList(*args): return HEPVis_SWIG_Python.SbHatching_getHatchPointsList(*args)
    def getHatchNumVerticesList(*args): return HEPVis_SWIG_Python.SbHatching_getHatchNumVerticesList(*args)
    def getCornerMinBB(*args): return HEPVis_SWIG_Python.SbHatching_getCornerMinBB(*args)
    def getCornerMaxBB(*args): return HEPVis_SWIG_Python.SbHatching_getCornerMaxBB(*args)
    def getNumPointsList(*args): return HEPVis_SWIG_Python.SbHatching_getNumPointsList(*args)
    def getNumVertices(*args): return HEPVis_SWIG_Python.SbHatching_getNumVertices(*args)
SbHatching_swigregister = HEPVis_SWIG_Python.SbHatching_swigregister
SbHatching_swigregister(SbHatching)

class SbJGIF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    beginGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream)
    putColormapInGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream)
    putImageInGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream)
    endGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_endGIF_Stream)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbJGIF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbJGIF
    __del__ = lambda self : None;
SbJGIF_swigregister = HEPVis_SWIG_Python.SbJGIF_swigregister
SbJGIF_swigregister(SbJGIF)
SbJGIF_beginGIF_Stream = HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream
SbJGIF_putColormapInGIF_Stream = HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream
SbJGIF_putImageInGIF_Stream = HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream
SbJGIF_endGIF_Stream = HEPVis_SWIG_Python.SbJGIF_endGIF_Stream

class SbJPEG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    writeFile = staticmethod(HEPVis_SWIG_Python.SbJPEG_writeFile)
    readFile = staticmethod(HEPVis_SWIG_Python.SbJPEG_readFile)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbJPEG(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbJPEG
    __del__ = lambda self : None;
SbJPEG_swigregister = HEPVis_SWIG_Python.SbJPEG_swigregister
SbJPEG_swigregister(SbJPEG)
SbJPEG_writeFile = HEPVis_SWIG_Python.SbJPEG_writeFile
SbJPEG_readFile = HEPVis_SWIG_Python.SbJPEG_readFile

class SbLatex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def fileToDvi(*args): return HEPVis_SWIG_Python.SbLatex_fileToDvi(*args)
    def strToDvi(*args): return HEPVis_SWIG_Python.SbLatex_strToDvi(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbLatex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbLatex
    __del__ = lambda self : None;
SbLatex_swigregister = HEPVis_SWIG_Python.SbLatex_swigregister
SbLatex_swigregister(SbLatex)

class SbLUT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    IDENTITY = HEPVis_SWIG_Python.SbLUT_IDENTITY
    LINEAR = HEPVis_SWIG_Python.SbLUT_LINEAR
    LOG = HEPVis_SWIG_Python.SbLUT_LOG
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbLUT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbLUT
    __del__ = lambda self : None;
    def initialize(*args): return HEPVis_SWIG_Python.SbLUT_initialize(*args)
    def getCellNumber(*args): return HEPVis_SWIG_Python.SbLUT_getCellNumber(*args)
    def getCells(*args): return HEPVis_SWIG_Python.SbLUT_getCells(*args)
SbLUT_swigregister = HEPVis_SWIG_Python.SbLUT_swigregister
SbLUT_swigregister(SbLUT)

SbMarkerDot = HEPVis_SWIG_Python.SbMarkerDot
SbMarkerPlus = HEPVis_SWIG_Python.SbMarkerPlus
SbMarkerAsterisk = HEPVis_SWIG_Python.SbMarkerAsterisk
SbMarkerCross = HEPVis_SWIG_Python.SbMarkerCross
SbMarkerStar = HEPVis_SWIG_Python.SbMarkerStar
SbMarkerCircleLine = HEPVis_SWIG_Python.SbMarkerCircleLine
SbMarkerCircleFilled = HEPVis_SWIG_Python.SbMarkerCircleFilled
SbMarkerTriangleUpLine = HEPVis_SWIG_Python.SbMarkerTriangleUpLine
SbMarkerTriangleUpFilled = HEPVis_SWIG_Python.SbMarkerTriangleUpFilled
SbMarkerTriangleDownLine = HEPVis_SWIG_Python.SbMarkerTriangleDownLine
SbMarkerTriangleDownFilled = HEPVis_SWIG_Python.SbMarkerTriangleDownFilled
SbMarkerDavidStarLine = HEPVis_SWIG_Python.SbMarkerDavidStarLine
SbMarkerDavidStarFilled = HEPVis_SWIG_Python.SbMarkerDavidStarFilled
SbMarkerSwissCrossLine = HEPVis_SWIG_Python.SbMarkerSwissCrossLine
SbMarkerSwissCrossFilled = HEPVis_SWIG_Python.SbMarkerSwissCrossFilled
SbMarkerDiamondLine = HEPVis_SWIG_Python.SbMarkerDiamondLine
SbMarkerDiamondFilled = HEPVis_SWIG_Python.SbMarkerDiamondFilled
SbMarkerSquareLine = HEPVis_SWIG_Python.SbMarkerSquareLine
SbMarkerSquareFilled = HEPVis_SWIG_Python.SbMarkerSquareFilled
SbMarkerPentaStarLine = HEPVis_SWIG_Python.SbMarkerPentaStarLine
SbMarkerPentaStarFilled = HEPVis_SWIG_Python.SbMarkerPentaStarFilled
SbAreaSolid = HEPVis_SWIG_Python.SbAreaSolid
SbAreaHatched = HEPVis_SWIG_Python.SbAreaHatched
SbAreaChecker = HEPVis_SWIG_Python.SbAreaChecker
SbAreaEdged = HEPVis_SWIG_Python.SbAreaEdged
SbProjectionNone = HEPVis_SWIG_Python.SbProjectionNone
SbProjectionRZ = HEPVis_SWIG_Python.SbProjectionRZ
SbProjectionPHIZ = HEPVis_SWIG_Python.SbProjectionPHIZ
SbProjectionZR = HEPVis_SWIG_Python.SbProjectionZR
SbProjectionZPHI = HEPVis_SWIG_Python.SbProjectionZPHI
SbPaintingUniform = HEPVis_SWIG_Python.SbPaintingUniform
SbPaintingByValue = HEPVis_SWIG_Python.SbPaintingByValue
SbPaintingByLevel = HEPVis_SWIG_Python.SbPaintingByLevel
SbPaintingGreyScale = HEPVis_SWIG_Python.SbPaintingGreyScale
SbPaintingVioletToRed = HEPVis_SWIG_Python.SbPaintingVioletToRed
SbPaintingGreyScaleInverse = HEPVis_SWIG_Python.SbPaintingGreyScaleInverse
SbHatchingNone = HEPVis_SWIG_Python.SbHatchingNone
SbHatchingRight = HEPVis_SWIG_Python.SbHatchingRight
SbHatchingLeft = HEPVis_SWIG_Python.SbHatchingLeft
SbHatchingLeftAndRight = HEPVis_SWIG_Python.SbHatchingLeftAndRight
SbLinePattern_solid = HEPVis_SWIG_Python.SbLinePattern_solid
SbLinePattern_dashed = HEPVis_SWIG_Python.SbLinePattern_dashed
SbLinePattern_dotted = HEPVis_SWIG_Python.SbLinePattern_dotted
SbLinePattern_dash_dotted = HEPVis_SWIG_Python.SbLinePattern_dash_dotted
SbLinePattern_s_solid = HEPVis_SWIG_Python.SbLinePattern_s_solid
SbLinePattern_s_dashed = HEPVis_SWIG_Python.SbLinePattern_s_dashed
SbLinePattern_s_dotted = HEPVis_SWIG_Python.SbLinePattern_s_dotted
SbLinePattern_s_dash_dotted = HEPVis_SWIG_Python.SbLinePattern_s_dash_dotted
SbModeling_boxes = HEPVis_SWIG_Python.SbModeling_boxes
SbModeling_wire_boxes = HEPVis_SWIG_Python.SbModeling_wire_boxes
SbModeling_lines = HEPVis_SWIG_Python.SbModeling_lines
SbModeling_segments = HEPVis_SWIG_Python.SbModeling_segments
SbModeling_points = HEPVis_SWIG_Python.SbModeling_points
SbModeling_top_lines = HEPVis_SWIG_Python.SbModeling_top_lines
SbModeling_texts = HEPVis_SWIG_Python.SbModeling_texts
SbModeling_curve = HEPVis_SWIG_Python.SbModeling_curve
SbModeling_filled_curve = HEPVis_SWIG_Python.SbModeling_filled_curve
SbModeling_bar_chart = HEPVis_SWIG_Python.SbModeling_bar_chart
SbModeling_solid = HEPVis_SWIG_Python.SbModeling_solid
SbModeling_wire_frame = HEPVis_SWIG_Python.SbModeling_wire_frame
SbModeling_reduced_wire_frame = HEPVis_SWIG_Python.SbModeling_reduced_wire_frame
SbModeling_polygon = HEPVis_SWIG_Python.SbModeling_polygon
SbModeling_none = HEPVis_SWIG_Python.SbModeling_none
SbEncoding_none = HEPVis_SWIG_Python.SbEncoding_none
SbEncoding_PAW = HEPVis_SWIG_Python.SbEncoding_PAW
SbEncoding_Latex = HEPVis_SWIG_Python.SbEncoding_Latex
SbTickModeling_none = HEPVis_SWIG_Python.SbTickModeling_none
SbTickModeling_hippo = HEPVis_SWIG_Python.SbTickModeling_hippo
SbTickModeling_hplot = HEPVis_SWIG_Python.SbTickModeling_hplot
SbPainting_uniform = HEPVis_SWIG_Python.SbPainting_uniform
SbPainting_by_value = HEPVis_SWIG_Python.SbPainting_by_value
SbPainting_by_level = HEPVis_SWIG_Python.SbPainting_by_level
SbPainting_grey_scale = HEPVis_SWIG_Python.SbPainting_grey_scale
SbPainting_violet_to_red = HEPVis_SWIG_Python.SbPainting_violet_to_red
SbFont_ROOT_12 = HEPVis_SWIG_Python.SbFont_ROOT_12
SbFont_ROOT_22 = HEPVis_SWIG_Python.SbFont_ROOT_22
SbFont_ROOT_32 = HEPVis_SWIG_Python.SbFont_ROOT_32
SbFont_ROOT_42 = HEPVis_SWIG_Python.SbFont_ROOT_42
SbFont_ROOT_52 = HEPVis_SWIG_Python.SbFont_ROOT_52
SbFont_ROOT_62 = HEPVis_SWIG_Python.SbFont_ROOT_62
SbFont_ROOT_72 = HEPVis_SWIG_Python.SbFont_ROOT_72
SbFont_ROOT_82 = HEPVis_SWIG_Python.SbFont_ROOT_82
SbFont_ROOT_92 = HEPVis_SWIG_Python.SbFont_ROOT_92
SbFont_ROOT_102 = HEPVis_SWIG_Python.SbFont_ROOT_102
SbFont_ROOT_112 = HEPVis_SWIG_Python.SbFont_ROOT_112
SbFont_ROOT_122 = HEPVis_SWIG_Python.SbFont_ROOT_122
SbFont_ROOT_132 = HEPVis_SWIG_Python.SbFont_ROOT_132
SbFont_ROOT_142 = HEPVis_SWIG_Python.SbFont_ROOT_142
SbFont_Hershey = HEPVis_SWIG_Python.SbFont_Hershey
SbFont_times = HEPVis_SWIG_Python.SbFont_times
SbLightModel_base_color = HEPVis_SWIG_Python.SbLightModel_base_color
SbLightModel_phong = HEPVis_SWIG_Python.SbLightModel_phong
SbPrimitivePoints = HEPVis_SWIG_Python.SbPrimitivePoints
SbPrimitiveLineStrip = HEPVis_SWIG_Python.SbPrimitiveLineStrip
SbPrimitiveLineLoop = HEPVis_SWIG_Python.SbPrimitiveLineLoop
SbPrimitiveLines = HEPVis_SWIG_Python.SbPrimitiveLines
SbPrimitivePolygon = HEPVis_SWIG_Python.SbPrimitivePolygon
class SbPainterContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fRed = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fRed_get, HEPVis_SWIG_Python.SbPainterContext_fRed_set)
    fGreen = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fGreen_get, HEPVis_SWIG_Python.SbPainterContext_fGreen_set)
    fBlue = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fBlue_get, HEPVis_SWIG_Python.SbPainterContext_fBlue_set)
    fLineWidth = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fLineWidth_get, HEPVis_SWIG_Python.SbPainterContext_fLineWidth_set)
    fLinePattern = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fLinePattern_get, HEPVis_SWIG_Python.SbPainterContext_fLinePattern_set)
    fMarkerSize = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fMarkerSize_get, HEPVis_SWIG_Python.SbPainterContext_fMarkerSize_set)
    fMarkerStyle = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fMarkerStyle_get, HEPVis_SWIG_Python.SbPainterContext_fMarkerStyle_set)
    fAreaStyle = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fAreaStyle_get, HEPVis_SWIG_Python.SbPainterContext_fAreaStyle_set)
    fPolygonMode = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fPolygonMode_get, HEPVis_SWIG_Python.SbPainterContext_fPolygonMode_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPainterContext(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainterContext
    __del__ = lambda self : None;
SbPainterContext_swigregister = HEPVis_SWIG_Python.SbPainterContext_swigregister
SbPainterContext_swigregister(SbPainterContext)

class SbPainter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainter
    __del__ = lambda self : None;
    def setWindowSize(*args): return HEPVis_SWIG_Python.SbPainter_setWindowSize(*args)
    def enableEdges(*args): return HEPVis_SWIG_Python.SbPainter_enableEdges(*args)
    def beginTraversal(*args): return HEPVis_SWIG_Python.SbPainter_beginTraversal(*args)
    def clearColorBuffer(*args): return HEPVis_SWIG_Python.SbPainter_clearColorBuffer(*args)
    def drawPrimitive(*args): return HEPVis_SWIG_Python.SbPainter_drawPrimitive(*args)
    def endTraversal(*args): return HEPVis_SWIG_Python.SbPainter_endTraversal(*args)
SbPainter_swigregister = HEPVis_SWIG_Python.SbPainter_swigregister
SbPainter_swigregister(SbPainter)

class SbPainterPS(SbPainter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPainterPS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainterPS
    __del__ = lambda self : None;
    def beginTraversal(*args): return HEPVis_SWIG_Python.SbPainterPS_beginTraversal(*args)
    def clearColorBuffer(*args): return HEPVis_SWIG_Python.SbPainterPS_clearColorBuffer(*args)
    def drawPrimitive(*args): return HEPVis_SWIG_Python.SbPainterPS_drawPrimitive(*args)
    def endTraversal(*args): return HEPVis_SWIG_Python.SbPainterPS_endTraversal(*args)
    def setColorScheme(*args): return HEPVis_SWIG_Python.SbPainterPS_setColorScheme(*args)
    def setOrientation(*args): return HEPVis_SWIG_Python.SbPainterPS_setOrientation(*args)
    def setBackgroundDrawn(*args): return HEPVis_SWIG_Python.SbPainterPS_setBackgroundDrawn(*args)
    def setBitsPerPixel(*args): return HEPVis_SWIG_Python.SbPainterPS_setBitsPerPixel(*args)
    def setLineWidth(*args): return HEPVis_SWIG_Python.SbPainterPS_setLineWidth(*args)
    def getStream(*args): return HEPVis_SWIG_Python.SbPainterPS_getStream(*args)
    def setFileName(*args): return HEPVis_SWIG_Python.SbPainterPS_setFileName(*args)
    def getFileName(*args): return HEPVis_SWIG_Python.SbPainterPS_getFileName(*args)
    def openFileForWriting(*args): return HEPVis_SWIG_Python.SbPainterPS_openFileForWriting(*args)
    def closeStream(*args): return HEPVis_SWIG_Python.SbPainterPS_closeStream(*args)
    def putPageScaleInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putPageScaleInStream(*args)
    def putSaveStateInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putSaveStateInStream(*args)
    def putRestoreStateInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putRestoreStateInStream(*args)
    def putTranslationInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putTranslationInStream(*args)
    def putScaleInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putScaleInStream(*args)
    def putBeginPageInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putBeginPageInStream(*args)
    def putEndPageInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putEndPageInStream(*args)
    def putRGB_InStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putRGB_InStream(*args)
    def putMarkerSizeInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putMarkerSizeInStream(*args)
    def putMarkerStyleInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putMarkerStyleInStream(*args)
    def putBackgroundInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putBackgroundInStream(*args)
    def putFrameInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putFrameInStream(*args)
    def putRotateInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putRotateInStream(*args)
    def putNewPathInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putNewPathInStream(*args)
    def putStrokeInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putStrokeInStream(*args)
    def putFillInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putFillInStream(*args)
    def putClosePathInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putClosePathInStream(*args)
    def putCapInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putCapInStream(*args)
    def putLineToInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putLineToInStream(*args)
    def putMoveInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putMoveInStream(*args)
    def putCircleInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putCircleInStream(*args)
    def putLineWidthInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putLineWidthInStream(*args)
    def putLinePatternInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putLinePatternInStream(*args)
    def putImageInStream(*args): return HEPVis_SWIG_Python.SbPainterPS_putImageInStream(*args)
SbPainterPS_swigregister = HEPVis_SWIG_Python.SbPainterPS_swigregister
SbPainterPS_swigregister(SbPainterPS)

figure2bitmap = HEPVis_SWIG_Python.figure2bitmap
rotateBitmap = HEPVis_SWIG_Python.rotateBitmap
createBarBitmap = HEPVis_SWIG_Python.createBarBitmap
rotatePixmap = HEPVis_SWIG_Python.rotatePixmap
GIFToGL = HEPVis_SWIG_Python.GIFToGL
JPEGToGL = HEPVis_SWIG_Python.JPEGToGL
getRGB = HEPVis_SWIG_Python.getRGB
FITSToGL = HEPVis_SWIG_Python.FITSToGL
class SbPlottableObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableObject
    __del__ = lambda self : None;
    def isValid(*args): return HEPVis_SWIG_Python.SbPlottableObject_isValid(*args)
    def cast(*args): return HEPVis_SWIG_Python.SbPlottableObject_cast(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.SbPlottableObject_getInfos(*args)
    def getName(*args): return HEPVis_SWIG_Python.SbPlottableObject_getName(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.SbPlottableObject_getLabel(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.SbPlottableObject_getLegend(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.SbPlottableObject_getDimension(*args)
SbPlottableObject_swigregister = HEPVis_SWIG_Python.SbPlottableObject_swigregister
SbPlottableObject_swigregister(SbPlottableObject)

class SbPlottableBins1D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableBins1D
    __del__ = lambda self : None;
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBins(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisNumberOfBins(*args)
    def getAxisMinimum(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisMinimum(*args)
    def getAxisMaximum(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisMaximum(*args)
    def getBinLowerEdge(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinLowerEdge(*args)
    def getBinUpperEdge(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinUpperEdge(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinBar(*args)
SbPlottableBins1D_swigregister = HEPVis_SWIG_Python.SbPlottableBins1D_swigregister
SbPlottableBins1D_swigregister(SbPlottableBins1D)

class SbPlottableBins2D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableBins2D
    __del__ = lambda self : None;
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBinsX(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisNumberOfBinsX(*args)
    def getAxisMinimumX(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMinimumX(*args)
    def getAxisMaximumX(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMaximumX(*args)
    def getAxisNumberOfBinsY(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisNumberOfBinsY(*args)
    def getAxisMinimumY(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMinimumY(*args)
    def getAxisMaximumY(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMaximumY(*args)
    def getBinLowerEdgeX(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinLowerEdgeX(*args)
    def getBinUpperEdgeX(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinUpperEdgeX(*args)
    def getBinLowerEdgeY(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinLowerEdgeY(*args)
    def getBinUpperEdgeY(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinUpperEdgeY(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinBar(*args)
SbPlottableBins2D_swigregister = HEPVis_SWIG_Python.SbPlottableBins2D_swigregister
SbPlottableBins2D_swigregister(SbPlottableBins2D)

class SbPlottablePoints2D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePoints2D
    __del__ = lambda self : None;
    def getAxisMinimumX(*args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMinimumX(*args)
    def getAxisMaximumX(*args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMaximumX(*args)
    def getAxisMinimumY(*args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMinimumY(*args)
    def getAxisMaximumY(*args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMaximumY(*args)
    def getNumberOfPoints(*args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getNumberOfPoints(*args)
    def getIthPoint(*args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getIthPoint(*args)
SbPlottablePoints2D_swigregister = HEPVis_SWIG_Python.SbPlottablePoints2D_swigregister
SbPlottablePoints2D_swigregister(SbPlottablePoints2D)

class SbPlottablePoints3D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePoints3D
    __del__ = lambda self : None;
    def getAxisMinimumX(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumX(*args)
    def getAxisMaximumX(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumX(*args)
    def getAxisMinimumY(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumY(*args)
    def getAxisMaximumY(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumY(*args)
    def getAxisMinimumZ(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumZ(*args)
    def getAxisMaximumZ(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumZ(*args)
    def getNumberOfPoints(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getNumberOfPoints(*args)
    def getIthPoint(*args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getIthPoint(*args)
SbPlottablePoints3D_swigregister = HEPVis_SWIG_Python.SbPlottablePoints3D_swigregister
SbPlottablePoints3D_swigregister(SbPlottablePoints3D)

class SbPlottableFunction1D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableFunction1D
    __del__ = lambda self : None;
    def value(*args): return HEPVis_SWIG_Python.SbPlottableFunction1D_value(*args)
    def getNumberOfStepsX(*args): return HEPVis_SWIG_Python.SbPlottableFunction1D_getNumberOfStepsX(*args)
    def getMinimumX(*args): return HEPVis_SWIG_Python.SbPlottableFunction1D_getMinimumX(*args)
    def getMaximumX(*args): return HEPVis_SWIG_Python.SbPlottableFunction1D_getMaximumX(*args)
SbPlottableFunction1D_swigregister = HEPVis_SWIG_Python.SbPlottableFunction1D_swigregister
SbPlottableFunction1D_swigregister(SbPlottableFunction1D)

class SbPlottableFunction2D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableFunction2D
    __del__ = lambda self : None;
    def value(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_value(*args)
    def getNumberOfStepsX(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfStepsX(*args)
    def getMinimumX(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMinimumX(*args)
    def getMaximumX(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMaximumX(*args)
    def getNumberOfStepsY(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfStepsY(*args)
    def getMinimumY(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMinimumY(*args)
    def getMaximumY(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMaximumY(*args)
    def getNumberOfPoints(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfPoints(*args)
    def getIthPoint(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getIthPoint(*args)
    def setIthPoint(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_setIthPoint(*args)
    def dragger_update_points(*args): return HEPVis_SWIG_Python.SbPlottableFunction2D_dragger_update_points(*args)
SbPlottableFunction2D_swigregister = HEPVis_SWIG_Python.SbPlottableFunction2D_swigregister
SbPlottableFunction2D_swigregister(SbPlottableFunction2D)

class SbPlottablePrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePrimitive
    __del__ = lambda self : None;
    def cast(*args): return HEPVis_SWIG_Python.SbPlottablePrimitive_cast(*args)
SbPlottablePrimitive_swigregister = HEPVis_SWIG_Python.SbPlottablePrimitive_swigregister
SbPlottablePrimitive_swigregister(SbPlottablePrimitive)

SbPlottableObject_s = HEPVis_SWIG_Python.SbPlottableObject_s
SbPlottableBins1D_s = HEPVis_SWIG_Python.SbPlottableBins1D_s
SbPlottableBins2D_s = HEPVis_SWIG_Python.SbPlottableBins2D_s
SbPlottablePoints2D_s = HEPVis_SWIG_Python.SbPlottablePoints2D_s
SbPlottablePoints3D_s = HEPVis_SWIG_Python.SbPlottablePoints3D_s
SbPlottableFunction1D_s = HEPVis_SWIG_Python.SbPlottableFunction1D_s
SbPlottableFunction2D_s = HEPVis_SWIG_Python.SbPlottableFunction2D_s
SbPlottablePrimitive_s = HEPVis_SWIG_Python.SbPlottablePrimitive_s
Sb_plotter = HEPVis_SWIG_Python.Sb_plotter
Sb_data = HEPVis_SWIG_Python.Sb_data
class SbRotation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRotation
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def multVec(*args): return HEPVis_SWIG_Python.SbRotation_multVec(*args)
SbRotation_swigregister = HEPVis_SWIG_Python.SbRotation_swigregister
SbRotation_swigregister(SbRotation)

class HVPoint3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HVPoint3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HVPoint3D
    __del__ = lambda self : None;
HVPoint3D_swigregister = HEPVis_SWIG_Python.HVPoint3D_swigregister
HVPoint3D_swigregister(HVPoint3D)

DEFAULT_NUMBER_OF_STEPS = HEPVis_SWIG_Python.DEFAULT_NUMBER_OF_STEPS
class SbFacet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbFacet(*args)
        try: self.this.append(this)
        except: self.this = this
    def isEqual(*args): return HEPVis_SWIG_Python.SbFacet_isEqual(*args)
    def GetEdge(*args): return HEPVis_SWIG_Python.SbFacet_GetEdge(*args)
    def Set(*args): return HEPVis_SWIG_Python.SbFacet_Set(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFacet
    __del__ = lambda self : None;
SbFacet_swigregister = HEPVis_SWIG_Python.SbFacet_swigregister
SbFacet_swigregister(SbFacet)

class SbPolyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def setName(*args): return HEPVis_SWIG_Python.SbPolyhedron_setName(*args)
    def getName(*args): return HEPVis_SWIG_Python.SbPolyhedron_getName(*args)
    def Set(*args): return HEPVis_SWIG_Python.SbPolyhedron_Set(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedron
    __del__ = lambda self : None;
    def Empty(*args): return HEPVis_SWIG_Python.SbPolyhedron_Empty(*args)
    def GetNoVertices(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNoVertices(*args)
    def GetNoFacets(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNoFacets(*args)
    def Transform(*args): return HEPVis_SWIG_Python.SbPolyhedron_Transform(*args)
    def GetNextVertexIndex(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextVertexIndex(*args)
    def GetVertex(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetVertex(*args)
    def GetVertexFast(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetVertexFast(*args)
    def GetPV(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetPV(*args)
    def GetPF(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetPF(*args)
    def GetNextVertex(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextVertex(*args)
    def GetNextEdgeIndeces(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextEdgeIndeces(*args)
    def GetNextEdge(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextEdge(*args)
    def GetFacet(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetFacet(*args)
    def GetNextFacet(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextFacet(*args)
    def GetNormal(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNormal(*args)
    def GetUnitNormal(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetUnitNormal(*args)
    def GetNextNormal(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextNormal(*args)
    def GetNextUnitNormal(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextUnitNormal(*args)
    def add(*args): return HEPVis_SWIG_Python.SbPolyhedron_add(*args)
    def subtract(*args): return HEPVis_SWIG_Python.SbPolyhedron_subtract(*args)
    def intersect(*args): return HEPVis_SWIG_Python.SbPolyhedron_intersect(*args)
    def GetSurfaceArea(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetSurfaceArea(*args)
    def GetVolume(*args): return HEPVis_SWIG_Python.SbPolyhedron_GetVolume(*args)
    def isEqual(*args): return HEPVis_SWIG_Python.SbPolyhedron_isEqual(*args)
    def isConsistent(*args): return HEPVis_SWIG_Python.SbPolyhedron_isConsistent(*args)
    def dump(*args): return HEPVis_SWIG_Python.SbPolyhedron_dump(*args)
    GetNumberOfRotationSteps = staticmethod(HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps)
    SetNumberOfRotationSteps = staticmethod(HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps)
    ResetNumberOfRotationSteps = staticmethod(HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps)
SbPolyhedron_swigregister = HEPVis_SWIG_Python.SbPolyhedron_swigregister
SbPolyhedron_swigregister(SbPolyhedron)
SbPolyhedron_GetNumberOfRotationSteps = HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps
SbPolyhedron_SetNumberOfRotationSteps = HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps
SbPolyhedron_ResetNumberOfRotationSteps = HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps

Sb_iabs = HEPVis_SWIG_Python.Sb_iabs
class SbPolyhedronTrd2(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTrd2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrd2
    __del__ = lambda self : None;
SbPolyhedronTrd2_swigregister = HEPVis_SWIG_Python.SbPolyhedronTrd2_swigregister
SbPolyhedronTrd2_swigregister(SbPolyhedronTrd2)

class SbPolyhedronTrd1(SbPolyhedronTrd2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTrd1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrd1
    __del__ = lambda self : None;
SbPolyhedronTrd1_swigregister = HEPVis_SWIG_Python.SbPolyhedronTrd1_swigregister
SbPolyhedronTrd1_swigregister(SbPolyhedronTrd1)

class SbPolyhedronBox(SbPolyhedronTrd2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronBox
    __del__ = lambda self : None;
SbPolyhedronBox_swigregister = HEPVis_SWIG_Python.SbPolyhedronBox_swigregister
SbPolyhedronBox_swigregister(SbPolyhedronBox)

class SbPolyhedronTrap(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTrap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrap
    __del__ = lambda self : None;
SbPolyhedronTrap_swigregister = HEPVis_SWIG_Python.SbPolyhedronTrap_swigregister
SbPolyhedronTrap_swigregister(SbPolyhedronTrap)

class SbPolyhedronPara(SbPolyhedronTrap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronPara(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPara
    __del__ = lambda self : None;
SbPolyhedronPara_swigregister = HEPVis_SWIG_Python.SbPolyhedronPara_swigregister
SbPolyhedronPara_swigregister(SbPolyhedronPara)

class SbPolyhedronCons(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronCons(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronCons
    __del__ = lambda self : None;
SbPolyhedronCons_swigregister = HEPVis_SWIG_Python.SbPolyhedronCons_swigregister
SbPolyhedronCons_swigregister(SbPolyhedronCons)

class SbPolyhedronCone(SbPolyhedronCons):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronCone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronCone
    __del__ = lambda self : None;
SbPolyhedronCone_swigregister = HEPVis_SWIG_Python.SbPolyhedronCone_swigregister
SbPolyhedronCone_swigregister(SbPolyhedronCone)

class SbPolyhedronTubs(SbPolyhedronCons):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTubs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTubs
    __del__ = lambda self : None;
SbPolyhedronTubs_swigregister = HEPVis_SWIG_Python.SbPolyhedronTubs_swigregister
SbPolyhedronTubs_swigregister(SbPolyhedronTubs)

class SbPolyhedronTube(SbPolyhedronCons):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTube(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTube
    __del__ = lambda self : None;
SbPolyhedronTube_swigregister = HEPVis_SWIG_Python.SbPolyhedronTube_swigregister
SbPolyhedronTube_swigregister(SbPolyhedronTube)

class SbPolyhedronPgon(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronPgon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPgon
    __del__ = lambda self : None;
SbPolyhedronPgon_swigregister = HEPVis_SWIG_Python.SbPolyhedronPgon_swigregister
SbPolyhedronPgon_swigregister(SbPolyhedronPgon)

class SbPolyhedronPcon(SbPolyhedronPgon):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronPcon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPcon
    __del__ = lambda self : None;
SbPolyhedronPcon_swigregister = HEPVis_SWIG_Python.SbPolyhedronPcon_swigregister
SbPolyhedronPcon_swigregister(SbPolyhedronPcon)

class SbPolyhedronSphere(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronSphere
    __del__ = lambda self : None;
SbPolyhedronSphere_swigregister = HEPVis_SWIG_Python.SbPolyhedronSphere_swigregister
SbPolyhedronSphere_swigregister(SbPolyhedronSphere)

class SbPolyhedronTorus(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTorus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTorus
    __del__ = lambda self : None;
SbPolyhedronTorus_swigregister = HEPVis_SWIG_Python.SbPolyhedronTorus_swigregister
SbPolyhedronTorus_swigregister(SbPolyhedronTorus)

class SbPolyhedronProcessor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNION = HEPVis_SWIG_Python.SbPolyhedronProcessor_UNION
    INTERSECTION = HEPVis_SWIG_Python.SbPolyhedronProcessor_INTERSECTION
    SUBTRACTION = HEPVis_SWIG_Python.SbPolyhedronProcessor_SUBTRACTION
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronProcessor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronProcessor
    __del__ = lambda self : None;
    def push_back(*args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_push_back(*args)
    def execute(*args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_execute(*args)
    def clear(*args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_clear(*args)
    def is_same_op(*args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_is_same_op(*args)
    def execute1(*args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_execute1(*args)
SbPolyhedronProcessor_swigregister = HEPVis_SWIG_Python.SbPolyhedronProcessor_swigregister
SbPolyhedronProcessor_swigregister(SbPolyhedronProcessor)

SbSTRDUP = HEPVis_SWIG_Python.SbSTRDUP
SbSTRDEL = HEPVis_SWIG_Python.SbSTRDEL
SbSTREMPTY = HEPVis_SWIG_Python.SbSTREMPTY
SbStringGetWords = HEPVis_SWIG_Python.SbStringGetWords
SbStringGetLines = HEPVis_SWIG_Python.SbStringGetLines
SbStringFind = HEPVis_SWIG_Python.SbStringFind
SbStringReverseFind = HEPVis_SWIG_Python.SbStringReverseFind
SbStringDelete = HEPVis_SWIG_Python.SbStringDelete
SbStringCreateEmpty = HEPVis_SWIG_Python.SbStringCreateEmpty
SbStringIsTTF = HEPVis_SWIG_Python.SbStringIsTTF
SbString_isenv = HEPVis_SWIG_Python.SbString_isenv
SbString_getenv = HEPVis_SWIG_Python.SbString_getenv
SbStringGetenv = HEPVis_SWIG_Python.SbStringGetenv
SbStringReplace = HEPVis_SWIG_Python.SbStringReplace
SbStringSuffix = HEPVis_SWIG_Python.SbStringSuffix
SbStringNotFound = HEPVis_SWIG_Python.SbStringNotFound
SbConvertToInt = HEPVis_SWIG_Python.SbConvertToInt
SbConvertToUnsignedLong = HEPVis_SWIG_Python.SbConvertToUnsignedLong
SbConvertToFloat = HEPVis_SWIG_Python.SbConvertToFloat
SbConvertToBool = HEPVis_SWIG_Python.SbConvertToBool
SbGetWords = HEPVis_SWIG_Python.SbGetWords
SbGetLines = HEPVis_SWIG_Python.SbGetLines
class SbStyleColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyleColor(*args)
        try: self.this.append(this)
        except: self.this = this
SbStyleColor_swigregister = HEPVis_SWIG_Python.SbStyleColor_swigregister
SbStyleColor_swigregister(SbStyleColor)
SbStringPrintF = HEPVis_SWIG_Python.SbStringPrintF

class SbStyleColormap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getColor(*args): return HEPVis_SWIG_Python.SbStyleColormap_getColor(*args)
    def getStringColor(*args): return HEPVis_SWIG_Python.SbStyleColormap_getStringColor(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyleColormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleColormap
    __del__ = lambda self : None;
SbStyleColormap_swigregister = HEPVis_SWIG_Python.SbStyleColormap_swigregister
SbStyleColormap_swigregister(SbStyleColormap)

class SbStyleDefaultColormap(SbStyleColormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyleDefaultColormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleDefaultColormap
    __del__ = lambda self : None;
SbStyleDefaultColormap_swigregister = HEPVis_SWIG_Python.SbStyleDefaultColormap_swigregister
SbStyleDefaultColormap_swigregister(SbStyleDefaultColormap)

class SbStyleROOT_Colormap(SbStyleColormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyleROOT_Colormap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleROOT_Colormap
    __del__ = lambda self : None;
SbStyleROOT_Colormap_swigregister = HEPVis_SWIG_Python.SbStyleROOT_Colormap_swigregister
SbStyleROOT_Colormap_swigregister(SbStyleROOT_Colormap)

class SbStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyle
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return HEPVis_SWIG_Python.SbStyle_copy(*args)
    def isEqual(*args): return HEPVis_SWIG_Python.SbStyle_isEqual(*args)
    def reset(*args): return HEPVis_SWIG_Python.SbStyle_reset(*args)
    def getString(*args): return HEPVis_SWIG_Python.SbStyle_getString(*args)
    def setColor(*args): return HEPVis_SWIG_Python.SbStyle_setColor(*args)
    def getColor(*args): return HEPVis_SWIG_Python.SbStyle_getColor(*args)
    def setHighlightColor(*args): return HEPVis_SWIG_Python.SbStyle_setHighlightColor(*args)
    def getHighlightColor(*args): return HEPVis_SWIG_Python.SbStyle_getHighlightColor(*args)
    def setLineWidth(*args): return HEPVis_SWIG_Python.SbStyle_setLineWidth(*args)
    def getLineWidth(*args): return HEPVis_SWIG_Python.SbStyle_getLineWidth(*args)
    def getTransparency(*args): return HEPVis_SWIG_Python.SbStyle_getTransparency(*args)
    def setTransparency(*args): return HEPVis_SWIG_Python.SbStyle_setTransparency(*args)
    def setMarkerStyle(*args): return HEPVis_SWIG_Python.SbStyle_setMarkerStyle(*args)
    def getMarkerStyle(*args): return HEPVis_SWIG_Python.SbStyle_getMarkerStyle(*args)
    def setMarkerSize(*args): return HEPVis_SWIG_Python.SbStyle_setMarkerSize(*args)
    def getMarkerSize(*args): return HEPVis_SWIG_Python.SbStyle_getMarkerSize(*args)
    def setFontSize(*args): return HEPVis_SWIG_Python.SbStyle_setFontSize(*args)
    def getFontSize(*args): return HEPVis_SWIG_Python.SbStyle_getFontSize(*args)
    def setAreaStyle(*args): return HEPVis_SWIG_Python.SbStyle_setAreaStyle(*args)
    def getAreaStyle(*args): return HEPVis_SWIG_Python.SbStyle_getAreaStyle(*args)
    def setModeling(*args): return HEPVis_SWIG_Python.SbStyle_setModeling(*args)
    def getModeling(*args): return HEPVis_SWIG_Python.SbStyle_getModeling(*args)
    def setLightModel(*args): return HEPVis_SWIG_Python.SbStyle_setLightModel(*args)
    def getLightModel(*args): return HEPVis_SWIG_Python.SbStyle_getLightModel(*args)
    def setTickModeling(*args): return HEPVis_SWIG_Python.SbStyle_setTickModeling(*args)
    def getTickModeling(*args): return HEPVis_SWIG_Python.SbStyle_getTickModeling(*args)
    def setEncoding(*args): return HEPVis_SWIG_Python.SbStyle_setEncoding(*args)
    def getEncoding(*args): return HEPVis_SWIG_Python.SbStyle_getEncoding(*args)
    def setSmoothing(*args): return HEPVis_SWIG_Python.SbStyle_setSmoothing(*args)
    def getSmoothing(*args): return HEPVis_SWIG_Python.SbStyle_getSmoothing(*args)
    def setHinting(*args): return HEPVis_SWIG_Python.SbStyle_setHinting(*args)
    def getHinting(*args): return HEPVis_SWIG_Python.SbStyle_getHinting(*args)
    def getPaintingPolicy(*args): return HEPVis_SWIG_Python.SbStyle_getPaintingPolicy(*args)
    def setPaintingPolicy(*args): return HEPVis_SWIG_Python.SbStyle_setPaintingPolicy(*args)
    def getHatchingPolicy(*args): return HEPVis_SWIG_Python.SbStyle_getHatchingPolicy(*args)
    def setHatchingPolicy(*args): return HEPVis_SWIG_Python.SbStyle_setHatchingPolicy(*args)
    def getProjectionType(*args): return HEPVis_SWIG_Python.SbStyle_getProjectionType(*args)
    def setProjectionType(*args): return HEPVis_SWIG_Python.SbStyle_setProjectionType(*args)
    def setLinePattern(*args): return HEPVis_SWIG_Python.SbStyle_setLinePattern(*args)
    def getLinePattern(*args): return HEPVis_SWIG_Python.SbStyle_getLinePattern(*args)
    def setFontName(*args): return HEPVis_SWIG_Python.SbStyle_setFontName(*args)
    def getFontName(*args): return HEPVis_SWIG_Python.SbStyle_getFontName(*args)
    def setDivisions(*args): return HEPVis_SWIG_Python.SbStyle_setDivisions(*args)
    def getDivisions(*args): return HEPVis_SWIG_Python.SbStyle_getDivisions(*args)
    def setRotationSteps(*args): return HEPVis_SWIG_Python.SbStyle_setRotationSteps(*args)
    def getRotationSteps(*args): return HEPVis_SWIG_Python.SbStyle_getRotationSteps(*args)
    def setOffset(*args): return HEPVis_SWIG_Python.SbStyle_setOffset(*args)
    def getOffset(*args): return HEPVis_SWIG_Python.SbStyle_getOffset(*args)
    def setStripWidth(*args): return HEPVis_SWIG_Python.SbStyle_setStripWidth(*args)
    def getStripWidth(*args): return HEPVis_SWIG_Python.SbStyle_getStripWidth(*args)
    def setAngle(*args): return HEPVis_SWIG_Python.SbStyle_setAngle(*args)
    def getAngle(*args): return HEPVis_SWIG_Python.SbStyle_getAngle(*args)
    def setScale(*args): return HEPVis_SWIG_Python.SbStyle_setScale(*args)
    def getScale(*args): return HEPVis_SWIG_Python.SbStyle_getScale(*args)
    def setBarOffset(*args): return HEPVis_SWIG_Python.SbStyle_setBarOffset(*args)
    def getBarOffset(*args): return HEPVis_SWIG_Python.SbStyle_getBarOffset(*args)
    def setBarWidth(*args): return HEPVis_SWIG_Python.SbStyle_setBarWidth(*args)
    def getBarWidth(*args): return HEPVis_SWIG_Python.SbStyle_getBarWidth(*args)
    def setMultiNodeLimit(*args): return HEPVis_SWIG_Python.SbStyle_setMultiNodeLimit(*args)
    def getMultiNodeLimit(*args): return HEPVis_SWIG_Python.SbStyle_getMultiNodeLimit(*args)
    def setSpacing(*args): return HEPVis_SWIG_Python.SbStyle_setSpacing(*args)
    def getSpacing(*args): return HEPVis_SWIG_Python.SbStyle_getSpacing(*args)
    def setVisible(*args): return HEPVis_SWIG_Python.SbStyle_setVisible(*args)
    def getVisible(*args): return HEPVis_SWIG_Python.SbStyle_getVisible(*args)
    def setEditable(*args): return HEPVis_SWIG_Python.SbStyle_setEditable(*args)
    def getEditable(*args): return HEPVis_SWIG_Python.SbStyle_getEditable(*args)
    def setAutomated(*args): return HEPVis_SWIG_Python.SbStyle_setAutomated(*args)
    def getAutomated(*args): return HEPVis_SWIG_Python.SbStyle_getAutomated(*args)
    def setCut(*args): return HEPVis_SWIG_Python.SbStyle_setCut(*args)
    def getCut(*args): return HEPVis_SWIG_Python.SbStyle_getCut(*args)
    def setOptions(*args): return HEPVis_SWIG_Python.SbStyle_setOptions(*args)
    def getOptions(*args): return HEPVis_SWIG_Python.SbStyle_getOptions(*args)
    def setColorMapping(*args): return HEPVis_SWIG_Python.SbStyle_setColorMapping(*args)
    def getColorMapping(*args): return HEPVis_SWIG_Python.SbStyle_getColorMapping(*args)
    def setEnforced(*args): return HEPVis_SWIG_Python.SbStyle_setEnforced(*args)
    def getEnforced(*args): return HEPVis_SWIG_Python.SbStyle_getEnforced(*args)
    def setTranslation(*args): return HEPVis_SWIG_Python.SbStyle_setTranslation(*args)
    def getTranslation(*args): return HEPVis_SWIG_Python.SbStyle_getTranslation(*args)
    hls2rgb = staticmethod(HEPVis_SWIG_Python.SbStyle_hls2rgb)
    stringToColor = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToColor)
    colorToString = staticmethod(HEPVis_SWIG_Python.SbStyle_colorToString)
    stringToMarkerStyle = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle)
    markerStyleToString = staticmethod(HEPVis_SWIG_Python.SbStyle_markerStyleToString)
    stringToAreaStyle = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToAreaStyle)
    areaStyleToString = staticmethod(HEPVis_SWIG_Python.SbStyle_areaStyleToString)
    stringToPaintingPolicy = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy)
    paintingPolicyToString = staticmethod(HEPVis_SWIG_Python.SbStyle_paintingPolicyToString)
    stringToHatchingPolicy = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy)
    hatchingPolicyToString = staticmethod(HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString)
    stringToProjectionType = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToProjectionType)
    projectionTypeToString = staticmethod(HEPVis_SWIG_Python.SbStyle_projectionTypeToString)
    stringToLinePattern = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToLinePattern)
    def setFromString(*args): return HEPVis_SWIG_Python.SbStyle_setFromString(*args)
SbStyle_swigregister = HEPVis_SWIG_Python.SbStyle_swigregister
SbStyle_swigregister(SbStyle)
SbStyle_hls2rgb = HEPVis_SWIG_Python.SbStyle_hls2rgb
SbStyle_stringToColor = HEPVis_SWIG_Python.SbStyle_stringToColor
SbStyle_colorToString = HEPVis_SWIG_Python.SbStyle_colorToString
SbStyle_stringToMarkerStyle = HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle
SbStyle_markerStyleToString = HEPVis_SWIG_Python.SbStyle_markerStyleToString
SbStyle_stringToAreaStyle = HEPVis_SWIG_Python.SbStyle_stringToAreaStyle
SbStyle_areaStyleToString = HEPVis_SWIG_Python.SbStyle_areaStyleToString
SbStyle_stringToPaintingPolicy = HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy
SbStyle_paintingPolicyToString = HEPVis_SWIG_Python.SbStyle_paintingPolicyToString
SbStyle_stringToHatchingPolicy = HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy
SbStyle_hatchingPolicyToString = HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString
SbStyle_stringToProjectionType = HEPVis_SWIG_Python.SbStyle_stringToProjectionType
SbStyle_projectionTypeToString = HEPVis_SWIG_Python.SbStyle_projectionTypeToString
SbStyle_stringToLinePattern = HEPVis_SWIG_Python.SbStyle_stringToLinePattern

SbSystemIsMacApp = HEPVis_SWIG_Python.SbSystemIsMacApp
SbSystemPutenv = HEPVis_SWIG_Python.SbSystemPutenv
SbSystemPathSeparator = HEPVis_SWIG_Python.SbSystemPathSeparator
SbSystemFileSeparator = HEPVis_SWIG_Python.SbSystemFileSeparator
class SbTessTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pointA = _swig_property(HEPVis_SWIG_Python.SbTessTriangle_pointA_get, HEPVis_SWIG_Python.SbTessTriangle_pointA_set)
    pointB = _swig_property(HEPVis_SWIG_Python.SbTessTriangle_pointB_get, HEPVis_SWIG_Python.SbTessTriangle_pointB_set)
    pointC = _swig_property(HEPVis_SWIG_Python.SbTessTriangle_pointC_get, HEPVis_SWIG_Python.SbTessTriangle_pointC_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTessTriangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTessTriangle
    __del__ = lambda self : None;
SbTessTriangle_swigregister = HEPVis_SWIG_Python.SbTessTriangle_swigregister
SbTessTriangle_swigregister(SbTessTriangle)

class SbTessContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTessContour(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTessContour
    __del__ = lambda self : None;
    def getFilledArea(*args): return HEPVis_SWIG_Python.SbTessContour_getFilledArea(*args)
SbTessContour_swigregister = HEPVis_SWIG_Python.SbTessContour_swigregister
SbTessContour_swigregister(SbTessContour)

class SbTestHistogram1D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTestHistogram1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_name(*args)
    def title(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_title(*args)
    def xn(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_xn(*args)
    def xmin(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_xmin(*args)
    def xmax(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_xmax(*args)
    def valueRange(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_valueRange(*args)
    def binEntries(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_binEntries(*args)
    def binWeight(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_binWeight(*args)
    def binError(*args): return HEPVis_SWIG_Python.SbTestHistogram1D_binError(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestHistogram1D
    __del__ = lambda self : None;
SbTestHistogram1D_swigregister = HEPVis_SWIG_Python.SbTestHistogram1D_swigregister
SbTestHistogram1D_swigregister(SbTestHistogram1D)

class SbTestHistogram2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTestHistogram2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_name(*args)
    def title(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_title(*args)
    def xn(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_xn(*args)
    def xmin(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_xmin(*args)
    def xmax(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_xmax(*args)
    def yn(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_yn(*args)
    def ymin(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_ymin(*args)
    def ymax(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_ymax(*args)
    def ytitle(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_ytitle(*args)
    def valueRange(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_valueRange(*args)
    def binEntries(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_binEntries(*args)
    def binWeight(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_binWeight(*args)
    def binError(*args): return HEPVis_SWIG_Python.SbTestHistogram2D_binError(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestHistogram2D
    __del__ = lambda self : None;
SbTestHistogram2D_swigregister = HEPVis_SWIG_Python.SbTestHistogram2D_swigregister
SbTestHistogram2D_swigregister(SbTestHistogram2D)

class SbTestPlottableBins1D(SbPlottableBins1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_isValid(*args)
    def cast(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_cast(*args)
    def nativeObject(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_nativeObject(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getDimension(*args)
    def getName(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getName(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getLabel(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getLegend(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getInfos(*args)
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBins(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisNumberOfBins(*args)
    def getAxisMinimum(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisMinimum(*args)
    def getAxisMaximum(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisMaximum(*args)
    def getBinLowerEdge(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinLowerEdge(*args)
    def getBinUpperEdge(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinUpperEdge(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinBar(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTestPlottableBins1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestPlottableBins1D
    __del__ = lambda self : None;
SbTestPlottableBins1D_swigregister = HEPVis_SWIG_Python.SbTestPlottableBins1D_swigregister
SbTestPlottableBins1D_swigregister(SbTestPlottableBins1D)

class SbTestPlottableBins2D(SbPlottableBins2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_isValid(*args)
    def cast(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_cast(*args)
    def nativeObject(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_nativeObject(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getDimension(*args)
    def getName(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getName(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getLabel(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getLegend(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getInfos(*args)
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBinsX(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisNumberOfBinsX(*args)
    def getAxisMinimumX(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMinimumX(*args)
    def getAxisMaximumX(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMaximumX(*args)
    def getAxisNumberOfBinsY(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisNumberOfBinsY(*args)
    def getAxisMinimumY(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMinimumY(*args)
    def getAxisMaximumY(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMaximumY(*args)
    def getBinLowerEdgeX(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinLowerEdgeX(*args)
    def getBinUpperEdgeX(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinUpperEdgeX(*args)
    def getBinLowerEdgeY(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinLowerEdgeY(*args)
    def getBinUpperEdgeY(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinUpperEdgeY(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinBar(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTestPlottableBins2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestPlottableBins2D
    __del__ = lambda self : None;
SbTestPlottableBins2D_swigregister = HEPVis_SWIG_Python.SbTestPlottableBins2D_swigregister
SbTestPlottableBins2D_swigregister(SbTestPlottableBins2D)

class SbChar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbChar(*args)
        try: self.this.append(this)
        except: self.this = this
    LATIN = HEPVis_SWIG_Python.SbChar_LATIN
    GREEK = HEPVis_SWIG_Python.SbChar_GREEK
    SPECIAL = HEPVis_SWIG_Python.SbChar_SPECIAL
    NONE = HEPVis_SWIG_Python.SbChar_NONE
    UP = HEPVis_SWIG_Python.SbChar_UP
    DOWN = HEPVis_SWIG_Python.SbChar_DOWN
    fChar = _swig_property(HEPVis_SWIG_Python.SbChar_fChar_get, HEPVis_SWIG_Python.SbChar_fChar_set)
    fFont = _swig_property(HEPVis_SWIG_Python.SbChar_fFont_get, HEPVis_SWIG_Python.SbChar_fFont_set)
    fYMove = _swig_property(HEPVis_SWIG_Python.SbChar_fYMove_get, HEPVis_SWIG_Python.SbChar_fYMove_set)
    fBack = _swig_property(HEPVis_SWIG_Python.SbChar_fBack_get, HEPVis_SWIG_Python.SbChar_fBack_set)
    fBar = _swig_property(HEPVis_SWIG_Python.SbChar_fBar_get, HEPVis_SWIG_Python.SbChar_fBar_set)
    fCR = _swig_property(HEPVis_SWIG_Python.SbChar_fCR_get, HEPVis_SWIG_Python.SbChar_fCR_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbChar
    __del__ = lambda self : None;
SbChar_swigregister = HEPVis_SWIG_Python.SbChar_swigregister
SbChar_swigregister(SbChar)

class SbText(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getBBox = staticmethod(HEPVis_SWIG_Python.SbText_getBBox)
    getSubString = staticmethod(HEPVis_SWIG_Python.SbText_getSubString)
    getAscentDescent = staticmethod(HEPVis_SWIG_Python.SbText_getAscentDescent)
    decodePlain = staticmethod(HEPVis_SWIG_Python.SbText_decodePlain)
    decodePAW = staticmethod(HEPVis_SWIG_Python.SbText_decodePAW)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbText(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbText
    __del__ = lambda self : None;
SbText_swigregister = HEPVis_SWIG_Python.SbText_swigregister
SbText_swigregister(SbText)
SbText_getBBox = HEPVis_SWIG_Python.SbText_getBBox
SbText_getSubString = HEPVis_SWIG_Python.SbText_getSubString
SbText_getAscentDescent = HEPVis_SWIG_Python.SbText_getAscentDescent
SbText_decodePlain = HEPVis_SWIG_Python.SbText_decodePlain
SbText_decodePAW = HEPVis_SWIG_Python.SbText_decodePAW

class SbTTF_BBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    xMin = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_xMin_get, HEPVis_SWIG_Python.SbTTF_BBox_xMin_set)
    yMin = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_yMin_get, HEPVis_SWIG_Python.SbTTF_BBox_yMin_set)
    xMax = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_xMax_get, HEPVis_SWIG_Python.SbTTF_BBox_xMax_set)
    yMax = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_yMax_get, HEPVis_SWIG_Python.SbTTF_BBox_yMax_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTTF_BBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF_BBox
    __del__ = lambda self : None;
SbTTF_BBox_swigregister = HEPVis_SWIG_Python.SbTTF_BBox_swigregister
SbTTF_BBox_swigregister(SbTTF_BBox)

class SbTTF_Raster_Map(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rows = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_rows_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_rows_set)
    cols = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_cols_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_cols_set)
    width = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_width_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_width_set)
    buffer = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_buffer_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_buffer_set)
    size = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_size_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_size_set)
    grays = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_grays_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_grays_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTTF_Raster_Map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF_Raster_Map
    __del__ = lambda self : None;
SbTTF_Raster_Map_swigregister = HEPVis_SWIG_Python.SbTTF_Raster_Map_swigregister
SbTTF_Raster_Map_swigregister(SbTTF_Raster_Map)

class SbTTF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF
    __del__ = lambda self : None;
    def isValid(*args): return HEPVis_SWIG_Python.SbTTF_isValid(*args)
    def getBounds(*args): return HEPVis_SWIG_Python.SbTTF_getBounds(*args)
    def setPointSize(*args): return HEPVis_SWIG_Python.SbTTF_setPointSize(*args)
    def getPointSize(*args): return HEPVis_SWIG_Python.SbTTF_getPointSize(*args)
    def getCharacter(*args): return HEPVis_SWIG_Python.SbTTF_getCharacter(*args)
    def getAscent(*args): return HEPVis_SWIG_Python.SbTTF_getAscent(*args)
    def getDescent(*args): return HEPVis_SWIG_Python.SbTTF_getDescent(*args)
    def getFontName(*args): return HEPVis_SWIG_Python.SbTTF_getFontName(*args)
SbTTF_swigregister = HEPVis_SWIG_Python.SbTTF_swigregister
SbTTF_swigregister(SbTTF)

HEPVIS_MAJOR_VERSION = HEPVis_SWIG_Python.HEPVIS_MAJOR_VERSION
HEPVIS_MINOR_VERSION = HEPVis_SWIG_Python.HEPVIS_MINOR_VERSION
HEPVIS_PATCH_VERSION = HEPVis_SWIG_Python.HEPVIS_PATCH_VERSION
HEPVIS_VERSION = HEPVis_SWIG_Python.HEPVIS_VERSION
HEPVIS_VERSION_VRP = HEPVis_SWIG_Python.HEPVIS_VERSION_VRP
class HEPVis_SoFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.HEPVis_SoFile_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoFile(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoFile_initClass)
    def readNamedFile(*args): return HEPVis_SWIG_Python.HEPVis_SoFile_readNamedFile(*args)
    setCurlFunction = staticmethod(HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction)
HEPVis_SoFile_swigregister = HEPVis_SWIG_Python.HEPVis_SoFile_swigregister
HEPVis_SoFile_swigregister(HEPVis_SoFile)
HEPVis_SoFile_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId
HEPVis_SoFile_initClass = HEPVis_SWIG_Python.HEPVis_SoFile_initClass
HEPVis_SoFile_setCurlFunction = HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction

class SoLineStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoLineStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoLineStyle_getTypeId(*args)
    color = _swig_property(HEPVis_SWIG_Python.SoLineStyle_color_get, HEPVis_SWIG_Python.SoLineStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoLineStyle_transparency_get, HEPVis_SWIG_Python.SoLineStyle_transparency_set)
    width = _swig_property(HEPVis_SWIG_Python.SoLineStyle_width_get, HEPVis_SWIG_Python.SoLineStyle_width_set)
    pattern = _swig_property(HEPVis_SWIG_Python.SoLineStyle_pattern_get, HEPVis_SWIG_Python.SoLineStyle_pattern_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoLineStyle_visible_get, HEPVis_SWIG_Python.SoLineStyle_visible_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoLineStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return HEPVis_SWIG_Python.SoLineStyle_reset(*args)
    def setFromString(*args): return HEPVis_SWIG_Python.SoLineStyle_setFromString(*args)
    def getSbStyle(*args): return HEPVis_SWIG_Python.SoLineStyle_getSbStyle(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoLineStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoLineStyle
    __del__ = lambda self : None;
SoLineStyle_swigregister = HEPVis_SWIG_Python.SoLineStyle_swigregister
SoLineStyle_swigregister(SoLineStyle)
SoLineStyle_getClassTypeId = HEPVis_SWIG_Python.SoLineStyle_getClassTypeId
SoLineStyle_initClass = HEPVis_SWIG_Python.SoLineStyle_initClass

class SoTextStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTextStyle_getTypeId(*args)
    LEFT = HEPVis_SWIG_Python.SoTextStyle_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextStyle_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextStyle_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextStyle_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextStyle_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextStyle_TOP
    color = _swig_property(HEPVis_SWIG_Python.SoTextStyle_color_get, HEPVis_SWIG_Python.SoTextStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoTextStyle_transparency_get, HEPVis_SWIG_Python.SoTextStyle_transparency_set)
    fontName = _swig_property(HEPVis_SWIG_Python.SoTextStyle_fontName_get, HEPVis_SWIG_Python.SoTextStyle_fontName_set)
    fontSize = _swig_property(HEPVis_SWIG_Python.SoTextStyle_fontSize_get, HEPVis_SWIG_Python.SoTextStyle_fontSize_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoTextStyle_visible_get, HEPVis_SWIG_Python.SoTextStyle_visible_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoTextStyle_encoding_get, HEPVis_SWIG_Python.SoTextStyle_encoding_set)
    smoothing = _swig_property(HEPVis_SWIG_Python.SoTextStyle_smoothing_get, HEPVis_SWIG_Python.SoTextStyle_smoothing_set)
    hinting = _swig_property(HEPVis_SWIG_Python.SoTextStyle_hinting_get, HEPVis_SWIG_Python.SoTextStyle_hinting_set)
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextStyle_horizontalJustification_get, HEPVis_SWIG_Python.SoTextStyle_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoTextStyle_verticalJustification_get, HEPVis_SWIG_Python.SoTextStyle_verticalJustification_set)
    scale = _swig_property(HEPVis_SWIG_Python.SoTextStyle_scale_get, HEPVis_SWIG_Python.SoTextStyle_scale_set)
    orientationX = _swig_property(HEPVis_SWIG_Python.SoTextStyle_orientationX_get, HEPVis_SWIG_Python.SoTextStyle_orientationX_set)
    orientationY = _swig_property(HEPVis_SWIG_Python.SoTextStyle_orientationY_get, HEPVis_SWIG_Python.SoTextStyle_orientationY_set)
    rotated = _swig_property(HEPVis_SWIG_Python.SoTextStyle_rotated_get, HEPVis_SWIG_Python.SoTextStyle_rotated_set)
    lineWidth = _swig_property(HEPVis_SWIG_Python.SoTextStyle_lineWidth_get, HEPVis_SWIG_Python.SoTextStyle_lineWidth_set)
    linePattern = _swig_property(HEPVis_SWIG_Python.SoTextStyle_linePattern_get, HEPVis_SWIG_Python.SoTextStyle_linePattern_set)
    enforced = _swig_property(HEPVis_SWIG_Python.SoTextStyle_enforced_get, HEPVis_SWIG_Python.SoTextStyle_enforced_set)
    translation = _swig_property(HEPVis_SWIG_Python.SoTextStyle_translation_get, HEPVis_SWIG_Python.SoTextStyle_translation_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTextStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return HEPVis_SWIG_Python.SoTextStyle_reset(*args)
    def setFromString(*args): return HEPVis_SWIG_Python.SoTextStyle_setFromString(*args)
    def getSbStyle(*args): return HEPVis_SWIG_Python.SoTextStyle_getSbStyle(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextStyle
    __del__ = lambda self : None;
SoTextStyle_swigregister = HEPVis_SWIG_Python.SoTextStyle_swigregister
SoTextStyle_swigregister(SoTextStyle)
SoTextStyle_getClassTypeId = HEPVis_SWIG_Python.SoTextStyle_getClassTypeId
SoTextStyle_initClass = HEPVis_SWIG_Python.SoTextStyle_initClass

class SoAreaStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoAreaStyle_getTypeId(*args)
    color = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_color_get, HEPVis_SWIG_Python.SoAreaStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_transparency_get, HEPVis_SWIG_Python.SoAreaStyle_transparency_set)
    SOLID = HEPVis_SWIG_Python.SoAreaStyle_SOLID
    HATCHED = HEPVis_SWIG_Python.SoAreaStyle_HATCHED
    CHECKER = HEPVis_SWIG_Python.SoAreaStyle_CHECKER
    EDGED = HEPVis_SWIG_Python.SoAreaStyle_EDGED
    areaStyle = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_areaStyle_get, HEPVis_SWIG_Python.SoAreaStyle_areaStyle_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_visible_get, HEPVis_SWIG_Python.SoAreaStyle_visible_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoAreaStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return HEPVis_SWIG_Python.SoAreaStyle_reset(*args)
    def setFromString(*args): return HEPVis_SWIG_Python.SoAreaStyle_setFromString(*args)
    def getSbStyle(*args): return HEPVis_SWIG_Python.SoAreaStyle_getSbStyle(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAreaStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAreaStyle
    __del__ = lambda self : None;
SoAreaStyle_swigregister = HEPVis_SWIG_Python.SoAreaStyle_swigregister
SoAreaStyle_swigregister(SoAreaStyle)
SoAreaStyle_getClassTypeId = HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId
SoAreaStyle_initClass = HEPVis_SWIG_Python.SoAreaStyle_initClass

class SoStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoStyle_getTypeId(*args)
    color = _swig_property(HEPVis_SWIG_Python.SoStyle_color_get, HEPVis_SWIG_Python.SoStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoStyle_transparency_get, HEPVis_SWIG_Python.SoStyle_transparency_set)
    lineWidth = _swig_property(HEPVis_SWIG_Python.SoStyle_lineWidth_get, HEPVis_SWIG_Python.SoStyle_lineWidth_set)
    linePattern = _swig_property(HEPVis_SWIG_Python.SoStyle_linePattern_get, HEPVis_SWIG_Python.SoStyle_linePattern_set)
    markerSize = _swig_property(HEPVis_SWIG_Python.SoStyle_markerSize_get, HEPVis_SWIG_Python.SoStyle_markerSize_set)
    DOT = HEPVis_SWIG_Python.SoStyle_DOT
    PLUS = HEPVis_SWIG_Python.SoStyle_PLUS
    ASTERISK = HEPVis_SWIG_Python.SoStyle_ASTERISK
    CROSS = HEPVis_SWIG_Python.SoStyle_CROSS
    STAR = HEPVis_SWIG_Python.SoStyle_STAR
    CIRCLE_LINE = HEPVis_SWIG_Python.SoStyle_CIRCLE_LINE
    CIRCLE_FILLED = HEPVis_SWIG_Python.SoStyle_CIRCLE_FILLED
    TRIANGLE_UP_LINE = HEPVis_SWIG_Python.SoStyle_TRIANGLE_UP_LINE
    TRIANGLE_UP_FILLED = HEPVis_SWIG_Python.SoStyle_TRIANGLE_UP_FILLED
    TRIANGLE_DOWN_LINE = HEPVis_SWIG_Python.SoStyle_TRIANGLE_DOWN_LINE
    TRIANGLE_DOWN_FILLED = HEPVis_SWIG_Python.SoStyle_TRIANGLE_DOWN_FILLED
    SWISS_CROSS_LINE = HEPVis_SWIG_Python.SoStyle_SWISS_CROSS_LINE
    SWISS_CROSS_FILLED = HEPVis_SWIG_Python.SoStyle_SWISS_CROSS_FILLED
    DAVID_STAR_LINE = HEPVis_SWIG_Python.SoStyle_DAVID_STAR_LINE
    DAVID_STAR_FILLED = HEPVis_SWIG_Python.SoStyle_DAVID_STAR_FILLED
    DIAMOND_LINE = HEPVis_SWIG_Python.SoStyle_DIAMOND_LINE
    DIAMOND_FILLED = HEPVis_SWIG_Python.SoStyle_DIAMOND_FILLED
    SQUARE_LINE = HEPVis_SWIG_Python.SoStyle_SQUARE_LINE
    SQUARE_FILLED = HEPVis_SWIG_Python.SoStyle_SQUARE_FILLED
    PENTA_STAR_LINE = HEPVis_SWIG_Python.SoStyle_PENTA_STAR_LINE
    PENTA_STAR_FILLED = HEPVis_SWIG_Python.SoStyle_PENTA_STAR_FILLED
    markerStyle = _swig_property(HEPVis_SWIG_Python.SoStyle_markerStyle_get, HEPVis_SWIG_Python.SoStyle_markerStyle_set)
    SOLID = HEPVis_SWIG_Python.SoStyle_SOLID
    HATCHED = HEPVis_SWIG_Python.SoStyle_HATCHED
    CHECKER = HEPVis_SWIG_Python.SoStyle_CHECKER
    EDGED = HEPVis_SWIG_Python.SoStyle_EDGED
    areaStyle = _swig_property(HEPVis_SWIG_Python.SoStyle_areaStyle_get, HEPVis_SWIG_Python.SoStyle_areaStyle_set)
    fontName = _swig_property(HEPVis_SWIG_Python.SoStyle_fontName_get, HEPVis_SWIG_Python.SoStyle_fontName_set)
    fontSize = _swig_property(HEPVis_SWIG_Python.SoStyle_fontSize_get, HEPVis_SWIG_Python.SoStyle_fontSize_set)
    scale = _swig_property(HEPVis_SWIG_Python.SoStyle_scale_get, HEPVis_SWIG_Python.SoStyle_scale_set)
    NONE = HEPVis_SWIG_Python.SoStyle_NONE
    RIGHT = HEPVis_SWIG_Python.SoStyle_RIGHT
    LEFT = HEPVis_SWIG_Python.SoStyle_LEFT
    LEFT_AND_RIGHT = HEPVis_SWIG_Python.SoStyle_LEFT_AND_RIGHT
    hatching = _swig_property(HEPVis_SWIG_Python.SoStyle_hatching_get, HEPVis_SWIG_Python.SoStyle_hatching_set)
    spacing = _swig_property(HEPVis_SWIG_Python.SoStyle_spacing_get, HEPVis_SWIG_Python.SoStyle_spacing_set)
    angle = _swig_property(HEPVis_SWIG_Python.SoStyle_angle_get, HEPVis_SWIG_Python.SoStyle_angle_set)
    offset = _swig_property(HEPVis_SWIG_Python.SoStyle_offset_get, HEPVis_SWIG_Python.SoStyle_offset_set)
    stripWidth = _swig_property(HEPVis_SWIG_Python.SoStyle_stripWidth_get, HEPVis_SWIG_Python.SoStyle_stripWidth_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoStyle_visible_get, HEPVis_SWIG_Python.SoStyle_visible_set)
    modeling = _swig_property(HEPVis_SWIG_Python.SoStyle_modeling_get, HEPVis_SWIG_Python.SoStyle_modeling_set)
    lightModel = _swig_property(HEPVis_SWIG_Python.SoStyle_lightModel_get, HEPVis_SWIG_Python.SoStyle_lightModel_set)
    tickModeling = _swig_property(HEPVis_SWIG_Python.SoStyle_tickModeling_get, HEPVis_SWIG_Python.SoStyle_tickModeling_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoStyle_encoding_get, HEPVis_SWIG_Python.SoStyle_encoding_set)
    smoothing = _swig_property(HEPVis_SWIG_Python.SoStyle_smoothing_get, HEPVis_SWIG_Python.SoStyle_smoothing_set)
    hinting = _swig_property(HEPVis_SWIG_Python.SoStyle_hinting_get, HEPVis_SWIG_Python.SoStyle_hinting_set)
    UNIFORM = HEPVis_SWIG_Python.SoStyle_UNIFORM
    BY_VALUE = HEPVis_SWIG_Python.SoStyle_BY_VALUE
    BY_LEVEL = HEPVis_SWIG_Python.SoStyle_BY_LEVEL
    GREY_SCALE = HEPVis_SWIG_Python.SoStyle_GREY_SCALE
    VIOLET_TO_RED = HEPVis_SWIG_Python.SoStyle_VIOLET_TO_RED
    GREY_SCALE_INVERSE = HEPVis_SWIG_Python.SoStyle_GREY_SCALE_INVERSE
    painting = _swig_property(HEPVis_SWIG_Python.SoStyle_painting_get, HEPVis_SWIG_Python.SoStyle_painting_set)
    multiNodeLimit = _swig_property(HEPVis_SWIG_Python.SoStyle_multiNodeLimit_get, HEPVis_SWIG_Python.SoStyle_multiNodeLimit_set)
    divisions = _swig_property(HEPVis_SWIG_Python.SoStyle_divisions_get, HEPVis_SWIG_Python.SoStyle_divisions_set)
    rotationSteps = _swig_property(HEPVis_SWIG_Python.SoStyle_rotationSteps_get, HEPVis_SWIG_Python.SoStyle_rotationSteps_set)
    barOffset = _swig_property(HEPVis_SWIG_Python.SoStyle_barOffset_get, HEPVis_SWIG_Python.SoStyle_barOffset_set)
    barWidth = _swig_property(HEPVis_SWIG_Python.SoStyle_barWidth_get, HEPVis_SWIG_Python.SoStyle_barWidth_set)
    editable = _swig_property(HEPVis_SWIG_Python.SoStyle_editable_get, HEPVis_SWIG_Python.SoStyle_editable_set)
    automated = _swig_property(HEPVis_SWIG_Python.SoStyle_automated_get, HEPVis_SWIG_Python.SoStyle_automated_set)
    options = _swig_property(HEPVis_SWIG_Python.SoStyle_options_get, HEPVis_SWIG_Python.SoStyle_options_set)
    colorMapping = _swig_property(HEPVis_SWIG_Python.SoStyle_colorMapping_get, HEPVis_SWIG_Python.SoStyle_colorMapping_set)
    enforced = _swig_property(HEPVis_SWIG_Python.SoStyle_enforced_get, HEPVis_SWIG_Python.SoStyle_enforced_set)
    translation = _swig_property(HEPVis_SWIG_Python.SoStyle_translation_get, HEPVis_SWIG_Python.SoStyle_translation_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args): return HEPVis_SWIG_Python.SoStyle_set(*args)
    def setFromString(*args): return HEPVis_SWIG_Python.SoStyle_setFromString(*args)
    def getSbStyle(*args): return HEPVis_SWIG_Python.SoStyle_getSbStyle(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStyle
    __del__ = lambda self : None;
SoStyle_swigregister = HEPVis_SWIG_Python.SoStyle_swigregister
SoStyle_swigregister(SoStyle)
SoStyle_getClassTypeId = HEPVis_SWIG_Python.SoStyle_getClassTypeId
SoStyle_initClass = HEPVis_SWIG_Python.SoStyle_initClass

class SoBinsStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoBinsStyle_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoBinsStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoBinsStyle_initClass)
SoBinsStyle_swigregister = HEPVis_SWIG_Python.SoBinsStyle_swigregister
SoBinsStyle_swigregister(SoBinsStyle)
SoBinsStyle_getClassTypeId = HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId
SoBinsStyle_initClass = HEPVis_SWIG_Python.SoBinsStyle_initClass

class SoPointsStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPointsStyle_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPointsStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoPointsStyle_initClass)
SoPointsStyle_swigregister = HEPVis_SWIG_Python.SoPointsStyle_swigregister
SoPointsStyle_swigregister(SoPointsStyle)
SoPointsStyle_getClassTypeId = HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId
SoPointsStyle_initClass = HEPVis_SWIG_Python.SoPointsStyle_initClass

class SoFunctionStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoFunctionStyle_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoFunctionStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoFunctionStyle_initClass)
SoFunctionStyle_swigregister = HEPVis_SWIG_Python.SoFunctionStyle_swigregister
SoFunctionStyle_swigregister(SoFunctionStyle)
SoFunctionStyle_getClassTypeId = HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId
SoFunctionStyle_initClass = HEPVis_SWIG_Python.SoFunctionStyle_initClass

class SoRightHatchStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoRightHatchStyle_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoRightHatchStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoRightHatchStyle_initClass)
SoRightHatchStyle_swigregister = HEPVis_SWIG_Python.SoRightHatchStyle_swigregister
SoRightHatchStyle_swigregister(SoRightHatchStyle)
SoRightHatchStyle_getClassTypeId = HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId
SoRightHatchStyle_initClass = HEPVis_SWIG_Python.SoRightHatchStyle_initClass

class SoLeftHatchStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoLeftHatchStyle_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoLeftHatchStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoLeftHatchStyle_initClass)
SoLeftHatchStyle_swigregister = HEPVis_SWIG_Python.SoLeftHatchStyle_swigregister
SoLeftHatchStyle_swigregister(SoLeftHatchStyle)
SoLeftHatchStyle_getClassTypeId = HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId
SoLeftHatchStyle_initClass = HEPVis_SWIG_Python.SoLeftHatchStyle_initClass

class SoErrorsStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoErrorsStyle_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoErrorsStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoErrorsStyle_initClass)
SoErrorsStyle_swigregister = HEPVis_SWIG_Python.SoErrorsStyle_swigregister
SoErrorsStyle_swigregister(SoErrorsStyle)
SoErrorsStyle_getClassTypeId = HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId
SoErrorsStyle_initClass = HEPVis_SWIG_Python.SoErrorsStyle_initClass

class SoSceneGraph(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSceneGraph_getTypeId(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSceneGraph_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSceneGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    def setString(*args): return HEPVis_SWIG_Python.SoSceneGraph_setString(*args)
    def getString(*args): return HEPVis_SWIG_Python.SoSceneGraph_getString(*args)
    def setInfos(*args): return HEPVis_SWIG_Python.SoSceneGraph_setInfos(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.SoSceneGraph_getInfos(*args)
SoSceneGraph_swigregister = HEPVis_SWIG_Python.SoSceneGraph_swigregister
SoSceneGraph_swigregister(SoSceneGraph)
SoSceneGraph_getClassTypeId = HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId
SoSceneGraph_initClass = HEPVis_SWIG_Python.SoSceneGraph_initClass

class HEPVis_SoMarkerSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getTypeId(*args)
    PLUS_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_5_5
    ASTERISK_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_5_5
    CROSS_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_5_5
    STAR_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_5_5
    CIRCLE_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_5_5
    CIRCLE_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_5_5
    TRIANGLE_UP_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_5_5
    TRIANGLE_UP_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_5_5
    TRIANGLE_DOWN_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_5_5
    TRIANGLE_DOWN_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_5_5
    DAVID_STAR_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_5_5
    DAVID_STAR_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_5_5
    SWISS_CROSS_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_5_5
    SWISS_CROSS_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_5_5
    DIAMOND_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_5_5
    DIAMOND_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_5_5
    SQUARE_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_5_5
    SQUARE_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_5_5
    PENTA_STAR_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_5_5
    PENTA_STAR_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_5_5
    PLUS_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_7_7
    ASTERISK_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_7_7
    CROSS_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_7_7
    STAR_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_7_7
    CIRCLE_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_7_7
    CIRCLE_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_7_7
    TRIANGLE_UP_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_7_7
    TRIANGLE_UP_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_7_7
    TRIANGLE_DOWN_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_7_7
    TRIANGLE_DOWN_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_7_7
    DAVID_STAR_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_7_7
    DAVID_STAR_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_7_7
    SWISS_CROSS_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_7_7
    SWISS_CROSS_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_7_7
    DIAMOND_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_7_7
    DIAMOND_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_7_7
    SQUARE_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_7_7
    SQUARE_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_7_7
    PENTA_STAR_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_7_7
    PENTA_STAR_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_7_7
    PLUS_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_9_9
    ASTERISK_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_9_9
    CROSS_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_9_9
    STAR_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_9_9
    CIRCLE_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_9_9
    CIRCLE_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_9_9
    TRIANGLE_UP_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_9_9
    TRIANGLE_UP_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_9_9
    TRIANGLE_DOWN_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_9_9
    TRIANGLE_DOWN_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_9_9
    DAVID_STAR_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_9_9
    DAVID_STAR_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_9_9
    SWISS_CROSS_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_9_9
    SWISS_CROSS_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_9_9
    DIAMOND_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_9_9
    DIAMOND_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_9_9
    SQUARE_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_9_9
    SQUARE_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_9_9
    PENTA_STAR_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_9_9
    PENTA_STAR_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_9_9
    markerIndex = _swig_property(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_markerIndex_get, HEPVis_SWIG_Python.HEPVis_SoMarkerSet_markerIndex_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_alternateRep_get, HEPVis_SWIG_Python.HEPVis_SoMarkerSet_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoMarkerSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_GLRender(*args)
    def doAction(*args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_doAction(*args)
    def write(*args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_write(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass)
    getMarkerIndex = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex)
    getMarkerStyleSize = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize)
HEPVis_SoMarkerSet_swigregister = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_swigregister
HEPVis_SoMarkerSet_swigregister(HEPVis_SoMarkerSet)
HEPVis_SoMarkerSet_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId
HEPVis_SoMarkerSet_initClass = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass
HEPVis_SoMarkerSet_getMarkerIndex = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex
HEPVis_SoMarkerSet_getMarkerStyleSize = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize

class HEPVis_SoImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.HEPVis_SoImage_getTypeId(*args)
    FITS = HEPVis_SWIG_Python.HEPVis_SoImage_FITS
    GIF = HEPVis_SWIG_Python.HEPVis_SoImage_GIF
    JPEG = HEPVis_SWIG_Python.HEPVis_SoImage_JPEG
    DVI = HEPVis_SWIG_Python.HEPVis_SoImage_DVI
    TEX = HEPVis_SWIG_Python.HEPVis_SoImage_TEX
    format = _swig_property(HEPVis_SWIG_Python.HEPVis_SoImage_format_get, HEPVis_SWIG_Python.HEPVis_SoImage_format_set)
    fileName = _swig_property(HEPVis_SWIG_Python.HEPVis_SoImage_fileName_get, HEPVis_SWIG_Python.HEPVis_SoImage_fileName_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def readImage(*args): return HEPVis_SWIG_Python.HEPVis_SoImage_readImage(*args)
    def getSize(*args): return HEPVis_SWIG_Python.HEPVis_SoImage_getSize(*args)
    def setPixmap(*args): return HEPVis_SWIG_Python.HEPVis_SoImage_setPixmap(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.HEPVis_SoImage_GLRender(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoImage_initClass)
HEPVis_SoImage_swigregister = HEPVis_SWIG_Python.HEPVis_SoImage_swigregister
HEPVis_SoImage_swigregister(HEPVis_SoImage)
HEPVis_SoImage_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId
HEPVis_SoImage_initClass = HEPVis_SWIG_Python.HEPVis_SoImage_initClass

class SoImageWriter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoImageWriter_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoImageWriter_getTypeId(*args)
    POST_SCRIPT = HEPVis_SWIG_Python.SoImageWriter_POST_SCRIPT
    GIF = HEPVis_SWIG_Python.SoImageWriter_GIF
    JPEG = HEPVis_SWIG_Python.SoImageWriter_JPEG
    format = _swig_property(HEPVis_SWIG_Python.SoImageWriter_format_get, HEPVis_SWIG_Python.SoImageWriter_format_set)
    fileName = _swig_property(HEPVis_SWIG_Python.SoImageWriter_fileName_get, HEPVis_SWIG_Python.SoImageWriter_fileName_set)
    quality = _swig_property(HEPVis_SWIG_Python.SoImageWriter_quality_get, HEPVis_SWIG_Python.SoImageWriter_quality_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoImageWriter_alternateRep_get, HEPVis_SWIG_Python.SoImageWriter_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoImageWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def enable(*args): return HEPVis_SWIG_Python.SoImageWriter_enable(*args)
    def disable(*args): return HEPVis_SWIG_Python.SoImageWriter_disable(*args)
    def getStatus(*args): return HEPVis_SWIG_Python.SoImageWriter_getStatus(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoImageWriter_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoImageWriter_clearAlternateRep(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoImageWriter_GLRender(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoImageWriter_doAction(*args)
    def write(*args): return HEPVis_SWIG_Python.SoImageWriter_write(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoImageWriter_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoImageWriter
    __del__ = lambda self : None;
SoImageWriter_swigregister = HEPVis_SWIG_Python.SoImageWriter_swigregister
SoImageWriter_swigregister(SoImageWriter)
SoImageWriter_getClassTypeId = HEPVis_SWIG_Python.SoImageWriter_getClassTypeId
SoImageWriter_initClass = HEPVis_SWIG_Python.SoImageWriter_initClass

class SoViewportRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoViewportRegion_getTypeId(*args)
    PERCENT = HEPVis_SWIG_Python.SoViewportRegion_PERCENT
    PIXELS = HEPVis_SWIG_Python.SoViewportRegion_PIXELS
    visible = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_visible_get, HEPVis_SWIG_Python.SoViewportRegion_visible_set)
    originUnit = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_originUnit_get, HEPVis_SWIG_Python.SoViewportRegion_originUnit_set)
    sizeUnit = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_sizeUnit_get, HEPVis_SWIG_Python.SoViewportRegion_sizeUnit_set)
    origin = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_origin_get, HEPVis_SWIG_Python.SoViewportRegion_origin_set)
    size = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_size_get, HEPVis_SWIG_Python.SoViewportRegion_size_set)
    horizontalBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalBorder_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalBorder_set)
    verticalBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalBorder_get, HEPVis_SWIG_Python.SoViewportRegion_verticalBorder_set)
    background = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_background_get, HEPVis_SWIG_Python.SoViewportRegion_background_set)
    backgroundColor = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_backgroundColor_get, HEPVis_SWIG_Python.SoViewportRegion_backgroundColor_set)
    borderColor = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_borderColor_get, HEPVis_SWIG_Python.SoViewportRegion_borderColor_set)
    highlighted = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_highlighted_get, HEPVis_SWIG_Python.SoViewportRegion_highlighted_set)
    highlightColor = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_highlightColor_get, HEPVis_SWIG_Python.SoViewportRegion_highlightColor_set)
    horizontalHighlightBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalHighlightBorder_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalHighlightBorder_set)
    verticalHighlightBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalHighlightBorder_get, HEPVis_SWIG_Python.SoViewportRegion_verticalHighlightBorder_set)
    horizontalShadow = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalShadow_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalShadow_set)
    verticalShadow = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalShadow_get, HEPVis_SWIG_Python.SoViewportRegion_verticalShadow_set)
    sensitiveBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_sensitiveBorder_get, HEPVis_SWIG_Python.SoViewportRegion_sensitiveBorder_set)
    horizontalOriginOffset = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalOriginOffset_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalOriginOffset_set)
    verticalOriginOffset = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalOriginOffset_get, HEPVis_SWIG_Python.SoViewportRegion_verticalOriginOffset_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_alternateRep_get, HEPVis_SWIG_Python.SoViewportRegion_alternateRep_set)
    showHighlight = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_showHighlight_get, HEPVis_SWIG_Python.SoViewportRegion_showHighlight_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoViewportRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return HEPVis_SWIG_Python.SoViewportRegion_reset(*args)
    def setPositionPixels(*args): return HEPVis_SWIG_Python.SoViewportRegion_setPositionPixels(*args)
    def setSizePixels(*args): return HEPVis_SWIG_Python.SoViewportRegion_setSizePixels(*args)
    def setPositionPercent(*args): return HEPVis_SWIG_Python.SoViewportRegion_setPositionPercent(*args)
    def setSizePercent(*args): return HEPVis_SWIG_Python.SoViewportRegion_setSizePercent(*args)
    def getPositionPercent(*args): return HEPVis_SWIG_Python.SoViewportRegion_getPositionPercent(*args)
    def getSizePercent(*args): return HEPVis_SWIG_Python.SoViewportRegion_getSizePercent(*args)
    def getPositionPixels(*args): return HEPVis_SWIG_Python.SoViewportRegion_getPositionPixels(*args)
    def getSizePixels(*args): return HEPVis_SWIG_Python.SoViewportRegion_getSizePixels(*args)
    def setOriginUnit(*args): return HEPVis_SWIG_Python.SoViewportRegion_setOriginUnit(*args)
    def setSizeUnit(*args): return HEPVis_SWIG_Python.SoViewportRegion_setSizeUnit(*args)
    def getBorderSize(*args): return HEPVis_SWIG_Python.SoViewportRegion_getBorderSize(*args)
    def isInside(*args): return HEPVis_SWIG_Python.SoViewportRegion_isInside(*args)
    def isResizing(*args): return HEPVis_SWIG_Python.SoViewportRegion_isResizing(*args)
    def isMoving(*args): return HEPVis_SWIG_Python.SoViewportRegion_isMoving(*args)
    def dispatchEvent(*args): return HEPVis_SWIG_Python.SoViewportRegion_dispatchEvent(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoViewportRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoViewportRegion_clearAlternateRep(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoViewportRegion_doAction(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoViewportRegion_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoViewportRegion_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoViewportRegion_pick(*args)
    def write(*args): return HEPVis_SWIG_Python.SoViewportRegion_write(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoViewportRegion_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoViewportRegion
    __del__ = lambda self : None;
SoViewportRegion_swigregister = HEPVis_SWIG_Python.SoViewportRegion_swigregister
SoViewportRegion_swigregister(SoViewportRegion)
SoViewportRegion_getClassTypeId = HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId
SoViewportRegion_initClass = HEPVis_SWIG_Python.SoViewportRegion_initClass

class SoTextHershey(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextHershey_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTextHershey_getTypeId(*args)
    LEFT = HEPVis_SWIG_Python.SoTextHershey_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextHershey_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextHershey_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextHershey_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextHershey_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextHershey_TOP
    LATIN = HEPVis_SWIG_Python.SoTextHershey_LATIN
    GREEK = HEPVis_SWIG_Python.SoTextHershey_GREEK
    SPECIAL = HEPVis_SWIG_Python.SoTextHershey_SPECIAL
    string = _swig_property(HEPVis_SWIG_Python.SoTextHershey_string_get, HEPVis_SWIG_Python.SoTextHershey_string_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoTextHershey_encoding_get, HEPVis_SWIG_Python.SoTextHershey_encoding_set)
    font = _swig_property(HEPVis_SWIG_Python.SoTextHershey_font_get, HEPVis_SWIG_Python.SoTextHershey_font_set)
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextHershey_horizontalJustification_get, HEPVis_SWIG_Python.SoTextHershey_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoTextHershey_verticalJustification_get, HEPVis_SWIG_Python.SoTextHershey_verticalJustification_set)
    height = _swig_property(HEPVis_SWIG_Python.SoTextHershey_height_get, HEPVis_SWIG_Python.SoTextHershey_height_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTextHershey_alternateRep_get, HEPVis_SWIG_Python.SoTextHershey_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTextHershey(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTextBounds(*args): return HEPVis_SWIG_Python.SoTextHershey_getTextBounds(*args)
    def getAscent(*args): return HEPVis_SWIG_Python.SoTextHershey_getAscent(*args)
    def getDescent(*args): return HEPVis_SWIG_Python.SoTextHershey_getDescent(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTextHershey_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTextHershey_clearAlternateRep(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoTextHershey_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoTextHershey_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoTextHershey_pick(*args)
    def write(*args): return HEPVis_SWIG_Python.SoTextHershey_write(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoTextHershey_callback(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoTextHershey_doAction(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextHershey_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextHershey
    __del__ = lambda self : None;
SoTextHershey_swigregister = HEPVis_SWIG_Python.SoTextHershey_swigregister
SoTextHershey_swigregister(SoTextHershey)
SoTextHershey_getClassTypeId = HEPVis_SWIG_Python.SoTextHershey_getClassTypeId
SoTextHershey_initClass = HEPVis_SWIG_Python.SoTextHershey_initClass

class SoTextVtk(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextVtk_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTextVtk_getTypeId(*args)
    string = _swig_property(HEPVis_SWIG_Python.SoTextVtk_string_get, HEPVis_SWIG_Python.SoTextVtk_string_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTextVtk(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return HEPVis_SWIG_Python.SoTextVtk_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoTextVtk_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoTextVtk_pick(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextVtk_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextVtk
    __del__ = lambda self : None;
SoTextVtk_swigregister = HEPVis_SWIG_Python.SoTextVtk_swigregister
SoTextVtk_swigregister(SoTextVtk)
SoTextVtk_getClassTypeId = HEPVis_SWIG_Python.SoTextVtk_getClassTypeId
SoTextVtk_initClass = HEPVis_SWIG_Python.SoTextVtk_initClass

class SoTextTTF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextTTF_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTextTTF_getTypeId(*args)
    LEFT = HEPVis_SWIG_Python.SoTextTTF_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextTTF_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextTTF_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextTTF_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextTTF_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextTTF_TOP
    fontName = _swig_property(HEPVis_SWIG_Python.SoTextTTF_fontName_get, HEPVis_SWIG_Python.SoTextTTF_fontName_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoTextTTF_encoding_get, HEPVis_SWIG_Python.SoTextTTF_encoding_set)
    string = _swig_property(HEPVis_SWIG_Python.SoTextTTF_string_get, HEPVis_SWIG_Python.SoTextTTF_string_set)
    size = _swig_property(HEPVis_SWIG_Python.SoTextTTF_size_get, HEPVis_SWIG_Python.SoTextTTF_size_set)
    smoothing = _swig_property(HEPVis_SWIG_Python.SoTextTTF_smoothing_get, HEPVis_SWIG_Python.SoTextTTF_smoothing_set)
    hinting = _swig_property(HEPVis_SWIG_Python.SoTextTTF_hinting_get, HEPVis_SWIG_Python.SoTextTTF_hinting_set)
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextTTF_horizontalJustification_get, HEPVis_SWIG_Python.SoTextTTF_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoTextTTF_verticalJustification_get, HEPVis_SWIG_Python.SoTextTTF_verticalJustification_set)
    align = _swig_property(HEPVis_SWIG_Python.SoTextTTF_align_get, HEPVis_SWIG_Python.SoTextTTF_align_set)
    rotated = _swig_property(HEPVis_SWIG_Python.SoTextTTF_rotated_get, HEPVis_SWIG_Python.SoTextTTF_rotated_set)
    rescale = _swig_property(HEPVis_SWIG_Python.SoTextTTF_rescale_get, HEPVis_SWIG_Python.SoTextTTF_rescale_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTextTTF_alternateRep_get, HEPVis_SWIG_Python.SoTextTTF_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTextTTF(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTextBounds(*args): return HEPVis_SWIG_Python.SoTextTTF_getTextBounds(*args)
    def getAscent(*args): return HEPVis_SWIG_Python.SoTextTTF_getAscent(*args)
    def getDescent(*args): return HEPVis_SWIG_Python.SoTextTTF_getDescent(*args)
    def getLatin(*args): return HEPVis_SWIG_Python.SoTextTTF_getLatin(*args)
    def getGreek(*args): return HEPVis_SWIG_Python.SoTextTTF_getGreek(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTextTTF_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTextTTF_clearAlternateRep(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoTextTTF_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoTextTTF_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoTextTTF_pick(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoTextTTF_doAction(*args)
    def write(*args): return HEPVis_SWIG_Python.SoTextTTF_write(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextTTF_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextTTF
    __del__ = lambda self : None;
SoTextTTF_swigregister = HEPVis_SWIG_Python.SoTextTTF_swigregister
SoTextTTF_swigregister(SoTextTTF)
SoTextTTF_getClassTypeId = HEPVis_SWIG_Python.SoTextTTF_getClassTypeId
SoTextTTF_initClass = HEPVis_SWIG_Python.SoTextTTF_initClass

class SoGrid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoGrid_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoGrid_getTypeId(*args)
    position = _swig_property(HEPVis_SWIG_Python.SoGrid_position_get, HEPVis_SWIG_Python.SoGrid_position_set)
    X = _swig_property(HEPVis_SWIG_Python.SoGrid_X_get, HEPVis_SWIG_Python.SoGrid_X_set)
    Y = _swig_property(HEPVis_SWIG_Python.SoGrid_Y_get, HEPVis_SWIG_Python.SoGrid_Y_set)
    rows = _swig_property(HEPVis_SWIG_Python.SoGrid_rows_get, HEPVis_SWIG_Python.SoGrid_rows_set)
    columns = _swig_property(HEPVis_SWIG_Python.SoGrid_columns_get, HEPVis_SWIG_Python.SoGrid_columns_set)
    width = _swig_property(HEPVis_SWIG_Python.SoGrid_width_get, HEPVis_SWIG_Python.SoGrid_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoGrid_height_get, HEPVis_SWIG_Python.SoGrid_height_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoGrid_alternateRep_get, HEPVis_SWIG_Python.SoGrid_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoGrid_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoGrid_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoGrid_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoGrid
    __del__ = lambda self : None;
SoGrid_swigregister = HEPVis_SWIG_Python.SoGrid_swigregister
SoGrid_swigregister(SoGrid)
SoGrid_getClassTypeId = HEPVis_SWIG_Python.SoGrid_getClassTypeId
SoGrid_initClass = HEPVis_SWIG_Python.SoGrid_initClass

class SoEdgedFaceSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoEdgedFaceSet_getTypeId(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoEdgedFaceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return HEPVis_SWIG_Python.SoEdgedFaceSet_GLRender(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoEdgedFaceSet_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEdgedFaceSet
    __del__ = lambda self : None;
SoEdgedFaceSet_swigregister = HEPVis_SWIG_Python.SoEdgedFaceSet_swigregister
SoEdgedFaceSet_swigregister(SoEdgedFaceSet)
SoEdgedFaceSet_getClassTypeId = HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId
SoEdgedFaceSet_initClass = HEPVis_SWIG_Python.SoEdgedFaceSet_initClass

class SoHighlightMaterial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoHighlightMaterial_getTypeId(*args)
    highlightColor = _swig_property(HEPVis_SWIG_Python.SoHighlightMaterial_highlightColor_get, HEPVis_SWIG_Python.SoHighlightMaterial_highlightColor_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoHighlightMaterial_alternateRep_get, HEPVis_SWIG_Python.SoHighlightMaterial_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoHighlightMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    def setSavedMaterial(*args): return HEPVis_SWIG_Python.SoHighlightMaterial_setSavedMaterial(*args)
    def getSavedMaterial(*args): return HEPVis_SWIG_Python.SoHighlightMaterial_getSavedMaterial(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoHighlightMaterial_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoHighlightMaterial_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoHighlightMaterial_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHighlightMaterial
    __del__ = lambda self : None;
SoHighlightMaterial_swigregister = HEPVis_SWIG_Python.SoHighlightMaterial_swigregister
SoHighlightMaterial_swigregister(SoHighlightMaterial)
SoHighlightMaterial_getClassTypeId = HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId
SoHighlightMaterial_initClass = HEPVis_SWIG_Python.SoHighlightMaterial_initClass

class SoSplineCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSplineCurve_getTypeId(*args)
    points = _swig_property(HEPVis_SWIG_Python.SoSplineCurve_points_get, HEPVis_SWIG_Python.SoSplineCurve_points_set)
    tangents = _swig_property(HEPVis_SWIG_Python.SoSplineCurve_tangents_get, HEPVis_SWIG_Python.SoSplineCurve_tangents_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSplineCurve_alternateRep_get, HEPVis_SWIG_Python.SoSplineCurve_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSplineCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoSplineCurve_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoSplineCurve_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSplineCurve_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSplineCurve
    __del__ = lambda self : None;
SoSplineCurve_swigregister = HEPVis_SWIG_Python.SoSplineCurve_swigregister
SoSplineCurve_swigregister(SoSplineCurve)
SoSplineCurve_getClassTypeId = HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId
SoSplineCurve_initClass = HEPVis_SWIG_Python.SoSplineCurve_initClass

class SoPyramid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPyramid_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPyramid_getTypeId(*args)
    backWidth = _swig_property(HEPVis_SWIG_Python.SoPyramid_backWidth_get, HEPVis_SWIG_Python.SoPyramid_backWidth_set)
    backHeight = _swig_property(HEPVis_SWIG_Python.SoPyramid_backHeight_get, HEPVis_SWIG_Python.SoPyramid_backHeight_set)
    frontWidth = _swig_property(HEPVis_SWIG_Python.SoPyramid_frontWidth_get, HEPVis_SWIG_Python.SoPyramid_frontWidth_set)
    frontHeight = _swig_property(HEPVis_SWIG_Python.SoPyramid_frontHeight_get, HEPVis_SWIG_Python.SoPyramid_frontHeight_set)
    depth = _swig_property(HEPVis_SWIG_Python.SoPyramid_depth_get, HEPVis_SWIG_Python.SoPyramid_depth_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPyramid(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoPyramid_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPyramid
    __del__ = lambda self : None;
SoPyramid_swigregister = HEPVis_SWIG_Python.SoPyramid_swigregister
SoPyramid_swigregister(SoPyramid)
SoPyramid_getClassTypeId = HEPVis_SWIG_Python.SoPyramid_getClassTypeId
SoPyramid_initClass = HEPVis_SWIG_Python.SoPyramid_initClass

class SoAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAxis_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoAxis_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoAxis_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoAxis_alternateRep_get, HEPVis_SWIG_Python.SoAxis_alternateRep_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoAxis_verbose_get, HEPVis_SWIG_Python.SoAxis_verbose_set)
    modeling = _swig_property(HEPVis_SWIG_Python.SoAxis_modeling_get, HEPVis_SWIG_Python.SoAxis_modeling_set)
    width = _swig_property(HEPVis_SWIG_Python.SoAxis_width_get, HEPVis_SWIG_Python.SoAxis_width_set)
    minimumValue = _swig_property(HEPVis_SWIG_Python.SoAxis_minimumValue_get, HEPVis_SWIG_Python.SoAxis_minimumValue_set)
    maximumValue = _swig_property(HEPVis_SWIG_Python.SoAxis_maximumValue_get, HEPVis_SWIG_Python.SoAxis_maximumValue_set)
    divisions = _swig_property(HEPVis_SWIG_Python.SoAxis_divisions_get, HEPVis_SWIG_Python.SoAxis_divisions_set)
    logScale = _swig_property(HEPVis_SWIG_Python.SoAxis_logScale_get, HEPVis_SWIG_Python.SoAxis_logScale_set)
    tickUp = _swig_property(HEPVis_SWIG_Python.SoAxis_tickUp_get, HEPVis_SWIG_Python.SoAxis_tickUp_set)
    tickLength = _swig_property(HEPVis_SWIG_Python.SoAxis_tickLength_get, HEPVis_SWIG_Python.SoAxis_tickLength_set)
    labelToAxis = _swig_property(HEPVis_SWIG_Python.SoAxis_labelToAxis_get, HEPVis_SWIG_Python.SoAxis_labelToAxis_set)
    labelHeight = _swig_property(HEPVis_SWIG_Python.SoAxis_labelHeight_get, HEPVis_SWIG_Python.SoAxis_labelHeight_set)
    title = _swig_property(HEPVis_SWIG_Python.SoAxis_title_get, HEPVis_SWIG_Python.SoAxis_title_set)
    titleToAxis = _swig_property(HEPVis_SWIG_Python.SoAxis_titleToAxis_get, HEPVis_SWIG_Python.SoAxis_titleToAxis_set)
    titleHeight = _swig_property(HEPVis_SWIG_Python.SoAxis_titleHeight_get, HEPVis_SWIG_Python.SoAxis_titleHeight_set)
    LEFT = HEPVis_SWIG_Python.SoAxis_LEFT
    CENTER = HEPVis_SWIG_Python.SoAxis_CENTER
    RIGHT = HEPVis_SWIG_Python.SoAxis_RIGHT
    titleToAxisJustification = _swig_property(HEPVis_SWIG_Python.SoAxis_titleToAxisJustification_get, HEPVis_SWIG_Python.SoAxis_titleToAxisJustification_set)
    ttfScale = _swig_property(HEPVis_SWIG_Python.SoAxis_ttfScale_get, HEPVis_SWIG_Python.SoAxis_ttfScale_set)
    labelsEnforced = _swig_property(HEPVis_SWIG_Python.SoAxis_labelsEnforced_get, HEPVis_SWIG_Python.SoAxis_labelsEnforced_set)
    timeLabels = _swig_property(HEPVis_SWIG_Python.SoAxis_timeLabels_get, HEPVis_SWIG_Python.SoAxis_timeLabels_set)
    timeFormat = _swig_property(HEPVis_SWIG_Python.SoAxis_timeFormat_get, HEPVis_SWIG_Python.SoAxis_timeFormat_set)
    timeOffset = _swig_property(HEPVis_SWIG_Python.SoAxis_timeOffset_get, HEPVis_SWIG_Python.SoAxis_timeOffset_set)
    timeOffsetIsGMT = _swig_property(HEPVis_SWIG_Python.SoAxis_timeOffsetIsGMT_get, HEPVis_SWIG_Python.SoAxis_timeOffsetIsGMT_set)
    tickNumber = _swig_property(HEPVis_SWIG_Python.SoAxis_tickNumber_get, HEPVis_SWIG_Python.SoAxis_tickNumber_set)
    labels = _swig_property(HEPVis_SWIG_Python.SoAxis_labels_get, HEPVis_SWIG_Python.SoAxis_labels_set)
    values = _swig_property(HEPVis_SWIG_Python.SoAxis_values_get, HEPVis_SWIG_Python.SoAxis_values_set)
    coords = _swig_property(HEPVis_SWIG_Python.SoAxis_coords_get, HEPVis_SWIG_Python.SoAxis_coords_set)
    subCoords = _swig_property(HEPVis_SWIG_Python.SoAxis_subCoords_get, HEPVis_SWIG_Python.SoAxis_subCoords_set)
    magnitude = _swig_property(HEPVis_SWIG_Python.SoAxis_magnitude_get, HEPVis_SWIG_Python.SoAxis_magnitude_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAxis_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoAxis_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoAxis_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoAxis_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoAxis_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoAxis_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoAxis_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoAxis_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoAxis_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoAxis_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoAxis_pick(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoAxis(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return HEPVis_SWIG_Python.SoAxis_reset(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoAxis_updateChildren(*args)
    def getLineStyle(*args): return HEPVis_SWIG_Python.SoAxis_getLineStyle(*args)
    def getTicksStyle(*args): return HEPVis_SWIG_Python.SoAxis_getTicksStyle(*args)
    def getLabelsStyle(*args): return HEPVis_SWIG_Python.SoAxis_getLabelsStyle(*args)
    def getTitleStyle(*args): return HEPVis_SWIG_Python.SoAxis_getTitleStyle(*args)
    def getMagStyle(*args): return HEPVis_SWIG_Python.SoAxis_getMagStyle(*args)
    def setVisible(*args): return HEPVis_SWIG_Python.SoAxis_setVisible(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoAxis_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoAxis_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxis
    __del__ = lambda self : None;
SoAxis_swigregister = HEPVis_SWIG_Python.SoAxis_swigregister
SoAxis_swigregister(SoAxis)
SoAxis_getClassTypeId = HEPVis_SWIG_Python.SoAxis_getClassTypeId
SoAxis_getClassNodekitCatalog = HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog
SoAxis_initClass = HEPVis_SWIG_Python.SoAxis_initClass

class SoAxes2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAxes2D_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoAxes2D_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoAxes2D_getNodekitCatalog(*args)
    SOLID = HEPVis_SWIG_Python.SoAxes2D_SOLID
    DASHED = HEPVis_SWIG_Python.SoAxes2D_DASHED
    DOTTED = HEPVis_SWIG_Python.SoAxes2D_DOTTED
    DASH_DOTTED = HEPVis_SWIG_Python.SoAxes2D_DASH_DOTTED
    gridColor = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridColor_get, HEPVis_SWIG_Python.SoAxes2D_gridColor_set)
    gridTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridTransparency_get, HEPVis_SWIG_Python.SoAxes2D_gridTransparency_set)
    gridLinePattern = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridLinePattern_get, HEPVis_SWIG_Python.SoAxes2D_gridLinePattern_set)
    gridVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridVisible_get, HEPVis_SWIG_Python.SoAxes2D_gridVisible_set)
    wallColor = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallColor_get, HEPVis_SWIG_Python.SoAxes2D_wallColor_set)
    wallTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallTransparency_get, HEPVis_SWIG_Python.SoAxes2D_wallTransparency_set)
    wallOffset = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallOffset_get, HEPVis_SWIG_Python.SoAxes2D_wallOffset_set)
    wallVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallVisible_get, HEPVis_SWIG_Python.SoAxes2D_wallVisible_set)
    topAxisVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_topAxisVisible_get, HEPVis_SWIG_Python.SoAxes2D_topAxisVisible_set)
    topAxisY = _swig_property(HEPVis_SWIG_Python.SoAxes2D_topAxisY_get, HEPVis_SWIG_Python.SoAxes2D_topAxisY_set)
    rightAxisVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_rightAxisVisible_get, HEPVis_SWIG_Python.SoAxes2D_rightAxisVisible_set)
    rightAxisX = _swig_property(HEPVis_SWIG_Python.SoAxes2D_rightAxisX_get, HEPVis_SWIG_Python.SoAxes2D_rightAxisX_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAxes2D_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoAxes2D_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoAxes2D_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoAxes2D_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoAxes2D_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoAxes2D_pick(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoAxes2D_getBoundingBox(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoAxes2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getXAxis(*args): return HEPVis_SWIG_Python.SoAxes2D_getXAxis(*args)
    def getYAxis(*args): return HEPVis_SWIG_Python.SoAxes2D_getYAxis(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxes2D
    __del__ = lambda self : None;
SoAxes2D_swigregister = HEPVis_SWIG_Python.SoAxes2D_swigregister
SoAxes2D_swigregister(SoAxes2D)
SoAxes2D_getClassTypeId = HEPVis_SWIG_Python.SoAxes2D_getClassTypeId
SoAxes2D_getClassNodekitCatalog = HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog
SoAxes2D_initClass = HEPVis_SWIG_Python.SoAxes2D_initClass

class SoAxes3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAxes3D_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoAxes3D_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoAxes3D_getNodekitCatalog(*args)
    gridColor = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridColor_get, HEPVis_SWIG_Python.SoAxes3D_gridColor_set)
    gridTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridTransparency_get, HEPVis_SWIG_Python.SoAxes3D_gridTransparency_set)
    gridLinePattern = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridLinePattern_get, HEPVis_SWIG_Python.SoAxes3D_gridLinePattern_set)
    gridVisible = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridVisible_get, HEPVis_SWIG_Python.SoAxes3D_gridVisible_set)
    wallColor = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallColor_get, HEPVis_SWIG_Python.SoAxes3D_wallColor_set)
    wallTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallTransparency_get, HEPVis_SWIG_Python.SoAxes3D_wallTransparency_set)
    wallOffset = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallOffset_get, HEPVis_SWIG_Python.SoAxes3D_wallOffset_set)
    wallVisible = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallVisible_get, HEPVis_SWIG_Python.SoAxes3D_wallVisible_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAxes3D_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoAxes3D_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoAxes3D_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoAxes3D_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoAxes3D_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoAxes3D_pick(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoAxes3D_getBoundingBox(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoAxes3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getXAxis(*args): return HEPVis_SWIG_Python.SoAxes3D_getXAxis(*args)
    def getYAxis(*args): return HEPVis_SWIG_Python.SoAxes3D_getYAxis(*args)
    def getZAxis(*args): return HEPVis_SWIG_Python.SoAxes3D_getZAxis(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxes3D
    __del__ = lambda self : None;
SoAxes3D_swigregister = HEPVis_SWIG_Python.SoAxes3D_swigregister
SoAxes3D_swigregister(SoAxes3D)
SoAxes3D_getClassTypeId = HEPVis_SWIG_Python.SoAxes3D_getClassTypeId
SoAxes3D_getClassNodekitCatalog = HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog
SoAxes3D_initClass = HEPVis_SWIG_Python.SoAxes3D_initClass

class SoSimpleButton(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSimpleButton_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoSimpleButton_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_alternateRep_get, HEPVis_SWIG_Python.SoSimpleButton_alternateRep_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_verbose_get, HEPVis_SWIG_Python.SoSimpleButton_verbose_set)
    width = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_width_get, HEPVis_SWIG_Python.SoSimpleButton_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_height_get, HEPVis_SWIG_Python.SoSimpleButton_height_set)
    label = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_label_get, HEPVis_SWIG_Python.SoSimpleButton_label_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSimpleButton_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoSimpleButton_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoSimpleButton_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoSimpleButton_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoSimpleButton_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoSimpleButton_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoSimpleButton_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoSimpleButton_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoSimpleButton_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoSimpleButton_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoSimpleButton_pick(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSimpleButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def updateChildren(*args): return HEPVis_SWIG_Python.SoSimpleButton_updateChildren(*args)
    def getBackStyle(*args): return HEPVis_SWIG_Python.SoSimpleButton_getBackStyle(*args)
    def getLabelStyle(*args): return HEPVis_SWIG_Python.SoSimpleButton_getLabelStyle(*args)
    def addCallback(*args): return HEPVis_SWIG_Python.SoSimpleButton_addCallback(*args)
    def removeCallback(*args): return HEPVis_SWIG_Python.SoSimpleButton_removeCallback(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoSimpleButton_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoSimpleButton_clearAlternateRep(*args)
    def invokeCallbacks(*args): return HEPVis_SWIG_Python.SoSimpleButton_invokeCallbacks(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSimpleButton
    __del__ = lambda self : None;
SoSimpleButton_swigregister = HEPVis_SWIG_Python.SoSimpleButton_swigregister
SoSimpleButton_swigregister(SoSimpleButton)
SoSimpleButton_getClassTypeId = HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId
SoSimpleButton_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog
SoSimpleButton_initClass = HEPVis_SWIG_Python.SoSimpleButton_initClass

class RegionCamera(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_RegionCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_RegionCamera
    __del__ = lambda self : None;
    def restore(*args): return HEPVis_SWIG_Python.RegionCamera_restore(*args)
RegionCamera_swigregister = HEPVis_SWIG_Python.RegionCamera_swigregister
RegionCamera_swigregister(RegionCamera)

class SbDoIt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDoIt
    __del__ = lambda self : None;
    def cast(*args): return HEPVis_SWIG_Python.SbDoIt_cast(*args)
SbDoIt_swigregister = HEPVis_SWIG_Python.SbDoIt_swigregister
SbDoIt_swigregister(SbDoIt)

class SbAddNode(SbDoIt):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def cast(*args): return HEPVis_SWIG_Python.SbAddNode_cast(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAddNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAddNode
    __del__ = lambda self : None;
    def getNode(*args): return HEPVis_SWIG_Python.SbAddNode_getNode(*args)
    def getPlacement(*args): return HEPVis_SWIG_Python.SbAddNode_getPlacement(*args)
    def reset(*args): return HEPVis_SWIG_Python.SbAddNode_reset(*args)
SbAddNode_swigregister = HEPVis_SWIG_Python.SbAddNode_swigregister
SbAddNode_swigregister(SbAddNode)

class SoRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoRegion_getNodekitCatalog(*args)
    visible = _swig_property(HEPVis_SWIG_Python.SoRegion_visible_get, HEPVis_SWIG_Python.SoRegion_visible_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoRegion_verbose_get, HEPVis_SWIG_Python.SoRegion_verbose_set)
    color = _swig_property(HEPVis_SWIG_Python.SoRegion_color_get, HEPVis_SWIG_Python.SoRegion_color_set)
    origin = _swig_property(HEPVis_SWIG_Python.SoRegion_origin_get, HEPVis_SWIG_Python.SoRegion_origin_set)
    size = _swig_property(HEPVis_SWIG_Python.SoRegion_size_get, HEPVis_SWIG_Python.SoRegion_size_set)
    horizontalMargin = _swig_property(HEPVis_SWIG_Python.SoRegion_horizontalMargin_get, HEPVis_SWIG_Python.SoRegion_horizontalMargin_set)
    verticalMargin = _swig_property(HEPVis_SWIG_Python.SoRegion_verticalMargin_get, HEPVis_SWIG_Python.SoRegion_verticalMargin_set)
    PERCENT = HEPVis_SWIG_Python.SoRegion_PERCENT
    AXIS = HEPVis_SWIG_Python.SoRegion_AXIS
    originUnit = _swig_property(HEPVis_SWIG_Python.SoRegion_originUnit_get, HEPVis_SWIG_Python.SoRegion_originUnit_set)
    LEFT = HEPVis_SWIG_Python.SoRegion_LEFT
    CENTER = HEPVis_SWIG_Python.SoRegion_CENTER
    RIGHT = HEPVis_SWIG_Python.SoRegion_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoRegion_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoRegion_MIDDLE
    TOP = HEPVis_SWIG_Python.SoRegion_TOP
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoRegion_horizontalJustification_get, HEPVis_SWIG_Python.SoRegion_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoRegion_verticalJustification_get, HEPVis_SWIG_Python.SoRegion_verticalJustification_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def getViewportRegion(*args): return HEPVis_SWIG_Python.SoRegion_getViewportRegion(*args)
    def pushCamera(*args): return HEPVis_SWIG_Python.SoRegion_pushCamera(*args)
    def popCamera(*args): return HEPVis_SWIG_Python.SoRegion_popCamera(*args)
    def clearCameraStack(*args): return HEPVis_SWIG_Python.SoRegion_clearCameraStack(*args)
    def viewRectangle(*args): return HEPVis_SWIG_Python.SoRegion_viewRectangle(*args)
    def findPart(*args): return HEPVis_SWIG_Python.SoRegion_findPart(*args)
    def findNode(*args): return HEPVis_SWIG_Python.SoRegion_findNode(*args)
    def styleCache(*args): return HEPVis_SWIG_Python.SoRegion_styleCache(*args)
    def clearStyleCache(*args): return HEPVis_SWIG_Python.SoRegion_clearStyleCache(*args)
    def setPAW_Placement(*args): return HEPVis_SWIG_Python.SoRegion_setPAW_Placement(*args)
    def getPAW_Placement(*args): return HEPVis_SWIG_Python.SoRegion_getPAW_Placement(*args)
    def raiseUpdateFlag(*args): return HEPVis_SWIG_Python.SoRegion_raiseUpdateFlag(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoRegion_getCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoRegion_clear(*args)
    def refresh(*args): return HEPVis_SWIG_Python.SoRegion_refresh(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoRegion_resetCamera(*args)
    def setCamera(*args): return HEPVis_SWIG_Python.SoRegion_setCamera(*args)
    def doIt(*args): return HEPVis_SWIG_Python.SoRegion_doIt(*args)
    def undo(*args): return HEPVis_SWIG_Python.SoRegion_undo(*args)
    def resetUndo(*args): return HEPVis_SWIG_Python.SoRegion_resetUndo(*args)
    def connectFrom(*args): return HEPVis_SWIG_Python.SoRegion_connectFrom(*args)
    def getNodeOfInterest(*args): return HEPVis_SWIG_Python.SoRegion_getNodeOfInterest(*args)
    def placeInPage(*args): return HEPVis_SWIG_Python.SoRegion_placeInPage(*args)
    def setNode(*args): return HEPVis_SWIG_Python.SoRegion_setNode(*args)
    def setPosition(*args): return HEPVis_SWIG_Python.SoRegion_setPosition(*args)
    def setSize(*args): return HEPVis_SWIG_Python.SoRegion_setSize(*args)
    def readScene(*args): return HEPVis_SWIG_Python.SoRegion_readScene(*args)
    def getWriteNode(*args): return HEPVis_SWIG_Python.SoRegion_getWriteNode(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoRegion_initClass)
    def GLRender(*args): return HEPVis_SWIG_Python.SoRegion_GLRender(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRegion
    __del__ = lambda self : None;
    def cast_SoDisplayRegion(*args): return HEPVis_SWIG_Python.SoRegion_cast_SoDisplayRegion(*args)
    def cast_SoImageRegion(*args): return HEPVis_SWIG_Python.SoRegion_cast_SoImageRegion(*args)
    def cast_SoTextRegion(*args): return HEPVis_SWIG_Python.SoRegion_cast_SoTextRegion(*args)
    def cast_SoPlotterRegion(*args): return HEPVis_SWIG_Python.SoRegion_cast_SoPlotterRegion(*args)
SoRegion_swigregister = HEPVis_SWIG_Python.SoRegion_swigregister
SoRegion_swigregister(SoRegion)
SoRegion_getClassTypeId = HEPVis_SWIG_Python.SoRegion_getClassTypeId
SoRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog
SoRegion_initClass = HEPVis_SWIG_Python.SoRegion_initClass

class SoTextRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTextRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoTextRegion_getNodekitCatalog(*args)
    text = _swig_property(HEPVis_SWIG_Python.SoTextRegion_text_get, HEPVis_SWIG_Python.SoTextRegion_text_set)
    LEFT = HEPVis_SWIG_Python.SoTextRegion_LEFT
    RIGHT = HEPVis_SWIG_Python.SoTextRegion_RIGHT
    CENTER = HEPVis_SWIG_Python.SoTextRegion_CENTER
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextRegion_horizontalJustification_get, HEPVis_SWIG_Python.SoTextRegion_horizontalJustification_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTextRegion_alternateRep_get, HEPVis_SWIG_Python.SoTextRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextRegion_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTextRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTextRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTextRegion_clearAlternateRep(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoTextRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoTextRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoTextRegion_getCamera(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoTextRegion_resetCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoTextRegion_clear(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoTextRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoTextRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoTextRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoTextRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoTextRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoTextRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoTextRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoTextRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoTextRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoTextRegion_pick(*args)
    def getStyle(*args): return HEPVis_SWIG_Python.SoTextRegion_getStyle(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextRegion
    __del__ = lambda self : None;
SoTextRegion_swigregister = HEPVis_SWIG_Python.SoTextRegion_swigregister
SoTextRegion_swigregister(SoTextRegion)
SoTextRegion_getClassTypeId = HEPVis_SWIG_Python.SoTextRegion_getClassTypeId
SoTextRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog
SoTextRegion_initClass = HEPVis_SWIG_Python.SoTextRegion_initClass

class SoImageRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoImageRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoImageRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoImageRegion_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoImageRegion_alternateRep_get, HEPVis_SWIG_Python.SoImageRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoImageRegion_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoImageRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoImageRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoImageRegion_clearAlternateRep(*args)
    def getImage(*args): return HEPVis_SWIG_Python.SoImageRegion_getImage(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoImageRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoImageRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoImageRegion_getCamera(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoImageRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoImageRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoImageRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoImageRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoImageRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoImageRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoImageRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoImageRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoImageRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoImageRegion_pick(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoImageRegion
    __del__ = lambda self : None;
SoImageRegion_swigregister = HEPVis_SWIG_Python.SoImageRegion_swigregister
SoImageRegion_swigregister(SoImageRegion)
SoImageRegion_getClassTypeId = HEPVis_SWIG_Python.SoImageRegion_getClassTypeId
SoImageRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog
SoImageRegion_initClass = HEPVis_SWIG_Python.SoImageRegion_initClass

class SoDisplayRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getNodekitCatalog(*args)
    projection = _swig_property(HEPVis_SWIG_Python.SoDisplayRegion_projection_get, HEPVis_SWIG_Python.SoDisplayRegion_projection_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDisplayRegion_alternateRep_get, HEPVis_SWIG_Python.SoDisplayRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDisplayRegion_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoDisplayRegion_doAction(*args)
    def write(*args): return HEPVis_SWIG_Python.SoDisplayRegion_write(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoDisplayRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCameraType(*args): return HEPVis_SWIG_Python.SoDisplayRegion_setCameraType(*args)
    def setCamera(*args): return HEPVis_SWIG_Python.SoDisplayRegion_setCamera(*args)
    def getSceneSeparator(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getSceneSeparator(*args)
    def getStaticScene(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getStaticScene(*args)
    def getDynamicScene(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getDynamicScene(*args)
    def getLight(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getLight(*args)
    def getLightModel(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getLightModel(*args)
    def getTransform(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getTransform(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoDisplayRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoDisplayRegion_clearAlternateRep(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoDisplayRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoDisplayRegion_clear(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoDisplayRegion_resetCamera(*args)
    def doIt(*args): return HEPVis_SWIG_Python.SoDisplayRegion_doIt(*args)
    def undo(*args): return HEPVis_SWIG_Python.SoDisplayRegion_undo(*args)
    def resetUndo(*args): return HEPVis_SWIG_Python.SoDisplayRegion_resetUndo(*args)
    def connectFrom(*args): return HEPVis_SWIG_Python.SoDisplayRegion_connectFrom(*args)
    def getNodeOfInterest(*args): return HEPVis_SWIG_Python.SoDisplayRegion_getNodeOfInterest(*args)
    def readScene(*args): return HEPVis_SWIG_Python.SoDisplayRegion_readScene(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDisplayRegion
    __del__ = lambda self : None;
SoDisplayRegion_swigregister = HEPVis_SWIG_Python.SoDisplayRegion_swigregister
SoDisplayRegion_swigregister(SoDisplayRegion)
SoDisplayRegion_getClassTypeId = HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId
SoDisplayRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog
SoDisplayRegion_initClass = HEPVis_SWIG_Python.SoDisplayRegion_initClass

class SoRulerRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoRulerRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoRulerRegion_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoRulerRegion_alternateRep_get, HEPVis_SWIG_Python.SoRulerRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoRulerRegion_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoRulerRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMeasuredRegion(*args): return HEPVis_SWIG_Python.SoRulerRegion_setMeasuredRegion(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoRulerRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoRulerRegion_clearAlternateRep(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoRulerRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoRulerRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoRulerRegion_getCamera(*args)
    def getAxis(*args): return HEPVis_SWIG_Python.SoRulerRegion_getAxis(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoRulerRegion_resetCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoRulerRegion_clear(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoRulerRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoRulerRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoRulerRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoRulerRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoRulerRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoRulerRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoRulerRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoRulerRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoRulerRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoRulerRegion_pick(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRulerRegion
    __del__ = lambda self : None;
SoRulerRegion_swigregister = HEPVis_SWIG_Python.SoRulerRegion_swigregister
SoRulerRegion_swigregister(SoRulerRegion)
SoRulerRegion_getClassTypeId = HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId
SoRulerRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog
SoRulerRegion_initClass = HEPVis_SWIG_Python.SoRulerRegion_initClass

class SoFormRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoFormRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoFormRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoFormRegion_getNodekitCatalog(*args)
    shapes = _swig_property(HEPVis_SWIG_Python.SoFormRegion_shapes_get, HEPVis_SWIG_Python.SoFormRegion_shapes_set)
    columns = _swig_property(HEPVis_SWIG_Python.SoFormRegion_columns_get, HEPVis_SWIG_Python.SoFormRegion_columns_set)
    rows = _swig_property(HEPVis_SWIG_Python.SoFormRegion_rows_get, HEPVis_SWIG_Python.SoFormRegion_rows_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoFormRegion_alternateRep_get, HEPVis_SWIG_Python.SoFormRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoFormRegion_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoFormRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoFormRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoFormRegion_clearAlternateRep(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoFormRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoFormRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoFormRegion_getCamera(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoFormRegion_resetCamera(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoFormRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoFormRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoFormRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoFormRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoFormRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoFormRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoFormRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoFormRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoFormRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoFormRegion_pick(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoFormRegion
    __del__ = lambda self : None;
SoFormRegion_swigregister = HEPVis_SWIG_Python.SoFormRegion_swigregister
SoFormRegion_swigregister(SoFormRegion)
SoFormRegion_getClassTypeId = HEPVis_SWIG_Python.SoFormRegion_getClassTypeId
SoFormRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog
SoFormRegion_initClass = HEPVis_SWIG_Python.SoFormRegion_initClass

class SbSetRegionCallback(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbSetRegionCallback
    __del__ = lambda self : None;
    def setCamera(*args): return HEPVis_SWIG_Python.SbSetRegionCallback_setCamera(*args)
SbSetRegionCallback_swigregister = HEPVis_SWIG_Python.SbSetRegionCallback_swigregister
SbSetRegionCallback_swigregister(SbSetRegionCallback)

class SbCollectCallback(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbCollectCallback
    __del__ = lambda self : None;
    def execute(*args): return HEPVis_SWIG_Python.SbCollectCallback_execute(*args)
SbCollectCallback_swigregister = HEPVis_SWIG_Python.SbCollectCallback_swigregister
SbCollectCallback_swigregister(SbCollectCallback)

class SoCanvas(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCanvas_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCanvas_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoCanvas_getNodekitCatalog(*args)
    verbose = _swig_property(HEPVis_SWIG_Python.SoCanvas_verbose_get, HEPVis_SWIG_Python.SoCanvas_verbose_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoCanvas_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCanvas(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoCanvas_getTopSeparator(*args)
    def setHandlePickedPoint(*args): return HEPVis_SWIG_Python.SoCanvas_setHandlePickedPoint(*args)
    def handlePickedPoint(*args): return HEPVis_SWIG_Python.SoCanvas_handlePickedPoint(*args)
    def setCollectCallback(*args): return HEPVis_SWIG_Python.SoCanvas_setCollectCallback(*args)
    def getCollectCallback(*args): return HEPVis_SWIG_Python.SoCanvas_getCollectCallback(*args)
    def collect(*args): return HEPVis_SWIG_Python.SoCanvas_collect(*args)
    def createRegion(*args): return HEPVis_SWIG_Python.SoCanvas_createRegion(*args)
    def deleteRegion(*args): return HEPVis_SWIG_Python.SoCanvas_deleteRegion(*args)
    def clearRegions(*args): return HEPVis_SWIG_Python.SoCanvas_clearRegions(*args)
    def deleteRegions(*args): return HEPVis_SWIG_Python.SoCanvas_deleteRegions(*args)
    def raiseUpdateFlagOfRegions(*args): return HEPVis_SWIG_Python.SoCanvas_raiseUpdateFlagOfRegions(*args)
    def refreshRegions(*args): return HEPVis_SWIG_Python.SoCanvas_refreshRegions(*args)
    def getNumberOfRegions(*args): return HEPVis_SWIG_Python.SoCanvas_getNumberOfRegions(*args)
    def setRootRegionsHighlightable(*args): return HEPVis_SWIG_Python.SoCanvas_setRootRegionsHighlightable(*args)
    def getRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getRegion(*args)
    def getRegionIndex(*args): return HEPVis_SWIG_Python.SoCanvas_getRegionIndex(*args)
    def getNextRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getNextRegion(*args)
    def getPreviousRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getPreviousRegion(*args)
    def setRegionOnTop(*args): return HEPVis_SWIG_Python.SoCanvas_setRegionOnTop(*args)
    def getPathRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getPathRegion(*args)
    def getPickedRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getPickedRegion(*args)
    def setSetRegionCallback(*args): return HEPVis_SWIG_Python.SoCanvas_setSetRegionCallback(*args)
    def disableRegionCamera(*args): return HEPVis_SWIG_Python.SoCanvas_disableRegionCamera(*args)
    def getHighlightedRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getHighlightedRegion(*args)
    def highlightRegion(*args): return HEPVis_SWIG_Python.SoCanvas_highlightRegion(*args)
    def highlightNextRegion(*args): return HEPVis_SWIG_Python.SoCanvas_highlightNextRegion(*args)
    def highlightPreviousRegion(*args): return HEPVis_SWIG_Python.SoCanvas_highlightPreviousRegion(*args)
    def deleteHighlightedRegion(*args): return HEPVis_SWIG_Python.SoCanvas_deleteHighlightedRegion(*args)
    def setRegionsCanvasVerbosity(*args): return HEPVis_SWIG_Python.SoCanvas_setRegionsCanvasVerbosity(*args)
    def getNumberOfRootRegions(*args): return HEPVis_SWIG_Python.SoCanvas_getNumberOfRootRegions(*args)
    def isRootRegion(*args): return HEPVis_SWIG_Python.SoCanvas_isRootRegion(*args)
    def getRootRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getRootRegion(*args)
    def getRootRegionIndex(*args): return HEPVis_SWIG_Python.SoCanvas_getRootRegionIndex(*args)
    def getNextRootRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getNextRootRegion(*args)
    def getPreviousRootRegion(*args): return HEPVis_SWIG_Python.SoCanvas_getPreviousRootRegion(*args)
    def currentRegion(*args): return HEPVis_SWIG_Python.SoCanvas_currentRegion(*args)
    def setCurrentRegion(*args): return HEPVis_SWIG_Python.SoCanvas_setCurrentRegion(*args)
    def connectCurrentRegion(*args): return HEPVis_SWIG_Python.SoCanvas_connectCurrentRegion(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCanvas
    __del__ = lambda self : None;
SoCanvas_swigregister = HEPVis_SWIG_Python.SoCanvas_swigregister
SoCanvas_swigregister(SoCanvas)
SoCanvas_getClassTypeId = HEPVis_SWIG_Python.SoCanvas_getClassTypeId
SoCanvas_getClassNodekitCatalog = HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog
SoCanvas_initClass = HEPVis_SWIG_Python.SoCanvas_initClass

class SoPage(SoCanvas):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPage_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPage_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoPage_getNodekitCatalog(*args)
    title = _swig_property(HEPVis_SWIG_Python.SoPage_title_get, HEPVis_SWIG_Python.SoPage_title_set)
    titleVisible = _swig_property(HEPVis_SWIG_Python.SoPage_titleVisible_get, HEPVis_SWIG_Python.SoPage_titleVisible_set)
    titleHeight = _swig_property(HEPVis_SWIG_Python.SoPage_titleHeight_get, HEPVis_SWIG_Python.SoPage_titleHeight_set)
    titleGeometryAutomated = _swig_property(HEPVis_SWIG_Python.SoPage_titleGeometryAutomated_get, HEPVis_SWIG_Python.SoPage_titleGeometryAutomated_set)
    LEAVE_ALONE = HEPVis_SWIG_Python.SoPage_LEAVE_ALONE
    PAW_GRID = HEPVis_SWIG_Python.SoPage_PAW_GRID
    regionsResizePolicy = _swig_property(HEPVis_SWIG_Python.SoPage_regionsResizePolicy_get, HEPVis_SWIG_Python.SoPage_regionsResizePolicy_set)
    pageWidth = _swig_property(HEPVis_SWIG_Python.SoPage_pageWidth_get, HEPVis_SWIG_Python.SoPage_pageWidth_set)
    pageHeight = _swig_property(HEPVis_SWIG_Python.SoPage_pageHeight_get, HEPVis_SWIG_Python.SoPage_pageHeight_set)
    leftMargin = _swig_property(HEPVis_SWIG_Python.SoPage_leftMargin_get, HEPVis_SWIG_Python.SoPage_leftMargin_set)
    rightMargin = _swig_property(HEPVis_SWIG_Python.SoPage_rightMargin_get, HEPVis_SWIG_Python.SoPage_rightMargin_set)
    bottomMargin = _swig_property(HEPVis_SWIG_Python.SoPage_bottomMargin_get, HEPVis_SWIG_Python.SoPage_bottomMargin_set)
    topMargin = _swig_property(HEPVis_SWIG_Python.SoPage_topMargin_get, HEPVis_SWIG_Python.SoPage_topMargin_set)
    horizontalSpacing = _swig_property(HEPVis_SWIG_Python.SoPage_horizontalSpacing_get, HEPVis_SWIG_Python.SoPage_horizontalSpacing_set)
    verticalSpacing = _swig_property(HEPVis_SWIG_Python.SoPage_verticalSpacing_get, HEPVis_SWIG_Python.SoPage_verticalSpacing_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPage_alternateRep_get, HEPVis_SWIG_Python.SoPage_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPage_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoPage_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoPage_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoPage_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoPage_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoPage_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoPage_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoPage_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoPage_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoPage_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoPage_pick(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPage(*args)
        try: self.this.append(this)
        except: self.this = this
    def refresh(*args): return HEPVis_SWIG_Python.SoPage_refresh(*args)
    def raiseUpdateFlag(*args): return HEPVis_SWIG_Python.SoPage_raiseUpdateFlag(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoPage_updateChildren(*args)
    def getImageWriter(*args): return HEPVis_SWIG_Python.SoPage_getImageWriter(*args)
    def getTitleRegion(*args): return HEPVis_SWIG_Python.SoPage_getTitleRegion(*args)
    def setTitleVisible(*args): return HEPVis_SWIG_Python.SoPage_setTitleVisible(*args)
    def createRegions(*args): return HEPVis_SWIG_Python.SoPage_createRegions(*args)
    def addRegions(*args): return HEPVis_SWIG_Python.SoPage_addRegions(*args)
    def mapRegionToPage(*args): return HEPVis_SWIG_Python.SoPage_mapRegionToPage(*args)
    def mapHighlightedRegionToPage(*args): return HEPVis_SWIG_Python.SoPage_mapHighlightedRegionToPage(*args)
    def createGridRegion(*args): return HEPVis_SWIG_Python.SoPage_createGridRegion(*args)
    def resetGrid(*args): return HEPVis_SWIG_Python.SoPage_resetGrid(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPage_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPage_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPage
    __del__ = lambda self : None;
SoPage_swigregister = HEPVis_SWIG_Python.SoPage_swigregister
SoPage_swigregister(SoPage)
SoPage_getClassTypeId = HEPVis_SWIG_Python.SoPage_getClassTypeId
SoPage_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog
SoPage_initClass = HEPVis_SWIG_Python.SoPage_initClass

class SoPainterAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPainterAction_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPainterAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoPainterAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoPainterAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPainterAction(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPainter(*args): return HEPVis_SWIG_Python.SoPainterAction_setPainter(*args)
    def setViewportRegion(*args): return HEPVis_SWIG_Python.SoPainterAction_setViewportRegion(*args)
    def getViewportRegion(*args): return HEPVis_SWIG_Python.SoPainterAction_getViewportRegion(*args)
    def setBackgroundColor(*args): return HEPVis_SWIG_Python.SoPainterAction_setBackgroundColor(*args)
    def enableSort(*args): return HEPVis_SWIG_Python.SoPainterAction_enableSort(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPainterAction_initClass)
    def drawPrimitive(*args): return HEPVis_SWIG_Python.SoPainterAction_drawPrimitive(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPainterAction
    __del__ = lambda self : None;
SoPainterAction_swigregister = HEPVis_SWIG_Python.SoPainterAction_swigregister
SoPainterAction_swigregister(SoPainterAction)
SoPainterAction_getClassTypeId = HEPVis_SWIG_Python.SoPainterAction_getClassTypeId
SoPainterAction_addMethod = HEPVis_SWIG_Python.SoPainterAction_addMethod
SoPainterAction_enableElement = HEPVis_SWIG_Python.SoPainterAction_enableElement
SoPainterAction_initClass = HEPVis_SWIG_Python.SoPainterAction_initClass

class SoGL2PSAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return HEPVis_SWIG_Python.SoGL2PSAction_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoGL2PSAction(*args)
        try: self.this.append(this)
        except: self.this = this
    PS = HEPVis_SWIG_Python.SoGL2PSAction_PS
    EPS = HEPVis_SWIG_Python.SoGL2PSAction_EPS
    TEX = HEPVis_SWIG_Python.SoGL2PSAction_TEX
    PDF = HEPVis_SWIG_Python.SoGL2PSAction_PDF
    SVG = HEPVis_SWIG_Python.SoGL2PSAction_SVG
    PGF = HEPVis_SWIG_Python.SoGL2PSAction_PGF
    def setFileFormat(*args): return HEPVis_SWIG_Python.SoGL2PSAction_setFileFormat(*args)
    def setFileName(*args): return HEPVis_SWIG_Python.SoGL2PSAction_setFileName(*args)
    def setPageOptions(*args): return HEPVis_SWIG_Python.SoGL2PSAction_setPageOptions(*args)
    def enableFileWriting(*args): return HEPVis_SWIG_Python.SoGL2PSAction_enableFileWriting(*args)
    def disableFileWriting(*args): return HEPVis_SWIG_Python.SoGL2PSAction_disableFileWriting(*args)
    def fileWritingEnabled(*args): return HEPVis_SWIG_Python.SoGL2PSAction_fileWritingEnabled(*args)
    def addBitmap(*args): return HEPVis_SWIG_Python.SoGL2PSAction_addBitmap(*args)
    def beginViewport(*args): return HEPVis_SWIG_Python.SoGL2PSAction_beginViewport(*args)
    def endViewport(*args): return HEPVis_SWIG_Python.SoGL2PSAction_endViewport(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoGL2PSAction
    __del__ = lambda self : None;
SoGL2PSAction_swigregister = HEPVis_SWIG_Python.SoGL2PSAction_swigregister
SoGL2PSAction_swigregister(SoGL2PSAction)
SoGL2PSAction_getClassTypeId = HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId
SoGL2PSAction_addMethod = HEPVis_SWIG_Python.SoGL2PSAction_addMethod
SoGL2PSAction_enableElement = HEPVis_SWIG_Python.SoGL2PSAction_enableElement
SoGL2PSAction_initClass = HEPVis_SWIG_Python.SoGL2PSAction_initClass

class SoCollectAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCollectAction_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCollectAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoCollectAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoCollectAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCollectAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCollectAction
    __del__ = lambda self : None;
    def setSearchArea(*args): return HEPVis_SWIG_Python.SoCollectAction_setSearchArea(*args)
    def paths(*args): return HEPVis_SWIG_Python.SoCollectAction_paths(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoCollectAction_initClass)
SoCollectAction_swigregister = HEPVis_SWIG_Python.SoCollectAction_swigregister
SoCollectAction_swigregister(SoCollectAction)
SoCollectAction_getClassTypeId = HEPVis_SWIG_Python.SoCollectAction_getClassTypeId
SoCollectAction_addMethod = HEPVis_SWIG_Python.SoCollectAction_addMethod
SoCollectAction_enableElement = HEPVis_SWIG_Python.SoCollectAction_enableElement
SoCollectAction_initClass = HEPVis_SWIG_Python.SoCollectAction_initClass

class SoCounterAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCounterAction_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCounterAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoCounterAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoCounterAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCounterAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCounterAction
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoCounterAction_initClass)
    NODE = HEPVis_SWIG_Python.SoCounterAction_NODE
    TYPE = HEPVis_SWIG_Python.SoCounterAction_TYPE
    NAME = HEPVis_SWIG_Python.SoCounterAction_NAME
    def setLookFor(*args): return HEPVis_SWIG_Python.SoCounterAction_setLookFor(*args)
    def setType(*args): return HEPVis_SWIG_Python.SoCounterAction_setType(*args)
    def setName(*args): return HEPVis_SWIG_Python.SoCounterAction_setName(*args)
    def getCount(*args): return HEPVis_SWIG_Python.SoCounterAction_getCount(*args)
SoCounterAction_swigregister = HEPVis_SWIG_Python.SoCounterAction_swigregister
SoCounterAction_swigregister(SoCounterAction)
SoCounterAction_getClassTypeId = HEPVis_SWIG_Python.SoCounterAction_getClassTypeId
SoCounterAction_addMethod = HEPVis_SWIG_Python.SoCounterAction_addMethod
SoCounterAction_enableElement = HEPVis_SWIG_Python.SoCounterAction_enableElement
SoCounterAction_initClass = HEPVis_SWIG_Python.SoCounterAction_initClass

class SoAlternateRepAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return HEPVis_SWIG_Python.SoAlternateRepAction_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_enableElement)
    DEFAULT = HEPVis_SWIG_Python.SoAlternateRepAction_DEFAULT
    VRML = HEPVis_SWIG_Python.SoAlternateRepAction_VRML
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoAlternateRepAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAlternateRepAction
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_initClass)
    def setGenerate(*args): return HEPVis_SWIG_Python.SoAlternateRepAction_setGenerate(*args)
    def getGenerate(*args): return HEPVis_SWIG_Python.SoAlternateRepAction_getGenerate(*args)
    def setForWhat(*args): return HEPVis_SWIG_Python.SoAlternateRepAction_setForWhat(*args)
    def getForWhat(*args): return HEPVis_SWIG_Python.SoAlternateRepAction_getForWhat(*args)
SoAlternateRepAction_swigregister = HEPVis_SWIG_Python.SoAlternateRepAction_swigregister
SoAlternateRepAction_swigregister(SoAlternateRepAction)
SoAlternateRepAction_getClassTypeId = HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId
SoAlternateRepAction_addMethod = HEPVis_SWIG_Python.SoAlternateRepAction_addMethod
SoAlternateRepAction_enableElement = HEPVis_SWIG_Python.SoAlternateRepAction_enableElement
SoAlternateRepAction_initClass = HEPVis_SWIG_Python.SoAlternateRepAction_initClass

class HEPVis_SoIntersectingPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    path = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_path_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_path_set)
    SEGMENT = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_SEGMENT
    LINE_SEGMENT = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_LINE_SEGMENT
    TRIANGLE = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_TRIANGLE
    type = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_type_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_type_set)
    vertex = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_vertex_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_vertex_set)
    xf_vertex = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_xf_vertex_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_xf_vertex_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoIntersectingPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HEPVis_SoIntersectingPrimitive
    __del__ = lambda self : None;
HEPVis_SoIntersectingPrimitive_swigregister = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_swigregister
HEPVis_SoIntersectingPrimitive_swigregister(HEPVis_SoIntersectingPrimitive)

class HEPVis_SoIntersectionDetectionAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getTypeId(*args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement)
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoIntersectionDetectionAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HEPVis_SoIntersectionDetectionAction
    __del__ = lambda self : None;
    NEXT_PRIMITIVE = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_NEXT_PRIMITIVE
    NEXT_SHAPE = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_NEXT_SHAPE
    ABORT = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_ABORT
    def setIntersectionDetectionEpsilon(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionDetectionEpsilon(*args)
    def getIntersectionDetectionEpsilon(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionDetectionEpsilon(*args)
    setIntersectionEpsilon = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon)
    getIntersectionEpsilon = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon)
    def setTypeEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setTypeEnabled(*args)
    def isTypeEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isTypeEnabled(*args)
    def setManipsEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setManipsEnabled(*args)
    def isManipsEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isManipsEnabled(*args)
    def setDraggersEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setDraggersEnabled(*args)
    def isDraggersEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isDraggersEnabled(*args)
    def setShapeInternalsEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setShapeInternalsEnabled(*args)
    def isShapeInternalsEnabled(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isShapeInternalsEnabled(*args)
    def addVisitationCallback(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addVisitationCallback(*args)
    def removeVisitationCallback(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_removeVisitationCallback(*args)
    def apply(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_apply(*args)
    def setFilterCallback(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setFilterCallback(*args)
    def addIntersectionCallback(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addIntersectionCallback(*args)
    def removeIntersectionCallback(*args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_removeIntersectionCallback(*args)
HEPVis_SoIntersectionDetectionAction_swigregister = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_swigregister
HEPVis_SoIntersectionDetectionAction_swigregister(HEPVis_SoIntersectionDetectionAction)
HEPVis_SoIntersectionDetectionAction_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId
HEPVis_SoIntersectionDetectionAction_addMethod = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod
HEPVis_SoIntersectionDetectionAction_enableElement = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement
HEPVis_SoIntersectionDetectionAction_initClass = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass
HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon
HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon

class SoSFPolyhedron(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSFPolyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSFPolyhedron
    __del__ = lambda self : None;
    createInstance = staticmethod(HEPVis_SWIG_Python.SoSFPolyhedron_createInstance)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSFPolyhedron_getTypeId(*args)
    def copyFrom(*args): return HEPVis_SWIG_Python.SoSFPolyhedron_copyFrom(*args)
    def isSame(*args): return HEPVis_SWIG_Python.SoSFPolyhedron_isSame(*args)
    def getValue(*args): return HEPVis_SWIG_Python.SoSFPolyhedron_getValue(*args)
    def setValue(*args): return HEPVis_SWIG_Python.SoSFPolyhedron_setValue(*args)
    def __eq__(*args): return HEPVis_SWIG_Python.SoSFPolyhedron___eq__(*args)
    def __ne__(*args): return HEPVis_SWIG_Python.SoSFPolyhedron___ne__(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSFPolyhedron_initClass)
SoSFPolyhedron_swigregister = HEPVis_SWIG_Python.SoSFPolyhedron_swigregister
SoSFPolyhedron_swigregister(SoSFPolyhedron)
SoSFPolyhedron_createInstance = HEPVis_SWIG_Python.SoSFPolyhedron_createInstance
SoSFPolyhedron_getClassTypeId = HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId
SoSFPolyhedron_initClass = HEPVis_SWIG_Python.SoSFPolyhedron_initClass

class SoPolyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPolyhedron_getTypeId(*args)
    solid = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_solid_get, HEPVis_SWIG_Python.SoPolyhedron_solid_set)
    reducedWireFrame = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_reducedWireFrame_get, HEPVis_SWIG_Python.SoPolyhedron_reducedWireFrame_set)
    projection = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_projection_get, HEPVis_SWIG_Python.SoPolyhedron_projection_set)
    polyhedron = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_polyhedron_get, HEPVis_SWIG_Python.SoPolyhedron_polyhedron_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_alternateRep_get, HEPVis_SWIG_Python.SoPolyhedron_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPolyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPolyhedron_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPolyhedron_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPolyhedron_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolyhedron
    __del__ = lambda self : None;
SoPolyhedron_swigregister = HEPVis_SWIG_Python.SoPolyhedron_swigregister
SoPolyhedron_swigregister(SoPolyhedron)
SoPolyhedron_getClassTypeId = HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId
SoPolyhedron_initClass = HEPVis_SWIG_Python.SoPolyhedron_initClass

class SoTubs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTubs_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTubs_getTypeId(*args)
    pRMin = _swig_property(HEPVis_SWIG_Python.SoTubs_pRMin_get, HEPVis_SWIG_Python.SoTubs_pRMin_set)
    pRMax = _swig_property(HEPVis_SWIG_Python.SoTubs_pRMax_get, HEPVis_SWIG_Python.SoTubs_pRMax_set)
    pDz = _swig_property(HEPVis_SWIG_Python.SoTubs_pDz_get, HEPVis_SWIG_Python.SoTubs_pDz_set)
    pSPhi = _swig_property(HEPVis_SWIG_Python.SoTubs_pSPhi_get, HEPVis_SWIG_Python.SoTubs_pSPhi_set)
    pDPhi = _swig_property(HEPVis_SWIG_Python.SoTubs_pDPhi_get, HEPVis_SWIG_Python.SoTubs_pDPhi_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTubs_alternateRep_get, HEPVis_SWIG_Python.SoTubs_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTubs(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoTubs_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTubs_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTubs_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTubs
    __del__ = lambda self : None;
SoTubs_swigregister = HEPVis_SWIG_Python.SoTubs_swigregister
SoTubs_swigregister(SoTubs)
SoTubs_getClassTypeId = HEPVis_SWIG_Python.SoTubs_getClassTypeId
SoTubs_initClass = HEPVis_SWIG_Python.SoTubs_initClass

class SoBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoBox_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoBox_getTypeId(*args)
    fDx = _swig_property(HEPVis_SWIG_Python.SoBox_fDx_get, HEPVis_SWIG_Python.SoBox_fDx_set)
    fDy = _swig_property(HEPVis_SWIG_Python.SoBox_fDy_get, HEPVis_SWIG_Python.SoBox_fDy_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoBox_fDz_get, HEPVis_SWIG_Python.SoBox_fDz_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoBox_alternateRep_get, HEPVis_SWIG_Python.SoBox_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoBox(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoBox_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoBox_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoBox_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoBox
    __del__ = lambda self : None;
SoBox_swigregister = HEPVis_SWIG_Python.SoBox_swigregister
SoBox_swigregister(SoBox)
SoBox_getClassTypeId = HEPVis_SWIG_Python.SoBox_getClassTypeId
SoBox_initClass = HEPVis_SWIG_Python.SoBox_initClass

class SoTrd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTrd_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTrd_getTypeId(*args)
    fDx1 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDx1_get, HEPVis_SWIG_Python.SoTrd_fDx1_set)
    fDx2 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDx2_get, HEPVis_SWIG_Python.SoTrd_fDx2_set)
    fDy1 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDy1_get, HEPVis_SWIG_Python.SoTrd_fDy1_set)
    fDy2 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDy2_get, HEPVis_SWIG_Python.SoTrd_fDy2_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoTrd_fDz_get, HEPVis_SWIG_Python.SoTrd_fDz_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTrd_alternateRep_get, HEPVis_SWIG_Python.SoTrd_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTrd(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoTrd_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTrd_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTrd_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTrd
    __del__ = lambda self : None;
SoTrd_swigregister = HEPVis_SWIG_Python.SoTrd_swigregister
SoTrd_swigregister(SoTrd)
SoTrd_getClassTypeId = HEPVis_SWIG_Python.SoTrd_getClassTypeId
SoTrd_initClass = HEPVis_SWIG_Python.SoTrd_initClass

class SoCons(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCons_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCons_getTypeId(*args)
    fRmin1 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmin1_get, HEPVis_SWIG_Python.SoCons_fRmin1_set)
    fRmin2 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmin2_get, HEPVis_SWIG_Python.SoCons_fRmin2_set)
    fRmax1 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmax1_get, HEPVis_SWIG_Python.SoCons_fRmax1_set)
    fRmax2 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmax2_get, HEPVis_SWIG_Python.SoCons_fRmax2_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoCons_fDz_get, HEPVis_SWIG_Python.SoCons_fDz_set)
    fSPhi = _swig_property(HEPVis_SWIG_Python.SoCons_fSPhi_get, HEPVis_SWIG_Python.SoCons_fSPhi_set)
    fDPhi = _swig_property(HEPVis_SWIG_Python.SoCons_fDPhi_get, HEPVis_SWIG_Python.SoCons_fDPhi_set)
    smoothDraw = _swig_property(HEPVis_SWIG_Python.SoCons_smoothDraw_get, HEPVis_SWIG_Python.SoCons_smoothDraw_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoCons_alternateRep_get, HEPVis_SWIG_Python.SoCons_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCons(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCons_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoCons_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoCons_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCons
    __del__ = lambda self : None;
SoCons_swigregister = HEPVis_SWIG_Python.SoCons_swigregister
SoCons_swigregister(SoCons)
SoCons_getClassTypeId = HEPVis_SWIG_Python.SoCons_getClassTypeId
SoCons_initClass = HEPVis_SWIG_Python.SoCons_initClass

class SoTrap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTrap_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTrap_getTypeId(*args)
    pDz = _swig_property(HEPVis_SWIG_Python.SoTrap_pDz_get, HEPVis_SWIG_Python.SoTrap_pDz_set)
    pTheta = _swig_property(HEPVis_SWIG_Python.SoTrap_pTheta_get, HEPVis_SWIG_Python.SoTrap_pTheta_set)
    pPhi = _swig_property(HEPVis_SWIG_Python.SoTrap_pPhi_get, HEPVis_SWIG_Python.SoTrap_pPhi_set)
    pDy1 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDy1_get, HEPVis_SWIG_Python.SoTrap_pDy1_set)
    pDx1 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx1_get, HEPVis_SWIG_Python.SoTrap_pDx1_set)
    pDx2 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx2_get, HEPVis_SWIG_Python.SoTrap_pDx2_set)
    pDy2 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDy2_get, HEPVis_SWIG_Python.SoTrap_pDy2_set)
    pDx3 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx3_get, HEPVis_SWIG_Python.SoTrap_pDx3_set)
    pDx4 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx4_get, HEPVis_SWIG_Python.SoTrap_pDx4_set)
    pAlp1 = _swig_property(HEPVis_SWIG_Python.SoTrap_pAlp1_get, HEPVis_SWIG_Python.SoTrap_pAlp1_set)
    pAlp2 = _swig_property(HEPVis_SWIG_Python.SoTrap_pAlp2_get, HEPVis_SWIG_Python.SoTrap_pAlp2_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTrap_alternateRep_get, HEPVis_SWIG_Python.SoTrap_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTrap(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoTrap_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTrap_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTrap_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTrap
    __del__ = lambda self : None;
SoTrap_swigregister = HEPVis_SWIG_Python.SoTrap_swigregister
SoTrap_swigregister(SoTrap)
SoTrap_getClassTypeId = HEPVis_SWIG_Python.SoTrap_getClassTypeId
SoTrap_initClass = HEPVis_SWIG_Python.SoTrap_initClass

class SoArrow(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoArrow_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoArrow_getTypeId(*args)
    tip = _swig_property(HEPVis_SWIG_Python.SoArrow_tip_get, HEPVis_SWIG_Python.SoArrow_tip_set)
    tail = _swig_property(HEPVis_SWIG_Python.SoArrow_tail_get, HEPVis_SWIG_Python.SoArrow_tail_set)
    size = _swig_property(HEPVis_SWIG_Python.SoArrow_size_get, HEPVis_SWIG_Python.SoArrow_size_set)
    conicalShaft = _swig_property(HEPVis_SWIG_Python.SoArrow_conicalShaft_get, HEPVis_SWIG_Python.SoArrow_conicalShaft_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoArrow_alternateRep_get, HEPVis_SWIG_Python.SoArrow_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoArrow(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoArrow_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoArrow_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoArrow_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoArrow
    __del__ = lambda self : None;
SoArrow_swigregister = HEPVis_SWIG_Python.SoArrow_swigregister
SoArrow_swigregister(SoArrow)
SoArrow_getClassTypeId = HEPVis_SWIG_Python.SoArrow_getClassTypeId
SoArrow_initClass = HEPVis_SWIG_Python.SoArrow_initClass

class SoEllipsoid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoEllipsoid_getTypeId(*args)
    eigenvalues = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_eigenvalues_get, HEPVis_SWIG_Python.SoEllipsoid_eigenvalues_set)
    rotation = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_rotation_get, HEPVis_SWIG_Python.SoEllipsoid_rotation_set)
    center = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_center_get, HEPVis_SWIG_Python.SoEllipsoid_center_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_alternateRep_get, HEPVis_SWIG_Python.SoEllipsoid_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoEllipsoid_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoEllipsoid_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoEllipsoid_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipsoid
    __del__ = lambda self : None;
SoEllipsoid_swigregister = HEPVis_SWIG_Python.SoEllipsoid_swigregister
SoEllipsoid_swigregister(SoEllipsoid)
SoEllipsoid_getClassTypeId = HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId
SoEllipsoid_initClass = HEPVis_SWIG_Python.SoEllipsoid_initClass

class SoEllipsoidSegment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoEllipsoidSegment_getTypeId(*args)
    ax = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_ax_get, HEPVis_SWIG_Python.SoEllipsoidSegment_ax_set)
    by = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_by_get, HEPVis_SWIG_Python.SoEllipsoidSegment_by_set)
    cz = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_cz_get, HEPVis_SWIG_Python.SoEllipsoidSegment_cz_set)
    fSPhi = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fSPhi_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fSPhi_set)
    fDPhi = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fDPhi_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fDPhi_set)
    fSTheta = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fSTheta_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fSTheta_set)
    fDTheta = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fDTheta_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fDTheta_set)
    nSides = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_nSides_get, HEPVis_SWIG_Python.SoEllipsoidSegment_nSides_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_alternateRep_get, HEPVis_SWIG_Python.SoEllipsoidSegment_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoEllipsoidSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoEllipsoidSegment_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoEllipsoidSegment_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoEllipsoidSegment_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipsoidSegment
    __del__ = lambda self : None;
SoEllipsoidSegment_swigregister = HEPVis_SWIG_Python.SoEllipsoidSegment_swigregister
SoEllipsoidSegment_swigregister(SoEllipsoidSegment)
SoEllipsoidSegment_getClassTypeId = HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId
SoEllipsoidSegment_initClass = HEPVis_SWIG_Python.SoEllipsoidSegment_initClass

class SoEllipticalPrism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoEllipticalPrism_getTypeId(*args)
    eigenvalues = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_eigenvalues_get, HEPVis_SWIG_Python.SoEllipticalPrism_eigenvalues_set)
    extent = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_extent_get, HEPVis_SWIG_Python.SoEllipticalPrism_extent_set)
    rotation = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_rotation_get, HEPVis_SWIG_Python.SoEllipticalPrism_rotation_set)
    center = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_center_get, HEPVis_SWIG_Python.SoEllipticalPrism_center_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_alternateRep_get, HEPVis_SWIG_Python.SoEllipticalPrism_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoEllipticalPrism(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoEllipticalPrism_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoEllipticalPrism_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoEllipticalPrism_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipticalPrism
    __del__ = lambda self : None;
SoEllipticalPrism_swigregister = HEPVis_SWIG_Python.SoEllipticalPrism_swigregister
SoEllipticalPrism_swigregister(SoEllipticalPrism)
SoEllipticalPrism_getClassTypeId = HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId
SoEllipticalPrism_initClass = HEPVis_SWIG_Python.SoEllipticalPrism_initClass

SO_TORUS_U_DIM = HEPVis_SWIG_Python.SO_TORUS_U_DIM
SO_TORUS_V_DIM = HEPVis_SWIG_Python.SO_TORUS_V_DIM
SO_TORUS_U_ORDER = HEPVis_SWIG_Python.SO_TORUS_U_ORDER
SO_TORUS_V_ORDER = HEPVis_SWIG_Python.SO_TORUS_V_ORDER
class SoTorus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTorus_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTorus_getTypeId(*args)
    rMinor = _swig_property(HEPVis_SWIG_Python.SoTorus_rMinor_get, HEPVis_SWIG_Python.SoTorus_rMinor_set)
    rMajor = _swig_property(HEPVis_SWIG_Python.SoTorus_rMajor_get, HEPVis_SWIG_Python.SoTorus_rMajor_set)
    center = _swig_property(HEPVis_SWIG_Python.SoTorus_center_get, HEPVis_SWIG_Python.SoTorus_center_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTorus_alternateRep_get, HEPVis_SWIG_Python.SoTorus_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTorus(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoTorus_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoTorus_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTorus_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTorus
    __del__ = lambda self : None;
SoTorus_swigregister = HEPVis_SWIG_Python.SoTorus_swigregister
SoTorus_swigregister(SoTorus)
SoTorus_getClassTypeId = HEPVis_SWIG_Python.SoTorus_getClassTypeId
SoTorus_initClass = HEPVis_SWIG_Python.SoTorus_initClass

class SoPcon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPcon_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPcon_getTypeId(*args)
    vtxPts = _swig_property(HEPVis_SWIG_Python.SoPcon_vtxPts_get, HEPVis_SWIG_Python.SoPcon_vtxPts_set)
    center = _swig_property(HEPVis_SWIG_Python.SoPcon_center_get, HEPVis_SWIG_Python.SoPcon_center_set)
    startAngle = _swig_property(HEPVis_SWIG_Python.SoPcon_startAngle_get, HEPVis_SWIG_Python.SoPcon_startAngle_set)
    deltaAngle = _swig_property(HEPVis_SWIG_Python.SoPcon_deltaAngle_get, HEPVis_SWIG_Python.SoPcon_deltaAngle_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPcon_alternateRep_get, HEPVis_SWIG_Python.SoPcon_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPcon(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPconPts(*args): return HEPVis_SWIG_Python.SoPcon_setPconPts(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPcon_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPcon_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPcon_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPcon
    __del__ = lambda self : None;
SoPcon_swigregister = HEPVis_SWIG_Python.SoPcon_swigregister
SoPcon_swigregister(SoPcon)
SoPcon_getClassTypeId = HEPVis_SWIG_Python.SoPcon_getClassTypeId
SoPcon_initClass = HEPVis_SWIG_Python.SoPcon_initClass

class SoPcons(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPcons_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPcons_getTypeId(*args)
    fRmin = _swig_property(HEPVis_SWIG_Python.SoPcons_fRmin_get, HEPVis_SWIG_Python.SoPcons_fRmin_set)
    fRmax = _swig_property(HEPVis_SWIG_Python.SoPcons_fRmax_get, HEPVis_SWIG_Python.SoPcons_fRmax_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoPcons_fDz_get, HEPVis_SWIG_Python.SoPcons_fDz_set)
    fSPhi = _swig_property(HEPVis_SWIG_Python.SoPcons_fSPhi_get, HEPVis_SWIG_Python.SoPcons_fSPhi_set)
    fDPhi = _swig_property(HEPVis_SWIG_Python.SoPcons_fDPhi_get, HEPVis_SWIG_Python.SoPcons_fDPhi_set)
    smoothDraw = _swig_property(HEPVis_SWIG_Python.SoPcons_smoothDraw_get, HEPVis_SWIG_Python.SoPcons_smoothDraw_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPcons_alternateRep_get, HEPVis_SWIG_Python.SoPcons_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPcons(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoPcons_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPcons_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPcons_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPcons
    __del__ = lambda self : None;
SoPcons_swigregister = HEPVis_SWIG_Python.SoPcons_swigregister
SoPcons_swigregister(SoPcons)
SoPcons_getClassTypeId = HEPVis_SWIG_Python.SoPcons_getClassTypeId
SoPcons_initClass = HEPVis_SWIG_Python.SoPcons_initClass

class SoPolyVol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPolyVol_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPolyVol_getTypeId(*args)
    vtxPts = _swig_property(HEPVis_SWIG_Python.SoPolyVol_vtxPts_get, HEPVis_SWIG_Python.SoPolyVol_vtxPts_set)
    center = _swig_property(HEPVis_SWIG_Python.SoPolyVol_center_get, HEPVis_SWIG_Python.SoPolyVol_center_set)
    dZ = _swig_property(HEPVis_SWIG_Python.SoPolyVol_dZ_get, HEPVis_SWIG_Python.SoPolyVol_dZ_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPolyVol_alternateRep_get, HEPVis_SWIG_Python.SoPolyVol_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPolyVol(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPolyVolPts(*args): return HEPVis_SWIG_Python.SoPolyVol_setPolyVolPts(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPolyVol_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPolyVol_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPolyVol_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolyVol
    __del__ = lambda self : None;
SoPolyVol_swigregister = HEPVis_SWIG_Python.SoPolyVol_swigregister
SoPolyVol_swigregister(SoPolyVol)
SoPolyVol_getClassTypeId = HEPVis_SWIG_Python.SoPolyVol_getClassTypeId
SoPolyVol_initClass = HEPVis_SWIG_Python.SoPolyVol_initClass

class So3DErrorBar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.So3DErrorBar_getTypeId(*args)
    lineWidth = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_lineWidth_get, HEPVis_SWIG_Python.So3DErrorBar_lineWidth_set)
    u1 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_u1_get, HEPVis_SWIG_Python.So3DErrorBar_u1_set)
    u2 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_u2_get, HEPVis_SWIG_Python.So3DErrorBar_u2_set)
    v1 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_v1_get, HEPVis_SWIG_Python.So3DErrorBar_v1_set)
    v2 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_v2_get, HEPVis_SWIG_Python.So3DErrorBar_v2_set)
    w1 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_w1_get, HEPVis_SWIG_Python.So3DErrorBar_w1_set)
    w2 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_w2_get, HEPVis_SWIG_Python.So3DErrorBar_w2_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_alternateRep_get, HEPVis_SWIG_Python.So3DErrorBar_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_So3DErrorBar(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.So3DErrorBar_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.So3DErrorBar_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.So3DErrorBar_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_So3DErrorBar
    __del__ = lambda self : None;
So3DErrorBar_swigregister = HEPVis_SWIG_Python.So3DErrorBar_swigregister
So3DErrorBar_swigregister(So3DErrorBar)
So3DErrorBar_getClassTypeId = HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId
So3DErrorBar_initClass = HEPVis_SWIG_Python.So3DErrorBar_initClass

class SoCoordinateAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCoordinateAxis_getTypeId(*args)
    fNDivision = _swig_property(HEPVis_SWIG_Python.SoCoordinateAxis_fNDivision_get, HEPVis_SWIG_Python.SoCoordinateAxis_fNDivision_set)
    fDivisionLength = _swig_property(HEPVis_SWIG_Python.SoCoordinateAxis_fDivisionLength_get, HEPVis_SWIG_Python.SoCoordinateAxis_fDivisionLength_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoCoordinateAxis_alternateRep_get, HEPVis_SWIG_Python.SoCoordinateAxis_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCoordinateAxis(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCoordinateAxis_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoCoordinateAxis_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoCoordinateAxis_clearAlternateRep(*args)
    def getInfo(*args): return HEPVis_SWIG_Python.SoCoordinateAxis_getInfo(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCoordinateAxis
    __del__ = lambda self : None;
SoCoordinateAxis_swigregister = HEPVis_SWIG_Python.SoCoordinateAxis_swigregister
SoCoordinateAxis_swigregister(SoCoordinateAxis)
SoCoordinateAxis_getClassTypeId = HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId
SoCoordinateAxis_initClass = HEPVis_SWIG_Python.SoCoordinateAxis_initClass

class SoWedge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoWedge_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoWedge_getTypeId(*args)
    halfWidth1 = _swig_property(HEPVis_SWIG_Python.SoWedge_halfWidth1_get, HEPVis_SWIG_Python.SoWedge_halfWidth1_set)
    halfWidth2 = _swig_property(HEPVis_SWIG_Python.SoWedge_halfWidth2_get, HEPVis_SWIG_Python.SoWedge_halfWidth2_set)
    halfHeight = _swig_property(HEPVis_SWIG_Python.SoWedge_halfHeight_get, HEPVis_SWIG_Python.SoWedge_halfHeight_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoWedge_thickness_get, HEPVis_SWIG_Python.SoWedge_thickness_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoWedge_alternateRep_get, HEPVis_SWIG_Python.SoWedge_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoWedge(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoWedge_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoWedge_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoWedge_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoWedge
    __del__ = lambda self : None;
SoWedge_swigregister = HEPVis_SWIG_Python.SoWedge_swigregister
SoWedge_swigregister(SoWedge)
SoWedge_getClassTypeId = HEPVis_SWIG_Python.SoWedge_getClassTypeId
SoWedge_initClass = HEPVis_SWIG_Python.SoWedge_initClass

class So2DArrow(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.So2DArrow_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.So2DArrow_getTypeId(*args)
    length = _swig_property(HEPVis_SWIG_Python.So2DArrow_length_get, HEPVis_SWIG_Python.So2DArrow_length_set)
    lengthRatio = _swig_property(HEPVis_SWIG_Python.So2DArrow_lengthRatio_get, HEPVis_SWIG_Python.So2DArrow_lengthRatio_set)
    headHeight = _swig_property(HEPVis_SWIG_Python.So2DArrow_headHeight_get, HEPVis_SWIG_Python.So2DArrow_headHeight_set)
    initClass = staticmethod(HEPVis_SWIG_Python.So2DArrow_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_So2DArrow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_So2DArrow
    __del__ = lambda self : None;
So2DArrow_swigregister = HEPVis_SWIG_Python.So2DArrow_swigregister
So2DArrow_swigregister(So2DArrow)
So2DArrow_getClassTypeId = HEPVis_SWIG_Python.So2DArrow_getClassTypeId
So2DArrow_initClass = HEPVis_SWIG_Python.So2DArrow_initClass

class SoCircleArc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCircleArc_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCircleArc_getTypeId(*args)
    center = _swig_property(HEPVis_SWIG_Python.SoCircleArc_center_get, HEPVis_SWIG_Python.SoCircleArc_center_set)
    radius = _swig_property(HEPVis_SWIG_Python.SoCircleArc_radius_get, HEPVis_SWIG_Python.SoCircleArc_radius_set)
    sweepAngle = _swig_property(HEPVis_SWIG_Python.SoCircleArc_sweepAngle_get, HEPVis_SWIG_Python.SoCircleArc_sweepAngle_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoCircleArc_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCircleArc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCircleArc
    __del__ = lambda self : None;
SoCircleArc_swigregister = HEPVis_SWIG_Python.SoCircleArc_swigregister
SoCircleArc_swigregister(SoCircleArc)
SoCircleArc_getClassTypeId = HEPVis_SWIG_Python.SoCircleArc_getClassTypeId
SoCircleArc_initClass = HEPVis_SWIG_Python.SoCircleArc_initClass

class SoDisk(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDisk_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoDisk_getTypeId(*args)
    center = _swig_property(HEPVis_SWIG_Python.SoDisk_center_get, HEPVis_SWIG_Python.SoDisk_center_set)
    radius = _swig_property(HEPVis_SWIG_Python.SoDisk_radius_get, HEPVis_SWIG_Python.SoDisk_radius_set)
    sweepAngle = _swig_property(HEPVis_SWIG_Python.SoDisk_sweepAngle_get, HEPVis_SWIG_Python.SoDisk_sweepAngle_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDisk_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoDisk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDisk
    __del__ = lambda self : None;
SoDisk_swigregister = HEPVis_SWIG_Python.SoDisk_swigregister
SoDisk_swigregister(SoDisk)
SoDisk_getClassTypeId = HEPVis_SWIG_Python.SoDisk_getClassTypeId
SoDisk_initClass = HEPVis_SWIG_Python.SoDisk_initClass

class SoPolygon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPolygon_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPolygon_getTypeId(*args)
    corners = _swig_property(HEPVis_SWIG_Python.SoPolygon_corners_get, HEPVis_SWIG_Python.SoPolygon_corners_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPolygon_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPolygon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolygon
    __del__ = lambda self : None;
SoPolygon_swigregister = HEPVis_SWIG_Python.SoPolygon_swigregister
SoPolygon_swigregister(SoPolygon)
SoPolygon_getClassTypeId = HEPVis_SWIG_Python.SoPolygon_getClassTypeId
SoPolygon_initClass = HEPVis_SWIG_Python.SoPolygon_initClass

class SoQuad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoQuad_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoQuad_getTypeId(*args)
    LLCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_LLCornerOffset_get, HEPVis_SWIG_Python.SoQuad_LLCornerOffset_set)
    LRCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_LRCornerOffset_get, HEPVis_SWIG_Python.SoQuad_LRCornerOffset_set)
    URCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_URCornerOffset_get, HEPVis_SWIG_Python.SoQuad_URCornerOffset_set)
    ULCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_ULCornerOffset_get, HEPVis_SWIG_Python.SoQuad_ULCornerOffset_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoQuad_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoQuad(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoQuad
    __del__ = lambda self : None;
SoQuad_swigregister = HEPVis_SWIG_Python.SoQuad_swigregister
SoQuad_swigregister(SoQuad)
SoQuad_getClassTypeId = HEPVis_SWIG_Python.SoQuad_getClassTypeId
SoQuad_initClass = HEPVis_SWIG_Python.SoQuad_initClass

class SoRing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRing_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoRing_getTypeId(*args)
    center = _swig_property(HEPVis_SWIG_Python.SoRing_center_get, HEPVis_SWIG_Python.SoRing_center_set)
    innerRadius = _swig_property(HEPVis_SWIG_Python.SoRing_innerRadius_get, HEPVis_SWIG_Python.SoRing_innerRadius_set)
    outerRadius = _swig_property(HEPVis_SWIG_Python.SoRing_outerRadius_get, HEPVis_SWIG_Python.SoRing_outerRadius_set)
    sweepAngle = _swig_property(HEPVis_SWIG_Python.SoRing_sweepAngle_get, HEPVis_SWIG_Python.SoRing_sweepAngle_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoRing_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoRing(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRing
    __del__ = lambda self : None;
SoRing_swigregister = HEPVis_SWIG_Python.SoRing_swigregister
SoRing_swigregister(SoRing)
SoRing_getClassTypeId = HEPVis_SWIG_Python.SoRing_getClassTypeId
SoRing_initClass = HEPVis_SWIG_Python.SoRing_initClass

class SoTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTriangle_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoTriangle_getTypeId(*args)
    Corner1Offset = _swig_property(HEPVis_SWIG_Python.SoTriangle_Corner1Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner1Offset_set)
    Corner2Offset = _swig_property(HEPVis_SWIG_Python.SoTriangle_Corner2Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner2Offset_set)
    Corner3Offset = _swig_property(HEPVis_SWIG_Python.SoTriangle_Corner3Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner3Offset_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTriangle_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTriangle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTriangle
    __del__ = lambda self : None;
SoTriangle_swigregister = HEPVis_SWIG_Python.SoTriangle_swigregister
SoTriangle_swigregister(SoTriangle)
SoTriangle_getClassTypeId = HEPVis_SWIG_Python.SoTriangle_getClassTypeId
SoTriangle_initClass = HEPVis_SWIG_Python.SoTriangle_initClass

class SoHelicalTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoHelicalTrack_getTypeId(*args)
    inverseRadius = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_inverseRadius_get, HEPVis_SWIG_Python.SoHelicalTrack_inverseRadius_set)
    cotTheta = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_cotTheta_get, HEPVis_SWIG_Python.SoHelicalTrack_cotTheta_set)
    phi0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_phi0_get, HEPVis_SWIG_Python.SoHelicalTrack_phi0_set)
    d0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_d0_get, HEPVis_SWIG_Python.SoHelicalTrack_d0_set)
    z0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_z0_get, HEPVis_SWIG_Python.SoHelicalTrack_z0_set)
    s0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_s0_get, HEPVis_SWIG_Python.SoHelicalTrack_s0_set)
    s1 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_s1_get, HEPVis_SWIG_Python.SoHelicalTrack_s1_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_alternateRep_get, HEPVis_SWIG_Python.SoHelicalTrack_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoHelicalTrack(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoHelicalTrack_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoHelicalTrack_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoHelicalTrack_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHelicalTrack
    __del__ = lambda self : None;
SoHelicalTrack_swigregister = HEPVis_SWIG_Python.SoHelicalTrack_swigregister
SoHelicalTrack_swigregister(SoHelicalTrack)
SoHelicalTrack_getClassTypeId = HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId
SoHelicalTrack_initClass = HEPVis_SWIG_Python.SoHelicalTrack_initClass

class SoCrystalHit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCrystalHit_getTypeId(*args)
    Energy = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Energy_get, HEPVis_SWIG_Python.SoCrystalHit_Energy_set)
    MinimumEnergy = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_MinimumEnergy_get, HEPVis_SWIG_Python.SoCrystalHit_MinimumEnergy_set)
    Scale = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Scale_get, HEPVis_SWIG_Python.SoCrystalHit_Scale_set)
    RelativeWidth = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_RelativeWidth_get, HEPVis_SWIG_Python.SoCrystalHit_RelativeWidth_set)
    DrawCrystal = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_DrawCrystal_get, HEPVis_SWIG_Python.SoCrystalHit_DrawCrystal_set)
    DrawHit = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_DrawHit_get, HEPVis_SWIG_Python.SoCrystalHit_DrawHit_set)
    Front1 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front1_get, HEPVis_SWIG_Python.SoCrystalHit_Front1_set)
    Front2 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front2_get, HEPVis_SWIG_Python.SoCrystalHit_Front2_set)
    Front3 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front3_get, HEPVis_SWIG_Python.SoCrystalHit_Front3_set)
    Front4 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front4_get, HEPVis_SWIG_Python.SoCrystalHit_Front4_set)
    Back1 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back1_get, HEPVis_SWIG_Python.SoCrystalHit_Back1_set)
    Back2 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back2_get, HEPVis_SWIG_Python.SoCrystalHit_Back2_set)
    Back3 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back3_get, HEPVis_SWIG_Python.SoCrystalHit_Back3_set)
    Back4 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back4_get, HEPVis_SWIG_Python.SoCrystalHit_Back4_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_alternateRep_get, HEPVis_SWIG_Python.SoCrystalHit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCrystalHit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCrystalHit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoCrystalHit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoCrystalHit_clearAlternateRep(*args)
    def getInfo(*args): return HEPVis_SWIG_Python.SoCrystalHit_getInfo(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCrystalHit
    __del__ = lambda self : None;
SoCrystalHit_swigregister = HEPVis_SWIG_Python.SoCrystalHit_swigregister
SoCrystalHit_swigregister(SoCrystalHit)
SoCrystalHit_getClassTypeId = HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId
SoCrystalHit_initClass = HEPVis_SWIG_Python.SoCrystalHit_initClass

class SoJet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoJet_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoJet_getTypeId(*args)
    fEnergy = _swig_property(HEPVis_SWIG_Python.SoJet_fEnergy_get, HEPVis_SWIG_Python.SoJet_fEnergy_set)
    fTheta = _swig_property(HEPVis_SWIG_Python.SoJet_fTheta_get, HEPVis_SWIG_Python.SoJet_fTheta_set)
    fPhi = _swig_property(HEPVis_SWIG_Python.SoJet_fPhi_get, HEPVis_SWIG_Python.SoJet_fPhi_set)
    fThrust = _swig_property(HEPVis_SWIG_Python.SoJet_fThrust_get, HEPVis_SWIG_Python.SoJet_fThrust_set)
    fMaxZ = _swig_property(HEPVis_SWIG_Python.SoJet_fMaxZ_get, HEPVis_SWIG_Python.SoJet_fMaxZ_set)
    fMaxR = _swig_property(HEPVis_SWIG_Python.SoJet_fMaxR_get, HEPVis_SWIG_Python.SoJet_fMaxR_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoJet_alternateRep_get, HEPVis_SWIG_Python.SoJet_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoJet(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoJet_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoJet_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoJet_clearAlternateRep(*args)
    def getInfo(*args): return HEPVis_SWIG_Python.SoJet_getInfo(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoJet
    __del__ = lambda self : None;
SoJet_swigregister = HEPVis_SWIG_Python.SoJet_swigregister
SoJet_swigregister(SoJet)
SoJet_getClassTypeId = HEPVis_SWIG_Python.SoJet_getClassTypeId
SoJet_initClass = HEPVis_SWIG_Python.SoJet_initClass

class SoReconTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoReconTrack_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoReconTrack_getTypeId(*args)
    cotTheta = _swig_property(HEPVis_SWIG_Python.SoReconTrack_cotTheta_get, HEPVis_SWIG_Python.SoReconTrack_cotTheta_set)
    phi0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_phi0_get, HEPVis_SWIG_Python.SoReconTrack_phi0_set)
    d0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_d0_get, HEPVis_SWIG_Python.SoReconTrack_d0_set)
    z0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_z0_get, HEPVis_SWIG_Python.SoReconTrack_z0_set)
    sigD0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_sigD0_get, HEPVis_SWIG_Python.SoReconTrack_sigD0_set)
    sigZ0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_sigZ0_get, HEPVis_SWIG_Python.SoReconTrack_sigZ0_set)
    correlation = _swig_property(HEPVis_SWIG_Python.SoReconTrack_correlation_get, HEPVis_SWIG_Python.SoReconTrack_correlation_set)
    s0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_s0_get, HEPVis_SWIG_Python.SoReconTrack_s0_set)
    s1 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_s1_get, HEPVis_SWIG_Python.SoReconTrack_s1_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoReconTrack_alternateRep_get, HEPVis_SWIG_Python.SoReconTrack_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoReconTrack(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoReconTrack_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoReconTrack_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoReconTrack_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoReconTrack
    __del__ = lambda self : None;
SoReconTrack_swigregister = HEPVis_SWIG_Python.SoReconTrack_swigregister
SoReconTrack_swigregister(SoReconTrack)
SoReconTrack_getClassTypeId = HEPVis_SWIG_Python.SoReconTrack_getClassTypeId
SoReconTrack_initClass = HEPVis_SWIG_Python.SoReconTrack_initClass

class SoSiStrips(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiStrips_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSiStrips_getTypeId(*args)
    length = _swig_property(HEPVis_SWIG_Python.SoSiStrips_length_get, HEPVis_SWIG_Python.SoSiStrips_length_set)
    width = _swig_property(HEPVis_SWIG_Python.SoSiStrips_width_get, HEPVis_SWIG_Python.SoSiStrips_width_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoSiStrips_thickness_get, HEPVis_SWIG_Python.SoSiStrips_thickness_set)
    pitch = _swig_property(HEPVis_SWIG_Python.SoSiStrips_pitch_get, HEPVis_SWIG_Python.SoSiStrips_pitch_set)
    offset = _swig_property(HEPVis_SWIG_Python.SoSiStrips_offset_get, HEPVis_SWIG_Python.SoSiStrips_offset_set)
    strip = _swig_property(HEPVis_SWIG_Python.SoSiStrips_strip_get, HEPVis_SWIG_Python.SoSiStrips_strip_set)
    adc = _swig_property(HEPVis_SWIG_Python.SoSiStrips_adc_get, HEPVis_SWIG_Python.SoSiStrips_adc_set)
    gain = _swig_property(HEPVis_SWIG_Python.SoSiStrips_gain_get, HEPVis_SWIG_Python.SoSiStrips_gain_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiStrips_alternateRep_get, HEPVis_SWIG_Python.SoSiStrips_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSiStrips(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiStrips_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoSiStrips_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoSiStrips_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStrips
    __del__ = lambda self : None;
SoSiStrips_swigregister = HEPVis_SWIG_Python.SoSiStrips_swigregister
SoSiStrips_swigregister(SoSiStrips)
SoSiStrips_getClassTypeId = HEPVis_SWIG_Python.SoSiStrips_getClassTypeId
SoSiStrips_initClass = HEPVis_SWIG_Python.SoSiStrips_initClass

class SoSiWedgeStrips(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSiWedgeStrips_getTypeId(*args)
    length = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_length_get, HEPVis_SWIG_Python.SoSiWedgeStrips_length_set)
    width = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_width_get, HEPVis_SWIG_Python.SoSiWedgeStrips_width_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_thickness_get, HEPVis_SWIG_Python.SoSiWedgeStrips_thickness_set)
    pitch = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_pitch_get, HEPVis_SWIG_Python.SoSiWedgeStrips_pitch_set)
    offset = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_offset_get, HEPVis_SWIG_Python.SoSiWedgeStrips_offset_set)
    strip = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_strip_get, HEPVis_SWIG_Python.SoSiWedgeStrips_strip_set)
    adc = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_adc_get, HEPVis_SWIG_Python.SoSiWedgeStrips_adc_set)
    gain = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_gain_get, HEPVis_SWIG_Python.SoSiWedgeStrips_gain_set)
    cutoff = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_cutoff_get, HEPVis_SWIG_Python.SoSiWedgeStrips_cutoff_set)
    slope = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_slope_get, HEPVis_SWIG_Python.SoSiWedgeStrips_slope_set)
    tilt = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_tilt_get, HEPVis_SWIG_Python.SoSiWedgeStrips_tilt_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_alternateRep_get, HEPVis_SWIG_Python.SoSiWedgeStrips_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSiWedgeStrips(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiWedgeStrips_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoSiWedgeStrips_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoSiWedgeStrips_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiWedgeStrips
    __del__ = lambda self : None;
SoSiWedgeStrips_swigregister = HEPVis_SWIG_Python.SoSiWedgeStrips_swigregister
SoSiWedgeStrips_swigregister(SoSiWedgeStrips)
SoSiWedgeStrips_getClassTypeId = HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId
SoSiWedgeStrips_initClass = HEPVis_SWIG_Python.SoSiWedgeStrips_initClass

class SoVtxReconTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoVtxReconTrack_getTypeId(*args)
    cotTheta = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_cotTheta_get, HEPVis_SWIG_Python.SoVtxReconTrack_cotTheta_set)
    phi0 = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_phi0_get, HEPVis_SWIG_Python.SoVtxReconTrack_phi0_set)
    ellipsoid = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_ellipsoid_get, HEPVis_SWIG_Python.SoVtxReconTrack_ellipsoid_set)
    s0 = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_s0_get, HEPVis_SWIG_Python.SoVtxReconTrack_s0_set)
    s1 = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_s1_get, HEPVis_SWIG_Python.SoVtxReconTrack_s1_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_alternateRep_get, HEPVis_SWIG_Python.SoVtxReconTrack_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoVtxReconTrack(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoVtxReconTrack_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoVtxReconTrack_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoVtxReconTrack_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoVtxReconTrack
    __del__ = lambda self : None;
SoVtxReconTrack_swigregister = HEPVis_SWIG_Python.SoVtxReconTrack_swigregister
SoVtxReconTrack_swigregister(SoVtxReconTrack)
SoVtxReconTrack_getClassTypeId = HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId
SoVtxReconTrack_initClass = HEPVis_SWIG_Python.SoVtxReconTrack_initClass

class SoHadEmCrystalHit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoHadEmCrystalHit_getTypeId(*args)
    EnergyHad = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyHad_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyHad_set)
    EnergyEm = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyEm_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyEm_set)
    MinimumEnergyTot = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_MinimumEnergyTot_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_MinimumEnergyTot_set)
    Scale = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Scale_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Scale_set)
    RelativeWidth = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_RelativeWidth_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_RelativeWidth_set)
    Front1 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front1_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front1_set)
    Front2 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front2_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front2_set)
    Front3 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front3_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front3_set)
    Front4 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front4_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front4_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_alternateRep_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoHadEmCrystalHit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoHadEmCrystalHit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoHadEmCrystalHit_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHadEmCrystalHit
    __del__ = lambda self : None;
SoHadEmCrystalHit_swigregister = HEPVis_SWIG_Python.SoHadEmCrystalHit_swigregister
SoHadEmCrystalHit_swigregister(SoHadEmCrystalHit)
SoHadEmCrystalHit_getClassTypeId = HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId
SoHadEmCrystalHit_initClass = HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass

class SoDetectorTreeKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDetectorTreeKit_alternateRep_get, HEPVis_SWIG_Python.SoDetectorTreeKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoDetectorTreeKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def affectsState(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_affectsState(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDetectorTreeKit_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_callback(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getMatrix(*args)
    def search(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_write(*args)
    def setPreview(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_setPreview(*args)
    def getPreview(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getPreview(*args)
    def setPreviewAndFull(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_setPreviewAndFull(*args)
    def getPreviewSeparator(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getPreviewSeparator(*args)
    def getFullSeparator(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getFullSeparator(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_clearAlternateRep(*args)
    def addPickCallback(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_addPickCallback(*args)
    def removePickCallback(*args): return HEPVis_SWIG_Python.SoDetectorTreeKit_removePickCallback(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDetectorTreeKit
    __del__ = lambda self : None;
SoDetectorTreeKit_swigregister = HEPVis_SWIG_Python.SoDetectorTreeKit_swigregister
SoDetectorTreeKit_swigregister(SoDetectorTreeKit)
SoDetectorTreeKit_getClassTypeId = HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId
SoDetectorTreeKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog
SoDetectorTreeKit_initClass = HEPVis_SWIG_Python.SoDetectorTreeKit_initClass

class SoMeterStickKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoMeterStickKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoMeterStickKit_getNodekitCatalog(*args)
    RULER = HEPVis_SWIG_Python.SoMeterStickKit_RULER
    METER_STICK = HEPVis_SWIG_Python.SoMeterStickKit_METER_STICK
    type = _swig_property(HEPVis_SWIG_Python.SoMeterStickKit_type_get, HEPVis_SWIG_Python.SoMeterStickKit_type_set)
    rotationSnap = _swig_property(HEPVis_SWIG_Python.SoMeterStickKit_rotationSnap_get, HEPVis_SWIG_Python.SoMeterStickKit_rotationSnap_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoMeterStickKit_alternateRep_get, HEPVis_SWIG_Python.SoMeterStickKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoMeterStickKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_initClass)
    def affectsState(*args): return HEPVis_SWIG_Python.SoMeterStickKit_affectsState(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoMeterStickKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoMeterStickKit_clearAlternateRep(*args)
    motionFinished = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_motionFinished)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoMeterStickKit
    __del__ = lambda self : None;
SoMeterStickKit_swigregister = HEPVis_SWIG_Python.SoMeterStickKit_swigregister
SoMeterStickKit_swigregister(SoMeterStickKit)
SoMeterStickKit_getClassTypeId = HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId
SoMeterStickKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog
SoMeterStickKit_initClass = HEPVis_SWIG_Python.SoMeterStickKit_initClass
SoMeterStickKit_motionFinished = HEPVis_SWIG_Python.SoMeterStickKit_motionFinished

class ParticleChar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getGeantCode(*args): return HEPVis_SWIG_Python.ParticleChar_getGeantCode(*args)
    def getMaterial(*args): return HEPVis_SWIG_Python.ParticleChar_getMaterial(*args)
    def getStyle(*args): return HEPVis_SWIG_Python.ParticleChar_getStyle(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_ParticleChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMaterial(*args): return HEPVis_SWIG_Python.ParticleChar_setMaterial(*args)
    def setStyle(*args): return HEPVis_SWIG_Python.ParticleChar_setStyle(*args)
    def getName(*args): return HEPVis_SWIG_Python.ParticleChar_getName(*args)
    def getMass(*args): return HEPVis_SWIG_Python.ParticleChar_getMass(*args)
    def getCharge(*args): return HEPVis_SWIG_Python.ParticleChar_getCharge(*args)
    initParticles = staticmethod(HEPVis_SWIG_Python.ParticleChar_initParticles)
    deleteParticles = staticmethod(HEPVis_SWIG_Python.ParticleChar_deleteParticles)
    getByName = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByName)
    getByGeantID = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByGeantID)
    getByPythiaID = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByPythiaID)
    getByIsajetID = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByIsajetID)
ParticleChar_swigregister = HEPVis_SWIG_Python.ParticleChar_swigregister
ParticleChar_swigregister(ParticleChar)
ParticleChar_initParticles = HEPVis_SWIG_Python.ParticleChar_initParticles
ParticleChar_deleteParticles = HEPVis_SWIG_Python.ParticleChar_deleteParticles
ParticleChar_getByName = HEPVis_SWIG_Python.ParticleChar_getByName
ParticleChar_getByGeantID = HEPVis_SWIG_Python.ParticleChar_getByGeantID
ParticleChar_getByPythiaID = HEPVis_SWIG_Python.ParticleChar_getByPythiaID
ParticleChar_getByIsajetID = HEPVis_SWIG_Python.ParticleChar_getByIsajetID

class SoIdealTrackKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoIdealTrackKit(*args)
        try: self.this.append(this)
        except: self.this = this
    Phi = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Phi_get, HEPVis_SWIG_Python.SoIdealTrackKit_Phi_set)
    Radius = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Radius_get, HEPVis_SWIG_Python.SoIdealTrackKit_Radius_set)
    Zeta = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Zeta_get, HEPVis_SWIG_Python.SoIdealTrackKit_Zeta_set)
    Vertex = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Vertex_get, HEPVis_SWIG_Python.SoIdealTrackKit_Vertex_set)
    T0 = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_T0_get, HEPVis_SWIG_Python.SoIdealTrackKit_T0_set)
    DeltaT = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_DeltaT_get, HEPVis_SWIG_Python.SoIdealTrackKit_DeltaT_set)
    T_0 = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_T_0_get, HEPVis_SWIG_Python.SoIdealTrackKit_T_0_set)
    T_1 = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_T_1_get, HEPVis_SWIG_Python.SoIdealTrackKit_T_1_set)
    ParticleType = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_ParticleType_get, HEPVis_SWIG_Python.SoIdealTrackKit_ParticleType_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_alternateRep_get, HEPVis_SWIG_Python.SoIdealTrackKit_alternateRep_set)
    def updateTrack(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_updateTrack(*args)
    set_bfield = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield)
    set_rExtent = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent)
    set_zExtent = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent)
    def initTrack(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_initTrack(*args)
    def print_me(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_print_me(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoIdealTrackKit_clearAlternateRep(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoIdealTrackKit
    __del__ = lambda self : None;
SoIdealTrackKit_swigregister = HEPVis_SWIG_Python.SoIdealTrackKit_swigregister
SoIdealTrackKit_swigregister(SoIdealTrackKit)
SoIdealTrackKit_getClassTypeId = HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId
SoIdealTrackKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog
SoIdealTrackKit_set_bfield = HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield
SoIdealTrackKit_set_rExtent = HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent
SoIdealTrackKit_set_zExtent = HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent
SoIdealTrackKit_initClass = HEPVis_SWIG_Python.SoIdealTrackKit_initClass

class SoIdealBeamTrackKit(SoIdealTrackKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoIdealBeamTrackKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def initTrack(*args): return HEPVis_SWIG_Python.SoIdealBeamTrackKit_initTrack(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoIdealBeamTrackKit
    __del__ = lambda self : None;
SoIdealBeamTrackKit_swigregister = HEPVis_SWIG_Python.SoIdealBeamTrackKit_swigregister
SoIdealBeamTrackKit_swigregister(SoIdealBeamTrackKit)
SoIdealBeamTrackKit_getClassTypeId = HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId
SoIdealBeamTrackKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog
SoIdealBeamTrackKit_initClass = HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass

class SoDblSiStripDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDblSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoDblSiStripDetKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoDblSiStripDetKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def affectsState(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_affectsState(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_clearAlternateRep(*args)
    def setAlignable(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_setAlignable(*args)
    def getLocalTransform(*args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_getLocalTransform(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDblSiStripDetKit
    __del__ = lambda self : None;
SoDblSiStripDetKit_swigregister = HEPVis_SWIG_Python.SoDblSiStripDetKit_swigregister
SoDblSiStripDetKit_swigregister(SoDblSiStripDetKit)
SoDblSiStripDetKit_getClassTypeId = HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId
SoDblSiStripDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog
SoDblSiStripDetKit_initClass = HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass

class SoSiStripDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoSiStripDetKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSiStripDetKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def affectsState(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_affectsState(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiStripDetKit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_clearAlternateRep(*args)
    def setAlignable(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_setAlignable(*args)
    def getLocalTransform(*args): return HEPVis_SWIG_Python.SoSiStripDetKit_getLocalTransform(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStripDetKit
    __del__ = lambda self : None;
SoSiStripDetKit_swigregister = HEPVis_SWIG_Python.SoSiStripDetKit_swigregister
SoSiStripDetKit_swigregister(SoSiStripDetKit)
SoSiStripDetKit_getClassTypeId = HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId
SoSiStripDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog
SoSiStripDetKit_initClass = HEPVis_SWIG_Python.SoSiStripDetKit_initClass

class SoStereoSiStripDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getNodekitCatalog(*args)
    stereoAngle = _swig_property(HEPVis_SWIG_Python.SoStereoSiStripDetKit_stereoAngle_get, HEPVis_SWIG_Python.SoStereoSiStripDetKit_stereoAngle_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoStereoSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoStereoSiStripDetKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoStereoSiStripDetKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def affectsState(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_affectsState(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_clearAlternateRep(*args)
    def setAlignable(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_setAlignable(*args)
    def getLocalTransform(*args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getLocalTransform(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStereoSiStripDetKit
    __del__ = lambda self : None;
SoStereoSiStripDetKit_swigregister = HEPVis_SWIG_Python.SoStereoSiStripDetKit_swigregister
SoStereoSiStripDetKit_swigregister(SoStereoSiStripDetKit)
SoStereoSiStripDetKit_getClassTypeId = HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId
SoStereoSiStripDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog
SoStereoSiStripDetKit_initClass = HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass

class SoSiStripWedgeDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getNodekitCatalog(*args)
    halfHeight = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfHeight_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfHeight_set)
    halfWidth1 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth1_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth1_set)
    halfWidth2 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth2_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth2_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_thickness_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_thickness_set)
    myHalfHeight = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfHeight_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfHeight_set)
    myHalfWidth1 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth1_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth1_set)
    myHalfWidth2 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth2_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth2_set)
    myThickness = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myThickness_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myThickness_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_alternateRep_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSiStripWedgeDetKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def affectsState(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_affectsState(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_clearAlternateRep(*args)
    def setAlignable(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_setAlignable(*args)
    def getLocalTransform(*args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getLocalTransform(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStripWedgeDetKit
    __del__ = lambda self : None;
SoSiStripWedgeDetKit_swigregister = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_swigregister
SoSiStripWedgeDetKit_swigregister(SoSiStripWedgeDetKit)
SoSiStripWedgeDetKit_getClassTypeId = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId
SoSiStripWedgeDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog
SoSiStripWedgeDetKit_initClass = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass

class SoDblSiStripWedgeDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getNodekitCatalog(*args)
    halfHeight = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfHeight_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfHeight_set)
    halfWidth1 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth1_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth1_set)
    halfWidth2 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth2_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth2_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_thickness_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_thickness_set)
    myHalfHeight = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfHeight_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfHeight_set)
    myHalfWidth1 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth1_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth1_set)
    myHalfWidth2 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth2_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth2_set)
    myThickness = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myThickness_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myThickness_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_alternateRep_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoDblSiStripWedgeDetKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def affectsState(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_affectsState(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_clearAlternateRep(*args)
    def setAlignable(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_setAlignable(*args)
    def getLocalTransform(*args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getLocalTransform(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDblSiStripWedgeDetKit
    __del__ = lambda self : None;
SoDblSiStripWedgeDetKit_swigregister = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_swigregister
SoDblSiStripWedgeDetKit_swigregister(SoDblSiStripWedgeDetKit)
SoDblSiStripWedgeDetKit_getClassTypeId = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId
SoDblSiStripWedgeDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog
SoDblSiStripWedgeDetKit_initClass = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass

class SoDetectorExample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoDetectorExample_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoDetectorExample_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDetectorExample_alternateRep_get, HEPVis_SWIG_Python.SoDetectorExample_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDetectorExample_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoDetectorExample(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoDetectorExample_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoDetectorExample_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDetectorExample
    __del__ = lambda self : None;
SoDetectorExample_swigregister = HEPVis_SWIG_Python.SoDetectorExample_swigregister
SoDetectorExample_swigregister(SoDetectorExample)
SoDetectorExample_getClassTypeId = HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId
SoDetectorExample_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog
SoDetectorExample_initClass = HEPVis_SWIG_Python.SoDetectorExample_initClass

class SbRepBin1D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepBin1D(*args)
        try: self.this.append(this)
        except: self.this = this
    fXmin = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fXmin_get, HEPVis_SWIG_Python.SbRepBin1D_fXmin_set)
    fXmax = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fXmax_get, HEPVis_SWIG_Python.SbRepBin1D_fXmax_set)
    fVmin = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fVmin_get, HEPVis_SWIG_Python.SbRepBin1D_fVmin_set)
    fVal = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fVal_get, HEPVis_SWIG_Python.SbRepBin1D_fVal_set)
    fRatio = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fRatio_get, HEPVis_SWIG_Python.SbRepBin1D_fRatio_set)
    fSeparator = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fSeparator_get, HEPVis_SWIG_Python.SbRepBin1D_fSeparator_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBin1D
    __del__ = lambda self : None;
SbRepBin1D_swigregister = HEPVis_SWIG_Python.SbRepBin1D_swigregister
SbRepBin1D_swigregister(SbRepBin1D)

class SbRepBin2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepBin2D(*args)
        try: self.this.append(this)
        except: self.this = this
    fXmin = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fXmin_get, HEPVis_SWIG_Python.SbRepBin2D_fXmin_set)
    fXmax = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fXmax_get, HEPVis_SWIG_Python.SbRepBin2D_fXmax_set)
    fYmin = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fYmin_get, HEPVis_SWIG_Python.SbRepBin2D_fYmin_set)
    fYmax = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fYmax_get, HEPVis_SWIG_Python.SbRepBin2D_fYmax_set)
    fVal = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fVal_get, HEPVis_SWIG_Python.SbRepBin2D_fVal_set)
    fRatio = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fRatio_get, HEPVis_SWIG_Python.SbRepBin2D_fRatio_set)
    fI = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fI_get, HEPVis_SWIG_Python.SbRepBin2D_fI_set)
    fJ = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fJ_get, HEPVis_SWIG_Python.SbRepBin2D_fJ_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBin2D
    __del__ = lambda self : None;
SbRepBin2D_swigregister = HEPVis_SWIG_Python.SbRepBin2D_swigregister
SbRepBin2D_swigregister(SbRepBin2D)

class SbRepTopFace2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepTopFace2D(*args)
        try: self.this.append(this)
        except: self.this = this
    fXmin = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fXmin_get, HEPVis_SWIG_Python.SbRepTopFace2D_fXmin_set)
    fXmax = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fXmax_get, HEPVis_SWIG_Python.SbRepTopFace2D_fXmax_set)
    fYmin = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fYmin_get, HEPVis_SWIG_Python.SbRepTopFace2D_fYmin_set)
    fYmax = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fYmax_get, HEPVis_SWIG_Python.SbRepTopFace2D_fYmax_set)
    fVal1 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal1_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal1_set)
    fVal2 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal2_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal2_set)
    fVal3 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal3_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal3_set)
    fVal4 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal4_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal4_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepTopFace2D
    __del__ = lambda self : None;
SbRepTopFace2D_swigregister = HEPVis_SWIG_Python.SbRepTopFace2D_swigregister
SbRepTopFace2D_swigregister(SbRepTopFace2D)

class SbRepBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepBox(*args)
        try: self.this.append(this)
        except: self.this = this
    fPos = _swig_property(HEPVis_SWIG_Python.SbRepBox_fPos_get, HEPVis_SWIG_Python.SbRepBox_fPos_set)
    fWidth = _swig_property(HEPVis_SWIG_Python.SbRepBox_fWidth_get, HEPVis_SWIG_Python.SbRepBox_fWidth_set)
    fLog = _swig_property(HEPVis_SWIG_Python.SbRepBox_fLog_get, HEPVis_SWIG_Python.SbRepBox_fLog_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBox
    __del__ = lambda self : None;
SbRepBox_swigregister = HEPVis_SWIG_Python.SbRepBox_swigregister
SbRepBox_swigregister(SbRepBox)

class SoPlotter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPlotter_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPlotter_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoPlotter_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPlotter_alternateRep_get, HEPVis_SWIG_Python.SoPlotter_alternateRep_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoPlotter_verbose_get, HEPVis_SWIG_Python.SoPlotter_verbose_set)
    width = _swig_property(HEPVis_SWIG_Python.SoPlotter_width_get, HEPVis_SWIG_Python.SoPlotter_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoPlotter_height_get, HEPVis_SWIG_Python.SoPlotter_height_set)
    leftMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_leftMargin_get, HEPVis_SWIG_Python.SoPlotter_leftMargin_set)
    rightMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_rightMargin_get, HEPVis_SWIG_Python.SoPlotter_rightMargin_set)
    bottomMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_bottomMargin_get, HEPVis_SWIG_Python.SoPlotter_bottomMargin_set)
    topMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_topMargin_get, HEPVis_SWIG_Python.SoPlotter_topMargin_set)
    depth = _swig_property(HEPVis_SWIG_Python.SoPlotter_depth_get, HEPVis_SWIG_Python.SoPlotter_depth_set)
    downMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_downMargin_get, HEPVis_SWIG_Python.SoPlotter_downMargin_set)
    upMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_upMargin_get, HEPVis_SWIG_Python.SoPlotter_upMargin_set)
    titleUp = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleUp_get, HEPVis_SWIG_Python.SoPlotter_titleUp_set)
    titleToAxis = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleToAxis_get, HEPVis_SWIG_Python.SoPlotter_titleToAxis_set)
    titleHeight = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleHeight_get, HEPVis_SWIG_Python.SoPlotter_titleHeight_set)
    titleAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleAutomated_get, HEPVis_SWIG_Python.SoPlotter_titleAutomated_set)
    title = _swig_property(HEPVis_SWIG_Python.SoPlotter_title_get, HEPVis_SWIG_Python.SoPlotter_title_set)
    superposeBins = _swig_property(HEPVis_SWIG_Python.SoPlotter_superposeBins_get, HEPVis_SWIG_Python.SoPlotter_superposeBins_set)
    colorMappingVisible = _swig_property(HEPVis_SWIG_Python.SoPlotter_colorMappingVisible_get, HEPVis_SWIG_Python.SoPlotter_colorMappingVisible_set)
    CELLS = HEPVis_SWIG_Python.SoPlotter_CELLS
    MIN_MAX = HEPVis_SWIG_Python.SoPlotter_MIN_MAX
    colorMappingAxisLabeling = _swig_property(HEPVis_SWIG_Python.SoPlotter_colorMappingAxisLabeling_get, HEPVis_SWIG_Python.SoPlotter_colorMappingAxisLabeling_set)
    colorMappingAttached = _swig_property(HEPVis_SWIG_Python.SoPlotter_colorMappingAttached_get, HEPVis_SWIG_Python.SoPlotter_colorMappingAttached_set)
    wallEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_wallEnforced_get, HEPVis_SWIG_Python.SoPlotter_wallEnforced_set)
    gridEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_gridEnforced_get, HEPVis_SWIG_Python.SoPlotter_gridEnforced_set)
    primitivesEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_primitivesEnforced_get, HEPVis_SWIG_Python.SoPlotter_primitivesEnforced_set)
    innerFrameEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_innerFrameEnforced_get, HEPVis_SWIG_Python.SoPlotter_innerFrameEnforced_set)
    xAxisEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_xAxisEnforced_set)
    xAxisAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_xAxisAutomated_set)
    xAxisMinimum = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_xAxisMinimum_set)
    xAxisMaximum = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_xAxisMaximum_set)
    xAxisLogScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_xAxisLogScale_set)
    yAxisEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_yAxisEnforced_set)
    yAxisAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_yAxisAutomated_set)
    yAxisMinimum = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_yAxisMinimum_set)
    yAxisMaximum = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_yAxisMaximum_set)
    yAxisLogScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_yAxisLogScale_set)
    zAxisEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_zAxisEnforced_set)
    zAxisAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_zAxisAutomated_set)
    zAxisMinimum = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_zAxisMinimum_set)
    zAxisMaximum = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_zAxisMaximum_set)
    zAxisLogScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_zAxisLogScale_set)
    valueTopMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_valueTopMargin_get, HEPVis_SWIG_Python.SoPlotter_valueTopMargin_set)
    topAxisVisible = _swig_property(HEPVis_SWIG_Python.SoPlotter_topAxisVisible_get, HEPVis_SWIG_Python.SoPlotter_topAxisVisible_set)
    rightAxisVisible = _swig_property(HEPVis_SWIG_Python.SoPlotter_rightAxisVisible_get, HEPVis_SWIG_Python.SoPlotter_rightAxisVisible_set)
    numberOfLevels = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfLevels_get, HEPVis_SWIG_Python.SoPlotter_numberOfLevels_set)
    levels = _swig_property(HEPVis_SWIG_Python.SoPlotter_levels_get, HEPVis_SWIG_Python.SoPlotter_levels_set)
    shapeAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_shapeAutomated_get, HEPVis_SWIG_Python.SoPlotter_shapeAutomated_set)
    frozen = _swig_property(HEPVis_SWIG_Python.SoPlotter_frozen_get, HEPVis_SWIG_Python.SoPlotter_frozen_set)
    ttfScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_ttfScale_get, HEPVis_SWIG_Python.SoPlotter_ttfScale_set)
    theta = _swig_property(HEPVis_SWIG_Python.SoPlotter_theta_get, HEPVis_SWIG_Python.SoPlotter_theta_set)
    phi = _swig_property(HEPVis_SWIG_Python.SoPlotter_phi_get, HEPVis_SWIG_Python.SoPlotter_phi_set)
    XY = HEPVis_SWIG_Python.SoPlotter_XY
    XYZ = HEPVis_SWIG_Python.SoPlotter_XYZ
    shape = _swig_property(HEPVis_SWIG_Python.SoPlotter_shape_get, HEPVis_SWIG_Python.SoPlotter_shape_set)
    infos = _swig_property(HEPVis_SWIG_Python.SoPlotter_infos_get, HEPVis_SWIG_Python.SoPlotter_infos_set)
    legend = _swig_property(HEPVis_SWIG_Python.SoPlotter_legend_get, HEPVis_SWIG_Python.SoPlotter_legend_set)
    numberOfPlottedObject = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedObject_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedObject_set)
    numberOfPlottedBins1D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins1D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins1D_set)
    numberOfPlottedBins2D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins2D_set)
    numberOfPlottedPoints2D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints2D_set)
    numberOfPlottedPoints3D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints3D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints3D_set)
    numberOfPlottedFunction1D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction1D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction1D_set)
    numberOfPlottedFunction2D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction2D_set)
    plottedObjectNames = _swig_property(HEPVis_SWIG_Python.SoPlotter_plottedObjectNames_get, HEPVis_SWIG_Python.SoPlotter_plottedObjectNames_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPlotter(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPlottableObject(*args): return HEPVis_SWIG_Python.SoPlotter_setPlottableObject(*args)
    def addPlottableObject(*args): return HEPVis_SWIG_Python.SoPlotter_addPlottableObject(*args)
    def removePlottableObject(*args): return HEPVis_SWIG_Python.SoPlotter_removePlottableObject(*args)
    def removePlottableObjectsOfClass(*args): return HEPVis_SWIG_Python.SoPlotter_removePlottableObjectsOfClass(*args)
    def isEmpty(*args): return HEPVis_SWIG_Python.SoPlotter_isEmpty(*args)
    NONE = HEPVis_SWIG_Python.SoPlotter_NONE
    ALL = HEPVis_SWIG_Python.SoPlotter_ALL
    RESET = HEPVis_SWIG_Python.SoPlotter_RESET
    SHAPE = HEPVis_SWIG_Python.SoPlotter_SHAPE
    BINS = HEPVis_SWIG_Python.SoPlotter_BINS
    POINTS = HEPVis_SWIG_Python.SoPlotter_POINTS
    FUNCTION = HEPVis_SWIG_Python.SoPlotter_FUNCTION
    WALL = HEPVis_SWIG_Python.SoPlotter_WALL
    GRID = HEPVis_SWIG_Python.SoPlotter_GRID
    PRIMITIVES = HEPVis_SWIG_Python.SoPlotter_PRIMITIVES
    INNER_FRAME = HEPVis_SWIG_Python.SoPlotter_INNER_FRAME
    TITLE = HEPVis_SWIG_Python.SoPlotter_TITLE
    X_AXIS = HEPVis_SWIG_Python.SoPlotter_X_AXIS
    Y_AXIS = HEPVis_SWIG_Python.SoPlotter_Y_AXIS
    Z_AXIS = HEPVis_SWIG_Python.SoPlotter_Z_AXIS
    COLOR_MAPPING = HEPVis_SWIG_Python.SoPlotter_COLOR_MAPPING
    LAYOUT = HEPVis_SWIG_Python.SoPlotter_LAYOUT
    TTF_SCALE = HEPVis_SWIG_Python.SoPlotter_TTF_SCALE
    def raiseUpdateFlag(*args): return HEPVis_SWIG_Python.SoPlotter_raiseUpdateFlag(*args)
    def raiseAllUpdateFlags(*args): return HEPVis_SWIG_Python.SoPlotter_raiseAllUpdateFlags(*args)
    def resetAllUpdateFlags(*args): return HEPVis_SWIG_Python.SoPlotter_resetAllUpdateFlags(*args)
    def isUpdateFlagRaised(*args): return HEPVis_SWIG_Python.SoPlotter_isUpdateFlagRaised(*args)
    def someFlagRaised(*args): return HEPVis_SWIG_Python.SoPlotter_someFlagRaised(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoPlotter_updateChildren(*args)
    def getShape(*args): return HEPVis_SWIG_Python.SoPlotter_getShape(*args)
    def getPlottableObjects(*args): return HEPVis_SWIG_Python.SoPlotter_getPlottableObjects(*args)
    def getLayout(*args): return HEPVis_SWIG_Python.SoPlotter_getLayout(*args)
    def getDataScale(*args): return HEPVis_SWIG_Python.SoPlotter_getDataScale(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoPlotter_getTopSeparator(*args)
    def getEtcSeparator(*args): return HEPVis_SWIG_Python.SoPlotter_getEtcSeparator(*args)
    def getEtcDataSeparator(*args): return HEPVis_SWIG_Python.SoPlotter_getEtcDataSeparator(*args)
    def getXAxis(*args): return HEPVis_SWIG_Python.SoPlotter_getXAxis(*args)
    def getYAxis(*args): return HEPVis_SWIG_Python.SoPlotter_getYAxis(*args)
    def getZAxis(*args): return HEPVis_SWIG_Python.SoPlotter_getZAxis(*args)
    def getLegendStyleList(*args): return HEPVis_SWIG_Python.SoPlotter_getLegendStyleList(*args)
    def getWallStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getWallStyle(*args)
    def getGridStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getGridStyle(*args)
    def getInnerFrameStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getInnerFrameStyle(*args)
    def getInfosStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getInfosStyle(*args)
    def getTitleStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getTitleStyle(*args)
    def getBinsStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getBinsStyle(*args)
    def getPointsStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getPointsStyle(*args)
    def getFunctionStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getFunctionStyle(*args)
    def getRightHatchStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getRightHatchStyle(*args)
    def getLeftHatchStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getLeftHatchStyle(*args)
    def getErrorsStyle(*args): return HEPVis_SWIG_Python.SoPlotter_getErrorsStyle(*args)
    def getStyleCache(*args): return HEPVis_SWIG_Python.SoPlotter_getStyleCache(*args)
    def resetStyles(*args): return HEPVis_SWIG_Python.SoPlotter_resetStyles(*args)
    def setAxesModeling(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesModeling(*args)
    def setAxesColor(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesColor(*args)
    def setAxesTextScale(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesTextScale(*args)
    def setAxesLinePattern(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesLinePattern(*args)
    def setAxesLineWidth(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesLineWidth(*args)
    def setAxesTickLength(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesTickLength(*args)
    def setAxesLabelHeight(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesLabelHeight(*args)
    def setAxesTitleHeight(*args): return HEPVis_SWIG_Python.SoPlotter_setAxesTitleHeight(*args)
    def setFont(*args): return HEPVis_SWIG_Python.SoPlotter_setFont(*args)
    def setPAW_AxesTextSize(*args): return HEPVis_SWIG_Python.SoPlotter_setPAW_AxesTextSize(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPlotter_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPlotter_clearAlternateRep(*args)
    def dataFrame2vp(*args): return HEPVis_SWIG_Python.SoPlotter_dataFrame2vp(*args)
    def vp2dataFrame(*args): return HEPVis_SWIG_Python.SoPlotter_vp2dataFrame(*args)
    def dataFrame2axis(*args): return HEPVis_SWIG_Python.SoPlotter_dataFrame2axis(*args)
    def axis2dataFrame(*args): return HEPVis_SWIG_Python.SoPlotter_axis2dataFrame(*args)
    def axis2vp(*args): return HEPVis_SWIG_Python.SoPlotter_axis2vp(*args)
    def vp2axis(*args): return HEPVis_SWIG_Python.SoPlotter_vp2axis(*args)
    def addPlottablePrimitive(*args): return HEPVis_SWIG_Python.SoPlotter_addPlottablePrimitive(*args)
    def clearPlottablePrimitives(*args): return HEPVis_SWIG_Python.SoPlotter_clearPlottablePrimitives(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoPlotter_clear(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPlotter_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoPlotter_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoPlotter_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoPlotter_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoPlotter_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoPlotter_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoPlotter_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoPlotter_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoPlotter_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoPlotter_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoPlotter_pick(*args)
    project2D = staticmethod(HEPVis_SWIG_Python.SoPlotter_project2D)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPlotter
    __del__ = lambda self : None;
SoPlotter_swigregister = HEPVis_SWIG_Python.SoPlotter_swigregister
SoPlotter_swigregister(SoPlotter)
SoPlotter_getClassTypeId = HEPVis_SWIG_Python.SoPlotter_getClassTypeId
SoPlotter_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog
SoPlotter_initClass = HEPVis_SWIG_Python.SoPlotter_initClass
SoPlotter_project2D = HEPVis_SWIG_Python.SoPlotter_project2D

class SoLegendRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoLegendRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoLegendRegion_getNodekitCatalog(*args)
    text = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_text_get, HEPVis_SWIG_Python.SoLegendRegion_text_set)
    markerOnLeftBorder = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_markerOnLeftBorder_get, HEPVis_SWIG_Python.SoLegendRegion_markerOnLeftBorder_set)
    textInBlack = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_textInBlack_get, HEPVis_SWIG_Python.SoLegendRegion_textInBlack_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_alternateRep_get, HEPVis_SWIG_Python.SoLegendRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoLegendRegion_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoLegendRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def getStyle(*args): return HEPVis_SWIG_Python.SoLegendRegion_getStyle(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoLegendRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoLegendRegion_clearAlternateRep(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoLegendRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoLegendRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoLegendRegion_getCamera(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoLegendRegion_resetCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoLegendRegion_clear(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoLegendRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoLegendRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoLegendRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoLegendRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoLegendRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoLegendRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoLegendRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoLegendRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoLegendRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoLegendRegion_pick(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoLegendRegion
    __del__ = lambda self : None;
SoLegendRegion_swigregister = HEPVis_SWIG_Python.SoLegendRegion_swigregister
SoLegendRegion_swigregister(SoLegendRegion)
SoLegendRegion_getClassTypeId = HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId
SoLegendRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog
SoLegendRegion_initClass = HEPVis_SWIG_Python.SoLegendRegion_initClass

class SoInfosRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoInfosRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoInfosRegion_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_alternateRep_get, HEPVis_SWIG_Python.SoInfosRegion_alternateRep_set)
    title = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_title_get, HEPVis_SWIG_Python.SoInfosRegion_title_set)
    text = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_text_get, HEPVis_SWIG_Python.SoInfosRegion_text_set)
    inBetweenSpaces = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_inBetweenSpaces_get, HEPVis_SWIG_Python.SoInfosRegion_inBetweenSpaces_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoInfosRegion_initClass)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoInfosRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLineStyle(*args): return HEPVis_SWIG_Python.SoInfosRegion_getLineStyle(*args)
    def getTextStyle(*args): return HEPVis_SWIG_Python.SoInfosRegion_getTextStyle(*args)
    def getContentSize(*args): return HEPVis_SWIG_Python.SoInfosRegion_getContentSize(*args)
    def matchViewport(*args): return HEPVis_SWIG_Python.SoInfosRegion_matchViewport(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoInfosRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoInfosRegion_clearAlternateRep(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoInfosRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoInfosRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoInfosRegion_getCamera(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoInfosRegion_resetCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoInfosRegion_clear(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoInfosRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoInfosRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoInfosRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoInfosRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoInfosRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoInfosRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoInfosRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoInfosRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoInfosRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoInfosRegion_pick(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoInfosRegion
    __del__ = lambda self : None;
SoInfosRegion_swigregister = HEPVis_SWIG_Python.SoInfosRegion_swigregister
SoInfosRegion_swigregister(SoInfosRegion)
SoInfosRegion_getClassTypeId = HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId
SoInfosRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog
SoInfosRegion_initClass = HEPVis_SWIG_Python.SoInfosRegion_initClass

class SbPlotterDoIt(SbDoIt):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def cast(*args): return HEPVis_SWIG_Python.SbPlotterDoIt_cast(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPlotterDoIt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlotterDoIt
    __del__ = lambda self : None;
    def getPlottableObject(*args): return HEPVis_SWIG_Python.SbPlotterDoIt_getPlottableObject(*args)
    def getPlotter(*args): return HEPVis_SWIG_Python.SbPlotterDoIt_getPlotter(*args)
    def reset(*args): return HEPVis_SWIG_Python.SbPlotterDoIt_reset(*args)
SbPlotterDoIt_swigregister = HEPVis_SWIG_Python.SbPlotterDoIt_swigregister
SbPlotterDoIt_swigregister(SbPlotterDoIt)

class SoPlotterRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getNodekitCatalog(*args)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_alternateRep_get, HEPVis_SWIG_Python.SoPlotterRegion_alternateRep_set)
    titleRegionVisible = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionVisible_set)
    infosRegionVisible = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionVisible_set)
    legendRegionVisible = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionVisible_set)
    titleRegionOrigin = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionOrigin_set)
    titleRegionSize = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionSize_set)
    infosRegionAttachedToDataFrame = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionAttachedToDataFrame_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionAttachedToDataFrame_set)
    legendRegionAttachedToInfosRegion = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionAttachedToInfosRegion_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionAttachedToInfosRegion_set)
    infosRegionOrigin = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionOrigin_set)
    infosRegionSize = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionSize_set)
    legendRegionOrigin = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOrigin_set)
    PERCENT = HEPVis_SWIG_Python.SoPlotterRegion_PERCENT
    AXIS = HEPVis_SWIG_Python.SoPlotterRegion_AXIS
    legendRegionOriginUnit = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOriginUnit_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOriginUnit_set)
    legendRegionSize = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionSize_set)
    infosRegionStyle = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionStyle_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionStyle_set)
    ADJUST_VIEWPORT = HEPVis_SWIG_Python.SoPlotterRegion_ADJUST_VIEWPORT
    LEAVE_ALONE = HEPVis_SWIG_Python.SoPlotterRegion_LEAVE_ALONE
    plotterViewportMapping = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_plotterViewportMapping_get, HEPVis_SWIG_Python.SoPlotterRegion_plotterViewportMapping_set)
    RESIZE_HEIGHT = HEPVis_SWIG_Python.SoPlotterRegion_RESIZE_HEIGHT
    ASPECT_RATIO = HEPVis_SWIG_Python.SoPlotterRegion_ASPECT_RATIO
    infosRegionResizePolicy = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionResizePolicy_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionResizePolicy_set)
    legendAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendAutomated_get, HEPVis_SWIG_Python.SoPlotterRegion_legendAutomated_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPlotterRegion_initClass)
    def doAction(*args): return HEPVis_SWIG_Python.SoPlotterRegion_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoPlotterRegion_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoPlotterRegion_GLRender(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getBoundingBox(*args)
    def getMatrix(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getMatrix(*args)
    def handleEvent(*args): return HEPVis_SWIG_Python.SoPlotterRegion_handleEvent(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoPlotterRegion_rayPick(*args)
    def search(*args): return HEPVis_SWIG_Python.SoPlotterRegion_search(*args)
    def write(*args): return HEPVis_SWIG_Python.SoPlotterRegion_write(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoPlotterRegion_pick(*args)
    def updateChildren(*args): return HEPVis_SWIG_Python.SoPlotterRegion_updateChildren(*args)
    def getTopSeparator(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getTopSeparator(*args)
    def getCamera(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getCamera(*args)
    def clear(*args): return HEPVis_SWIG_Python.SoPlotterRegion_clear(*args)
    def resetCamera(*args): return HEPVis_SWIG_Python.SoPlotterRegion_resetCamera(*args)
    def setCamera(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setCamera(*args)
    def refresh(*args): return HEPVis_SWIG_Python.SoPlotterRegion_refresh(*args)
    def doIt(*args): return HEPVis_SWIG_Python.SoPlotterRegion_doIt(*args)
    def undo(*args): return HEPVis_SWIG_Python.SoPlotterRegion_undo(*args)
    def resetUndo(*args): return HEPVis_SWIG_Python.SoPlotterRegion_resetUndo(*args)
    def getNodeOfInterest(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getNodeOfInterest(*args)
    def placeInPage(*args): return HEPVis_SWIG_Python.SoPlotterRegion_placeInPage(*args)
    def setStyle(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyle(*args)
    def setStyleLab_Default(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleLab_Default(*args)
    def setStyleHippo_Default(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleHippo_Default(*args)
    def setStylePAW_Default(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStylePAW_Default(*args)
    def setStyleROOT_Default(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Default(*args)
    def setStyleROOT_Plain(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Plain(*args)
    def setStyleROOT_Bold(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Bold(*args)
    def setStyleROOT_Video(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Video(*args)
    def setStyleROOT_Pub(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Pub(*args)
    def setStyleROOT_LHCb(*args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_LHCb(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPlotterRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPlotter(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getPlotter(*args)
    def getTitleRegion(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getTitleRegion(*args)
    def getInfosRegion(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getInfosRegion(*args)
    def getLegendRegion(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getLegendRegion(*args)
    def getEtcSeparator(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getEtcSeparator(*args)
    def getNumberOfLegendRegions(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getNumberOfLegendRegions(*args)
    def getNumberOfOverlays(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getNumberOfOverlays(*args)
    def getOverlay(*args): return HEPVis_SWIG_Python.SoPlotterRegion_getOverlay(*args)
    def generateAlternateRep(*args): return HEPVis_SWIG_Python.SoPlotterRegion_generateAlternateRep(*args)
    def clearAlternateRep(*args): return HEPVis_SWIG_Python.SoPlotterRegion_clearAlternateRep(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPlotterRegion
    __del__ = lambda self : None;
SoPlotterRegion_swigregister = HEPVis_SWIG_Python.SoPlotterRegion_swigregister
SoPlotterRegion_swigregister(SoPlotterRegion)
SoPlotterRegion_getClassTypeId = HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId
SoPlotterRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog
SoPlotterRegion_initClass = HEPVis_SWIG_Python.SoPlotterRegion_initClass

class SoBackPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoBackPrimitive_getTypeId(*args)
    dx1 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dx1_get, HEPVis_SWIG_Python.SoBackPrimitive_dx1_set)
    dx2 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dx2_get, HEPVis_SWIG_Python.SoBackPrimitive_dx2_set)
    dy1 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dy1_get, HEPVis_SWIG_Python.SoBackPrimitive_dy1_set)
    dy2 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dy2_get, HEPVis_SWIG_Python.SoBackPrimitive_dy2_set)
    dz = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dz_get, HEPVis_SWIG_Python.SoBackPrimitive_dz_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoBackPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoBackPrimitive_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoBackPrimitive
    __del__ = lambda self : None;
SoBackPrimitive_swigregister = HEPVis_SWIG_Python.SoBackPrimitive_swigregister
SoBackPrimitive_swigregister(SoBackPrimitive)
SoBackPrimitive_getClassTypeId = HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId
SoBackPrimitive_initClass = HEPVis_SWIG_Python.SoBackPrimitive_initClass

class SoPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPrimitive_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPrimitive_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoPrimitive_getNodekitCatalog(*args)
    background = _swig_property(HEPVis_SWIG_Python.SoPrimitive_background_get, HEPVis_SWIG_Python.SoPrimitive_background_set)
    foreground = _swig_property(HEPVis_SWIG_Python.SoPrimitive_foreground_get, HEPVis_SWIG_Python.SoPrimitive_foreground_set)
    shadowThickness = _swig_property(HEPVis_SWIG_Python.SoPrimitive_shadowThickness_get, HEPVis_SWIG_Python.SoPrimitive_shadowThickness_set)
    marginWidth = _swig_property(HEPVis_SWIG_Python.SoPrimitive_marginWidth_get, HEPVis_SWIG_Python.SoPrimitive_marginWidth_set)
    marginHeight = _swig_property(HEPVis_SWIG_Python.SoPrimitive_marginHeight_get, HEPVis_SWIG_Python.SoPrimitive_marginHeight_set)
    width = _swig_property(HEPVis_SWIG_Python.SoPrimitive_width_get, HEPVis_SWIG_Python.SoPrimitive_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoPrimitive_height_get, HEPVis_SWIG_Python.SoPrimitive_height_set)
    ATTACH_NONE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_NONE
    ATTACH_NODE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_NODE
    ATTACH_OPPOSITE_NODE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_OPPOSITE_NODE
    leftAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_leftAttachment_get, HEPVis_SWIG_Python.SoPrimitive_leftAttachment_set)
    rightAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_rightAttachment_get, HEPVis_SWIG_Python.SoPrimitive_rightAttachment_set)
    topAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_topAttachment_get, HEPVis_SWIG_Python.SoPrimitive_topAttachment_set)
    bottomAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_bottomAttachment_get, HEPVis_SWIG_Python.SoPrimitive_bottomAttachment_set)
    leftNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_leftNode_get, HEPVis_SWIG_Python.SoPrimitive_leftNode_set)
    rightNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_rightNode_get, HEPVis_SWIG_Python.SoPrimitive_rightNode_set)
    topNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_topNode_get, HEPVis_SWIG_Python.SoPrimitive_topNode_set)
    bottomNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_bottomNode_get, HEPVis_SWIG_Python.SoPrimitive_bottomNode_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    def compellSize(*args): return HEPVis_SWIG_Python.SoPrimitive_compellSize(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPrimitive_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPrimitive
    __del__ = lambda self : None;
SoPrimitive_swigregister = HEPVis_SWIG_Python.SoPrimitive_swigregister
SoPrimitive_swigregister(SoPrimitive)
SoPrimitive_getClassTypeId = HEPVis_SWIG_Python.SoPrimitive_getClassTypeId
SoPrimitive_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog
SoPrimitive_initClass = HEPVis_SWIG_Python.SoPrimitive_initClass

class SoForm(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoForm_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoForm_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoForm_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoForm(*args)
        try: self.this.append(this)
        except: self.this = this
    def addChild(*args): return HEPVis_SWIG_Python.SoForm_addChild(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoForm_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoForm
    __del__ = lambda self : None;
SoForm_swigregister = HEPVis_SWIG_Python.SoForm_swigregister
SoForm_swigregister(SoForm)
SoForm_getClassTypeId = HEPVis_SWIG_Python.SoForm_getClassTypeId
SoForm_getClassNodekitCatalog = HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog
SoForm_initClass = HEPVis_SWIG_Python.SoForm_initClass

class SoPushButton(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPushButton_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoPushButton_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoPushButton_getNodekitCatalog(*args)
    fontList = _swig_property(HEPVis_SWIG_Python.SoPushButton_fontList_get, HEPVis_SWIG_Python.SoPushButton_fontList_set)
    labelString = _swig_property(HEPVis_SWIG_Python.SoPushButton_labelString_get, HEPVis_SWIG_Python.SoPushButton_labelString_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPushButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def addActivateCallback(*args): return HEPVis_SWIG_Python.SoPushButton_addActivateCallback(*args)
    def removeActivateCallback(*args): return HEPVis_SWIG_Python.SoPushButton_removeActivateCallback(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPushButton_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPushButton
    __del__ = lambda self : None;
SoPushButton_swigregister = HEPVis_SWIG_Python.SoPushButton_swigregister
SoPushButton_swigregister(SoPushButton)
SoPushButton_getClassTypeId = HEPVis_SWIG_Python.SoPushButton_getClassTypeId
SoPushButton_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog
SoPushButton_initClass = HEPVis_SWIG_Python.SoPushButton_initClass

class SoArrowButton(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoArrowButton_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoArrowButton_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoArrowButton_getNodekitCatalog(*args)
    ARROW_UP = HEPVis_SWIG_Python.SoArrowButton_ARROW_UP
    ARROW_LEFT = HEPVis_SWIG_Python.SoArrowButton_ARROW_LEFT
    ARROW_DOWN = HEPVis_SWIG_Python.SoArrowButton_ARROW_DOWN
    ARROW_RIGHT = HEPVis_SWIG_Python.SoArrowButton_ARROW_RIGHT
    arrowDirection = _swig_property(HEPVis_SWIG_Python.SoArrowButton_arrowDirection_get, HEPVis_SWIG_Python.SoArrowButton_arrowDirection_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoArrowButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def addActivateCallback(*args): return HEPVis_SWIG_Python.SoArrowButton_addActivateCallback(*args)
    def removeActivateCallback(*args): return HEPVis_SWIG_Python.SoArrowButton_removeActivateCallback(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoArrowButton_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoArrowButton
    __del__ = lambda self : None;
SoArrowButton_swigregister = HEPVis_SWIG_Python.SoArrowButton_swigregister
SoArrowButton_swigregister(SoArrowButton)
SoArrowButton_getClassTypeId = HEPVis_SWIG_Python.SoArrowButton_getClassTypeId
SoArrowButton_getClassNodekitCatalog = HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog
SoArrowButton_initClass = HEPVis_SWIG_Python.SoArrowButton_initClass

class SoList(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoList_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoList_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoList_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoList_getNodekitCatalog(*args)
    fontList = _swig_property(HEPVis_SWIG_Python.SoList_fontList_get, HEPVis_SWIG_Python.SoList_fontList_set)
    items = _swig_property(HEPVis_SWIG_Python.SoList_items_get, HEPVis_SWIG_Python.SoList_items_set)
    visibleItemCount = _swig_property(HEPVis_SWIG_Python.SoList_visibleItemCount_get, HEPVis_SWIG_Python.SoList_visibleItemCount_set)
    topItemPosition = _swig_property(HEPVis_SWIG_Python.SoList_topItemPosition_get, HEPVis_SWIG_Python.SoList_topItemPosition_set)
    CONSTANT = HEPVis_SWIG_Python.SoList_CONSTANT
    VARIABLE = HEPVis_SWIG_Python.SoList_VARIABLE
    listSizePolicy = _swig_property(HEPVis_SWIG_Python.SoList_listSizePolicy_get, HEPVis_SWIG_Python.SoList_listSizePolicy_set)
    listWidth = _swig_property(HEPVis_SWIG_Python.SoList_listWidth_get, HEPVis_SWIG_Python.SoList_listWidth_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoList(*args)
        try: self.this.append(this)
        except: self.this = this
    def addSingleSelectionCallback(*args): return HEPVis_SWIG_Python.SoList_addSingleSelectionCallback(*args)
    def removeSingleSelectionCallback(*args): return HEPVis_SWIG_Python.SoList_removeSingleSelectionCallback(*args)
    def getSelectedItem(*args): return HEPVis_SWIG_Python.SoList_getSelectedItem(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoList_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoList
    __del__ = lambda self : None;
SoList_swigregister = HEPVis_SWIG_Python.SoList_swigregister
SoList_swigregister(SoList)
SoList_getClassTypeId = HEPVis_SWIG_Python.SoList_getClassTypeId
SoList_getClassNodekitCatalog = HEPVis_SWIG_Python.SoList_getClassNodekitCatalog
SoList_initClass = HEPVis_SWIG_Python.SoList_initClass

class SoScrolledList(SoForm):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoScrolledList_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoScrolledList_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoScrolledList_getNodekitCatalog(*args)
    fontList = _swig_property(HEPVis_SWIG_Python.SoScrolledList_fontList_get, HEPVis_SWIG_Python.SoScrolledList_fontList_set)
    items = _swig_property(HEPVis_SWIG_Python.SoScrolledList_items_get, HEPVis_SWIG_Python.SoScrolledList_items_set)
    visibleItemCount = _swig_property(HEPVis_SWIG_Python.SoScrolledList_visibleItemCount_get, HEPVis_SWIG_Python.SoScrolledList_visibleItemCount_set)
    topItemPosition = _swig_property(HEPVis_SWIG_Python.SoScrolledList_topItemPosition_get, HEPVis_SWIG_Python.SoScrolledList_topItemPosition_set)
    listWidth = _swig_property(HEPVis_SWIG_Python.SoScrolledList_listWidth_get, HEPVis_SWIG_Python.SoScrolledList_listWidth_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoScrolledList(*args)
        try: self.this.append(this)
        except: self.this = this
    def addSingleSelectionCallback(*args): return HEPVis_SWIG_Python.SoScrolledList_addSingleSelectionCallback(*args)
    def removeSingleSelectionCallback(*args): return HEPVis_SWIG_Python.SoScrolledList_removeSingleSelectionCallback(*args)
    def getSelectedItem(*args): return HEPVis_SWIG_Python.SoScrolledList_getSelectedItem(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoScrolledList_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoScrolledList
    __del__ = lambda self : None;
SoScrolledList_swigregister = HEPVis_SWIG_Python.SoScrolledList_swigregister
SoScrolledList_swigregister(SoScrolledList)
SoScrolledList_getClassTypeId = HEPVis_SWIG_Python.SoScrolledList_getClassTypeId
SoScrolledList_getClassNodekitCatalog = HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog
SoScrolledList_initClass = HEPVis_SWIG_Python.SoScrolledList_initClass

class SoSelectionBox(SoForm):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoSelectionBox_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoSelectionBox_getNodekitCatalog(*args)
    items = _swig_property(HEPVis_SWIG_Python.SoSelectionBox_items_get, HEPVis_SWIG_Python.SoSelectionBox_items_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoSelectionBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def addOkCallback(*args): return HEPVis_SWIG_Python.SoSelectionBox_addOkCallback(*args)
    def removeOkCallback(*args): return HEPVis_SWIG_Python.SoSelectionBox_removeOkCallback(*args)
    def getSelection(*args): return HEPVis_SWIG_Python.SoSelectionBox_getSelection(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSelectionBox_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSelectionBox
    __del__ = lambda self : None;
SoSelectionBox_swigregister = HEPVis_SWIG_Python.SoSelectionBox_swigregister
SoSelectionBox_swigregister(SoSelectionBox)
SoSelectionBox_getClassTypeId = HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId
SoSelectionBox_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog
SoSelectionBox_initClass = HEPVis_SWIG_Python.SoSelectionBox_initClass

class SoText(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoText_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoText_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoText_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoText_getNodekitCatalog(*args)
    ENGLISH = HEPVis_SWIG_Python.SoText_ENGLISH
    FRENCH = HEPVis_SWIG_Python.SoText_FRENCH
    fontList = _swig_property(HEPVis_SWIG_Python.SoText_fontList_get, HEPVis_SWIG_Python.SoText_fontList_set)
    value = _swig_property(HEPVis_SWIG_Python.SoText_value_get, HEPVis_SWIG_Python.SoText_value_set)
    rows = _swig_property(HEPVis_SWIG_Python.SoText_rows_get, HEPVis_SWIG_Python.SoText_rows_set)
    topPosition = _swig_property(HEPVis_SWIG_Python.SoText_topPosition_get, HEPVis_SWIG_Python.SoText_topPosition_set)
    editable = _swig_property(HEPVis_SWIG_Python.SoText_editable_get, HEPVis_SWIG_Python.SoText_editable_set)
    cursorPosition = _swig_property(HEPVis_SWIG_Python.SoText_cursorPosition_get, HEPVis_SWIG_Python.SoText_cursorPosition_set)
    textWidth = _swig_property(HEPVis_SWIG_Python.SoText_textWidth_get, HEPVis_SWIG_Python.SoText_textWidth_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoText(*args)
        try: self.this.append(this)
        except: self.this = this
    def addActivateCallback(*args): return HEPVis_SWIG_Python.SoText_addActivateCallback(*args)
    def removeActivateCallback(*args): return HEPVis_SWIG_Python.SoText_removeActivateCallback(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoText_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoText
    __del__ = lambda self : None;
SoText_swigregister = HEPVis_SWIG_Python.SoText_swigregister
SoText_swigregister(SoText)
SoText_getClassTypeId = HEPVis_SWIG_Python.SoText_getClassTypeId
SoText_getClassNodekitCatalog = HEPVis_SWIG_Python.SoText_getClassNodekitCatalog
SoText_initClass = HEPVis_SWIG_Python.SoText_initClass

class SoCommand(SoText):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCommand_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoCommand_getTypeId(*args)
    historyItems = _swig_property(HEPVis_SWIG_Python.SoCommand_historyItems_get, HEPVis_SWIG_Python.SoCommand_historyItems_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCommand_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCommand
    __del__ = lambda self : None;
SoCommand_swigregister = HEPVis_SWIG_Python.SoCommand_swigregister
SoCommand_swigregister(SoCommand)
SoCommand_getClassTypeId = HEPVis_SWIG_Python.SoCommand_getClassTypeId
SoCommand_initClass = HEPVis_SWIG_Python.SoCommand_initClass

class SoFileSelectionBox(SoForm):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoFileSelectionBox_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoFileSelectionBox_getNodekitCatalog(*args)
    directory = _swig_property(HEPVis_SWIG_Python.SoFileSelectionBox_directory_get, HEPVis_SWIG_Python.SoFileSelectionBox_directory_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoFileSelectionBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def addOkCallback(*args): return HEPVis_SWIG_Python.SoFileSelectionBox_addOkCallback(*args)
    def removeOkCallback(*args): return HEPVis_SWIG_Python.SoFileSelectionBox_removeOkCallback(*args)
    def getSelectedFile(*args): return HEPVis_SWIG_Python.SoFileSelectionBox_getSelectedFile(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoFileSelectionBox_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoFileSelectionBox
    __del__ = lambda self : None;
SoFileSelectionBox_swigregister = HEPVis_SWIG_Python.SoFileSelectionBox_swigregister
SoFileSelectionBox_swigregister(SoFileSelectionBox)
SoFileSelectionBox_getClassTypeId = HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId
SoFileSelectionBox_getClassNodekitCatalog = HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog
SoFileSelectionBox_initClass = HEPVis_SWIG_Python.SoFileSelectionBox_initClass

class SoShell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoShell_getClassTypeId)
    def getTypeId(*args): return HEPVis_SWIG_Python.SoShell_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return HEPVis_SWIG_Python.SoShell_getNodekitCatalog(*args)
    background = _swig_property(HEPVis_SWIG_Python.SoShell_background_get, HEPVis_SWIG_Python.SoShell_background_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoShell(*args)
        try: self.this.append(this)
        except: self.this = this
    def addChild(*args): return HEPVis_SWIG_Python.SoShell_addChild(*args)
    def doAction(*args): return HEPVis_SWIG_Python.SoShell_doAction(*args)
    def callback(*args): return HEPVis_SWIG_Python.SoShell_callback(*args)
    def GLRender(*args): return HEPVis_SWIG_Python.SoShell_GLRender(*args)
    def rayPick(*args): return HEPVis_SWIG_Python.SoShell_rayPick(*args)
    def pick(*args): return HEPVis_SWIG_Python.SoShell_pick(*args)
    def getBoundingBox(*args): return HEPVis_SWIG_Python.SoShell_getBoundingBox(*args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoShell_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoShell
    __del__ = lambda self : None;
SoShell_swigregister = HEPVis_SWIG_Python.SoShell_swigregister
SoShell_swigregister(SoShell)
SoShell_getClassTypeId = HEPVis_SWIG_Python.SoShell_getClassTypeId
SoShell_getClassNodekitCatalog = HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog
SoShell_initClass = HEPVis_SWIG_Python.SoShell_initClass

class SbVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbVisitor
    __del__ = lambda self : None;
    def visit(*args): return HEPVis_SWIG_Python.SbVisitor_visit(*args)
SbVisitor_swigregister = HEPVis_SWIG_Python.SbVisitor_swigregister
SbVisitor_swigregister(SbVisitor)

class SoTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LEFT = HEPVis_SWIG_Python.SoTools_LEFT
    CENTER = HEPVis_SWIG_Python.SoTools_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTools_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTools_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTools_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTools_TOP
    getSceneGraphs = staticmethod(HEPVis_SWIG_Python.SoTools_getSceneGraphs)
    searchNode = staticmethod(HEPVis_SWIG_Python.SoTools_searchNode)
    isChildOf = staticmethod(HEPVis_SWIG_Python.SoTools_isChildOf)
    addPolygonToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addPolygonToNode)
    addBoxCoords = staticmethod(HEPVis_SWIG_Python.SoTools_addBoxCoords)
    addLinesToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addLinesToNode)
    addSegmentsToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addSegmentsToNode)
    addNurbsCurveToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode)
    addSplineCurveToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addSplineCurveToNode)
    addLagrangePolynomialCurveToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode)
    addPointsToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addPointsToNode)
    addAlignedStringToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addAlignedStringToNode)
    setKitPart = staticmethod(HEPVis_SWIG_Python.SoTools_setKitPart)
    getKitPart = staticmethod(HEPVis_SWIG_Python.SoTools_getKitPart)
    toggleKitPart = staticmethod(HEPVis_SWIG_Python.SoTools_toggleKitPart)
    setKitPartValue = staticmethod(HEPVis_SWIG_Python.SoTools_setKitPartValue)
    getKitPartValue = staticmethod(HEPVis_SWIG_Python.SoTools_getKitPartValue)
    toggleKitPartValue = staticmethod(HEPVis_SWIG_Python.SoTools_toggleKitPartValue)
    resetHighlight = staticmethod(HEPVis_SWIG_Python.SoTools_resetHighlight)
    highlight = staticmethod(HEPVis_SWIG_Python.SoTools_highlight)
    highlightName = staticmethod(HEPVis_SWIG_Python.SoTools_highlightName)
    pointAt = staticmethod(HEPVis_SWIG_Python.SoTools_pointAt)
    lookAt = staticmethod(HEPVis_SWIG_Python.SoTools_lookAt)
    write = staticmethod(HEPVis_SWIG_Python.SoTools_write)
    setManip = staticmethod(HEPVis_SWIG_Python.SoTools_setManip)
    removeManips = staticmethod(HEPVis_SWIG_Python.SoTools_removeManips)
    setManips = staticmethod(HEPVis_SWIG_Python.SoTools_setManips)
    setDraggerColor = staticmethod(HEPVis_SWIG_Python.SoTools_setDraggerColor)
    addDraggersToPolygon = staticmethod(HEPVis_SWIG_Python.SoTools_addDraggersToPolygon)
    visit = staticmethod(HEPVis_SWIG_Python.SoTools_visit)
    detectIntersection = staticmethod(HEPVis_SWIG_Python.SoTools_detectIntersection)
    count = staticmethod(HEPVis_SWIG_Python.SoTools_count)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoTools(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTools
    __del__ = lambda self : None;
SoTools_swigregister = HEPVis_SWIG_Python.SoTools_swigregister
SoTools_swigregister(SoTools)
SoTools_getSceneGraphs = HEPVis_SWIG_Python.SoTools_getSceneGraphs
SoTools_searchNode = HEPVis_SWIG_Python.SoTools_searchNode
SoTools_isChildOf = HEPVis_SWIG_Python.SoTools_isChildOf
SoTools_addPolygonToNode = HEPVis_SWIG_Python.SoTools_addPolygonToNode
SoTools_addBoxCoords = HEPVis_SWIG_Python.SoTools_addBoxCoords
SoTools_addLinesToNode = HEPVis_SWIG_Python.SoTools_addLinesToNode
SoTools_addSegmentsToNode = HEPVis_SWIG_Python.SoTools_addSegmentsToNode
SoTools_addNurbsCurveToNode = HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode
SoTools_addSplineCurveToNode = HEPVis_SWIG_Python.SoTools_addSplineCurveToNode
SoTools_addLagrangePolynomialCurveToNode = HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode
SoTools_addPointsToNode = HEPVis_SWIG_Python.SoTools_addPointsToNode
SoTools_addAlignedStringToNode = HEPVis_SWIG_Python.SoTools_addAlignedStringToNode
SoTools_setKitPart = HEPVis_SWIG_Python.SoTools_setKitPart
SoTools_getKitPart = HEPVis_SWIG_Python.SoTools_getKitPart
SoTools_toggleKitPart = HEPVis_SWIG_Python.SoTools_toggleKitPart
SoTools_setKitPartValue = HEPVis_SWIG_Python.SoTools_setKitPartValue
SoTools_getKitPartValue = HEPVis_SWIG_Python.SoTools_getKitPartValue
SoTools_toggleKitPartValue = HEPVis_SWIG_Python.SoTools_toggleKitPartValue
SoTools_resetHighlight = HEPVis_SWIG_Python.SoTools_resetHighlight
SoTools_highlight = HEPVis_SWIG_Python.SoTools_highlight
SoTools_highlightName = HEPVis_SWIG_Python.SoTools_highlightName
SoTools_pointAt = HEPVis_SWIG_Python.SoTools_pointAt
SoTools_lookAt = HEPVis_SWIG_Python.SoTools_lookAt
SoTools_write = HEPVis_SWIG_Python.SoTools_write
SoTools_setManip = HEPVis_SWIG_Python.SoTools_setManip
SoTools_removeManips = HEPVis_SWIG_Python.SoTools_removeManips
SoTools_setManips = HEPVis_SWIG_Python.SoTools_setManips
SoTools_setDraggerColor = HEPVis_SWIG_Python.SoTools_setDraggerColor
SoTools_addDraggersToPolygon = HEPVis_SWIG_Python.SoTools_addDraggersToPolygon
SoTools_visit = HEPVis_SWIG_Python.SoTools_visit
SoTools_detectIntersection = HEPVis_SWIG_Python.SoTools_detectIntersection
SoTools_count = HEPVis_SWIG_Python.SoTools_count

class SoStyleCache(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoStyleCache(*args)
        try: self.this.append(this)
        except: self.this = this
    cachedName = staticmethod(HEPVis_SWIG_Python.SoStyleCache_cachedName)
    def getMaterial(*args): return HEPVis_SWIG_Python.SoStyleCache_getMaterial(*args)
    def getHighlightMaterial(*args): return HEPVis_SWIG_Python.SoStyleCache_getHighlightMaterial(*args)
    def getLineStyle(*args): return HEPVis_SWIG_Python.SoStyleCache_getLineStyle(*args)
    def getFilled(*args): return HEPVis_SWIG_Python.SoStyleCache_getFilled(*args)
    def getPoints(*args): return HEPVis_SWIG_Python.SoStyleCache_getPoints(*args)
    def getLightModelPhong(*args): return HEPVis_SWIG_Python.SoStyleCache_getLightModelPhong(*args)
    def getLightModelBaseColor(*args): return HEPVis_SWIG_Python.SoStyleCache_getLightModelBaseColor(*args)
    def getResetTransform(*args): return HEPVis_SWIG_Python.SoStyleCache_getResetTransform(*args)
    def getNormalBindingOverall(*args): return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingOverall(*args)
    def getNormalBindingPerFace(*args): return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingPerFace(*args)
    def getNormalBindingPerFaceIndexed(*args): return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingPerFaceIndexed(*args)
    def getNormalZ(*args): return HEPVis_SWIG_Python.SoStyleCache_getNormalZ(*args)
    def getMaterialBindingOverall(*args): return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingOverall(*args)
    def getMaterialBindingPerFace(*args): return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingPerFace(*args)
    def getMaterialBindingPerFaceIndexed(*args): return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingPerFaceIndexed(*args)
    def clearCache(*args): return HEPVis_SWIG_Python.SoStyleCache_clearCache(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStyleCache
    __del__ = lambda self : None;
SoStyleCache_swigregister = HEPVis_SWIG_Python.SoStyleCache_swigregister
SoStyleCache_swigregister(SoStyleCache)
SoStyleCache_cachedName = HEPVis_SWIG_Python.SoStyleCache_cachedName

HEPVisUtils_initClasses = HEPVis_SWIG_Python.HEPVisUtils_initClasses
HEPVisGeometry_initClasses = HEPVis_SWIG_Python.HEPVisGeometry_initClasses
HEPVisDetector_initClasses = HEPVis_SWIG_Python.HEPVisDetector_initClasses
HEPVisPlotter_initClasses = HEPVis_SWIG_Python.HEPVisPlotter_initClasses
HEPVisGUI_initClasses = HEPVis_SWIG_Python.HEPVisGUI_initClasses
SoPlotter_initClasses = HEPVis_SWIG_Python.SoPlotter_initClasses
initClasses = HEPVis_SWIG_Python.initClasses
class base_histo_duidd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def title(*args): return HEPVis_SWIG_Python.base_histo_duidd_title(*args)
    def set_title(*args): return HEPVis_SWIG_Python.base_histo_duidd_set_title(*args)
    def dimension(*args): return HEPVis_SWIG_Python.base_histo_duidd_dimension(*args)
    def entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_entries(*args)
    def all_entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_all_entries(*args)
    def extra_entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_extra_entries(*args)
    def equivalent_bin_entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_equivalent_bin_entries(*args)
    def sum_bin_heights(*args): return HEPVis_SWIG_Python.base_histo_duidd_sum_bin_heights(*args)
    def sum_all_bin_heights(*args): return HEPVis_SWIG_Python.base_histo_duidd_sum_all_bin_heights(*args)
    def sum_extra_bin_heights(*args): return HEPVis_SWIG_Python.base_histo_duidd_sum_extra_bin_heights(*args)
    def min_bin_height(*args): return HEPVis_SWIG_Python.base_histo_duidd_min_bin_height(*args)
    def max_bin_height(*args): return HEPVis_SWIG_Python.base_histo_duidd_max_bin_height(*args)
    def get_entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_entries(*args)
    def get_Sw(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_Sw(*args)
    def get_Sw2(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_Sw2(*args)
    def get_ith_axis_Sxw(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_ith_axis_Sxw(*args)
    def get_ith_axis_Sx2w(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_ith_axis_Sx2w(*args)
    def get_all_entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_all_entries(*args)
    def get_indices(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_indices(*args)
    def is_out(*args): return HEPVis_SWIG_Python.base_histo_duidd_is_out(*args)
    def get_offset(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_offset(*args)
    def bins_entries(*args): return HEPVis_SWIG_Python.base_histo_duidd_bins_entries(*args)
    def bins_sum_w(*args): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_w(*args)
    def bins_sum_w2(*args): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_w2(*args)
    def bins_sum_xw(*args): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_xw(*args)
    def bins_sum_x2w(*args): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_x2w(*args)
    def get_axis(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_axis(*args)
    def get_bins(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_bins(*args)
    def get_title(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_title(*args)
    def get_dimension(*args): return HEPVis_SWIG_Python.base_histo_duidd_get_dimension(*args)
    def is_valid(*args): return HEPVis_SWIG_Python.base_histo_duidd_is_valid(*args)
    def annotations(*args): return HEPVis_SWIG_Python.base_histo_duidd_annotations(*args)
    def add_annotation(*args): return HEPVis_SWIG_Python.base_histo_duidd_add_annotation(*args)
    def annotation(*args): return HEPVis_SWIG_Python.base_histo_duidd_annotation(*args)
base_histo_duidd_swigregister = HEPVis_SWIG_Python.base_histo_duidd_swigregister
base_histo_duidd_swigregister(base_histo_duidd)

class b1_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def bin_error(*args): return HEPVis_SWIG_Python.b1_duidd_bin_error(*args)
    def update_fast_getters(*args): return HEPVis_SWIG_Python.b1_duidd_update_fast_getters(*args)
    def coord_to_index(*args): return HEPVis_SWIG_Python.b1_duidd_coord_to_index(*args)
    def mean(*args): return HEPVis_SWIG_Python.b1_duidd_mean(*args)
    def rms(*args): return HEPVis_SWIG_Python.b1_duidd_rms(*args)
    def bin_entries(*args): return HEPVis_SWIG_Python.b1_duidd_bin_entries(*args)
    def bin_Sw(*args): return HEPVis_SWIG_Python.b1_duidd_bin_Sw(*args)
    def bin_Sw2(*args): return HEPVis_SWIG_Python.b1_duidd_bin_Sw2(*args)
    def bin_Sxw(*args): return HEPVis_SWIG_Python.b1_duidd_bin_Sxw(*args)
    def bin_Sx2w(*args): return HEPVis_SWIG_Python.b1_duidd_bin_Sx2w(*args)
    def bin_height(*args): return HEPVis_SWIG_Python.b1_duidd_bin_height(*args)
    def bin_center(*args): return HEPVis_SWIG_Python.b1_duidd_bin_center(*args)
    def bin_mean(*args): return HEPVis_SWIG_Python.b1_duidd_bin_mean(*args)
    def bin_rms(*args): return HEPVis_SWIG_Python.b1_duidd_bin_rms(*args)
    def axis(*args): return HEPVis_SWIG_Python.b1_duidd_axis(*args)
    def hprint(*args): return HEPVis_SWIG_Python.b1_duidd_hprint(*args)
    def configure(*args): return HEPVis_SWIG_Python.b1_duidd_configure(*args)
b1_duidd_swigregister = HEPVis_SWIG_Python.b1_duidd_swigregister
b1_duidd_swigregister(b1_duidd)

class b2_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def bin_error(*args): return HEPVis_SWIG_Python.b2_duidd_bin_error(*args)
    def update_fast_getters(*args): return HEPVis_SWIG_Python.b2_duidd_update_fast_getters(*args)
    def mean_x(*args): return HEPVis_SWIG_Python.b2_duidd_mean_x(*args)
    def mean_y(*args): return HEPVis_SWIG_Python.b2_duidd_mean_y(*args)
    def rms_x(*args): return HEPVis_SWIG_Python.b2_duidd_rms_x(*args)
    def rms_y(*args): return HEPVis_SWIG_Python.b2_duidd_rms_y(*args)
    def coord_to_index_x(*args): return HEPVis_SWIG_Python.b2_duidd_coord_to_index_x(*args)
    def coord_to_index_y(*args): return HEPVis_SWIG_Python.b2_duidd_coord_to_index_y(*args)
    def bin_entries(*args): return HEPVis_SWIG_Python.b2_duidd_bin_entries(*args)
    def bin_Sw(*args): return HEPVis_SWIG_Python.b2_duidd_bin_Sw(*args)
    def bin_Sw2(*args): return HEPVis_SWIG_Python.b2_duidd_bin_Sw2(*args)
    def bin_Sxw(*args): return HEPVis_SWIG_Python.b2_duidd_bin_Sxw(*args)
    def bin_Sx2w(*args): return HEPVis_SWIG_Python.b2_duidd_bin_Sx2w(*args)
    def bin_Syw(*args): return HEPVis_SWIG_Python.b2_duidd_bin_Syw(*args)
    def bin_Sy2w(*args): return HEPVis_SWIG_Python.b2_duidd_bin_Sy2w(*args)
    def bin_height(*args): return HEPVis_SWIG_Python.b2_duidd_bin_height(*args)
    def bin_center_x(*args): return HEPVis_SWIG_Python.b2_duidd_bin_center_x(*args)
    def bin_center_y(*args): return HEPVis_SWIG_Python.b2_duidd_bin_center_y(*args)
    def bin_mean_x(*args): return HEPVis_SWIG_Python.b2_duidd_bin_mean_x(*args)
    def bin_mean_y(*args): return HEPVis_SWIG_Python.b2_duidd_bin_mean_y(*args)
    def bin_rms_x(*args): return HEPVis_SWIG_Python.b2_duidd_bin_rms_x(*args)
    def bin_rms_y(*args): return HEPVis_SWIG_Python.b2_duidd_bin_rms_y(*args)
    def axis_x(*args): return HEPVis_SWIG_Python.b2_duidd_axis_x(*args)
    def axis_y(*args): return HEPVis_SWIG_Python.b2_duidd_axis_y(*args)
    def bin_entries_x(*args): return HEPVis_SWIG_Python.b2_duidd_bin_entries_x(*args)
    def bin_height_x(*args): return HEPVis_SWIG_Python.b2_duidd_bin_height_x(*args)
    def bin_entries_y(*args): return HEPVis_SWIG_Python.b2_duidd_bin_entries_y(*args)
    def bin_height_y(*args): return HEPVis_SWIG_Python.b2_duidd_bin_height_y(*args)
    def hprint(*args): return HEPVis_SWIG_Python.b2_duidd_hprint(*args)
    def configure(*args): return HEPVis_SWIG_Python.b2_duidd_configure(*args)
b2_duidd_swigregister = HEPVis_SWIG_Python.b2_duidd_swigregister
b2_duidd_swigregister(b2_duidd)

class h1_duidd(b1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return HEPVis_SWIG_Python.h1_duidd_bin_error(*args)
    def scale(*args): return HEPVis_SWIG_Python.h1_duidd_scale(*args)
    def copy_from_data(*args): return HEPVis_SWIG_Python.h1_duidd_copy_from_data(*args)
    def get_histo_data(*args): return HEPVis_SWIG_Python.h1_duidd_get_histo_data(*args)
    def reset(*args): return HEPVis_SWIG_Python.h1_duidd_reset(*args)
    def fill(*args): return HEPVis_SWIG_Python.h1_duidd_fill(*args)
    def add(*args): return HEPVis_SWIG_Python.h1_duidd_add(*args)
    def subtract(*args): return HEPVis_SWIG_Python.h1_duidd_subtract(*args)
    def multiply(*args): return HEPVis_SWIG_Python.h1_duidd_multiply(*args)
    def divide(*args): return HEPVis_SWIG_Python.h1_duidd_divide(*args)
    def gather_bins(*args): return HEPVis_SWIG_Python.h1_duidd_gather_bins(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h1_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h1_duidd_swigregister = HEPVis_SWIG_Python.h1_duidd_swigregister
h1_duidd_swigregister(h1_duidd)

class h2_duidd(b2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return HEPVis_SWIG_Python.h2_duidd_bin_error(*args)
    def scale(*args): return HEPVis_SWIG_Python.h2_duidd_scale(*args)
    def copy_from_data(*args): return HEPVis_SWIG_Python.h2_duidd_copy_from_data(*args)
    def get_histo_data(*args): return HEPVis_SWIG_Python.h2_duidd_get_histo_data(*args)
    def reset(*args): return HEPVis_SWIG_Python.h2_duidd_reset(*args)
    def fill(*args): return HEPVis_SWIG_Python.h2_duidd_fill(*args)
    def add(*args): return HEPVis_SWIG_Python.h2_duidd_add(*args)
    def subtract(*args): return HEPVis_SWIG_Python.h2_duidd_subtract(*args)
    def multiply(*args): return HEPVis_SWIG_Python.h2_duidd_multiply(*args)
    def divide(*args): return HEPVis_SWIG_Python.h2_duidd_divide(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h2_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h2_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h2_duidd_swigregister = HEPVis_SWIG_Python.h2_duidd_swigregister
h2_duidd_swigregister(h2_duidd)

class p1_duiddd(b1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return HEPVis_SWIG_Python.p1_duiddd_bin_error(*args)
    def multiply(*args): return HEPVis_SWIG_Python.p1_duiddd_multiply(*args)
    def scale(*args): return HEPVis_SWIG_Python.p1_duiddd_scale(*args)
    def bin_Svw(*args): return HEPVis_SWIG_Python.p1_duiddd_bin_Svw(*args)
    def bin_Sv2w(*args): return HEPVis_SWIG_Python.p1_duiddd_bin_Sv2w(*args)
    def reset(*args): return HEPVis_SWIG_Python.p1_duiddd_reset(*args)
    def copy_from_data(*args): return HEPVis_SWIG_Python.p1_duiddd_copy_from_data(*args)
    def get_histo_data(*args): return HEPVis_SWIG_Python.p1_duiddd_get_histo_data(*args)
    def fill(*args): return HEPVis_SWIG_Python.p1_duiddd_fill(*args)
    def bin_rms_value(*args): return HEPVis_SWIG_Python.p1_duiddd_bin_rms_value(*args)
    def add(*args): return HEPVis_SWIG_Python.p1_duiddd_add(*args)
    def subtract(*args): return HEPVis_SWIG_Python.p1_duiddd_subtract(*args)
    def gather_bins(*args): return HEPVis_SWIG_Python.p1_duiddd_gather_bins(*args)
    def cut_v(*args): return HEPVis_SWIG_Python.p1_duiddd_cut_v(*args)
    def min_v(*args): return HEPVis_SWIG_Python.p1_duiddd_min_v(*args)
    def max_v(*args): return HEPVis_SWIG_Python.p1_duiddd_max_v(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p1_duiddd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p1_duiddd(*args)
        try: self.this.append(this)
        except: self.this = this
    def bins_sum_vw(*args): return HEPVis_SWIG_Python.p1_duiddd_bins_sum_vw(*args)
    def bins_sum_v2w(*args): return HEPVis_SWIG_Python.p1_duiddd_bins_sum_v2w(*args)
p1_duiddd_swigregister = HEPVis_SWIG_Python.p1_duiddd_swigregister
p1_duiddd_swigregister(p1_duiddd)

class p2_duiddd(b2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(*args): return HEPVis_SWIG_Python.p2_duiddd_bin_error(*args)
    def multiply(*args): return HEPVis_SWIG_Python.p2_duiddd_multiply(*args)
    def scale(*args): return HEPVis_SWIG_Python.p2_duiddd_scale(*args)
    def bin_Svw(*args): return HEPVis_SWIG_Python.p2_duiddd_bin_Svw(*args)
    def bin_Sv2w(*args): return HEPVis_SWIG_Python.p2_duiddd_bin_Sv2w(*args)
    def reset(*args): return HEPVis_SWIG_Python.p2_duiddd_reset(*args)
    def copy_from_data(*args): return HEPVis_SWIG_Python.p2_duiddd_copy_from_data(*args)
    def get_histo_data(*args): return HEPVis_SWIG_Python.p2_duiddd_get_histo_data(*args)
    def fill(*args): return HEPVis_SWIG_Python.p2_duiddd_fill(*args)
    def bin_rms_value(*args): return HEPVis_SWIG_Python.p2_duiddd_bin_rms_value(*args)
    def add(*args): return HEPVis_SWIG_Python.p2_duiddd_add(*args)
    def subtract(*args): return HEPVis_SWIG_Python.p2_duiddd_subtract(*args)
    def cut_v(*args): return HEPVis_SWIG_Python.p2_duiddd_cut_v(*args)
    def min_v(*args): return HEPVis_SWIG_Python.p2_duiddd_min_v(*args)
    def max_v(*args): return HEPVis_SWIG_Python.p2_duiddd_max_v(*args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p2_duiddd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p2_duiddd(*args)
        try: self.this.append(this)
        except: self.this = this
    def bins_sum_vw(*args): return HEPVis_SWIG_Python.p2_duiddd_bins_sum_vw(*args)
    def bins_sum_v2w(*args): return HEPVis_SWIG_Python.p2_duiddd_bins_sum_v2w(*args)
p2_duiddd_swigregister = HEPVis_SWIG_Python.p2_duiddd_swigregister
p2_duiddd_swigregister(p2_duiddd)

snpf = HEPVis_SWIG_Python.snpf
sprintf = HEPVis_SWIG_Python.sprintf
is_upper = HEPVis_SWIG_Python.is_upper
is_lower = HEPVis_SWIG_Python.is_lower
is_digit = HEPVis_SWIG_Python.is_digit
is_letter = HEPVis_SWIG_Python.is_letter
is_printable = HEPVis_SWIG_Python.is_printable
int32_format = HEPVis_SWIG_Python.int32_format
int64_format = HEPVis_SWIG_Python.int64_format
uint32_format = HEPVis_SWIG_Python.uint32_format
uint64_format = HEPVis_SWIG_Python.uint64_format
uint32_mx = HEPVis_SWIG_Python.uint32_mx
uint64_mx = HEPVis_SWIG_Python.uint64_mx
class fits_bit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m_c = _swig_property(HEPVis_SWIG_Python.fits_bit_m_c_get, HEPVis_SWIG_Python.fits_bit_m_c_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_fits_bit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_fits_bit
    __del__ = lambda self : None;
fits_bit_swigregister = HEPVis_SWIG_Python.fits_bit_swigregister
fits_bit_swigregister(fits_bit)
words = HEPVis_SWIG_Python.words

class csv_time(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    m_l = _swig_property(HEPVis_SWIG_Python.csv_time_m_l_get, HEPVis_SWIG_Python.csv_time_m_l_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_csv_time(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_csv_time
    __del__ = lambda self : None;
csv_time_swigregister = HEPVis_SWIG_Python.csv_time_swigregister
csv_time_swigregister(csv_time)

size_char = HEPVis_SWIG_Python.size_char
size_short = HEPVis_SWIG_Python.size_short
size_int = HEPVis_SWIG_Python.size_int
size_int64 = HEPVis_SWIG_Python.size_int64
size_float = HEPVis_SWIG_Python.size_float
size_double = HEPVis_SWIG_Python.size_double
tosx = HEPVis_SWIG_Python.tosx
d2s = HEPVis_SWIG_Python.d2s
soutd = HEPVis_SWIG_Python.soutd
class h1d2plot(SbPlottableBins1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(*args): return HEPVis_SWIG_Python.h1d2plot_isValid(*args)
    def getName(*args): return HEPVis_SWIG_Python.h1d2plot_getName(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.h1d2plot_getLegend(*args)
    def cast(*args): return HEPVis_SWIG_Python.h1d2plot_cast(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.h1d2plot_getDimension(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.h1d2plot_getLabel(*args)
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.h1d2plot_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBins(*args): return HEPVis_SWIG_Python.h1d2plot_getAxisNumberOfBins(*args)
    def getAxisMinimum(*args): return HEPVis_SWIG_Python.h1d2plot_getAxisMinimum(*args)
    def getAxisMaximum(*args): return HEPVis_SWIG_Python.h1d2plot_getAxisMaximum(*args)
    def getBinLowerEdge(*args): return HEPVis_SWIG_Python.h1d2plot_getBinLowerEdge(*args)
    def getBinUpperEdge(*args): return HEPVis_SWIG_Python.h1d2plot_getBinUpperEdge(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.h1d2plot_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.h1d2plot_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.h1d2plot_getBinBar(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.h1d2plot_getInfos(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h1d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1d2plot
    __del__ = lambda self : None;
h1d2plot_swigregister = HEPVis_SWIG_Python.h1d2plot_swigregister
h1d2plot_swigregister(h1d2plot)
tos = HEPVis_SWIG_Python.tos
destTo = HEPVis_SWIG_Python.destTo

class h2d2plot(SbPlottableBins2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(*args): return HEPVis_SWIG_Python.h2d2plot_isValid(*args)
    def getName(*args): return HEPVis_SWIG_Python.h2d2plot_getName(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.h2d2plot_getLegend(*args)
    def cast(*args): return HEPVis_SWIG_Python.h2d2plot_cast(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.h2d2plot_getDimension(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.h2d2plot_getLabel(*args)
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.h2d2plot_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBinsX(*args): return HEPVis_SWIG_Python.h2d2plot_getAxisNumberOfBinsX(*args)
    def getAxisNumberOfBinsY(*args): return HEPVis_SWIG_Python.h2d2plot_getAxisNumberOfBinsY(*args)
    def getAxisMinimumX(*args): return HEPVis_SWIG_Python.h2d2plot_getAxisMinimumX(*args)
    def getAxisMaximumX(*args): return HEPVis_SWIG_Python.h2d2plot_getAxisMaximumX(*args)
    def getAxisMinimumY(*args): return HEPVis_SWIG_Python.h2d2plot_getAxisMinimumY(*args)
    def getAxisMaximumY(*args): return HEPVis_SWIG_Python.h2d2plot_getAxisMaximumY(*args)
    def getBinLowerEdgeX(*args): return HEPVis_SWIG_Python.h2d2plot_getBinLowerEdgeX(*args)
    def getBinUpperEdgeX(*args): return HEPVis_SWIG_Python.h2d2plot_getBinUpperEdgeX(*args)
    def getBinLowerEdgeY(*args): return HEPVis_SWIG_Python.h2d2plot_getBinLowerEdgeY(*args)
    def getBinUpperEdgeY(*args): return HEPVis_SWIG_Python.h2d2plot_getBinUpperEdgeY(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.h2d2plot_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.h2d2plot_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.h2d2plot_getBinBar(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.h2d2plot_getInfos(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h2d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h2d2plot
    __del__ = lambda self : None;
h2d2plot_swigregister = HEPVis_SWIG_Python.h2d2plot_swigregister
h2d2plot_swigregister(h2d2plot)

class p1d2plot(SbPlottableBins1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(*args): return HEPVis_SWIG_Python.p1d2plot_isValid(*args)
    def getName(*args): return HEPVis_SWIG_Python.p1d2plot_getName(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.p1d2plot_getLegend(*args)
    def cast(*args): return HEPVis_SWIG_Python.p1d2plot_cast(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.p1d2plot_getDimension(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.p1d2plot_getLabel(*args)
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.p1d2plot_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBins(*args): return HEPVis_SWIG_Python.p1d2plot_getAxisNumberOfBins(*args)
    def getAxisMinimum(*args): return HEPVis_SWIG_Python.p1d2plot_getAxisMinimum(*args)
    def getAxisMaximum(*args): return HEPVis_SWIG_Python.p1d2plot_getAxisMaximum(*args)
    def getBinLowerEdge(*args): return HEPVis_SWIG_Python.p1d2plot_getBinLowerEdge(*args)
    def getBinUpperEdge(*args): return HEPVis_SWIG_Python.p1d2plot_getBinUpperEdge(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.p1d2plot_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.p1d2plot_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.p1d2plot_getBinBar(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.p1d2plot_getInfos(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p1d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p1d2plot
    __del__ = lambda self : None;
p1d2plot_swigregister = HEPVis_SWIG_Python.p1d2plot_swigregister
p1d2plot_swigregister(p1d2plot)

class p2d2plot(SbPlottableBins2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(*args): return HEPVis_SWIG_Python.p2d2plot_isValid(*args)
    def getName(*args): return HEPVis_SWIG_Python.p2d2plot_getName(*args)
    def getLegend(*args): return HEPVis_SWIG_Python.p2d2plot_getLegend(*args)
    def cast(*args): return HEPVis_SWIG_Python.p2d2plot_cast(*args)
    def getDimension(*args): return HEPVis_SWIG_Python.p2d2plot_getDimension(*args)
    def getLabel(*args): return HEPVis_SWIG_Python.p2d2plot_getLabel(*args)
    def getBinsSumOfWeightsRange(*args): return HEPVis_SWIG_Python.p2d2plot_getBinsSumOfWeightsRange(*args)
    def getAxisNumberOfBinsX(*args): return HEPVis_SWIG_Python.p2d2plot_getAxisNumberOfBinsX(*args)
    def getAxisNumberOfBinsY(*args): return HEPVis_SWIG_Python.p2d2plot_getAxisNumberOfBinsY(*args)
    def getAxisMinimumX(*args): return HEPVis_SWIG_Python.p2d2plot_getAxisMinimumX(*args)
    def getAxisMaximumX(*args): return HEPVis_SWIG_Python.p2d2plot_getAxisMaximumX(*args)
    def getAxisMinimumY(*args): return HEPVis_SWIG_Python.p2d2plot_getAxisMinimumY(*args)
    def getAxisMaximumY(*args): return HEPVis_SWIG_Python.p2d2plot_getAxisMaximumY(*args)
    def getBinLowerEdgeX(*args): return HEPVis_SWIG_Python.p2d2plot_getBinLowerEdgeX(*args)
    def getBinUpperEdgeX(*args): return HEPVis_SWIG_Python.p2d2plot_getBinUpperEdgeX(*args)
    def getBinLowerEdgeY(*args): return HEPVis_SWIG_Python.p2d2plot_getBinLowerEdgeY(*args)
    def getBinUpperEdgeY(*args): return HEPVis_SWIG_Python.p2d2plot_getBinUpperEdgeY(*args)
    def getBinNumberOfEntries(*args): return HEPVis_SWIG_Python.p2d2plot_getBinNumberOfEntries(*args)
    def getBinSumOfWeights(*args): return HEPVis_SWIG_Python.p2d2plot_getBinSumOfWeights(*args)
    def getBinBar(*args): return HEPVis_SWIG_Python.p2d2plot_getBinBar(*args)
    def getInfos(*args): return HEPVis_SWIG_Python.p2d2plot_getInfos(*args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p2d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p2d2plot
    __del__ = lambda self : None;
p2d2plot_swigregister = HEPVis_SWIG_Python.p2d2plot_swigregister
p2d2plot_swigregister(p2d2plot)

class h1d2plot_cp(h1d2plot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h1d2plot_cp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1d2plot_cp
    __del__ = lambda self : None;
h1d2plot_cp_swigregister = HEPVis_SWIG_Python.h1d2plot_cp_swigregister
h1d2plot_cp_swigregister(h1d2plot_cp)

cast_SoRegion = HEPVis_SWIG_Python.cast_SoRegion
cast_SoPage = HEPVis_SWIG_Python.cast_SoPage
import CoinPython as Inventor
for x in locals().values():
  if isinstance(x, type) and issubclass(x, Inventor.SoFieldContainer):
    for name, thing in x.__dict__.items():
      if isinstance(thing, property):
        delattr(x, name)



