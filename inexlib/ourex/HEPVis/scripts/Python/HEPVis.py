# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import HEPVis_SWIG_Python
else:
    import HEPVis_SWIG_Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class charp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.charp_swiginit(self, HEPVis_SWIG_Python.new_charp())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_charp

    def assign(self, value):
        return HEPVis_SWIG_Python.charp_assign(self, value)

    def value(self):
        return HEPVis_SWIG_Python.charp_value(self)

    def cast(self):
        return HEPVis_SWIG_Python.charp_cast(self)

    @staticmethod
    def frompointer(t):
        return HEPVis_SWIG_Python.charp_frompointer(t)

# Register charp in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.charp_swigregister(charp)
cast = HEPVis_SWIG_Python.cast

def charp_frompointer(t):
    return HEPVis_SWIG_Python.charp_frompointer(t)

class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.intp_swiginit(self, HEPVis_SWIG_Python.new_intp())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_intp

    def assign(self, value):
        return HEPVis_SWIG_Python.intp_assign(self, value)

    def value(self):
        return HEPVis_SWIG_Python.intp_value(self)

    def cast(self):
        return HEPVis_SWIG_Python.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return HEPVis_SWIG_Python.intp_frompointer(t)

# Register intp in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.intp_swigregister(intp)

def intp_frompointer(t):
    return HEPVis_SWIG_Python.intp_frompointer(t)

class longp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.longp_swiginit(self, HEPVis_SWIG_Python.new_longp())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_longp

    def assign(self, value):
        return HEPVis_SWIG_Python.longp_assign(self, value)

    def value(self):
        return HEPVis_SWIG_Python.longp_value(self)

    def cast(self):
        return HEPVis_SWIG_Python.longp_cast(self)

    @staticmethod
    def frompointer(t):
        return HEPVis_SWIG_Python.longp_frompointer(t)

# Register longp in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.longp_swigregister(longp)

def longp_frompointer(t):
    return HEPVis_SWIG_Python.longp_frompointer(t)

class floatp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.floatp_swiginit(self, HEPVis_SWIG_Python.new_floatp())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_floatp

    def assign(self, value):
        return HEPVis_SWIG_Python.floatp_assign(self, value)

    def value(self):
        return HEPVis_SWIG_Python.floatp_value(self)

    def cast(self):
        return HEPVis_SWIG_Python.floatp_cast(self)

    @staticmethod
    def frompointer(t):
        return HEPVis_SWIG_Python.floatp_frompointer(t)

# Register floatp in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.floatp_swigregister(floatp)

def floatp_frompointer(t):
    return HEPVis_SWIG_Python.floatp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.doublep_swiginit(self, HEPVis_SWIG_Python.new_doublep())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_doublep

    def assign(self, value):
        return HEPVis_SWIG_Python.doublep_assign(self, value)

    def value(self):
        return HEPVis_SWIG_Python.doublep_value(self)

    def cast(self):
        return HEPVis_SWIG_Python.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return HEPVis_SWIG_Python.doublep_frompointer(t)

# Register doublep in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.doublep_swigregister(doublep)

def doublep_frompointer(t):
    return HEPVis_SWIG_Python.doublep_frompointer(t)

FALSE = HEPVis_SWIG_Python.FALSE
TRUE = HEPVis_SWIG_Python.TRUE
HAVE_INTTYPES_H = HEPVis_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = HEPVis_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = HEPVis_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = HEPVis_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = HEPVis_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = HEPVis_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = HEPVis_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = HEPVis_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = HEPVis_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = HEPVis_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = HEPVis_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = HEPVis_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = HEPVis_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = HEPVis_SWIG_Python.HAVE_UINTPTR_T
M_E = HEPVis_SWIG_Python.M_E
M_LOG2E = HEPVis_SWIG_Python.M_LOG2E
M_LOG10E = HEPVis_SWIG_Python.M_LOG10E
M_LN2 = HEPVis_SWIG_Python.M_LN2
M_LN10 = HEPVis_SWIG_Python.M_LN10
M_PI = HEPVis_SWIG_Python.M_PI
M_TWOPI = HEPVis_SWIG_Python.M_TWOPI
M_PI_2 = HEPVis_SWIG_Python.M_PI_2
M_PI_4 = HEPVis_SWIG_Python.M_PI_4
M_3PI_4 = HEPVis_SWIG_Python.M_3PI_4
M_SQRTPI = HEPVis_SWIG_Python.M_SQRTPI
M_1_PI = HEPVis_SWIG_Python.M_1_PI
M_2_PI = HEPVis_SWIG_Python.M_2_PI
M_2_SQRTPI = HEPVis_SWIG_Python.M_2_SQRTPI
M_SQRT2 = HEPVis_SWIG_Python.M_SQRT2
M_SQRT1_2 = HEPVis_SWIG_Python.M_SQRT1_2
M_LN2LO = HEPVis_SWIG_Python.M_LN2LO
M_LN2HI = HEPVis_SWIG_Python.M_LN2HI
M_SQRT3 = HEPVis_SWIG_Python.M_SQRT3
M_IVLN10 = HEPVis_SWIG_Python.M_IVLN10
M_LOG2_E = HEPVis_SWIG_Python.M_LOG2_E
M_INVLN2 = HEPVis_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = HEPVis_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = HEPVis_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = HEPVis_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = HEPVis_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = HEPVis_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = HEPVis_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbDict_swiginit(self, HEPVis_SWIG_Python.new_SbDict(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDict

    def applyToAll(self, *args):
        return HEPVis_SWIG_Python.SbDict_applyToAll(self, *args)

    def clear(self):
        return HEPVis_SWIG_Python.SbDict_clear(self)

    def enter(self, key, value):
        return HEPVis_SWIG_Python.SbDict_enter(self, key, value)

    def find(self, key, value):
        return HEPVis_SWIG_Python.SbDict_find(self, key, value)

    def makePList(self, keys, values):
        return HEPVis_SWIG_Python.SbDict_makePList(self, keys, values)

    def remove(self, key):
        return HEPVis_SWIG_Python.SbDict_remove(self, key)

    def setHashingFunction(self, func):
        return HEPVis_SWIG_Python.SbDict_setHashingFunction(self, func)

# Register SbDict in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbDict_swigregister(SbDict)

class SoType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromName(name):
        return HEPVis_SWIG_Python.SoType_fromName(name)

    def getName(self):
        return HEPVis_SWIG_Python.SoType_getName(self)

    def getParent(self):
        return HEPVis_SWIG_Python.SoType_getParent(self)

    def isDerivedFrom(self, type):
        return HEPVis_SWIG_Python.SoType_isDerivedFrom(self, type)

    @staticmethod
    def getAllDerivedFrom(type, list):
        return HEPVis_SWIG_Python.SoType_getAllDerivedFrom(type, list)

    def canCreateInstance(self):
        return HEPVis_SWIG_Python.SoType_canCreateInstance(self)

    def getData(self):
        return HEPVis_SWIG_Python.SoType_getData(self)

    def getKey(self):
        return HEPVis_SWIG_Python.SoType_getKey(self)

    def __eq__(self, type):
        return HEPVis_SWIG_Python.SoType___eq__(self, type)

    def __ne__(self, type):
        return HEPVis_SWIG_Python.SoType___ne__(self, type)

    def __lt__(self, type):
        return HEPVis_SWIG_Python.SoType___lt__(self, type)

    def __le__(self, type):
        return HEPVis_SWIG_Python.SoType___le__(self, type)

    def __ge__(self, type):
        return HEPVis_SWIG_Python.SoType___ge__(self, type)

    def __gt__(self, type):
        return HEPVis_SWIG_Python.SoType___gt__(self, type)

    @staticmethod
    def init():
        return HEPVis_SWIG_Python.SoType_init()

    @staticmethod
    def fromKey(key):
        return HEPVis_SWIG_Python.SoType_fromKey(key)

    @staticmethod
    def badType():
        return HEPVis_SWIG_Python.SoType_badType()

    def isBad(self):
        return HEPVis_SWIG_Python.SoType_isBad(self)

    def makeInternal(self):
        return HEPVis_SWIG_Python.SoType_makeInternal(self)

    def isInternal(self):
        return HEPVis_SWIG_Python.SoType_isInternal(self)

    @staticmethod
    def getNumTypes():
        return HEPVis_SWIG_Python.SoType_getNumTypes()

    def getInstantiationMethod(self):
        return HEPVis_SWIG_Python.SoType_getInstantiationMethod(self)

    def createInstance(self):
        return HEPVis_SWIG_Python.SoType_createInstance(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoType_swiginit(self, HEPVis_SWIG_Python.new_SoType())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoType

# Register SoType in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoType_swigregister(SoType)

def SoType_fromName(name):
    return HEPVis_SWIG_Python.SoType_fromName(name)

def SoType_getAllDerivedFrom(type, list):
    return HEPVis_SWIG_Python.SoType_getAllDerivedFrom(type, list)

def SoType_init():
    return HEPVis_SWIG_Python.SoType_init()

def SoType_fromKey(key):
    return HEPVis_SWIG_Python.SoType_fromKey(key)

def SoType_badType():
    return HEPVis_SWIG_Python.SoType_badType()

def SoType_getNumTypes():
    return HEPVis_SWIG_Python.SoType_getNumTypes()

class SbVec2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbVec2s_swiginit(self, HEPVis_SWIG_Python.new_SbVec2s(*args))

    def dot(self, v):
        return HEPVis_SWIG_Python.SbVec2s_dot(self, v)

    def getValue(self):
        return HEPVis_SWIG_Python.SbVec2s_getValue(self)

    def negate(self):
        return HEPVis_SWIG_Python.SbVec2s_negate(self)

    def setValue(self, *args):
        return HEPVis_SWIG_Python.SbVec2s_setValue(self, *args)

    def __imul__(self, *args):
        return HEPVis_SWIG_Python.SbVec2s___imul__(self, *args)

    def __itruediv__(self, *args):
        return HEPVis_SWIG_Python.SbVec2s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return HEPVis_SWIG_Python.SbVec2s___iadd__(self, u)

    def __isub__(self, u):
        return HEPVis_SWIG_Python.SbVec2s___isub__(self, u)

    def __neg__(self):
        return HEPVis_SWIG_Python.SbVec2s___neg__(self)

    def output(self, fp):
        return HEPVis_SWIG_Python.SbVec2s_output(self, fp)

    def __add__(self, u):
        return HEPVis_SWIG_Python.SbVec2s___add__(self, u)

    def __sub__(self, u):
        return HEPVis_SWIG_Python.SbVec2s___sub__(self, u)

    def __mul__(self, d):
        return HEPVis_SWIG_Python.SbVec2s___mul__(self, d)

    def __rmul__(self, d):
        return HEPVis_SWIG_Python.SbVec2s___rmul__(self, d)

    def __div__(self, d):
        return HEPVis_SWIG_Python.SbVec2s___div__(self, d)

    def __eq__(self, u):
        return HEPVis_SWIG_Python.SbVec2s___eq__(self, u)

    def __nq__(self, u):
        return HEPVis_SWIG_Python.SbVec2s___nq__(self, u)

    def __getitem__(self, i):
        return HEPVis_SWIG_Python.SbVec2s___getitem__(self, i)

    def __setitem__(self, i, value):
        return HEPVis_SWIG_Python.SbVec2s___setitem__(self, i, value)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbVec2s

# Register SbVec2s in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbPList_swiginit(self, HEPVis_SWIG_Python.new_SbPList(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPList

    def copy(self, l):
        return HEPVis_SWIG_Python.SbPList_copy(self, l)

    def fit(self):
        return HEPVis_SWIG_Python.SbPList_fit(self)

    def append(self, item):
        return HEPVis_SWIG_Python.SbPList_append(self, item)

    def find(self, item):
        return HEPVis_SWIG_Python.SbPList_find(self, item)

    def insert(self, item, insertbefore):
        return HEPVis_SWIG_Python.SbPList_insert(self, item, insertbefore)

    def removeItem(self, item):
        return HEPVis_SWIG_Python.SbPList_removeItem(self, item)

    def remove(self, index):
        return HEPVis_SWIG_Python.SbPList_remove(self, index)

    def removeFast(self, index):
        return HEPVis_SWIG_Python.SbPList_removeFast(self, index)

    def getLength(self):
        return HEPVis_SWIG_Python.SbPList_getLength(self)

    def truncate(self, length, fit=0):
        return HEPVis_SWIG_Python.SbPList_truncate(self, length, fit)

    def getArrayPtr(self, start=0):
        return HEPVis_SWIG_Python.SbPList_getArrayPtr(self, start)

    def __eq__(self, l):
        return HEPVis_SWIG_Python.SbPList___eq__(self, l)

    def __ne__(self, l):
        return HEPVis_SWIG_Python.SbPList___ne__(self, l)

    def get(self, index):
        return HEPVis_SWIG_Python.SbPList_get(self, index)

    def set(self, index, item):
        return HEPVis_SWIG_Python.SbPList_set(self, index, item)

    def __getitem__(self, i):
        return HEPVis_SWIG_Python.SbPList___getitem__(self, i)

    def __setitem__(self, i, val):
        return HEPVis_SWIG_Python.SbPList___setitem__(self, i, val)

    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]


# Register SbPList in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbIntList_swiginit(self, HEPVis_SWIG_Python.new_SbIntList(*args))

    def append(self, item):
        return HEPVis_SWIG_Python.SbIntList_append(self, item)

    def find(self, item):
        return HEPVis_SWIG_Python.SbIntList_find(self, item)

    def insert(self, item, addbefore):
        return HEPVis_SWIG_Python.SbIntList_insert(self, item, addbefore)

    def __setitem__(self, i, value):
        return HEPVis_SWIG_Python.SbIntList___setitem__(self, i, value)

    def __getitem__(self, i):
        return HEPVis_SWIG_Python.SbIntList___getitem__(self, i)

    def get(self, i):
        return HEPVis_SWIG_Python.SbIntList_get(self, i)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbIntList

# Register SbIntList in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbString_swiginit(self, HEPVis_SWIG_Python.new_SbString(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbString

    @staticmethod
    def hash(*args):
        return HEPVis_SWIG_Python.SbString_hash(*args)

    def getLength(self):
        return HEPVis_SWIG_Python.SbString_getLength(self)

    def makeEmpty(self, freeold=1):
        return HEPVis_SWIG_Python.SbString_makeEmpty(self, freeold)

    def getString(self):
        return HEPVis_SWIG_Python.SbString_getString(self)

    def getSubString(self, startidx, endidx=-1):
        return HEPVis_SWIG_Python.SbString_getSubString(self, startidx, endidx)

    def deleteSubString(self, startidx, endidx=-1):
        return HEPVis_SWIG_Python.SbString_deleteSubString(self, startidx, endidx)

    def addIntString(self, value):
        return HEPVis_SWIG_Python.SbString_addIntString(self, value)

    def __iadd__(self, *args):
        return HEPVis_SWIG_Python.SbString___iadd__(self, *args)

    def compareSubString(self, text, offset=0):
        return HEPVis_SWIG_Python.SbString_compareSubString(self, text, offset)

    def sprintf(self, formatstr):
        return HEPVis_SWIG_Python.SbString_sprintf(self, formatstr)

    def apply(self, func):
        return HEPVis_SWIG_Python.SbString_apply(self, func)

    def find(self, s):
        return HEPVis_SWIG_Python.SbString_find(self, s)

    def findAll(self, s, found):
        return HEPVis_SWIG_Python.SbString_findAll(self, s, found)

    def __eq__(self, *args):
        return HEPVis_SWIG_Python.SbString___eq__(self, *args)

    def __nq__(self, *args):
        return HEPVis_SWIG_Python.SbString___nq__(self, *args)

    def __getitem__(self, i):
        return HEPVis_SWIG_Python.SbString___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return HEPVis_SWIG_Python.SbString___repr__(self)

# Register SbString in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbString_swigregister(SbString)

def SbString_hash(*args):
    return HEPVis_SWIG_Python.SbString_hash(*args)

class SbName(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbName_swiginit(self, HEPVis_SWIG_Python.new_SbName(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbName

    def getString(self):
        return HEPVis_SWIG_Python.SbName_getString(self)

    def getLength(self):
        return HEPVis_SWIG_Python.SbName_getLength(self)

    @staticmethod
    def isIdentStartChar(c):
        return HEPVis_SWIG_Python.SbName_isIdentStartChar(c)

    @staticmethod
    def isIdentChar(c):
        return HEPVis_SWIG_Python.SbName_isIdentChar(c)

    @staticmethod
    def isBaseNameStartChar(c):
        return HEPVis_SWIG_Python.SbName_isBaseNameStartChar(c)

    @staticmethod
    def isBaseNameChar(c):
        return HEPVis_SWIG_Python.SbName_isBaseNameChar(c)

    def __eq__(self, *args):
        return HEPVis_SWIG_Python.SbName___eq__(self, *args)

    def __nq__(self, *args):
        return HEPVis_SWIG_Python.SbName___nq__(self, *args)

    def __getitem__(self, i):
        return HEPVis_SWIG_Python.SbName___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return HEPVis_SWIG_Python.SbName___repr__(self)

# Register SbName in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbName_swigregister(SbName)

def SbName_isIdentStartChar(c):
    return HEPVis_SWIG_Python.SbName_isIdentStartChar(c)

def SbName_isIdentChar(c):
    return HEPVis_SWIG_Python.SbName_isIdentChar(c)

def SbName_isBaseNameStartChar(c):
    return HEPVis_SWIG_Python.SbName_isBaseNameStartChar(c)

def SbName_isBaseNameChar(c):
    return HEPVis_SWIG_Python.SbName_isBaseNameChar(c)

class SbTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbTime_swiginit(self, HEPVis_SWIG_Python.new_SbTime(*args))

    @staticmethod
    def getTimeOfDay():
        return HEPVis_SWIG_Python.SbTime_getTimeOfDay()

    def setToTimeOfDay(self):
        return HEPVis_SWIG_Python.SbTime_setToTimeOfDay(self)

    @staticmethod
    def zero():
        return HEPVis_SWIG_Python.SbTime_zero()

    @staticmethod
    def max():
        return HEPVis_SWIG_Python.SbTime_max()

    @staticmethod
    def maxTime():
        return HEPVis_SWIG_Python.SbTime_maxTime()

    def setValue(self, *args):
        return HEPVis_SWIG_Python.SbTime_setValue(self, *args)

    def setMsecValue(self, msec):
        return HEPVis_SWIG_Python.SbTime_setMsecValue(self, msec)

    def getValue(self, *args):
        return HEPVis_SWIG_Python.SbTime_getValue(self, *args)

    def getMsecValue(self):
        return HEPVis_SWIG_Python.SbTime_getMsecValue(self)

    def format(self, *args):
        return HEPVis_SWIG_Python.SbTime_format(self, *args)

    def formatDate(self, fmt=None):
        return HEPVis_SWIG_Python.SbTime_formatDate(self, fmt)

    def parsedate(self, date):
        return HEPVis_SWIG_Python.SbTime_parsedate(self, date)

    def __iadd__(self, tm):
        return HEPVis_SWIG_Python.SbTime___iadd__(self, tm)

    def __isub__(self, tm):
        return HEPVis_SWIG_Python.SbTime___isub__(self, tm)

    def __neg__(self):
        return HEPVis_SWIG_Python.SbTime___neg__(self)

    def __imul__(self, s):
        return HEPVis_SWIG_Python.SbTime___imul__(self, s)

    def __itruediv__(self, *args):
        return HEPVis_SWIG_Python.SbTime___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return HEPVis_SWIG_Python.SbTime___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, tm):
        return HEPVis_SWIG_Python.SbTime___mod__(self, tm)

    def __eq__(self, tm):
        return HEPVis_SWIG_Python.SbTime___eq__(self, tm)

    def __ne__(self, tm):
        return HEPVis_SWIG_Python.SbTime___ne__(self, tm)

    def __lt__(self, tm):
        return HEPVis_SWIG_Python.SbTime___lt__(self, tm)

    def __gt__(self, tm):
        return HEPVis_SWIG_Python.SbTime___gt__(self, tm)

    def __le__(self, tm):
        return HEPVis_SWIG_Python.SbTime___le__(self, tm)

    def __ge__(self, tm):
        return HEPVis_SWIG_Python.SbTime___ge__(self, tm)

    def output(self, fp):
        return HEPVis_SWIG_Python.SbTime_output(self, fp)

    def __add__(self, u):
        return HEPVis_SWIG_Python.SbTime___add__(self, u)

    def __sub__(self, u):
        return HEPVis_SWIG_Python.SbTime___sub__(self, u)

    def __mul__(self, d):
        return HEPVis_SWIG_Python.SbTime___mul__(self, d)

    def __rmul__(self, d):
        return HEPVis_SWIG_Python.SbTime___rmul__(self, d)

    def __div__(self, d):
        return HEPVis_SWIG_Python.SbTime___div__(self, d)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTime

# Register SbTime in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay():
    return HEPVis_SWIG_Python.SbTime_getTimeOfDay()

def SbTime_zero():
    return HEPVis_SWIG_Python.SbTime_zero()

def SbTime_max():
    return HEPVis_SWIG_Python.SbTime_max()

def SbTime_maxTime():
    return HEPVis_SWIG_Python.SbTime_maxTime()

class SoEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SoEvent_swiginit(self, HEPVis_SWIG_Python.new_SoEvent())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEvent

    def isOfType(self, type):
        return HEPVis_SWIG_Python.SoEvent_isOfType(self, type)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoEvent_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoEvent_getTypeId(self)

    def setTime(self, t):
        return HEPVis_SWIG_Python.SoEvent_setTime(self, t)

    def getTime(self):
        return HEPVis_SWIG_Python.SoEvent_getTime(self)

    def setPosition(self, p):
        return HEPVis_SWIG_Python.SoEvent_setPosition(self, p)

    def getPosition(self, *args):
        return HEPVis_SWIG_Python.SoEvent_getPosition(self, *args)

    def getNormalizedPosition(self, vpRgn):
        return HEPVis_SWIG_Python.SoEvent_getNormalizedPosition(self, vpRgn)

    def setShiftDown(self, isDown):
        return HEPVis_SWIG_Python.SoEvent_setShiftDown(self, isDown)

    def wasShiftDown(self):
        return HEPVis_SWIG_Python.SoEvent_wasShiftDown(self)

    def setCtrlDown(self, isDown):
        return HEPVis_SWIG_Python.SoEvent_setCtrlDown(self, isDown)

    def wasCtrlDown(self):
        return HEPVis_SWIG_Python.SoEvent_wasCtrlDown(self)

    def setAltDown(self, isDown):
        return HEPVis_SWIG_Python.SoEvent_setAltDown(self, isDown)

    def wasAltDown(self):
        return HEPVis_SWIG_Python.SoEvent_wasAltDown(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoEvent_initClass()

# Register SoEvent in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId():
    return HEPVis_SWIG_Python.SoEvent_getClassTypeId()

def SoEvent_initClass():
    return HEPVis_SWIG_Python.SoEvent_initClass()

class SoNotRec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONTAINER = HEPVis_SWIG_Python.SoNotRec_CONTAINER
    PARENT = HEPVis_SWIG_Python.SoNotRec_PARENT
    SENSOR = HEPVis_SWIG_Python.SoNotRec_SENSOR
    FIELD = HEPVis_SWIG_Python.SoNotRec_FIELD
    ENGINE = HEPVis_SWIG_Python.SoNotRec_ENGINE

    def __init__(self, notifbase):
        HEPVis_SWIG_Python.SoNotRec_swiginit(self, HEPVis_SWIG_Python.new_SoNotRec(notifbase))

    def setType(self, type):
        return HEPVis_SWIG_Python.SoNotRec_setType(self, type)

    def getBase(self):
        return HEPVis_SWIG_Python.SoNotRec_getBase(self)

    def getType(self):
        return HEPVis_SWIG_Python.SoNotRec_getType(self)

    def getPrevious(self):
        return HEPVis_SWIG_Python.SoNotRec_getPrevious(self)

    def setPrevious(self, prev):
        return HEPVis_SWIG_Python.SoNotRec_setPrevious(self, prev)

    def output(self, file):
        return HEPVis_SWIG_Python.SoNotRec_output(self, file)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoNotRec

# Register SoNotRec in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SoNotList_swiginit(self, HEPVis_SWIG_Python.new_SoNotList(*args))

    def append(self, *args):
        return HEPVis_SWIG_Python.SoNotList_append(self, *args)

    def setLastType(self, type):
        return HEPVis_SWIG_Python.SoNotList_setLastType(self, type)

    def getFirstRec(self):
        return HEPVis_SWIG_Python.SoNotList_getFirstRec(self)

    def getLastRec(self):
        return HEPVis_SWIG_Python.SoNotList_getLastRec(self)

    def getFirstRecAtNode(self):
        return HEPVis_SWIG_Python.SoNotList_getFirstRecAtNode(self)

    def getLastField(self):
        return HEPVis_SWIG_Python.SoNotList_getLastField(self)

    def getLastEngineOutput(self):
        return HEPVis_SWIG_Python.SoNotList_getLastEngineOutput(self)

    def getTimeStamp(self):
        return HEPVis_SWIG_Python.SoNotList_getTimeStamp(self)

    def output(self, *args):
        return HEPVis_SWIG_Python.SoNotList_output(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoNotList

# Register SoNotList in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoField

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoField_initClass()

    @staticmethod
    def initClasses():
        return HEPVis_SWIG_Python.SoField_initClasses()

    def setIgnored(self, ignore):
        return HEPVis_SWIG_Python.SoField_setIgnored(self, ignore)

    def isIgnored(self):
        return HEPVis_SWIG_Python.SoField_isIgnored(self)

    def setDefault(self, _def):
        return HEPVis_SWIG_Python.SoField_setDefault(self, _def)

    def isDefault(self):
        return HEPVis_SWIG_Python.SoField_isDefault(self)

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoField_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoField_getClassTypeId()

    def isOfType(self, type):
        return HEPVis_SWIG_Python.SoField_isOfType(self, type)

    def enableConnection(self, flag):
        return HEPVis_SWIG_Python.SoField_enableConnection(self, flag)

    def isConnectionEnabled(self):
        return HEPVis_SWIG_Python.SoField_isConnectionEnabled(self)

    def isConnectedFromEngine(self):
        return HEPVis_SWIG_Python.SoField_isConnectedFromEngine(self)

    def getConnectedEngine(self, master):
        return HEPVis_SWIG_Python.SoField_getConnectedEngine(self, master)

    def connectFrom(self, *args):
        return HEPVis_SWIG_Python.SoField_connectFrom(self, *args)

    def appendConnection(self, *args):
        return HEPVis_SWIG_Python.SoField_appendConnection(self, *args)

    def isConnectedFromField(self):
        return HEPVis_SWIG_Python.SoField_isConnectedFromField(self)

    def getConnectedField(self, master):
        return HEPVis_SWIG_Python.SoField_getConnectedField(self, master)

    def getNumConnections(self):
        return HEPVis_SWIG_Python.SoField_getNumConnections(self)

    def getForwardConnections(self, slavelist):
        return HEPVis_SWIG_Python.SoField_getForwardConnections(self, slavelist)

    def getConnections(self, masterlist):
        return HEPVis_SWIG_Python.SoField_getConnections(self, masterlist)

    def disconnect(self, *args):
        return HEPVis_SWIG_Python.SoField_disconnect(self, *args)

    def isConnected(self):
        return HEPVis_SWIG_Python.SoField_isConnected(self)

    def setContainer(self, cont):
        return HEPVis_SWIG_Python.SoField_setContainer(self, cont)

    def getContainer(self):
        return HEPVis_SWIG_Python.SoField_getContainer(self)

    def set(self, valuestring):
        return HEPVis_SWIG_Python.SoField_set(self, valuestring)

    def shouldWrite(self):
        return HEPVis_SWIG_Python.SoField_shouldWrite(self)

    def touch(self):
        return HEPVis_SWIG_Python.SoField_touch(self)

    def startNotify(self):
        return HEPVis_SWIG_Python.SoField_startNotify(self)

    def notify(self, nlist):
        return HEPVis_SWIG_Python.SoField_notify(self, nlist)

    def enableNotify(self, on):
        return HEPVis_SWIG_Python.SoField_enableNotify(self, on)

    def isNotifyEnabled(self):
        return HEPVis_SWIG_Python.SoField_isNotifyEnabled(self)

    def addAuditor(self, f, type):
        return HEPVis_SWIG_Python.SoField_addAuditor(self, f, type)

    def removeAuditor(self, f, type):
        return HEPVis_SWIG_Python.SoField_removeAuditor(self, f, type)

    def __eq__(self, f):
        return HEPVis_SWIG_Python.SoField___eq__(self, f)

    def __ne__(self, f):
        return HEPVis_SWIG_Python.SoField___ne__(self, f)

    def connectionStatusChanged(self, numconnections):
        return HEPVis_SWIG_Python.SoField_connectionStatusChanged(self, numconnections)

    def isReadOnly(self):
        return HEPVis_SWIG_Python.SoField_isReadOnly(self)

    def isSame(self, f):
        return HEPVis_SWIG_Python.SoField_isSame(self, f)

    def copyFrom(self, f):
        return HEPVis_SWIG_Python.SoField_copyFrom(self, f)

    def fixCopy(self, copyconnections):
        return HEPVis_SWIG_Python.SoField_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return HEPVis_SWIG_Python.SoField_referencesCopy(self)

    def copyConnection(self, fromfield):
        return HEPVis_SWIG_Python.SoField_copyConnection(self, fromfield)

    def read(self, _in, name):
        return HEPVis_SWIG_Python.SoField_read(self, _in, name)

    def write(self, out, name):
        return HEPVis_SWIG_Python.SoField_write(self, out, name)

    def countWriteRefs(self, out):
        return HEPVis_SWIG_Python.SoField_countWriteRefs(self, out)
    NORMAL_FIELD = HEPVis_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = HEPVis_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = HEPVis_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = HEPVis_SWIG_Python.SoField_EXPOSED_FIELD

    def setFieldType(self, type):
        return HEPVis_SWIG_Python.SoField_setFieldType(self, type)

    def getFieldType(self):
        return HEPVis_SWIG_Python.SoField_getFieldType(self)

    def getDirty(self):
        return HEPVis_SWIG_Python.SoField_getDirty(self)

    def setDirty(self, dirty):
        return HEPVis_SWIG_Python.SoField_setDirty(self, dirty)

    def evaluate(self):
        return HEPVis_SWIG_Python.SoField_evaluate(self)

    def get(self):
        return HEPVis_SWIG_Python.SoField_get(self)

# Register SoField in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoField_swigregister(SoField)

def SoField_initClass():
    return HEPVis_SWIG_Python.SoField_initClass()

def SoField_initClasses():
    return HEPVis_SWIG_Python.SoField_initClasses()

def SoField_getClassTypeId():
    return HEPVis_SWIG_Python.SoField_getClassTypeId()

class SoSField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSField

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSField_initClass()

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSField_getClassTypeId()

# Register SoSField in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSField_swigregister(SoSField)

def SoSField_initClass():
    return HEPVis_SWIG_Python.SoSField_initClass()

def SoSField_getClassTypeId():
    return HEPVis_SWIG_Python.SoSField_getClassTypeId()

class SoMField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoMField

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoMField_getClassTypeId()

    def getNum(self):
        return HEPVis_SWIG_Python.SoMField_getNum(self)

    def setNum(self, num):
        return HEPVis_SWIG_Python.SoMField_setNum(self, num)

    def deleteValues(self, start, num=-1):
        return HEPVis_SWIG_Python.SoMField_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return HEPVis_SWIG_Python.SoMField_insertSpace(self, start, num)

    def set1(self, index, valuestring):
        return HEPVis_SWIG_Python.SoMField_set1(self, index, valuestring)

    def get1(self, index, valuestring):
        return HEPVis_SWIG_Python.SoMField_get1(self, index, valuestring)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoMField_initClass()

    def enableDeleteValues(self):
        return HEPVis_SWIG_Python.SoMField_enableDeleteValues(self)

    def isDeleteValuesEnabled(self):
        return HEPVis_SWIG_Python.SoMField_isDeleteValuesEnabled(self)

    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1


    def __len__(self):
        return HEPVis_SWIG_Python.SoMField___len__(self)

# Register SoMField in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoMField_swigregister(SoMField)

def SoMField_getClassTypeId():
    return HEPVis_SWIG_Python.SoMField_getClassTypeId()

def SoMField_initClass():
    return HEPVis_SWIG_Python.SoMField_initClass()

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SwigPyIterator

    def value(self):
        return HEPVis_SWIG_Python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return HEPVis_SWIG_Python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return HEPVis_SWIG_Python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return HEPVis_SWIG_Python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return HEPVis_SWIG_Python.SwigPyIterator_equal(self, x)

    def copy(self):
        return HEPVis_SWIG_Python.SwigPyIterator_copy(self)

    def next(self):
        return HEPVis_SWIG_Python.SwigPyIterator_next(self)

    def __next__(self):
        return HEPVis_SWIG_Python.SwigPyIterator___next__(self)

    def previous(self):
        return HEPVis_SWIG_Python.SwigPyIterator_previous(self)

    def advance(self, n):
        return HEPVis_SWIG_Python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return HEPVis_SWIG_Python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return HEPVis_SWIG_Python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return HEPVis_SWIG_Python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return HEPVis_SWIG_Python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return HEPVis_SWIG_Python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return HEPVis_SWIG_Python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SwigPyIterator_swigregister(SwigPyIterator)

class SbArguments(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        HEPVis_SWIG_Python.SbArguments_swiginit(self, HEPVis_SWIG_Python.new_SbArguments(arg2, arg3))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbArguments

    def isAnArgument(self, arg2):
        return HEPVis_SWIG_Python.SbArguments_isAnArgument(self, arg2)

    def number(self):
        return HEPVis_SWIG_Python.SbArguments_number(self)

    def find(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbArguments_find(self, arg2, arg3)

    def last(self, aName, aValue):
        return HEPVis_SWIG_Python.SbArguments_last(self, aName, aValue)

    def file(self, aFile):
        return HEPVis_SWIG_Python.SbArguments_file(self, aFile)

# Register SbArguments in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbArguments_swigregister(SbArguments)


def SbFROUND(aFloat):
    return HEPVis_SWIG_Python.SbFROUND(aFloat)
class SbAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxis

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbAxis_swiginit(self, HEPVis_SWIG_Python.new_SbAxis(*args))

    def setLogScale(self, aValue):
        return HEPVis_SWIG_Python.SbAxis_setLogScale(self, aValue)

    def setMinimumValue(self, aValue):
        return HEPVis_SWIG_Python.SbAxis_setMinimumValue(self, aValue)

    def setMaximumValue(self, aValue):
        return HEPVis_SWIG_Python.SbAxis_setMaximumValue(self, aValue)

    def getMinimumValue(self):
        return HEPVis_SWIG_Python.SbAxis_getMinimumValue(self)

    def getMaximumValue(self):
        return HEPVis_SWIG_Python.SbAxis_getMaximumValue(self)

    def isLogScale(self):
        return HEPVis_SWIG_Python.SbAxis_isLogScale(self)

    def adjustAxis(self):
        return HEPVis_SWIG_Python.SbAxis_adjustAxis(self)

# Register SbAxis in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbAxis_swigregister(SbAxis)

class SbAxisHPLOT_Text(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbAxisHPLOT_Text_swiginit(self, HEPVis_SWIG_Python.new_SbAxisHPLOT_Text(*args))
    fX = property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fX_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fX_set)
    fY = property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fY_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fY_set)
    fAngle = property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAngle_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAngle_set)
    fSize = property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fSize_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fSize_set)
    fString = property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fString_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fString_set)
    fAlign = property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAlign_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAlign_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxisHPLOT_Text

# Register SbAxisHPLOT_Text in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbAxisHPLOT_Text_swigregister(SbAxisHPLOT_Text)

class SbAxisHPLOT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbAxisHPLOT_swiginit(self, HEPVis_SWIG_Python.new_SbAxisHPLOT())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxisHPLOT

    def paint(self, xmin, ymin, xmax, ymax, wmin, wmax, ndiv, arg9, gridlength, drawGridOnly, arg12, arg13, arg14):
        return HEPVis_SWIG_Python.SbAxisHPLOT_paint(self, xmin, ymin, xmax, ymax, wmin, wmax, ndiv, arg9, gridlength, drawGridOnly, arg12, arg13, arg14)

    def setTitle(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setTitle(self, arg2)

    def setTimeFormat(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setTimeFormat(self, arg2)

    def setTimeOffset(self, arg2, is_gmt=False):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setTimeOffset(self, arg2, is_gmt)

    def setTickSize(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setTickSize(self, arg2)

    def setLabelOffset(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setLabelOffset(self, arg2)

    def setLabelSize(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setLabelSize(self, arg2)

    def setTitleOffset(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setTitleOffset(self, arg2)

    def setTitleSize(self, arg2):
        return HEPVis_SWIG_Python.SbAxisHPLOT_setTitleSize(self, arg2)

# Register SbAxisHPLOT in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbAxisHPLOT_swigregister(SbAxisHPLOT)

class bitmap_info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.bitmap_info_swiginit(self, HEPVis_SWIG_Python.new_bitmap_info())
    blur_bitmap = property(HEPVis_SWIG_Python.bitmap_info_blur_bitmap_get, HEPVis_SWIG_Python.bitmap_info_blur_bitmap_set)
    crop_bitmap = property(HEPVis_SWIG_Python.bitmap_info_crop_bitmap_get, HEPVis_SWIG_Python.bitmap_info_crop_bitmap_set)
    make_transparent = property(HEPVis_SWIG_Python.bitmap_info_make_transparent_get, HEPVis_SWIG_Python.bitmap_info_make_transparent_set)
    bitmap_scale_factor = property(HEPVis_SWIG_Python.bitmap_info_bitmap_scale_factor_get, HEPVis_SWIG_Python.bitmap_info_bitmap_scale_factor_set)
    ofile_pattern = property(HEPVis_SWIG_Python.bitmap_info_ofile_pattern_get, HEPVis_SWIG_Python.bitmap_info_ofile_pattern_set)
    ofile_name = property(HEPVis_SWIG_Python.bitmap_info_ofile_name_get, HEPVis_SWIG_Python.bitmap_info_ofile_name_set)
    ofile_type = property(HEPVis_SWIG_Python.bitmap_info_ofile_type_get, HEPVis_SWIG_Python.bitmap_info_ofile_type_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_bitmap_info

# Register bitmap_info in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.bitmap_info_swigregister(bitmap_info)

DVI2BITMAPURL = HEPVis_SWIG_Python.DVI2BITMAPURL
class SbDVI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbDVI_swiginit(self, HEPVis_SWIG_Python.new_SbDVI())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDVI

    def getImageFromStream(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        return HEPVis_SWIG_Python.SbDVI_getImageFromStream(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    def setFontGen(self, arg2):
        return HEPVis_SWIG_Python.SbDVI_setFontGen(self, arg2)

    def setForeground(self, arg2):
        return HEPVis_SWIG_Python.SbDVI_setForeground(self, arg2)

    def setBackground(self, arg2):
        return HEPVis_SWIG_Python.SbDVI_setBackground(self, arg2)

    def setTransparent(self, r):
        return HEPVis_SWIG_Python.SbDVI_setTransparent(self, r)

    def setBlur(self, r):
        return HEPVis_SWIG_Python.SbDVI_setBlur(self, r)

    def setBitmapScaleFactor(self, r):
        return HEPVis_SWIG_Python.SbDVI_setBitmapScaleFactor(self, r)

    def setResolution(self, r):
        return HEPVis_SWIG_Python.SbDVI_setResolution(self, r)

# Register SbDVI in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbDVI_swigregister(SbDVI)

class SbFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def openDirectory(self, arg2):
        return HEPVis_SWIG_Python.SbFile_openDirectory(self, arg2)

    def getDirectoryEntry(self, arg2):
        return HEPVis_SWIG_Python.SbFile_getDirectoryEntry(self, arg2)

    def closeDirectory(self, arg2):
        return HEPVis_SWIG_Python.SbFile_closeDirectory(self, arg2)

    @staticmethod
    def getDirectoryFiles(arg1):
        return HEPVis_SWIG_Python.SbFile_getDirectoryFiles(arg1)

    @staticmethod
    def getDirectoryDirectories(arg1):
        return HEPVis_SWIG_Python.SbFile_getDirectoryDirectories(arg1)

    @staticmethod
    def dumpDirectory(arg1):
        return HEPVis_SWIG_Python.SbFile_dumpDirectory(arg1)

    @staticmethod
    def isDirectory(arg1):
        return HEPVis_SWIG_Python.SbFile_isDirectory(arg1)

    @staticmethod
    def getWorkingDirectory():
        return HEPVis_SWIG_Python.SbFile_getWorkingDirectory()

    @staticmethod
    def tmpname(*args):
        return HEPVis_SWIG_Python.SbFile_tmpname(*args)

    @staticmethod
    def getFullName(arg1):
        return HEPVis_SWIG_Python.SbFile_getFullName(arg1)

    @staticmethod
    def exists(arg1):
        return HEPVis_SWIG_Python.SbFile_exists(arg1)

    @staticmethod
    def remove(arg1):
        return HEPVis_SWIG_Python.SbFile_remove(arg1)

    def __init__(self):
        HEPVis_SWIG_Python.SbFile_swiginit(self, HEPVis_SWIG_Python.new_SbFile())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFile

# Register SbFile in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbFile_swigregister(SbFile)

def SbFile_getDirectoryFiles(arg1):
    return HEPVis_SWIG_Python.SbFile_getDirectoryFiles(arg1)

def SbFile_getDirectoryDirectories(arg1):
    return HEPVis_SWIG_Python.SbFile_getDirectoryDirectories(arg1)

def SbFile_dumpDirectory(arg1):
    return HEPVis_SWIG_Python.SbFile_dumpDirectory(arg1)

def SbFile_isDirectory(arg1):
    return HEPVis_SWIG_Python.SbFile_isDirectory(arg1)

def SbFile_getWorkingDirectory():
    return HEPVis_SWIG_Python.SbFile_getWorkingDirectory()

def SbFile_tmpname(*args):
    return HEPVis_SWIG_Python.SbFile_tmpname(*args)

def SbFile_getFullName(arg1):
    return HEPVis_SWIG_Python.SbFile_getFullName(arg1)

def SbFile_exists(arg1):
    return HEPVis_SWIG_Python.SbFile_exists(arg1)

def SbFile_remove(arg1):
    return HEPVis_SWIG_Python.SbFile_remove(arg1)

class SbFITS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6):
        return HEPVis_SWIG_Python.SbFITS_getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6)

    @staticmethod
    def getHeaderFromStream(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SbFITS_getHeaderFromStream(arg1, arg2, arg3)

    @staticmethod
    def dumpHeaderInStream(arg1):
        return HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream(arg1)

    @staticmethod
    def putImageInStream(arg1, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbFITS_putImageInStream(arg1, arg2, arg3, arg4, arg5)

    def __init__(self):
        HEPVis_SWIG_Python.SbFITS_swiginit(self, HEPVis_SWIG_Python.new_SbFITS())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFITS

# Register SbFITS in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbFITS_swigregister(SbFITS)

def SbFITS_getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6):
    return HEPVis_SWIG_Python.SbFITS_getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6)

def SbFITS_getHeaderFromStream(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SbFITS_getHeaderFromStream(arg1, arg2, arg3)

def SbFITS_dumpHeaderInStream(arg1):
    return HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream(arg1)

def SbFITS_putImageInStream(arg1, arg2, arg3, arg4, arg5):
    return HEPVis_SWIG_Python.SbFITS_putImageInStream(arg1, arg2, arg3, arg4, arg5)

class SbGIF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return HEPVis_SWIG_Python.SbGIF_getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    @staticmethod
    def putBytesInStream(*args):
        return HEPVis_SWIG_Python.SbGIF_putBytesInStream(*args)

    @staticmethod
    def putImageInStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return HEPVis_SWIG_Python.SbGIF_putImageInStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def __init__(self):
        HEPVis_SWIG_Python.SbGIF_swiginit(self, HEPVis_SWIG_Python.new_SbGIF())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbGIF

# Register SbGIF in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbGIF_swigregister(SbGIF)

def SbGIF_getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return HEPVis_SWIG_Python.SbGIF_getImageFromStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def SbGIF_putBytesInStream(*args):
    return HEPVis_SWIG_Python.SbGIF_putBytesInStream(*args)

def SbGIF_putImageInStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return HEPVis_SWIG_Python.SbGIF_putImageInStream(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

class SbHatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbHatch_swiginit(self, HEPVis_SWIG_Python.new_SbHatch())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbHatch

    def computePolyline(self, listPoints, number):
        return HEPVis_SWIG_Python.SbHatch_computePolyline(self, listPoints, number)

    def checkPolyline(self, listPoints, number):
        return HEPVis_SWIG_Python.SbHatch_checkPolyline(self, listPoints, number)

    def setSpacing(self, a):
        return HEPVis_SWIG_Python.SbHatch_setSpacing(self, a)

    def setAngle(self, a):
        return HEPVis_SWIG_Python.SbHatch_setAngle(self, a)

    def setOffset(self, a):
        return HEPVis_SWIG_Python.SbHatch_setOffset(self, a)

    def setOffsetPoint(self, a):
        return HEPVis_SWIG_Python.SbHatch_setOffsetPoint(self, a)

    def setPrecisionFactor(self, a):
        return HEPVis_SWIG_Python.SbHatch_setPrecisionFactor(self, a)

    def setStripWidth(self, a):
        return HEPVis_SWIG_Python.SbHatch_setStripWidth(self, a)

    def getSpacing(self):
        return HEPVis_SWIG_Python.SbHatch_getSpacing(self)

    def getAngle(self):
        return HEPVis_SWIG_Python.SbHatch_getAngle(self)

    def getOffset(self):
        return HEPVis_SWIG_Python.SbHatch_getOffset(self)

    def getOffsetPoint(self):
        return HEPVis_SWIG_Python.SbHatch_getOffsetPoint(self)

    def getPrecisionFactor(self):
        return HEPVis_SWIG_Python.SbHatch_getPrecisionFactor(self)

    def getStripWidth(self):
        return HEPVis_SWIG_Python.SbHatch_getStripWidth(self)

    def getNormal(self):
        return HEPVis_SWIG_Python.SbHatch_getNormal(self)

    def getNoPoints(self):
        return HEPVis_SWIG_Python.SbHatch_getNoPoints(self)

    def getPoints(self):
        return HEPVis_SWIG_Python.SbHatch_getPoints(self)

    def getNoVertices(self):
        return HEPVis_SWIG_Python.SbHatch_getNoVertices(self)

    def getVertices(self):
        return HEPVis_SWIG_Python.SbHatch_getVertices(self)

# Register SbHatch in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbHatch_swigregister(SbHatch)

class SbHatching(SbHatch):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbHatching

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbHatching_swiginit(self, HEPVis_SWIG_Python.new_SbHatching(*args))

    def addPolyline(self, Coord, aNumber):
        return HEPVis_SWIG_Python.SbHatching_addPolyline(self, Coord, aNumber)

    def getHatchPointsList(self):
        return HEPVis_SWIG_Python.SbHatching_getHatchPointsList(self)

    def getHatchNumVerticesList(self):
        return HEPVis_SWIG_Python.SbHatching_getHatchNumVerticesList(self)

    def getCornerMinBB(self):
        return HEPVis_SWIG_Python.SbHatching_getCornerMinBB(self)

    def getCornerMaxBB(self):
        return HEPVis_SWIG_Python.SbHatching_getCornerMaxBB(self)

    def getNumPointsList(self):
        return HEPVis_SWIG_Python.SbHatching_getNumPointsList(self)

    def getNumVertices(self):
        return HEPVis_SWIG_Python.SbHatching_getNumVertices(self)

# Register SbHatching in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbHatching_swigregister(SbHatching)

class SbJGIF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def beginGIF_Stream(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream(arg1, arg2, arg3)

    @staticmethod
    def putColormapInGIF_Stream(arg1, arg2):
        return HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream(arg1, arg2)

    @staticmethod
    def putImageInGIF_Stream(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream(arg1, arg2, arg3)

    @staticmethod
    def endGIF_Stream():
        return HEPVis_SWIG_Python.SbJGIF_endGIF_Stream()

    def __init__(self):
        HEPVis_SWIG_Python.SbJGIF_swiginit(self, HEPVis_SWIG_Python.new_SbJGIF())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbJGIF

# Register SbJGIF in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbJGIF_swigregister(SbJGIF)

def SbJGIF_beginGIF_Stream(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream(arg1, arg2, arg3)

def SbJGIF_putColormapInGIF_Stream(arg1, arg2):
    return HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream(arg1, arg2)

def SbJGIF_putImageInGIF_Stream(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream(arg1, arg2, arg3)

def SbJGIF_endGIF_Stream():
    return HEPVis_SWIG_Python.SbJGIF_endGIF_Stream()

class SbJPEG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def writeFile(arg1, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbJPEG_writeFile(arg1, arg2, arg3, arg4, arg5)

    @staticmethod
    def readFile(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SbJPEG_readFile(arg1, arg2, arg3)

    def __init__(self):
        HEPVis_SWIG_Python.SbJPEG_swiginit(self, HEPVis_SWIG_Python.new_SbJPEG())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbJPEG

# Register SbJPEG in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbJPEG_swigregister(SbJPEG)

def SbJPEG_writeFile(arg1, arg2, arg3, arg4, arg5):
    return HEPVis_SWIG_Python.SbJPEG_writeFile(arg1, arg2, arg3, arg4, arg5)

def SbJPEG_readFile(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SbJPEG_readFile(arg1, arg2, arg3)

class SbLatex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def fileToDvi(self, *args):
        return HEPVis_SWIG_Python.SbLatex_fileToDvi(self, *args)

    def strToDvi(self, *args):
        return HEPVis_SWIG_Python.SbLatex_strToDvi(self, *args)

    def __init__(self):
        HEPVis_SWIG_Python.SbLatex_swiginit(self, HEPVis_SWIG_Python.new_SbLatex())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbLatex

# Register SbLatex in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbLatex_swigregister(SbLatex)

class SbLUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IDENTITY = HEPVis_SWIG_Python.SbLUT_IDENTITY
    LINEAR = HEPVis_SWIG_Python.SbLUT_LINEAR
    LOG = HEPVis_SWIG_Python.SbLUT_LOG

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbLUT_swiginit(self, HEPVis_SWIG_Python.new_SbLUT(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbLUT

    def initialize(self, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbLUT_initialize(self, arg2, arg3, arg4, arg5)

    def getCellNumber(self):
        return HEPVis_SWIG_Python.SbLUT_getCellNumber(self)

    def getCells(self):
        return HEPVis_SWIG_Python.SbLUT_getCells(self)

# Register SbLUT in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbLUT_swigregister(SbLUT)

SbMarkerDot = HEPVis_SWIG_Python.SbMarkerDot
SbMarkerPlus = HEPVis_SWIG_Python.SbMarkerPlus
SbMarkerAsterisk = HEPVis_SWIG_Python.SbMarkerAsterisk
SbMarkerCross = HEPVis_SWIG_Python.SbMarkerCross
SbMarkerStar = HEPVis_SWIG_Python.SbMarkerStar
SbMarkerCircleLine = HEPVis_SWIG_Python.SbMarkerCircleLine
SbMarkerCircleFilled = HEPVis_SWIG_Python.SbMarkerCircleFilled
SbMarkerTriangleUpLine = HEPVis_SWIG_Python.SbMarkerTriangleUpLine
SbMarkerTriangleUpFilled = HEPVis_SWIG_Python.SbMarkerTriangleUpFilled
SbMarkerTriangleDownLine = HEPVis_SWIG_Python.SbMarkerTriangleDownLine
SbMarkerTriangleDownFilled = HEPVis_SWIG_Python.SbMarkerTriangleDownFilled
SbMarkerDavidStarLine = HEPVis_SWIG_Python.SbMarkerDavidStarLine
SbMarkerDavidStarFilled = HEPVis_SWIG_Python.SbMarkerDavidStarFilled
SbMarkerSwissCrossLine = HEPVis_SWIG_Python.SbMarkerSwissCrossLine
SbMarkerSwissCrossFilled = HEPVis_SWIG_Python.SbMarkerSwissCrossFilled
SbMarkerDiamondLine = HEPVis_SWIG_Python.SbMarkerDiamondLine
SbMarkerDiamondFilled = HEPVis_SWIG_Python.SbMarkerDiamondFilled
SbMarkerSquareLine = HEPVis_SWIG_Python.SbMarkerSquareLine
SbMarkerSquareFilled = HEPVis_SWIG_Python.SbMarkerSquareFilled
SbMarkerPentaStarLine = HEPVis_SWIG_Python.SbMarkerPentaStarLine
SbMarkerPentaStarFilled = HEPVis_SWIG_Python.SbMarkerPentaStarFilled
SbAreaSolid = HEPVis_SWIG_Python.SbAreaSolid
SbAreaHatched = HEPVis_SWIG_Python.SbAreaHatched
SbAreaChecker = HEPVis_SWIG_Python.SbAreaChecker
SbAreaEdged = HEPVis_SWIG_Python.SbAreaEdged
SbProjectionNone = HEPVis_SWIG_Python.SbProjectionNone
SbProjectionRZ = HEPVis_SWIG_Python.SbProjectionRZ
SbProjectionPHIZ = HEPVis_SWIG_Python.SbProjectionPHIZ
SbProjectionZR = HEPVis_SWIG_Python.SbProjectionZR
SbProjectionZPHI = HEPVis_SWIG_Python.SbProjectionZPHI
SbPaintingUniform = HEPVis_SWIG_Python.SbPaintingUniform
SbPaintingByValue = HEPVis_SWIG_Python.SbPaintingByValue
SbPaintingByLevel = HEPVis_SWIG_Python.SbPaintingByLevel
SbPaintingGreyScale = HEPVis_SWIG_Python.SbPaintingGreyScale
SbPaintingVioletToRed = HEPVis_SWIG_Python.SbPaintingVioletToRed
SbPaintingGreyScaleInverse = HEPVis_SWIG_Python.SbPaintingGreyScaleInverse
SbHatchingNone = HEPVis_SWIG_Python.SbHatchingNone
SbHatchingRight = HEPVis_SWIG_Python.SbHatchingRight
SbHatchingLeft = HEPVis_SWIG_Python.SbHatchingLeft
SbHatchingLeftAndRight = HEPVis_SWIG_Python.SbHatchingLeftAndRight
SbLinePattern_solid = HEPVis_SWIG_Python.SbLinePattern_solid
SbLinePattern_dashed = HEPVis_SWIG_Python.SbLinePattern_dashed
SbLinePattern_dotted = HEPVis_SWIG_Python.SbLinePattern_dotted
SbLinePattern_dash_dotted = HEPVis_SWIG_Python.SbLinePattern_dash_dotted
SbLinePattern_s_solid = HEPVis_SWIG_Python.SbLinePattern_s_solid
SbLinePattern_s_dashed = HEPVis_SWIG_Python.SbLinePattern_s_dashed
SbLinePattern_s_dotted = HEPVis_SWIG_Python.SbLinePattern_s_dotted
SbLinePattern_s_dash_dotted = HEPVis_SWIG_Python.SbLinePattern_s_dash_dotted
SbModeling_boxes = HEPVis_SWIG_Python.SbModeling_boxes
SbModeling_wire_boxes = HEPVis_SWIG_Python.SbModeling_wire_boxes
SbModeling_lines = HEPVis_SWIG_Python.SbModeling_lines
SbModeling_segments = HEPVis_SWIG_Python.SbModeling_segments
SbModeling_points = HEPVis_SWIG_Python.SbModeling_points
SbModeling_top_lines = HEPVis_SWIG_Python.SbModeling_top_lines
SbModeling_texts = HEPVis_SWIG_Python.SbModeling_texts
SbModeling_curve = HEPVis_SWIG_Python.SbModeling_curve
SbModeling_filled_curve = HEPVis_SWIG_Python.SbModeling_filled_curve
SbModeling_bar_chart = HEPVis_SWIG_Python.SbModeling_bar_chart
SbModeling_solid = HEPVis_SWIG_Python.SbModeling_solid
SbModeling_wire_frame = HEPVis_SWIG_Python.SbModeling_wire_frame
SbModeling_reduced_wire_frame = HEPVis_SWIG_Python.SbModeling_reduced_wire_frame
SbModeling_polygon = HEPVis_SWIG_Python.SbModeling_polygon
SbModeling_none = HEPVis_SWIG_Python.SbModeling_none
SbEncoding_none = HEPVis_SWIG_Python.SbEncoding_none
SbEncoding_PAW = HEPVis_SWIG_Python.SbEncoding_PAW
SbEncoding_Latex = HEPVis_SWIG_Python.SbEncoding_Latex
SbTickModeling_none = HEPVis_SWIG_Python.SbTickModeling_none
SbTickModeling_hippo = HEPVis_SWIG_Python.SbTickModeling_hippo
SbTickModeling_hplot = HEPVis_SWIG_Python.SbTickModeling_hplot
SbPainting_uniform = HEPVis_SWIG_Python.SbPainting_uniform
SbPainting_by_value = HEPVis_SWIG_Python.SbPainting_by_value
SbPainting_by_level = HEPVis_SWIG_Python.SbPainting_by_level
SbPainting_grey_scale = HEPVis_SWIG_Python.SbPainting_grey_scale
SbPainting_violet_to_red = HEPVis_SWIG_Python.SbPainting_violet_to_red
SbFont_ROOT_12 = HEPVis_SWIG_Python.SbFont_ROOT_12
SbFont_ROOT_22 = HEPVis_SWIG_Python.SbFont_ROOT_22
SbFont_ROOT_32 = HEPVis_SWIG_Python.SbFont_ROOT_32
SbFont_ROOT_42 = HEPVis_SWIG_Python.SbFont_ROOT_42
SbFont_ROOT_52 = HEPVis_SWIG_Python.SbFont_ROOT_52
SbFont_ROOT_62 = HEPVis_SWIG_Python.SbFont_ROOT_62
SbFont_ROOT_72 = HEPVis_SWIG_Python.SbFont_ROOT_72
SbFont_ROOT_82 = HEPVis_SWIG_Python.SbFont_ROOT_82
SbFont_ROOT_92 = HEPVis_SWIG_Python.SbFont_ROOT_92
SbFont_ROOT_102 = HEPVis_SWIG_Python.SbFont_ROOT_102
SbFont_ROOT_112 = HEPVis_SWIG_Python.SbFont_ROOT_112
SbFont_ROOT_122 = HEPVis_SWIG_Python.SbFont_ROOT_122
SbFont_ROOT_132 = HEPVis_SWIG_Python.SbFont_ROOT_132
SbFont_ROOT_142 = HEPVis_SWIG_Python.SbFont_ROOT_142
SbFont_Hershey = HEPVis_SWIG_Python.SbFont_Hershey
SbFont_times = HEPVis_SWIG_Python.SbFont_times
SbLightModel_base_color = HEPVis_SWIG_Python.SbLightModel_base_color
SbLightModel_phong = HEPVis_SWIG_Python.SbLightModel_phong
SbPrimitivePoints = HEPVis_SWIG_Python.SbPrimitivePoints
SbPrimitiveLineStrip = HEPVis_SWIG_Python.SbPrimitiveLineStrip
SbPrimitiveLineLoop = HEPVis_SWIG_Python.SbPrimitiveLineLoop
SbPrimitiveLines = HEPVis_SWIG_Python.SbPrimitiveLines
SbPrimitivePolygon = HEPVis_SWIG_Python.SbPrimitivePolygon
class SbPainterContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fRed = property(HEPVis_SWIG_Python.SbPainterContext_fRed_get, HEPVis_SWIG_Python.SbPainterContext_fRed_set)
    fGreen = property(HEPVis_SWIG_Python.SbPainterContext_fGreen_get, HEPVis_SWIG_Python.SbPainterContext_fGreen_set)
    fBlue = property(HEPVis_SWIG_Python.SbPainterContext_fBlue_get, HEPVis_SWIG_Python.SbPainterContext_fBlue_set)
    fLineWidth = property(HEPVis_SWIG_Python.SbPainterContext_fLineWidth_get, HEPVis_SWIG_Python.SbPainterContext_fLineWidth_set)
    fLinePattern = property(HEPVis_SWIG_Python.SbPainterContext_fLinePattern_get, HEPVis_SWIG_Python.SbPainterContext_fLinePattern_set)
    fMarkerSize = property(HEPVis_SWIG_Python.SbPainterContext_fMarkerSize_get, HEPVis_SWIG_Python.SbPainterContext_fMarkerSize_set)
    fMarkerStyle = property(HEPVis_SWIG_Python.SbPainterContext_fMarkerStyle_get, HEPVis_SWIG_Python.SbPainterContext_fMarkerStyle_set)
    fAreaStyle = property(HEPVis_SWIG_Python.SbPainterContext_fAreaStyle_get, HEPVis_SWIG_Python.SbPainterContext_fAreaStyle_set)
    fPolygonMode = property(HEPVis_SWIG_Python.SbPainterContext_fPolygonMode_get, HEPVis_SWIG_Python.SbPainterContext_fPolygonMode_set)

    def __init__(self):
        HEPVis_SWIG_Python.SbPainterContext_swiginit(self, HEPVis_SWIG_Python.new_SbPainterContext())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainterContext

# Register SbPainterContext in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPainterContext_swigregister(SbPainterContext)

class SbPainter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainter

    def setWindowSize(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPainter_setWindowSize(self, arg2, arg3)

    def enableEdges(self, arg2):
        return HEPVis_SWIG_Python.SbPainter_enableEdges(self, arg2)

    def beginTraversal(self):
        return HEPVis_SWIG_Python.SbPainter_beginTraversal(self)

    def clearColorBuffer(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPainter_clearColorBuffer(self, arg2, arg3, arg4)

    def drawPrimitive(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return HEPVis_SWIG_Python.SbPainter_drawPrimitive(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def endTraversal(self):
        return HEPVis_SWIG_Python.SbPainter_endTraversal(self)

# Register SbPainter in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPainter_swigregister(SbPainter)

class SbPainterPS(SbPainter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbPainterPS_swiginit(self, HEPVis_SWIG_Python.new_SbPainterPS())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainterPS

    def beginTraversal(self):
        return HEPVis_SWIG_Python.SbPainterPS_beginTraversal(self)

    def clearColorBuffer(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPainterPS_clearColorBuffer(self, arg2, arg3, arg4)

    def drawPrimitive(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return HEPVis_SWIG_Python.SbPainterPS_drawPrimitive(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def endTraversal(self):
        return HEPVis_SWIG_Python.SbPainterPS_endTraversal(self)

    def setColorScheme(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_setColorScheme(self, arg2)

    def setOrientation(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_setOrientation(self, arg2)

    def setBackgroundDrawn(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_setBackgroundDrawn(self, arg2)

    def setBitsPerPixel(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_setBitsPerPixel(self, arg2)

    def setLineWidth(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_setLineWidth(self, arg2)

    def getStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_getStream(self)

    def setFileName(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_setFileName(self, arg2)

    def getFileName(self):
        return HEPVis_SWIG_Python.SbPainterPS_getFileName(self)

    def openFileForWriting(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_openFileForWriting(self, arg2)

    def closeStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_closeStream(self)

    def putPageScaleInStream(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPainterPS_putPageScaleInStream(self, arg2, arg3)

    def putSaveStateInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putSaveStateInStream(self)

    def putRestoreStateInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putRestoreStateInStream(self)

    def putTranslationInStream(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPainterPS_putTranslationInStream(self, arg2, arg3)

    def putScaleInStream(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPainterPS_putScaleInStream(self, arg2, arg3)

    def putBeginPageInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putBeginPageInStream(self)

    def putEndPageInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putEndPageInStream(self)

    def putRGB_InStream(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPainterPS_putRGB_InStream(self, arg2, arg3, arg4)

    def putMarkerSizeInStream(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_putMarkerSizeInStream(self, arg2)

    def putMarkerStyleInStream(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_putMarkerStyleInStream(self, arg2)

    def putBackgroundInStream(self, arg2, arg3, arg4, arg5, arg6):
        return HEPVis_SWIG_Python.SbPainterPS_putBackgroundInStream(self, arg2, arg3, arg4, arg5, arg6)

    def putFrameInStream(self, arg2, arg3, arg4, arg5, arg6):
        return HEPVis_SWIG_Python.SbPainterPS_putFrameInStream(self, arg2, arg3, arg4, arg5, arg6)

    def putRotateInStream(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_putRotateInStream(self, arg2)

    def putNewPathInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putNewPathInStream(self)

    def putStrokeInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putStrokeInStream(self)

    def putFillInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putFillInStream(self)

    def putClosePathInStream(self):
        return HEPVis_SWIG_Python.SbPainterPS_putClosePathInStream(self)

    def putCapInStream(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_putCapInStream(self, arg2)

    def putLineToInStream(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPainterPS_putLineToInStream(self, arg2, arg3)

    def putMoveInStream(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPainterPS_putMoveInStream(self, arg2, arg3)

    def putCircleInStream(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPainterPS_putCircleInStream(self, arg2, arg3, arg4)

    def putLineWidthInStream(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_putLineWidthInStream(self, arg2)

    def putLinePatternInStream(self, arg2):
        return HEPVis_SWIG_Python.SbPainterPS_putLinePatternInStream(self, arg2)

    def putImageInStream(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPainterPS_putImageInStream(self, arg2, arg3, arg4)

# Register SbPainterPS in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPainterPS_swigregister(SbPainterPS)


def figure2bitmap(aW, aH, aFigure):
    return HEPVis_SWIG_Python.figure2bitmap(aW, aH, aFigure)

def rotateBitmap(aWidth, aHeight, aCols, aBitmap):
    return HEPVis_SWIG_Python.rotateBitmap(aWidth, aHeight, aCols, aBitmap)

def createBarBitmap(aWidth, aHeight):
    return HEPVis_SWIG_Python.createBarBitmap(aWidth, aHeight)

def rotatePixmap(aWidth, aHeight, aPixmap):
    return HEPVis_SWIG_Python.rotatePixmap(aWidth, aHeight, aPixmap)

def GIFToGL(aWidth, aHeight, aData, aColorNumber, aReds, aGreens, aBlues, aTransparent):
    return HEPVis_SWIG_Python.GIFToGL(aWidth, aHeight, aData, aColorNumber, aReds, aGreens, aBlues, aTransparent)

def JPEGToGL(aWidth, aHeight, aData):
    return HEPVis_SWIG_Python.JPEGToGL(aWidth, aHeight, aData)

def getRGB(aValue, aRed, aGreen, aBlue):
    return HEPVis_SWIG_Python.getRGB(aValue, aRed, aGreen, aBlue)

def FITSToGL(aWidth, aHeight, aData):
    return HEPVis_SWIG_Python.FITSToGL(aWidth, aHeight, aData)
class SbPlottableObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableObject

    def isValid(self):
        return HEPVis_SWIG_Python.SbPlottableObject_isValid(self)

    def cast(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableObject_cast(self, arg2)

    def getInfos(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableObject_getInfos(self, arg2)

    def getName(self):
        return HEPVis_SWIG_Python.SbPlottableObject_getName(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.SbPlottableObject_getLabel(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.SbPlottableObject_getLegend(self)

    def getDimension(self):
        return HEPVis_SWIG_Python.SbPlottableObject_getDimension(self)

# Register SbPlottableObject in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottableObject_swigregister(SbPlottableObject)

class SbPlottableBins1D(SbPlottableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableBins1D

    def getBinsSumOfWeightsRange(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getBinsSumOfWeightsRange(self, arg2, arg3)

    def getAxisNumberOfBins(self):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisNumberOfBins(self)

    def getAxisMinimum(self):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisMinimum(self)

    def getAxisMaximum(self):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisMaximum(self)

    def getBinLowerEdge(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getBinLowerEdge(self, arg2)

    def getBinUpperEdge(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getBinUpperEdge(self, arg2)

    def getBinNumberOfEntries(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getBinNumberOfEntries(self, arg2)

    def getBinSumOfWeights(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getBinSumOfWeights(self, arg2)

    def getBinBar(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins1D_getBinBar(self, arg2)

# Register SbPlottableBins1D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottableBins1D_swigregister(SbPlottableBins1D)

class SbPlottableBins2D(SbPlottableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableBins2D

    def getBinsSumOfWeightsRange(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinsSumOfWeightsRange(self, arg2, arg3)

    def getAxisNumberOfBinsX(self):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisNumberOfBinsX(self)

    def getAxisMinimumX(self):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMinimumX(self)

    def getAxisMaximumX(self):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMaximumX(self)

    def getAxisNumberOfBinsY(self):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisNumberOfBinsY(self)

    def getAxisMinimumY(self):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMinimumY(self)

    def getAxisMaximumY(self):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMaximumY(self)

    def getBinLowerEdgeX(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinLowerEdgeX(self, arg2)

    def getBinUpperEdgeX(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinUpperEdgeX(self, arg2)

    def getBinLowerEdgeY(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinLowerEdgeY(self, arg2)

    def getBinUpperEdgeY(self, arg2):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinUpperEdgeY(self, arg2)

    def getBinNumberOfEntries(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinNumberOfEntries(self, arg2, arg3)

    def getBinSumOfWeights(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinSumOfWeights(self, arg2, arg3)

    def getBinBar(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPlottableBins2D_getBinBar(self, arg2, arg3)

# Register SbPlottableBins2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottableBins2D_swigregister(SbPlottableBins2D)

class SbPlottablePoints2D(SbPlottableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePoints2D

    def getAxisMinimumX(self):
        return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMinimumX(self)

    def getAxisMaximumX(self):
        return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMaximumX(self)

    def getAxisMinimumY(self):
        return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMinimumY(self)

    def getAxisMaximumY(self):
        return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMaximumY(self)

    def getNumberOfPoints(self):
        return HEPVis_SWIG_Python.SbPlottablePoints2D_getNumberOfPoints(self)

    def getIthPoint(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPlottablePoints2D_getIthPoint(self, arg2, arg3, arg4)

# Register SbPlottablePoints2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottablePoints2D_swigregister(SbPlottablePoints2D)

class SbPlottablePoints3D(SbPlottableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePoints3D

    def getAxisMinimumX(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumX(self)

    def getAxisMaximumX(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumX(self)

    def getAxisMinimumY(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumY(self)

    def getAxisMaximumY(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumY(self)

    def getAxisMinimumZ(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumZ(self)

    def getAxisMaximumZ(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumZ(self)

    def getNumberOfPoints(self):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getNumberOfPoints(self)

    def getIthPoint(self, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbPlottablePoints3D_getIthPoint(self, arg2, arg3, arg4, arg5)

# Register SbPlottablePoints3D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottablePoints3D_swigregister(SbPlottablePoints3D)

class SbPlottableFunction1D(SbPlottableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableFunction1D

    def value(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPlottableFunction1D_value(self, arg2, arg3)

    def getNumberOfStepsX(self):
        return HEPVis_SWIG_Python.SbPlottableFunction1D_getNumberOfStepsX(self)

    def getMinimumX(self):
        return HEPVis_SWIG_Python.SbPlottableFunction1D_getMinimumX(self)

    def getMaximumX(self):
        return HEPVis_SWIG_Python.SbPlottableFunction1D_getMaximumX(self)

# Register SbPlottableFunction1D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottableFunction1D_swigregister(SbPlottableFunction1D)

class SbPlottableFunction2D(SbPlottableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableFunction2D

    def value(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_value(self, arg2, arg3, arg4)

    def getNumberOfStepsX(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfStepsX(self)

    def getMinimumX(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getMinimumX(self)

    def getMaximumX(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getMaximumX(self)

    def getNumberOfStepsY(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfStepsY(self)

    def getMinimumY(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getMinimumY(self)

    def getMaximumY(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getMaximumY(self)

    def getNumberOfPoints(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfPoints(self)

    def getIthPoint(self, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_getIthPoint(self, arg2, arg3, arg4, arg5)

    def setIthPoint(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_setIthPoint(self, arg2, arg3, arg4)

    def dragger_update_points(self):
        return HEPVis_SWIG_Python.SbPlottableFunction2D_dragger_update_points(self)

# Register SbPlottableFunction2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottableFunction2D_swigregister(SbPlottableFunction2D)

class SbPlottablePrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePrimitive

    def cast(self, arg2):
        return HEPVis_SWIG_Python.SbPlottablePrimitive_cast(self, arg2)

# Register SbPlottablePrimitive in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlottablePrimitive_swigregister(SbPlottablePrimitive)

SbPlottableObject_s = HEPVis_SWIG_Python.SbPlottableObject_s
SbPlottableBins1D_s = HEPVis_SWIG_Python.SbPlottableBins1D_s
SbPlottableBins2D_s = HEPVis_SWIG_Python.SbPlottableBins2D_s
SbPlottablePoints2D_s = HEPVis_SWIG_Python.SbPlottablePoints2D_s
SbPlottablePoints3D_s = HEPVis_SWIG_Python.SbPlottablePoints3D_s
SbPlottableFunction1D_s = HEPVis_SWIG_Python.SbPlottableFunction1D_s
SbPlottableFunction2D_s = HEPVis_SWIG_Python.SbPlottableFunction2D_s
SbPlottablePrimitive_s = HEPVis_SWIG_Python.SbPlottablePrimitive_s
Sb_plotter = HEPVis_SWIG_Python.Sb_plotter
Sb_data = HEPVis_SWIG_Python.Sb_data
class SbRotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRotation

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbRotation_swiginit(self, HEPVis_SWIG_Python.new_SbRotation(*args))

    def multVec(self, src, dst):
        return HEPVis_SWIG_Python.SbRotation_multVec(self, src, dst)

# Register SbRotation in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbRotation_swigregister(SbRotation)

class HVPoint3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.HVPoint3D_swiginit(self, HEPVis_SWIG_Python.new_HVPoint3D(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HVPoint3D

# Register HVPoint3D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.HVPoint3D_swigregister(HVPoint3D)

DEFAULT_NUMBER_OF_STEPS = HEPVis_SWIG_Python.DEFAULT_NUMBER_OF_STEPS
class SbFacet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbFacet_swiginit(self, HEPVis_SWIG_Python.new_SbFacet(*args))

    def isEqual(self, aFrom):
        return HEPVis_SWIG_Python.SbFacet_isEqual(self, aFrom)

    def GetEdge(self, i, v, f):
        return HEPVis_SWIG_Python.SbFacet_GetEdge(self, i, v, f)

    def Set(self, v):
        return HEPVis_SWIG_Python.SbFacet_Set(self, v)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFacet

# Register SbFacet in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbFacet_swigregister(SbFacet)

class SbPolyhedron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setName(self, aName):
        return HEPVis_SWIG_Python.SbPolyhedron_setName(self, aName)

    def getName(self):
        return HEPVis_SWIG_Python.SbPolyhedron_getName(self)

    def Set(self, Nvert, aV, Nface, aF):
        return HEPVis_SWIG_Python.SbPolyhedron_Set(self, Nvert, aV, Nface, aF)

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbPolyhedron_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedron(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedron

    def Empty(self):
        return HEPVis_SWIG_Python.SbPolyhedron_Empty(self)

    def GetNoVertices(self):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNoVertices(self)

    def GetNoFacets(self):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNoFacets(self)

    def Transform(self, rot, trans):
        return HEPVis_SWIG_Python.SbPolyhedron_Transform(self, rot, trans)

    def GetNextVertexIndex(self, index, edgeFlag):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextVertexIndex(self, index, edgeFlag)

    def GetVertex(self, index):
        return HEPVis_SWIG_Python.SbPolyhedron_GetVertex(self, index)

    def GetVertexFast(self, index):
        return HEPVis_SWIG_Python.SbPolyhedron_GetVertexFast(self, index)

    def GetPV(self):
        return HEPVis_SWIG_Python.SbPolyhedron_GetPV(self)

    def GetPF(self):
        return HEPVis_SWIG_Python.SbPolyhedron_GetPF(self)

    def GetNextVertex(self, *args):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextVertex(self, *args)

    def GetNextEdgeIndeces(self, *args):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextEdgeIndeces(self, *args)

    def GetNextEdge(self, *args):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextEdge(self, *args)

    def GetFacet(self, *args):
        return HEPVis_SWIG_Python.SbPolyhedron_GetFacet(self, *args)

    def GetNextFacet(self, n, nodes, edgeFlags=None, normals=None):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextFacet(self, n, nodes, edgeFlags, normals)

    def GetNormal(self, iFace):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNormal(self, iFace)

    def GetUnitNormal(self, iFace):
        return HEPVis_SWIG_Python.SbPolyhedron_GetUnitNormal(self, iFace)

    def GetNextNormal(self, normal):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextNormal(self, normal)

    def GetNextUnitNormal(self, normal):
        return HEPVis_SWIG_Python.SbPolyhedron_GetNextUnitNormal(self, normal)

    def add(self, p):
        return HEPVis_SWIG_Python.SbPolyhedron_add(self, p)

    def subtract(self, p):
        return HEPVis_SWIG_Python.SbPolyhedron_subtract(self, p)

    def intersect(self, p):
        return HEPVis_SWIG_Python.SbPolyhedron_intersect(self, p)

    def GetSurfaceArea(self):
        return HEPVis_SWIG_Python.SbPolyhedron_GetSurfaceArea(self)

    def GetVolume(self):
        return HEPVis_SWIG_Python.SbPolyhedron_GetVolume(self)

    def isEqual(self, p):
        return HEPVis_SWIG_Python.SbPolyhedron_isEqual(self, p)

    def isConsistent(self, arg2=None):
        return HEPVis_SWIG_Python.SbPolyhedron_isConsistent(self, arg2)

    def dump(self):
        return HEPVis_SWIG_Python.SbPolyhedron_dump(self)

    @staticmethod
    def GetNumberOfRotationSteps():
        return HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps()

    @staticmethod
    def SetNumberOfRotationSteps(n):
        return HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps(n)

    @staticmethod
    def ResetNumberOfRotationSteps():
        return HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps()

# Register SbPolyhedron in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedron_swigregister(SbPolyhedron)

def SbPolyhedron_GetNumberOfRotationSteps():
    return HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps()

def SbPolyhedron_SetNumberOfRotationSteps(n):
    return HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps(n)

def SbPolyhedron_ResetNumberOfRotationSteps():
    return HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps()


def Sb_iabs(a):
    return HEPVis_SWIG_Python.Sb_iabs(a)
class SbPolyhedronTrd2(SbPolyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dx1, Dx2, Dy1, Dy2, Dz):
        HEPVis_SWIG_Python.SbPolyhedronTrd2_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronTrd2(Dx1, Dx2, Dy1, Dy2, Dz))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrd2

# Register SbPolyhedronTrd2 in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronTrd2_swigregister(SbPolyhedronTrd2)

class SbPolyhedronTrd1(SbPolyhedronTrd2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dx1, Dx2, Dy, Dz):
        HEPVis_SWIG_Python.SbPolyhedronTrd1_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronTrd1(Dx1, Dx2, Dy, Dz))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrd1

# Register SbPolyhedronTrd1 in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronTrd1_swigregister(SbPolyhedronTrd1)

class SbPolyhedronBox(SbPolyhedronTrd2):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dx, Dy, Dz):
        HEPVis_SWIG_Python.SbPolyhedronBox_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronBox(Dx, Dy, Dz))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronBox

# Register SbPolyhedronBox in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronBox_swigregister(SbPolyhedronBox)

class SbPolyhedronTrap(SbPolyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dz, Theta, Phi, Dy1, Dx1, Dx2, Alp1, Dy2, Dx3, Dx4, Alp2):
        HEPVis_SWIG_Python.SbPolyhedronTrap_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronTrap(Dz, Theta, Phi, Dy1, Dx1, Dx2, Alp1, Dy2, Dx3, Dx4, Alp2))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrap

# Register SbPolyhedronTrap in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronTrap_swigregister(SbPolyhedronTrap)

class SbPolyhedronPara(SbPolyhedronTrap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dx, Dy, Dz, Alpha, Theta, Phi):
        HEPVis_SWIG_Python.SbPolyhedronPara_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronPara(Dx, Dy, Dz, Alpha, Theta, Phi))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPara

# Register SbPolyhedronPara in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronPara_swigregister(SbPolyhedronPara)

class SbPolyhedronCons(SbPolyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rmn1, Rmx1, Rmn2, Rmx2, Dz, Phi1, Dphi, nstep=0):
        HEPVis_SWIG_Python.SbPolyhedronCons_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronCons(Rmn1, Rmx1, Rmn2, Rmx2, Dz, Phi1, Dphi, nstep))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronCons

# Register SbPolyhedronCons in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronCons_swigregister(SbPolyhedronCons)

class SbPolyhedronCone(SbPolyhedronCons):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rmn1, Rmx1, Rmn2, Rmx2, Dz, nstep=0):
        HEPVis_SWIG_Python.SbPolyhedronCone_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronCone(Rmn1, Rmx1, Rmn2, Rmx2, Dz, nstep))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronCone

# Register SbPolyhedronCone in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronCone_swigregister(SbPolyhedronCone)

class SbPolyhedronTubs(SbPolyhedronCons):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rmin, Rmax, Dz, Phi1, Dphi, nstep=0):
        HEPVis_SWIG_Python.SbPolyhedronTubs_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronTubs(Rmin, Rmax, Dz, Phi1, Dphi, nstep))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTubs

# Register SbPolyhedronTubs in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronTubs_swigregister(SbPolyhedronTubs)

class SbPolyhedronTube(SbPolyhedronCons):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rmin, Rmax, Dz, nstep=0):
        HEPVis_SWIG_Python.SbPolyhedronTube_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronTube(Rmin, Rmax, Dz, nstep))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTube

# Register SbPolyhedronTube in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronTube_swigregister(SbPolyhedronTube)

class SbPolyhedronPgon(SbPolyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, phi, dphi, npdv, nz, z, rmin, rmax):
        HEPVis_SWIG_Python.SbPolyhedronPgon_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronPgon(phi, dphi, npdv, nz, z, rmin, rmax))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPgon

# Register SbPolyhedronPgon in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronPgon_swigregister(SbPolyhedronPgon)

class SbPolyhedronPcon(SbPolyhedronPgon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, phi, dphi, nz, z, rmin, rmax):
        HEPVis_SWIG_Python.SbPolyhedronPcon_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronPcon(phi, dphi, nz, z, rmin, rmax))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPcon

# Register SbPolyhedronPcon in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronPcon_swigregister(SbPolyhedronPcon)

class SbPolyhedronSphere(SbPolyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rmin, rmax, phi, dphi, the, dthe, nphi=0, nthe=0):
        HEPVis_SWIG_Python.SbPolyhedronSphere_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronSphere(rmin, rmax, phi, dphi, the, dthe, nphi, nthe))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronSphere

# Register SbPolyhedronSphere in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronSphere_swigregister(SbPolyhedronSphere)

class SbPolyhedronTorus(SbPolyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rmin, rmax, rtor, phi, dphi, nphi=0, nthe=0):
        HEPVis_SWIG_Python.SbPolyhedronTorus_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronTorus(rmin, rmax, rtor, phi, dphi, nphi, nthe))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTorus

# Register SbPolyhedronTorus in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronTorus_swigregister(SbPolyhedronTorus)

class SbPolyhedronProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNION = HEPVis_SWIG_Python.SbPolyhedronProcessor_UNION
    INTERSECTION = HEPVis_SWIG_Python.SbPolyhedronProcessor_INTERSECTION
    SUBTRACTION = HEPVis_SWIG_Python.SbPolyhedronProcessor_SUBTRACTION

    def __init__(self):
        HEPVis_SWIG_Python.SbPolyhedronProcessor_swiginit(self, HEPVis_SWIG_Python.new_SbPolyhedronProcessor())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronProcessor

    def push_back(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPolyhedronProcessor_push_back(self, arg2, arg3)

    def execute(self, arg2):
        return HEPVis_SWIG_Python.SbPolyhedronProcessor_execute(self, arg2)

    def clear(self):
        return HEPVis_SWIG_Python.SbPolyhedronProcessor_clear(self)

    def is_same_op(self):
        return HEPVis_SWIG_Python.SbPolyhedronProcessor_is_same_op(self)

    def execute1(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbPolyhedronProcessor_execute1(self, arg2, arg3)

# Register SbPolyhedronProcessor in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPolyhedronProcessor_swigregister(SbPolyhedronProcessor)


def SbSTRDUP(arg1):
    return HEPVis_SWIG_Python.SbSTRDUP(arg1)

def SbSTRDEL(arg1):
    return HEPVis_SWIG_Python.SbSTRDEL(arg1)

def SbSTREMPTY(arg1):
    return HEPVis_SWIG_Python.SbSTREMPTY(arg1)

def SbStringGetWords(arg1, arg2):
    return HEPVis_SWIG_Python.SbStringGetWords(arg1, arg2)

def SbStringGetLines(arg1):
    return HEPVis_SWIG_Python.SbStringGetLines(arg1)

def SbStringPrintF(*args):
    return HEPVis_SWIG_Python.SbStringPrintF(*args)

def SbStringFind(arg1, arg2):
    return HEPVis_SWIG_Python.SbStringFind(arg1, arg2)

def SbStringReverseFind(arg1, arg2):
    return HEPVis_SWIG_Python.SbStringReverseFind(arg1, arg2)

def SbStringDelete(arg1):
    return HEPVis_SWIG_Python.SbStringDelete(arg1)

def SbStringCreateEmpty(arg1):
    return HEPVis_SWIG_Python.SbStringCreateEmpty(arg1)

def SbStringIsTTF(arg1):
    return HEPVis_SWIG_Python.SbStringIsTTF(arg1)

def SbString_isenv(arg1):
    return HEPVis_SWIG_Python.SbString_isenv(arg1)

def SbString_getenv(arg1, arg2):
    return HEPVis_SWIG_Python.SbString_getenv(arg1, arg2)

def SbStringGetenv(arg1):
    return HEPVis_SWIG_Python.SbStringGetenv(arg1)

def SbStringReplace(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SbStringReplace(arg1, arg2, arg3)

def SbStringSuffix(arg1):
    return HEPVis_SWIG_Python.SbStringSuffix(arg1)
SbStringNotFound = HEPVis_SWIG_Python.SbStringNotFound

def SbConvertToInt(aString, aValue):
    return HEPVis_SWIG_Python.SbConvertToInt(aString, aValue)

def SbConvertToUnsignedLong(aString, aValue):
    return HEPVis_SWIG_Python.SbConvertToUnsignedLong(aString, aValue)

def SbConvertToFloat(aString, aValue):
    return HEPVis_SWIG_Python.SbConvertToFloat(aString, aValue)

def SbConvertToBool(aString, aValue):
    return HEPVis_SWIG_Python.SbConvertToBool(aString, aValue)

def SbGetWords(aString, aLimiter):
    return HEPVis_SWIG_Python.SbGetWords(aString, aLimiter)

def SbGetLines(aString):
    return HEPVis_SWIG_Python.SbGetLines(aString)
class SbStyleColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleColor

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbStyleColor_swiginit(self, HEPVis_SWIG_Python.new_SbStyleColor(*args))

# Register SbStyleColor in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbStyleColor_swigregister(SbStyleColor)

class SbStyleColormap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getColor(self, aIndex):
        return HEPVis_SWIG_Python.SbStyleColormap_getColor(self, aIndex)

    def getStringColor(self, aIndex):
        return HEPVis_SWIG_Python.SbStyleColormap_getStringColor(self, aIndex)

    def __init__(self):
        HEPVis_SWIG_Python.SbStyleColormap_swiginit(self, HEPVis_SWIG_Python.new_SbStyleColormap())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleColormap

# Register SbStyleColormap in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbStyleColormap_swigregister(SbStyleColormap)

class SbStyleDefaultColormap(SbStyleColormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbStyleDefaultColormap_swiginit(self, HEPVis_SWIG_Python.new_SbStyleDefaultColormap())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleDefaultColormap

# Register SbStyleDefaultColormap in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbStyleDefaultColormap_swigregister(SbStyleDefaultColormap)

class SbStyleROOT_Colormap(SbStyleColormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbStyleROOT_Colormap_swiginit(self, HEPVis_SWIG_Python.new_SbStyleROOT_Colormap())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleROOT_Colormap

# Register SbStyleROOT_Colormap in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbStyleROOT_Colormap_swigregister(SbStyleROOT_Colormap)

class SbStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyle

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbStyle_swiginit(self, HEPVis_SWIG_Python.new_SbStyle(*args))

    def copy(self, aFrom):
        return HEPVis_SWIG_Python.SbStyle_copy(self, aFrom)

    def isEqual(self, aFrom):
        return HEPVis_SWIG_Python.SbStyle_isEqual(self, aFrom)

    def reset(self):
        return HEPVis_SWIG_Python.SbStyle_reset(self)

    def getString(self):
        return HEPVis_SWIG_Python.SbStyle_getString(self)

    def setColor(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setColor(self, aValue)

    def getColor(self):
        return HEPVis_SWIG_Python.SbStyle_getColor(self)

    def setHighlightColor(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setHighlightColor(self, aValue)

    def getHighlightColor(self):
        return HEPVis_SWIG_Python.SbStyle_getHighlightColor(self)

    def setLineWidth(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setLineWidth(self, aValue)

    def getLineWidth(self):
        return HEPVis_SWIG_Python.SbStyle_getLineWidth(self)

    def getTransparency(self):
        return HEPVis_SWIG_Python.SbStyle_getTransparency(self)

    def setTransparency(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setTransparency(self, aValue)

    def setMarkerStyle(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setMarkerStyle(self, aValue)

    def getMarkerStyle(self):
        return HEPVis_SWIG_Python.SbStyle_getMarkerStyle(self)

    def setMarkerSize(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setMarkerSize(self, aValue)

    def getMarkerSize(self):
        return HEPVis_SWIG_Python.SbStyle_getMarkerSize(self)

    def setFontSize(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setFontSize(self, aValue)

    def getFontSize(self):
        return HEPVis_SWIG_Python.SbStyle_getFontSize(self)

    def setAreaStyle(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setAreaStyle(self, aValue)

    def getAreaStyle(self):
        return HEPVis_SWIG_Python.SbStyle_getAreaStyle(self)

    def setModeling(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setModeling(self, aValue)

    def getModeling(self):
        return HEPVis_SWIG_Python.SbStyle_getModeling(self)

    def setLightModel(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setLightModel(self, aValue)

    def getLightModel(self):
        return HEPVis_SWIG_Python.SbStyle_getLightModel(self)

    def setTickModeling(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setTickModeling(self, aValue)

    def getTickModeling(self):
        return HEPVis_SWIG_Python.SbStyle_getTickModeling(self)

    def setEncoding(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setEncoding(self, aValue)

    def getEncoding(self):
        return HEPVis_SWIG_Python.SbStyle_getEncoding(self)

    def setSmoothing(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setSmoothing(self, aValue)

    def getSmoothing(self):
        return HEPVis_SWIG_Python.SbStyle_getSmoothing(self)

    def setHinting(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setHinting(self, aValue)

    def getHinting(self):
        return HEPVis_SWIG_Python.SbStyle_getHinting(self)

    def getPaintingPolicy(self):
        return HEPVis_SWIG_Python.SbStyle_getPaintingPolicy(self)

    def setPaintingPolicy(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setPaintingPolicy(self, aValue)

    def getHatchingPolicy(self):
        return HEPVis_SWIG_Python.SbStyle_getHatchingPolicy(self)

    def setHatchingPolicy(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setHatchingPolicy(self, aValue)

    def getProjectionType(self):
        return HEPVis_SWIG_Python.SbStyle_getProjectionType(self)

    def setProjectionType(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setProjectionType(self, aValue)

    def setLinePattern(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setLinePattern(self, aValue)

    def getLinePattern(self):
        return HEPVis_SWIG_Python.SbStyle_getLinePattern(self)

    def setFontName(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setFontName(self, aValue)

    def getFontName(self):
        return HEPVis_SWIG_Python.SbStyle_getFontName(self)

    def setDivisions(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setDivisions(self, aValue)

    def getDivisions(self):
        return HEPVis_SWIG_Python.SbStyle_getDivisions(self)

    def setRotationSteps(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setRotationSteps(self, aValue)

    def getRotationSteps(self):
        return HEPVis_SWIG_Python.SbStyle_getRotationSteps(self)

    def setOffset(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setOffset(self, aValue)

    def getOffset(self):
        return HEPVis_SWIG_Python.SbStyle_getOffset(self)

    def setStripWidth(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setStripWidth(self, aValue)

    def getStripWidth(self):
        return HEPVis_SWIG_Python.SbStyle_getStripWidth(self)

    def setAngle(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setAngle(self, aValue)

    def getAngle(self):
        return HEPVis_SWIG_Python.SbStyle_getAngle(self)

    def setScale(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setScale(self, aValue)

    def getScale(self):
        return HEPVis_SWIG_Python.SbStyle_getScale(self)

    def setBarOffset(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setBarOffset(self, aValue)

    def getBarOffset(self):
        return HEPVis_SWIG_Python.SbStyle_getBarOffset(self)

    def setBarWidth(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setBarWidth(self, aValue)

    def getBarWidth(self):
        return HEPVis_SWIG_Python.SbStyle_getBarWidth(self)

    def setMultiNodeLimit(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setMultiNodeLimit(self, aValue)

    def getMultiNodeLimit(self):
        return HEPVis_SWIG_Python.SbStyle_getMultiNodeLimit(self)

    def setSpacing(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setSpacing(self, aValue)

    def getSpacing(self):
        return HEPVis_SWIG_Python.SbStyle_getSpacing(self)

    def setVisible(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setVisible(self, aValue)

    def getVisible(self):
        return HEPVis_SWIG_Python.SbStyle_getVisible(self)

    def setEditable(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setEditable(self, aValue)

    def getEditable(self):
        return HEPVis_SWIG_Python.SbStyle_getEditable(self)

    def setAutomated(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setAutomated(self, aValue)

    def getAutomated(self):
        return HEPVis_SWIG_Python.SbStyle_getAutomated(self)

    def setCut(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setCut(self, aValue)

    def getCut(self):
        return HEPVis_SWIG_Python.SbStyle_getCut(self)

    def setOptions(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setOptions(self, aValue)

    def getOptions(self):
        return HEPVis_SWIG_Python.SbStyle_getOptions(self)

    def setColorMapping(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setColorMapping(self, aValue)

    def getColorMapping(self):
        return HEPVis_SWIG_Python.SbStyle_getColorMapping(self)

    def setEnforced(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setEnforced(self, aValue)

    def getEnforced(self):
        return HEPVis_SWIG_Python.SbStyle_getEnforced(self)

    def setTranslation(self, aValue):
        return HEPVis_SWIG_Python.SbStyle_setTranslation(self, aValue)

    def getTranslation(self):
        return HEPVis_SWIG_Python.SbStyle_getTranslation(self)

    @staticmethod
    def hls2rgb(hue, light, satur):
        return HEPVis_SWIG_Python.SbStyle_hls2rgb(hue, light, satur)

    @staticmethod
    def stringToColor(aString, aColor):
        return HEPVis_SWIG_Python.SbStyle_stringToColor(aString, aColor)

    @staticmethod
    def colorToString(aColor, aString):
        return HEPVis_SWIG_Python.SbStyle_colorToString(aColor, aString)

    @staticmethod
    def stringToMarkerStyle(aString, aValue):
        return HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle(aString, aValue)

    @staticmethod
    def markerStyleToString(aValue):
        return HEPVis_SWIG_Python.SbStyle_markerStyleToString(aValue)

    @staticmethod
    def stringToAreaStyle(aString, aValue):
        return HEPVis_SWIG_Python.SbStyle_stringToAreaStyle(aString, aValue)

    @staticmethod
    def areaStyleToString(aValue):
        return HEPVis_SWIG_Python.SbStyle_areaStyleToString(aValue)

    @staticmethod
    def stringToPaintingPolicy(aString, aValue):
        return HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy(aString, aValue)

    @staticmethod
    def paintingPolicyToString(aValue):
        return HEPVis_SWIG_Python.SbStyle_paintingPolicyToString(aValue)

    @staticmethod
    def stringToHatchingPolicy(aString, aValue):
        return HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy(aString, aValue)

    @staticmethod
    def hatchingPolicyToString(aValue):
        return HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString(aValue)

    @staticmethod
    def stringToProjectionType(aString, aValue):
        return HEPVis_SWIG_Python.SbStyle_stringToProjectionType(aString, aValue)

    @staticmethod
    def projectionTypeToString(aValue):
        return HEPVis_SWIG_Python.SbStyle_projectionTypeToString(aValue)

    @staticmethod
    def stringToLinePattern(aString, aPattern):
        return HEPVis_SWIG_Python.SbStyle_stringToLinePattern(aString, aPattern)

    def setFromString(self, aString, aErrorFunc=None):
        return HEPVis_SWIG_Python.SbStyle_setFromString(self, aString, aErrorFunc)

# Register SbStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbStyle_swigregister(SbStyle)

def SbStyle_hls2rgb(hue, light, satur):
    return HEPVis_SWIG_Python.SbStyle_hls2rgb(hue, light, satur)

def SbStyle_stringToColor(aString, aColor):
    return HEPVis_SWIG_Python.SbStyle_stringToColor(aString, aColor)

def SbStyle_colorToString(aColor, aString):
    return HEPVis_SWIG_Python.SbStyle_colorToString(aColor, aString)

def SbStyle_stringToMarkerStyle(aString, aValue):
    return HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle(aString, aValue)

def SbStyle_markerStyleToString(aValue):
    return HEPVis_SWIG_Python.SbStyle_markerStyleToString(aValue)

def SbStyle_stringToAreaStyle(aString, aValue):
    return HEPVis_SWIG_Python.SbStyle_stringToAreaStyle(aString, aValue)

def SbStyle_areaStyleToString(aValue):
    return HEPVis_SWIG_Python.SbStyle_areaStyleToString(aValue)

def SbStyle_stringToPaintingPolicy(aString, aValue):
    return HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy(aString, aValue)

def SbStyle_paintingPolicyToString(aValue):
    return HEPVis_SWIG_Python.SbStyle_paintingPolicyToString(aValue)

def SbStyle_stringToHatchingPolicy(aString, aValue):
    return HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy(aString, aValue)

def SbStyle_hatchingPolicyToString(aValue):
    return HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString(aValue)

def SbStyle_stringToProjectionType(aString, aValue):
    return HEPVis_SWIG_Python.SbStyle_stringToProjectionType(aString, aValue)

def SbStyle_projectionTypeToString(aValue):
    return HEPVis_SWIG_Python.SbStyle_projectionTypeToString(aValue)

def SbStyle_stringToLinePattern(aString, aPattern):
    return HEPVis_SWIG_Python.SbStyle_stringToLinePattern(aString, aPattern)


def SbSystemIsMacApp(arg1, arg2):
    return HEPVis_SWIG_Python.SbSystemIsMacApp(arg1, arg2)

def SbSystemPutenv(arg1, arg2):
    return HEPVis_SWIG_Python.SbSystemPutenv(arg1, arg2)

def SbSystemPathSeparator():
    return HEPVis_SWIG_Python.SbSystemPathSeparator()

def SbSystemFileSeparator():
    return HEPVis_SWIG_Python.SbSystemFileSeparator()
class SbTestHistogram1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbTestHistogram1D_swiginit(self, HEPVis_SWIG_Python.new_SbTestHistogram1D())

    def name(self):
        return HEPVis_SWIG_Python.SbTestHistogram1D_name(self)

    def title(self):
        return HEPVis_SWIG_Python.SbTestHistogram1D_title(self)

    def xn(self):
        return HEPVis_SWIG_Python.SbTestHistogram1D_xn(self)

    def xmin(self):
        return HEPVis_SWIG_Python.SbTestHistogram1D_xmin(self)

    def xmax(self):
        return HEPVis_SWIG_Python.SbTestHistogram1D_xmax(self)

    def valueRange(self, mn, mx):
        return HEPVis_SWIG_Python.SbTestHistogram1D_valueRange(self, mn, mx)

    def binEntries(self, i):
        return HEPVis_SWIG_Python.SbTestHistogram1D_binEntries(self, i)

    def binWeight(self, i):
        return HEPVis_SWIG_Python.SbTestHistogram1D_binWeight(self, i)

    def binError(self, i):
        return HEPVis_SWIG_Python.SbTestHistogram1D_binError(self, i)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestHistogram1D

# Register SbTestHistogram1D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTestHistogram1D_swigregister(SbTestHistogram1D)

class SbTestHistogram2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SbTestHistogram2D_swiginit(self, HEPVis_SWIG_Python.new_SbTestHistogram2D())

    def name(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_name(self)

    def title(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_title(self)

    def xn(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_xn(self)

    def xmin(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_xmin(self)

    def xmax(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_xmax(self)

    def yn(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_yn(self)

    def ymin(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_ymin(self)

    def ymax(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_ymax(self)

    def ytitle(self):
        return HEPVis_SWIG_Python.SbTestHistogram2D_ytitle(self)

    def valueRange(self, mn, mx):
        return HEPVis_SWIG_Python.SbTestHistogram2D_valueRange(self, mn, mx)

    def binEntries(self, i, j):
        return HEPVis_SWIG_Python.SbTestHistogram2D_binEntries(self, i, j)

    def binWeight(self, i, j):
        return HEPVis_SWIG_Python.SbTestHistogram2D_binWeight(self, i, j)

    def binError(self, i, j):
        return HEPVis_SWIG_Python.SbTestHistogram2D_binError(self, i, j)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestHistogram2D

# Register SbTestHistogram2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTestHistogram2D_swigregister(SbTestHistogram2D)

class SbTestPlottableBins1D(SbPlottableBins1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_isValid(self)

    def cast(self, aClass):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_cast(self, aClass)

    def nativeObject(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_nativeObject(self)

    def getDimension(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getDimension(self)

    def getName(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getName(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getLabel(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getLegend(self)

    def getInfos(self, aWhat):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getInfos(self, aWhat)

    def getBinsSumOfWeightsRange(self, mn, mx):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinsSumOfWeightsRange(self, mn, mx)

    def getAxisNumberOfBins(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisNumberOfBins(self)

    def getAxisMinimum(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisMinimum(self)

    def getAxisMaximum(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisMaximum(self)

    def getBinLowerEdge(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinLowerEdge(self, i)

    def getBinUpperEdge(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinUpperEdge(self, i)

    def getBinNumberOfEntries(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinNumberOfEntries(self, i)

    def getBinSumOfWeights(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinSumOfWeights(self, i)

    def getBinBar(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinBar(self, i)

    def __init__(self, aHistogram):
        HEPVis_SWIG_Python.SbTestPlottableBins1D_swiginit(self, HEPVis_SWIG_Python.new_SbTestPlottableBins1D(aHistogram))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestPlottableBins1D

# Register SbTestPlottableBins1D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTestPlottableBins1D_swigregister(SbTestPlottableBins1D)

class SbTestPlottableBins2D(SbPlottableBins2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_isValid(self)

    def cast(self, aClass):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_cast(self, aClass)

    def nativeObject(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_nativeObject(self)

    def getDimension(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getDimension(self)

    def getName(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getName(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getLabel(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getLegend(self)

    def getInfos(self, aWhat):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getInfos(self, aWhat)

    def getBinsSumOfWeightsRange(self, mn, mx):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinsSumOfWeightsRange(self, mn, mx)

    def getAxisNumberOfBinsX(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisNumberOfBinsX(self)

    def getAxisMinimumX(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMinimumX(self)

    def getAxisMaximumX(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMaximumX(self)

    def getAxisNumberOfBinsY(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisNumberOfBinsY(self)

    def getAxisMinimumY(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMinimumY(self)

    def getAxisMaximumY(self):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMaximumY(self)

    def getBinLowerEdgeX(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinLowerEdgeX(self, i)

    def getBinUpperEdgeX(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinUpperEdgeX(self, i)

    def getBinLowerEdgeY(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinLowerEdgeY(self, i)

    def getBinUpperEdgeY(self, i):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinUpperEdgeY(self, i)

    def getBinNumberOfEntries(self, i, j):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinNumberOfEntries(self, i, j)

    def getBinSumOfWeights(self, i, j):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinSumOfWeights(self, i, j)

    def getBinBar(self, i, j):
        return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinBar(self, i, j)

    def __init__(self, aHistogram):
        HEPVis_SWIG_Python.SbTestPlottableBins2D_swiginit(self, HEPVis_SWIG_Python.new_SbTestPlottableBins2D(aHistogram))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestPlottableBins2D

# Register SbTestPlottableBins2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTestPlottableBins2D_swigregister(SbTestPlottableBins2D)

class SbChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbChar_swiginit(self, HEPVis_SWIG_Python.new_SbChar(*args))
    LATIN = HEPVis_SWIG_Python.SbChar_LATIN
    GREEK = HEPVis_SWIG_Python.SbChar_GREEK
    SPECIAL = HEPVis_SWIG_Python.SbChar_SPECIAL
    NONE = HEPVis_SWIG_Python.SbChar_NONE
    UP = HEPVis_SWIG_Python.SbChar_UP
    DOWN = HEPVis_SWIG_Python.SbChar_DOWN
    fChar = property(HEPVis_SWIG_Python.SbChar_fChar_get, HEPVis_SWIG_Python.SbChar_fChar_set)
    fFont = property(HEPVis_SWIG_Python.SbChar_fFont_get, HEPVis_SWIG_Python.SbChar_fFont_set)
    fYMove = property(HEPVis_SWIG_Python.SbChar_fYMove_get, HEPVis_SWIG_Python.SbChar_fYMove_set)
    fBack = property(HEPVis_SWIG_Python.SbChar_fBack_get, HEPVis_SWIG_Python.SbChar_fBack_set)
    fBar = property(HEPVis_SWIG_Python.SbChar_fBar_get, HEPVis_SWIG_Python.SbChar_fBar_set)
    fCR = property(HEPVis_SWIG_Python.SbChar_fCR_get, HEPVis_SWIG_Python.SbChar_fCR_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbChar

# Register SbChar in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbChar_swigregister(SbChar)

class SbText(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getBBox(arg1, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbText_getBBox(arg1, arg2, arg3, arg4)

    @staticmethod
    def getSubString(arg1, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SbText_getSubString(arg1, arg2, arg3, arg4)

    @staticmethod
    def getAscentDescent(arg1, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbText_getAscentDescent(arg1, arg2, arg3, arg4, arg5)

    @staticmethod
    def decodePlain(arg1):
        return HEPVis_SWIG_Python.SbText_decodePlain(arg1)

    @staticmethod
    def decodePAW(arg1):
        return HEPVis_SWIG_Python.SbText_decodePAW(arg1)

    def __init__(self):
        HEPVis_SWIG_Python.SbText_swiginit(self, HEPVis_SWIG_Python.new_SbText())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbText

# Register SbText in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbText_swigregister(SbText)

def SbText_getBBox(arg1, arg2, arg3, arg4):
    return HEPVis_SWIG_Python.SbText_getBBox(arg1, arg2, arg3, arg4)

def SbText_getSubString(arg1, arg2, arg3, arg4):
    return HEPVis_SWIG_Python.SbText_getSubString(arg1, arg2, arg3, arg4)

def SbText_getAscentDescent(arg1, arg2, arg3, arg4, arg5):
    return HEPVis_SWIG_Python.SbText_getAscentDescent(arg1, arg2, arg3, arg4, arg5)

def SbText_decodePlain(arg1):
    return HEPVis_SWIG_Python.SbText_decodePlain(arg1)

def SbText_decodePAW(arg1):
    return HEPVis_SWIG_Python.SbText_decodePAW(arg1)

class SbTTF_BBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xMin = property(HEPVis_SWIG_Python.SbTTF_BBox_xMin_get, HEPVis_SWIG_Python.SbTTF_BBox_xMin_set)
    yMin = property(HEPVis_SWIG_Python.SbTTF_BBox_yMin_get, HEPVis_SWIG_Python.SbTTF_BBox_yMin_set)
    xMax = property(HEPVis_SWIG_Python.SbTTF_BBox_xMax_get, HEPVis_SWIG_Python.SbTTF_BBox_xMax_set)
    yMax = property(HEPVis_SWIG_Python.SbTTF_BBox_yMax_get, HEPVis_SWIG_Python.SbTTF_BBox_yMax_set)

    def __init__(self):
        HEPVis_SWIG_Python.SbTTF_BBox_swiginit(self, HEPVis_SWIG_Python.new_SbTTF_BBox())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF_BBox

# Register SbTTF_BBox in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTTF_BBox_swigregister(SbTTF_BBox)

class SbTTF_Raster_Map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = property(HEPVis_SWIG_Python.SbTTF_Raster_Map_rows_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_rows_set)
    cols = property(HEPVis_SWIG_Python.SbTTF_Raster_Map_cols_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_cols_set)
    width = property(HEPVis_SWIG_Python.SbTTF_Raster_Map_width_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_width_set)
    buffer = property(HEPVis_SWIG_Python.SbTTF_Raster_Map_buffer_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_buffer_set)
    size = property(HEPVis_SWIG_Python.SbTTF_Raster_Map_size_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_size_set)
    grays = property(HEPVis_SWIG_Python.SbTTF_Raster_Map_grays_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_grays_set)

    def __init__(self):
        HEPVis_SWIG_Python.SbTTF_Raster_Map_swiginit(self, HEPVis_SWIG_Python.new_SbTTF_Raster_Map())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF_Raster_Map

# Register SbTTF_Raster_Map in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTTF_Raster_Map_swigregister(SbTTF_Raster_Map)

class SbTTF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF

    def isValid(self):
        return HEPVis_SWIG_Python.SbTTF_isValid(self)

    def getBounds(self, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SbTTF_getBounds(self, arg2, arg3, arg4, arg5)

    def setPointSize(self, arg2):
        return HEPVis_SWIG_Python.SbTTF_setPointSize(self, arg2)

    def getPointSize(self):
        return HEPVis_SWIG_Python.SbTTF_getPointSize(self)

    def getCharacter(self, arg2, arg3, arg4, arg5, arg6, arg7):
        return HEPVis_SWIG_Python.SbTTF_getCharacter(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def getAscent(self):
        return HEPVis_SWIG_Python.SbTTF_getAscent(self)

    def getDescent(self):
        return HEPVis_SWIG_Python.SbTTF_getDescent(self)

    def getFontName(self):
        return HEPVis_SWIG_Python.SbTTF_getFontName(self)

# Register SbTTF in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbTTF_swigregister(SbTTF)

HEPVIS_MAJOR_VERSION = HEPVis_SWIG_Python.HEPVIS_MAJOR_VERSION
HEPVIS_MINOR_VERSION = HEPVis_SWIG_Python.HEPVIS_MINOR_VERSION
HEPVIS_PATCH_VERSION = HEPVis_SWIG_Python.HEPVIS_PATCH_VERSION
HEPVIS_VERSION = HEPVis_SWIG_Python.HEPVIS_VERSION
HEPVIS_VERSION_VRP = HEPVis_SWIG_Python.HEPVIS_VERSION_VRP
class HEPVis_SoFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.HEPVis_SoFile_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.HEPVis_SoFile_swiginit(self, HEPVis_SWIG_Python.new_HEPVis_SoFile())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.HEPVis_SoFile_initClass()

    def readNamedFile(self, _in):
        return HEPVis_SWIG_Python.HEPVis_SoFile_readNamedFile(self, _in)

    @staticmethod
    def setCurlFunction(aFunc):
        return HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction(aFunc)

# Register HEPVis_SoFile in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.HEPVis_SoFile_swigregister(HEPVis_SoFile)

def HEPVis_SoFile_getClassTypeId():
    return HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId()

def HEPVis_SoFile_initClass():
    return HEPVis_SWIG_Python.HEPVis_SoFile_initClass()

def HEPVis_SoFile_setCurlFunction(aFunc):
    return HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction(aFunc)

class SoLineStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoLineStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoLineStyle_getTypeId(self)
    color = property(HEPVis_SWIG_Python.SoLineStyle_color_get, HEPVis_SWIG_Python.SoLineStyle_color_set)
    transparency = property(HEPVis_SWIG_Python.SoLineStyle_transparency_get, HEPVis_SWIG_Python.SoLineStyle_transparency_set)
    width = property(HEPVis_SWIG_Python.SoLineStyle_width_get, HEPVis_SWIG_Python.SoLineStyle_width_set)
    pattern = property(HEPVis_SWIG_Python.SoLineStyle_pattern_get, HEPVis_SWIG_Python.SoLineStyle_pattern_set)
    visible = property(HEPVis_SWIG_Python.SoLineStyle_visible_get, HEPVis_SWIG_Python.SoLineStyle_visible_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoLineStyle_swiginit(self, HEPVis_SWIG_Python.new_SoLineStyle())

    def reset(self):
        return HEPVis_SWIG_Python.SoLineStyle_reset(self)

    def setFromString(self, arg2):
        return HEPVis_SWIG_Python.SoLineStyle_setFromString(self, arg2)

    def getSbStyle(self):
        return HEPVis_SWIG_Python.SoLineStyle_getSbStyle(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoLineStyle_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoLineStyle

# Register SoLineStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoLineStyle_swigregister(SoLineStyle)

def SoLineStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoLineStyle_getClassTypeId()

def SoLineStyle_initClass():
    return HEPVis_SWIG_Python.SoLineStyle_initClass()

class SoTextStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTextStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTextStyle_getTypeId(self)
    LEFT = HEPVis_SWIG_Python.SoTextStyle_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextStyle_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextStyle_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextStyle_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextStyle_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextStyle_TOP
    color = property(HEPVis_SWIG_Python.SoTextStyle_color_get, HEPVis_SWIG_Python.SoTextStyle_color_set)
    transparency = property(HEPVis_SWIG_Python.SoTextStyle_transparency_get, HEPVis_SWIG_Python.SoTextStyle_transparency_set)
    fontName = property(HEPVis_SWIG_Python.SoTextStyle_fontName_get, HEPVis_SWIG_Python.SoTextStyle_fontName_set)
    fontSize = property(HEPVis_SWIG_Python.SoTextStyle_fontSize_get, HEPVis_SWIG_Python.SoTextStyle_fontSize_set)
    visible = property(HEPVis_SWIG_Python.SoTextStyle_visible_get, HEPVis_SWIG_Python.SoTextStyle_visible_set)
    encoding = property(HEPVis_SWIG_Python.SoTextStyle_encoding_get, HEPVis_SWIG_Python.SoTextStyle_encoding_set)
    smoothing = property(HEPVis_SWIG_Python.SoTextStyle_smoothing_get, HEPVis_SWIG_Python.SoTextStyle_smoothing_set)
    hinting = property(HEPVis_SWIG_Python.SoTextStyle_hinting_get, HEPVis_SWIG_Python.SoTextStyle_hinting_set)
    horizontalJustification = property(HEPVis_SWIG_Python.SoTextStyle_horizontalJustification_get, HEPVis_SWIG_Python.SoTextStyle_horizontalJustification_set)
    verticalJustification = property(HEPVis_SWIG_Python.SoTextStyle_verticalJustification_get, HEPVis_SWIG_Python.SoTextStyle_verticalJustification_set)
    scale = property(HEPVis_SWIG_Python.SoTextStyle_scale_get, HEPVis_SWIG_Python.SoTextStyle_scale_set)
    orientationX = property(HEPVis_SWIG_Python.SoTextStyle_orientationX_get, HEPVis_SWIG_Python.SoTextStyle_orientationX_set)
    orientationY = property(HEPVis_SWIG_Python.SoTextStyle_orientationY_get, HEPVis_SWIG_Python.SoTextStyle_orientationY_set)
    rotated = property(HEPVis_SWIG_Python.SoTextStyle_rotated_get, HEPVis_SWIG_Python.SoTextStyle_rotated_set)
    lineWidth = property(HEPVis_SWIG_Python.SoTextStyle_lineWidth_get, HEPVis_SWIG_Python.SoTextStyle_lineWidth_set)
    linePattern = property(HEPVis_SWIG_Python.SoTextStyle_linePattern_get, HEPVis_SWIG_Python.SoTextStyle_linePattern_set)
    enforced = property(HEPVis_SWIG_Python.SoTextStyle_enforced_get, HEPVis_SWIG_Python.SoTextStyle_enforced_set)
    translation = property(HEPVis_SWIG_Python.SoTextStyle_translation_get, HEPVis_SWIG_Python.SoTextStyle_translation_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTextStyle_swiginit(self, HEPVis_SWIG_Python.new_SoTextStyle())

    def reset(self):
        return HEPVis_SWIG_Python.SoTextStyle_reset(self)

    def setFromString(self, arg2):
        return HEPVis_SWIG_Python.SoTextStyle_setFromString(self, arg2)

    def getSbStyle(self):
        return HEPVis_SWIG_Python.SoTextStyle_getSbStyle(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTextStyle_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextStyle

# Register SoTextStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTextStyle_swigregister(SoTextStyle)

def SoTextStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoTextStyle_getClassTypeId()

def SoTextStyle_initClass():
    return HEPVis_SWIG_Python.SoTextStyle_initClass()

class SoAreaStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoAreaStyle_getTypeId(self)
    color = property(HEPVis_SWIG_Python.SoAreaStyle_color_get, HEPVis_SWIG_Python.SoAreaStyle_color_set)
    transparency = property(HEPVis_SWIG_Python.SoAreaStyle_transparency_get, HEPVis_SWIG_Python.SoAreaStyle_transparency_set)
    SOLID = HEPVis_SWIG_Python.SoAreaStyle_SOLID
    HATCHED = HEPVis_SWIG_Python.SoAreaStyle_HATCHED
    CHECKER = HEPVis_SWIG_Python.SoAreaStyle_CHECKER
    EDGED = HEPVis_SWIG_Python.SoAreaStyle_EDGED
    areaStyle = property(HEPVis_SWIG_Python.SoAreaStyle_areaStyle_get, HEPVis_SWIG_Python.SoAreaStyle_areaStyle_set)
    visible = property(HEPVis_SWIG_Python.SoAreaStyle_visible_get, HEPVis_SWIG_Python.SoAreaStyle_visible_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoAreaStyle_swiginit(self, HEPVis_SWIG_Python.new_SoAreaStyle())

    def reset(self):
        return HEPVis_SWIG_Python.SoAreaStyle_reset(self)

    def setFromString(self, arg2):
        return HEPVis_SWIG_Python.SoAreaStyle_setFromString(self, arg2)

    def getSbStyle(self):
        return HEPVis_SWIG_Python.SoAreaStyle_getSbStyle(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoAreaStyle_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAreaStyle

# Register SoAreaStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoAreaStyle_swigregister(SoAreaStyle)

def SoAreaStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId()

def SoAreaStyle_initClass():
    return HEPVis_SWIG_Python.SoAreaStyle_initClass()

class SoStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoStyle_getTypeId(self)
    color = property(HEPVis_SWIG_Python.SoStyle_color_get, HEPVis_SWIG_Python.SoStyle_color_set)
    transparency = property(HEPVis_SWIG_Python.SoStyle_transparency_get, HEPVis_SWIG_Python.SoStyle_transparency_set)
    lineWidth = property(HEPVis_SWIG_Python.SoStyle_lineWidth_get, HEPVis_SWIG_Python.SoStyle_lineWidth_set)
    linePattern = property(HEPVis_SWIG_Python.SoStyle_linePattern_get, HEPVis_SWIG_Python.SoStyle_linePattern_set)
    markerSize = property(HEPVis_SWIG_Python.SoStyle_markerSize_get, HEPVis_SWIG_Python.SoStyle_markerSize_set)
    DOT = HEPVis_SWIG_Python.SoStyle_DOT
    PLUS = HEPVis_SWIG_Python.SoStyle_PLUS
    ASTERISK = HEPVis_SWIG_Python.SoStyle_ASTERISK
    CROSS = HEPVis_SWIG_Python.SoStyle_CROSS
    STAR = HEPVis_SWIG_Python.SoStyle_STAR
    CIRCLE_LINE = HEPVis_SWIG_Python.SoStyle_CIRCLE_LINE
    CIRCLE_FILLED = HEPVis_SWIG_Python.SoStyle_CIRCLE_FILLED
    TRIANGLE_UP_LINE = HEPVis_SWIG_Python.SoStyle_TRIANGLE_UP_LINE
    TRIANGLE_UP_FILLED = HEPVis_SWIG_Python.SoStyle_TRIANGLE_UP_FILLED
    TRIANGLE_DOWN_LINE = HEPVis_SWIG_Python.SoStyle_TRIANGLE_DOWN_LINE
    TRIANGLE_DOWN_FILLED = HEPVis_SWIG_Python.SoStyle_TRIANGLE_DOWN_FILLED
    SWISS_CROSS_LINE = HEPVis_SWIG_Python.SoStyle_SWISS_CROSS_LINE
    SWISS_CROSS_FILLED = HEPVis_SWIG_Python.SoStyle_SWISS_CROSS_FILLED
    DAVID_STAR_LINE = HEPVis_SWIG_Python.SoStyle_DAVID_STAR_LINE
    DAVID_STAR_FILLED = HEPVis_SWIG_Python.SoStyle_DAVID_STAR_FILLED
    DIAMOND_LINE = HEPVis_SWIG_Python.SoStyle_DIAMOND_LINE
    DIAMOND_FILLED = HEPVis_SWIG_Python.SoStyle_DIAMOND_FILLED
    SQUARE_LINE = HEPVis_SWIG_Python.SoStyle_SQUARE_LINE
    SQUARE_FILLED = HEPVis_SWIG_Python.SoStyle_SQUARE_FILLED
    PENTA_STAR_LINE = HEPVis_SWIG_Python.SoStyle_PENTA_STAR_LINE
    PENTA_STAR_FILLED = HEPVis_SWIG_Python.SoStyle_PENTA_STAR_FILLED
    markerStyle = property(HEPVis_SWIG_Python.SoStyle_markerStyle_get, HEPVis_SWIG_Python.SoStyle_markerStyle_set)
    SOLID = HEPVis_SWIG_Python.SoStyle_SOLID
    HATCHED = HEPVis_SWIG_Python.SoStyle_HATCHED
    CHECKER = HEPVis_SWIG_Python.SoStyle_CHECKER
    EDGED = HEPVis_SWIG_Python.SoStyle_EDGED
    areaStyle = property(HEPVis_SWIG_Python.SoStyle_areaStyle_get, HEPVis_SWIG_Python.SoStyle_areaStyle_set)
    fontName = property(HEPVis_SWIG_Python.SoStyle_fontName_get, HEPVis_SWIG_Python.SoStyle_fontName_set)
    fontSize = property(HEPVis_SWIG_Python.SoStyle_fontSize_get, HEPVis_SWIG_Python.SoStyle_fontSize_set)
    scale = property(HEPVis_SWIG_Python.SoStyle_scale_get, HEPVis_SWIG_Python.SoStyle_scale_set)
    NONE = HEPVis_SWIG_Python.SoStyle_NONE
    RIGHT = HEPVis_SWIG_Python.SoStyle_RIGHT
    LEFT = HEPVis_SWIG_Python.SoStyle_LEFT
    LEFT_AND_RIGHT = HEPVis_SWIG_Python.SoStyle_LEFT_AND_RIGHT
    hatching = property(HEPVis_SWIG_Python.SoStyle_hatching_get, HEPVis_SWIG_Python.SoStyle_hatching_set)
    spacing = property(HEPVis_SWIG_Python.SoStyle_spacing_get, HEPVis_SWIG_Python.SoStyle_spacing_set)
    angle = property(HEPVis_SWIG_Python.SoStyle_angle_get, HEPVis_SWIG_Python.SoStyle_angle_set)
    offset = property(HEPVis_SWIG_Python.SoStyle_offset_get, HEPVis_SWIG_Python.SoStyle_offset_set)
    stripWidth = property(HEPVis_SWIG_Python.SoStyle_stripWidth_get, HEPVis_SWIG_Python.SoStyle_stripWidth_set)
    visible = property(HEPVis_SWIG_Python.SoStyle_visible_get, HEPVis_SWIG_Python.SoStyle_visible_set)
    modeling = property(HEPVis_SWIG_Python.SoStyle_modeling_get, HEPVis_SWIG_Python.SoStyle_modeling_set)
    lightModel = property(HEPVis_SWIG_Python.SoStyle_lightModel_get, HEPVis_SWIG_Python.SoStyle_lightModel_set)
    tickModeling = property(HEPVis_SWIG_Python.SoStyle_tickModeling_get, HEPVis_SWIG_Python.SoStyle_tickModeling_set)
    encoding = property(HEPVis_SWIG_Python.SoStyle_encoding_get, HEPVis_SWIG_Python.SoStyle_encoding_set)
    smoothing = property(HEPVis_SWIG_Python.SoStyle_smoothing_get, HEPVis_SWIG_Python.SoStyle_smoothing_set)
    hinting = property(HEPVis_SWIG_Python.SoStyle_hinting_get, HEPVis_SWIG_Python.SoStyle_hinting_set)
    UNIFORM = HEPVis_SWIG_Python.SoStyle_UNIFORM
    BY_VALUE = HEPVis_SWIG_Python.SoStyle_BY_VALUE
    BY_LEVEL = HEPVis_SWIG_Python.SoStyle_BY_LEVEL
    GREY_SCALE = HEPVis_SWIG_Python.SoStyle_GREY_SCALE
    VIOLET_TO_RED = HEPVis_SWIG_Python.SoStyle_VIOLET_TO_RED
    GREY_SCALE_INVERSE = HEPVis_SWIG_Python.SoStyle_GREY_SCALE_INVERSE
    painting = property(HEPVis_SWIG_Python.SoStyle_painting_get, HEPVis_SWIG_Python.SoStyle_painting_set)
    multiNodeLimit = property(HEPVis_SWIG_Python.SoStyle_multiNodeLimit_get, HEPVis_SWIG_Python.SoStyle_multiNodeLimit_set)
    divisions = property(HEPVis_SWIG_Python.SoStyle_divisions_get, HEPVis_SWIG_Python.SoStyle_divisions_set)
    rotationSteps = property(HEPVis_SWIG_Python.SoStyle_rotationSteps_get, HEPVis_SWIG_Python.SoStyle_rotationSteps_set)
    barOffset = property(HEPVis_SWIG_Python.SoStyle_barOffset_get, HEPVis_SWIG_Python.SoStyle_barOffset_set)
    barWidth = property(HEPVis_SWIG_Python.SoStyle_barWidth_get, HEPVis_SWIG_Python.SoStyle_barWidth_set)
    editable = property(HEPVis_SWIG_Python.SoStyle_editable_get, HEPVis_SWIG_Python.SoStyle_editable_set)
    automated = property(HEPVis_SWIG_Python.SoStyle_automated_get, HEPVis_SWIG_Python.SoStyle_automated_set)
    options = property(HEPVis_SWIG_Python.SoStyle_options_get, HEPVis_SWIG_Python.SoStyle_options_set)
    colorMapping = property(HEPVis_SWIG_Python.SoStyle_colorMapping_get, HEPVis_SWIG_Python.SoStyle_colorMapping_set)
    enforced = property(HEPVis_SWIG_Python.SoStyle_enforced_get, HEPVis_SWIG_Python.SoStyle_enforced_set)
    translation = property(HEPVis_SWIG_Python.SoStyle_translation_get, HEPVis_SWIG_Python.SoStyle_translation_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoStyle_swiginit(self, HEPVis_SWIG_Python.new_SoStyle())

    def set(self, arg2):
        return HEPVis_SWIG_Python.SoStyle_set(self, arg2)

    def setFromString(self, arg2):
        return HEPVis_SWIG_Python.SoStyle_setFromString(self, arg2)

    def getSbStyle(self):
        return HEPVis_SWIG_Python.SoStyle_getSbStyle(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoStyle_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStyle

# Register SoStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoStyle_swigregister(SoStyle)

def SoStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoStyle_getClassTypeId()

def SoStyle_initClass():
    return HEPVis_SWIG_Python.SoStyle_initClass()

class SoBinsStyle(SoStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoBinsStyle_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoBinsStyle_swiginit(self, HEPVis_SWIG_Python.new_SoBinsStyle())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoBinsStyle_initClass()

# Register SoBinsStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoBinsStyle_swigregister(SoBinsStyle)

def SoBinsStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId()

def SoBinsStyle_initClass():
    return HEPVis_SWIG_Python.SoBinsStyle_initClass()

class SoPointsStyle(SoStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPointsStyle_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoPointsStyle_swiginit(self, HEPVis_SWIG_Python.new_SoPointsStyle())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPointsStyle_initClass()

# Register SoPointsStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPointsStyle_swigregister(SoPointsStyle)

def SoPointsStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId()

def SoPointsStyle_initClass():
    return HEPVis_SWIG_Python.SoPointsStyle_initClass()

class SoFunctionStyle(SoStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoFunctionStyle_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoFunctionStyle_swiginit(self, HEPVis_SWIG_Python.new_SoFunctionStyle())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoFunctionStyle_initClass()

# Register SoFunctionStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoFunctionStyle_swigregister(SoFunctionStyle)

def SoFunctionStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId()

def SoFunctionStyle_initClass():
    return HEPVis_SWIG_Python.SoFunctionStyle_initClass()

class SoRightHatchStyle(SoStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoRightHatchStyle_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoRightHatchStyle_swiginit(self, HEPVis_SWIG_Python.new_SoRightHatchStyle())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoRightHatchStyle_initClass()

# Register SoRightHatchStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoRightHatchStyle_swigregister(SoRightHatchStyle)

def SoRightHatchStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId()

def SoRightHatchStyle_initClass():
    return HEPVis_SWIG_Python.SoRightHatchStyle_initClass()

class SoLeftHatchStyle(SoStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoLeftHatchStyle_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoLeftHatchStyle_swiginit(self, HEPVis_SWIG_Python.new_SoLeftHatchStyle())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoLeftHatchStyle_initClass()

# Register SoLeftHatchStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoLeftHatchStyle_swigregister(SoLeftHatchStyle)

def SoLeftHatchStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId()

def SoLeftHatchStyle_initClass():
    return HEPVis_SWIG_Python.SoLeftHatchStyle_initClass()

class SoErrorsStyle(SoStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoErrorsStyle_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoErrorsStyle_swiginit(self, HEPVis_SWIG_Python.new_SoErrorsStyle())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoErrorsStyle_initClass()

# Register SoErrorsStyle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoErrorsStyle_swigregister(SoErrorsStyle)

def SoErrorsStyle_getClassTypeId():
    return HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId()

def SoErrorsStyle_initClass():
    return HEPVis_SWIG_Python.SoErrorsStyle_initClass()

class SoSceneGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSceneGraph_getTypeId(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSceneGraph_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoSceneGraph_swiginit(self, HEPVis_SWIG_Python.new_SoSceneGraph())

    def setString(self, *args):
        return HEPVis_SWIG_Python.SoSceneGraph_setString(self, *args)

    def getString(self):
        return HEPVis_SWIG_Python.SoSceneGraph_getString(self)

    def setInfos(self, arg2):
        return HEPVis_SWIG_Python.SoSceneGraph_setInfos(self, arg2)

    def getInfos(self):
        return HEPVis_SWIG_Python.SoSceneGraph_getInfos(self)

# Register SoSceneGraph in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSceneGraph_swigregister(SoSceneGraph)

def SoSceneGraph_getClassTypeId():
    return HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId()

def SoSceneGraph_initClass():
    return HEPVis_SWIG_Python.SoSceneGraph_initClass()

class HEPVis_SoMarkerSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getTypeId(self)
    PLUS_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_5_5
    ASTERISK_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_5_5
    CROSS_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_5_5
    STAR_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_5_5
    CIRCLE_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_5_5
    CIRCLE_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_5_5
    TRIANGLE_UP_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_5_5
    TRIANGLE_UP_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_5_5
    TRIANGLE_DOWN_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_5_5
    TRIANGLE_DOWN_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_5_5
    DAVID_STAR_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_5_5
    DAVID_STAR_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_5_5
    SWISS_CROSS_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_5_5
    SWISS_CROSS_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_5_5
    DIAMOND_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_5_5
    DIAMOND_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_5_5
    SQUARE_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_5_5
    SQUARE_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_5_5
    PENTA_STAR_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_5_5
    PENTA_STAR_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_5_5
    PLUS_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_7_7
    ASTERISK_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_7_7
    CROSS_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_7_7
    STAR_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_7_7
    CIRCLE_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_7_7
    CIRCLE_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_7_7
    TRIANGLE_UP_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_7_7
    TRIANGLE_UP_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_7_7
    TRIANGLE_DOWN_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_7_7
    TRIANGLE_DOWN_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_7_7
    DAVID_STAR_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_7_7
    DAVID_STAR_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_7_7
    SWISS_CROSS_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_7_7
    SWISS_CROSS_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_7_7
    DIAMOND_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_7_7
    DIAMOND_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_7_7
    SQUARE_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_7_7
    SQUARE_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_7_7
    PENTA_STAR_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_7_7
    PENTA_STAR_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_7_7
    PLUS_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_9_9
    ASTERISK_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_9_9
    CROSS_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_9_9
    STAR_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_9_9
    CIRCLE_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_9_9
    CIRCLE_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_9_9
    TRIANGLE_UP_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_9_9
    TRIANGLE_UP_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_9_9
    TRIANGLE_DOWN_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_9_9
    TRIANGLE_DOWN_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_9_9
    DAVID_STAR_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_9_9
    DAVID_STAR_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_9_9
    SWISS_CROSS_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_9_9
    SWISS_CROSS_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_9_9
    DIAMOND_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_9_9
    DIAMOND_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_9_9
    SQUARE_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_9_9
    SQUARE_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_9_9
    PENTA_STAR_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_9_9
    PENTA_STAR_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_9_9
    markerIndex = property(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_markerIndex_get, HEPVis_SWIG_Python.HEPVis_SoMarkerSet_markerIndex_set)
    alternateRep = property(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_alternateRep_get, HEPVis_SWIG_Python.HEPVis_SoMarkerSet_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.HEPVis_SoMarkerSet_swiginit(self, HEPVis_SWIG_Python.new_HEPVis_SoMarkerSet())

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_GLRender(self, arg2)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_doAction(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_write(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass()

    @staticmethod
    def getMarkerIndex(arg1, arg2):
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex(arg1, arg2)

    @staticmethod
    def getMarkerStyleSize(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize(arg1, arg2, arg3)

# Register HEPVis_SoMarkerSet in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.HEPVis_SoMarkerSet_swigregister(HEPVis_SoMarkerSet)

def HEPVis_SoMarkerSet_getClassTypeId():
    return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId()

def HEPVis_SoMarkerSet_initClass():
    return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass()

def HEPVis_SoMarkerSet_getMarkerIndex(arg1, arg2):
    return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex(arg1, arg2)

def HEPVis_SoMarkerSet_getMarkerStyleSize(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize(arg1, arg2, arg3)

class HEPVis_SoImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.HEPVis_SoImage_getTypeId(self)
    FITS = HEPVis_SWIG_Python.HEPVis_SoImage_FITS
    GIF = HEPVis_SWIG_Python.HEPVis_SoImage_GIF
    JPEG = HEPVis_SWIG_Python.HEPVis_SoImage_JPEG
    DVI = HEPVis_SWIG_Python.HEPVis_SoImage_DVI
    TEX = HEPVis_SWIG_Python.HEPVis_SoImage_TEX
    format = property(HEPVis_SWIG_Python.HEPVis_SoImage_format_get, HEPVis_SWIG_Python.HEPVis_SoImage_format_set)
    fileName = property(HEPVis_SWIG_Python.HEPVis_SoImage_fileName_get, HEPVis_SWIG_Python.HEPVis_SoImage_fileName_set)

    def __init__(self, *args):
        HEPVis_SWIG_Python.HEPVis_SoImage_swiginit(self, HEPVis_SWIG_Python.new_HEPVis_SoImage(*args))

    def readImage(self):
        return HEPVis_SWIG_Python.HEPVis_SoImage_readImage(self)

    def getSize(self, arg2, arg3):
        return HEPVis_SWIG_Python.HEPVis_SoImage_getSize(self, arg2, arg3)

    def setPixmap(self, *args):
        return HEPVis_SWIG_Python.HEPVis_SoImage_setPixmap(self, *args)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.HEPVis_SoImage_GLRender(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.HEPVis_SoImage_initClass()

# Register HEPVis_SoImage in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.HEPVis_SoImage_swigregister(HEPVis_SoImage)

def HEPVis_SoImage_getClassTypeId():
    return HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId()

def HEPVis_SoImage_initClass():
    return HEPVis_SWIG_Python.HEPVis_SoImage_initClass()

class SoImageWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoImageWriter_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoImageWriter_getTypeId(self)
    POST_SCRIPT = HEPVis_SWIG_Python.SoImageWriter_POST_SCRIPT
    GIF = HEPVis_SWIG_Python.SoImageWriter_GIF
    JPEG = HEPVis_SWIG_Python.SoImageWriter_JPEG
    format = property(HEPVis_SWIG_Python.SoImageWriter_format_get, HEPVis_SWIG_Python.SoImageWriter_format_set)
    fileName = property(HEPVis_SWIG_Python.SoImageWriter_fileName_get, HEPVis_SWIG_Python.SoImageWriter_fileName_set)
    quality = property(HEPVis_SWIG_Python.SoImageWriter_quality_get, HEPVis_SWIG_Python.SoImageWriter_quality_set)
    alternateRep = property(HEPVis_SWIG_Python.SoImageWriter_alternateRep_get, HEPVis_SWIG_Python.SoImageWriter_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoImageWriter_swiginit(self, HEPVis_SWIG_Python.new_SoImageWriter())

    def enable(self):
        return HEPVis_SWIG_Python.SoImageWriter_enable(self)

    def disable(self):
        return HEPVis_SWIG_Python.SoImageWriter_disable(self)

    def getStatus(self):
        return HEPVis_SWIG_Python.SoImageWriter_getStatus(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoImageWriter_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoImageWriter_clearAlternateRep(self)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoImageWriter_GLRender(self, arg2)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoImageWriter_doAction(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoImageWriter_write(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoImageWriter_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoImageWriter

# Register SoImageWriter in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoImageWriter_swigregister(SoImageWriter)

def SoImageWriter_getClassTypeId():
    return HEPVis_SWIG_Python.SoImageWriter_getClassTypeId()

def SoImageWriter_initClass():
    return HEPVis_SWIG_Python.SoImageWriter_initClass()

class SoViewportRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoViewportRegion_getTypeId(self)
    PERCENT = HEPVis_SWIG_Python.SoViewportRegion_PERCENT
    PIXELS = HEPVis_SWIG_Python.SoViewportRegion_PIXELS
    visible = property(HEPVis_SWIG_Python.SoViewportRegion_visible_get, HEPVis_SWIG_Python.SoViewportRegion_visible_set)
    originUnit = property(HEPVis_SWIG_Python.SoViewportRegion_originUnit_get, HEPVis_SWIG_Python.SoViewportRegion_originUnit_set)
    sizeUnit = property(HEPVis_SWIG_Python.SoViewportRegion_sizeUnit_get, HEPVis_SWIG_Python.SoViewportRegion_sizeUnit_set)
    origin = property(HEPVis_SWIG_Python.SoViewportRegion_origin_get, HEPVis_SWIG_Python.SoViewportRegion_origin_set)
    size = property(HEPVis_SWIG_Python.SoViewportRegion_size_get, HEPVis_SWIG_Python.SoViewportRegion_size_set)
    horizontalBorder = property(HEPVis_SWIG_Python.SoViewportRegion_horizontalBorder_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalBorder_set)
    verticalBorder = property(HEPVis_SWIG_Python.SoViewportRegion_verticalBorder_get, HEPVis_SWIG_Python.SoViewportRegion_verticalBorder_set)
    background = property(HEPVis_SWIG_Python.SoViewportRegion_background_get, HEPVis_SWIG_Python.SoViewportRegion_background_set)
    backgroundColor = property(HEPVis_SWIG_Python.SoViewportRegion_backgroundColor_get, HEPVis_SWIG_Python.SoViewportRegion_backgroundColor_set)
    borderColor = property(HEPVis_SWIG_Python.SoViewportRegion_borderColor_get, HEPVis_SWIG_Python.SoViewportRegion_borderColor_set)
    highlighted = property(HEPVis_SWIG_Python.SoViewportRegion_highlighted_get, HEPVis_SWIG_Python.SoViewportRegion_highlighted_set)
    highlightColor = property(HEPVis_SWIG_Python.SoViewportRegion_highlightColor_get, HEPVis_SWIG_Python.SoViewportRegion_highlightColor_set)
    horizontalHighlightBorder = property(HEPVis_SWIG_Python.SoViewportRegion_horizontalHighlightBorder_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalHighlightBorder_set)
    verticalHighlightBorder = property(HEPVis_SWIG_Python.SoViewportRegion_verticalHighlightBorder_get, HEPVis_SWIG_Python.SoViewportRegion_verticalHighlightBorder_set)
    horizontalShadow = property(HEPVis_SWIG_Python.SoViewportRegion_horizontalShadow_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalShadow_set)
    verticalShadow = property(HEPVis_SWIG_Python.SoViewportRegion_verticalShadow_get, HEPVis_SWIG_Python.SoViewportRegion_verticalShadow_set)
    sensitiveBorder = property(HEPVis_SWIG_Python.SoViewportRegion_sensitiveBorder_get, HEPVis_SWIG_Python.SoViewportRegion_sensitiveBorder_set)
    horizontalOriginOffset = property(HEPVis_SWIG_Python.SoViewportRegion_horizontalOriginOffset_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalOriginOffset_set)
    verticalOriginOffset = property(HEPVis_SWIG_Python.SoViewportRegion_verticalOriginOffset_get, HEPVis_SWIG_Python.SoViewportRegion_verticalOriginOffset_set)
    alternateRep = property(HEPVis_SWIG_Python.SoViewportRegion_alternateRep_get, HEPVis_SWIG_Python.SoViewportRegion_alternateRep_set)
    showHighlight = property(HEPVis_SWIG_Python.SoViewportRegion_showHighlight_get, HEPVis_SWIG_Python.SoViewportRegion_showHighlight_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoViewportRegion_swiginit(self, HEPVis_SWIG_Python.new_SoViewportRegion())

    def reset(self):
        return HEPVis_SWIG_Python.SoViewportRegion_reset(self)

    def setPositionPixels(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_setPositionPixels(self, arg2, arg3)

    def setSizePixels(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_setSizePixels(self, arg2, arg3)

    def setPositionPercent(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_setPositionPercent(self, arg2, arg3)

    def setSizePercent(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_setSizePercent(self, arg2, arg3)

    def getPositionPercent(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_getPositionPercent(self, arg2, arg3)

    def getSizePercent(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_getSizePercent(self, arg2, arg3)

    def getPositionPixels(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_getPositionPixels(self, arg2, arg3)

    def getSizePixels(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_getSizePixels(self, arg2, arg3)

    def setOriginUnit(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_setOriginUnit(self, arg2)

    def setSizeUnit(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_setSizeUnit(self, arg2)

    def getBorderSize(self):
        return HEPVis_SWIG_Python.SoViewportRegion_getBorderSize(self)

    def isInside(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoViewportRegion_isInside(self, arg2, arg3)

    def isResizing(self):
        return HEPVis_SWIG_Python.SoViewportRegion_isResizing(self)

    def isMoving(self):
        return HEPVis_SWIG_Python.SoViewportRegion_isMoving(self)

    def dispatchEvent(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_dispatchEvent(self, arg2)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoViewportRegion_clearAlternateRep(self)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_doAction(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_pick(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoViewportRegion_write(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoViewportRegion_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoViewportRegion

# Register SoViewportRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoViewportRegion_swigregister(SoViewportRegion)

def SoViewportRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId()

def SoViewportRegion_initClass():
    return HEPVis_SWIG_Python.SoViewportRegion_initClass()

class SoTextHershey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTextHershey_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTextHershey_getTypeId(self)
    LEFT = HEPVis_SWIG_Python.SoTextHershey_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextHershey_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextHershey_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextHershey_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextHershey_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextHershey_TOP
    LATIN = HEPVis_SWIG_Python.SoTextHershey_LATIN
    GREEK = HEPVis_SWIG_Python.SoTextHershey_GREEK
    SPECIAL = HEPVis_SWIG_Python.SoTextHershey_SPECIAL
    string = property(HEPVis_SWIG_Python.SoTextHershey_string_get, HEPVis_SWIG_Python.SoTextHershey_string_set)
    encoding = property(HEPVis_SWIG_Python.SoTextHershey_encoding_get, HEPVis_SWIG_Python.SoTextHershey_encoding_set)
    font = property(HEPVis_SWIG_Python.SoTextHershey_font_get, HEPVis_SWIG_Python.SoTextHershey_font_set)
    horizontalJustification = property(HEPVis_SWIG_Python.SoTextHershey_horizontalJustification_get, HEPVis_SWIG_Python.SoTextHershey_horizontalJustification_set)
    verticalJustification = property(HEPVis_SWIG_Python.SoTextHershey_verticalJustification_get, HEPVis_SWIG_Python.SoTextHershey_verticalJustification_set)
    height = property(HEPVis_SWIG_Python.SoTextHershey_height_get, HEPVis_SWIG_Python.SoTextHershey_height_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTextHershey_alternateRep_get, HEPVis_SWIG_Python.SoTextHershey_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTextHershey_swiginit(self, HEPVis_SWIG_Python.new_SoTextHershey())

    def getTextBounds(self, *args):
        return HEPVis_SWIG_Python.SoTextHershey_getTextBounds(self, *args)

    def getAscent(self):
        return HEPVis_SWIG_Python.SoTextHershey_getAscent(self)

    def getDescent(self):
        return HEPVis_SWIG_Python.SoTextHershey_getDescent(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTextHershey_clearAlternateRep(self)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_pick(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_write(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_callback(self, arg2)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoTextHershey_doAction(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTextHershey_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextHershey

# Register SoTextHershey in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTextHershey_swigregister(SoTextHershey)

def SoTextHershey_getClassTypeId():
    return HEPVis_SWIG_Python.SoTextHershey_getClassTypeId()

def SoTextHershey_initClass():
    return HEPVis_SWIG_Python.SoTextHershey_initClass()

class SoTextVtk(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTextVtk_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTextVtk_getTypeId(self)
    string = property(HEPVis_SWIG_Python.SoTextVtk_string_get, HEPVis_SWIG_Python.SoTextVtk_string_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTextVtk_swiginit(self, HEPVis_SWIG_Python.new_SoTextVtk())

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoTextVtk_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoTextVtk_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoTextVtk_pick(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTextVtk_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextVtk

# Register SoTextVtk in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTextVtk_swigregister(SoTextVtk)

def SoTextVtk_getClassTypeId():
    return HEPVis_SWIG_Python.SoTextVtk_getClassTypeId()

def SoTextVtk_initClass():
    return HEPVis_SWIG_Python.SoTextVtk_initClass()

class SoTextTTF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTextTTF_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTextTTF_getTypeId(self)
    LEFT = HEPVis_SWIG_Python.SoTextTTF_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextTTF_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextTTF_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextTTF_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextTTF_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextTTF_TOP
    fontName = property(HEPVis_SWIG_Python.SoTextTTF_fontName_get, HEPVis_SWIG_Python.SoTextTTF_fontName_set)
    encoding = property(HEPVis_SWIG_Python.SoTextTTF_encoding_get, HEPVis_SWIG_Python.SoTextTTF_encoding_set)
    string = property(HEPVis_SWIG_Python.SoTextTTF_string_get, HEPVis_SWIG_Python.SoTextTTF_string_set)
    size = property(HEPVis_SWIG_Python.SoTextTTF_size_get, HEPVis_SWIG_Python.SoTextTTF_size_set)
    smoothing = property(HEPVis_SWIG_Python.SoTextTTF_smoothing_get, HEPVis_SWIG_Python.SoTextTTF_smoothing_set)
    hinting = property(HEPVis_SWIG_Python.SoTextTTF_hinting_get, HEPVis_SWIG_Python.SoTextTTF_hinting_set)
    horizontalJustification = property(HEPVis_SWIG_Python.SoTextTTF_horizontalJustification_get, HEPVis_SWIG_Python.SoTextTTF_horizontalJustification_set)
    verticalJustification = property(HEPVis_SWIG_Python.SoTextTTF_verticalJustification_get, HEPVis_SWIG_Python.SoTextTTF_verticalJustification_set)
    align = property(HEPVis_SWIG_Python.SoTextTTF_align_get, HEPVis_SWIG_Python.SoTextTTF_align_set)
    rotated = property(HEPVis_SWIG_Python.SoTextTTF_rotated_get, HEPVis_SWIG_Python.SoTextTTF_rotated_set)
    rescale = property(HEPVis_SWIG_Python.SoTextTTF_rescale_get, HEPVis_SWIG_Python.SoTextTTF_rescale_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTextTTF_alternateRep_get, HEPVis_SWIG_Python.SoTextTTF_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTextTTF_swiginit(self, HEPVis_SWIG_Python.new_SoTextTTF())

    def getTextBounds(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_getTextBounds(self, arg2)

    def getAscent(self):
        return HEPVis_SWIG_Python.SoTextTTF_getAscent(self)

    def getDescent(self):
        return HEPVis_SWIG_Python.SoTextTTF_getDescent(self)

    def getLatin(self):
        return HEPVis_SWIG_Python.SoTextTTF_getLatin(self)

    def getGreek(self):
        return HEPVis_SWIG_Python.SoTextTTF_getGreek(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTextTTF_clearAlternateRep(self)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_pick(self, arg2)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_doAction(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoTextTTF_write(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTextTTF_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextTTF

# Register SoTextTTF in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTextTTF_swigregister(SoTextTTF)

def SoTextTTF_getClassTypeId():
    return HEPVis_SWIG_Python.SoTextTTF_getClassTypeId()

def SoTextTTF_initClass():
    return HEPVis_SWIG_Python.SoTextTTF_initClass()

class SoGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoGrid_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoGrid_getTypeId(self)
    position = property(HEPVis_SWIG_Python.SoGrid_position_get, HEPVis_SWIG_Python.SoGrid_position_set)
    X = property(HEPVis_SWIG_Python.SoGrid_X_get, HEPVis_SWIG_Python.SoGrid_X_set)
    Y = property(HEPVis_SWIG_Python.SoGrid_Y_get, HEPVis_SWIG_Python.SoGrid_Y_set)
    rows = property(HEPVis_SWIG_Python.SoGrid_rows_get, HEPVis_SWIG_Python.SoGrid_rows_set)
    columns = property(HEPVis_SWIG_Python.SoGrid_columns_get, HEPVis_SWIG_Python.SoGrid_columns_set)
    width = property(HEPVis_SWIG_Python.SoGrid_width_get, HEPVis_SWIG_Python.SoGrid_width_set)
    height = property(HEPVis_SWIG_Python.SoGrid_height_get, HEPVis_SWIG_Python.SoGrid_height_set)
    alternateRep = property(HEPVis_SWIG_Python.SoGrid_alternateRep_get, HEPVis_SWIG_Python.SoGrid_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoGrid_swiginit(self, HEPVis_SWIG_Python.new_SoGrid())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoGrid_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoGrid_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoGrid_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoGrid

# Register SoGrid in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoGrid_swigregister(SoGrid)

def SoGrid_getClassTypeId():
    return HEPVis_SWIG_Python.SoGrid_getClassTypeId()

def SoGrid_initClass():
    return HEPVis_SWIG_Python.SoGrid_initClass()

class SoEdgedFaceSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoEdgedFaceSet_getTypeId(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoEdgedFaceSet_swiginit(self, HEPVis_SWIG_Python.new_SoEdgedFaceSet())

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoEdgedFaceSet_GLRender(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoEdgedFaceSet_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEdgedFaceSet

# Register SoEdgedFaceSet in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoEdgedFaceSet_swigregister(SoEdgedFaceSet)

def SoEdgedFaceSet_getClassTypeId():
    return HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId()

def SoEdgedFaceSet_initClass():
    return HEPVis_SWIG_Python.SoEdgedFaceSet_initClass()

class SoHighlightMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoHighlightMaterial_getTypeId(self)
    highlightColor = property(HEPVis_SWIG_Python.SoHighlightMaterial_highlightColor_get, HEPVis_SWIG_Python.SoHighlightMaterial_highlightColor_set)
    alternateRep = property(HEPVis_SWIG_Python.SoHighlightMaterial_alternateRep_get, HEPVis_SWIG_Python.SoHighlightMaterial_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoHighlightMaterial_swiginit(self, HEPVis_SWIG_Python.new_SoHighlightMaterial())

    def setSavedMaterial(self, arg2):
        return HEPVis_SWIG_Python.SoHighlightMaterial_setSavedMaterial(self, arg2)

    def getSavedMaterial(self):
        return HEPVis_SWIG_Python.SoHighlightMaterial_getSavedMaterial(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoHighlightMaterial_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoHighlightMaterial_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoHighlightMaterial_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHighlightMaterial

# Register SoHighlightMaterial in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoHighlightMaterial_swigregister(SoHighlightMaterial)

def SoHighlightMaterial_getClassTypeId():
    return HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId()

def SoHighlightMaterial_initClass():
    return HEPVis_SWIG_Python.SoHighlightMaterial_initClass()

class SoSplineCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSplineCurve_getTypeId(self)
    points = property(HEPVis_SWIG_Python.SoSplineCurve_points_get, HEPVis_SWIG_Python.SoSplineCurve_points_set)
    tangents = property(HEPVis_SWIG_Python.SoSplineCurve_tangents_get, HEPVis_SWIG_Python.SoSplineCurve_tangents_set)
    alternateRep = property(HEPVis_SWIG_Python.SoSplineCurve_alternateRep_get, HEPVis_SWIG_Python.SoSplineCurve_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoSplineCurve_swiginit(self, HEPVis_SWIG_Python.new_SoSplineCurve())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoSplineCurve_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoSplineCurve_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSplineCurve_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSplineCurve

# Register SoSplineCurve in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSplineCurve_swigregister(SoSplineCurve)

def SoSplineCurve_getClassTypeId():
    return HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId()

def SoSplineCurve_initClass():
    return HEPVis_SWIG_Python.SoSplineCurve_initClass()

class SoPyramid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPyramid_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPyramid_getTypeId(self)
    backWidth = property(HEPVis_SWIG_Python.SoPyramid_backWidth_get, HEPVis_SWIG_Python.SoPyramid_backWidth_set)
    backHeight = property(HEPVis_SWIG_Python.SoPyramid_backHeight_get, HEPVis_SWIG_Python.SoPyramid_backHeight_set)
    frontWidth = property(HEPVis_SWIG_Python.SoPyramid_frontWidth_get, HEPVis_SWIG_Python.SoPyramid_frontWidth_set)
    frontHeight = property(HEPVis_SWIG_Python.SoPyramid_frontHeight_get, HEPVis_SWIG_Python.SoPyramid_frontHeight_set)
    depth = property(HEPVis_SWIG_Python.SoPyramid_depth_get, HEPVis_SWIG_Python.SoPyramid_depth_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPyramid_swiginit(self, HEPVis_SWIG_Python.new_SoPyramid())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPyramid_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPyramid

# Register SoPyramid in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPyramid_swigregister(SoPyramid)

def SoPyramid_getClassTypeId():
    return HEPVis_SWIG_Python.SoPyramid_getClassTypeId()

def SoPyramid_initClass():
    return HEPVis_SWIG_Python.SoPyramid_initClass()

class SoAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoAxis_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoAxis_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoAxis_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoAxis_alternateRep_get, HEPVis_SWIG_Python.SoAxis_alternateRep_set)
    verbose = property(HEPVis_SWIG_Python.SoAxis_verbose_get, HEPVis_SWIG_Python.SoAxis_verbose_set)
    modeling = property(HEPVis_SWIG_Python.SoAxis_modeling_get, HEPVis_SWIG_Python.SoAxis_modeling_set)
    width = property(HEPVis_SWIG_Python.SoAxis_width_get, HEPVis_SWIG_Python.SoAxis_width_set)
    minimumValue = property(HEPVis_SWIG_Python.SoAxis_minimumValue_get, HEPVis_SWIG_Python.SoAxis_minimumValue_set)
    maximumValue = property(HEPVis_SWIG_Python.SoAxis_maximumValue_get, HEPVis_SWIG_Python.SoAxis_maximumValue_set)
    divisions = property(HEPVis_SWIG_Python.SoAxis_divisions_get, HEPVis_SWIG_Python.SoAxis_divisions_set)
    logScale = property(HEPVis_SWIG_Python.SoAxis_logScale_get, HEPVis_SWIG_Python.SoAxis_logScale_set)
    tickUp = property(HEPVis_SWIG_Python.SoAxis_tickUp_get, HEPVis_SWIG_Python.SoAxis_tickUp_set)
    tickLength = property(HEPVis_SWIG_Python.SoAxis_tickLength_get, HEPVis_SWIG_Python.SoAxis_tickLength_set)
    labelToAxis = property(HEPVis_SWIG_Python.SoAxis_labelToAxis_get, HEPVis_SWIG_Python.SoAxis_labelToAxis_set)
    labelHeight = property(HEPVis_SWIG_Python.SoAxis_labelHeight_get, HEPVis_SWIG_Python.SoAxis_labelHeight_set)
    title = property(HEPVis_SWIG_Python.SoAxis_title_get, HEPVis_SWIG_Python.SoAxis_title_set)
    titleToAxis = property(HEPVis_SWIG_Python.SoAxis_titleToAxis_get, HEPVis_SWIG_Python.SoAxis_titleToAxis_set)
    titleHeight = property(HEPVis_SWIG_Python.SoAxis_titleHeight_get, HEPVis_SWIG_Python.SoAxis_titleHeight_set)
    LEFT = HEPVis_SWIG_Python.SoAxis_LEFT
    CENTER = HEPVis_SWIG_Python.SoAxis_CENTER
    RIGHT = HEPVis_SWIG_Python.SoAxis_RIGHT
    titleToAxisJustification = property(HEPVis_SWIG_Python.SoAxis_titleToAxisJustification_get, HEPVis_SWIG_Python.SoAxis_titleToAxisJustification_set)
    ttfScale = property(HEPVis_SWIG_Python.SoAxis_ttfScale_get, HEPVis_SWIG_Python.SoAxis_ttfScale_set)
    labelsEnforced = property(HEPVis_SWIG_Python.SoAxis_labelsEnforced_get, HEPVis_SWIG_Python.SoAxis_labelsEnforced_set)
    timeLabels = property(HEPVis_SWIG_Python.SoAxis_timeLabels_get, HEPVis_SWIG_Python.SoAxis_timeLabels_set)
    timeFormat = property(HEPVis_SWIG_Python.SoAxis_timeFormat_get, HEPVis_SWIG_Python.SoAxis_timeFormat_set)
    timeOffset = property(HEPVis_SWIG_Python.SoAxis_timeOffset_get, HEPVis_SWIG_Python.SoAxis_timeOffset_set)
    timeOffsetIsGMT = property(HEPVis_SWIG_Python.SoAxis_timeOffsetIsGMT_get, HEPVis_SWIG_Python.SoAxis_timeOffsetIsGMT_set)
    tickNumber = property(HEPVis_SWIG_Python.SoAxis_tickNumber_get, HEPVis_SWIG_Python.SoAxis_tickNumber_set)
    labels = property(HEPVis_SWIG_Python.SoAxis_labels_get, HEPVis_SWIG_Python.SoAxis_labels_set)
    values = property(HEPVis_SWIG_Python.SoAxis_values_get, HEPVis_SWIG_Python.SoAxis_values_set)
    coords = property(HEPVis_SWIG_Python.SoAxis_coords_get, HEPVis_SWIG_Python.SoAxis_coords_set)
    subCoords = property(HEPVis_SWIG_Python.SoAxis_subCoords_get, HEPVis_SWIG_Python.SoAxis_subCoords_set)
    magnitude = property(HEPVis_SWIG_Python.SoAxis_magnitude_get, HEPVis_SWIG_Python.SoAxis_magnitude_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoAxis_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_pick(self, arg2)

    def __init__(self):
        HEPVis_SWIG_Python.SoAxis_swiginit(self, HEPVis_SWIG_Python.new_SoAxis())

    def reset(self):
        return HEPVis_SWIG_Python.SoAxis_reset(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoAxis_updateChildren(self)

    def getLineStyle(self):
        return HEPVis_SWIG_Python.SoAxis_getLineStyle(self)

    def getTicksStyle(self):
        return HEPVis_SWIG_Python.SoAxis_getTicksStyle(self)

    def getLabelsStyle(self):
        return HEPVis_SWIG_Python.SoAxis_getLabelsStyle(self)

    def getTitleStyle(self):
        return HEPVis_SWIG_Python.SoAxis_getTitleStyle(self)

    def getMagStyle(self):
        return HEPVis_SWIG_Python.SoAxis_getMagStyle(self)

    def setVisible(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_setVisible(self, arg2)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoAxis_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoAxis_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxis

# Register SoAxis in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoAxis_swigregister(SoAxis)

def SoAxis_getClassTypeId():
    return HEPVis_SWIG_Python.SoAxis_getClassTypeId()

def SoAxis_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog()

def SoAxis_initClass():
    return HEPVis_SWIG_Python.SoAxis_initClass()

class SoAxes2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoAxes2D_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoAxes2D_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoAxes2D_getNodekitCatalog(self)
    SOLID = HEPVis_SWIG_Python.SoAxes2D_SOLID
    DASHED = HEPVis_SWIG_Python.SoAxes2D_DASHED
    DOTTED = HEPVis_SWIG_Python.SoAxes2D_DOTTED
    DASH_DOTTED = HEPVis_SWIG_Python.SoAxes2D_DASH_DOTTED
    gridColor = property(HEPVis_SWIG_Python.SoAxes2D_gridColor_get, HEPVis_SWIG_Python.SoAxes2D_gridColor_set)
    gridTransparency = property(HEPVis_SWIG_Python.SoAxes2D_gridTransparency_get, HEPVis_SWIG_Python.SoAxes2D_gridTransparency_set)
    gridLinePattern = property(HEPVis_SWIG_Python.SoAxes2D_gridLinePattern_get, HEPVis_SWIG_Python.SoAxes2D_gridLinePattern_set)
    gridVisible = property(HEPVis_SWIG_Python.SoAxes2D_gridVisible_get, HEPVis_SWIG_Python.SoAxes2D_gridVisible_set)
    wallColor = property(HEPVis_SWIG_Python.SoAxes2D_wallColor_get, HEPVis_SWIG_Python.SoAxes2D_wallColor_set)
    wallTransparency = property(HEPVis_SWIG_Python.SoAxes2D_wallTransparency_get, HEPVis_SWIG_Python.SoAxes2D_wallTransparency_set)
    wallOffset = property(HEPVis_SWIG_Python.SoAxes2D_wallOffset_get, HEPVis_SWIG_Python.SoAxes2D_wallOffset_set)
    wallVisible = property(HEPVis_SWIG_Python.SoAxes2D_wallVisible_get, HEPVis_SWIG_Python.SoAxes2D_wallVisible_set)
    topAxisVisible = property(HEPVis_SWIG_Python.SoAxes2D_topAxisVisible_get, HEPVis_SWIG_Python.SoAxes2D_topAxisVisible_set)
    topAxisY = property(HEPVis_SWIG_Python.SoAxes2D_topAxisY_get, HEPVis_SWIG_Python.SoAxes2D_topAxisY_set)
    rightAxisVisible = property(HEPVis_SWIG_Python.SoAxes2D_rightAxisVisible_get, HEPVis_SWIG_Python.SoAxes2D_rightAxisVisible_set)
    rightAxisX = property(HEPVis_SWIG_Python.SoAxes2D_rightAxisX_get, HEPVis_SWIG_Python.SoAxes2D_rightAxisX_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoAxes2D_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoAxes2D_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoAxes2D_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoAxes2D_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoAxes2D_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoAxes2D_pick(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoAxes2D_getBoundingBox(self, arg2)

    def __init__(self):
        HEPVis_SWIG_Python.SoAxes2D_swiginit(self, HEPVis_SWIG_Python.new_SoAxes2D())

    def getXAxis(self):
        return HEPVis_SWIG_Python.SoAxes2D_getXAxis(self)

    def getYAxis(self):
        return HEPVis_SWIG_Python.SoAxes2D_getYAxis(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxes2D

# Register SoAxes2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoAxes2D_swigregister(SoAxes2D)

def SoAxes2D_getClassTypeId():
    return HEPVis_SWIG_Python.SoAxes2D_getClassTypeId()

def SoAxes2D_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog()

def SoAxes2D_initClass():
    return HEPVis_SWIG_Python.SoAxes2D_initClass()

class SoAxes3D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoAxes3D_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoAxes3D_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoAxes3D_getNodekitCatalog(self)
    gridColor = property(HEPVis_SWIG_Python.SoAxes3D_gridColor_get, HEPVis_SWIG_Python.SoAxes3D_gridColor_set)
    gridTransparency = property(HEPVis_SWIG_Python.SoAxes3D_gridTransparency_get, HEPVis_SWIG_Python.SoAxes3D_gridTransparency_set)
    gridLinePattern = property(HEPVis_SWIG_Python.SoAxes3D_gridLinePattern_get, HEPVis_SWIG_Python.SoAxes3D_gridLinePattern_set)
    gridVisible = property(HEPVis_SWIG_Python.SoAxes3D_gridVisible_get, HEPVis_SWIG_Python.SoAxes3D_gridVisible_set)
    wallColor = property(HEPVis_SWIG_Python.SoAxes3D_wallColor_get, HEPVis_SWIG_Python.SoAxes3D_wallColor_set)
    wallTransparency = property(HEPVis_SWIG_Python.SoAxes3D_wallTransparency_get, HEPVis_SWIG_Python.SoAxes3D_wallTransparency_set)
    wallOffset = property(HEPVis_SWIG_Python.SoAxes3D_wallOffset_get, HEPVis_SWIG_Python.SoAxes3D_wallOffset_set)
    wallVisible = property(HEPVis_SWIG_Python.SoAxes3D_wallVisible_get, HEPVis_SWIG_Python.SoAxes3D_wallVisible_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoAxes3D_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoAxes3D_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoAxes3D_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoAxes3D_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoAxes3D_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoAxes3D_pick(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoAxes3D_getBoundingBox(self, arg2)

    def __init__(self):
        HEPVis_SWIG_Python.SoAxes3D_swiginit(self, HEPVis_SWIG_Python.new_SoAxes3D())

    def getXAxis(self):
        return HEPVis_SWIG_Python.SoAxes3D_getXAxis(self)

    def getYAxis(self):
        return HEPVis_SWIG_Python.SoAxes3D_getYAxis(self)

    def getZAxis(self):
        return HEPVis_SWIG_Python.SoAxes3D_getZAxis(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxes3D

# Register SoAxes3D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoAxes3D_swigregister(SoAxes3D)

def SoAxes3D_getClassTypeId():
    return HEPVis_SWIG_Python.SoAxes3D_getClassTypeId()

def SoAxes3D_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog()

def SoAxes3D_initClass():
    return HEPVis_SWIG_Python.SoAxes3D_initClass()

class SoSimpleButton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSimpleButton_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoSimpleButton_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoSimpleButton_alternateRep_get, HEPVis_SWIG_Python.SoSimpleButton_alternateRep_set)
    verbose = property(HEPVis_SWIG_Python.SoSimpleButton_verbose_get, HEPVis_SWIG_Python.SoSimpleButton_verbose_set)
    width = property(HEPVis_SWIG_Python.SoSimpleButton_width_get, HEPVis_SWIG_Python.SoSimpleButton_width_set)
    height = property(HEPVis_SWIG_Python.SoSimpleButton_height_get, HEPVis_SWIG_Python.SoSimpleButton_height_set)
    label = property(HEPVis_SWIG_Python.SoSimpleButton_label_get, HEPVis_SWIG_Python.SoSimpleButton_label_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSimpleButton_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_pick(self, arg2)

    def __init__(self):
        HEPVis_SWIG_Python.SoSimpleButton_swiginit(self, HEPVis_SWIG_Python.new_SoSimpleButton())

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoSimpleButton_updateChildren(self)

    def getBackStyle(self):
        return HEPVis_SWIG_Python.SoSimpleButton_getBackStyle(self)

    def getLabelStyle(self):
        return HEPVis_SWIG_Python.SoSimpleButton_getLabelStyle(self)

    def addCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoSimpleButton_addCallback(self, arg2, arg3)

    def removeCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoSimpleButton_removeCallback(self, arg2, arg3)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoSimpleButton_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoSimpleButton_clearAlternateRep(self)

    def invokeCallbacks(self):
        return HEPVis_SWIG_Python.SoSimpleButton_invokeCallbacks(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSimpleButton

# Register SoSimpleButton in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSimpleButton_swigregister(SoSimpleButton)

def SoSimpleButton_getClassTypeId():
    return HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId()

def SoSimpleButton_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog()

def SoSimpleButton_initClass():
    return HEPVis_SWIG_Python.SoSimpleButton_initClass()

class RegionCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.RegionCamera_swiginit(self, HEPVis_SWIG_Python.new_RegionCamera(*args))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_RegionCamera

    def restore(self, arg2):
        return HEPVis_SWIG_Python.RegionCamera_restore(self, arg2)

# Register RegionCamera in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.RegionCamera_swigregister(RegionCamera)

class SbDoIt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDoIt

    def cast(self, arg2):
        return HEPVis_SWIG_Python.SbDoIt_cast(self, arg2)

# Register SbDoIt in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbDoIt_swigregister(SbDoIt)

class SbAddNode(SbDoIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cast(self, aClass):
        return HEPVis_SWIG_Python.SbAddNode_cast(self, aClass)

    def __init__(self, aNode, aPlacement):
        HEPVis_SWIG_Python.SbAddNode_swiginit(self, HEPVis_SWIG_Python.new_SbAddNode(aNode, aPlacement))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAddNode

    def getNode(self):
        return HEPVis_SWIG_Python.SbAddNode_getNode(self)

    def getPlacement(self):
        return HEPVis_SWIG_Python.SbAddNode_getPlacement(self)

    def reset(self):
        return HEPVis_SWIG_Python.SbAddNode_reset(self)

# Register SbAddNode in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbAddNode_swigregister(SbAddNode)

class SoRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoRegion_getNodekitCatalog(self)
    visible = property(HEPVis_SWIG_Python.SoRegion_visible_get, HEPVis_SWIG_Python.SoRegion_visible_set)
    verbose = property(HEPVis_SWIG_Python.SoRegion_verbose_get, HEPVis_SWIG_Python.SoRegion_verbose_set)
    color = property(HEPVis_SWIG_Python.SoRegion_color_get, HEPVis_SWIG_Python.SoRegion_color_set)
    origin = property(HEPVis_SWIG_Python.SoRegion_origin_get, HEPVis_SWIG_Python.SoRegion_origin_set)
    size = property(HEPVis_SWIG_Python.SoRegion_size_get, HEPVis_SWIG_Python.SoRegion_size_set)
    horizontalMargin = property(HEPVis_SWIG_Python.SoRegion_horizontalMargin_get, HEPVis_SWIG_Python.SoRegion_horizontalMargin_set)
    verticalMargin = property(HEPVis_SWIG_Python.SoRegion_verticalMargin_get, HEPVis_SWIG_Python.SoRegion_verticalMargin_set)
    PERCENT = HEPVis_SWIG_Python.SoRegion_PERCENT
    AXIS = HEPVis_SWIG_Python.SoRegion_AXIS
    originUnit = property(HEPVis_SWIG_Python.SoRegion_originUnit_get, HEPVis_SWIG_Python.SoRegion_originUnit_set)
    LEFT = HEPVis_SWIG_Python.SoRegion_LEFT
    CENTER = HEPVis_SWIG_Python.SoRegion_CENTER
    RIGHT = HEPVis_SWIG_Python.SoRegion_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoRegion_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoRegion_MIDDLE
    TOP = HEPVis_SWIG_Python.SoRegion_TOP
    horizontalJustification = property(HEPVis_SWIG_Python.SoRegion_horizontalJustification_get, HEPVis_SWIG_Python.SoRegion_horizontalJustification_set)
    verticalJustification = property(HEPVis_SWIG_Python.SoRegion_verticalJustification_get, HEPVis_SWIG_Python.SoRegion_verticalJustification_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoRegion_swiginit(self, HEPVis_SWIG_Python.new_SoRegion())

    def getViewportRegion(self):
        return HEPVis_SWIG_Python.SoRegion_getViewportRegion(self)

    def pushCamera(self):
        return HEPVis_SWIG_Python.SoRegion_pushCamera(self)

    def popCamera(self):
        return HEPVis_SWIG_Python.SoRegion_popCamera(self)

    def clearCameraStack(self):
        return HEPVis_SWIG_Python.SoRegion_clearCameraStack(self)

    def viewRectangle(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SoRegion_viewRectangle(self, arg2, arg3, arg4)

    def findPart(self, arg2):
        return HEPVis_SWIG_Python.SoRegion_findPart(self, arg2)

    def findNode(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoRegion_findNode(self, arg2, arg3)

    def styleCache(self):
        return HEPVis_SWIG_Python.SoRegion_styleCache(self)

    def clearStyleCache(self):
        return HEPVis_SWIG_Python.SoRegion_clearStyleCache(self)

    def setPAW_Placement(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SoRegion_setPAW_Placement(self, arg2, arg3, arg4)

    def getPAW_Placement(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SoRegion_getPAW_Placement(self, arg2, arg3, arg4)

    def raiseUpdateFlag(self):
        return HEPVis_SWIG_Python.SoRegion_raiseUpdateFlag(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoRegion_getCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoRegion_clear(self, *args)

    def refresh(self):
        return HEPVis_SWIG_Python.SoRegion_refresh(self)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoRegion_resetCamera(self)

    def setCamera(self, arg2):
        return HEPVis_SWIG_Python.SoRegion_setCamera(self, arg2)

    def doIt(self, arg2):
        return HEPVis_SWIG_Python.SoRegion_doIt(self, arg2)

    def undo(self):
        return HEPVis_SWIG_Python.SoRegion_undo(self)

    def resetUndo(self):
        return HEPVis_SWIG_Python.SoRegion_resetUndo(self)

    def connectFrom(self, arg2):
        return HEPVis_SWIG_Python.SoRegion_connectFrom(self, arg2)

    def getNodeOfInterest(self, *args):
        return HEPVis_SWIG_Python.SoRegion_getNodeOfInterest(self, *args)

    def placeInPage(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        return HEPVis_SWIG_Python.SoRegion_placeInPage(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    def setNode(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SoRegion_setNode(self, arg2, arg3, arg4)

    def setPosition(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoRegion_setPosition(self, arg2, arg3)

    def setSize(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoRegion_setSize(self, arg2, arg3)

    def readScene(self, *args):
        return HEPVis_SWIG_Python.SoRegion_readScene(self, *args)

    def getWriteNode(self, *args):
        return HEPVis_SWIG_Python.SoRegion_getWriteNode(self, *args)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoRegion_initClass()

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoRegion_GLRender(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRegion

    def cast_SoDisplayRegion(self):
        return HEPVis_SWIG_Python.SoRegion_cast_SoDisplayRegion(self)

    def cast_SoImageRegion(self):
        return HEPVis_SWIG_Python.SoRegion_cast_SoImageRegion(self)

    def cast_SoTextRegion(self):
        return HEPVis_SWIG_Python.SoRegion_cast_SoTextRegion(self)

    def cast_SoPlotterRegion(self):
        return HEPVis_SWIG_Python.SoRegion_cast_SoPlotterRegion(self)

# Register SoRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoRegion_swigregister(SoRegion)

def SoRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoRegion_getClassTypeId()

def SoRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog()

def SoRegion_initClass():
    return HEPVis_SWIG_Python.SoRegion_initClass()

class SoTextRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTextRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTextRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoTextRegion_getNodekitCatalog(self)
    text = property(HEPVis_SWIG_Python.SoTextRegion_text_get, HEPVis_SWIG_Python.SoTextRegion_text_set)
    LEFT = HEPVis_SWIG_Python.SoTextRegion_LEFT
    RIGHT = HEPVis_SWIG_Python.SoTextRegion_RIGHT
    CENTER = HEPVis_SWIG_Python.SoTextRegion_CENTER
    horizontalJustification = property(HEPVis_SWIG_Python.SoTextRegion_horizontalJustification_get, HEPVis_SWIG_Python.SoTextRegion_horizontalJustification_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTextRegion_alternateRep_get, HEPVis_SWIG_Python.SoTextRegion_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTextRegion_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoTextRegion_swiginit(self, HEPVis_SWIG_Python.new_SoTextRegion())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTextRegion_clearAlternateRep(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoTextRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoTextRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoTextRegion_getCamera(self)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoTextRegion_resetCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoTextRegion_clear(self, *args)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_pick(self, arg2)

    def getStyle(self, arg2):
        return HEPVis_SWIG_Python.SoTextRegion_getStyle(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextRegion

# Register SoTextRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTextRegion_swigregister(SoTextRegion)

def SoTextRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoTextRegion_getClassTypeId()

def SoTextRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog()

def SoTextRegion_initClass():
    return HEPVis_SWIG_Python.SoTextRegion_initClass()

class SoImageRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoImageRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoImageRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoImageRegion_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoImageRegion_alternateRep_get, HEPVis_SWIG_Python.SoImageRegion_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoImageRegion_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoImageRegion_swiginit(self, HEPVis_SWIG_Python.new_SoImageRegion())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoImageRegion_clearAlternateRep(self)

    def getImage(self):
        return HEPVis_SWIG_Python.SoImageRegion_getImage(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoImageRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoImageRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoImageRegion_getCamera(self)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoImageRegion_pick(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoImageRegion

# Register SoImageRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoImageRegion_swigregister(SoImageRegion)

def SoImageRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoImageRegion_getClassTypeId()

def SoImageRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog()

def SoImageRegion_initClass():
    return HEPVis_SWIG_Python.SoImageRegion_initClass()

class SoDisplayRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getNodekitCatalog(self)
    projection = property(HEPVis_SWIG_Python.SoDisplayRegion_projection_get, HEPVis_SWIG_Python.SoDisplayRegion_projection_set)
    alternateRep = property(HEPVis_SWIG_Python.SoDisplayRegion_alternateRep_get, HEPVis_SWIG_Python.SoDisplayRegion_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoDisplayRegion_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_doAction(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_write(self, arg2)

    def __init__(self):
        HEPVis_SWIG_Python.SoDisplayRegion_swiginit(self, HEPVis_SWIG_Python.new_SoDisplayRegion())

    def setCameraType(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_setCameraType(self, arg2)

    def setCamera(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_setCamera(self, arg2)

    def getSceneSeparator(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getSceneSeparator(self)

    def getStaticScene(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getStaticScene(self)

    def getDynamicScene(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getDynamicScene(self)

    def getLight(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getLight(self)

    def getLightModel(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getLightModel(self)

    def getTransform(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getTransform(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_clearAlternateRep(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_getCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoDisplayRegion_clear(self, *args)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_resetCamera(self)

    def doIt(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_doIt(self, arg2)

    def undo(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_undo(self)

    def resetUndo(self):
        return HEPVis_SWIG_Python.SoDisplayRegion_resetUndo(self)

    def connectFrom(self, arg2):
        return HEPVis_SWIG_Python.SoDisplayRegion_connectFrom(self, arg2)

    def getNodeOfInterest(self, *args):
        return HEPVis_SWIG_Python.SoDisplayRegion_getNodeOfInterest(self, *args)

    def readScene(self, *args):
        return HEPVis_SWIG_Python.SoDisplayRegion_readScene(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDisplayRegion

# Register SoDisplayRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoDisplayRegion_swigregister(SoDisplayRegion)

def SoDisplayRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId()

def SoDisplayRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog()

def SoDisplayRegion_initClass():
    return HEPVis_SWIG_Python.SoDisplayRegion_initClass()

class SoRulerRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoRulerRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoRulerRegion_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoRulerRegion_alternateRep_get, HEPVis_SWIG_Python.SoRulerRegion_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoRulerRegion_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoRulerRegion_swiginit(self, HEPVis_SWIG_Python.new_SoRulerRegion())

    def setMeasuredRegion(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_setMeasuredRegion(self, arg2)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoRulerRegion_clearAlternateRep(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoRulerRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoRulerRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoRulerRegion_getCamera(self)

    def getAxis(self):
        return HEPVis_SWIG_Python.SoRulerRegion_getAxis(self)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoRulerRegion_resetCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoRulerRegion_clear(self, *args)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoRulerRegion_pick(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRulerRegion

# Register SoRulerRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoRulerRegion_swigregister(SoRulerRegion)

def SoRulerRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId()

def SoRulerRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog()

def SoRulerRegion_initClass():
    return HEPVis_SWIG_Python.SoRulerRegion_initClass()

class SoFormRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoFormRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoFormRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoFormRegion_getNodekitCatalog(self)
    shapes = property(HEPVis_SWIG_Python.SoFormRegion_shapes_get, HEPVis_SWIG_Python.SoFormRegion_shapes_set)
    columns = property(HEPVis_SWIG_Python.SoFormRegion_columns_get, HEPVis_SWIG_Python.SoFormRegion_columns_set)
    rows = property(HEPVis_SWIG_Python.SoFormRegion_rows_get, HEPVis_SWIG_Python.SoFormRegion_rows_set)
    alternateRep = property(HEPVis_SWIG_Python.SoFormRegion_alternateRep_get, HEPVis_SWIG_Python.SoFormRegion_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoFormRegion_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoFormRegion_swiginit(self, HEPVis_SWIG_Python.new_SoFormRegion())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoFormRegion_clearAlternateRep(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoFormRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoFormRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoFormRegion_getCamera(self)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoFormRegion_resetCamera(self)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoFormRegion_pick(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoFormRegion

# Register SoFormRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoFormRegion_swigregister(SoFormRegion)

def SoFormRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoFormRegion_getClassTypeId()

def SoFormRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog()

def SoFormRegion_initClass():
    return HEPVis_SWIG_Python.SoFormRegion_initClass()

class SbSetRegionCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbSetRegionCallback

    def setCamera(self, arg2):
        return HEPVis_SWIG_Python.SbSetRegionCallback_setCamera(self, arg2)

# Register SbSetRegionCallback in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbSetRegionCallback_swigregister(SbSetRegionCallback)

class SbCollectCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbCollectCallback

    def execute(self, arg2, arg3):
        return HEPVis_SWIG_Python.SbCollectCallback_execute(self, arg2, arg3)

# Register SbCollectCallback in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbCollectCallback_swigregister(SbCollectCallback)

class SoCanvas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCanvas_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCanvas_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoCanvas_getNodekitCatalog(self)
    verbose = property(HEPVis_SWIG_Python.SoCanvas_verbose_get, HEPVis_SWIG_Python.SoCanvas_verbose_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCanvas_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoCanvas_swiginit(self, HEPVis_SWIG_Python.new_SoCanvas())

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoCanvas_getTopSeparator(self)

    def setHandlePickedPoint(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_setHandlePickedPoint(self, arg2)

    def handlePickedPoint(self):
        return HEPVis_SWIG_Python.SoCanvas_handlePickedPoint(self)

    def setCollectCallback(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_setCollectCallback(self, arg2)

    def getCollectCallback(self):
        return HEPVis_SWIG_Python.SoCanvas_getCollectCallback(self)

    def collect(self, arg2, arg3, arg4, arg5, arg6):
        return HEPVis_SWIG_Python.SoCanvas_collect(self, arg2, arg3, arg4, arg5, arg6)

    def createRegion(self, arg2, arg3, arg4, arg5, arg6):
        return HEPVis_SWIG_Python.SoCanvas_createRegion(self, arg2, arg3, arg4, arg5, arg6)

    def deleteRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_deleteRegion(self, arg2)

    def clearRegions(self):
        return HEPVis_SWIG_Python.SoCanvas_clearRegions(self)

    def deleteRegions(self):
        return HEPVis_SWIG_Python.SoCanvas_deleteRegions(self)

    def raiseUpdateFlagOfRegions(self):
        return HEPVis_SWIG_Python.SoCanvas_raiseUpdateFlagOfRegions(self)

    def refreshRegions(self):
        return HEPVis_SWIG_Python.SoCanvas_refreshRegions(self)

    def getNumberOfRegions(self):
        return HEPVis_SWIG_Python.SoCanvas_getNumberOfRegions(self)

    def setRootRegionsHighlightable(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_setRootRegionsHighlightable(self, arg2)

    def getRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getRegion(self, arg2)

    def getRegionIndex(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getRegionIndex(self, arg2)

    def getNextRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getNextRegion(self, arg2)

    def getPreviousRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getPreviousRegion(self, arg2)

    def setRegionOnTop(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_setRegionOnTop(self, arg2)

    def getPathRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getPathRegion(self, arg2)

    def getPickedRegion(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoCanvas_getPickedRegion(self, arg2, arg3)

    def setSetRegionCallback(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_setSetRegionCallback(self, arg2)

    def disableRegionCamera(self):
        return HEPVis_SWIG_Python.SoCanvas_disableRegionCamera(self)

    def getHighlightedRegion(self):
        return HEPVis_SWIG_Python.SoCanvas_getHighlightedRegion(self)

    def highlightRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_highlightRegion(self, arg2)

    def highlightNextRegion(self):
        return HEPVis_SWIG_Python.SoCanvas_highlightNextRegion(self)

    def highlightPreviousRegion(self):
        return HEPVis_SWIG_Python.SoCanvas_highlightPreviousRegion(self)

    def deleteHighlightedRegion(self):
        return HEPVis_SWIG_Python.SoCanvas_deleteHighlightedRegion(self)

    def setRegionsCanvasVerbosity(self):
        return HEPVis_SWIG_Python.SoCanvas_setRegionsCanvasVerbosity(self)

    def getNumberOfRootRegions(self):
        return HEPVis_SWIG_Python.SoCanvas_getNumberOfRootRegions(self)

    def isRootRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_isRootRegion(self, arg2)

    def getRootRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getRootRegion(self, arg2)

    def getRootRegionIndex(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getRootRegionIndex(self, arg2)

    def getNextRootRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getNextRootRegion(self, arg2)

    def getPreviousRootRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_getPreviousRootRegion(self, arg2)

    def currentRegion(self):
        return HEPVis_SWIG_Python.SoCanvas_currentRegion(self)

    def setCurrentRegion(self, *args):
        return HEPVis_SWIG_Python.SoCanvas_setCurrentRegion(self, *args)

    def connectCurrentRegion(self, arg2):
        return HEPVis_SWIG_Python.SoCanvas_connectCurrentRegion(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCanvas

# Register SoCanvas in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCanvas_swigregister(SoCanvas)

def SoCanvas_getClassTypeId():
    return HEPVis_SWIG_Python.SoCanvas_getClassTypeId()

def SoCanvas_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog()

def SoCanvas_initClass():
    return HEPVis_SWIG_Python.SoCanvas_initClass()

class SoPage(SoCanvas):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPage_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPage_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoPage_getNodekitCatalog(self)
    title = property(HEPVis_SWIG_Python.SoPage_title_get, HEPVis_SWIG_Python.SoPage_title_set)
    titleVisible = property(HEPVis_SWIG_Python.SoPage_titleVisible_get, HEPVis_SWIG_Python.SoPage_titleVisible_set)
    titleHeight = property(HEPVis_SWIG_Python.SoPage_titleHeight_get, HEPVis_SWIG_Python.SoPage_titleHeight_set)
    titleGeometryAutomated = property(HEPVis_SWIG_Python.SoPage_titleGeometryAutomated_get, HEPVis_SWIG_Python.SoPage_titleGeometryAutomated_set)
    LEAVE_ALONE = HEPVis_SWIG_Python.SoPage_LEAVE_ALONE
    PAW_GRID = HEPVis_SWIG_Python.SoPage_PAW_GRID
    regionsResizePolicy = property(HEPVis_SWIG_Python.SoPage_regionsResizePolicy_get, HEPVis_SWIG_Python.SoPage_regionsResizePolicy_set)
    pageWidth = property(HEPVis_SWIG_Python.SoPage_pageWidth_get, HEPVis_SWIG_Python.SoPage_pageWidth_set)
    pageHeight = property(HEPVis_SWIG_Python.SoPage_pageHeight_get, HEPVis_SWIG_Python.SoPage_pageHeight_set)
    leftMargin = property(HEPVis_SWIG_Python.SoPage_leftMargin_get, HEPVis_SWIG_Python.SoPage_leftMargin_set)
    rightMargin = property(HEPVis_SWIG_Python.SoPage_rightMargin_get, HEPVis_SWIG_Python.SoPage_rightMargin_set)
    bottomMargin = property(HEPVis_SWIG_Python.SoPage_bottomMargin_get, HEPVis_SWIG_Python.SoPage_bottomMargin_set)
    topMargin = property(HEPVis_SWIG_Python.SoPage_topMargin_get, HEPVis_SWIG_Python.SoPage_topMargin_set)
    horizontalSpacing = property(HEPVis_SWIG_Python.SoPage_horizontalSpacing_get, HEPVis_SWIG_Python.SoPage_horizontalSpacing_set)
    verticalSpacing = property(HEPVis_SWIG_Python.SoPage_verticalSpacing_get, HEPVis_SWIG_Python.SoPage_verticalSpacing_set)
    alternateRep = property(HEPVis_SWIG_Python.SoPage_alternateRep_get, HEPVis_SWIG_Python.SoPage_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPage_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoPage_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoPage_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoPage_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoPage_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoPage_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoPage_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoPage_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoPage_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoPage_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoPage_pick(self, arg2)

    def __init__(self):
        HEPVis_SWIG_Python.SoPage_swiginit(self, HEPVis_SWIG_Python.new_SoPage())

    def refresh(self):
        return HEPVis_SWIG_Python.SoPage_refresh(self)

    def raiseUpdateFlag(self):
        return HEPVis_SWIG_Python.SoPage_raiseUpdateFlag(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoPage_updateChildren(self)

    def getImageWriter(self):
        return HEPVis_SWIG_Python.SoPage_getImageWriter(self)

    def getTitleRegion(self):
        return HEPVis_SWIG_Python.SoPage_getTitleRegion(self)

    def setTitleVisible(self, arg2):
        return HEPVis_SWIG_Python.SoPage_setTitleVisible(self, arg2)

    def createRegions(self, *args):
        return HEPVis_SWIG_Python.SoPage_createRegions(self, *args)

    def addRegions(self, arg2, arg3=1, arg4=1):
        return HEPVis_SWIG_Python.SoPage_addRegions(self, arg2, arg3, arg4)

    def mapRegionToPage(self, arg2):
        return HEPVis_SWIG_Python.SoPage_mapRegionToPage(self, arg2)

    def mapHighlightedRegionToPage(self):
        return HEPVis_SWIG_Python.SoPage_mapHighlightedRegionToPage(self)

    def createGridRegion(self, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SoPage_createGridRegion(self, arg2, arg3, arg4, arg5)

    def resetGrid(self):
        return HEPVis_SWIG_Python.SoPage_resetGrid(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPage_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPage_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPage

# Register SoPage in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPage_swigregister(SoPage)

def SoPage_getClassTypeId():
    return HEPVis_SWIG_Python.SoPage_getClassTypeId()

def SoPage_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog()

def SoPage_initClass():
    return HEPVis_SWIG_Python.SoPage_initClass()

class SoPainterAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPainterAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPainterAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return HEPVis_SWIG_Python.SoPainterAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return HEPVis_SWIG_Python.SoPainterAction_enableElement(type, stackindex)

    def __init__(self, arg2, arg3, arg4=0):
        HEPVis_SWIG_Python.SoPainterAction_swiginit(self, HEPVis_SWIG_Python.new_SoPainterAction(arg2, arg3, arg4))

    def setPainter(self, arg2):
        return HEPVis_SWIG_Python.SoPainterAction_setPainter(self, arg2)

    def setViewportRegion(self, arg2):
        return HEPVis_SWIG_Python.SoPainterAction_setViewportRegion(self, arg2)

    def getViewportRegion(self):
        return HEPVis_SWIG_Python.SoPainterAction_getViewportRegion(self)

    def setBackgroundColor(self, arg2):
        return HEPVis_SWIG_Python.SoPainterAction_setBackgroundColor(self, arg2)

    def enableSort(self, arg2):
        return HEPVis_SWIG_Python.SoPainterAction_enableSort(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPainterAction_initClass()

    def drawPrimitive(self, arg2, arg3, arg4, arg5, arg6):
        return HEPVis_SWIG_Python.SoPainterAction_drawPrimitive(self, arg2, arg3, arg4, arg5, arg6)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPainterAction

# Register SoPainterAction in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPainterAction_swigregister(SoPainterAction)

def SoPainterAction_getClassTypeId():
    return HEPVis_SWIG_Python.SoPainterAction_getClassTypeId()

def SoPainterAction_addMethod(type, method):
    return HEPVis_SWIG_Python.SoPainterAction_addMethod(type, method)

def SoPainterAction_enableElement(type, stackindex):
    return HEPVis_SWIG_Python.SoPainterAction_enableElement(type, stackindex)

def SoPainterAction_initClass():
    return HEPVis_SWIG_Python.SoPainterAction_initClass()

class SoGL2PSAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoGL2PSAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return HEPVis_SWIG_Python.SoGL2PSAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return HEPVis_SWIG_Python.SoGL2PSAction_enableElement(type, stackindex)

    def __init__(self, arg2):
        HEPVis_SWIG_Python.SoGL2PSAction_swiginit(self, HEPVis_SWIG_Python.new_SoGL2PSAction(arg2))
    PS = HEPVis_SWIG_Python.SoGL2PSAction_PS
    EPS = HEPVis_SWIG_Python.SoGL2PSAction_EPS
    TEX = HEPVis_SWIG_Python.SoGL2PSAction_TEX
    PDF = HEPVis_SWIG_Python.SoGL2PSAction_PDF
    SVG = HEPVis_SWIG_Python.SoGL2PSAction_SVG
    PGF = HEPVis_SWIG_Python.SoGL2PSAction_PGF

    def setFileFormat(self, arg2):
        return HEPVis_SWIG_Python.SoGL2PSAction_setFileFormat(self, arg2)

    def setFileName(self, arg2):
        return HEPVis_SWIG_Python.SoGL2PSAction_setFileName(self, arg2)

    def setPageOptions(self, options):
        return HEPVis_SWIG_Python.SoGL2PSAction_setPageOptions(self, options)

    def enableFileWriting(self):
        return HEPVis_SWIG_Python.SoGL2PSAction_enableFileWriting(self)

    def disableFileWriting(self):
        return HEPVis_SWIG_Python.SoGL2PSAction_disableFileWriting(self)

    def fileWritingEnabled(self):
        return HEPVis_SWIG_Python.SoGL2PSAction_fileWritingEnabled(self)

    def addBitmap(self, arg2, arg3, arg4=0, arg5=0, arg6=0, arg7=0):
        return HEPVis_SWIG_Python.SoGL2PSAction_addBitmap(self, arg2, arg3, arg4, arg5, arg6, arg7)

    def beginViewport(self, draw_back=1):
        return HEPVis_SWIG_Python.SoGL2PSAction_beginViewport(self, draw_back)

    def endViewport(self):
        return HEPVis_SWIG_Python.SoGL2PSAction_endViewport(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoGL2PSAction_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoGL2PSAction

# Register SoGL2PSAction in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoGL2PSAction_swigregister(SoGL2PSAction)

def SoGL2PSAction_getClassTypeId():
    return HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId()

def SoGL2PSAction_addMethod(type, method):
    return HEPVis_SWIG_Python.SoGL2PSAction_addMethod(type, method)

def SoGL2PSAction_enableElement(type, stackindex):
    return HEPVis_SWIG_Python.SoGL2PSAction_enableElement(type, stackindex)

def SoGL2PSAction_initClass():
    return HEPVis_SWIG_Python.SoGL2PSAction_initClass()

class SoCollectAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCollectAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCollectAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return HEPVis_SWIG_Python.SoCollectAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return HEPVis_SWIG_Python.SoCollectAction_enableElement(type, stackindex)

    def __init__(self, arg2):
        HEPVis_SWIG_Python.SoCollectAction_swiginit(self, HEPVis_SWIG_Python.new_SoCollectAction(arg2))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCollectAction

    def setSearchArea(self, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SoCollectAction_setSearchArea(self, arg2, arg3, arg4, arg5)

    def paths(self):
        return HEPVis_SWIG_Python.SoCollectAction_paths(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCollectAction_initClass()

# Register SoCollectAction in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCollectAction_swigregister(SoCollectAction)

def SoCollectAction_getClassTypeId():
    return HEPVis_SWIG_Python.SoCollectAction_getClassTypeId()

def SoCollectAction_addMethod(type, method):
    return HEPVis_SWIG_Python.SoCollectAction_addMethod(type, method)

def SoCollectAction_enableElement(type, stackindex):
    return HEPVis_SWIG_Python.SoCollectAction_enableElement(type, stackindex)

def SoCollectAction_initClass():
    return HEPVis_SWIG_Python.SoCollectAction_initClass()

class SoCounterAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCounterAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCounterAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return HEPVis_SWIG_Python.SoCounterAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return HEPVis_SWIG_Python.SoCounterAction_enableElement(type, stackindex)

    def __init__(self):
        HEPVis_SWIG_Python.SoCounterAction_swiginit(self, HEPVis_SWIG_Python.new_SoCounterAction())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCounterAction

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCounterAction_initClass()
    NODE = HEPVis_SWIG_Python.SoCounterAction_NODE
    TYPE = HEPVis_SWIG_Python.SoCounterAction_TYPE
    NAME = HEPVis_SWIG_Python.SoCounterAction_NAME

    def setLookFor(self, arg2):
        return HEPVis_SWIG_Python.SoCounterAction_setLookFor(self, arg2)

    def setType(self, arg2, arg3=1):
        return HEPVis_SWIG_Python.SoCounterAction_setType(self, arg2, arg3)

    def setName(self, arg2):
        return HEPVis_SWIG_Python.SoCounterAction_setName(self, arg2)

    def getCount(self):
        return HEPVis_SWIG_Python.SoCounterAction_getCount(self)

# Register SoCounterAction in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCounterAction_swigregister(SoCounterAction)

def SoCounterAction_getClassTypeId():
    return HEPVis_SWIG_Python.SoCounterAction_getClassTypeId()

def SoCounterAction_addMethod(type, method):
    return HEPVis_SWIG_Python.SoCounterAction_addMethod(type, method)

def SoCounterAction_enableElement(type, stackindex):
    return HEPVis_SWIG_Python.SoCounterAction_enableElement(type, stackindex)

def SoCounterAction_initClass():
    return HEPVis_SWIG_Python.SoCounterAction_initClass()

class SoAlternateRepAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoAlternateRepAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return HEPVis_SWIG_Python.SoAlternateRepAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return HEPVis_SWIG_Python.SoAlternateRepAction_enableElement(type, stackindex)
    DEFAULT = HEPVis_SWIG_Python.SoAlternateRepAction_DEFAULT
    VRML = HEPVis_SWIG_Python.SoAlternateRepAction_VRML

    def __init__(self):
        HEPVis_SWIG_Python.SoAlternateRepAction_swiginit(self, HEPVis_SWIG_Python.new_SoAlternateRepAction())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAlternateRepAction

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoAlternateRepAction_initClass()

    def setGenerate(self, arg2):
        return HEPVis_SWIG_Python.SoAlternateRepAction_setGenerate(self, arg2)

    def getGenerate(self):
        return HEPVis_SWIG_Python.SoAlternateRepAction_getGenerate(self)

    def setForWhat(self, arg2):
        return HEPVis_SWIG_Python.SoAlternateRepAction_setForWhat(self, arg2)

    def getForWhat(self):
        return HEPVis_SWIG_Python.SoAlternateRepAction_getForWhat(self)

# Register SoAlternateRepAction in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoAlternateRepAction_swigregister(SoAlternateRepAction)

def SoAlternateRepAction_getClassTypeId():
    return HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId()

def SoAlternateRepAction_addMethod(type, method):
    return HEPVis_SWIG_Python.SoAlternateRepAction_addMethod(type, method)

def SoAlternateRepAction_enableElement(type, stackindex):
    return HEPVis_SWIG_Python.SoAlternateRepAction_enableElement(type, stackindex)

def SoAlternateRepAction_initClass():
    return HEPVis_SWIG_Python.SoAlternateRepAction_initClass()

class HEPVis_SoIntersectingPrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    path = property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_path_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_path_set)
    SEGMENT = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_SEGMENT
    LINE_SEGMENT = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_LINE_SEGMENT
    TRIANGLE = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_TRIANGLE
    type = property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_type_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_type_set)
    vertex = property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_vertex_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_vertex_set)
    xf_vertex = property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_xf_vertex_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_xf_vertex_set)

    def __init__(self):
        HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_swiginit(self, HEPVis_SWIG_Python.new_HEPVis_SoIntersectingPrimitive())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HEPVis_SoIntersectingPrimitive

# Register HEPVis_SoIntersectingPrimitive in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_swigregister(HEPVis_SoIntersectingPrimitive)

class HEPVis_SoIntersectionDetectionAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement(type, stackindex)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_swiginit(self, HEPVis_SWIG_Python.new_HEPVis_SoIntersectionDetectionAction())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HEPVis_SoIntersectionDetectionAction
    NEXT_PRIMITIVE = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_NEXT_PRIMITIVE
    NEXT_SHAPE = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_NEXT_SHAPE
    ABORT = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_ABORT

    def setIntersectionDetectionEpsilon(self, epsilon):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionDetectionEpsilon(self, epsilon)

    def getIntersectionDetectionEpsilon(self):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionDetectionEpsilon(self)

    @staticmethod
    def setIntersectionEpsilon(epsilon):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon)

    @staticmethod
    def getIntersectionEpsilon():
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon()

    def setTypeEnabled(self, type, enable):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setTypeEnabled(self, type, enable)

    def isTypeEnabled(self, type, checkgroups=0):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isTypeEnabled(self, type, checkgroups)

    def setManipsEnabled(self, enable):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setManipsEnabled(self, enable)

    def isManipsEnabled(self):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isManipsEnabled(self)

    def setDraggersEnabled(self, enable):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setDraggersEnabled(self, enable)

    def isDraggersEnabled(self):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isDraggersEnabled(self)

    def setShapeInternalsEnabled(self, enable):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setShapeInternalsEnabled(self, enable)

    def isShapeInternalsEnabled(self):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isShapeInternalsEnabled(self)

    def addVisitationCallback(self, type, cb, closure):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addVisitationCallback(self, type, cb, closure)

    def removeVisitationCallback(self, type, cb, closure):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_removeVisitationCallback(self, type, cb, closure)

    def apply(self, *args):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_apply(self, *args)

    def setFilterCallback(self, cb, closure=None):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setFilterCallback(self, cb, closure)

    def addIntersectionCallback(self, cb, closure=None):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addIntersectionCallback(self, cb, closure)

    def removeIntersectionCallback(self, cb, closure=None):
        return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_removeIntersectionCallback(self, cb, closure)

# Register HEPVis_SoIntersectionDetectionAction in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_swigregister(HEPVis_SoIntersectionDetectionAction)

def HEPVis_SoIntersectionDetectionAction_getClassTypeId():
    return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId()

def HEPVis_SoIntersectionDetectionAction_addMethod(type, method):
    return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod(type, method)

def HEPVis_SoIntersectionDetectionAction_enableElement(type, stackindex):
    return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement(type, stackindex)

def HEPVis_SoIntersectionDetectionAction_initClass():
    return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass()

def HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon):
    return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon)

def HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon():
    return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon()

class SoSFPolyhedron(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SoSFPolyhedron_swiginit(self, HEPVis_SWIG_Python.new_SoSFPolyhedron())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSFPolyhedron

    @staticmethod
    def createInstance():
        return HEPVis_SWIG_Python.SoSFPolyhedron_createInstance()

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSFPolyhedron_getTypeId(self)

    def copyFrom(self, field):
        return HEPVis_SWIG_Python.SoSFPolyhedron_copyFrom(self, field)

    def isSame(self, field):
        return HEPVis_SWIG_Python.SoSFPolyhedron_isSame(self, field)

    def getValue(self):
        return HEPVis_SWIG_Python.SoSFPolyhedron_getValue(self)

    def setValue(self, newvalue):
        return HEPVis_SWIG_Python.SoSFPolyhedron_setValue(self, newvalue)

    def __eq__(self, field):
        return HEPVis_SWIG_Python.SoSFPolyhedron___eq__(self, field)

    def __ne__(self, field):
        return HEPVis_SWIG_Python.SoSFPolyhedron___ne__(self, field)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSFPolyhedron_initClass()

# Register SoSFPolyhedron in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSFPolyhedron_swigregister(SoSFPolyhedron)

def SoSFPolyhedron_createInstance():
    return HEPVis_SWIG_Python.SoSFPolyhedron_createInstance()

def SoSFPolyhedron_getClassTypeId():
    return HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId()

def SoSFPolyhedron_initClass():
    return HEPVis_SWIG_Python.SoSFPolyhedron_initClass()

class SoPolyhedron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPolyhedron_getTypeId(self)
    solid = property(HEPVis_SWIG_Python.SoPolyhedron_solid_get, HEPVis_SWIG_Python.SoPolyhedron_solid_set)
    reducedWireFrame = property(HEPVis_SWIG_Python.SoPolyhedron_reducedWireFrame_get, HEPVis_SWIG_Python.SoPolyhedron_reducedWireFrame_set)
    projection = property(HEPVis_SWIG_Python.SoPolyhedron_projection_get, HEPVis_SWIG_Python.SoPolyhedron_projection_set)
    polyhedron = property(HEPVis_SWIG_Python.SoPolyhedron_polyhedron_get, HEPVis_SWIG_Python.SoPolyhedron_polyhedron_set)
    alternateRep = property(HEPVis_SWIG_Python.SoPolyhedron_alternateRep_get, HEPVis_SWIG_Python.SoPolyhedron_alternateRep_set)

    def __init__(self, *args):
        HEPVis_SWIG_Python.SoPolyhedron_swiginit(self, HEPVis_SWIG_Python.new_SoPolyhedron(*args))

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPolyhedron_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPolyhedron_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPolyhedron_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolyhedron

# Register SoPolyhedron in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPolyhedron_swigregister(SoPolyhedron)

def SoPolyhedron_getClassTypeId():
    return HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId()

def SoPolyhedron_initClass():
    return HEPVis_SWIG_Python.SoPolyhedron_initClass()

class SoTubs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTubs_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTubs_getTypeId(self)
    pRMin = property(HEPVis_SWIG_Python.SoTubs_pRMin_get, HEPVis_SWIG_Python.SoTubs_pRMin_set)
    pRMax = property(HEPVis_SWIG_Python.SoTubs_pRMax_get, HEPVis_SWIG_Python.SoTubs_pRMax_set)
    pDz = property(HEPVis_SWIG_Python.SoTubs_pDz_get, HEPVis_SWIG_Python.SoTubs_pDz_set)
    pSPhi = property(HEPVis_SWIG_Python.SoTubs_pSPhi_get, HEPVis_SWIG_Python.SoTubs_pSPhi_set)
    pDPhi = property(HEPVis_SWIG_Python.SoTubs_pDPhi_get, HEPVis_SWIG_Python.SoTubs_pDPhi_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTubs_alternateRep_get, HEPVis_SWIG_Python.SoTubs_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTubs_swiginit(self, HEPVis_SWIG_Python.new_SoTubs())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTubs_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTubs_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTubs_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTubs

# Register SoTubs in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTubs_swigregister(SoTubs)

def SoTubs_getClassTypeId():
    return HEPVis_SWIG_Python.SoTubs_getClassTypeId()

def SoTubs_initClass():
    return HEPVis_SWIG_Python.SoTubs_initClass()

class SoBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoBox_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoBox_getTypeId(self)
    fDx = property(HEPVis_SWIG_Python.SoBox_fDx_get, HEPVis_SWIG_Python.SoBox_fDx_set)
    fDy = property(HEPVis_SWIG_Python.SoBox_fDy_get, HEPVis_SWIG_Python.SoBox_fDy_set)
    fDz = property(HEPVis_SWIG_Python.SoBox_fDz_get, HEPVis_SWIG_Python.SoBox_fDz_set)
    alternateRep = property(HEPVis_SWIG_Python.SoBox_alternateRep_get, HEPVis_SWIG_Python.SoBox_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoBox_swiginit(self, HEPVis_SWIG_Python.new_SoBox())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoBox_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoBox_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoBox_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoBox

# Register SoBox in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoBox_swigregister(SoBox)

def SoBox_getClassTypeId():
    return HEPVis_SWIG_Python.SoBox_getClassTypeId()

def SoBox_initClass():
    return HEPVis_SWIG_Python.SoBox_initClass()

class SoTrd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTrd_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTrd_getTypeId(self)
    fDx1 = property(HEPVis_SWIG_Python.SoTrd_fDx1_get, HEPVis_SWIG_Python.SoTrd_fDx1_set)
    fDx2 = property(HEPVis_SWIG_Python.SoTrd_fDx2_get, HEPVis_SWIG_Python.SoTrd_fDx2_set)
    fDy1 = property(HEPVis_SWIG_Python.SoTrd_fDy1_get, HEPVis_SWIG_Python.SoTrd_fDy1_set)
    fDy2 = property(HEPVis_SWIG_Python.SoTrd_fDy2_get, HEPVis_SWIG_Python.SoTrd_fDy2_set)
    fDz = property(HEPVis_SWIG_Python.SoTrd_fDz_get, HEPVis_SWIG_Python.SoTrd_fDz_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTrd_alternateRep_get, HEPVis_SWIG_Python.SoTrd_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTrd_swiginit(self, HEPVis_SWIG_Python.new_SoTrd())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTrd_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTrd_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTrd_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTrd

# Register SoTrd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTrd_swigregister(SoTrd)

def SoTrd_getClassTypeId():
    return HEPVis_SWIG_Python.SoTrd_getClassTypeId()

def SoTrd_initClass():
    return HEPVis_SWIG_Python.SoTrd_initClass()

class SoCons(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCons_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCons_getTypeId(self)
    fRmin1 = property(HEPVis_SWIG_Python.SoCons_fRmin1_get, HEPVis_SWIG_Python.SoCons_fRmin1_set)
    fRmin2 = property(HEPVis_SWIG_Python.SoCons_fRmin2_get, HEPVis_SWIG_Python.SoCons_fRmin2_set)
    fRmax1 = property(HEPVis_SWIG_Python.SoCons_fRmax1_get, HEPVis_SWIG_Python.SoCons_fRmax1_set)
    fRmax2 = property(HEPVis_SWIG_Python.SoCons_fRmax2_get, HEPVis_SWIG_Python.SoCons_fRmax2_set)
    fDz = property(HEPVis_SWIG_Python.SoCons_fDz_get, HEPVis_SWIG_Python.SoCons_fDz_set)
    fSPhi = property(HEPVis_SWIG_Python.SoCons_fSPhi_get, HEPVis_SWIG_Python.SoCons_fSPhi_set)
    fDPhi = property(HEPVis_SWIG_Python.SoCons_fDPhi_get, HEPVis_SWIG_Python.SoCons_fDPhi_set)
    smoothDraw = property(HEPVis_SWIG_Python.SoCons_smoothDraw_get, HEPVis_SWIG_Python.SoCons_smoothDraw_set)
    alternateRep = property(HEPVis_SWIG_Python.SoCons_alternateRep_get, HEPVis_SWIG_Python.SoCons_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoCons_swiginit(self, HEPVis_SWIG_Python.new_SoCons())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCons_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoCons_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoCons_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCons

# Register SoCons in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCons_swigregister(SoCons)

def SoCons_getClassTypeId():
    return HEPVis_SWIG_Python.SoCons_getClassTypeId()

def SoCons_initClass():
    return HEPVis_SWIG_Python.SoCons_initClass()

class SoTrap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTrap_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTrap_getTypeId(self)
    pDz = property(HEPVis_SWIG_Python.SoTrap_pDz_get, HEPVis_SWIG_Python.SoTrap_pDz_set)
    pTheta = property(HEPVis_SWIG_Python.SoTrap_pTheta_get, HEPVis_SWIG_Python.SoTrap_pTheta_set)
    pPhi = property(HEPVis_SWIG_Python.SoTrap_pPhi_get, HEPVis_SWIG_Python.SoTrap_pPhi_set)
    pDy1 = property(HEPVis_SWIG_Python.SoTrap_pDy1_get, HEPVis_SWIG_Python.SoTrap_pDy1_set)
    pDx1 = property(HEPVis_SWIG_Python.SoTrap_pDx1_get, HEPVis_SWIG_Python.SoTrap_pDx1_set)
    pDx2 = property(HEPVis_SWIG_Python.SoTrap_pDx2_get, HEPVis_SWIG_Python.SoTrap_pDx2_set)
    pDy2 = property(HEPVis_SWIG_Python.SoTrap_pDy2_get, HEPVis_SWIG_Python.SoTrap_pDy2_set)
    pDx3 = property(HEPVis_SWIG_Python.SoTrap_pDx3_get, HEPVis_SWIG_Python.SoTrap_pDx3_set)
    pDx4 = property(HEPVis_SWIG_Python.SoTrap_pDx4_get, HEPVis_SWIG_Python.SoTrap_pDx4_set)
    pAlp1 = property(HEPVis_SWIG_Python.SoTrap_pAlp1_get, HEPVis_SWIG_Python.SoTrap_pAlp1_set)
    pAlp2 = property(HEPVis_SWIG_Python.SoTrap_pAlp2_get, HEPVis_SWIG_Python.SoTrap_pAlp2_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTrap_alternateRep_get, HEPVis_SWIG_Python.SoTrap_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTrap_swiginit(self, HEPVis_SWIG_Python.new_SoTrap())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTrap_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTrap_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTrap_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTrap

# Register SoTrap in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTrap_swigregister(SoTrap)

def SoTrap_getClassTypeId():
    return HEPVis_SWIG_Python.SoTrap_getClassTypeId()

def SoTrap_initClass():
    return HEPVis_SWIG_Python.SoTrap_initClass()

class SoArrow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoArrow_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoArrow_getTypeId(self)
    tip = property(HEPVis_SWIG_Python.SoArrow_tip_get, HEPVis_SWIG_Python.SoArrow_tip_set)
    tail = property(HEPVis_SWIG_Python.SoArrow_tail_get, HEPVis_SWIG_Python.SoArrow_tail_set)
    size = property(HEPVis_SWIG_Python.SoArrow_size_get, HEPVis_SWIG_Python.SoArrow_size_set)
    conicalShaft = property(HEPVis_SWIG_Python.SoArrow_conicalShaft_get, HEPVis_SWIG_Python.SoArrow_conicalShaft_set)
    alternateRep = property(HEPVis_SWIG_Python.SoArrow_alternateRep_get, HEPVis_SWIG_Python.SoArrow_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoArrow_swiginit(self, HEPVis_SWIG_Python.new_SoArrow())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoArrow_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoArrow_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoArrow_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoArrow

# Register SoArrow in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoArrow_swigregister(SoArrow)

def SoArrow_getClassTypeId():
    return HEPVis_SWIG_Python.SoArrow_getClassTypeId()

def SoArrow_initClass():
    return HEPVis_SWIG_Python.SoArrow_initClass()

class SoEllipsoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoEllipsoid_getTypeId(self)
    eigenvalues = property(HEPVis_SWIG_Python.SoEllipsoid_eigenvalues_get, HEPVis_SWIG_Python.SoEllipsoid_eigenvalues_set)
    rotation = property(HEPVis_SWIG_Python.SoEllipsoid_rotation_get, HEPVis_SWIG_Python.SoEllipsoid_rotation_set)
    center = property(HEPVis_SWIG_Python.SoEllipsoid_center_get, HEPVis_SWIG_Python.SoEllipsoid_center_set)
    alternateRep = property(HEPVis_SWIG_Python.SoEllipsoid_alternateRep_get, HEPVis_SWIG_Python.SoEllipsoid_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoEllipsoid_swiginit(self, HEPVis_SWIG_Python.new_SoEllipsoid())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoEllipsoid_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoEllipsoid_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoEllipsoid_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipsoid

# Register SoEllipsoid in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoEllipsoid_swigregister(SoEllipsoid)

def SoEllipsoid_getClassTypeId():
    return HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId()

def SoEllipsoid_initClass():
    return HEPVis_SWIG_Python.SoEllipsoid_initClass()

class SoEllipsoidSegment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoEllipsoidSegment_getTypeId(self)
    ax = property(HEPVis_SWIG_Python.SoEllipsoidSegment_ax_get, HEPVis_SWIG_Python.SoEllipsoidSegment_ax_set)
    by = property(HEPVis_SWIG_Python.SoEllipsoidSegment_by_get, HEPVis_SWIG_Python.SoEllipsoidSegment_by_set)
    cz = property(HEPVis_SWIG_Python.SoEllipsoidSegment_cz_get, HEPVis_SWIG_Python.SoEllipsoidSegment_cz_set)
    fSPhi = property(HEPVis_SWIG_Python.SoEllipsoidSegment_fSPhi_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fSPhi_set)
    fDPhi = property(HEPVis_SWIG_Python.SoEllipsoidSegment_fDPhi_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fDPhi_set)
    fSTheta = property(HEPVis_SWIG_Python.SoEllipsoidSegment_fSTheta_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fSTheta_set)
    fDTheta = property(HEPVis_SWIG_Python.SoEllipsoidSegment_fDTheta_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fDTheta_set)
    nSides = property(HEPVis_SWIG_Python.SoEllipsoidSegment_nSides_get, HEPVis_SWIG_Python.SoEllipsoidSegment_nSides_set)
    alternateRep = property(HEPVis_SWIG_Python.SoEllipsoidSegment_alternateRep_get, HEPVis_SWIG_Python.SoEllipsoidSegment_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoEllipsoidSegment_swiginit(self, HEPVis_SWIG_Python.new_SoEllipsoidSegment())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoEllipsoidSegment_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoEllipsoidSegment_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoEllipsoidSegment_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipsoidSegment

# Register SoEllipsoidSegment in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoEllipsoidSegment_swigregister(SoEllipsoidSegment)

def SoEllipsoidSegment_getClassTypeId():
    return HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId()

def SoEllipsoidSegment_initClass():
    return HEPVis_SWIG_Python.SoEllipsoidSegment_initClass()

class SoEllipticalPrism(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoEllipticalPrism_getTypeId(self)
    eigenvalues = property(HEPVis_SWIG_Python.SoEllipticalPrism_eigenvalues_get, HEPVis_SWIG_Python.SoEllipticalPrism_eigenvalues_set)
    extent = property(HEPVis_SWIG_Python.SoEllipticalPrism_extent_get, HEPVis_SWIG_Python.SoEllipticalPrism_extent_set)
    rotation = property(HEPVis_SWIG_Python.SoEllipticalPrism_rotation_get, HEPVis_SWIG_Python.SoEllipticalPrism_rotation_set)
    center = property(HEPVis_SWIG_Python.SoEllipticalPrism_center_get, HEPVis_SWIG_Python.SoEllipticalPrism_center_set)
    alternateRep = property(HEPVis_SWIG_Python.SoEllipticalPrism_alternateRep_get, HEPVis_SWIG_Python.SoEllipticalPrism_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoEllipticalPrism_swiginit(self, HEPVis_SWIG_Python.new_SoEllipticalPrism())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoEllipticalPrism_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoEllipticalPrism_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoEllipticalPrism_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipticalPrism

# Register SoEllipticalPrism in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoEllipticalPrism_swigregister(SoEllipticalPrism)

def SoEllipticalPrism_getClassTypeId():
    return HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId()

def SoEllipticalPrism_initClass():
    return HEPVis_SWIG_Python.SoEllipticalPrism_initClass()

SO_TORUS_U_DIM = HEPVis_SWIG_Python.SO_TORUS_U_DIM
SO_TORUS_V_DIM = HEPVis_SWIG_Python.SO_TORUS_V_DIM
SO_TORUS_U_ORDER = HEPVis_SWIG_Python.SO_TORUS_U_ORDER
SO_TORUS_V_ORDER = HEPVis_SWIG_Python.SO_TORUS_V_ORDER
class SoTorus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTorus_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTorus_getTypeId(self)
    rMinor = property(HEPVis_SWIG_Python.SoTorus_rMinor_get, HEPVis_SWIG_Python.SoTorus_rMinor_set)
    rMajor = property(HEPVis_SWIG_Python.SoTorus_rMajor_get, HEPVis_SWIG_Python.SoTorus_rMajor_set)
    center = property(HEPVis_SWIG_Python.SoTorus_center_get, HEPVis_SWIG_Python.SoTorus_center_set)
    alternateRep = property(HEPVis_SWIG_Python.SoTorus_alternateRep_get, HEPVis_SWIG_Python.SoTorus_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoTorus_swiginit(self, HEPVis_SWIG_Python.new_SoTorus())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoTorus_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoTorus_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTorus_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTorus

# Register SoTorus in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTorus_swigregister(SoTorus)

def SoTorus_getClassTypeId():
    return HEPVis_SWIG_Python.SoTorus_getClassTypeId()

def SoTorus_initClass():
    return HEPVis_SWIG_Python.SoTorus_initClass()

class SoPcon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPcon_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPcon_getTypeId(self)
    vtxPts = property(HEPVis_SWIG_Python.SoPcon_vtxPts_get, HEPVis_SWIG_Python.SoPcon_vtxPts_set)
    center = property(HEPVis_SWIG_Python.SoPcon_center_get, HEPVis_SWIG_Python.SoPcon_center_set)
    startAngle = property(HEPVis_SWIG_Python.SoPcon_startAngle_get, HEPVis_SWIG_Python.SoPcon_startAngle_set)
    deltaAngle = property(HEPVis_SWIG_Python.SoPcon_deltaAngle_get, HEPVis_SWIG_Python.SoPcon_deltaAngle_set)
    alternateRep = property(HEPVis_SWIG_Python.SoPcon_alternateRep_get, HEPVis_SWIG_Python.SoPcon_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPcon_swiginit(self, HEPVis_SWIG_Python.new_SoPcon())

    def setPconPts(self, nzee, phi, del_phi, zvals, rmin, rmax):
        return HEPVis_SWIG_Python.SoPcon_setPconPts(self, nzee, phi, del_phi, zvals, rmin, rmax)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPcon_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPcon_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPcon_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPcon

# Register SoPcon in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPcon_swigregister(SoPcon)

def SoPcon_getClassTypeId():
    return HEPVis_SWIG_Python.SoPcon_getClassTypeId()

def SoPcon_initClass():
    return HEPVis_SWIG_Python.SoPcon_initClass()

class SoPcons(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPcons_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPcons_getTypeId(self)
    fRmin = property(HEPVis_SWIG_Python.SoPcons_fRmin_get, HEPVis_SWIG_Python.SoPcons_fRmin_set)
    fRmax = property(HEPVis_SWIG_Python.SoPcons_fRmax_get, HEPVis_SWIG_Python.SoPcons_fRmax_set)
    fDz = property(HEPVis_SWIG_Python.SoPcons_fDz_get, HEPVis_SWIG_Python.SoPcons_fDz_set)
    fSPhi = property(HEPVis_SWIG_Python.SoPcons_fSPhi_get, HEPVis_SWIG_Python.SoPcons_fSPhi_set)
    fDPhi = property(HEPVis_SWIG_Python.SoPcons_fDPhi_get, HEPVis_SWIG_Python.SoPcons_fDPhi_set)
    smoothDraw = property(HEPVis_SWIG_Python.SoPcons_smoothDraw_get, HEPVis_SWIG_Python.SoPcons_smoothDraw_set)
    alternateRep = property(HEPVis_SWIG_Python.SoPcons_alternateRep_get, HEPVis_SWIG_Python.SoPcons_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPcons_swiginit(self, HEPVis_SWIG_Python.new_SoPcons())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPcons_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPcons_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPcons_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPcons

# Register SoPcons in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPcons_swigregister(SoPcons)

def SoPcons_getClassTypeId():
    return HEPVis_SWIG_Python.SoPcons_getClassTypeId()

def SoPcons_initClass():
    return HEPVis_SWIG_Python.SoPcons_initClass()

class SoPolyVol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPolyVol_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPolyVol_getTypeId(self)
    vtxPts = property(HEPVis_SWIG_Python.SoPolyVol_vtxPts_get, HEPVis_SWIG_Python.SoPolyVol_vtxPts_set)
    center = property(HEPVis_SWIG_Python.SoPolyVol_center_get, HEPVis_SWIG_Python.SoPolyVol_center_set)
    dZ = property(HEPVis_SWIG_Python.SoPolyVol_dZ_get, HEPVis_SWIG_Python.SoPolyVol_dZ_set)
    alternateRep = property(HEPVis_SWIG_Python.SoPolyVol_alternateRep_get, HEPVis_SWIG_Python.SoPolyVol_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPolyVol_swiginit(self, HEPVis_SWIG_Python.new_SoPolyVol())

    def setPolyVolPts(self, nSides, dZhalf, angles, sideHalf):
        return HEPVis_SWIG_Python.SoPolyVol_setPolyVolPts(self, nSides, dZhalf, angles, sideHalf)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPolyVol_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPolyVol_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPolyVol_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolyVol

# Register SoPolyVol in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPolyVol_swigregister(SoPolyVol)

def SoPolyVol_getClassTypeId():
    return HEPVis_SWIG_Python.SoPolyVol_getClassTypeId()

def SoPolyVol_initClass():
    return HEPVis_SWIG_Python.SoPolyVol_initClass()

class So3DErrorBar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.So3DErrorBar_getTypeId(self)
    lineWidth = property(HEPVis_SWIG_Python.So3DErrorBar_lineWidth_get, HEPVis_SWIG_Python.So3DErrorBar_lineWidth_set)
    u1 = property(HEPVis_SWIG_Python.So3DErrorBar_u1_get, HEPVis_SWIG_Python.So3DErrorBar_u1_set)
    u2 = property(HEPVis_SWIG_Python.So3DErrorBar_u2_get, HEPVis_SWIG_Python.So3DErrorBar_u2_set)
    v1 = property(HEPVis_SWIG_Python.So3DErrorBar_v1_get, HEPVis_SWIG_Python.So3DErrorBar_v1_set)
    v2 = property(HEPVis_SWIG_Python.So3DErrorBar_v2_get, HEPVis_SWIG_Python.So3DErrorBar_v2_set)
    w1 = property(HEPVis_SWIG_Python.So3DErrorBar_w1_get, HEPVis_SWIG_Python.So3DErrorBar_w1_set)
    w2 = property(HEPVis_SWIG_Python.So3DErrorBar_w2_get, HEPVis_SWIG_Python.So3DErrorBar_w2_set)
    alternateRep = property(HEPVis_SWIG_Python.So3DErrorBar_alternateRep_get, HEPVis_SWIG_Python.So3DErrorBar_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.So3DErrorBar_swiginit(self, HEPVis_SWIG_Python.new_So3DErrorBar())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.So3DErrorBar_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.So3DErrorBar_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.So3DErrorBar_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_So3DErrorBar

# Register So3DErrorBar in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.So3DErrorBar_swigregister(So3DErrorBar)

def So3DErrorBar_getClassTypeId():
    return HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId()

def So3DErrorBar_initClass():
    return HEPVis_SWIG_Python.So3DErrorBar_initClass()

class SoCoordinateAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCoordinateAxis_getTypeId(self)
    fNDivision = property(HEPVis_SWIG_Python.SoCoordinateAxis_fNDivision_get, HEPVis_SWIG_Python.SoCoordinateAxis_fNDivision_set)
    fDivisionLength = property(HEPVis_SWIG_Python.SoCoordinateAxis_fDivisionLength_get, HEPVis_SWIG_Python.SoCoordinateAxis_fDivisionLength_set)
    alternateRep = property(HEPVis_SWIG_Python.SoCoordinateAxis_alternateRep_get, HEPVis_SWIG_Python.SoCoordinateAxis_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoCoordinateAxis_swiginit(self, HEPVis_SWIG_Python.new_SoCoordinateAxis())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCoordinateAxis_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoCoordinateAxis_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoCoordinateAxis_clearAlternateRep(self)

    def getInfo(self):
        return HEPVis_SWIG_Python.SoCoordinateAxis_getInfo(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCoordinateAxis

# Register SoCoordinateAxis in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCoordinateAxis_swigregister(SoCoordinateAxis)

def SoCoordinateAxis_getClassTypeId():
    return HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId()

def SoCoordinateAxis_initClass():
    return HEPVis_SWIG_Python.SoCoordinateAxis_initClass()

class SoWedge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoWedge_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoWedge_getTypeId(self)
    halfWidth1 = property(HEPVis_SWIG_Python.SoWedge_halfWidth1_get, HEPVis_SWIG_Python.SoWedge_halfWidth1_set)
    halfWidth2 = property(HEPVis_SWIG_Python.SoWedge_halfWidth2_get, HEPVis_SWIG_Python.SoWedge_halfWidth2_set)
    halfHeight = property(HEPVis_SWIG_Python.SoWedge_halfHeight_get, HEPVis_SWIG_Python.SoWedge_halfHeight_set)
    thickness = property(HEPVis_SWIG_Python.SoWedge_thickness_get, HEPVis_SWIG_Python.SoWedge_thickness_set)
    alternateRep = property(HEPVis_SWIG_Python.SoWedge_alternateRep_get, HEPVis_SWIG_Python.SoWedge_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoWedge_swiginit(self, HEPVis_SWIG_Python.new_SoWedge())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoWedge_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoWedge_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoWedge_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoWedge

# Register SoWedge in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoWedge_swigregister(SoWedge)

def SoWedge_getClassTypeId():
    return HEPVis_SWIG_Python.SoWedge_getClassTypeId()

def SoWedge_initClass():
    return HEPVis_SWIG_Python.SoWedge_initClass()

class So2DArrow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.So2DArrow_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.So2DArrow_getTypeId(self)
    length = property(HEPVis_SWIG_Python.So2DArrow_length_get, HEPVis_SWIG_Python.So2DArrow_length_set)
    lengthRatio = property(HEPVis_SWIG_Python.So2DArrow_lengthRatio_get, HEPVis_SWIG_Python.So2DArrow_lengthRatio_set)
    headHeight = property(HEPVis_SWIG_Python.So2DArrow_headHeight_get, HEPVis_SWIG_Python.So2DArrow_headHeight_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.So2DArrow_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.So2DArrow_swiginit(self, HEPVis_SWIG_Python.new_So2DArrow())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_So2DArrow

# Register So2DArrow in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.So2DArrow_swigregister(So2DArrow)

def So2DArrow_getClassTypeId():
    return HEPVis_SWIG_Python.So2DArrow_getClassTypeId()

def So2DArrow_initClass():
    return HEPVis_SWIG_Python.So2DArrow_initClass()

class SoCircleArc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCircleArc_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCircleArc_getTypeId(self)
    center = property(HEPVis_SWIG_Python.SoCircleArc_center_get, HEPVis_SWIG_Python.SoCircleArc_center_set)
    radius = property(HEPVis_SWIG_Python.SoCircleArc_radius_get, HEPVis_SWIG_Python.SoCircleArc_radius_set)
    sweepAngle = property(HEPVis_SWIG_Python.SoCircleArc_sweepAngle_get, HEPVis_SWIG_Python.SoCircleArc_sweepAngle_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCircleArc_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoCircleArc_swiginit(self, HEPVis_SWIG_Python.new_SoCircleArc())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCircleArc

# Register SoCircleArc in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCircleArc_swigregister(SoCircleArc)

def SoCircleArc_getClassTypeId():
    return HEPVis_SWIG_Python.SoCircleArc_getClassTypeId()

def SoCircleArc_initClass():
    return HEPVis_SWIG_Python.SoCircleArc_initClass()

class SoDisk(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoDisk_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoDisk_getTypeId(self)
    center = property(HEPVis_SWIG_Python.SoDisk_center_get, HEPVis_SWIG_Python.SoDisk_center_set)
    radius = property(HEPVis_SWIG_Python.SoDisk_radius_get, HEPVis_SWIG_Python.SoDisk_radius_set)
    sweepAngle = property(HEPVis_SWIG_Python.SoDisk_sweepAngle_get, HEPVis_SWIG_Python.SoDisk_sweepAngle_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoDisk_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoDisk_swiginit(self, HEPVis_SWIG_Python.new_SoDisk())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDisk

# Register SoDisk in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoDisk_swigregister(SoDisk)

def SoDisk_getClassTypeId():
    return HEPVis_SWIG_Python.SoDisk_getClassTypeId()

def SoDisk_initClass():
    return HEPVis_SWIG_Python.SoDisk_initClass()

class SoPolygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPolygon_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPolygon_getTypeId(self)
    corners = property(HEPVis_SWIG_Python.SoPolygon_corners_get, HEPVis_SWIG_Python.SoPolygon_corners_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPolygon_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoPolygon_swiginit(self, HEPVis_SWIG_Python.new_SoPolygon())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolygon

# Register SoPolygon in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPolygon_swigregister(SoPolygon)

def SoPolygon_getClassTypeId():
    return HEPVis_SWIG_Python.SoPolygon_getClassTypeId()

def SoPolygon_initClass():
    return HEPVis_SWIG_Python.SoPolygon_initClass()

class SoQuad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoQuad_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoQuad_getTypeId(self)
    LLCornerOffset = property(HEPVis_SWIG_Python.SoQuad_LLCornerOffset_get, HEPVis_SWIG_Python.SoQuad_LLCornerOffset_set)
    LRCornerOffset = property(HEPVis_SWIG_Python.SoQuad_LRCornerOffset_get, HEPVis_SWIG_Python.SoQuad_LRCornerOffset_set)
    URCornerOffset = property(HEPVis_SWIG_Python.SoQuad_URCornerOffset_get, HEPVis_SWIG_Python.SoQuad_URCornerOffset_set)
    ULCornerOffset = property(HEPVis_SWIG_Python.SoQuad_ULCornerOffset_get, HEPVis_SWIG_Python.SoQuad_ULCornerOffset_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoQuad_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoQuad_swiginit(self, HEPVis_SWIG_Python.new_SoQuad())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoQuad

# Register SoQuad in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoQuad_swigregister(SoQuad)

def SoQuad_getClassTypeId():
    return HEPVis_SWIG_Python.SoQuad_getClassTypeId()

def SoQuad_initClass():
    return HEPVis_SWIG_Python.SoQuad_initClass()

class SoRing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoRing_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoRing_getTypeId(self)
    center = property(HEPVis_SWIG_Python.SoRing_center_get, HEPVis_SWIG_Python.SoRing_center_set)
    innerRadius = property(HEPVis_SWIG_Python.SoRing_innerRadius_get, HEPVis_SWIG_Python.SoRing_innerRadius_set)
    outerRadius = property(HEPVis_SWIG_Python.SoRing_outerRadius_get, HEPVis_SWIG_Python.SoRing_outerRadius_set)
    sweepAngle = property(HEPVis_SWIG_Python.SoRing_sweepAngle_get, HEPVis_SWIG_Python.SoRing_sweepAngle_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoRing_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoRing_swiginit(self, HEPVis_SWIG_Python.new_SoRing())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRing

# Register SoRing in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoRing_swigregister(SoRing)

def SoRing_getClassTypeId():
    return HEPVis_SWIG_Python.SoRing_getClassTypeId()

def SoRing_initClass():
    return HEPVis_SWIG_Python.SoRing_initClass()

class SoTriangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoTriangle_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoTriangle_getTypeId(self)
    Corner1Offset = property(HEPVis_SWIG_Python.SoTriangle_Corner1Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner1Offset_set)
    Corner2Offset = property(HEPVis_SWIG_Python.SoTriangle_Corner2Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner2Offset_set)
    Corner3Offset = property(HEPVis_SWIG_Python.SoTriangle_Corner3Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner3Offset_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoTriangle_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoTriangle_swiginit(self, HEPVis_SWIG_Python.new_SoTriangle())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTriangle

# Register SoTriangle in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTriangle_swigregister(SoTriangle)

def SoTriangle_getClassTypeId():
    return HEPVis_SWIG_Python.SoTriangle_getClassTypeId()

def SoTriangle_initClass():
    return HEPVis_SWIG_Python.SoTriangle_initClass()

class SoHelicalTrack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoHelicalTrack_getTypeId(self)
    inverseRadius = property(HEPVis_SWIG_Python.SoHelicalTrack_inverseRadius_get, HEPVis_SWIG_Python.SoHelicalTrack_inverseRadius_set)
    cotTheta = property(HEPVis_SWIG_Python.SoHelicalTrack_cotTheta_get, HEPVis_SWIG_Python.SoHelicalTrack_cotTheta_set)
    phi0 = property(HEPVis_SWIG_Python.SoHelicalTrack_phi0_get, HEPVis_SWIG_Python.SoHelicalTrack_phi0_set)
    d0 = property(HEPVis_SWIG_Python.SoHelicalTrack_d0_get, HEPVis_SWIG_Python.SoHelicalTrack_d0_set)
    z0 = property(HEPVis_SWIG_Python.SoHelicalTrack_z0_get, HEPVis_SWIG_Python.SoHelicalTrack_z0_set)
    s0 = property(HEPVis_SWIG_Python.SoHelicalTrack_s0_get, HEPVis_SWIG_Python.SoHelicalTrack_s0_set)
    s1 = property(HEPVis_SWIG_Python.SoHelicalTrack_s1_get, HEPVis_SWIG_Python.SoHelicalTrack_s1_set)
    alternateRep = property(HEPVis_SWIG_Python.SoHelicalTrack_alternateRep_get, HEPVis_SWIG_Python.SoHelicalTrack_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoHelicalTrack_swiginit(self, HEPVis_SWIG_Python.new_SoHelicalTrack())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoHelicalTrack_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoHelicalTrack_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoHelicalTrack_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHelicalTrack

# Register SoHelicalTrack in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoHelicalTrack_swigregister(SoHelicalTrack)

def SoHelicalTrack_getClassTypeId():
    return HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId()

def SoHelicalTrack_initClass():
    return HEPVis_SWIG_Python.SoHelicalTrack_initClass()

class SoCrystalHit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCrystalHit_getTypeId(self)
    Energy = property(HEPVis_SWIG_Python.SoCrystalHit_Energy_get, HEPVis_SWIG_Python.SoCrystalHit_Energy_set)
    MinimumEnergy = property(HEPVis_SWIG_Python.SoCrystalHit_MinimumEnergy_get, HEPVis_SWIG_Python.SoCrystalHit_MinimumEnergy_set)
    Scale = property(HEPVis_SWIG_Python.SoCrystalHit_Scale_get, HEPVis_SWIG_Python.SoCrystalHit_Scale_set)
    RelativeWidth = property(HEPVis_SWIG_Python.SoCrystalHit_RelativeWidth_get, HEPVis_SWIG_Python.SoCrystalHit_RelativeWidth_set)
    DrawCrystal = property(HEPVis_SWIG_Python.SoCrystalHit_DrawCrystal_get, HEPVis_SWIG_Python.SoCrystalHit_DrawCrystal_set)
    DrawHit = property(HEPVis_SWIG_Python.SoCrystalHit_DrawHit_get, HEPVis_SWIG_Python.SoCrystalHit_DrawHit_set)
    Front1 = property(HEPVis_SWIG_Python.SoCrystalHit_Front1_get, HEPVis_SWIG_Python.SoCrystalHit_Front1_set)
    Front2 = property(HEPVis_SWIG_Python.SoCrystalHit_Front2_get, HEPVis_SWIG_Python.SoCrystalHit_Front2_set)
    Front3 = property(HEPVis_SWIG_Python.SoCrystalHit_Front3_get, HEPVis_SWIG_Python.SoCrystalHit_Front3_set)
    Front4 = property(HEPVis_SWIG_Python.SoCrystalHit_Front4_get, HEPVis_SWIG_Python.SoCrystalHit_Front4_set)
    Back1 = property(HEPVis_SWIG_Python.SoCrystalHit_Back1_get, HEPVis_SWIG_Python.SoCrystalHit_Back1_set)
    Back2 = property(HEPVis_SWIG_Python.SoCrystalHit_Back2_get, HEPVis_SWIG_Python.SoCrystalHit_Back2_set)
    Back3 = property(HEPVis_SWIG_Python.SoCrystalHit_Back3_get, HEPVis_SWIG_Python.SoCrystalHit_Back3_set)
    Back4 = property(HEPVis_SWIG_Python.SoCrystalHit_Back4_get, HEPVis_SWIG_Python.SoCrystalHit_Back4_set)
    alternateRep = property(HEPVis_SWIG_Python.SoCrystalHit_alternateRep_get, HEPVis_SWIG_Python.SoCrystalHit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoCrystalHit_swiginit(self, HEPVis_SWIG_Python.new_SoCrystalHit())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCrystalHit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoCrystalHit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoCrystalHit_clearAlternateRep(self)

    def getInfo(self):
        return HEPVis_SWIG_Python.SoCrystalHit_getInfo(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCrystalHit

# Register SoCrystalHit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCrystalHit_swigregister(SoCrystalHit)

def SoCrystalHit_getClassTypeId():
    return HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId()

def SoCrystalHit_initClass():
    return HEPVis_SWIG_Python.SoCrystalHit_initClass()

class SoJet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoJet_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoJet_getTypeId(self)
    fEnergy = property(HEPVis_SWIG_Python.SoJet_fEnergy_get, HEPVis_SWIG_Python.SoJet_fEnergy_set)
    fTheta = property(HEPVis_SWIG_Python.SoJet_fTheta_get, HEPVis_SWIG_Python.SoJet_fTheta_set)
    fPhi = property(HEPVis_SWIG_Python.SoJet_fPhi_get, HEPVis_SWIG_Python.SoJet_fPhi_set)
    fThrust = property(HEPVis_SWIG_Python.SoJet_fThrust_get, HEPVis_SWIG_Python.SoJet_fThrust_set)
    fMaxZ = property(HEPVis_SWIG_Python.SoJet_fMaxZ_get, HEPVis_SWIG_Python.SoJet_fMaxZ_set)
    fMaxR = property(HEPVis_SWIG_Python.SoJet_fMaxR_get, HEPVis_SWIG_Python.SoJet_fMaxR_set)
    alternateRep = property(HEPVis_SWIG_Python.SoJet_alternateRep_get, HEPVis_SWIG_Python.SoJet_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoJet_swiginit(self, HEPVis_SWIG_Python.new_SoJet())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoJet_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoJet_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoJet_clearAlternateRep(self)

    def getInfo(self):
        return HEPVis_SWIG_Python.SoJet_getInfo(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoJet

# Register SoJet in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoJet_swigregister(SoJet)

def SoJet_getClassTypeId():
    return HEPVis_SWIG_Python.SoJet_getClassTypeId()

def SoJet_initClass():
    return HEPVis_SWIG_Python.SoJet_initClass()

class SoReconTrack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoReconTrack_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoReconTrack_getTypeId(self)
    cotTheta = property(HEPVis_SWIG_Python.SoReconTrack_cotTheta_get, HEPVis_SWIG_Python.SoReconTrack_cotTheta_set)
    phi0 = property(HEPVis_SWIG_Python.SoReconTrack_phi0_get, HEPVis_SWIG_Python.SoReconTrack_phi0_set)
    d0 = property(HEPVis_SWIG_Python.SoReconTrack_d0_get, HEPVis_SWIG_Python.SoReconTrack_d0_set)
    z0 = property(HEPVis_SWIG_Python.SoReconTrack_z0_get, HEPVis_SWIG_Python.SoReconTrack_z0_set)
    sigD0 = property(HEPVis_SWIG_Python.SoReconTrack_sigD0_get, HEPVis_SWIG_Python.SoReconTrack_sigD0_set)
    sigZ0 = property(HEPVis_SWIG_Python.SoReconTrack_sigZ0_get, HEPVis_SWIG_Python.SoReconTrack_sigZ0_set)
    correlation = property(HEPVis_SWIG_Python.SoReconTrack_correlation_get, HEPVis_SWIG_Python.SoReconTrack_correlation_set)
    s0 = property(HEPVis_SWIG_Python.SoReconTrack_s0_get, HEPVis_SWIG_Python.SoReconTrack_s0_set)
    s1 = property(HEPVis_SWIG_Python.SoReconTrack_s1_get, HEPVis_SWIG_Python.SoReconTrack_s1_set)
    alternateRep = property(HEPVis_SWIG_Python.SoReconTrack_alternateRep_get, HEPVis_SWIG_Python.SoReconTrack_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoReconTrack_swiginit(self, HEPVis_SWIG_Python.new_SoReconTrack())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoReconTrack_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoReconTrack_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoReconTrack_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoReconTrack

# Register SoReconTrack in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoReconTrack_swigregister(SoReconTrack)

def SoReconTrack_getClassTypeId():
    return HEPVis_SWIG_Python.SoReconTrack_getClassTypeId()

def SoReconTrack_initClass():
    return HEPVis_SWIG_Python.SoReconTrack_initClass()

class SoSiStrips(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSiStrips_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSiStrips_getTypeId(self)
    length = property(HEPVis_SWIG_Python.SoSiStrips_length_get, HEPVis_SWIG_Python.SoSiStrips_length_set)
    width = property(HEPVis_SWIG_Python.SoSiStrips_width_get, HEPVis_SWIG_Python.SoSiStrips_width_set)
    thickness = property(HEPVis_SWIG_Python.SoSiStrips_thickness_get, HEPVis_SWIG_Python.SoSiStrips_thickness_set)
    pitch = property(HEPVis_SWIG_Python.SoSiStrips_pitch_get, HEPVis_SWIG_Python.SoSiStrips_pitch_set)
    offset = property(HEPVis_SWIG_Python.SoSiStrips_offset_get, HEPVis_SWIG_Python.SoSiStrips_offset_set)
    strip = property(HEPVis_SWIG_Python.SoSiStrips_strip_get, HEPVis_SWIG_Python.SoSiStrips_strip_set)
    adc = property(HEPVis_SWIG_Python.SoSiStrips_adc_get, HEPVis_SWIG_Python.SoSiStrips_adc_set)
    gain = property(HEPVis_SWIG_Python.SoSiStrips_gain_get, HEPVis_SWIG_Python.SoSiStrips_gain_set)
    alternateRep = property(HEPVis_SWIG_Python.SoSiStrips_alternateRep_get, HEPVis_SWIG_Python.SoSiStrips_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoSiStrips_swiginit(self, HEPVis_SWIG_Python.new_SoSiStrips())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSiStrips_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoSiStrips_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoSiStrips_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStrips

# Register SoSiStrips in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSiStrips_swigregister(SoSiStrips)

def SoSiStrips_getClassTypeId():
    return HEPVis_SWIG_Python.SoSiStrips_getClassTypeId()

def SoSiStrips_initClass():
    return HEPVis_SWIG_Python.SoSiStrips_initClass()

class SoSiWedgeStrips(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSiWedgeStrips_getTypeId(self)
    length = property(HEPVis_SWIG_Python.SoSiWedgeStrips_length_get, HEPVis_SWIG_Python.SoSiWedgeStrips_length_set)
    width = property(HEPVis_SWIG_Python.SoSiWedgeStrips_width_get, HEPVis_SWIG_Python.SoSiWedgeStrips_width_set)
    thickness = property(HEPVis_SWIG_Python.SoSiWedgeStrips_thickness_get, HEPVis_SWIG_Python.SoSiWedgeStrips_thickness_set)
    pitch = property(HEPVis_SWIG_Python.SoSiWedgeStrips_pitch_get, HEPVis_SWIG_Python.SoSiWedgeStrips_pitch_set)
    offset = property(HEPVis_SWIG_Python.SoSiWedgeStrips_offset_get, HEPVis_SWIG_Python.SoSiWedgeStrips_offset_set)
    strip = property(HEPVis_SWIG_Python.SoSiWedgeStrips_strip_get, HEPVis_SWIG_Python.SoSiWedgeStrips_strip_set)
    adc = property(HEPVis_SWIG_Python.SoSiWedgeStrips_adc_get, HEPVis_SWIG_Python.SoSiWedgeStrips_adc_set)
    gain = property(HEPVis_SWIG_Python.SoSiWedgeStrips_gain_get, HEPVis_SWIG_Python.SoSiWedgeStrips_gain_set)
    cutoff = property(HEPVis_SWIG_Python.SoSiWedgeStrips_cutoff_get, HEPVis_SWIG_Python.SoSiWedgeStrips_cutoff_set)
    slope = property(HEPVis_SWIG_Python.SoSiWedgeStrips_slope_get, HEPVis_SWIG_Python.SoSiWedgeStrips_slope_set)
    tilt = property(HEPVis_SWIG_Python.SoSiWedgeStrips_tilt_get, HEPVis_SWIG_Python.SoSiWedgeStrips_tilt_set)
    alternateRep = property(HEPVis_SWIG_Python.SoSiWedgeStrips_alternateRep_get, HEPVis_SWIG_Python.SoSiWedgeStrips_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoSiWedgeStrips_swiginit(self, HEPVis_SWIG_Python.new_SoSiWedgeStrips())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSiWedgeStrips_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoSiWedgeStrips_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoSiWedgeStrips_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiWedgeStrips

# Register SoSiWedgeStrips in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSiWedgeStrips_swigregister(SoSiWedgeStrips)

def SoSiWedgeStrips_getClassTypeId():
    return HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId()

def SoSiWedgeStrips_initClass():
    return HEPVis_SWIG_Python.SoSiWedgeStrips_initClass()

class SoVtxReconTrack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoVtxReconTrack_getTypeId(self)
    cotTheta = property(HEPVis_SWIG_Python.SoVtxReconTrack_cotTheta_get, HEPVis_SWIG_Python.SoVtxReconTrack_cotTheta_set)
    phi0 = property(HEPVis_SWIG_Python.SoVtxReconTrack_phi0_get, HEPVis_SWIG_Python.SoVtxReconTrack_phi0_set)
    ellipsoid = property(HEPVis_SWIG_Python.SoVtxReconTrack_ellipsoid_get, HEPVis_SWIG_Python.SoVtxReconTrack_ellipsoid_set)
    s0 = property(HEPVis_SWIG_Python.SoVtxReconTrack_s0_get, HEPVis_SWIG_Python.SoVtxReconTrack_s0_set)
    s1 = property(HEPVis_SWIG_Python.SoVtxReconTrack_s1_get, HEPVis_SWIG_Python.SoVtxReconTrack_s1_set)
    alternateRep = property(HEPVis_SWIG_Python.SoVtxReconTrack_alternateRep_get, HEPVis_SWIG_Python.SoVtxReconTrack_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoVtxReconTrack_swiginit(self, HEPVis_SWIG_Python.new_SoVtxReconTrack())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoVtxReconTrack_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoVtxReconTrack_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoVtxReconTrack_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoVtxReconTrack

# Register SoVtxReconTrack in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoVtxReconTrack_swigregister(SoVtxReconTrack)

def SoVtxReconTrack_getClassTypeId():
    return HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId()

def SoVtxReconTrack_initClass():
    return HEPVis_SWIG_Python.SoVtxReconTrack_initClass()

class SoHadEmCrystalHit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoHadEmCrystalHit_getTypeId(self)
    EnergyHad = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyHad_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyHad_set)
    EnergyEm = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyEm_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyEm_set)
    MinimumEnergyTot = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_MinimumEnergyTot_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_MinimumEnergyTot_set)
    Scale = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Scale_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Scale_set)
    RelativeWidth = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_RelativeWidth_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_RelativeWidth_set)
    Front1 = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front1_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front1_set)
    Front2 = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front2_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front2_set)
    Front3 = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front3_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front3_set)
    Front4 = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front4_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front4_set)
    alternateRep = property(HEPVis_SWIG_Python.SoHadEmCrystalHit_alternateRep_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoHadEmCrystalHit_swiginit(self, HEPVis_SWIG_Python.new_SoHadEmCrystalHit())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoHadEmCrystalHit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoHadEmCrystalHit_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHadEmCrystalHit

# Register SoHadEmCrystalHit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoHadEmCrystalHit_swigregister(SoHadEmCrystalHit)

def SoHadEmCrystalHit_getClassTypeId():
    return HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId()

def SoHadEmCrystalHit_initClass():
    return HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass()

class SoDetectorTreeKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoDetectorTreeKit_alternateRep_get, HEPVis_SWIG_Python.SoDetectorTreeKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoDetectorTreeKit_swiginit(self, HEPVis_SWIG_Python.new_SoDetectorTreeKit())

    def affectsState(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_affectsState(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoDetectorTreeKit_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_callback(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getMatrix(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_write(self, arg2)

    def setPreview(self, Flag):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_setPreview(self, Flag)

    def getPreview(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getPreview(self)

    def setPreviewAndFull(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_setPreviewAndFull(self)

    def getPreviewSeparator(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getPreviewSeparator(self)

    def getFullSeparator(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_getFullSeparator(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_clearAlternateRep(self)

    def addPickCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_addPickCallback(self, arg2, arg3)

    def removePickCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoDetectorTreeKit_removePickCallback(self, arg2, arg3)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDetectorTreeKit

# Register SoDetectorTreeKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoDetectorTreeKit_swigregister(SoDetectorTreeKit)

def SoDetectorTreeKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId()

def SoDetectorTreeKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog()

def SoDetectorTreeKit_initClass():
    return HEPVis_SWIG_Python.SoDetectorTreeKit_initClass()

class SoMeterStickKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoMeterStickKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoMeterStickKit_getNodekitCatalog(self)
    RULER = HEPVis_SWIG_Python.SoMeterStickKit_RULER
    METER_STICK = HEPVis_SWIG_Python.SoMeterStickKit_METER_STICK
    type = property(HEPVis_SWIG_Python.SoMeterStickKit_type_get, HEPVis_SWIG_Python.SoMeterStickKit_type_set)
    rotationSnap = property(HEPVis_SWIG_Python.SoMeterStickKit_rotationSnap_get, HEPVis_SWIG_Python.SoMeterStickKit_rotationSnap_set)
    alternateRep = property(HEPVis_SWIG_Python.SoMeterStickKit_alternateRep_get, HEPVis_SWIG_Python.SoMeterStickKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoMeterStickKit_swiginit(self, HEPVis_SWIG_Python.new_SoMeterStickKit())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoMeterStickKit_initClass()

    def affectsState(self):
        return HEPVis_SWIG_Python.SoMeterStickKit_affectsState(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoMeterStickKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoMeterStickKit_clearAlternateRep(self)

    @staticmethod
    def motionFinished(arg1, arg2):
        return HEPVis_SWIG_Python.SoMeterStickKit_motionFinished(arg1, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoMeterStickKit

# Register SoMeterStickKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoMeterStickKit_swigregister(SoMeterStickKit)

def SoMeterStickKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId()

def SoMeterStickKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog()

def SoMeterStickKit_initClass():
    return HEPVis_SWIG_Python.SoMeterStickKit_initClass()

def SoMeterStickKit_motionFinished(arg1, arg2):
    return HEPVis_SWIG_Python.SoMeterStickKit_motionFinished(arg1, arg2)

class ParticleChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getGeantCode(self):
        return HEPVis_SWIG_Python.ParticleChar_getGeantCode(self)

    def getMaterial(self):
        return HEPVis_SWIG_Python.ParticleChar_getMaterial(self)

    def getStyle(self):
        return HEPVis_SWIG_Python.ParticleChar_getStyle(self)

    def __init__(self, geantCode, pythiaCode, isaCode, name, label, mass, charge):
        HEPVis_SWIG_Python.ParticleChar_swiginit(self, HEPVis_SWIG_Python.new_ParticleChar(geantCode, pythiaCode, isaCode, name, label, mass, charge))

    def setMaterial(self, particleMaterial):
        return HEPVis_SWIG_Python.ParticleChar_setMaterial(self, particleMaterial)

    def setStyle(self, particleStyle):
        return HEPVis_SWIG_Python.ParticleChar_setStyle(self, particleStyle)

    def getName(self):
        return HEPVis_SWIG_Python.ParticleChar_getName(self)

    def getMass(self):
        return HEPVis_SWIG_Python.ParticleChar_getMass(self)

    def getCharge(self):
        return HEPVis_SWIG_Python.ParticleChar_getCharge(self)

    @staticmethod
    def initParticles():
        return HEPVis_SWIG_Python.ParticleChar_initParticles()

    @staticmethod
    def deleteParticles():
        return HEPVis_SWIG_Python.ParticleChar_deleteParticles()

    @staticmethod
    def getByName(string):
        return HEPVis_SWIG_Python.ParticleChar_getByName(string)

    @staticmethod
    def getByGeantID(p_code):
        return HEPVis_SWIG_Python.ParticleChar_getByGeantID(p_code)

    @staticmethod
    def getByPythiaID(p_code):
        return HEPVis_SWIG_Python.ParticleChar_getByPythiaID(p_code)

    @staticmethod
    def getByIsajetID(p_code):
        return HEPVis_SWIG_Python.ParticleChar_getByIsajetID(p_code)

# Register ParticleChar in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.ParticleChar_swigregister(ParticleChar)

def ParticleChar_initParticles():
    return HEPVis_SWIG_Python.ParticleChar_initParticles()

def ParticleChar_deleteParticles():
    return HEPVis_SWIG_Python.ParticleChar_deleteParticles()

def ParticleChar_getByName(string):
    return HEPVis_SWIG_Python.ParticleChar_getByName(string)

def ParticleChar_getByGeantID(p_code):
    return HEPVis_SWIG_Python.ParticleChar_getByGeantID(p_code)

def ParticleChar_getByPythiaID(p_code):
    return HEPVis_SWIG_Python.ParticleChar_getByPythiaID(p_code)

def ParticleChar_getByIsajetID(p_code):
    return HEPVis_SWIG_Python.ParticleChar_getByIsajetID(p_code)

class SoIdealTrackKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoIdealTrackKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoIdealTrackKit_getNodekitCatalog(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoIdealTrackKit_swiginit(self, HEPVis_SWIG_Python.new_SoIdealTrackKit())
    Phi = property(HEPVis_SWIG_Python.SoIdealTrackKit_Phi_get, HEPVis_SWIG_Python.SoIdealTrackKit_Phi_set)
    Radius = property(HEPVis_SWIG_Python.SoIdealTrackKit_Radius_get, HEPVis_SWIG_Python.SoIdealTrackKit_Radius_set)
    Zeta = property(HEPVis_SWIG_Python.SoIdealTrackKit_Zeta_get, HEPVis_SWIG_Python.SoIdealTrackKit_Zeta_set)
    Vertex = property(HEPVis_SWIG_Python.SoIdealTrackKit_Vertex_get, HEPVis_SWIG_Python.SoIdealTrackKit_Vertex_set)
    T0 = property(HEPVis_SWIG_Python.SoIdealTrackKit_T0_get, HEPVis_SWIG_Python.SoIdealTrackKit_T0_set)
    DeltaT = property(HEPVis_SWIG_Python.SoIdealTrackKit_DeltaT_get, HEPVis_SWIG_Python.SoIdealTrackKit_DeltaT_set)
    T_0 = property(HEPVis_SWIG_Python.SoIdealTrackKit_T_0_get, HEPVis_SWIG_Python.SoIdealTrackKit_T_0_set)
    T_1 = property(HEPVis_SWIG_Python.SoIdealTrackKit_T_1_get, HEPVis_SWIG_Python.SoIdealTrackKit_T_1_set)
    ParticleType = property(HEPVis_SWIG_Python.SoIdealTrackKit_ParticleType_get, HEPVis_SWIG_Python.SoIdealTrackKit_ParticleType_set)
    alternateRep = property(HEPVis_SWIG_Python.SoIdealTrackKit_alternateRep_get, HEPVis_SWIG_Python.SoIdealTrackKit_alternateRep_set)

    def updateTrack(self):
        return HEPVis_SWIG_Python.SoIdealTrackKit_updateTrack(self)

    @staticmethod
    def set_bfield(bf):
        return HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield(bf)

    @staticmethod
    def set_rExtent(rExtent):
        return HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent(rExtent)

    @staticmethod
    def set_zExtent(zExtent):
        return HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent(zExtent)

    def initTrack(self, *args):
        return HEPVis_SWIG_Python.SoIdealTrackKit_initTrack(self, *args)

    def print_me(self):
        return HEPVis_SWIG_Python.SoIdealTrackKit_print_me(self)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoIdealTrackKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoIdealTrackKit_clearAlternateRep(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoIdealTrackKit_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoIdealTrackKit

# Register SoIdealTrackKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoIdealTrackKit_swigregister(SoIdealTrackKit)

def SoIdealTrackKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId()

def SoIdealTrackKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog()

def SoIdealTrackKit_set_bfield(bf):
    return HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield(bf)

def SoIdealTrackKit_set_rExtent(rExtent):
    return HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent(rExtent)

def SoIdealTrackKit_set_zExtent(zExtent):
    return HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent(zExtent)

def SoIdealTrackKit_initClass():
    return HEPVis_SWIG_Python.SoIdealTrackKit_initClass()

class SoIdealBeamTrackKit(SoIdealTrackKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getNodekitCatalog(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoIdealBeamTrackKit_swiginit(self, HEPVis_SWIG_Python.new_SoIdealBeamTrackKit())

    def initTrack(self, vx, vy, vz, px, py, pz, t0, p_code):
        return HEPVis_SWIG_Python.SoIdealBeamTrackKit_initTrack(self, vx, vy, vz, px, py, pz, t0, p_code)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoIdealBeamTrackKit

# Register SoIdealBeamTrackKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoIdealBeamTrackKit_swigregister(SoIdealBeamTrackKit)

def SoIdealBeamTrackKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId()

def SoIdealBeamTrackKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog()

def SoIdealBeamTrackKit_initClass():
    return HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass()

class SoDblSiStripDetKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoDblSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoDblSiStripDetKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoDblSiStripDetKit_swiginit(self, HEPVis_SWIG_Python.new_SoDblSiStripDetKit())

    def affectsState(self):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_affectsState(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_clearAlternateRep(self)

    def setAlignable(self, flag):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_setAlignable(self, flag)

    def getLocalTransform(self):
        return HEPVis_SWIG_Python.SoDblSiStripDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDblSiStripDetKit

# Register SoDblSiStripDetKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoDblSiStripDetKit_swigregister(SoDblSiStripDetKit)

def SoDblSiStripDetKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId()

def SoDblSiStripDetKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog()

def SoDblSiStripDetKit_initClass():
    return HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass()

class SoSiStripDetKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSiStripDetKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoSiStripDetKit_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoSiStripDetKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoSiStripDetKit_swiginit(self, HEPVis_SWIG_Python.new_SoSiStripDetKit())

    def affectsState(self):
        return HEPVis_SWIG_Python.SoSiStripDetKit_affectsState(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSiStripDetKit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoSiStripDetKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoSiStripDetKit_clearAlternateRep(self)

    def setAlignable(self, flag):
        return HEPVis_SWIG_Python.SoSiStripDetKit_setAlignable(self, flag)

    def getLocalTransform(self):
        return HEPVis_SWIG_Python.SoSiStripDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStripDetKit

# Register SoSiStripDetKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSiStripDetKit_swigregister(SoSiStripDetKit)

def SoSiStripDetKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId()

def SoSiStripDetKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog()

def SoSiStripDetKit_initClass():
    return HEPVis_SWIG_Python.SoSiStripDetKit_initClass()

class SoStereoSiStripDetKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getNodekitCatalog(self)
    stereoAngle = property(HEPVis_SWIG_Python.SoStereoSiStripDetKit_stereoAngle_get, HEPVis_SWIG_Python.SoStereoSiStripDetKit_stereoAngle_set)
    alternateRep = property(HEPVis_SWIG_Python.SoStereoSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoStereoSiStripDetKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoStereoSiStripDetKit_swiginit(self, HEPVis_SWIG_Python.new_SoStereoSiStripDetKit())

    def affectsState(self):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_affectsState(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_clearAlternateRep(self)

    def setAlignable(self, flag):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_setAlignable(self, flag)

    def getLocalTransform(self):
        return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStereoSiStripDetKit

# Register SoStereoSiStripDetKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoStereoSiStripDetKit_swigregister(SoStereoSiStripDetKit)

def SoStereoSiStripDetKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId()

def SoStereoSiStripDetKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog()

def SoStereoSiStripDetKit_initClass():
    return HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass()

class SoSiStripWedgeDetKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getNodekitCatalog(self)
    halfHeight = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfHeight_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfHeight_set)
    halfWidth1 = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth1_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth1_set)
    halfWidth2 = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth2_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth2_set)
    thickness = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_thickness_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_thickness_set)
    myHalfHeight = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfHeight_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfHeight_set)
    myHalfWidth1 = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth1_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth1_set)
    myHalfWidth2 = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth2_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth2_set)
    myThickness = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myThickness_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myThickness_set)
    alternateRep = property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_alternateRep_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoSiStripWedgeDetKit_swiginit(self, HEPVis_SWIG_Python.new_SoSiStripWedgeDetKit())

    def affectsState(self):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_affectsState(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_clearAlternateRep(self)

    def setAlignable(self, flag):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_setAlignable(self, flag)

    def getLocalTransform(self):
        return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStripWedgeDetKit

# Register SoSiStripWedgeDetKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSiStripWedgeDetKit_swigregister(SoSiStripWedgeDetKit)

def SoSiStripWedgeDetKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId()

def SoSiStripWedgeDetKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog()

def SoSiStripWedgeDetKit_initClass():
    return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass()

class SoDblSiStripWedgeDetKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getNodekitCatalog(self)
    halfHeight = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfHeight_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfHeight_set)
    halfWidth1 = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth1_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth1_set)
    halfWidth2 = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth2_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth2_set)
    thickness = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_thickness_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_thickness_set)
    myHalfHeight = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfHeight_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfHeight_set)
    myHalfWidth1 = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth1_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth1_set)
    myHalfWidth2 = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth2_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth2_set)
    myThickness = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myThickness_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myThickness_set)
    alternateRep = property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_alternateRep_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_alternateRep_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_swiginit(self, HEPVis_SWIG_Python.new_SoDblSiStripWedgeDetKit())

    def affectsState(self):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_affectsState(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass()

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_clearAlternateRep(self)

    def setAlignable(self, flag):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_setAlignable(self, flag)

    def getLocalTransform(self):
        return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDblSiStripWedgeDetKit

# Register SoDblSiStripWedgeDetKit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_swigregister(SoDblSiStripWedgeDetKit)

def SoDblSiStripWedgeDetKit_getClassTypeId():
    return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId()

def SoDblSiStripWedgeDetKit_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog()

def SoDblSiStripWedgeDetKit_initClass():
    return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass()

class SoDetectorExample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoDetectorExample_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoDetectorExample_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoDetectorExample_alternateRep_get, HEPVis_SWIG_Python.SoDetectorExample_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoDetectorExample_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoDetectorExample_swiginit(self, HEPVis_SWIG_Python.new_SoDetectorExample())

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoDetectorExample_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoDetectorExample_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDetectorExample

# Register SoDetectorExample in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoDetectorExample_swigregister(SoDetectorExample)

def SoDetectorExample_getClassTypeId():
    return HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId()

def SoDetectorExample_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog()

def SoDetectorExample_initClass():
    return HEPVis_SWIG_Python.SoDetectorExample_initClass()

class SbRepBin1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbRepBin1D_swiginit(self, HEPVis_SWIG_Python.new_SbRepBin1D(*args))
    fXmin = property(HEPVis_SWIG_Python.SbRepBin1D_fXmin_get, HEPVis_SWIG_Python.SbRepBin1D_fXmin_set)
    fXmax = property(HEPVis_SWIG_Python.SbRepBin1D_fXmax_get, HEPVis_SWIG_Python.SbRepBin1D_fXmax_set)
    fVmin = property(HEPVis_SWIG_Python.SbRepBin1D_fVmin_get, HEPVis_SWIG_Python.SbRepBin1D_fVmin_set)
    fVal = property(HEPVis_SWIG_Python.SbRepBin1D_fVal_get, HEPVis_SWIG_Python.SbRepBin1D_fVal_set)
    fRatio = property(HEPVis_SWIG_Python.SbRepBin1D_fRatio_get, HEPVis_SWIG_Python.SbRepBin1D_fRatio_set)
    fSeparator = property(HEPVis_SWIG_Python.SbRepBin1D_fSeparator_get, HEPVis_SWIG_Python.SbRepBin1D_fSeparator_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBin1D

# Register SbRepBin1D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbRepBin1D_swigregister(SbRepBin1D)

class SbRepBin2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbRepBin2D_swiginit(self, HEPVis_SWIG_Python.new_SbRepBin2D(*args))
    fXmin = property(HEPVis_SWIG_Python.SbRepBin2D_fXmin_get, HEPVis_SWIG_Python.SbRepBin2D_fXmin_set)
    fXmax = property(HEPVis_SWIG_Python.SbRepBin2D_fXmax_get, HEPVis_SWIG_Python.SbRepBin2D_fXmax_set)
    fYmin = property(HEPVis_SWIG_Python.SbRepBin2D_fYmin_get, HEPVis_SWIG_Python.SbRepBin2D_fYmin_set)
    fYmax = property(HEPVis_SWIG_Python.SbRepBin2D_fYmax_get, HEPVis_SWIG_Python.SbRepBin2D_fYmax_set)
    fVal = property(HEPVis_SWIG_Python.SbRepBin2D_fVal_get, HEPVis_SWIG_Python.SbRepBin2D_fVal_set)
    fRatio = property(HEPVis_SWIG_Python.SbRepBin2D_fRatio_get, HEPVis_SWIG_Python.SbRepBin2D_fRatio_set)
    fI = property(HEPVis_SWIG_Python.SbRepBin2D_fI_get, HEPVis_SWIG_Python.SbRepBin2D_fI_set)
    fJ = property(HEPVis_SWIG_Python.SbRepBin2D_fJ_get, HEPVis_SWIG_Python.SbRepBin2D_fJ_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBin2D

# Register SbRepBin2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbRepBin2D_swigregister(SbRepBin2D)

class SbRepTopFace2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbRepTopFace2D_swiginit(self, HEPVis_SWIG_Python.new_SbRepTopFace2D(*args))
    fXmin = property(HEPVis_SWIG_Python.SbRepTopFace2D_fXmin_get, HEPVis_SWIG_Python.SbRepTopFace2D_fXmin_set)
    fXmax = property(HEPVis_SWIG_Python.SbRepTopFace2D_fXmax_get, HEPVis_SWIG_Python.SbRepTopFace2D_fXmax_set)
    fYmin = property(HEPVis_SWIG_Python.SbRepTopFace2D_fYmin_get, HEPVis_SWIG_Python.SbRepTopFace2D_fYmin_set)
    fYmax = property(HEPVis_SWIG_Python.SbRepTopFace2D_fYmax_get, HEPVis_SWIG_Python.SbRepTopFace2D_fYmax_set)
    fVal1 = property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal1_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal1_set)
    fVal2 = property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal2_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal2_set)
    fVal3 = property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal3_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal3_set)
    fVal4 = property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal4_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal4_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepTopFace2D

# Register SbRepTopFace2D in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbRepTopFace2D_swigregister(SbRepTopFace2D)

class SbRepBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        HEPVis_SWIG_Python.SbRepBox_swiginit(self, HEPVis_SWIG_Python.new_SbRepBox(*args))
    fPos = property(HEPVis_SWIG_Python.SbRepBox_fPos_get, HEPVis_SWIG_Python.SbRepBox_fPos_set)
    fWidth = property(HEPVis_SWIG_Python.SbRepBox_fWidth_get, HEPVis_SWIG_Python.SbRepBox_fWidth_set)
    fLog = property(HEPVis_SWIG_Python.SbRepBox_fLog_get, HEPVis_SWIG_Python.SbRepBox_fLog_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBox

# Register SbRepBox in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbRepBox_swigregister(SbRepBox)

class SoPlotter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPlotter_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPlotter_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoPlotter_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoPlotter_alternateRep_get, HEPVis_SWIG_Python.SoPlotter_alternateRep_set)
    verbose = property(HEPVis_SWIG_Python.SoPlotter_verbose_get, HEPVis_SWIG_Python.SoPlotter_verbose_set)
    width = property(HEPVis_SWIG_Python.SoPlotter_width_get, HEPVis_SWIG_Python.SoPlotter_width_set)
    height = property(HEPVis_SWIG_Python.SoPlotter_height_get, HEPVis_SWIG_Python.SoPlotter_height_set)
    leftMargin = property(HEPVis_SWIG_Python.SoPlotter_leftMargin_get, HEPVis_SWIG_Python.SoPlotter_leftMargin_set)
    rightMargin = property(HEPVis_SWIG_Python.SoPlotter_rightMargin_get, HEPVis_SWIG_Python.SoPlotter_rightMargin_set)
    bottomMargin = property(HEPVis_SWIG_Python.SoPlotter_bottomMargin_get, HEPVis_SWIG_Python.SoPlotter_bottomMargin_set)
    topMargin = property(HEPVis_SWIG_Python.SoPlotter_topMargin_get, HEPVis_SWIG_Python.SoPlotter_topMargin_set)
    depth = property(HEPVis_SWIG_Python.SoPlotter_depth_get, HEPVis_SWIG_Python.SoPlotter_depth_set)
    downMargin = property(HEPVis_SWIG_Python.SoPlotter_downMargin_get, HEPVis_SWIG_Python.SoPlotter_downMargin_set)
    upMargin = property(HEPVis_SWIG_Python.SoPlotter_upMargin_get, HEPVis_SWIG_Python.SoPlotter_upMargin_set)
    titleUp = property(HEPVis_SWIG_Python.SoPlotter_titleUp_get, HEPVis_SWIG_Python.SoPlotter_titleUp_set)
    titleToAxis = property(HEPVis_SWIG_Python.SoPlotter_titleToAxis_get, HEPVis_SWIG_Python.SoPlotter_titleToAxis_set)
    titleHeight = property(HEPVis_SWIG_Python.SoPlotter_titleHeight_get, HEPVis_SWIG_Python.SoPlotter_titleHeight_set)
    titleAutomated = property(HEPVis_SWIG_Python.SoPlotter_titleAutomated_get, HEPVis_SWIG_Python.SoPlotter_titleAutomated_set)
    title = property(HEPVis_SWIG_Python.SoPlotter_title_get, HEPVis_SWIG_Python.SoPlotter_title_set)
    superposeBins = property(HEPVis_SWIG_Python.SoPlotter_superposeBins_get, HEPVis_SWIG_Python.SoPlotter_superposeBins_set)
    colorMappingVisible = property(HEPVis_SWIG_Python.SoPlotter_colorMappingVisible_get, HEPVis_SWIG_Python.SoPlotter_colorMappingVisible_set)
    CELLS = HEPVis_SWIG_Python.SoPlotter_CELLS
    MIN_MAX = HEPVis_SWIG_Python.SoPlotter_MIN_MAX
    colorMappingAxisLabeling = property(HEPVis_SWIG_Python.SoPlotter_colorMappingAxisLabeling_get, HEPVis_SWIG_Python.SoPlotter_colorMappingAxisLabeling_set)
    colorMappingAttached = property(HEPVis_SWIG_Python.SoPlotter_colorMappingAttached_get, HEPVis_SWIG_Python.SoPlotter_colorMappingAttached_set)
    wallEnforced = property(HEPVis_SWIG_Python.SoPlotter_wallEnforced_get, HEPVis_SWIG_Python.SoPlotter_wallEnforced_set)
    gridEnforced = property(HEPVis_SWIG_Python.SoPlotter_gridEnforced_get, HEPVis_SWIG_Python.SoPlotter_gridEnforced_set)
    primitivesEnforced = property(HEPVis_SWIG_Python.SoPlotter_primitivesEnforced_get, HEPVis_SWIG_Python.SoPlotter_primitivesEnforced_set)
    innerFrameEnforced = property(HEPVis_SWIG_Python.SoPlotter_innerFrameEnforced_get, HEPVis_SWIG_Python.SoPlotter_innerFrameEnforced_set)
    xAxisEnforced = property(HEPVis_SWIG_Python.SoPlotter_xAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_xAxisEnforced_set)
    xAxisAutomated = property(HEPVis_SWIG_Python.SoPlotter_xAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_xAxisAutomated_set)
    xAxisMinimum = property(HEPVis_SWIG_Python.SoPlotter_xAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_xAxisMinimum_set)
    xAxisMaximum = property(HEPVis_SWIG_Python.SoPlotter_xAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_xAxisMaximum_set)
    xAxisLogScale = property(HEPVis_SWIG_Python.SoPlotter_xAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_xAxisLogScale_set)
    yAxisEnforced = property(HEPVis_SWIG_Python.SoPlotter_yAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_yAxisEnforced_set)
    yAxisAutomated = property(HEPVis_SWIG_Python.SoPlotter_yAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_yAxisAutomated_set)
    yAxisMinimum = property(HEPVis_SWIG_Python.SoPlotter_yAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_yAxisMinimum_set)
    yAxisMaximum = property(HEPVis_SWIG_Python.SoPlotter_yAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_yAxisMaximum_set)
    yAxisLogScale = property(HEPVis_SWIG_Python.SoPlotter_yAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_yAxisLogScale_set)
    zAxisEnforced = property(HEPVis_SWIG_Python.SoPlotter_zAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_zAxisEnforced_set)
    zAxisAutomated = property(HEPVis_SWIG_Python.SoPlotter_zAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_zAxisAutomated_set)
    zAxisMinimum = property(HEPVis_SWIG_Python.SoPlotter_zAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_zAxisMinimum_set)
    zAxisMaximum = property(HEPVis_SWIG_Python.SoPlotter_zAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_zAxisMaximum_set)
    zAxisLogScale = property(HEPVis_SWIG_Python.SoPlotter_zAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_zAxisLogScale_set)
    valueTopMargin = property(HEPVis_SWIG_Python.SoPlotter_valueTopMargin_get, HEPVis_SWIG_Python.SoPlotter_valueTopMargin_set)
    topAxisVisible = property(HEPVis_SWIG_Python.SoPlotter_topAxisVisible_get, HEPVis_SWIG_Python.SoPlotter_topAxisVisible_set)
    rightAxisVisible = property(HEPVis_SWIG_Python.SoPlotter_rightAxisVisible_get, HEPVis_SWIG_Python.SoPlotter_rightAxisVisible_set)
    numberOfLevels = property(HEPVis_SWIG_Python.SoPlotter_numberOfLevels_get, HEPVis_SWIG_Python.SoPlotter_numberOfLevels_set)
    levels = property(HEPVis_SWIG_Python.SoPlotter_levels_get, HEPVis_SWIG_Python.SoPlotter_levels_set)
    shapeAutomated = property(HEPVis_SWIG_Python.SoPlotter_shapeAutomated_get, HEPVis_SWIG_Python.SoPlotter_shapeAutomated_set)
    frozen = property(HEPVis_SWIG_Python.SoPlotter_frozen_get, HEPVis_SWIG_Python.SoPlotter_frozen_set)
    ttfScale = property(HEPVis_SWIG_Python.SoPlotter_ttfScale_get, HEPVis_SWIG_Python.SoPlotter_ttfScale_set)
    theta = property(HEPVis_SWIG_Python.SoPlotter_theta_get, HEPVis_SWIG_Python.SoPlotter_theta_set)
    phi = property(HEPVis_SWIG_Python.SoPlotter_phi_get, HEPVis_SWIG_Python.SoPlotter_phi_set)
    XY = HEPVis_SWIG_Python.SoPlotter_XY
    XYZ = HEPVis_SWIG_Python.SoPlotter_XYZ
    shape = property(HEPVis_SWIG_Python.SoPlotter_shape_get, HEPVis_SWIG_Python.SoPlotter_shape_set)
    infos = property(HEPVis_SWIG_Python.SoPlotter_infos_get, HEPVis_SWIG_Python.SoPlotter_infos_set)
    legend = property(HEPVis_SWIG_Python.SoPlotter_legend_get, HEPVis_SWIG_Python.SoPlotter_legend_set)
    numberOfPlottedObject = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedObject_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedObject_set)
    numberOfPlottedBins1D = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins1D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins1D_set)
    numberOfPlottedBins2D = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins2D_set)
    numberOfPlottedPoints2D = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints2D_set)
    numberOfPlottedPoints3D = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints3D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints3D_set)
    numberOfPlottedFunction1D = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction1D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction1D_set)
    numberOfPlottedFunction2D = property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction2D_set)
    plottedObjectNames = property(HEPVis_SWIG_Python.SoPlotter_plottedObjectNames_get, HEPVis_SWIG_Python.SoPlotter_plottedObjectNames_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPlotter_swiginit(self, HEPVis_SWIG_Python.new_SoPlotter())

    def setPlottableObject(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setPlottableObject(self, arg2)

    def addPlottableObject(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_addPlottableObject(self, arg2)

    def removePlottableObject(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_removePlottableObject(self, arg2)

    def removePlottableObjectsOfClass(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_removePlottableObjectsOfClass(self, arg2)

    def isEmpty(self):
        return HEPVis_SWIG_Python.SoPlotter_isEmpty(self)
    NONE = HEPVis_SWIG_Python.SoPlotter_NONE
    ALL = HEPVis_SWIG_Python.SoPlotter_ALL
    RESET = HEPVis_SWIG_Python.SoPlotter_RESET
    SHAPE = HEPVis_SWIG_Python.SoPlotter_SHAPE
    BINS = HEPVis_SWIG_Python.SoPlotter_BINS
    POINTS = HEPVis_SWIG_Python.SoPlotter_POINTS
    FUNCTION = HEPVis_SWIG_Python.SoPlotter_FUNCTION
    WALL = HEPVis_SWIG_Python.SoPlotter_WALL
    GRID = HEPVis_SWIG_Python.SoPlotter_GRID
    PRIMITIVES = HEPVis_SWIG_Python.SoPlotter_PRIMITIVES
    INNER_FRAME = HEPVis_SWIG_Python.SoPlotter_INNER_FRAME
    TITLE = HEPVis_SWIG_Python.SoPlotter_TITLE
    X_AXIS = HEPVis_SWIG_Python.SoPlotter_X_AXIS
    Y_AXIS = HEPVis_SWIG_Python.SoPlotter_Y_AXIS
    Z_AXIS = HEPVis_SWIG_Python.SoPlotter_Z_AXIS
    COLOR_MAPPING = HEPVis_SWIG_Python.SoPlotter_COLOR_MAPPING
    LAYOUT = HEPVis_SWIG_Python.SoPlotter_LAYOUT
    TTF_SCALE = HEPVis_SWIG_Python.SoPlotter_TTF_SCALE

    def raiseUpdateFlag(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_raiseUpdateFlag(self, arg2)

    def raiseAllUpdateFlags(self):
        return HEPVis_SWIG_Python.SoPlotter_raiseAllUpdateFlags(self)

    def resetAllUpdateFlags(self):
        return HEPVis_SWIG_Python.SoPlotter_resetAllUpdateFlags(self)

    def isUpdateFlagRaised(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_isUpdateFlagRaised(self, arg2)

    def someFlagRaised(self):
        return HEPVis_SWIG_Python.SoPlotter_someFlagRaised(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoPlotter_updateChildren(self)

    def getShape(self):
        return HEPVis_SWIG_Python.SoPlotter_getShape(self)

    def getPlottableObjects(self):
        return HEPVis_SWIG_Python.SoPlotter_getPlottableObjects(self)

    def getLayout(self):
        return HEPVis_SWIG_Python.SoPlotter_getLayout(self)

    def getDataScale(self):
        return HEPVis_SWIG_Python.SoPlotter_getDataScale(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoPlotter_getTopSeparator(self)

    def getEtcSeparator(self):
        return HEPVis_SWIG_Python.SoPlotter_getEtcSeparator(self)

    def getEtcDataSeparator(self):
        return HEPVis_SWIG_Python.SoPlotter_getEtcDataSeparator(self)

    def getXAxis(self):
        return HEPVis_SWIG_Python.SoPlotter_getXAxis(self)

    def getYAxis(self):
        return HEPVis_SWIG_Python.SoPlotter_getYAxis(self)

    def getZAxis(self):
        return HEPVis_SWIG_Python.SoPlotter_getZAxis(self)

    def getLegendStyleList(self):
        return HEPVis_SWIG_Python.SoPlotter_getLegendStyleList(self)

    def getWallStyle(self):
        return HEPVis_SWIG_Python.SoPlotter_getWallStyle(self)

    def getGridStyle(self):
        return HEPVis_SWIG_Python.SoPlotter_getGridStyle(self)

    def getInnerFrameStyle(self):
        return HEPVis_SWIG_Python.SoPlotter_getInnerFrameStyle(self)

    def getInfosStyle(self):
        return HEPVis_SWIG_Python.SoPlotter_getInfosStyle(self)

    def getTitleStyle(self):
        return HEPVis_SWIG_Python.SoPlotter_getTitleStyle(self)

    def getBinsStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getBinsStyle(self, arg2)

    def getPointsStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getPointsStyle(self, arg2)

    def getFunctionStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getFunctionStyle(self, arg2)

    def getRightHatchStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getRightHatchStyle(self, arg2)

    def getLeftHatchStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getLeftHatchStyle(self, arg2)

    def getErrorsStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getErrorsStyle(self, arg2)

    def getStyleCache(self):
        return HEPVis_SWIG_Python.SoPlotter_getStyleCache(self)

    def resetStyles(self):
        return HEPVis_SWIG_Python.SoPlotter_resetStyles(self)

    def setAxesModeling(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesModeling(self, arg2)

    def setAxesColor(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesColor(self, arg2)

    def setAxesTextScale(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesTextScale(self, arg2)

    def setAxesLinePattern(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesLinePattern(self, arg2)

    def setAxesLineWidth(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesLineWidth(self, arg2)

    def setAxesTickLength(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesTickLength(self, arg2)

    def setAxesLabelHeight(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesLabelHeight(self, arg2)

    def setAxesTitleHeight(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_setAxesTitleHeight(self, arg2)

    def setFont(self, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SoPlotter_setFont(self, arg2, arg3, arg4)

    def setPAW_AxesTextSize(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_setPAW_AxesTextSize(self, arg2, arg3)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPlotter_clearAlternateRep(self)

    def dataFrame2vp(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_dataFrame2vp(self, arg2, arg3)

    def vp2dataFrame(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_vp2dataFrame(self, arg2, arg3)

    def dataFrame2axis(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_dataFrame2axis(self, arg2, arg3)

    def axis2dataFrame(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_axis2dataFrame(self, arg2, arg3)

    def axis2vp(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_axis2vp(self, arg2, arg3)

    def vp2axis(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_vp2axis(self, arg2, arg3)

    def addPlottablePrimitive(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_addPlottablePrimitive(self, arg2)

    def clearPlottablePrimitives(self):
        return HEPVis_SWIG_Python.SoPlotter_clearPlottablePrimitives(self)

    def clear(self):
        return HEPVis_SWIG_Python.SoPlotter_clear(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPlotter_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoPlotter_pick(self, arg2)

    @staticmethod
    def project2D(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoPlotter_project2D(arg1, arg2, arg3)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPlotter

# Register SoPlotter in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPlotter_swigregister(SoPlotter)

def SoPlotter_getClassTypeId():
    return HEPVis_SWIG_Python.SoPlotter_getClassTypeId()

def SoPlotter_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog()

def SoPlotter_initClass():
    return HEPVis_SWIG_Python.SoPlotter_initClass()

def SoPlotter_project2D(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoPlotter_project2D(arg1, arg2, arg3)

class SoLegendRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoLegendRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoLegendRegion_getNodekitCatalog(self)
    text = property(HEPVis_SWIG_Python.SoLegendRegion_text_get, HEPVis_SWIG_Python.SoLegendRegion_text_set)
    markerOnLeftBorder = property(HEPVis_SWIG_Python.SoLegendRegion_markerOnLeftBorder_get, HEPVis_SWIG_Python.SoLegendRegion_markerOnLeftBorder_set)
    textInBlack = property(HEPVis_SWIG_Python.SoLegendRegion_textInBlack_get, HEPVis_SWIG_Python.SoLegendRegion_textInBlack_set)
    alternateRep = property(HEPVis_SWIG_Python.SoLegendRegion_alternateRep_get, HEPVis_SWIG_Python.SoLegendRegion_alternateRep_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoLegendRegion_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoLegendRegion_swiginit(self, HEPVis_SWIG_Python.new_SoLegendRegion())

    def getStyle(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_getStyle(self, arg2)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoLegendRegion_clearAlternateRep(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoLegendRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoLegendRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoLegendRegion_getCamera(self)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoLegendRegion_resetCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoLegendRegion_clear(self, *args)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoLegendRegion_pick(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoLegendRegion

# Register SoLegendRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoLegendRegion_swigregister(SoLegendRegion)

def SoLegendRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId()

def SoLegendRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog()

def SoLegendRegion_initClass():
    return HEPVis_SWIG_Python.SoLegendRegion_initClass()

class SoInfosRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoInfosRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoInfosRegion_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoInfosRegion_alternateRep_get, HEPVis_SWIG_Python.SoInfosRegion_alternateRep_set)
    title = property(HEPVis_SWIG_Python.SoInfosRegion_title_get, HEPVis_SWIG_Python.SoInfosRegion_title_set)
    text = property(HEPVis_SWIG_Python.SoInfosRegion_text_get, HEPVis_SWIG_Python.SoInfosRegion_text_set)
    inBetweenSpaces = property(HEPVis_SWIG_Python.SoInfosRegion_inBetweenSpaces_get, HEPVis_SWIG_Python.SoInfosRegion_inBetweenSpaces_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoInfosRegion_initClass()

    def __init__(self):
        HEPVis_SWIG_Python.SoInfosRegion_swiginit(self, HEPVis_SWIG_Python.new_SoInfosRegion())

    def getLineStyle(self):
        return HEPVis_SWIG_Python.SoInfosRegion_getLineStyle(self)

    def getTextStyle(self):
        return HEPVis_SWIG_Python.SoInfosRegion_getTextStyle(self)

    def getContentSize(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoInfosRegion_getContentSize(self, arg2, arg3)

    def matchViewport(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoInfosRegion_matchViewport(self, arg2, arg3)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoInfosRegion_clearAlternateRep(self)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoInfosRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoInfosRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoInfosRegion_getCamera(self)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoInfosRegion_resetCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoInfosRegion_clear(self, *args)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoInfosRegion_pick(self, arg2)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoInfosRegion

# Register SoInfosRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoInfosRegion_swigregister(SoInfosRegion)

def SoInfosRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId()

def SoInfosRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog()

def SoInfosRegion_initClass():
    return HEPVis_SWIG_Python.SoInfosRegion_initClass()

class SbPlotterDoIt(SbDoIt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cast(self, aClass):
        return HEPVis_SWIG_Python.SbPlotterDoIt_cast(self, aClass)

    def __init__(self, aPlottableObject, aPlotter=None):
        HEPVis_SWIG_Python.SbPlotterDoIt_swiginit(self, HEPVis_SWIG_Python.new_SbPlotterDoIt(aPlottableObject, aPlotter))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlotterDoIt

    def getPlottableObject(self):
        return HEPVis_SWIG_Python.SbPlotterDoIt_getPlottableObject(self)

    def getPlotter(self):
        return HEPVis_SWIG_Python.SbPlotterDoIt_getPlotter(self)

    def reset(self):
        return HEPVis_SWIG_Python.SbPlotterDoIt_reset(self)

# Register SbPlotterDoIt in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbPlotterDoIt_swigregister(SbPlotterDoIt)

class SoPlotterRegion(SoRegion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getNodekitCatalog(self)
    alternateRep = property(HEPVis_SWIG_Python.SoPlotterRegion_alternateRep_get, HEPVis_SWIG_Python.SoPlotterRegion_alternateRep_set)
    titleRegionVisible = property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionVisible_set)
    infosRegionVisible = property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionVisible_set)
    legendRegionVisible = property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionVisible_set)
    titleRegionOrigin = property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionOrigin_set)
    titleRegionSize = property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionSize_set)
    infosRegionAttachedToDataFrame = property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionAttachedToDataFrame_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionAttachedToDataFrame_set)
    legendRegionAttachedToInfosRegion = property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionAttachedToInfosRegion_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionAttachedToInfosRegion_set)
    infosRegionOrigin = property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionOrigin_set)
    infosRegionSize = property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionSize_set)
    legendRegionOrigin = property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOrigin_set)
    PERCENT = HEPVis_SWIG_Python.SoPlotterRegion_PERCENT
    AXIS = HEPVis_SWIG_Python.SoPlotterRegion_AXIS
    legendRegionOriginUnit = property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOriginUnit_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOriginUnit_set)
    legendRegionSize = property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionSize_set)
    infosRegionStyle = property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionStyle_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionStyle_set)
    ADJUST_VIEWPORT = HEPVis_SWIG_Python.SoPlotterRegion_ADJUST_VIEWPORT
    LEAVE_ALONE = HEPVis_SWIG_Python.SoPlotterRegion_LEAVE_ALONE
    plotterViewportMapping = property(HEPVis_SWIG_Python.SoPlotterRegion_plotterViewportMapping_get, HEPVis_SWIG_Python.SoPlotterRegion_plotterViewportMapping_set)
    RESIZE_HEIGHT = HEPVis_SWIG_Python.SoPlotterRegion_RESIZE_HEIGHT
    ASPECT_RATIO = HEPVis_SWIG_Python.SoPlotterRegion_ASPECT_RATIO
    infosRegionResizePolicy = property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionResizePolicy_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionResizePolicy_set)
    legendAutomated = property(HEPVis_SWIG_Python.SoPlotterRegion_legendAutomated_get, HEPVis_SWIG_Python.SoPlotterRegion_legendAutomated_set)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPlotterRegion_initClass()

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_GLRender(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_getBoundingBox(self, arg2)

    def getMatrix(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_getMatrix(self, arg2)

    def handleEvent(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_handleEvent(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_rayPick(self, arg2)

    def search(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_search(self, arg2)

    def write(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_write(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_pick(self, arg2)

    def updateChildren(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_updateChildren(self)

    def getTopSeparator(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getTopSeparator(self)

    def getCamera(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getCamera(self)

    def clear(self, *args):
        return HEPVis_SWIG_Python.SoPlotterRegion_clear(self, *args)

    def resetCamera(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_resetCamera(self)

    def setCamera(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_setCamera(self, arg2)

    def refresh(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_refresh(self)

    def doIt(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_doIt(self, arg2)

    def undo(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_undo(self)

    def resetUndo(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_resetUndo(self)

    def getNodeOfInterest(self, *args):
        return HEPVis_SWIG_Python.SoPlotterRegion_getNodeOfInterest(self, *args)

    def placeInPage(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        return HEPVis_SWIG_Python.SoPlotterRegion_placeInPage(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    def setStyle(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyle(self, arg2)

    def setStyleLab_Default(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleLab_Default(self)

    def setStyleHippo_Default(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleHippo_Default(self)

    def setStylePAW_Default(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStylePAW_Default(self)

    def setStyleROOT_Default(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Default(self)

    def setStyleROOT_Plain(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Plain(self)

    def setStyleROOT_Bold(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Bold(self)

    def setStyleROOT_Video(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Video(self)

    def setStyleROOT_Pub(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Pub(self)

    def setStyleROOT_LHCb(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_LHCb(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoPlotterRegion_swiginit(self, HEPVis_SWIG_Python.new_SoPlotterRegion())

    def getPlotter(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getPlotter(self)

    def getTitleRegion(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getTitleRegion(self)

    def getInfosRegion(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getInfosRegion(self)

    def getLegendRegion(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getLegendRegion(self)

    def getEtcSeparator(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getEtcSeparator(self)

    def getNumberOfLegendRegions(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getNumberOfLegendRegions(self)

    def getNumberOfOverlays(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_getNumberOfOverlays(self)

    def getOverlay(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_getOverlay(self, arg2)

    def generateAlternateRep(self, arg2):
        return HEPVis_SWIG_Python.SoPlotterRegion_generateAlternateRep(self, arg2)

    def clearAlternateRep(self):
        return HEPVis_SWIG_Python.SoPlotterRegion_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPlotterRegion

# Register SoPlotterRegion in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPlotterRegion_swigregister(SoPlotterRegion)

def SoPlotterRegion_getClassTypeId():
    return HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId()

def SoPlotterRegion_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog()

def SoPlotterRegion_initClass():
    return HEPVis_SWIG_Python.SoPlotterRegion_initClass()

class SoBackPrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoBackPrimitive_getTypeId(self)
    dx1 = property(HEPVis_SWIG_Python.SoBackPrimitive_dx1_get, HEPVis_SWIG_Python.SoBackPrimitive_dx1_set)
    dx2 = property(HEPVis_SWIG_Python.SoBackPrimitive_dx2_get, HEPVis_SWIG_Python.SoBackPrimitive_dx2_set)
    dy1 = property(HEPVis_SWIG_Python.SoBackPrimitive_dy1_get, HEPVis_SWIG_Python.SoBackPrimitive_dy1_set)
    dy2 = property(HEPVis_SWIG_Python.SoBackPrimitive_dy2_get, HEPVis_SWIG_Python.SoBackPrimitive_dy2_set)
    dz = property(HEPVis_SWIG_Python.SoBackPrimitive_dz_get, HEPVis_SWIG_Python.SoBackPrimitive_dz_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoBackPrimitive_swiginit(self, HEPVis_SWIG_Python.new_SoBackPrimitive())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoBackPrimitive_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoBackPrimitive

# Register SoBackPrimitive in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoBackPrimitive_swigregister(SoBackPrimitive)

def SoBackPrimitive_getClassTypeId():
    return HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId()

def SoBackPrimitive_initClass():
    return HEPVis_SWIG_Python.SoBackPrimitive_initClass()

class SoPrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPrimitive_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPrimitive_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoPrimitive_getNodekitCatalog(self)
    background = property(HEPVis_SWIG_Python.SoPrimitive_background_get, HEPVis_SWIG_Python.SoPrimitive_background_set)
    foreground = property(HEPVis_SWIG_Python.SoPrimitive_foreground_get, HEPVis_SWIG_Python.SoPrimitive_foreground_set)
    shadowThickness = property(HEPVis_SWIG_Python.SoPrimitive_shadowThickness_get, HEPVis_SWIG_Python.SoPrimitive_shadowThickness_set)
    marginWidth = property(HEPVis_SWIG_Python.SoPrimitive_marginWidth_get, HEPVis_SWIG_Python.SoPrimitive_marginWidth_set)
    marginHeight = property(HEPVis_SWIG_Python.SoPrimitive_marginHeight_get, HEPVis_SWIG_Python.SoPrimitive_marginHeight_set)
    width = property(HEPVis_SWIG_Python.SoPrimitive_width_get, HEPVis_SWIG_Python.SoPrimitive_width_set)
    height = property(HEPVis_SWIG_Python.SoPrimitive_height_get, HEPVis_SWIG_Python.SoPrimitive_height_set)
    ATTACH_NONE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_NONE
    ATTACH_NODE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_NODE
    ATTACH_OPPOSITE_NODE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_OPPOSITE_NODE
    leftAttachment = property(HEPVis_SWIG_Python.SoPrimitive_leftAttachment_get, HEPVis_SWIG_Python.SoPrimitive_leftAttachment_set)
    rightAttachment = property(HEPVis_SWIG_Python.SoPrimitive_rightAttachment_get, HEPVis_SWIG_Python.SoPrimitive_rightAttachment_set)
    topAttachment = property(HEPVis_SWIG_Python.SoPrimitive_topAttachment_get, HEPVis_SWIG_Python.SoPrimitive_topAttachment_set)
    bottomAttachment = property(HEPVis_SWIG_Python.SoPrimitive_bottomAttachment_get, HEPVis_SWIG_Python.SoPrimitive_bottomAttachment_set)
    leftNode = property(HEPVis_SWIG_Python.SoPrimitive_leftNode_get, HEPVis_SWIG_Python.SoPrimitive_leftNode_set)
    rightNode = property(HEPVis_SWIG_Python.SoPrimitive_rightNode_get, HEPVis_SWIG_Python.SoPrimitive_rightNode_set)
    topNode = property(HEPVis_SWIG_Python.SoPrimitive_topNode_get, HEPVis_SWIG_Python.SoPrimitive_topNode_set)
    bottomNode = property(HEPVis_SWIG_Python.SoPrimitive_bottomNode_get, HEPVis_SWIG_Python.SoPrimitive_bottomNode_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPrimitive_swiginit(self, HEPVis_SWIG_Python.new_SoPrimitive())

    def compellSize(self, arg2, arg3):
        return HEPVis_SWIG_Python.SoPrimitive_compellSize(self, arg2, arg3)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPrimitive_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPrimitive

# Register SoPrimitive in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPrimitive_swigregister(SoPrimitive)

def SoPrimitive_getClassTypeId():
    return HEPVis_SWIG_Python.SoPrimitive_getClassTypeId()

def SoPrimitive_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog()

def SoPrimitive_initClass():
    return HEPVis_SWIG_Python.SoPrimitive_initClass()

class SoForm(SoPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoForm_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoForm_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoForm_getNodekitCatalog(self)

    def __init__(self):
        HEPVis_SWIG_Python.SoForm_swiginit(self, HEPVis_SWIG_Python.new_SoForm())

    def addChild(self, arg2):
        return HEPVis_SWIG_Python.SoForm_addChild(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoForm_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoForm

# Register SoForm in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoForm_swigregister(SoForm)

def SoForm_getClassTypeId():
    return HEPVis_SWIG_Python.SoForm_getClassTypeId()

def SoForm_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog()

def SoForm_initClass():
    return HEPVis_SWIG_Python.SoForm_initClass()

class SoPushButton(SoPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoPushButton_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoPushButton_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoPushButton_getNodekitCatalog(self)
    fontList = property(HEPVis_SWIG_Python.SoPushButton_fontList_get, HEPVis_SWIG_Python.SoPushButton_fontList_set)
    labelString = property(HEPVis_SWIG_Python.SoPushButton_labelString_get, HEPVis_SWIG_Python.SoPushButton_labelString_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoPushButton_swiginit(self, HEPVis_SWIG_Python.new_SoPushButton())

    def addActivateCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoPushButton_addActivateCallback(self, arg2, arg3)

    def removeActivateCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoPushButton_removeActivateCallback(self, arg2, arg3)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoPushButton_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPushButton

# Register SoPushButton in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoPushButton_swigregister(SoPushButton)

def SoPushButton_getClassTypeId():
    return HEPVis_SWIG_Python.SoPushButton_getClassTypeId()

def SoPushButton_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog()

def SoPushButton_initClass():
    return HEPVis_SWIG_Python.SoPushButton_initClass()

class SoArrowButton(SoPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoArrowButton_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoArrowButton_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoArrowButton_getNodekitCatalog(self)
    ARROW_UP = HEPVis_SWIG_Python.SoArrowButton_ARROW_UP
    ARROW_LEFT = HEPVis_SWIG_Python.SoArrowButton_ARROW_LEFT
    ARROW_DOWN = HEPVis_SWIG_Python.SoArrowButton_ARROW_DOWN
    ARROW_RIGHT = HEPVis_SWIG_Python.SoArrowButton_ARROW_RIGHT
    arrowDirection = property(HEPVis_SWIG_Python.SoArrowButton_arrowDirection_get, HEPVis_SWIG_Python.SoArrowButton_arrowDirection_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoArrowButton_swiginit(self, HEPVis_SWIG_Python.new_SoArrowButton())

    def addActivateCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoArrowButton_addActivateCallback(self, arg2, arg3)

    def removeActivateCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoArrowButton_removeActivateCallback(self, arg2, arg3)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoArrowButton_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoArrowButton

# Register SoArrowButton in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoArrowButton_swigregister(SoArrowButton)

def SoArrowButton_getClassTypeId():
    return HEPVis_SWIG_Python.SoArrowButton_getClassTypeId()

def SoArrowButton_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog()

def SoArrowButton_initClass():
    return HEPVis_SWIG_Python.SoArrowButton_initClass()

class SoList(SoPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoList_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoList_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoList_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoList_getNodekitCatalog(self)
    fontList = property(HEPVis_SWIG_Python.SoList_fontList_get, HEPVis_SWIG_Python.SoList_fontList_set)
    items = property(HEPVis_SWIG_Python.SoList_items_get, HEPVis_SWIG_Python.SoList_items_set)
    visibleItemCount = property(HEPVis_SWIG_Python.SoList_visibleItemCount_get, HEPVis_SWIG_Python.SoList_visibleItemCount_set)
    topItemPosition = property(HEPVis_SWIG_Python.SoList_topItemPosition_get, HEPVis_SWIG_Python.SoList_topItemPosition_set)
    CONSTANT = HEPVis_SWIG_Python.SoList_CONSTANT
    VARIABLE = HEPVis_SWIG_Python.SoList_VARIABLE
    listSizePolicy = property(HEPVis_SWIG_Python.SoList_listSizePolicy_get, HEPVis_SWIG_Python.SoList_listSizePolicy_set)
    listWidth = property(HEPVis_SWIG_Python.SoList_listWidth_get, HEPVis_SWIG_Python.SoList_listWidth_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoList_swiginit(self, HEPVis_SWIG_Python.new_SoList())

    def addSingleSelectionCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoList_addSingleSelectionCallback(self, arg2, arg3)

    def removeSingleSelectionCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoList_removeSingleSelectionCallback(self, arg2, arg3)

    def getSelectedItem(self):
        return HEPVis_SWIG_Python.SoList_getSelectedItem(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoList_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoList

# Register SoList in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoList_swigregister(SoList)

def SoList_getClassTypeId():
    return HEPVis_SWIG_Python.SoList_getClassTypeId()

def SoList_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoList_getClassNodekitCatalog()

def SoList_initClass():
    return HEPVis_SWIG_Python.SoList_initClass()

class SoScrolledList(SoForm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoScrolledList_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoScrolledList_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoScrolledList_getNodekitCatalog(self)
    fontList = property(HEPVis_SWIG_Python.SoScrolledList_fontList_get, HEPVis_SWIG_Python.SoScrolledList_fontList_set)
    items = property(HEPVis_SWIG_Python.SoScrolledList_items_get, HEPVis_SWIG_Python.SoScrolledList_items_set)
    visibleItemCount = property(HEPVis_SWIG_Python.SoScrolledList_visibleItemCount_get, HEPVis_SWIG_Python.SoScrolledList_visibleItemCount_set)
    topItemPosition = property(HEPVis_SWIG_Python.SoScrolledList_topItemPosition_get, HEPVis_SWIG_Python.SoScrolledList_topItemPosition_set)
    listWidth = property(HEPVis_SWIG_Python.SoScrolledList_listWidth_get, HEPVis_SWIG_Python.SoScrolledList_listWidth_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoScrolledList_swiginit(self, HEPVis_SWIG_Python.new_SoScrolledList())

    def addSingleSelectionCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoScrolledList_addSingleSelectionCallback(self, arg2, arg3)

    def removeSingleSelectionCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoScrolledList_removeSingleSelectionCallback(self, arg2, arg3)

    def getSelectedItem(self):
        return HEPVis_SWIG_Python.SoScrolledList_getSelectedItem(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoScrolledList_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoScrolledList

# Register SoScrolledList in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoScrolledList_swigregister(SoScrolledList)

def SoScrolledList_getClassTypeId():
    return HEPVis_SWIG_Python.SoScrolledList_getClassTypeId()

def SoScrolledList_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog()

def SoScrolledList_initClass():
    return HEPVis_SWIG_Python.SoScrolledList_initClass()

class SoSelectionBox(SoForm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoSelectionBox_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoSelectionBox_getNodekitCatalog(self)
    items = property(HEPVis_SWIG_Python.SoSelectionBox_items_get, HEPVis_SWIG_Python.SoSelectionBox_items_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoSelectionBox_swiginit(self, HEPVis_SWIG_Python.new_SoSelectionBox())

    def addOkCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoSelectionBox_addOkCallback(self, arg2, arg3)

    def removeOkCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoSelectionBox_removeOkCallback(self, arg2, arg3)

    def getSelection(self):
        return HEPVis_SWIG_Python.SoSelectionBox_getSelection(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoSelectionBox_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSelectionBox

# Register SoSelectionBox in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoSelectionBox_swigregister(SoSelectionBox)

def SoSelectionBox_getClassTypeId():
    return HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId()

def SoSelectionBox_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog()

def SoSelectionBox_initClass():
    return HEPVis_SWIG_Python.SoSelectionBox_initClass()

class SoText(SoPrimitive):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoText_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoText_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoText_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoText_getNodekitCatalog(self)
    ENGLISH = HEPVis_SWIG_Python.SoText_ENGLISH
    FRENCH = HEPVis_SWIG_Python.SoText_FRENCH
    fontList = property(HEPVis_SWIG_Python.SoText_fontList_get, HEPVis_SWIG_Python.SoText_fontList_set)
    value = property(HEPVis_SWIG_Python.SoText_value_get, HEPVis_SWIG_Python.SoText_value_set)
    rows = property(HEPVis_SWIG_Python.SoText_rows_get, HEPVis_SWIG_Python.SoText_rows_set)
    topPosition = property(HEPVis_SWIG_Python.SoText_topPosition_get, HEPVis_SWIG_Python.SoText_topPosition_set)
    editable = property(HEPVis_SWIG_Python.SoText_editable_get, HEPVis_SWIG_Python.SoText_editable_set)
    cursorPosition = property(HEPVis_SWIG_Python.SoText_cursorPosition_get, HEPVis_SWIG_Python.SoText_cursorPosition_set)
    textWidth = property(HEPVis_SWIG_Python.SoText_textWidth_get, HEPVis_SWIG_Python.SoText_textWidth_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoText_swiginit(self, HEPVis_SWIG_Python.new_SoText())

    def addActivateCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoText_addActivateCallback(self, arg2, arg3)

    def removeActivateCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoText_removeActivateCallback(self, arg2, arg3)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoText_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoText

# Register SoText in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoText_swigregister(SoText)

def SoText_getClassTypeId():
    return HEPVis_SWIG_Python.SoText_getClassTypeId()

def SoText_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoText_getClassNodekitCatalog()

def SoText_initClass():
    return HEPVis_SWIG_Python.SoText_initClass()

class SoCommand(SoText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoCommand_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoCommand_getTypeId(self)
    historyItems = property(HEPVis_SWIG_Python.SoCommand_historyItems_get, HEPVis_SWIG_Python.SoCommand_historyItems_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoCommand_swiginit(self, HEPVis_SWIG_Python.new_SoCommand())

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoCommand_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCommand

# Register SoCommand in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoCommand_swigregister(SoCommand)

def SoCommand_getClassTypeId():
    return HEPVis_SWIG_Python.SoCommand_getClassTypeId()

def SoCommand_initClass():
    return HEPVis_SWIG_Python.SoCommand_initClass()

class SoFileSelectionBox(SoForm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoFileSelectionBox_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoFileSelectionBox_getNodekitCatalog(self)
    directory = property(HEPVis_SWIG_Python.SoFileSelectionBox_directory_get, HEPVis_SWIG_Python.SoFileSelectionBox_directory_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoFileSelectionBox_swiginit(self, HEPVis_SWIG_Python.new_SoFileSelectionBox())

    def addOkCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoFileSelectionBox_addOkCallback(self, arg2, arg3)

    def removeOkCallback(self, arg2, arg3=None):
        return HEPVis_SWIG_Python.SoFileSelectionBox_removeOkCallback(self, arg2, arg3)

    def getSelectedFile(self):
        return HEPVis_SWIG_Python.SoFileSelectionBox_getSelectedFile(self)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoFileSelectionBox_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoFileSelectionBox

# Register SoFileSelectionBox in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoFileSelectionBox_swigregister(SoFileSelectionBox)

def SoFileSelectionBox_getClassTypeId():
    return HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId()

def SoFileSelectionBox_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog()

def SoFileSelectionBox_initClass():
    return HEPVis_SWIG_Python.SoFileSelectionBox_initClass()

class SoShell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return HEPVis_SWIG_Python.SoShell_getClassTypeId()

    def getTypeId(self):
        return HEPVis_SWIG_Python.SoShell_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return HEPVis_SWIG_Python.SoShell_getNodekitCatalog(self)
    background = property(HEPVis_SWIG_Python.SoShell_background_get, HEPVis_SWIG_Python.SoShell_background_set)

    def __init__(self):
        HEPVis_SWIG_Python.SoShell_swiginit(self, HEPVis_SWIG_Python.new_SoShell())

    def addChild(self, arg2):
        return HEPVis_SWIG_Python.SoShell_addChild(self, arg2)

    def doAction(self, arg2):
        return HEPVis_SWIG_Python.SoShell_doAction(self, arg2)

    def callback(self, arg2):
        return HEPVis_SWIG_Python.SoShell_callback(self, arg2)

    def GLRender(self, arg2):
        return HEPVis_SWIG_Python.SoShell_GLRender(self, arg2)

    def rayPick(self, arg2):
        return HEPVis_SWIG_Python.SoShell_rayPick(self, arg2)

    def pick(self, arg2):
        return HEPVis_SWIG_Python.SoShell_pick(self, arg2)

    def getBoundingBox(self, arg2):
        return HEPVis_SWIG_Python.SoShell_getBoundingBox(self, arg2)

    @staticmethod
    def initClass():
        return HEPVis_SWIG_Python.SoShell_initClass()
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoShell

# Register SoShell in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoShell_swigregister(SoShell)

def SoShell_getClassTypeId():
    return HEPVis_SWIG_Python.SoShell_getClassTypeId()

def SoShell_getClassNodekitCatalog():
    return HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog()

def SoShell_initClass():
    return HEPVis_SWIG_Python.SoShell_initClass()

class SbVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbVisitor

    def visit(self, arg2):
        return HEPVis_SWIG_Python.SbVisitor_visit(self, arg2)

# Register SbVisitor in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SbVisitor_swigregister(SbVisitor)

class SoTools(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LEFT = HEPVis_SWIG_Python.SoTools_LEFT
    CENTER = HEPVis_SWIG_Python.SoTools_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTools_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTools_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTools_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTools_TOP

    @staticmethod
    def getSceneGraphs(arg1):
        return HEPVis_SWIG_Python.SoTools_getSceneGraphs(arg1)

    @staticmethod
    def searchNode(*args):
        return HEPVis_SWIG_Python.SoTools_searchNode(*args)

    @staticmethod
    def isChildOf(arg1, arg2):
        return HEPVis_SWIG_Python.SoTools_isChildOf(arg1, arg2)

    @staticmethod
    def addPolygonToNode(*args):
        return HEPVis_SWIG_Python.SoTools_addPolygonToNode(*args)

    @staticmethod
    def addBoxCoords(arg1, arg2, arg3, arg4):
        return HEPVis_SWIG_Python.SoTools_addBoxCoords(arg1, arg2, arg3, arg4)

    @staticmethod
    def addLinesToNode(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_addLinesToNode(arg1, arg2, arg3)

    @staticmethod
    def addSegmentsToNode(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_addSegmentsToNode(arg1, arg2, arg3)

    @staticmethod
    def addNurbsCurveToNode(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode(arg1, arg2, arg3)

    @staticmethod
    def addSplineCurveToNode(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_addSplineCurveToNode(arg1, arg2, arg3)

    @staticmethod
    def addLagrangePolynomialCurveToNode(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode(arg1, arg2, arg3)

    @staticmethod
    def addPointsToNode(arg1, arg2, arg3, arg4, arg5):
        return HEPVis_SWIG_Python.SoTools_addPointsToNode(arg1, arg2, arg3, arg4, arg5)

    @staticmethod
    def addAlignedStringToNode(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12=0):
        return HEPVis_SWIG_Python.SoTools_addAlignedStringToNode(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

    @staticmethod
    def setKitPart(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_setKitPart(arg1, arg2, arg3)

    @staticmethod
    def getKitPart(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_getKitPart(arg1, arg2, arg3)

    @staticmethod
    def toggleKitPart(arg1, arg2):
        return HEPVis_SWIG_Python.SoTools_toggleKitPart(arg1, arg2)

    @staticmethod
    def setKitPartValue(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_setKitPartValue(arg1, arg2, arg3)

    @staticmethod
    def getKitPartValue(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_getKitPartValue(arg1, arg2, arg3)

    @staticmethod
    def toggleKitPartValue(arg1, arg2):
        return HEPVis_SWIG_Python.SoTools_toggleKitPartValue(arg1, arg2)

    @staticmethod
    def resetHighlight(arg1):
        return HEPVis_SWIG_Python.SoTools_resetHighlight(arg1)

    @staticmethod
    def highlight(arg1):
        return HEPVis_SWIG_Python.SoTools_highlight(arg1)

    @staticmethod
    def highlightName():
        return HEPVis_SWIG_Python.SoTools_highlightName()

    @staticmethod
    def pointAt(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_pointAt(arg1, arg2, arg3)

    @staticmethod
    def lookAt(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_lookAt(arg1, arg2, arg3)

    @staticmethod
    def write(*args):
        return HEPVis_SWIG_Python.SoTools_write(*args)

    @staticmethod
    def setManip(arg1, arg2):
        return HEPVis_SWIG_Python.SoTools_setManip(arg1, arg2)

    @staticmethod
    def removeManips(arg1):
        return HEPVis_SWIG_Python.SoTools_removeManips(arg1)

    @staticmethod
    def setManips(arg1):
        return HEPVis_SWIG_Python.SoTools_setManips(arg1)

    @staticmethod
    def setDraggerColor(arg1, arg2):
        return HEPVis_SWIG_Python.SoTools_setDraggerColor(arg1, arg2)

    @staticmethod
    def addDraggersToPolygon(*args):
        return HEPVis_SWIG_Python.SoTools_addDraggersToPolygon(*args)

    @staticmethod
    def visit(arg1, arg2, arg3):
        return HEPVis_SWIG_Python.SoTools_visit(arg1, arg2, arg3)

    @staticmethod
    def detectIntersection(arg1, stopAtFirst):
        return HEPVis_SWIG_Python.SoTools_detectIntersection(arg1, stopAtFirst)

    @staticmethod
    def count(aNode, aTriangles, aLineSegments, aPoints, aNodes, aShapes):
        return HEPVis_SWIG_Python.SoTools_count(aNode, aTriangles, aLineSegments, aPoints, aNodes, aShapes)

    def __init__(self):
        HEPVis_SWIG_Python.SoTools_swiginit(self, HEPVis_SWIG_Python.new_SoTools())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTools

# Register SoTools in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoTools_swigregister(SoTools)

def SoTools_getSceneGraphs(arg1):
    return HEPVis_SWIG_Python.SoTools_getSceneGraphs(arg1)

def SoTools_searchNode(*args):
    return HEPVis_SWIG_Python.SoTools_searchNode(*args)

def SoTools_isChildOf(arg1, arg2):
    return HEPVis_SWIG_Python.SoTools_isChildOf(arg1, arg2)

def SoTools_addPolygonToNode(*args):
    return HEPVis_SWIG_Python.SoTools_addPolygonToNode(*args)

def SoTools_addBoxCoords(arg1, arg2, arg3, arg4):
    return HEPVis_SWIG_Python.SoTools_addBoxCoords(arg1, arg2, arg3, arg4)

def SoTools_addLinesToNode(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_addLinesToNode(arg1, arg2, arg3)

def SoTools_addSegmentsToNode(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_addSegmentsToNode(arg1, arg2, arg3)

def SoTools_addNurbsCurveToNode(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode(arg1, arg2, arg3)

def SoTools_addSplineCurveToNode(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_addSplineCurveToNode(arg1, arg2, arg3)

def SoTools_addLagrangePolynomialCurveToNode(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode(arg1, arg2, arg3)

def SoTools_addPointsToNode(arg1, arg2, arg3, arg4, arg5):
    return HEPVis_SWIG_Python.SoTools_addPointsToNode(arg1, arg2, arg3, arg4, arg5)

def SoTools_addAlignedStringToNode(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12=0):
    return HEPVis_SWIG_Python.SoTools_addAlignedStringToNode(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def SoTools_setKitPart(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_setKitPart(arg1, arg2, arg3)

def SoTools_getKitPart(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_getKitPart(arg1, arg2, arg3)

def SoTools_toggleKitPart(arg1, arg2):
    return HEPVis_SWIG_Python.SoTools_toggleKitPart(arg1, arg2)

def SoTools_setKitPartValue(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_setKitPartValue(arg1, arg2, arg3)

def SoTools_getKitPartValue(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_getKitPartValue(arg1, arg2, arg3)

def SoTools_toggleKitPartValue(arg1, arg2):
    return HEPVis_SWIG_Python.SoTools_toggleKitPartValue(arg1, arg2)

def SoTools_resetHighlight(arg1):
    return HEPVis_SWIG_Python.SoTools_resetHighlight(arg1)

def SoTools_highlight(arg1):
    return HEPVis_SWIG_Python.SoTools_highlight(arg1)

def SoTools_highlightName():
    return HEPVis_SWIG_Python.SoTools_highlightName()

def SoTools_pointAt(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_pointAt(arg1, arg2, arg3)

def SoTools_lookAt(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_lookAt(arg1, arg2, arg3)

def SoTools_write(*args):
    return HEPVis_SWIG_Python.SoTools_write(*args)

def SoTools_setManip(arg1, arg2):
    return HEPVis_SWIG_Python.SoTools_setManip(arg1, arg2)

def SoTools_removeManips(arg1):
    return HEPVis_SWIG_Python.SoTools_removeManips(arg1)

def SoTools_setManips(arg1):
    return HEPVis_SWIG_Python.SoTools_setManips(arg1)

def SoTools_setDraggerColor(arg1, arg2):
    return HEPVis_SWIG_Python.SoTools_setDraggerColor(arg1, arg2)

def SoTools_addDraggersToPolygon(*args):
    return HEPVis_SWIG_Python.SoTools_addDraggersToPolygon(*args)

def SoTools_visit(arg1, arg2, arg3):
    return HEPVis_SWIG_Python.SoTools_visit(arg1, arg2, arg3)

def SoTools_detectIntersection(arg1, stopAtFirst):
    return HEPVis_SWIG_Python.SoTools_detectIntersection(arg1, stopAtFirst)

def SoTools_count(aNode, aTriangles, aLineSegments, aPoints, aNodes, aShapes):
    return HEPVis_SWIG_Python.SoTools_count(aNode, aTriangles, aLineSegments, aPoints, aNodes, aShapes)

class SoStyleCache(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        HEPVis_SWIG_Python.SoStyleCache_swiginit(self, HEPVis_SWIG_Python.new_SoStyleCache())

    @staticmethod
    def cachedName():
        return HEPVis_SWIG_Python.SoStyleCache_cachedName()

    def getMaterial(self, *args):
        return HEPVis_SWIG_Python.SoStyleCache_getMaterial(self, *args)

    def getHighlightMaterial(self, *args):
        return HEPVis_SWIG_Python.SoStyleCache_getHighlightMaterial(self, *args)

    def getLineStyle(self, arg2=0xFFFF, arg3=0):
        return HEPVis_SWIG_Python.SoStyleCache_getLineStyle(self, arg2, arg3)

    def getFilled(self):
        return HEPVis_SWIG_Python.SoStyleCache_getFilled(self)

    def getPoints(self):
        return HEPVis_SWIG_Python.SoStyleCache_getPoints(self)

    def getLightModelPhong(self):
        return HEPVis_SWIG_Python.SoStyleCache_getLightModelPhong(self)

    def getLightModelBaseColor(self):
        return HEPVis_SWIG_Python.SoStyleCache_getLightModelBaseColor(self)

    def getResetTransform(self):
        return HEPVis_SWIG_Python.SoStyleCache_getResetTransform(self)

    def getNormalBindingOverall(self):
        return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingOverall(self)

    def getNormalBindingPerFace(self):
        return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingPerFace(self)

    def getNormalBindingPerFaceIndexed(self):
        return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingPerFaceIndexed(self)

    def getNormalZ(self):
        return HEPVis_SWIG_Python.SoStyleCache_getNormalZ(self)

    def getMaterialBindingOverall(self):
        return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingOverall(self)

    def getMaterialBindingPerFace(self):
        return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingPerFace(self)

    def getMaterialBindingPerFaceIndexed(self):
        return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingPerFaceIndexed(self)

    def clearCache(self):
        return HEPVis_SWIG_Python.SoStyleCache_clearCache(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStyleCache

# Register SoStyleCache in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.SoStyleCache_swigregister(SoStyleCache)

def SoStyleCache_cachedName():
    return HEPVis_SWIG_Python.SoStyleCache_cachedName()


def HEPVisUtils_initClasses():
    return HEPVis_SWIG_Python.HEPVisUtils_initClasses()

def HEPVisGeometry_initClasses():
    return HEPVis_SWIG_Python.HEPVisGeometry_initClasses()

def HEPVisDetector_initClasses():
    return HEPVis_SWIG_Python.HEPVisDetector_initClasses()

def HEPVisPlotter_initClasses():
    return HEPVis_SWIG_Python.HEPVisPlotter_initClasses()

def HEPVisGUI_initClasses():
    return HEPVis_SWIG_Python.HEPVisGUI_initClasses()

def SoPlotter_initClasses():
    return HEPVis_SWIG_Python.SoPlotter_initClasses()

def initClasses():
    return HEPVis_SWIG_Python.initClasses()
class base_histo_duidd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def title(self, *args):
        return HEPVis_SWIG_Python.base_histo_duidd_title(self, *args)

    def set_title(self, a_title):
        return HEPVis_SWIG_Python.base_histo_duidd_set_title(self, a_title)

    def dimension(self):
        return HEPVis_SWIG_Python.base_histo_duidd_dimension(self)

    def entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_entries(self)

    def all_entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_all_entries(self)

    def extra_entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_extra_entries(self)

    def equivalent_bin_entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_equivalent_bin_entries(self)

    def sum_bin_heights(self):
        return HEPVis_SWIG_Python.base_histo_duidd_sum_bin_heights(self)

    def sum_all_bin_heights(self):
        return HEPVis_SWIG_Python.base_histo_duidd_sum_all_bin_heights(self)

    def sum_extra_bin_heights(self):
        return HEPVis_SWIG_Python.base_histo_duidd_sum_extra_bin_heights(self)

    def min_bin_height(self):
        return HEPVis_SWIG_Python.base_histo_duidd_min_bin_height(self)

    def max_bin_height(self):
        return HEPVis_SWIG_Python.base_histo_duidd_max_bin_height(self)

    def get_entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_entries(self)

    def get_Sw(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_Sw(self)

    def get_Sw2(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_Sw2(self)

    def get_ith_axis_Sxw(self, a_axis, a_value):
        return HEPVis_SWIG_Python.base_histo_duidd_get_ith_axis_Sxw(self, a_axis, a_value)

    def get_ith_axis_Sx2w(self, a_axis, a_value):
        return HEPVis_SWIG_Python.base_histo_duidd_get_ith_axis_Sx2w(self, a_axis, a_value)

    def get_all_entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_all_entries(self)

    def get_indices(self, aOffset, aIs):
        return HEPVis_SWIG_Python.base_histo_duidd_get_indices(self, aOffset, aIs)

    def is_out(self, aOffset):
        return HEPVis_SWIG_Python.base_histo_duidd_is_out(self, aOffset)

    def get_offset(self, aIs, a_offset):
        return HEPVis_SWIG_Python.base_histo_duidd_get_offset(self, aIs, a_offset)

    def bins_entries(self):
        return HEPVis_SWIG_Python.base_histo_duidd_bins_entries(self)

    def bins_sum_w(self):
        return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_w(self)

    def bins_sum_w2(self):
        return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_w2(self)

    def bins_sum_xw(self):
        return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_xw(self)

    def bins_sum_x2w(self):
        return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_x2w(self)

    def get_axis(self, aIndex):
        return HEPVis_SWIG_Python.base_histo_duidd_get_axis(self, aIndex)

    def get_bins(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_bins(self)

    def get_title(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_title(self)

    def get_dimension(self):
        return HEPVis_SWIG_Python.base_histo_duidd_get_dimension(self)

    def is_valid(self):
        return HEPVis_SWIG_Python.base_histo_duidd_is_valid(self)

    def annotations(self, *args):
        return HEPVis_SWIG_Python.base_histo_duidd_annotations(self, *args)

    def add_annotation(self, a_key, a_value):
        return HEPVis_SWIG_Python.base_histo_duidd_add_annotation(self, a_key, a_value)

    def annotation(self, a_key, a_value):
        return HEPVis_SWIG_Python.base_histo_duidd_annotation(self, a_key, a_value)

# Register base_histo_duidd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.base_histo_duidd_swigregister(base_histo_duidd)

class b1_duidd(base_histo_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bin_error(self, arg2):
        return HEPVis_SWIG_Python.b1_duidd_bin_error(self, arg2)

    def update_fast_getters(self):
        return HEPVis_SWIG_Python.b1_duidd_update_fast_getters(self)

    def coord_to_index(self, aCoord):
        return HEPVis_SWIG_Python.b1_duidd_coord_to_index(self, aCoord)

    def mean(self):
        return HEPVis_SWIG_Python.b1_duidd_mean(self)

    def rms(self):
        return HEPVis_SWIG_Python.b1_duidd_rms(self)

    def bin_entries(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_entries(self, aI)

    def bin_Sw(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_Sw(self, aI)

    def bin_Sw2(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_Sw2(self, aI)

    def bin_Sxw(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_Sxw(self, aI)

    def bin_Sx2w(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_Sx2w(self, aI)

    def bin_height(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_height(self, aI)

    def bin_center(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_center(self, aI)

    def bin_mean(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_mean(self, aI)

    def bin_rms(self, aI):
        return HEPVis_SWIG_Python.b1_duidd_bin_rms(self, aI)

    def axis(self, *args):
        return HEPVis_SWIG_Python.b1_duidd_axis(self, *args)

    def hprint(self, a_out):
        return HEPVis_SWIG_Python.b1_duidd_hprint(self, a_out)

    def configure(self, *args):
        return HEPVis_SWIG_Python.b1_duidd_configure(self, *args)

# Register b1_duidd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.b1_duidd_swigregister(b1_duidd)

class b2_duidd(base_histo_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bin_error(self, arg2, arg3):
        return HEPVis_SWIG_Python.b2_duidd_bin_error(self, arg2, arg3)

    def update_fast_getters(self):
        return HEPVis_SWIG_Python.b2_duidd_update_fast_getters(self)

    def mean_x(self):
        return HEPVis_SWIG_Python.b2_duidd_mean_x(self)

    def mean_y(self):
        return HEPVis_SWIG_Python.b2_duidd_mean_y(self)

    def rms_x(self):
        return HEPVis_SWIG_Python.b2_duidd_rms_x(self)

    def rms_y(self):
        return HEPVis_SWIG_Python.b2_duidd_rms_y(self)

    def coord_to_index_x(self, aCoord):
        return HEPVis_SWIG_Python.b2_duidd_coord_to_index_x(self, aCoord)

    def coord_to_index_y(self, aCoord):
        return HEPVis_SWIG_Python.b2_duidd_coord_to_index_y(self, aCoord)

    def bin_entries(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_entries(self, aI, aJ)

    def bin_Sw(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_Sw(self, aI, aJ)

    def bin_Sw2(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_Sw2(self, aI, aJ)

    def bin_Sxw(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_Sxw(self, aI, aJ)

    def bin_Sx2w(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_Sx2w(self, aI, aJ)

    def bin_Syw(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_Syw(self, aI, aJ)

    def bin_Sy2w(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_Sy2w(self, aI, aJ)

    def bin_height(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_height(self, aI, aJ)

    def bin_center_x(self, aI):
        return HEPVis_SWIG_Python.b2_duidd_bin_center_x(self, aI)

    def bin_center_y(self, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_center_y(self, aJ)

    def bin_mean_x(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_mean_x(self, aI, aJ)

    def bin_mean_y(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_mean_y(self, aI, aJ)

    def bin_rms_x(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_rms_x(self, aI, aJ)

    def bin_rms_y(self, aI, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_rms_y(self, aI, aJ)

    def axis_x(self, *args):
        return HEPVis_SWIG_Python.b2_duidd_axis_x(self, *args)

    def axis_y(self, *args):
        return HEPVis_SWIG_Python.b2_duidd_axis_y(self, *args)

    def bin_entries_x(self, aI):
        return HEPVis_SWIG_Python.b2_duidd_bin_entries_x(self, aI)

    def bin_height_x(self, aI):
        return HEPVis_SWIG_Python.b2_duidd_bin_height_x(self, aI)

    def bin_entries_y(self, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_entries_y(self, aJ)

    def bin_height_y(self, aJ):
        return HEPVis_SWIG_Python.b2_duidd_bin_height_y(self, aJ)

    def hprint(self, a_out):
        return HEPVis_SWIG_Python.b2_duidd_hprint(self, a_out)

    def configure(self, *args):
        return HEPVis_SWIG_Python.b2_duidd_configure(self, *args)

# Register b2_duidd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.b2_duidd_swigregister(b2_duidd)

class h1_duidd(b1_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI):
        return HEPVis_SWIG_Python.h1_duidd_bin_error(self, aI)

    def scale(self, aFactor):
        return HEPVis_SWIG_Python.h1_duidd_scale(self, aFactor)

    def copy_from_data(self, a_from):
        return HEPVis_SWIG_Python.h1_duidd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return HEPVis_SWIG_Python.h1_duidd_get_histo_data(self)

    def reset(self):
        return HEPVis_SWIG_Python.h1_duidd_reset(self)

    def fill(self, aX, aWeight=1):
        return HEPVis_SWIG_Python.h1_duidd_fill(self, aX, aWeight)

    def add(self, a_histo):
        return HEPVis_SWIG_Python.h1_duidd_add(self, a_histo)

    def subtract(self, a_histo):
        return HEPVis_SWIG_Python.h1_duidd_subtract(self, a_histo)

    def multiply(self, *args):
        return HEPVis_SWIG_Python.h1_duidd_multiply(self, *args)

    def divide(self, a_histo):
        return HEPVis_SWIG_Python.h1_duidd_divide(self, a_histo)

    def gather_bins(self, a_factor):
        return HEPVis_SWIG_Python.h1_duidd_gather_bins(self, a_factor)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1_duidd

    def __init__(self, *args):
        HEPVis_SWIG_Python.h1_duidd_swiginit(self, HEPVis_SWIG_Python.new_h1_duidd(*args))

# Register h1_duidd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.h1_duidd_swigregister(h1_duidd)

class h2_duidd(b2_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI, aJ):
        return HEPVis_SWIG_Python.h2_duidd_bin_error(self, aI, aJ)

    def scale(self, aFactor):
        return HEPVis_SWIG_Python.h2_duidd_scale(self, aFactor)

    def copy_from_data(self, a_from):
        return HEPVis_SWIG_Python.h2_duidd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return HEPVis_SWIG_Python.h2_duidd_get_histo_data(self)

    def reset(self):
        return HEPVis_SWIG_Python.h2_duidd_reset(self)

    def fill(self, aX, aY, aWeight=1):
        return HEPVis_SWIG_Python.h2_duidd_fill(self, aX, aY, aWeight)

    def add(self, a_histo):
        return HEPVis_SWIG_Python.h2_duidd_add(self, a_histo)

    def subtract(self, a_histo):
        return HEPVis_SWIG_Python.h2_duidd_subtract(self, a_histo)

    def multiply(self, *args):
        return HEPVis_SWIG_Python.h2_duidd_multiply(self, *args)

    def divide(self, a_histo):
        return HEPVis_SWIG_Python.h2_duidd_divide(self, a_histo)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h2_duidd

    def __init__(self, *args):
        HEPVis_SWIG_Python.h2_duidd_swiginit(self, HEPVis_SWIG_Python.new_h2_duidd(*args))

# Register h2_duidd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.h2_duidd_swigregister(h2_duidd)

class p1_duiddd(b1_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI):
        return HEPVis_SWIG_Python.p1_duiddd_bin_error(self, aI)

    def multiply(self, aFactor):
        return HEPVis_SWIG_Python.p1_duiddd_multiply(self, aFactor)

    def scale(self, aFactor):
        return HEPVis_SWIG_Python.p1_duiddd_scale(self, aFactor)

    def bin_Svw(self, aI):
        return HEPVis_SWIG_Python.p1_duiddd_bin_Svw(self, aI)

    def bin_Sv2w(self, aI):
        return HEPVis_SWIG_Python.p1_duiddd_bin_Sv2w(self, aI)

    def reset(self):
        return HEPVis_SWIG_Python.p1_duiddd_reset(self)

    def copy_from_data(self, a_from):
        return HEPVis_SWIG_Python.p1_duiddd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return HEPVis_SWIG_Python.p1_duiddd_get_histo_data(self)

    def fill(self, aX, aV, aWeight=1):
        return HEPVis_SWIG_Python.p1_duiddd_fill(self, aX, aV, aWeight)

    def bin_rms_value(self, aI):
        return HEPVis_SWIG_Python.p1_duiddd_bin_rms_value(self, aI)

    def add(self, a_histo):
        return HEPVis_SWIG_Python.p1_duiddd_add(self, a_histo)

    def subtract(self, a_histo):
        return HEPVis_SWIG_Python.p1_duiddd_subtract(self, a_histo)

    def gather_bins(self, a_factor):
        return HEPVis_SWIG_Python.p1_duiddd_gather_bins(self, a_factor)

    def cut_v(self):
        return HEPVis_SWIG_Python.p1_duiddd_cut_v(self)

    def min_v(self):
        return HEPVis_SWIG_Python.p1_duiddd_min_v(self)

    def max_v(self):
        return HEPVis_SWIG_Python.p1_duiddd_max_v(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p1_duiddd

    def __init__(self, *args):
        HEPVis_SWIG_Python.p1_duiddd_swiginit(self, HEPVis_SWIG_Python.new_p1_duiddd(*args))

    def bins_sum_vw(self):
        return HEPVis_SWIG_Python.p1_duiddd_bins_sum_vw(self)

    def bins_sum_v2w(self):
        return HEPVis_SWIG_Python.p1_duiddd_bins_sum_v2w(self)

# Register p1_duiddd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.p1_duiddd_swigregister(p1_duiddd)

class p2_duiddd(b2_duidd):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def bin_error(self, aI, aJ):
        return HEPVis_SWIG_Python.p2_duiddd_bin_error(self, aI, aJ)

    def multiply(self, aFactor):
        return HEPVis_SWIG_Python.p2_duiddd_multiply(self, aFactor)

    def scale(self, aFactor):
        return HEPVis_SWIG_Python.p2_duiddd_scale(self, aFactor)

    def bin_Svw(self, aI, aJ):
        return HEPVis_SWIG_Python.p2_duiddd_bin_Svw(self, aI, aJ)

    def bin_Sv2w(self, aI, aJ):
        return HEPVis_SWIG_Python.p2_duiddd_bin_Sv2w(self, aI, aJ)

    def reset(self):
        return HEPVis_SWIG_Python.p2_duiddd_reset(self)

    def copy_from_data(self, a_from):
        return HEPVis_SWIG_Python.p2_duiddd_copy_from_data(self, a_from)

    def get_histo_data(self):
        return HEPVis_SWIG_Python.p2_duiddd_get_histo_data(self)

    def fill(self, aX, aY, aV, aWeight=1):
        return HEPVis_SWIG_Python.p2_duiddd_fill(self, aX, aY, aV, aWeight)

    def bin_rms_value(self, aI, aJ):
        return HEPVis_SWIG_Python.p2_duiddd_bin_rms_value(self, aI, aJ)

    def add(self, a_histo):
        return HEPVis_SWIG_Python.p2_duiddd_add(self, a_histo)

    def subtract(self, a_histo):
        return HEPVis_SWIG_Python.p2_duiddd_subtract(self, a_histo)

    def cut_v(self):
        return HEPVis_SWIG_Python.p2_duiddd_cut_v(self)

    def min_v(self):
        return HEPVis_SWIG_Python.p2_duiddd_min_v(self)

    def max_v(self):
        return HEPVis_SWIG_Python.p2_duiddd_max_v(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p2_duiddd

    def __init__(self, *args):
        HEPVis_SWIG_Python.p2_duiddd_swiginit(self, HEPVis_SWIG_Python.new_p2_duiddd(*args))

    def bins_sum_vw(self):
        return HEPVis_SWIG_Python.p2_duiddd_bins_sum_vw(self)

    def bins_sum_v2w(self):
        return HEPVis_SWIG_Python.p2_duiddd_bins_sum_v2w(self)

# Register p2_duiddd in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.p2_duiddd_swigregister(p2_duiddd)


def words(*args):
    return HEPVis_SWIG_Python.words(*args)

def snpf(*args):
    return HEPVis_SWIG_Python.snpf(*args)

def sprintf(*args):
    return HEPVis_SWIG_Python.sprintf(*args)

def is_upper(a_char):
    return HEPVis_SWIG_Python.is_upper(a_char)

def is_lower(a_char):
    return HEPVis_SWIG_Python.is_lower(a_char)

def is_digit(a_char):
    return HEPVis_SWIG_Python.is_digit(a_char)

def is_letter(a_char):
    return HEPVis_SWIG_Python.is_letter(a_char)

def is_printable(a_char):
    return HEPVis_SWIG_Python.is_printable(a_char)

def int32_format():
    return HEPVis_SWIG_Python.int32_format()

def int64_format():
    return HEPVis_SWIG_Python.int64_format()

def uint32_format():
    return HEPVis_SWIG_Python.uint32_format()

def uint64_format():
    return HEPVis_SWIG_Python.uint64_format()

def uint32_mx():
    return HEPVis_SWIG_Python.uint32_mx()

def uint64_mx():
    return HEPVis_SWIG_Python.uint64_mx()
class fits_bit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_c = property(HEPVis_SWIG_Python.fits_bit_m_c_get, HEPVis_SWIG_Python.fits_bit_m_c_set)

    def __init__(self):
        HEPVis_SWIG_Python.fits_bit_swiginit(self, HEPVis_SWIG_Python.new_fits_bit())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_fits_bit

# Register fits_bit in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.fits_bit_swigregister(fits_bit)

class csv_time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_l = property(HEPVis_SWIG_Python.csv_time_m_l_get, HEPVis_SWIG_Python.csv_time_m_l_set)

    def __init__(self):
        HEPVis_SWIG_Python.csv_time_swiginit(self, HEPVis_SWIG_Python.new_csv_time())
    __swig_destroy__ = HEPVis_SWIG_Python.delete_csv_time

# Register csv_time in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.csv_time_swigregister(csv_time)


def size_char():
    return HEPVis_SWIG_Python.size_char()

def size_short():
    return HEPVis_SWIG_Python.size_short()

def size_int():
    return HEPVis_SWIG_Python.size_int()

def size_int64():
    return HEPVis_SWIG_Python.size_int64()

def size_float():
    return HEPVis_SWIG_Python.size_float()

def size_double():
    return HEPVis_SWIG_Python.size_double()

def tosx(a_value):
    return HEPVis_SWIG_Python.tosx(a_value)

def tos(*args):
    return HEPVis_SWIG_Python.tos(*args)

def destTo(*args):
    return HEPVis_SWIG_Python.destTo(*args)

def d2s(a_value):
    return HEPVis_SWIG_Python.d2s(a_value)

def soutd(a_value):
    return HEPVis_SWIG_Python.soutd(a_value)
class h1d2plot(SbPlottableBins1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return HEPVis_SWIG_Python.h1d2plot_isValid(self)

    def getName(self):
        return HEPVis_SWIG_Python.h1d2plot_getName(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.h1d2plot_getLegend(self)

    def cast(self, aClass):
        return HEPVis_SWIG_Python.h1d2plot_cast(self, aClass)

    def getDimension(self):
        return HEPVis_SWIG_Python.h1d2plot_getDimension(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.h1d2plot_getLabel(self)

    def getBinsSumOfWeightsRange(self, aMin, aMax):
        return HEPVis_SWIG_Python.h1d2plot_getBinsSumOfWeightsRange(self, aMin, aMax)

    def getAxisNumberOfBins(self):
        return HEPVis_SWIG_Python.h1d2plot_getAxisNumberOfBins(self)

    def getAxisMinimum(self):
        return HEPVis_SWIG_Python.h1d2plot_getAxisMinimum(self)

    def getAxisMaximum(self):
        return HEPVis_SWIG_Python.h1d2plot_getAxisMaximum(self)

    def getBinLowerEdge(self, aI):
        return HEPVis_SWIG_Python.h1d2plot_getBinLowerEdge(self, aI)

    def getBinUpperEdge(self, aI):
        return HEPVis_SWIG_Python.h1d2plot_getBinUpperEdge(self, aI)

    def getBinNumberOfEntries(self, aI):
        return HEPVis_SWIG_Python.h1d2plot_getBinNumberOfEntries(self, aI)

    def getBinSumOfWeights(self, aI):
        return HEPVis_SWIG_Python.h1d2plot_getBinSumOfWeights(self, aI)

    def getBinBar(self, aI):
        return HEPVis_SWIG_Python.h1d2plot_getBinBar(self, aI)

    def getInfos(self, aOptions):
        return HEPVis_SWIG_Python.h1d2plot_getInfos(self, aOptions)

    def __init__(self, aName, aData):
        HEPVis_SWIG_Python.h1d2plot_swiginit(self, HEPVis_SWIG_Python.new_h1d2plot(aName, aData))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1d2plot

# Register h1d2plot in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.h1d2plot_swigregister(h1d2plot)

class h2d2plot(SbPlottableBins2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return HEPVis_SWIG_Python.h2d2plot_isValid(self)

    def getName(self):
        return HEPVis_SWIG_Python.h2d2plot_getName(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.h2d2plot_getLegend(self)

    def cast(self, aClass):
        return HEPVis_SWIG_Python.h2d2plot_cast(self, aClass)

    def getDimension(self):
        return HEPVis_SWIG_Python.h2d2plot_getDimension(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.h2d2plot_getLabel(self)

    def getBinsSumOfWeightsRange(self, aMin, aMax):
        return HEPVis_SWIG_Python.h2d2plot_getBinsSumOfWeightsRange(self, aMin, aMax)

    def getAxisNumberOfBinsX(self):
        return HEPVis_SWIG_Python.h2d2plot_getAxisNumberOfBinsX(self)

    def getAxisNumberOfBinsY(self):
        return HEPVis_SWIG_Python.h2d2plot_getAxisNumberOfBinsY(self)

    def getAxisMinimumX(self):
        return HEPVis_SWIG_Python.h2d2plot_getAxisMinimumX(self)

    def getAxisMaximumX(self):
        return HEPVis_SWIG_Python.h2d2plot_getAxisMaximumX(self)

    def getAxisMinimumY(self):
        return HEPVis_SWIG_Python.h2d2plot_getAxisMinimumY(self)

    def getAxisMaximumY(self):
        return HEPVis_SWIG_Python.h2d2plot_getAxisMaximumY(self)

    def getBinLowerEdgeX(self, aI):
        return HEPVis_SWIG_Python.h2d2plot_getBinLowerEdgeX(self, aI)

    def getBinUpperEdgeX(self, aI):
        return HEPVis_SWIG_Python.h2d2plot_getBinUpperEdgeX(self, aI)

    def getBinLowerEdgeY(self, aI):
        return HEPVis_SWIG_Python.h2d2plot_getBinLowerEdgeY(self, aI)

    def getBinUpperEdgeY(self, aI):
        return HEPVis_SWIG_Python.h2d2plot_getBinUpperEdgeY(self, aI)

    def getBinNumberOfEntries(self, aI, aJ):
        return HEPVis_SWIG_Python.h2d2plot_getBinNumberOfEntries(self, aI, aJ)

    def getBinSumOfWeights(self, aI, aJ):
        return HEPVis_SWIG_Python.h2d2plot_getBinSumOfWeights(self, aI, aJ)

    def getBinBar(self, aI, aJ):
        return HEPVis_SWIG_Python.h2d2plot_getBinBar(self, aI, aJ)

    def getInfos(self, aOptions):
        return HEPVis_SWIG_Python.h2d2plot_getInfos(self, aOptions)

    def __init__(self, aName, aData):
        HEPVis_SWIG_Python.h2d2plot_swiginit(self, HEPVis_SWIG_Python.new_h2d2plot(aName, aData))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h2d2plot

# Register h2d2plot in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.h2d2plot_swigregister(h2d2plot)

class p1d2plot(SbPlottableBins1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return HEPVis_SWIG_Python.p1d2plot_isValid(self)

    def getName(self):
        return HEPVis_SWIG_Python.p1d2plot_getName(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.p1d2plot_getLegend(self)

    def cast(self, aClass):
        return HEPVis_SWIG_Python.p1d2plot_cast(self, aClass)

    def getDimension(self):
        return HEPVis_SWIG_Python.p1d2plot_getDimension(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.p1d2plot_getLabel(self)

    def getBinsSumOfWeightsRange(self, aMin, aMax):
        return HEPVis_SWIG_Python.p1d2plot_getBinsSumOfWeightsRange(self, aMin, aMax)

    def getAxisNumberOfBins(self):
        return HEPVis_SWIG_Python.p1d2plot_getAxisNumberOfBins(self)

    def getAxisMinimum(self):
        return HEPVis_SWIG_Python.p1d2plot_getAxisMinimum(self)

    def getAxisMaximum(self):
        return HEPVis_SWIG_Python.p1d2plot_getAxisMaximum(self)

    def getBinLowerEdge(self, aI):
        return HEPVis_SWIG_Python.p1d2plot_getBinLowerEdge(self, aI)

    def getBinUpperEdge(self, aI):
        return HEPVis_SWIG_Python.p1d2plot_getBinUpperEdge(self, aI)

    def getBinNumberOfEntries(self, aI):
        return HEPVis_SWIG_Python.p1d2plot_getBinNumberOfEntries(self, aI)

    def getBinSumOfWeights(self, aI):
        return HEPVis_SWIG_Python.p1d2plot_getBinSumOfWeights(self, aI)

    def getBinBar(self, aI):
        return HEPVis_SWIG_Python.p1d2plot_getBinBar(self, aI)

    def getInfos(self, aOptions):
        return HEPVis_SWIG_Python.p1d2plot_getInfos(self, aOptions)

    def __init__(self, aName, aData):
        HEPVis_SWIG_Python.p1d2plot_swiginit(self, HEPVis_SWIG_Python.new_p1d2plot(aName, aData))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p1d2plot

# Register p1d2plot in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.p1d2plot_swigregister(p1d2plot)

class p2d2plot(SbPlottableBins2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return HEPVis_SWIG_Python.p2d2plot_isValid(self)

    def getName(self):
        return HEPVis_SWIG_Python.p2d2plot_getName(self)

    def getLegend(self):
        return HEPVis_SWIG_Python.p2d2plot_getLegend(self)

    def cast(self, aClass):
        return HEPVis_SWIG_Python.p2d2plot_cast(self, aClass)

    def getDimension(self):
        return HEPVis_SWIG_Python.p2d2plot_getDimension(self)

    def getLabel(self):
        return HEPVis_SWIG_Python.p2d2plot_getLabel(self)

    def getBinsSumOfWeightsRange(self, aMin, aMax):
        return HEPVis_SWIG_Python.p2d2plot_getBinsSumOfWeightsRange(self, aMin, aMax)

    def getAxisNumberOfBinsX(self):
        return HEPVis_SWIG_Python.p2d2plot_getAxisNumberOfBinsX(self)

    def getAxisNumberOfBinsY(self):
        return HEPVis_SWIG_Python.p2d2plot_getAxisNumberOfBinsY(self)

    def getAxisMinimumX(self):
        return HEPVis_SWIG_Python.p2d2plot_getAxisMinimumX(self)

    def getAxisMaximumX(self):
        return HEPVis_SWIG_Python.p2d2plot_getAxisMaximumX(self)

    def getAxisMinimumY(self):
        return HEPVis_SWIG_Python.p2d2plot_getAxisMinimumY(self)

    def getAxisMaximumY(self):
        return HEPVis_SWIG_Python.p2d2plot_getAxisMaximumY(self)

    def getBinLowerEdgeX(self, aI):
        return HEPVis_SWIG_Python.p2d2plot_getBinLowerEdgeX(self, aI)

    def getBinUpperEdgeX(self, aI):
        return HEPVis_SWIG_Python.p2d2plot_getBinUpperEdgeX(self, aI)

    def getBinLowerEdgeY(self, aI):
        return HEPVis_SWIG_Python.p2d2plot_getBinLowerEdgeY(self, aI)

    def getBinUpperEdgeY(self, aI):
        return HEPVis_SWIG_Python.p2d2plot_getBinUpperEdgeY(self, aI)

    def getBinNumberOfEntries(self, aI, aJ):
        return HEPVis_SWIG_Python.p2d2plot_getBinNumberOfEntries(self, aI, aJ)

    def getBinSumOfWeights(self, aI, aJ):
        return HEPVis_SWIG_Python.p2d2plot_getBinSumOfWeights(self, aI, aJ)

    def getBinBar(self, aI, aJ):
        return HEPVis_SWIG_Python.p2d2plot_getBinBar(self, aI, aJ)

    def getInfos(self, aOptions):
        return HEPVis_SWIG_Python.p2d2plot_getInfos(self, aOptions)

    def __init__(self, aName, aData):
        HEPVis_SWIG_Python.p2d2plot_swiginit(self, HEPVis_SWIG_Python.new_p2d2plot(aName, aData))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p2d2plot

# Register p2d2plot in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.p2d2plot_swigregister(p2d2plot)

class h1d2plot_cp(h1d2plot):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a_name, a_data):
        HEPVis_SWIG_Python.h1d2plot_cp_swiginit(self, HEPVis_SWIG_Python.new_h1d2plot_cp(a_name, a_data))
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1d2plot_cp

# Register h1d2plot_cp in HEPVis_SWIG_Python:
HEPVis_SWIG_Python.h1d2plot_cp_swigregister(h1d2plot_cp)


def cast_SoRegion(aNode):
    return HEPVis_SWIG_Python.cast_SoRegion(aNode)

def cast_SoPage(aNode):
    return HEPVis_SWIG_Python.cast_SoPage(aNode)

import CoinPython as Inventor
for x in locals().values():
  if isinstance(x, type) and issubclass(x, Inventor.SoFieldContainer):
    for name, thing in x.__dict__.items():
      if isinstance(thing, property):
        delattr(x, name)



