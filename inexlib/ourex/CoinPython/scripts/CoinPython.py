# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import Coin_SWIG_Python
else:
    import Coin_SWIG_Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import Coin_SWIG_Python as _coin

class charp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.charp_swiginit(self, Coin_SWIG_Python.new_charp())
    __swig_destroy__ = Coin_SWIG_Python.delete_charp

    def assign(self, value):
        return Coin_SWIG_Python.charp_assign(self, value)

    def value(self):
        return Coin_SWIG_Python.charp_value(self)

    def cast(self):
        return Coin_SWIG_Python.charp_cast(self)

    @staticmethod
    def frompointer(t):
        return Coin_SWIG_Python.charp_frompointer(t)

# Register charp in Coin_SWIG_Python:
Coin_SWIG_Python.charp_swigregister(charp)
cast = Coin_SWIG_Python.cast

def charp_frompointer(t):
    return Coin_SWIG_Python.charp_frompointer(t)

class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.intp_swiginit(self, Coin_SWIG_Python.new_intp())
    __swig_destroy__ = Coin_SWIG_Python.delete_intp

    def assign(self, value):
        return Coin_SWIG_Python.intp_assign(self, value)

    def value(self):
        return Coin_SWIG_Python.intp_value(self)

    def cast(self):
        return Coin_SWIG_Python.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return Coin_SWIG_Python.intp_frompointer(t)

# Register intp in Coin_SWIG_Python:
Coin_SWIG_Python.intp_swigregister(intp)

def intp_frompointer(t):
    return Coin_SWIG_Python.intp_frompointer(t)

class longp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.longp_swiginit(self, Coin_SWIG_Python.new_longp())
    __swig_destroy__ = Coin_SWIG_Python.delete_longp

    def assign(self, value):
        return Coin_SWIG_Python.longp_assign(self, value)

    def value(self):
        return Coin_SWIG_Python.longp_value(self)

    def cast(self):
        return Coin_SWIG_Python.longp_cast(self)

    @staticmethod
    def frompointer(t):
        return Coin_SWIG_Python.longp_frompointer(t)

# Register longp in Coin_SWIG_Python:
Coin_SWIG_Python.longp_swigregister(longp)

def longp_frompointer(t):
    return Coin_SWIG_Python.longp_frompointer(t)

class floatp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.floatp_swiginit(self, Coin_SWIG_Python.new_floatp())
    __swig_destroy__ = Coin_SWIG_Python.delete_floatp

    def assign(self, value):
        return Coin_SWIG_Python.floatp_assign(self, value)

    def value(self):
        return Coin_SWIG_Python.floatp_value(self)

    def cast(self):
        return Coin_SWIG_Python.floatp_cast(self)

    @staticmethod
    def frompointer(t):
        return Coin_SWIG_Python.floatp_frompointer(t)

# Register floatp in Coin_SWIG_Python:
Coin_SWIG_Python.floatp_swigregister(floatp)

def floatp_frompointer(t):
    return Coin_SWIG_Python.floatp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.doublep_swiginit(self, Coin_SWIG_Python.new_doublep())
    __swig_destroy__ = Coin_SWIG_Python.delete_doublep

    def assign(self, value):
        return Coin_SWIG_Python.doublep_assign(self, value)

    def value(self):
        return Coin_SWIG_Python.doublep_value(self)

    def cast(self):
        return Coin_SWIG_Python.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return Coin_SWIG_Python.doublep_frompointer(t)

# Register doublep in Coin_SWIG_Python:
Coin_SWIG_Python.doublep_swigregister(doublep)

def doublep_frompointer(t):
    return Coin_SWIG_Python.doublep_frompointer(t)

FALSE = Coin_SWIG_Python.FALSE
TRUE = Coin_SWIG_Python.TRUE
HAVE_INTTYPES_H = Coin_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = Coin_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = Coin_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = Coin_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = Coin_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = Coin_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = Coin_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = Coin_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = Coin_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = Coin_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = Coin_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = Coin_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = Coin_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = Coin_SWIG_Python.HAVE_UINTPTR_T
M_E = Coin_SWIG_Python.M_E
M_LOG2E = Coin_SWIG_Python.M_LOG2E
M_LOG10E = Coin_SWIG_Python.M_LOG10E
M_LN2 = Coin_SWIG_Python.M_LN2
M_LN10 = Coin_SWIG_Python.M_LN10
M_PI = Coin_SWIG_Python.M_PI
M_TWOPI = Coin_SWIG_Python.M_TWOPI
M_PI_2 = Coin_SWIG_Python.M_PI_2
M_PI_4 = Coin_SWIG_Python.M_PI_4
M_3PI_4 = Coin_SWIG_Python.M_3PI_4
M_SQRTPI = Coin_SWIG_Python.M_SQRTPI
M_1_PI = Coin_SWIG_Python.M_1_PI
M_2_PI = Coin_SWIG_Python.M_2_PI
M_2_SQRTPI = Coin_SWIG_Python.M_2_SQRTPI
M_SQRT2 = Coin_SWIG_Python.M_SQRT2
M_SQRT1_2 = Coin_SWIG_Python.M_SQRT1_2
M_LN2LO = Coin_SWIG_Python.M_LN2LO
M_LN2HI = Coin_SWIG_Python.M_LN2HI
M_SQRT3 = Coin_SWIG_Python.M_SQRT3
M_IVLN10 = Coin_SWIG_Python.M_IVLN10
M_LOG2_E = Coin_SWIG_Python.M_LOG2_E
M_INVLN2 = Coin_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = Coin_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = Coin_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = Coin_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = Coin_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = Coin_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = Coin_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbDict_swiginit(self, Coin_SWIG_Python.new_SbDict(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDict

    def applyToAll(self, *args):
        return Coin_SWIG_Python.SbDict_applyToAll(self, *args)

    def clear(self):
        return Coin_SWIG_Python.SbDict_clear(self)

    def enter(self, key, value):
        return Coin_SWIG_Python.SbDict_enter(self, key, value)

    def find(self, key, value):
        return Coin_SWIG_Python.SbDict_find(self, key, value)

    def makePList(self, keys, values):
        return Coin_SWIG_Python.SbDict_makePList(self, keys, values)

    def remove(self, key):
        return Coin_SWIG_Python.SbDict_remove(self, key)

    def setHashingFunction(self, func):
        return Coin_SWIG_Python.SbDict_setHashingFunction(self, func)

# Register SbDict in Coin_SWIG_Python:
Coin_SWIG_Python.SbDict_swigregister(SbDict)

class SoType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromName(name):
        return Coin_SWIG_Python.SoType_fromName(name)

    def getName(self):
        return Coin_SWIG_Python.SoType_getName(self)

    def getParent(self):
        return Coin_SWIG_Python.SoType_getParent(self)

    def isDerivedFrom(self, type):
        return Coin_SWIG_Python.SoType_isDerivedFrom(self, type)

    @staticmethod
    def getAllDerivedFrom(type, list):
        return Coin_SWIG_Python.SoType_getAllDerivedFrom(type, list)

    def canCreateInstance(self):
        return Coin_SWIG_Python.SoType_canCreateInstance(self)

    def getData(self):
        return Coin_SWIG_Python.SoType_getData(self)

    def getKey(self):
        return Coin_SWIG_Python.SoType_getKey(self)

    def __eq__(self, type):
        return Coin_SWIG_Python.SoType___eq__(self, type)

    def __ne__(self, type):
        return Coin_SWIG_Python.SoType___ne__(self, type)

    def __lt__(self, type):
        return Coin_SWIG_Python.SoType___lt__(self, type)

    def __le__(self, type):
        return Coin_SWIG_Python.SoType___le__(self, type)

    def __ge__(self, type):
        return Coin_SWIG_Python.SoType___ge__(self, type)

    def __gt__(self, type):
        return Coin_SWIG_Python.SoType___gt__(self, type)

    @staticmethod
    def init():
        return Coin_SWIG_Python.SoType_init()

    @staticmethod
    def fromKey(key):
        return Coin_SWIG_Python.SoType_fromKey(key)

    @staticmethod
    def badType():
        return Coin_SWIG_Python.SoType_badType()

    def isBad(self):
        return Coin_SWIG_Python.SoType_isBad(self)

    def makeInternal(self):
        return Coin_SWIG_Python.SoType_makeInternal(self)

    def isInternal(self):
        return Coin_SWIG_Python.SoType_isInternal(self)

    @staticmethod
    def getNumTypes():
        return Coin_SWIG_Python.SoType_getNumTypes()

    def getInstantiationMethod(self):
        return Coin_SWIG_Python.SoType_getInstantiationMethod(self)

    def createInstance(self):
        return Coin_SWIG_Python.SoType_createInstance(self)

    def __init__(self):
        Coin_SWIG_Python.SoType_swiginit(self, Coin_SWIG_Python.new_SoType())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoType

# Register SoType in Coin_SWIG_Python:
Coin_SWIG_Python.SoType_swigregister(SoType)

def SoType_fromName(name):
    return Coin_SWIG_Python.SoType_fromName(name)

def SoType_getAllDerivedFrom(type, list):
    return Coin_SWIG_Python.SoType_getAllDerivedFrom(type, list)

def SoType_init():
    return Coin_SWIG_Python.SoType_init()

def SoType_fromKey(key):
    return Coin_SWIG_Python.SoType_fromKey(key)

def SoType_badType():
    return Coin_SWIG_Python.SoType_badType()

def SoType_getNumTypes():
    return Coin_SWIG_Python.SoType_getNumTypes()

class SbVec2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec2s_swiginit(self, Coin_SWIG_Python.new_SbVec2s(*args))

    def dot(self, v):
        return Coin_SWIG_Python.SbVec2s_dot(self, v)

    def getValue(self):
        return Coin_SWIG_Python.SbVec2s_getValue(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec2s_negate(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec2s_setValue(self, *args)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec2s___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec2s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec2s___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec2s___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec2s___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec2s_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec2s___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec2s___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec2s___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec2s___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec2s___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec2s___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec2s___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec2s___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec2s___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2s

# Register SbVec2s in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbPList_swiginit(self, Coin_SWIG_Python.new_SbPList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbPList

    def copy(self, l):
        return Coin_SWIG_Python.SbPList_copy(self, l)

    def fit(self):
        return Coin_SWIG_Python.SbPList_fit(self)

    def append(self, item):
        return Coin_SWIG_Python.SbPList_append(self, item)

    def find(self, item):
        return Coin_SWIG_Python.SbPList_find(self, item)

    def insert(self, item, insertbefore):
        return Coin_SWIG_Python.SbPList_insert(self, item, insertbefore)

    def removeItem(self, item):
        return Coin_SWIG_Python.SbPList_removeItem(self, item)

    def remove(self, index):
        return Coin_SWIG_Python.SbPList_remove(self, index)

    def removeFast(self, index):
        return Coin_SWIG_Python.SbPList_removeFast(self, index)

    def getLength(self):
        return Coin_SWIG_Python.SbPList_getLength(self)

    def truncate(self, length, fit=0):
        return Coin_SWIG_Python.SbPList_truncate(self, length, fit)

    def getArrayPtr(self, start=0):
        return Coin_SWIG_Python.SbPList_getArrayPtr(self, start)

    def __eq__(self, l):
        return Coin_SWIG_Python.SbPList___eq__(self, l)

    def __ne__(self, l):
        return Coin_SWIG_Python.SbPList___ne__(self, l)

    def get(self, index):
        return Coin_SWIG_Python.SbPList_get(self, index)

    def set(self, index, item):
        return Coin_SWIG_Python.SbPList_set(self, index, item)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbPList___getitem__(self, i)

    def __setitem__(self, i, val):
        return Coin_SWIG_Python.SbPList___setitem__(self, i, val)

    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]


# Register SbPList in Coin_SWIG_Python:
Coin_SWIG_Python.SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbIntList_swiginit(self, Coin_SWIG_Python.new_SbIntList(*args))

    def append(self, item):
        return Coin_SWIG_Python.SbIntList_append(self, item)

    def find(self, item):
        return Coin_SWIG_Python.SbIntList_find(self, item)

    def insert(self, item, addbefore):
        return Coin_SWIG_Python.SbIntList_insert(self, item, addbefore)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbIntList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbIntList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SbIntList_get(self, i)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbIntList

# Register SbIntList in Coin_SWIG_Python:
Coin_SWIG_Python.SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        Coin_SWIG_Python.SbString_swiginit(self, Coin_SWIG_Python.new_SbString(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbString

    @staticmethod
    def hash(*args):
        return Coin_SWIG_Python.SbString_hash(*args)

    def getLength(self):
        return Coin_SWIG_Python.SbString_getLength(self)

    def makeEmpty(self, freeold=1):
        return Coin_SWIG_Python.SbString_makeEmpty(self, freeold)

    def getString(self):
        return Coin_SWIG_Python.SbString_getString(self)

    def getSubString(self, startidx, endidx=-1):
        return Coin_SWIG_Python.SbString_getSubString(self, startidx, endidx)

    def deleteSubString(self, startidx, endidx=-1):
        return Coin_SWIG_Python.SbString_deleteSubString(self, startidx, endidx)

    def addIntString(self, value):
        return Coin_SWIG_Python.SbString_addIntString(self, value)

    def __iadd__(self, *args):
        return Coin_SWIG_Python.SbString___iadd__(self, *args)

    def compareSubString(self, text, offset=0):
        return Coin_SWIG_Python.SbString_compareSubString(self, text, offset)

    def sprintf(self, formatstr):
        return Coin_SWIG_Python.SbString_sprintf(self, formatstr)

    def apply(self, func):
        return Coin_SWIG_Python.SbString_apply(self, func)

    def find(self, s):
        return Coin_SWIG_Python.SbString_find(self, s)

    def findAll(self, s, found):
        return Coin_SWIG_Python.SbString_findAll(self, s, found)

    def __eq__(self, *args):
        return Coin_SWIG_Python.SbString___eq__(self, *args)

    def __nq__(self, *args):
        return Coin_SWIG_Python.SbString___nq__(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbString___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return Coin_SWIG_Python.SbString___repr__(self)

# Register SbString in Coin_SWIG_Python:
Coin_SWIG_Python.SbString_swigregister(SbString)

def SbString_hash(*args):
    return Coin_SWIG_Python.SbString_hash(*args)

class SbName(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        Coin_SWIG_Python.SbName_swiginit(self, Coin_SWIG_Python.new_SbName(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbName

    def getString(self):
        return Coin_SWIG_Python.SbName_getString(self)

    def getLength(self):
        return Coin_SWIG_Python.SbName_getLength(self)

    @staticmethod
    def isIdentStartChar(c):
        return Coin_SWIG_Python.SbName_isIdentStartChar(c)

    @staticmethod
    def isIdentChar(c):
        return Coin_SWIG_Python.SbName_isIdentChar(c)

    @staticmethod
    def isBaseNameStartChar(c):
        return Coin_SWIG_Python.SbName_isBaseNameStartChar(c)

    @staticmethod
    def isBaseNameChar(c):
        return Coin_SWIG_Python.SbName_isBaseNameChar(c)

    def __eq__(self, *args):
        return Coin_SWIG_Python.SbName___eq__(self, *args)

    def __nq__(self, *args):
        return Coin_SWIG_Python.SbName___nq__(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbName___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return Coin_SWIG_Python.SbName___repr__(self)

# Register SbName in Coin_SWIG_Python:
Coin_SWIG_Python.SbName_swigregister(SbName)

def SbName_isIdentStartChar(c):
    return Coin_SWIG_Python.SbName_isIdentStartChar(c)

def SbName_isIdentChar(c):
    return Coin_SWIG_Python.SbName_isIdentChar(c)

def SbName_isBaseNameStartChar(c):
    return Coin_SWIG_Python.SbName_isBaseNameStartChar(c)

def SbName_isBaseNameChar(c):
    return Coin_SWIG_Python.SbName_isBaseNameChar(c)

class SbTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbTime_swiginit(self, Coin_SWIG_Python.new_SbTime(*args))

    @staticmethod
    def getTimeOfDay():
        return Coin_SWIG_Python.SbTime_getTimeOfDay()

    def setToTimeOfDay(self):
        return Coin_SWIG_Python.SbTime_setToTimeOfDay(self)

    @staticmethod
    def zero():
        return Coin_SWIG_Python.SbTime_zero()

    @staticmethod
    def max():
        return Coin_SWIG_Python.SbTime_max()

    @staticmethod
    def maxTime():
        return Coin_SWIG_Python.SbTime_maxTime()

    def setValue(self, *args):
        return Coin_SWIG_Python.SbTime_setValue(self, *args)

    def setMsecValue(self, msec):
        return Coin_SWIG_Python.SbTime_setMsecValue(self, msec)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbTime_getValue(self, *args)

    def getMsecValue(self):
        return Coin_SWIG_Python.SbTime_getMsecValue(self)

    def format(self, *args):
        return Coin_SWIG_Python.SbTime_format(self, *args)

    def formatDate(self, fmt=None):
        return Coin_SWIG_Python.SbTime_formatDate(self, fmt)

    def parsedate(self, date):
        return Coin_SWIG_Python.SbTime_parsedate(self, date)

    def __iadd__(self, tm):
        return Coin_SWIG_Python.SbTime___iadd__(self, tm)

    def __isub__(self, tm):
        return Coin_SWIG_Python.SbTime___isub__(self, tm)

    def __neg__(self):
        return Coin_SWIG_Python.SbTime___neg__(self)

    def __imul__(self, s):
        return Coin_SWIG_Python.SbTime___imul__(self, s)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbTime___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return Coin_SWIG_Python.SbTime___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, tm):
        return Coin_SWIG_Python.SbTime___mod__(self, tm)

    def __eq__(self, tm):
        return Coin_SWIG_Python.SbTime___eq__(self, tm)

    def __ne__(self, tm):
        return Coin_SWIG_Python.SbTime___ne__(self, tm)

    def __lt__(self, tm):
        return Coin_SWIG_Python.SbTime___lt__(self, tm)

    def __gt__(self, tm):
        return Coin_SWIG_Python.SbTime___gt__(self, tm)

    def __le__(self, tm):
        return Coin_SWIG_Python.SbTime___le__(self, tm)

    def __ge__(self, tm):
        return Coin_SWIG_Python.SbTime___ge__(self, tm)

    def output(self, fp):
        return Coin_SWIG_Python.SbTime_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbTime___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbTime___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbTime___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbTime___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbTime___div__(self, d)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbTime

# Register SbTime in Coin_SWIG_Python:
Coin_SWIG_Python.SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay():
    return Coin_SWIG_Python.SbTime_getTimeOfDay()

def SbTime_zero():
    return Coin_SWIG_Python.SbTime_zero()

def SbTime_max():
    return Coin_SWIG_Python.SbTime_max()

def SbTime_maxTime():
    return Coin_SWIG_Python.SbTime_maxTime()

class SoEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoEvent_swiginit(self, Coin_SWIG_Python.new_SoEvent())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEvent

    def isOfType(self, type):
        return Coin_SWIG_Python.SoEvent_isOfType(self, type)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoEvent_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoEvent_getTypeId(self)

    def setTime(self, t):
        return Coin_SWIG_Python.SoEvent_setTime(self, t)

    def getTime(self):
        return Coin_SWIG_Python.SoEvent_getTime(self)

    def setPosition(self, p):
        return Coin_SWIG_Python.SoEvent_setPosition(self, p)

    def getPosition(self, *args):
        return Coin_SWIG_Python.SoEvent_getPosition(self, *args)

    def getNormalizedPosition(self, vpRgn):
        return Coin_SWIG_Python.SoEvent_getNormalizedPosition(self, vpRgn)

    def setShiftDown(self, isDown):
        return Coin_SWIG_Python.SoEvent_setShiftDown(self, isDown)

    def wasShiftDown(self):
        return Coin_SWIG_Python.SoEvent_wasShiftDown(self)

    def setCtrlDown(self, isDown):
        return Coin_SWIG_Python.SoEvent_setCtrlDown(self, isDown)

    def wasCtrlDown(self):
        return Coin_SWIG_Python.SoEvent_wasCtrlDown(self)

    def setAltDown(self, isDown):
        return Coin_SWIG_Python.SoEvent_setAltDown(self, isDown)

    def wasAltDown(self):
        return Coin_SWIG_Python.SoEvent_wasAltDown(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoEvent_initClass()

# Register SoEvent in Coin_SWIG_Python:
Coin_SWIG_Python.SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId():
    return Coin_SWIG_Python.SoEvent_getClassTypeId()

def SoEvent_initClass():
    return Coin_SWIG_Python.SoEvent_initClass()

class SoNotRec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONTAINER = Coin_SWIG_Python.SoNotRec_CONTAINER
    PARENT = Coin_SWIG_Python.SoNotRec_PARENT
    SENSOR = Coin_SWIG_Python.SoNotRec_SENSOR
    FIELD = Coin_SWIG_Python.SoNotRec_FIELD
    ENGINE = Coin_SWIG_Python.SoNotRec_ENGINE

    def __init__(self, notifbase):
        Coin_SWIG_Python.SoNotRec_swiginit(self, Coin_SWIG_Python.new_SoNotRec(notifbase))

    def setType(self, type):
        return Coin_SWIG_Python.SoNotRec_setType(self, type)

    def getBase(self):
        return Coin_SWIG_Python.SoNotRec_getBase(self)

    def getType(self):
        return Coin_SWIG_Python.SoNotRec_getType(self)

    def getPrevious(self):
        return Coin_SWIG_Python.SoNotRec_getPrevious(self)

    def setPrevious(self, prev):
        return Coin_SWIG_Python.SoNotRec_setPrevious(self, prev)

    def output(self, file):
        return Coin_SWIG_Python.SoNotRec_output(self, file)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNotRec

# Register SoNotRec in Coin_SWIG_Python:
Coin_SWIG_Python.SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoNotList_swiginit(self, Coin_SWIG_Python.new_SoNotList(*args))

    def append(self, *args):
        return Coin_SWIG_Python.SoNotList_append(self, *args)

    def setLastType(self, type):
        return Coin_SWIG_Python.SoNotList_setLastType(self, type)

    def getFirstRec(self):
        return Coin_SWIG_Python.SoNotList_getFirstRec(self)

    def getLastRec(self):
        return Coin_SWIG_Python.SoNotList_getLastRec(self)

    def getFirstRecAtNode(self):
        return Coin_SWIG_Python.SoNotList_getFirstRecAtNode(self)

    def getLastField(self):
        return Coin_SWIG_Python.SoNotList_getLastField(self)

    def getLastEngineOutput(self):
        return Coin_SWIG_Python.SoNotList_getLastEngineOutput(self)

    def getTimeStamp(self):
        return Coin_SWIG_Python.SoNotList_getTimeStamp(self)

    def output(self, *args):
        return Coin_SWIG_Python.SoNotList_output(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNotList

# Register SoNotList in Coin_SWIG_Python:
Coin_SWIG_Python.SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoField

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoField_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoField_initClasses()

    def setIgnored(self, ignore):
        return Coin_SWIG_Python.SoField_setIgnored(self, ignore)

    def isIgnored(self):
        return Coin_SWIG_Python.SoField_isIgnored(self)

    def setDefault(self, _def):
        return Coin_SWIG_Python.SoField_setDefault(self, _def)

    def isDefault(self):
        return Coin_SWIG_Python.SoField_isDefault(self)

    def getTypeId(self):
        return Coin_SWIG_Python.SoField_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoField_getClassTypeId()

    def isOfType(self, type):
        return Coin_SWIG_Python.SoField_isOfType(self, type)

    def enableConnection(self, flag):
        return Coin_SWIG_Python.SoField_enableConnection(self, flag)

    def isConnectionEnabled(self):
        return Coin_SWIG_Python.SoField_isConnectionEnabled(self)

    def isConnectedFromEngine(self):
        return Coin_SWIG_Python.SoField_isConnectedFromEngine(self)

    def getConnectedEngine(self, master):
        return Coin_SWIG_Python.SoField_getConnectedEngine(self, master)

    def connectFrom(self, *args):
        return Coin_SWIG_Python.SoField_connectFrom(self, *args)

    def appendConnection(self, *args):
        return Coin_SWIG_Python.SoField_appendConnection(self, *args)

    def isConnectedFromField(self):
        return Coin_SWIG_Python.SoField_isConnectedFromField(self)

    def getConnectedField(self, master):
        return Coin_SWIG_Python.SoField_getConnectedField(self, master)

    def getNumConnections(self):
        return Coin_SWIG_Python.SoField_getNumConnections(self)

    def getForwardConnections(self, slavelist):
        return Coin_SWIG_Python.SoField_getForwardConnections(self, slavelist)

    def getConnections(self, masterlist):
        return Coin_SWIG_Python.SoField_getConnections(self, masterlist)

    def disconnect(self, *args):
        return Coin_SWIG_Python.SoField_disconnect(self, *args)

    def isConnected(self):
        return Coin_SWIG_Python.SoField_isConnected(self)

    def setContainer(self, cont):
        return Coin_SWIG_Python.SoField_setContainer(self, cont)

    def getContainer(self):
        return Coin_SWIG_Python.SoField_getContainer(self)

    def set(self, valuestring):
        return Coin_SWIG_Python.SoField_set(self, valuestring)

    def shouldWrite(self):
        return Coin_SWIG_Python.SoField_shouldWrite(self)

    def touch(self):
        return Coin_SWIG_Python.SoField_touch(self)

    def startNotify(self):
        return Coin_SWIG_Python.SoField_startNotify(self)

    def notify(self, nlist):
        return Coin_SWIG_Python.SoField_notify(self, nlist)

    def enableNotify(self, on):
        return Coin_SWIG_Python.SoField_enableNotify(self, on)

    def isNotifyEnabled(self):
        return Coin_SWIG_Python.SoField_isNotifyEnabled(self)

    def addAuditor(self, f, type):
        return Coin_SWIG_Python.SoField_addAuditor(self, f, type)

    def removeAuditor(self, f, type):
        return Coin_SWIG_Python.SoField_removeAuditor(self, f, type)

    def __eq__(self, f):
        return Coin_SWIG_Python.SoField___eq__(self, f)

    def __ne__(self, f):
        return Coin_SWIG_Python.SoField___ne__(self, f)

    def connectionStatusChanged(self, numconnections):
        return Coin_SWIG_Python.SoField_connectionStatusChanged(self, numconnections)

    def isReadOnly(self):
        return Coin_SWIG_Python.SoField_isReadOnly(self)

    def isSame(self, f):
        return Coin_SWIG_Python.SoField_isSame(self, f)

    def copyFrom(self, f):
        return Coin_SWIG_Python.SoField_copyFrom(self, f)

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoField_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoField_referencesCopy(self)

    def copyConnection(self, fromfield):
        return Coin_SWIG_Python.SoField_copyConnection(self, fromfield)

    def read(self, _in, name):
        return Coin_SWIG_Python.SoField_read(self, _in, name)

    def write(self, out, name):
        return Coin_SWIG_Python.SoField_write(self, out, name)

    def countWriteRefs(self, out):
        return Coin_SWIG_Python.SoField_countWriteRefs(self, out)
    NORMAL_FIELD = Coin_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = Coin_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = Coin_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = Coin_SWIG_Python.SoField_EXPOSED_FIELD

    def setFieldType(self, type):
        return Coin_SWIG_Python.SoField_setFieldType(self, type)

    def getFieldType(self):
        return Coin_SWIG_Python.SoField_getFieldType(self)

    def getDirty(self):
        return Coin_SWIG_Python.SoField_getDirty(self)

    def setDirty(self, dirty):
        return Coin_SWIG_Python.SoField_setDirty(self, dirty)

    def evaluate(self):
        return Coin_SWIG_Python.SoField_evaluate(self)

    def get(self):
        return Coin_SWIG_Python.SoField_get(self)

# Register SoField in Coin_SWIG_Python:
Coin_SWIG_Python.SoField_swigregister(SoField)

def SoField_initClass():
    return Coin_SWIG_Python.SoField_initClass()

def SoField_initClasses():
    return Coin_SWIG_Python.SoField_initClasses()

def SoField_getClassTypeId():
    return Coin_SWIG_Python.SoField_getClassTypeId()

class SoSField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSField

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSField_initClass()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSField_getClassTypeId()

# Register SoSField in Coin_SWIG_Python:
Coin_SWIG_Python.SoSField_swigregister(SoSField)

def SoSField_initClass():
    return Coin_SWIG_Python.SoSField_initClass()

def SoSField_getClassTypeId():
    return Coin_SWIG_Python.SoSField_getClassTypeId()

class SoMField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMField

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMField_getClassTypeId()

    def getNum(self):
        return Coin_SWIG_Python.SoMField_getNum(self)

    def setNum(self, num):
        return Coin_SWIG_Python.SoMField_setNum(self, num)

    def deleteValues(self, start, num=-1):
        return Coin_SWIG_Python.SoMField_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return Coin_SWIG_Python.SoMField_insertSpace(self, start, num)

    def set1(self, index, valuestring):
        return Coin_SWIG_Python.SoMField_set1(self, index, valuestring)

    def get1(self, index, valuestring):
        return Coin_SWIG_Python.SoMField_get1(self, index, valuestring)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMField_initClass()

    def enableDeleteValues(self):
        return Coin_SWIG_Python.SoMField_enableDeleteValues(self)

    def isDeleteValuesEnabled(self):
        return Coin_SWIG_Python.SoMField_isDeleteValuesEnabled(self)

    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1


    def __len__(self):
        return Coin_SWIG_Python.SoMField___len__(self)

# Register SoMField in Coin_SWIG_Python:
Coin_SWIG_Python.SoMField_swigregister(SoMField)

def SoMField_getClassTypeId():
    return Coin_SWIG_Python.SoMField_getClassTypeId()

def SoMField_initClass():
    return Coin_SWIG_Python.SoMField_initClass()

class SoAuditorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoAuditorList_swiginit(self, Coin_SWIG_Python.new_SoAuditorList())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAuditorList

    def append(self, auditor, type):
        return Coin_SWIG_Python.SoAuditorList_append(self, auditor, type)

    def set(self, index, auditor, type):
        return Coin_SWIG_Python.SoAuditorList_set(self, index, auditor, type)

    def getObject(self, index):
        return Coin_SWIG_Python.SoAuditorList_getObject(self, index)

    def getType(self, index):
        return Coin_SWIG_Python.SoAuditorList_getType(self, index)

    def getLength(self):
        return Coin_SWIG_Python.SoAuditorList_getLength(self)

    def find(self, auditor, type):
        return Coin_SWIG_Python.SoAuditorList_find(self, auditor, type)

    def remove(self, *args):
        return Coin_SWIG_Python.SoAuditorList_remove(self, *args)

    def notify(self, l):
        return Coin_SWIG_Python.SoAuditorList_notify(self, l)

# Register SoAuditorList in Coin_SWIG_Python:
Coin_SWIG_Python.SoAuditorList_swigregister(SoAuditorList)

class SoBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBase_initClass()

    def ref(self):
        return Coin_SWIG_Python.SoBase_ref(self)

    def unref(self):
        return Coin_SWIG_Python.SoBase_unref(self)

    def unrefNoDelete(self):
        return Coin_SWIG_Python.SoBase_unrefNoDelete(self)

    def getRefCount(self):
        return Coin_SWIG_Python.SoBase_getRefCount(self)

    def touch(self):
        return Coin_SWIG_Python.SoBase_touch(self)

    def getTypeId(self):
        return Coin_SWIG_Python.SoBase_getTypeId(self)

    def isOfType(self, type):
        return Coin_SWIG_Python.SoBase_isOfType(self, type)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBase_getClassTypeId()

    def getName(self):
        return Coin_SWIG_Python.SoBase_getName(self)

    def setName(self, newname):
        return Coin_SWIG_Python.SoBase_setName(self, newname)

    @staticmethod
    def addName(base, name):
        return Coin_SWIG_Python.SoBase_addName(base, name)

    @staticmethod
    def removeName(base, name):
        return Coin_SWIG_Python.SoBase_removeName(base, name)

    def startNotify(self):
        return Coin_SWIG_Python.SoBase_startNotify(self)

    def notify(self, l):
        return Coin_SWIG_Python.SoBase_notify(self, l)

    def addAuditor(self, auditor, type):
        return Coin_SWIG_Python.SoBase_addAuditor(self, auditor, type)

    def removeAuditor(self, auditor, type):
        return Coin_SWIG_Python.SoBase_removeAuditor(self, auditor, type)

    def getAuditors(self):
        return Coin_SWIG_Python.SoBase_getAuditors(self)

    def addWriteReference(self, out, isfromfield=0):
        return Coin_SWIG_Python.SoBase_addWriteReference(self, out, isfromfield)

    def shouldWrite(self):
        return Coin_SWIG_Python.SoBase_shouldWrite(self)

    @staticmethod
    def incrementCurrentWriteCounter():
        return Coin_SWIG_Python.SoBase_incrementCurrentWriteCounter()

    @staticmethod
    def decrementCurrentWriteCounter():
        return Coin_SWIG_Python.SoBase_decrementCurrentWriteCounter()

    @staticmethod
    def getNamedBase(name, type):
        return Coin_SWIG_Python.SoBase_getNamedBase(name, type)

    @staticmethod
    def getNamedBases(name, baselist, type):
        return Coin_SWIG_Python.SoBase_getNamedBases(name, baselist, type)

    @staticmethod
    def read(_in, base, expectedtype):
        return Coin_SWIG_Python.SoBase_read(_in, base, expectedtype)

    @staticmethod
    def setInstancePrefix(c):
        return Coin_SWIG_Python.SoBase_setInstancePrefix(c)

    @staticmethod
    def setTraceRefs(trace):
        return Coin_SWIG_Python.SoBase_setTraceRefs(trace)

    @staticmethod
    def getTraceRefs():
        return Coin_SWIG_Python.SoBase_getTraceRefs()

    @staticmethod
    def connectRoute(_in, fromnodename, fromfieldname, tonodename, tofieldname):
        return Coin_SWIG_Python.SoBase_connectRoute(_in, fromnodename, fromfieldname, tonodename, tofieldname)

    def assertAlive(self):
        return Coin_SWIG_Python.SoBase_assertAlive(self)

    @staticmethod
    def readRoute(_in):
        return Coin_SWIG_Python.SoBase_readRoute(_in)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBase

    def __eq__(self,other):
      return other and (self.this == other.this) or False
    def __ne__(self,other):
      return other and (self.this != other.this) or True


    def __getattr__(self,name):
      try: return object.__getattr__(self, name)
      except AttributeError, e: raise e


# Register SoBase in Coin_SWIG_Python:
Coin_SWIG_Python.SoBase_swigregister(SoBase)

def SoBase_initClass():
    return Coin_SWIG_Python.SoBase_initClass()

def SoBase_getClassTypeId():
    return Coin_SWIG_Python.SoBase_getClassTypeId()

def SoBase_addName(base, name):
    return Coin_SWIG_Python.SoBase_addName(base, name)

def SoBase_removeName(base, name):
    return Coin_SWIG_Python.SoBase_removeName(base, name)

def SoBase_incrementCurrentWriteCounter():
    return Coin_SWIG_Python.SoBase_incrementCurrentWriteCounter()

def SoBase_decrementCurrentWriteCounter():
    return Coin_SWIG_Python.SoBase_decrementCurrentWriteCounter()

def SoBase_getNamedBase(name, type):
    return Coin_SWIG_Python.SoBase_getNamedBase(name, type)

def SoBase_getNamedBases(name, baselist, type):
    return Coin_SWIG_Python.SoBase_getNamedBases(name, baselist, type)

def SoBase_read(_in, base, expectedtype):
    return Coin_SWIG_Python.SoBase_read(_in, base, expectedtype)

def SoBase_setInstancePrefix(c):
    return Coin_SWIG_Python.SoBase_setInstancePrefix(c)

def SoBase_setTraceRefs(trace):
    return Coin_SWIG_Python.SoBase_setTraceRefs(trace)

def SoBase_getTraceRefs():
    return Coin_SWIG_Python.SoBase_getTraceRefs()

def SoBase_connectRoute(_in, fromnodename, fromfieldname, tonodename, tofieldname):
    return Coin_SWIG_Python.SoBase_connectRoute(_in, fromnodename, fromfieldname, tonodename, tofieldname)

def SoBase_readRoute(_in):
    return Coin_SWIG_Python.SoBase_readRoute(_in)

class SoBaseList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoBaseList_swiginit(self, Coin_SWIG_Python.new_SoBaseList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBaseList

    def append(self, ptr):
        return Coin_SWIG_Python.SoBaseList_append(self, ptr)

    def insert(self, ptr, addbefore):
        return Coin_SWIG_Python.SoBaseList_insert(self, ptr, addbefore)

    def remove(self, index):
        return Coin_SWIG_Python.SoBaseList_remove(self, index)

    def removeItem(self, item):
        return Coin_SWIG_Python.SoBaseList_removeItem(self, item)

    def truncate(self, length):
        return Coin_SWIG_Python.SoBaseList_truncate(self, length)

    def copy(self, l):
        return Coin_SWIG_Python.SoBaseList_copy(self, l)

    def set(self, i, ptr):
        return Coin_SWIG_Python.SoBaseList_set(self, i, ptr)

    def addReferences(self, flag):
        return Coin_SWIG_Python.SoBaseList_addReferences(self, flag)

    def isReferencing(self):
        return Coin_SWIG_Python.SoBaseList_isReferencing(self)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoBaseList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoBaseList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoBaseList_get(self, i)

# Register SoBaseList in Coin_SWIG_Python:
Coin_SWIG_Python.SoBaseList_swigregister(SoBaseList)

class SoNodeList(SoBaseList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoNodeList_swiginit(self, Coin_SWIG_Python.new_SoNodeList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeList

    def append(self, ptr):
        return Coin_SWIG_Python.SoNodeList_append(self, ptr)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoNodeList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoNodeList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoNodeList_get(self, i)

# Register SoNodeList in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeList_swigregister(SoNodeList)

class SoDetailList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoDetailList_swiginit(self, Coin_SWIG_Python.new_SoDetailList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDetailList

    def append(self, detail):
        return Coin_SWIG_Python.SoDetailList_append(self, detail)

    def insert(self, detail, insertbefore):
        return Coin_SWIG_Python.SoDetailList_insert(self, detail, insertbefore)

    def truncate(self, length, fit=0):
        return Coin_SWIG_Python.SoDetailList_truncate(self, length, fit)

    def copy(self, l):
        return Coin_SWIG_Python.SoDetailList_copy(self, l)

    def set(self, index, item):
        return Coin_SWIG_Python.SoDetailList_set(self, index, item)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoDetailList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoDetailList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoDetailList_get(self, i)

# Register SoDetailList in Coin_SWIG_Python:
Coin_SWIG_Python.SoDetailList_swigregister(SoDetailList)

class SoTypeList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoTypeList_swiginit(self, Coin_SWIG_Python.new_SoTypeList(*args))

    def append(self, type):
        return Coin_SWIG_Python.SoTypeList_append(self, type)

    def find(self, type):
        return Coin_SWIG_Python.SoTypeList_find(self, type)

    def insert(self, type, insertbefore):
        return Coin_SWIG_Python.SoTypeList_insert(self, type, insertbefore)

    def set(self, index, item):
        return Coin_SWIG_Python.SoTypeList_set(self, index, item)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoTypeList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoTypeList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoTypeList_get(self, i)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTypeList

# Register SoTypeList in Coin_SWIG_Python:
Coin_SWIG_Python.SoTypeList_swigregister(SoTypeList)

class SoEnabledElementsList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parentlist):
        Coin_SWIG_Python.SoEnabledElementsList_swiginit(self, Coin_SWIG_Python.new_SoEnabledElementsList(parentlist))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEnabledElementsList

    def getElements(self):
        return Coin_SWIG_Python.SoEnabledElementsList_getElements(self)

    def enable(self, elementtype, stackindex):
        return Coin_SWIG_Python.SoEnabledElementsList_enable(self, elementtype, stackindex)

    def merge(self, eel):
        return Coin_SWIG_Python.SoEnabledElementsList_merge(self, eel)

    @staticmethod
    def getCounter():
        return Coin_SWIG_Python.SoEnabledElementsList_getCounter()

# Register SoEnabledElementsList in Coin_SWIG_Python:
Coin_SWIG_Python.SoEnabledElementsList_swigregister(SoEnabledElementsList)

def SoEnabledElementsList_getCounter():
    return Coin_SWIG_Python.SoEnabledElementsList_getCounter()

class SoEngineOutputList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoEngineOutputList_swiginit(self, Coin_SWIG_Python.new_SoEngineOutputList(*args))

    def append(self, output):
        return Coin_SWIG_Python.SoEngineOutputList_append(self, output)

    def insert(self, output, insertbefore):
        return Coin_SWIG_Python.SoEngineOutputList_insert(self, output, insertbefore)

    def set(self, idx, item):
        return Coin_SWIG_Python.SoEngineOutputList_set(self, idx, item)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoEngineOutputList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoEngineOutputList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoEngineOutputList_get(self, i)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineOutputList

# Register SoEngineOutputList in Coin_SWIG_Python:
Coin_SWIG_Python.SoEngineOutputList_swigregister(SoEngineOutputList)

class SoEngineList(SoBaseList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoEngineList_swiginit(self, Coin_SWIG_Python.new_SoEngineList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineList

    def append(self, ptr):
        return Coin_SWIG_Python.SoEngineList_append(self, ptr)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoEngineList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoEngineList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoEngineList_get(self, i)

# Register SoEngineList in Coin_SWIG_Python:
Coin_SWIG_Python.SoEngineList_swigregister(SoEngineList)

class SoFieldList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoFieldList_swiginit(self, Coin_SWIG_Python.new_SoFieldList(*args))

    def append(self, field):
        return Coin_SWIG_Python.SoFieldList_append(self, field)

    def insert(self, field, insertbefore):
        return Coin_SWIG_Python.SoFieldList_insert(self, field, insertbefore)

    def set(self, idx, field):
        return Coin_SWIG_Python.SoFieldList_set(self, idx, field)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoFieldList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoFieldList___getitem__(self, i)

    def get(self, *args):
        return Coin_SWIG_Python.SoFieldList_get(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldList

# Register SoFieldList in Coin_SWIG_Python:
Coin_SWIG_Python.SoFieldList_swigregister(SoFieldList)

class SoPathList(SoBaseList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoPathList_swiginit(self, Coin_SWIG_Python.new_SoPathList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPathList

    def append(self, path):
        return Coin_SWIG_Python.SoPathList_append(self, path)

    def findPath(self, path):
        return Coin_SWIG_Python.SoPathList_findPath(self, path)

    def sort(self):
        return Coin_SWIG_Python.SoPathList_sort(self)

    def uniquify(self):
        return Coin_SWIG_Python.SoPathList_uniquify(self)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoPathList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoPathList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoPathList_get(self, i)

# Register SoPathList in Coin_SWIG_Python:
Coin_SWIG_Python.SoPathList_swigregister(SoPathList)

class SoPickedPointList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoPickedPointList_swiginit(self, Coin_SWIG_Python.new_SoPickedPointList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPickedPointList

    def append(self, pp):
        return Coin_SWIG_Python.SoPickedPointList_append(self, pp)

    def insert(self, pp, insertbefore):
        return Coin_SWIG_Python.SoPickedPointList_insert(self, pp, insertbefore)

    def truncate(self, start, fit=0):
        return Coin_SWIG_Python.SoPickedPointList_truncate(self, start, fit)

    def set(self, idx, pp):
        return Coin_SWIG_Python.SoPickedPointList_set(self, idx, pp)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoPickedPointList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoPickedPointList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoPickedPointList_get(self, i)

# Register SoPickedPointList in Coin_SWIG_Python:
Coin_SWIG_Python.SoPickedPointList_swigregister(SoPickedPointList)

class SoPath(SoBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPath_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoPath_swiginit(self, Coin_SWIG_Python.new_SoPath(*args))

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPath_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPath_getTypeId(self)

    def setHead(self, head):
        return Coin_SWIG_Python.SoPath_setHead(self, head)

    def getHead(self):
        return Coin_SWIG_Python.SoPath_getHead(self)

    def append(self, *args):
        return Coin_SWIG_Python.SoPath_append(self, *args)

    def push(self, childindex):
        return Coin_SWIG_Python.SoPath_push(self, childindex)

    def pop(self):
        return Coin_SWIG_Python.SoPath_pop(self)

    def getTail(self):
        return Coin_SWIG_Python.SoPath_getTail(self)

    def getNode(self, index):
        return Coin_SWIG_Python.SoPath_getNode(self, index)

    def getNodeFromTail(self, index):
        return Coin_SWIG_Python.SoPath_getNodeFromTail(self, index)

    def getIndex(self, index):
        return Coin_SWIG_Python.SoPath_getIndex(self, index)

    def getIndexFromTail(self, index):
        return Coin_SWIG_Python.SoPath_getIndexFromTail(self, index)

    def getLength(self):
        return Coin_SWIG_Python.SoPath_getLength(self)

    def truncate(self, length):
        return Coin_SWIG_Python.SoPath_truncate(self, length)

    def findFork(self, path):
        return Coin_SWIG_Python.SoPath_findFork(self, path)

    def findNode(self, node):
        return Coin_SWIG_Python.SoPath_findNode(self, node)

    def containsNode(self, node):
        return Coin_SWIG_Python.SoPath_containsNode(self, node)

    def containsPath(self, path):
        return Coin_SWIG_Python.SoPath_containsPath(self, path)

    def copy(self, startfromnodeindex=0, numnodes=0):
        return Coin_SWIG_Python.SoPath_copy(self, startfromnodeindex, numnodes)

    @staticmethod
    def getByName(*args):
        return Coin_SWIG_Python.SoPath_getByName(*args)

    def insertIndex(self, parent, newindex):
        return Coin_SWIG_Python.SoPath_insertIndex(self, parent, newindex)

    def removeIndex(self, parent, oldindex):
        return Coin_SWIG_Python.SoPath_removeIndex(self, parent, oldindex)

    def replaceIndex(self, parent, index, newchild):
        return Coin_SWIG_Python.SoPath_replaceIndex(self, parent, index, newchild)

    def isRelevantNotification(self, l):
        return Coin_SWIG_Python.SoPath_isRelevantNotification(self, l)

    def write(self, action):
        return Coin_SWIG_Python.SoPath_write(self, action)

    def __eq__(self, u):
        return Coin_SWIG_Python.SoPath___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SoPath___nq__(self, u)

# Register SoPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoPath_swigregister(SoPath)

def SoPath_initClass():
    return Coin_SWIG_Python.SoPath_initClass()

def SoPath_getClassTypeId():
    return Coin_SWIG_Python.SoPath_getClassTypeId()

def SoPath_getByName(*args):
    return Coin_SWIG_Python.SoPath_getByName(*args)

class SoLightPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoLightPath_swiginit(self, Coin_SWIG_Python.new_SoLightPath(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLightPath

    def setHead(self, node):
        return Coin_SWIG_Python.SoLightPath_setHead(self, node)

    def append(self, childindex):
        return Coin_SWIG_Python.SoLightPath_append(self, childindex)

    def push(self, childindex):
        return Coin_SWIG_Python.SoLightPath_push(self, childindex)

    def pop(self):
        return Coin_SWIG_Python.SoLightPath_pop(self)

    def setTail(self, childindex):
        return Coin_SWIG_Python.SoLightPath_setTail(self, childindex)

    def getTail(self):
        return Coin_SWIG_Python.SoLightPath_getTail(self)

    def getHead(self):
        return Coin_SWIG_Python.SoLightPath_getHead(self)

    def getNode(self, index):
        return Coin_SWIG_Python.SoLightPath_getNode(self, index)

    def getIndex(self, index):
        return Coin_SWIG_Python.SoLightPath_getIndex(self, index)

    def getFullLength(self):
        return Coin_SWIG_Python.SoLightPath_getFullLength(self)

    def truncate(self, startindex):
        return Coin_SWIG_Python.SoLightPath_truncate(self, startindex)

    def makeTempPath(self, path):
        return Coin_SWIG_Python.SoLightPath_makeTempPath(self, path)

# Register SoLightPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoLightPath_swigregister(SoLightPath)

class SoFullPath(SoPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def pop(self):
        return Coin_SWIG_Python.SoFullPath_pop(self)

    def getTail(self):
        return Coin_SWIG_Python.SoFullPath_getTail(self)

    def getNodeFromTail(self, index):
        return Coin_SWIG_Python.SoFullPath_getNodeFromTail(self, index)

    def getIndexFromTail(self, index):
        return Coin_SWIG_Python.SoFullPath_getIndexFromTail(self, index)

    def getLength(self):
        return Coin_SWIG_Python.SoFullPath_getLength(self)

# Register SoFullPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoFullPath_swigregister(SoFullPath)

class SoTempPath(SoFullPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def simpleAppend(self, node, index):
        return Coin_SWIG_Python.SoTempPath_simpleAppend(self, node, index)

    def replaceTail(self, node, index):
        return Coin_SWIG_Python.SoTempPath_replaceTail(self, node, index)

# Register SoTempPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoTempPath_swigregister(SoTempPath)

class SoActionMethodList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parentlist):
        Coin_SWIG_Python.SoActionMethodList_swiginit(self, Coin_SWIG_Python.new_SoActionMethodList(parentlist))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoActionMethodList

    def addMethod(self, node, method):
        return Coin_SWIG_Python.SoActionMethodList_addMethod(self, node, method)

    def setUp(self):
        return Coin_SWIG_Python.SoActionMethodList_setUp(self)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoActionMethodList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoActionMethodList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SoActionMethodList_get(self, i)

# Register SoActionMethodList in Coin_SWIG_Python:
Coin_SWIG_Python.SoActionMethodList_swigregister(SoActionMethodList)

class SoAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NODE = Coin_SWIG_Python.SoAction_NODE
    PATH = Coin_SWIG_Python.SoAction_PATH
    PATH_LIST = Coin_SWIG_Python.SoAction_PATH_LIST
    NO_PATH = Coin_SWIG_Python.SoAction_NO_PATH
    IN_PATH = Coin_SWIG_Python.SoAction_IN_PATH
    BELOW_PATH = Coin_SWIG_Python.SoAction_BELOW_PATH
    OFF_PATH = Coin_SWIG_Python.SoAction_OFF_PATH
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAction_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoAction_initClasses()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAction_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoAction_getTypeId(self)

    def isOfType(self, type):
        return Coin_SWIG_Python.SoAction_isOfType(self, type)

    def apply(self, *args):
        return Coin_SWIG_Python.SoAction_apply(self, *args)

    def invalidateState(self):
        return Coin_SWIG_Python.SoAction_invalidateState(self)

    @staticmethod
    def nullAction(action, node):
        return Coin_SWIG_Python.SoAction_nullAction(action, node)

    def getWhatAppliedTo(self):
        return Coin_SWIG_Python.SoAction_getWhatAppliedTo(self)

    def getNodeAppliedTo(self):
        return Coin_SWIG_Python.SoAction_getNodeAppliedTo(self)

    def getPathAppliedTo(self):
        return Coin_SWIG_Python.SoAction_getPathAppliedTo(self)

    def getPathListAppliedTo(self):
        return Coin_SWIG_Python.SoAction_getPathListAppliedTo(self)

    def getOriginalPathListAppliedTo(self):
        return Coin_SWIG_Python.SoAction_getOriginalPathListAppliedTo(self)

    def isLastPathListAppliedTo(self):
        return Coin_SWIG_Python.SoAction_isLastPathListAppliedTo(self)

    def getPathCode(self, numindices, indices):
        return Coin_SWIG_Python.SoAction_getPathCode(self, numindices, indices)

    def traverse(self, node):
        return Coin_SWIG_Python.SoAction_traverse(self, node)

    def hasTerminated(self):
        return Coin_SWIG_Python.SoAction_hasTerminated(self)

    def getCurPath(self):
        return Coin_SWIG_Python.SoAction_getCurPath(self)

    def getState(self):
        return Coin_SWIG_Python.SoAction_getState(self)

    def getCurPathCode(self):
        return Coin_SWIG_Python.SoAction_getCurPathCode(self)

    def getCurPathTail(self):
        return Coin_SWIG_Python.SoAction_getCurPathTail(self)

    def usePathCode(self, numindices, indices):
        return Coin_SWIG_Python.SoAction_usePathCode(self, numindices, indices)

    def pushCurPath(self, *args):
        return Coin_SWIG_Python.SoAction_pushCurPath(self, *args)

    def popPushCurPath(self, childindex, node=None):
        return Coin_SWIG_Python.SoAction_popPushCurPath(self, childindex, node)

    def popCurPath(self, *args):
        return Coin_SWIG_Python.SoAction_popCurPath(self, *args)

    def switchToPathTraversal(self, path):
        return Coin_SWIG_Python.SoAction_switchToPathTraversal(self, path)

    def switchToNodeTraversal(self, node):
        return Coin_SWIG_Python.SoAction_switchToNodeTraversal(self, node)

# Register SoAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoAction_swigregister(SoAction)

def SoAction_initClass():
    return Coin_SWIG_Python.SoAction_initClass()

def SoAction_initClasses():
    return Coin_SWIG_Python.SoAction_initClasses()

def SoAction_getClassTypeId():
    return Coin_SWIG_Python.SoAction_getClassTypeId()

def SoAction_nullAction(action, node):
    return Coin_SWIG_Python.SoAction_nullAction(action, node)

class SoState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, action, enabledelements):
        Coin_SWIG_Python.SoState_swiginit(self, Coin_SWIG_Python.new_SoState(action, enabledelements))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoState

    def getAction(self):
        return Coin_SWIG_Python.SoState_getAction(self)

    def getElement(self, stackindex):
        return Coin_SWIG_Python.SoState_getElement(self, stackindex)

    def getConstElement(self, stackindex):
        return Coin_SWIG_Python.SoState_getConstElement(self, stackindex)

    def push(self):
        return Coin_SWIG_Python.SoState_push(self)

    def pop(self):
        return Coin_SWIG_Python.SoState_pop(self)

    def output(self, *args):
        return Coin_SWIG_Python.SoState_output(self, *args)

    def isElementEnabled(self, stackindex):
        return Coin_SWIG_Python.SoState_isElementEnabled(self, stackindex)

    def getDepth(self):
        return Coin_SWIG_Python.SoState_getDepth(self)

    def setCacheOpen(self, flag):
        return Coin_SWIG_Python.SoState_setCacheOpen(self, flag)

    def isCacheOpen(self):
        return Coin_SWIG_Python.SoState_isCacheOpen(self)

    def getElementNoPush(self, stackindex):
        return Coin_SWIG_Python.SoState_getElementNoPush(self, stackindex)

# Register SoState in Coin_SWIG_Python:
Coin_SWIG_Python.SoState_swigregister(SoState)

class SoElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoElement_initClass()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoElement_getClassStackIndex()

    def getTypeId(self):
        return Coin_SWIG_Python.SoElement_getTypeId(self)

    def getStackIndex(self):
        return Coin_SWIG_Python.SoElement_getStackIndex(self)

    def init(self, state):
        return Coin_SWIG_Python.SoElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoElement_pop(self, state, prevTopElement)

    def matches(self, element):
        return Coin_SWIG_Python.SoElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoElement_copyMatchInfo(self)

    @staticmethod
    def initElements():
        return Coin_SWIG_Python.SoElement_initElements()

    @staticmethod
    def getNumStackIndices():
        return Coin_SWIG_Python.SoElement_getNumStackIndices()

    @staticmethod
    def getIdFromStackIndex(stackIndex):
        return Coin_SWIG_Python.SoElement_getIdFromStackIndex(stackIndex)

    def setDepth(self, depth):
        return Coin_SWIG_Python.SoElement_setDepth(self, depth)

    def getDepth(self):
        return Coin_SWIG_Python.SoElement_getDepth(self)

    def output(self, *args):
        return Coin_SWIG_Python.SoElement_output(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoElement

# Register SoElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoElement_swigregister(SoElement)

def SoElement_initClass():
    return Coin_SWIG_Python.SoElement_initClass()

def SoElement_getClassTypeId():
    return Coin_SWIG_Python.SoElement_getClassTypeId()

def SoElement_getClassStackIndex():
    return Coin_SWIG_Python.SoElement_getClassStackIndex()

def SoElement_initElements():
    return Coin_SWIG_Python.SoElement_initElements()

def SoElement_getNumStackIndices():
    return Coin_SWIG_Python.SoElement_getNumStackIndices()

def SoElement_getIdFromStackIndex(stackIndex):
    return Coin_SWIG_Python.SoElement_getIdFromStackIndex(stackIndex)

class SoInt32Element(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInt32Element_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoInt32Element_getClassStackIndex()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInt32Element_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoInt32Element_init(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoInt32Element_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoInt32Element_copyMatchInfo(self)

    def output(self, file):
        return Coin_SWIG_Python.SoInt32Element_output(self, file)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoInt32Element_set(*args)

    @staticmethod
    def get(index, state):
        return Coin_SWIG_Python.SoInt32Element_get(index, state)

    def setElt(self, value):
        return Coin_SWIG_Python.SoInt32Element_setElt(self, value)

# Register SoInt32Element in Coin_SWIG_Python:
Coin_SWIG_Python.SoInt32Element_swigregister(SoInt32Element)

def SoInt32Element_getClassTypeId():
    return Coin_SWIG_Python.SoInt32Element_getClassTypeId()

def SoInt32Element_getClassStackIndex():
    return Coin_SWIG_Python.SoInt32Element_getClassStackIndex()

def SoInt32Element_initClass():
    return Coin_SWIG_Python.SoInt32Element_initClass()

def SoInt32Element_set(*args):
    return Coin_SWIG_Python.SoInt32Element_set(*args)

def SoInt32Element_get(index, state):
    return Coin_SWIG_Python.SoInt32Element_get(index, state)

class SoDecimationTypeElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecimationTypeElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoDecimationTypeElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecimationTypeElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecimationTypeElement_initClass()
    AUTOMATIC = Coin_SWIG_Python.SoDecimationTypeElement_AUTOMATIC
    HIGHEST = Coin_SWIG_Python.SoDecimationTypeElement_HIGHEST
    LOWEST = Coin_SWIG_Python.SoDecimationTypeElement_LOWEST
    PERCENTAGE = Coin_SWIG_Python.SoDecimationTypeElement_PERCENTAGE

    def init(self, state):
        return Coin_SWIG_Python.SoDecimationTypeElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoDecimationTypeElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoDecimationTypeElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoDecimationTypeElement_getDefault()

# Register SoDecimationTypeElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecimationTypeElement_swigregister(SoDecimationTypeElement)

def SoDecimationTypeElement_getClassTypeId():
    return Coin_SWIG_Python.SoDecimationTypeElement_getClassTypeId()

def SoDecimationTypeElement_getClassStackIndex():
    return Coin_SWIG_Python.SoDecimationTypeElement_getClassStackIndex()

def SoDecimationTypeElement_createInstance():
    return Coin_SWIG_Python.SoDecimationTypeElement_createInstance()

def SoDecimationTypeElement_initClass():
    return Coin_SWIG_Python.SoDecimationTypeElement_initClass()

def SoDecimationTypeElement_set(*args):
    return Coin_SWIG_Python.SoDecimationTypeElement_set(*args)

def SoDecimationTypeElement_get(state):
    return Coin_SWIG_Python.SoDecimationTypeElement_get(state)

def SoDecimationTypeElement_getDefault():
    return Coin_SWIG_Python.SoDecimationTypeElement_getDefault()

class SoFieldData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoFieldData_swiginit(self, Coin_SWIG_Python.new_SoFieldData(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldData

    def addField(self, base, name, field):
        return Coin_SWIG_Python.SoFieldData_addField(self, base, name, field)

    def overlay(self, destTo, srcFrom, copyconnections):
        return Coin_SWIG_Python.SoFieldData_overlay(self, destTo, srcFrom, copyconnections)

    def getNumFields(self):
        return Coin_SWIG_Python.SoFieldData_getNumFields(self)

    def getFieldName(self, index):
        return Coin_SWIG_Python.SoFieldData_getFieldName(self, index)

    def getField(self, object, index):
        return Coin_SWIG_Python.SoFieldData_getField(self, object, index)

    def getIndex(self, fc, field):
        return Coin_SWIG_Python.SoFieldData_getIndex(self, fc, field)

    def addEnumValue(self, enumname, valuename, value):
        return Coin_SWIG_Python.SoFieldData_addEnumValue(self, enumname, valuename, value)

    def getEnumData(self, enumname, num, values, names):
        return Coin_SWIG_Python.SoFieldData_getEnumData(self, enumname, num, values, names)

    def read(self, *args):
        return Coin_SWIG_Python.SoFieldData_read(self, *args)

    def write(self, out, object):
        return Coin_SWIG_Python.SoFieldData_write(self, out, object)

    def copy(self, src):
        return Coin_SWIG_Python.SoFieldData_copy(self, src)

    def isSame(self, c1, c2):
        return Coin_SWIG_Python.SoFieldData_isSame(self, c1, c2)

    def readFieldDescriptions(self, _in, object, numdescriptionsexpected, readfieldvalues=1):
        return Coin_SWIG_Python.SoFieldData_readFieldDescriptions(self, _in, object, numdescriptionsexpected, readfieldvalues)

    def writeFieldDescriptions(self, out, object):
        return Coin_SWIG_Python.SoFieldData_writeFieldDescriptions(self, out, object)

# Register SoFieldData in Coin_SWIG_Python:
Coin_SWIG_Python.SoFieldData_swigregister(SoFieldData)

class SoFieldContainer(SoBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFieldContainer_initClass()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFieldContainer_getClassTypeId()

    def setToDefaults(self):
        return Coin_SWIG_Python.SoFieldContainer_setToDefaults(self)

    def hasDefaultValues(self):
        return Coin_SWIG_Python.SoFieldContainer_hasDefaultValues(self)

    def fieldsAreEqual(self, container):
        return Coin_SWIG_Python.SoFieldContainer_fieldsAreEqual(self, container)

    def copyFieldValues(self, container, copyconnections=0):
        return Coin_SWIG_Python.SoFieldContainer_copyFieldValues(self, container, copyconnections)

    def getFields(self, l):
        return Coin_SWIG_Python.SoFieldContainer_getFields(self, l)

    def getAllFields(self, l):
        return Coin_SWIG_Python.SoFieldContainer_getAllFields(self, l)

    def getField(self, name):
        return Coin_SWIG_Python.SoFieldContainer_getField(self, name)

    def getEventIn(self, name):
        return Coin_SWIG_Python.SoFieldContainer_getEventIn(self, name)

    def getEventOut(self, name):
        return Coin_SWIG_Python.SoFieldContainer_getEventOut(self, name)

    def enableNotify(self, flag):
        return Coin_SWIG_Python.SoFieldContainer_enableNotify(self, flag)

    def isNotifyEnabled(self):
        return Coin_SWIG_Python.SoFieldContainer_isNotifyEnabled(self)

    def set(self, *args):
        return Coin_SWIG_Python.SoFieldContainer_set(self, *args)

    def get(self, *args):
        return Coin_SWIG_Python.SoFieldContainer_get(self, *args)

    def notify(self, l):
        return Coin_SWIG_Python.SoFieldContainer_notify(self, l)

    def validateNewFieldValue(self, field, newval):
        return Coin_SWIG_Python.SoFieldContainer_validateNewFieldValue(self, field, newval)

    def addWriteReference(self, out, isfromfield=0):
        return Coin_SWIG_Python.SoFieldContainer_addWriteReference(self, out, isfromfield)

    def writeInstance(self, out):
        return Coin_SWIG_Python.SoFieldContainer_writeInstance(self, out)

    def getIsBuiltIn(self):
        return Coin_SWIG_Python.SoFieldContainer_getIsBuiltIn(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoFieldContainer_getFieldData(self)

    def copyContents(self, srcFrom, copyconnections):
        return Coin_SWIG_Python.SoFieldContainer_copyContents(self, srcFrom, copyconnections)

    def copyThroughConnection(self):
        return Coin_SWIG_Python.SoFieldContainer_copyThroughConnection(self)

    @staticmethod
    def initCopyDict():
        return Coin_SWIG_Python.SoFieldContainer_initCopyDict()

    @staticmethod
    def addCopy(orig, copy):
        return Coin_SWIG_Python.SoFieldContainer_addCopy(orig, copy)

    @staticmethod
    def checkCopy(orig):
        return Coin_SWIG_Python.SoFieldContainer_checkCopy(orig)

    @staticmethod
    def findCopy(orig, copyconnections):
        return Coin_SWIG_Python.SoFieldContainer_findCopy(orig, copyconnections)

    @staticmethod
    def copyDone():
        return Coin_SWIG_Python.SoFieldContainer_copyDone()

    def setUserData(self, userdata):
        return Coin_SWIG_Python.SoFieldContainer_setUserData(self, userdata)

    def getUserData(self):
        return Coin_SWIG_Python.SoFieldContainer_getUserData(self)

    def getFieldName(self, *args):
        return Coin_SWIG_Python.SoFieldContainer_getFieldName(self, *args)

    def __getattr__(self,name):
        try:
    #G.Barrand : return SoBase.__getattribute__(self, name)
            return SoBase.__getattr__(self, name)  #G.Barrand
        except AttributeError, e:
            field = self.getField(SbName(name))
            if field is None:
                raise e
            return field

    def __setattr__(self,name,value):
    # I don't understand why we need this, but otherwise it does not work :/
        if name == 'this':
            return SoBase.__setattr__(self, name, value)
        field = self.getField(SbName(name))
        if field is None:
            return SoBase.__setattr__(self, name, value)
        field.setValue(value)
        return field


# Register SoFieldContainer in Coin_SWIG_Python:
Coin_SWIG_Python.SoFieldContainer_swigregister(SoFieldContainer)

def SoFieldContainer_initClass():
    return Coin_SWIG_Python.SoFieldContainer_initClass()

def SoFieldContainer_getClassTypeId():
    return Coin_SWIG_Python.SoFieldContainer_getClassTypeId()

def SoFieldContainer_initCopyDict():
    return Coin_SWIG_Python.SoFieldContainer_initCopyDict()

def SoFieldContainer_addCopy(orig, copy):
    return Coin_SWIG_Python.SoFieldContainer_addCopy(orig, copy)

def SoFieldContainer_checkCopy(orig):
    return Coin_SWIG_Python.SoFieldContainer_checkCopy(orig)

def SoFieldContainer_findCopy(orig, copyconnections):
    return Coin_SWIG_Python.SoFieldContainer_findCopy(orig, copyconnections)

def SoFieldContainer_copyDone():
    return Coin_SWIG_Python.SoFieldContainer_copyDone()

class SoNode(SoFieldContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    FIRST_INSTANCE = Coin_SWIG_Python.SoNode_FIRST_INSTANCE
    PROTO_INSTANCE = Coin_SWIG_Python.SoNode_PROTO_INSTANCE
    OTHER_INSTANCE = Coin_SWIG_Python.SoNode_OTHER_INSTANCE

    def setOverride(self, state):
        return Coin_SWIG_Python.SoNode_setOverride(self, state)

    def isOverride(self):
        return Coin_SWIG_Python.SoNode_isOverride(self)
    INVENTOR = Coin_SWIG_Python.SoNode_INVENTOR
    VRML1 = Coin_SWIG_Python.SoNode_VRML1
    VRML2 = Coin_SWIG_Python.SoNode_VRML2
    INVENTOR_1 = Coin_SWIG_Python.SoNode_INVENTOR_1
    INVENTOR_2_0 = Coin_SWIG_Python.SoNode_INVENTOR_2_0
    INVENTOR_2_1 = Coin_SWIG_Python.SoNode_INVENTOR_2_1
    INVENTOR_2_5 = Coin_SWIG_Python.SoNode_INVENTOR_2_5
    INVENTOR_2_6 = Coin_SWIG_Python.SoNode_INVENTOR_2_6
    COIN_1_0 = Coin_SWIG_Python.SoNode_COIN_1_0
    COIN_2_0 = Coin_SWIG_Python.SoNode_COIN_2_0
    EXTENSION = Coin_SWIG_Python.SoNode_EXTENSION
    COIN_2_2 = Coin_SWIG_Python.SoNode_COIN_2_2
    COIN_2_3 = Coin_SWIG_Python.SoNode_COIN_2_3
    COIN_2_4 = Coin_SWIG_Python.SoNode_COIN_2_4
    INVENTOR_5_0 = Coin_SWIG_Python.SoNode_INVENTOR_5_0
    COIN_2_5 = Coin_SWIG_Python.SoNode_COIN_2_5

    @staticmethod
    def getCompatibilityTypes(nodetype):
        return Coin_SWIG_Python.SoNode_getCompatibilityTypes(nodetype)

    def setNodeType(self, type):
        return Coin_SWIG_Python.SoNode_setNodeType(self, type)

    def getNodeType(self):
        return Coin_SWIG_Python.SoNode_getNodeType(self)

    def copy(self, copyconnections=0):
        return Coin_SWIG_Python.SoNode_copy(self, copyconnections)

    def affectsState(self):
        return Coin_SWIG_Python.SoNode_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoNode_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoNode_GLRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoNode_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoNode_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoNode_GLRenderOffPath(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoNode_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoNode_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoNode_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoNode_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoNode_pick(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoNode_rayPick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoNode_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoNode_write(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoNode_audioRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoNode_getPrimitiveCount(self, action)

    def grabEventsSetup(self):
        return Coin_SWIG_Python.SoNode_grabEventsSetup(self)

    def grabEventsCleanup(self):
        return Coin_SWIG_Python.SoNode_grabEventsCleanup(self)

    def startNotify(self):
        return Coin_SWIG_Python.SoNode_startNotify(self)

    def notify(self, l):
        return Coin_SWIG_Python.SoNode_notify(self, l)

    def getNodeId(self):
        return Coin_SWIG_Python.SoNode_getNodeId(self)

    def getChildren(self):
        return Coin_SWIG_Python.SoNode_getChildren(self)

    def writeInstance(self, out):
        return Coin_SWIG_Python.SoNode_writeInstance(self, out)

    def addToCopyDict(self):
        return Coin_SWIG_Python.SoNode_addToCopyDict(self)

    def copyContents(self, srcFrom, copyconnections):
        return Coin_SWIG_Python.SoNode_copyContents(self, srcFrom, copyconnections)

    def copyThroughConnection(self):
        return Coin_SWIG_Python.SoNode_copyThroughConnection(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNode_getClassTypeId()

    @staticmethod
    def getByName(*args):
        return Coin_SWIG_Python.SoNode_getByName(*args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNode_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoNode_initClasses()

    @staticmethod
    def getNextNodeId():
        return Coin_SWIG_Python.SoNode_getNextNodeId()

    @staticmethod
    def getActionMethodIndex(type):
        return Coin_SWIG_Python.SoNode_getActionMethodIndex(type)

    @staticmethod
    def getBoundingBoxS(action, node):
        return Coin_SWIG_Python.SoNode_getBoundingBoxS(action, node)

    @staticmethod
    def GLRenderS(action, node):
        return Coin_SWIG_Python.SoNode_GLRenderS(action, node)

    @staticmethod
    def callbackS(action, node):
        return Coin_SWIG_Python.SoNode_callbackS(action, node)

    @staticmethod
    def getMatrixS(action, node):
        return Coin_SWIG_Python.SoNode_getMatrixS(action, node)

    @staticmethod
    def handleEventS(action, node):
        return Coin_SWIG_Python.SoNode_handleEventS(action, node)

    @staticmethod
    def pickS(action, node):
        return Coin_SWIG_Python.SoNode_pickS(action, node)

    @staticmethod
    def rayPickS(action, node):
        return Coin_SWIG_Python.SoNode_rayPickS(action, node)

    @staticmethod
    def searchS(action, node):
        return Coin_SWIG_Python.SoNode_searchS(action, node)

    @staticmethod
    def writeS(action, node):
        return Coin_SWIG_Python.SoNode_writeS(action, node)

    @staticmethod
    def audioRenderS(action, node):
        return Coin_SWIG_Python.SoNode_audioRenderS(action, node)

    @staticmethod
    def getPrimitiveCountS(action, node):
        return Coin_SWIG_Python.SoNode_getPrimitiveCountS(action, node)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNode

# Register SoNode in Coin_SWIG_Python:
Coin_SWIG_Python.SoNode_swigregister(SoNode)

def SoNode_getCompatibilityTypes(nodetype):
    return Coin_SWIG_Python.SoNode_getCompatibilityTypes(nodetype)

def SoNode_getClassTypeId():
    return Coin_SWIG_Python.SoNode_getClassTypeId()

def SoNode_getByName(*args):
    return Coin_SWIG_Python.SoNode_getByName(*args)

def SoNode_initClass():
    return Coin_SWIG_Python.SoNode_initClass()

def SoNode_initClasses():
    return Coin_SWIG_Python.SoNode_initClasses()

def SoNode_getNextNodeId():
    return Coin_SWIG_Python.SoNode_getNextNodeId()

def SoNode_getActionMethodIndex(type):
    return Coin_SWIG_Python.SoNode_getActionMethodIndex(type)

def SoNode_getBoundingBoxS(action, node):
    return Coin_SWIG_Python.SoNode_getBoundingBoxS(action, node)

def SoNode_GLRenderS(action, node):
    return Coin_SWIG_Python.SoNode_GLRenderS(action, node)

def SoNode_callbackS(action, node):
    return Coin_SWIG_Python.SoNode_callbackS(action, node)

def SoNode_getMatrixS(action, node):
    return Coin_SWIG_Python.SoNode_getMatrixS(action, node)

def SoNode_handleEventS(action, node):
    return Coin_SWIG_Python.SoNode_handleEventS(action, node)

def SoNode_pickS(action, node):
    return Coin_SWIG_Python.SoNode_pickS(action, node)

def SoNode_rayPickS(action, node):
    return Coin_SWIG_Python.SoNode_rayPickS(action, node)

def SoNode_searchS(action, node):
    return Coin_SWIG_Python.SoNode_searchS(action, node)

def SoNode_writeS(action, node):
    return Coin_SWIG_Python.SoNode_writeS(action, node)

def SoNode_audioRenderS(action, node):
    return Coin_SWIG_Python.SoNode_audioRenderS(action, node)

def SoNode_getPrimitiveCountS(action, node):
    return Coin_SWIG_Python.SoNode_getPrimitiveCountS(action, node)

class SoSensorManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSensorManager_swiginit(self, Coin_SWIG_Python.new_SoSensorManager())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSensorManager

    def insertDelaySensor(self, s):
        return Coin_SWIG_Python.SoSensorManager_insertDelaySensor(self, s)

    def insertTimerSensor(self, s):
        return Coin_SWIG_Python.SoSensorManager_insertTimerSensor(self, s)

    def removeDelaySensor(self, s):
        return Coin_SWIG_Python.SoSensorManager_removeDelaySensor(self, s)

    def removeTimerSensor(self, s):
        return Coin_SWIG_Python.SoSensorManager_removeTimerSensor(self, s)

    def setChangedCallback(self, sensorQueueChangedCB, data):
        return Coin_SWIG_Python.SoSensorManager_setChangedCallback(self, sensorQueueChangedCB, data)

    def rescheduleTimer(self, s):
        return Coin_SWIG_Python.SoSensorManager_rescheduleTimer(self, s)

    def removeRescheduledTimer(self, s):
        return Coin_SWIG_Python.SoSensorManager_removeRescheduledTimer(self, s)

    def processDelayQueue(self, isidle):
        return Coin_SWIG_Python.SoSensorManager_processDelayQueue(self, isidle)

    def processImmediateQueue(self):
        return Coin_SWIG_Python.SoSensorManager_processImmediateQueue(self)

    def processTimerQueue(self):
        return Coin_SWIG_Python.SoSensorManager_processTimerQueue(self)

    def isDelaySensorPending(self):
        return Coin_SWIG_Python.SoSensorManager_isDelaySensorPending(self)

    def isTimerSensorPending(self, tm):
        return Coin_SWIG_Python.SoSensorManager_isTimerSensorPending(self, tm)

    def setDelaySensorTimeout(self, t):
        return Coin_SWIG_Python.SoSensorManager_setDelaySensorTimeout(self, t)

    def getDelaySensorTimeout(self):
        return Coin_SWIG_Python.SoSensorManager_getDelaySensorTimeout(self)

    def doSelect(self, nfds, readfds, writefds, exceptfds, userTimeOut):
        return Coin_SWIG_Python.SoSensorManager_doSelect(self, nfds, readfds, writefds, exceptfds, userTimeOut)

# Register SoSensorManager in Coin_SWIG_Python:
Coin_SWIG_Python.SoSensorManager_swigregister(SoSensorManager)

class SoDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def init():
        return Coin_SWIG_Python.SoDB_init()

    @staticmethod
    def finish():
        return Coin_SWIG_Python.SoDB_finish()

    @staticmethod
    def cleanup():
        return Coin_SWIG_Python.SoDB_cleanup()

    @staticmethod
    def getVersion():
        return Coin_SWIG_Python.SoDB_getVersion()

    @staticmethod
    def read(*args):
        return Coin_SWIG_Python.SoDB_read(*args)

    @staticmethod
    def readAll(_in):
        return Coin_SWIG_Python.SoDB_readAll(_in)

    @staticmethod
    def readAllVRML(_in):
        return Coin_SWIG_Python.SoDB_readAllVRML(_in)

    @staticmethod
    def isValidHeader(teststring):
        return Coin_SWIG_Python.SoDB_isValidHeader(teststring)

    @staticmethod
    def registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata=None):
        return Coin_SWIG_Python.SoDB_registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata)

    @staticmethod
    def getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok=0):
        return Coin_SWIG_Python.SoDB_getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok)

    @staticmethod
    def getNumHeaders():
        return Coin_SWIG_Python.SoDB_getNumHeaders()

    @staticmethod
    def getHeaderString(i):
        return Coin_SWIG_Python.SoDB_getHeaderString(i)

    @staticmethod
    def createGlobalField(name, type):
        return Coin_SWIG_Python.SoDB_createGlobalField(name, type)

    @staticmethod
    def getGlobalField(name):
        return Coin_SWIG_Python.SoDB_getGlobalField(name)

    @staticmethod
    def renameGlobalField(srcFrom, destTo):
        return Coin_SWIG_Python.SoDB_renameGlobalField(srcFrom, destTo)

    @staticmethod
    def setRealTimeInterval(interval):
        return Coin_SWIG_Python.SoDB_setRealTimeInterval(interval)

    @staticmethod
    def getRealTimeInterval():
        return Coin_SWIG_Python.SoDB_getRealTimeInterval()

    @staticmethod
    def enableRealTimeSensor(on):
        return Coin_SWIG_Python.SoDB_enableRealTimeSensor(on)

    @staticmethod
    def getSensorManager():
        return Coin_SWIG_Python.SoDB_getSensorManager()

    @staticmethod
    def setDelaySensorTimeout(t):
        return Coin_SWIG_Python.SoDB_setDelaySensorTimeout(t)

    @staticmethod
    def getDelaySensorTimeout():
        return Coin_SWIG_Python.SoDB_getDelaySensorTimeout()

    @staticmethod
    def doSelect(nfds, readfds, writefds, exceptfds, usertimeout):
        return Coin_SWIG_Python.SoDB_doSelect(nfds, readfds, writefds, exceptfds, usertimeout)

    @staticmethod
    def addConverter(srcFrom, destTo, converter):
        return Coin_SWIG_Python.SoDB_addConverter(srcFrom, destTo, converter)

    @staticmethod
    def getConverter(srcFrom, destTo):
        return Coin_SWIG_Python.SoDB_getConverter(srcFrom, destTo)

    @staticmethod
    def isInitialized():
        return Coin_SWIG_Python.SoDB_isInitialized()

    @staticmethod
    def startNotify():
        return Coin_SWIG_Python.SoDB_startNotify()

    @staticmethod
    def isNotifying():
        return Coin_SWIG_Python.SoDB_isNotifying()

    @staticmethod
    def endNotify():
        return Coin_SWIG_Python.SoDB_endNotify()

    @staticmethod
    def addProgressCallback(func, userdata):
        return Coin_SWIG_Python.SoDB_addProgressCallback(func, userdata)

    @staticmethod
    def removeProgressCallback(func, userdata):
        return Coin_SWIG_Python.SoDB_removeProgressCallback(func, userdata)

    @staticmethod
    def isMultiThread():
        return Coin_SWIG_Python.SoDB_isMultiThread()

    @staticmethod
    def readlock():
        return Coin_SWIG_Python.SoDB_readlock()

    @staticmethod
    def readunlock():
        return Coin_SWIG_Python.SoDB_readunlock()

    @staticmethod
    def writelock():
        return Coin_SWIG_Python.SoDB_writelock()

    @staticmethod
    def writeunlock():
        return Coin_SWIG_Python.SoDB_writeunlock()

    @staticmethod
    def createRoute(srcFrom, eventout, destTo, eventin):
        return Coin_SWIG_Python.SoDB_createRoute(srcFrom, eventout, destTo, eventin)

    @staticmethod
    def removeRoute(srcFrom, eventout, destTo, eventin):
        return Coin_SWIG_Python.SoDB_removeRoute(srcFrom, eventout, destTo, eventin)

    def __init__(self):
        Coin_SWIG_Python.SoDB_swiginit(self, Coin_SWIG_Python.new_SoDB())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDB

# Register SoDB in Coin_SWIG_Python:
Coin_SWIG_Python.SoDB_swigregister(SoDB)

def SoDB_init():
    return Coin_SWIG_Python.SoDB_init()

def SoDB_finish():
    return Coin_SWIG_Python.SoDB_finish()

def SoDB_cleanup():
    return Coin_SWIG_Python.SoDB_cleanup()

def SoDB_getVersion():
    return Coin_SWIG_Python.SoDB_getVersion()

def SoDB_read(*args):
    return Coin_SWIG_Python.SoDB_read(*args)

def SoDB_readAll(_in):
    return Coin_SWIG_Python.SoDB_readAll(_in)

def SoDB_readAllVRML(_in):
    return Coin_SWIG_Python.SoDB_readAllVRML(_in)

def SoDB_isValidHeader(teststring):
    return Coin_SWIG_Python.SoDB_isValidHeader(teststring)

def SoDB_registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata=None):
    return Coin_SWIG_Python.SoDB_registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata)

def SoDB_getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok=0):
    return Coin_SWIG_Python.SoDB_getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok)

def SoDB_getNumHeaders():
    return Coin_SWIG_Python.SoDB_getNumHeaders()

def SoDB_getHeaderString(i):
    return Coin_SWIG_Python.SoDB_getHeaderString(i)

def SoDB_createGlobalField(name, type):
    return Coin_SWIG_Python.SoDB_createGlobalField(name, type)

def SoDB_getGlobalField(name):
    return Coin_SWIG_Python.SoDB_getGlobalField(name)

def SoDB_renameGlobalField(srcFrom, destTo):
    return Coin_SWIG_Python.SoDB_renameGlobalField(srcFrom, destTo)

def SoDB_setRealTimeInterval(interval):
    return Coin_SWIG_Python.SoDB_setRealTimeInterval(interval)

def SoDB_getRealTimeInterval():
    return Coin_SWIG_Python.SoDB_getRealTimeInterval()

def SoDB_enableRealTimeSensor(on):
    return Coin_SWIG_Python.SoDB_enableRealTimeSensor(on)

def SoDB_getSensorManager():
    return Coin_SWIG_Python.SoDB_getSensorManager()

def SoDB_setDelaySensorTimeout(t):
    return Coin_SWIG_Python.SoDB_setDelaySensorTimeout(t)

def SoDB_getDelaySensorTimeout():
    return Coin_SWIG_Python.SoDB_getDelaySensorTimeout()

def SoDB_doSelect(nfds, readfds, writefds, exceptfds, usertimeout):
    return Coin_SWIG_Python.SoDB_doSelect(nfds, readfds, writefds, exceptfds, usertimeout)

def SoDB_addConverter(srcFrom, destTo, converter):
    return Coin_SWIG_Python.SoDB_addConverter(srcFrom, destTo, converter)

def SoDB_getConverter(srcFrom, destTo):
    return Coin_SWIG_Python.SoDB_getConverter(srcFrom, destTo)

def SoDB_isInitialized():
    return Coin_SWIG_Python.SoDB_isInitialized()

def SoDB_startNotify():
    return Coin_SWIG_Python.SoDB_startNotify()

def SoDB_isNotifying():
    return Coin_SWIG_Python.SoDB_isNotifying()

def SoDB_endNotify():
    return Coin_SWIG_Python.SoDB_endNotify()

def SoDB_addProgressCallback(func, userdata):
    return Coin_SWIG_Python.SoDB_addProgressCallback(func, userdata)

def SoDB_removeProgressCallback(func, userdata):
    return Coin_SWIG_Python.SoDB_removeProgressCallback(func, userdata)

def SoDB_isMultiThread():
    return Coin_SWIG_Python.SoDB_isMultiThread()

def SoDB_readlock():
    return Coin_SWIG_Python.SoDB_readlock()

def SoDB_readunlock():
    return Coin_SWIG_Python.SoDB_readunlock()

def SoDB_writelock():
    return Coin_SWIG_Python.SoDB_writelock()

def SoDB_writeunlock():
    return Coin_SWIG_Python.SoDB_writeunlock()

def SoDB_createRoute(srcFrom, eventout, destTo, eventin):
    return Coin_SWIG_Python.SoDB_createRoute(srcFrom, eventout, destTo, eventin)

def SoDB_removeRoute(srcFrom, eventout, destTo, eventin):
    return Coin_SWIG_Python.SoDB_removeRoute(srcFrom, eventout, destTo, eventin)

class SoInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoInput_swiginit(self, Coin_SWIG_Python.new_SoInput(*args))

    def findProto(self, name):
        return Coin_SWIG_Python.SoInput_findProto(self, name)

    def addProto(self, proto):
        return Coin_SWIG_Python.SoInput_addProto(self, proto)

    def pushProto(self, proto):
        return Coin_SWIG_Python.SoInput_pushProto(self, proto)

    def getCurrentProto(self):
        return Coin_SWIG_Python.SoInput_getCurrentProto(self)

    def popProto(self):
        return Coin_SWIG_Python.SoInput_popProto(self)

    def addRoute(self, fromnode, fromfield, tonode, tofield):
        return Coin_SWIG_Python.SoInput_addRoute(self, fromnode, fromfield, tonode, tofield)

    def checkISReference(self, container, fieldname, readok):
        return Coin_SWIG_Python.SoInput_checkISReference(self, container, fieldname, readok)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInput

    def setFilePointer(self, newFP):
        return Coin_SWIG_Python.SoInput_setFilePointer(self, newFP)

    def openFile(self, fileName, okIfNotFound=0):
        return Coin_SWIG_Python.SoInput_openFile(self, fileName, okIfNotFound)

    def pushFile(self, fileName):
        return Coin_SWIG_Python.SoInput_pushFile(self, fileName)

    def closeFile(self):
        return Coin_SWIG_Python.SoInput_closeFile(self)

    def isValidFile(self):
        return Coin_SWIG_Python.SoInput_isValidFile(self)

    def isValidBuffer(self):
        return Coin_SWIG_Python.SoInput_isValidBuffer(self)

    def getCurFile(self):
        return Coin_SWIG_Python.SoInput_getCurFile(self)

    def getCurFileName(self):
        return Coin_SWIG_Python.SoInput_getCurFileName(self)

    def setBuffer(self, bufpointer):
        return Coin_SWIG_Python.SoInput_setBuffer(self, bufpointer)

    def setStringArray(self, strings):
        return Coin_SWIG_Python.SoInput_setStringArray(self, strings)

    def getNumBytesRead(self):
        return Coin_SWIG_Python.SoInput_getNumBytesRead(self)

    def getHeader(self):
        return Coin_SWIG_Python.SoInput_getHeader(self)

    def getIVVersion(self):
        return Coin_SWIG_Python.SoInput_getIVVersion(self)

    def isBinary(self):
        return Coin_SWIG_Python.SoInput_isBinary(self)

    def get(self, c):
        return Coin_SWIG_Python.SoInput_get(self, c)

    def getASCIIBuffer(self, c):
        return Coin_SWIG_Python.SoInput_getASCIIBuffer(self, c)

    def getASCIIFile(self, c):
        return Coin_SWIG_Python.SoInput_getASCIIFile(self, c)

    def readHex(self, l):
        return Coin_SWIG_Python.SoInput_readHex(self, l)

    def read(self, *args):
        return Coin_SWIG_Python.SoInput_read(self, *args)

    def readBinaryArray(self, *args):
        return Coin_SWIG_Python.SoInput_readBinaryArray(self, *args)

    def eof(self):
        return Coin_SWIG_Python.SoInput_eof(self)

    def isFileVRML1(self):
        return Coin_SWIG_Python.SoInput_isFileVRML1(self)

    def isFileVRML2(self):
        return Coin_SWIG_Python.SoInput_isFileVRML2(self)

    def resetFilePointer(self, fptr):
        return Coin_SWIG_Python.SoInput_resetFilePointer(self, fptr)

    def getLocationString(self, string):
        return Coin_SWIG_Python.SoInput_getLocationString(self, string)

    def putBack(self, *args):
        return Coin_SWIG_Python.SoInput_putBack(self, *args)

    def addReference(self, name, base, addToGlobalDict=1):
        return Coin_SWIG_Python.SoInput_addReference(self, name, base, addToGlobalDict)

    def removeReference(self, name):
        return Coin_SWIG_Python.SoInput_removeReference(self, name)

    def findReference(self, name):
        return Coin_SWIG_Python.SoInput_findReference(self, name)

    @staticmethod
    def addDirectoryFirst(dirName):
        return Coin_SWIG_Python.SoInput_addDirectoryFirst(dirName)

    @staticmethod
    def addDirectoryLast(dirName):
        return Coin_SWIG_Python.SoInput_addDirectoryLast(dirName)

    @staticmethod
    def addEnvDirectoriesFirst(*args):
        return Coin_SWIG_Python.SoInput_addEnvDirectoriesFirst(*args)

    @staticmethod
    def addEnvDirectoriesLast(*args):
        return Coin_SWIG_Python.SoInput_addEnvDirectoriesLast(*args)

    @staticmethod
    def removeDirectory(dirName):
        return Coin_SWIG_Python.SoInput_removeDirectory(dirName)

    @staticmethod
    def clearDirectories():
        return Coin_SWIG_Python.SoInput_clearDirectories()

    @staticmethod
    def getDirectories():
        return Coin_SWIG_Python.SoInput_getDirectories()

    @staticmethod
    def init():
        return Coin_SWIG_Python.SoInput_init()

    @staticmethod
    def getPathname(*args):
        return Coin_SWIG_Python.SoInput_getPathname(*args)

    @staticmethod
    def getBasename(*args):
        return Coin_SWIG_Python.SoInput_getBasename(*args)

    @staticmethod
    def searchForFile(basename, directories, subdirectories):
        return Coin_SWIG_Python.SoInput_searchForFile(basename, directories, subdirectories)

# Register SoInput in Coin_SWIG_Python:
Coin_SWIG_Python.SoInput_swigregister(SoInput)

def SoInput_addDirectoryFirst(dirName):
    return Coin_SWIG_Python.SoInput_addDirectoryFirst(dirName)

def SoInput_addDirectoryLast(dirName):
    return Coin_SWIG_Python.SoInput_addDirectoryLast(dirName)

def SoInput_addEnvDirectoriesFirst(*args):
    return Coin_SWIG_Python.SoInput_addEnvDirectoriesFirst(*args)

def SoInput_addEnvDirectoriesLast(*args):
    return Coin_SWIG_Python.SoInput_addEnvDirectoriesLast(*args)

def SoInput_removeDirectory(dirName):
    return Coin_SWIG_Python.SoInput_removeDirectory(dirName)

def SoInput_clearDirectories():
    return Coin_SWIG_Python.SoInput_clearDirectories()

def SoInput_getDirectories():
    return Coin_SWIG_Python.SoInput_getDirectories()

def SoInput_init():
    return Coin_SWIG_Python.SoInput_init()

def SoInput_getPathname(*args):
    return Coin_SWIG_Python.SoInput_getPathname(*args)

def SoInput_getBasename(*args):
    return Coin_SWIG_Python.SoInput_getBasename(*args)

def SoInput_searchForFile(basename, directories, subdirectories):
    return Coin_SWIG_Python.SoInput_searchForFile(basename, directories, subdirectories)

class SoOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    COUNT_REFS = Coin_SWIG_Python.SoOutput_COUNT_REFS
    WRITE = Coin_SWIG_Python.SoOutput_WRITE
    ADDRESSES = Coin_SWIG_Python.SoOutput_ADDRESSES
    REF_COUNTS = Coin_SWIG_Python.SoOutput_REF_COUNTS

    def __init__(self, *args):
        Coin_SWIG_Python.SoOutput_swiginit(self, Coin_SWIG_Python.new_SoOutput(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOutput

    def setFilePointer(self, newFP):
        return Coin_SWIG_Python.SoOutput_setFilePointer(self, newFP)

    def getFilePointer(self):
        return Coin_SWIG_Python.SoOutput_getFilePointer(self)

    def openFile(self, fileName):
        return Coin_SWIG_Python.SoOutput_openFile(self, fileName)

    def closeFile(self):
        return Coin_SWIG_Python.SoOutput_closeFile(self)

    def setCompression(self, compmethod, level=0.5):
        return Coin_SWIG_Python.SoOutput_setCompression(self, compmethod, level)

    @staticmethod
    def getAvailableCompressionMethods(num):
        return Coin_SWIG_Python.SoOutput_getAvailableCompressionMethods(num)

    def setBuffer(self, bufPointer, initSize, reallocFunc, offset=0):
        return Coin_SWIG_Python.SoOutput_setBuffer(self, bufPointer, initSize, reallocFunc, offset)

    def getBuffer(self, bufPointer, nBytes):
        return Coin_SWIG_Python.SoOutput_getBuffer(self, bufPointer, nBytes)

    def getBufferSize(self):
        return Coin_SWIG_Python.SoOutput_getBufferSize(self)

    def resetBuffer(self):
        return Coin_SWIG_Python.SoOutput_resetBuffer(self)

    def setBinary(self, flag):
        return Coin_SWIG_Python.SoOutput_setBinary(self, flag)

    def isBinary(self):
        return Coin_SWIG_Python.SoOutput_isBinary(self)

    def setHeaderString(self, str):
        return Coin_SWIG_Python.SoOutput_setHeaderString(self, str)

    def resetHeaderString(self):
        return Coin_SWIG_Python.SoOutput_resetHeaderString(self)

    def setFloatPrecision(self, precision):
        return Coin_SWIG_Python.SoOutput_setFloatPrecision(self, precision)

    def setStage(self, stage):
        return Coin_SWIG_Python.SoOutput_setStage(self, stage)

    def getStage(self):
        return Coin_SWIG_Python.SoOutput_getStage(self)

    def incrementIndent(self, levels=1):
        return Coin_SWIG_Python.SoOutput_incrementIndent(self, levels)

    def decrementIndent(self, levels=1):
        return Coin_SWIG_Python.SoOutput_decrementIndent(self, levels)

    def write(self, *args):
        return Coin_SWIG_Python.SoOutput_write(self, *args)

    def writeBinaryArray(self, *args):
        return Coin_SWIG_Python.SoOutput_writeBinaryArray(self, *args)

    def indent(self):
        return Coin_SWIG_Python.SoOutput_indent(self)

    def reset(self):
        return Coin_SWIG_Python.SoOutput_reset(self)

    def setCompact(self, flag):
        return Coin_SWIG_Python.SoOutput_setCompact(self, flag)

    def isCompact(self):
        return Coin_SWIG_Python.SoOutput_isCompact(self)

    def setAnnotation(self, bits):
        return Coin_SWIG_Python.SoOutput_setAnnotation(self, bits)

    def getAnnotation(self):
        return Coin_SWIG_Python.SoOutput_getAnnotation(self)

    @staticmethod
    def getDefaultASCIIHeader():
        return Coin_SWIG_Python.SoOutput_getDefaultASCIIHeader()

    @staticmethod
    def getDefaultBinaryHeader():
        return Coin_SWIG_Python.SoOutput_getDefaultBinaryHeader()

    def addReference(self, base):
        return Coin_SWIG_Python.SoOutput_addReference(self, base)

    def findReference(self, base):
        return Coin_SWIG_Python.SoOutput_findReference(self, base)

    def setReference(self, base, refid):
        return Coin_SWIG_Python.SoOutput_setReference(self, base, refid)

    def addDEFNode(self, name):
        return Coin_SWIG_Python.SoOutput_addDEFNode(self, name)

    def lookupDEFNode(self, name):
        return Coin_SWIG_Python.SoOutput_lookupDEFNode(self, name)

    def removeDEFNode(self, name):
        return Coin_SWIG_Python.SoOutput_removeDEFNode(self, name)

    def pushProto(self, proto):
        return Coin_SWIG_Python.SoOutput_pushProto(self, proto)

    def getCurrentProto(self):
        return Coin_SWIG_Python.SoOutput_getCurrentProto(self)

    def popProto(self):
        return Coin_SWIG_Python.SoOutput_popProto(self)

    def addRoute(self, srcFrom, fromfield, destTo, tofield):
        return Coin_SWIG_Python.SoOutput_addRoute(self, srcFrom, fromfield, destTo, tofield)

    def resolveRoutes(self):
        return Coin_SWIG_Python.SoOutput_resolveRoutes(self)

# Register SoOutput in Coin_SWIG_Python:
Coin_SWIG_Python.SoOutput_swigregister(SoOutput)

def SoOutput_getAvailableCompressionMethods(num):
    return Coin_SWIG_Python.SoOutput_getAvailableCompressionMethods(num)

def SoOutput_getDefaultASCIIHeader():
    return Coin_SWIG_Python.SoOutput_getDefaultASCIIHeader()

def SoOutput_getDefaultBinaryHeader():
    return Coin_SWIG_Python.SoOutput_getDefaultBinaryHeader()

class SoSFEnum(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFEnum_swiginit(self, Coin_SWIG_Python.new_SoSFEnum())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFEnum

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFEnum_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFEnum_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFEnum_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFEnum_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFEnum_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFEnum_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFEnum___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFEnum___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFEnum_initClass()

    def setEnums(self, num, vals, names):
        return Coin_SWIG_Python.SoSFEnum_setEnums(self, num, vals, names)

    def getNumEnums(self):
        return Coin_SWIG_Python.SoSFEnum_getNumEnums(self)

    def getEnum(self, idx, name):
        return Coin_SWIG_Python.SoSFEnum_getEnum(self, idx, name)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFEnum_setValue(self, *args)

# Register SoSFEnum in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFEnum_swigregister(SoSFEnum)

def SoSFEnum_createInstance():
    return Coin_SWIG_Python.SoSFEnum_createInstance()

def SoSFEnum_getClassTypeId():
    return Coin_SWIG_Python.SoSFEnum_getClassTypeId()

def SoSFEnum_initClass():
    return Coin_SWIG_Python.SoSFEnum_initClass()

class SoSFFloat(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFFloat_swiginit(self, Coin_SWIG_Python.new_SoSFFloat())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFFloat

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFFloat_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFFloat_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFFloat_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFFloat_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFFloat_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFFloat_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFFloat___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFFloat___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFFloat_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFFloat_setValue(self, *args)

# Register SoSFFloat in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFFloat_swigregister(SoSFFloat)

def SoSFFloat_createInstance():
    return Coin_SWIG_Python.SoSFFloat_createInstance()

def SoSFFloat_getClassTypeId():
    return Coin_SWIG_Python.SoSFFloat_getClassTypeId()

def SoSFFloat_initClass():
    return Coin_SWIG_Python.SoSFFloat_initClass()

class SoComplexityTypeElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComplexityTypeElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoComplexityTypeElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComplexityTypeElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComplexityTypeElement_initClass()
    OBJECT_SPACE = Coin_SWIG_Python.SoComplexityTypeElement_OBJECT_SPACE
    SCREEN_SPACE = Coin_SWIG_Python.SoComplexityTypeElement_SCREEN_SPACE
    BOUNDING_BOX = Coin_SWIG_Python.SoComplexityTypeElement_BOUNDING_BOX

    def init(self, state):
        return Coin_SWIG_Python.SoComplexityTypeElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoComplexityTypeElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoComplexityTypeElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoComplexityTypeElement_getDefault()

# Register SoComplexityTypeElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoComplexityTypeElement_swigregister(SoComplexityTypeElement)

def SoComplexityTypeElement_getClassTypeId():
    return Coin_SWIG_Python.SoComplexityTypeElement_getClassTypeId()

def SoComplexityTypeElement_getClassStackIndex():
    return Coin_SWIG_Python.SoComplexityTypeElement_getClassStackIndex()

def SoComplexityTypeElement_createInstance():
    return Coin_SWIG_Python.SoComplexityTypeElement_createInstance()

def SoComplexityTypeElement_initClass():
    return Coin_SWIG_Python.SoComplexityTypeElement_initClass()

def SoComplexityTypeElement_set(*args):
    return Coin_SWIG_Python.SoComplexityTypeElement_set(*args)

def SoComplexityTypeElement_get(state):
    return Coin_SWIG_Python.SoComplexityTypeElement_get(state)

def SoComplexityTypeElement_getDefault():
    return Coin_SWIG_Python.SoComplexityTypeElement_getDefault()

class SoComplexity(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComplexity_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComplexity_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComplexity_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoComplexity_swiginit(self, Coin_SWIG_Python.new_SoComplexity())
    OBJECT_SPACE = Coin_SWIG_Python.SoComplexity_OBJECT_SPACE
    SCREEN_SPACE = Coin_SWIG_Python.SoComplexity_SCREEN_SPACE
    BOUNDING_BOX = Coin_SWIG_Python.SoComplexity_BOUNDING_BOX
    type = property(Coin_SWIG_Python.SoComplexity_type_get, Coin_SWIG_Python.SoComplexity_type_set)
    value = property(Coin_SWIG_Python.SoComplexity_value_get, Coin_SWIG_Python.SoComplexity_value_set)
    textureQuality = property(Coin_SWIG_Python.SoComplexity_textureQuality_get, Coin_SWIG_Python.SoComplexity_textureQuality_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoComplexity_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoComplexity_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoComplexity_getBoundingBox(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoComplexity_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoComplexity_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoComplexity_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComplexity

# Register SoComplexity in Coin_SWIG_Python:
Coin_SWIG_Python.SoComplexity_swigregister(SoComplexity)

def SoComplexity_getClassTypeId():
    return Coin_SWIG_Python.SoComplexity_getClassTypeId()

def SoComplexity_initClass():
    return Coin_SWIG_Python.SoComplexity_initClass()

class SoDrawStyleElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDrawStyleElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoDrawStyleElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDrawStyleElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDrawStyleElement_initClass()
    FILLED = Coin_SWIG_Python.SoDrawStyleElement_FILLED
    LINES = Coin_SWIG_Python.SoDrawStyleElement_LINES
    POINTS = Coin_SWIG_Python.SoDrawStyleElement_POINTS
    INVISIBLE = Coin_SWIG_Python.SoDrawStyleElement_INVISIBLE

    def init(self, state):
        return Coin_SWIG_Python.SoDrawStyleElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoDrawStyleElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoDrawStyleElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoDrawStyleElement_getDefault()

# Register SoDrawStyleElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoDrawStyleElement_swigregister(SoDrawStyleElement)

def SoDrawStyleElement_getClassTypeId():
    return Coin_SWIG_Python.SoDrawStyleElement_getClassTypeId()

def SoDrawStyleElement_getClassStackIndex():
    return Coin_SWIG_Python.SoDrawStyleElement_getClassStackIndex()

def SoDrawStyleElement_createInstance():
    return Coin_SWIG_Python.SoDrawStyleElement_createInstance()

def SoDrawStyleElement_initClass():
    return Coin_SWIG_Python.SoDrawStyleElement_initClass()

def SoDrawStyleElement_set(*args):
    return Coin_SWIG_Python.SoDrawStyleElement_set(*args)

def SoDrawStyleElement_get(state):
    return Coin_SWIG_Python.SoDrawStyleElement_get(state)

def SoDrawStyleElement_getDefault():
    return Coin_SWIG_Python.SoDrawStyleElement_getDefault()

class SoSFUShort(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFUShort_swiginit(self, Coin_SWIG_Python.new_SoSFUShort())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFUShort

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFUShort_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFUShort_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFUShort_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFUShort_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFUShort_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFUShort_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFUShort___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFUShort___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFUShort_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFUShort_setValue(self, *args)

# Register SoSFUShort in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFUShort_swigregister(SoSFUShort)

def SoSFUShort_createInstance():
    return Coin_SWIG_Python.SoSFUShort_createInstance()

def SoSFUShort_getClassTypeId():
    return Coin_SWIG_Python.SoSFUShort_getClassTypeId()

def SoSFUShort_initClass():
    return Coin_SWIG_Python.SoSFUShort_initClass()

class SoDrawStyle(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDrawStyle_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDrawStyle_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDrawStyle_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoDrawStyle_swiginit(self, Coin_SWIG_Python.new_SoDrawStyle())
    FILLED = Coin_SWIG_Python.SoDrawStyle_FILLED
    LINES = Coin_SWIG_Python.SoDrawStyle_LINES
    POINTS = Coin_SWIG_Python.SoDrawStyle_POINTS
    INVISIBLE = Coin_SWIG_Python.SoDrawStyle_INVISIBLE
    style = property(Coin_SWIG_Python.SoDrawStyle_style_get, Coin_SWIG_Python.SoDrawStyle_style_set)
    pointSize = property(Coin_SWIG_Python.SoDrawStyle_pointSize_get, Coin_SWIG_Python.SoDrawStyle_pointSize_set)
    lineWidth = property(Coin_SWIG_Python.SoDrawStyle_lineWidth_get, Coin_SWIG_Python.SoDrawStyle_lineWidth_set)
    linePattern = property(Coin_SWIG_Python.SoDrawStyle_linePattern_get, Coin_SWIG_Python.SoDrawStyle_linePattern_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoDrawStyle_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoDrawStyle_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoDrawStyle_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDrawStyle

# Register SoDrawStyle in Coin_SWIG_Python:
Coin_SWIG_Python.SoDrawStyle_swigregister(SoDrawStyle)

def SoDrawStyle_getClassTypeId():
    return Coin_SWIG_Python.SoDrawStyle_getClassTypeId()

def SoDrawStyle_initClass():
    return Coin_SWIG_Python.SoDrawStyle_initClass()

class SbVec3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec3f_swiginit(self, Coin_SWIG_Python.new_SbVec3f(*args))

    def cross(self, v):
        return Coin_SWIG_Python.SbVec3f_cross(self, v)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec3f_dot(self, v)

    def equals(self, v, tolerance):
        return Coin_SWIG_Python.SbVec3f_equals(self, v, tolerance)

    def getClosestAxis(self):
        return Coin_SWIG_Python.SbVec3f_getClosestAxis(self)

    def getValue(self):
        return Coin_SWIG_Python.SbVec3f_getValue(self)

    def length(self):
        return Coin_SWIG_Python.SbVec3f_length(self)

    def sqrLength(self):
        return Coin_SWIG_Python.SbVec3f_sqrLength(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec3f_negate(self)

    def normalize(self):
        return Coin_SWIG_Python.SbVec3f_normalize(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec3f_setValue(self, *args)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbVec3f___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec3f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec3f___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec3f___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec3f___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec3f_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec3f___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec3f___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec3f___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec3f___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec3f___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec3f___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec3f___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec3f___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec3f___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3f

# Register SbVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec3f_swigregister(SbVec3f)

class SbColor(SbVec3f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbColor_swiginit(self, Coin_SWIG_Python.new_SbColor(*args))

    def setHSVValue(self, *args):
        return Coin_SWIG_Python.SbColor_setHSVValue(self, *args)

    def getHSVValue(self):
        return Coin_SWIG_Python.SbColor_getHSVValue(self)

    def setPackedValue(self, rgba, transparency):
        return Coin_SWIG_Python.SbColor_setPackedValue(self, rgba, transparency)

    def getPackedValue(self, transparency=0.0):
        return Coin_SWIG_Python.SbColor_getPackedValue(self, transparency)

    def __add__(self, u):
        return Coin_SWIG_Python.SbColor___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbColor___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbColor___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbColor___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbColor___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbColor___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbColor___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbColor___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbColor___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbColor

# Register SbColor in Coin_SWIG_Python:
Coin_SWIG_Python.SbColor_swigregister(SbColor)

SO_LAZY_SHINY_THRESHOLD = Coin_SWIG_Python.SO_LAZY_SHINY_THRESHOLD
class SoLazyElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLazyElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLazyElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLazyElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLazyElement_initClass()
    LIGHT_MODEL_CASE = Coin_SWIG_Python.SoLazyElement_LIGHT_MODEL_CASE
    COLOR_MATERIAL_CASE = Coin_SWIG_Python.SoLazyElement_COLOR_MATERIAL_CASE
    DIFFUSE_CASE = Coin_SWIG_Python.SoLazyElement_DIFFUSE_CASE
    AMBIENT_CASE = Coin_SWIG_Python.SoLazyElement_AMBIENT_CASE
    EMISSIVE_CASE = Coin_SWIG_Python.SoLazyElement_EMISSIVE_CASE
    SPECULAR_CASE = Coin_SWIG_Python.SoLazyElement_SPECULAR_CASE
    SHININESS_CASE = Coin_SWIG_Python.SoLazyElement_SHININESS_CASE
    BLENDING_CASE = Coin_SWIG_Python.SoLazyElement_BLENDING_CASE
    TRANSPARENCY_CASE = Coin_SWIG_Python.SoLazyElement_TRANSPARENCY_CASE
    VERTEXORDERING_CASE = Coin_SWIG_Python.SoLazyElement_VERTEXORDERING_CASE
    TWOSIDE_CASE = Coin_SWIG_Python.SoLazyElement_TWOSIDE_CASE
    CULLING_CASE = Coin_SWIG_Python.SoLazyElement_CULLING_CASE
    SHADE_MODEL_CASE = Coin_SWIG_Python.SoLazyElement_SHADE_MODEL_CASE
    GLIMAGE_CASE = Coin_SWIG_Python.SoLazyElement_GLIMAGE_CASE
    ALPHATEST_CASE = Coin_SWIG_Python.SoLazyElement_ALPHATEST_CASE
    LAZYCASES_LAST = Coin_SWIG_Python.SoLazyElement_LAZYCASES_LAST
    LIGHT_MODEL_MASK = Coin_SWIG_Python.SoLazyElement_LIGHT_MODEL_MASK
    COLOR_MATERIAL_MASK = Coin_SWIG_Python.SoLazyElement_COLOR_MATERIAL_MASK
    DIFFUSE_MASK = Coin_SWIG_Python.SoLazyElement_DIFFUSE_MASK
    AMBIENT_MASK = Coin_SWIG_Python.SoLazyElement_AMBIENT_MASK
    EMISSIVE_MASK = Coin_SWIG_Python.SoLazyElement_EMISSIVE_MASK
    SPECULAR_MASK = Coin_SWIG_Python.SoLazyElement_SPECULAR_MASK
    SHININESS_MASK = Coin_SWIG_Python.SoLazyElement_SHININESS_MASK
    TRANSPARENCY_MASK = Coin_SWIG_Python.SoLazyElement_TRANSPARENCY_MASK
    BLENDING_MASK = Coin_SWIG_Python.SoLazyElement_BLENDING_MASK
    VERTEXORDERING_MASK = Coin_SWIG_Python.SoLazyElement_VERTEXORDERING_MASK
    TWOSIDE_MASK = Coin_SWIG_Python.SoLazyElement_TWOSIDE_MASK
    CULLING_MASK = Coin_SWIG_Python.SoLazyElement_CULLING_MASK
    SHADE_MODEL_MASK = Coin_SWIG_Python.SoLazyElement_SHADE_MODEL_MASK
    GLIMAGE_MASK = Coin_SWIG_Python.SoLazyElement_GLIMAGE_MASK
    ALPHATEST_MASK = Coin_SWIG_Python.SoLazyElement_ALPHATEST_MASK
    ALL_MASK = Coin_SWIG_Python.SoLazyElement_ALL_MASK
    OTHER_COLOR_MASK = Coin_SWIG_Python.SoLazyElement_OTHER_COLOR_MASK
    ALL_COLOR_MASK = Coin_SWIG_Python.SoLazyElement_ALL_COLOR_MASK
    NO_COLOR_MASK = Coin_SWIG_Python.SoLazyElement_NO_COLOR_MASK
    ALL_BUT_DIFFUSE_MASK = Coin_SWIG_Python.SoLazyElement_ALL_BUT_DIFFUSE_MASK
    DIFFUSE_ONLY_MASK = Coin_SWIG_Python.SoLazyElement_DIFFUSE_ONLY_MASK
    BASE_COLOR = Coin_SWIG_Python.SoLazyElement_BASE_COLOR
    PHONG = Coin_SWIG_Python.SoLazyElement_PHONG
    CW = Coin_SWIG_Python.SoLazyElement_CW
    CCW = Coin_SWIG_Python.SoLazyElement_CCW

    def init(self, state):
        return Coin_SWIG_Python.SoLazyElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoLazyElement_push(self, state)

    def matches(self, arg2):
        return Coin_SWIG_Python.SoLazyElement_matches(self, arg2)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoLazyElement_copyMatchInfo(self)

    @staticmethod
    def setDiffuse(state, node, numcolors, colors, packer):
        return Coin_SWIG_Python.SoLazyElement_setDiffuse(state, node, numcolors, colors, packer)

    @staticmethod
    def setTransparency(state, node, numvalues, transparency, packer):
        return Coin_SWIG_Python.SoLazyElement_setTransparency(state, node, numvalues, transparency, packer)

    @staticmethod
    def setColorIndices(state, node, numindices, indices):
        return Coin_SWIG_Python.SoLazyElement_setColorIndices(state, node, numindices, indices)

    @staticmethod
    def setAmbient(state, color):
        return Coin_SWIG_Python.SoLazyElement_setAmbient(state, color)

    @staticmethod
    def setEmissive(state, color):
        return Coin_SWIG_Python.SoLazyElement_setEmissive(state, color)

    @staticmethod
    def setSpecular(state, color):
        return Coin_SWIG_Python.SoLazyElement_setSpecular(state, color)

    @staticmethod
    def setShininess(state, value):
        return Coin_SWIG_Python.SoLazyElement_setShininess(state, value)

    @staticmethod
    def setColorMaterial(state, value):
        return Coin_SWIG_Python.SoLazyElement_setColorMaterial(state, value)

    @staticmethod
    def enableBlending(state, sfactor, dfactor):
        return Coin_SWIG_Python.SoLazyElement_enableBlending(state, sfactor, dfactor)

    @staticmethod
    def disableBlending(state):
        return Coin_SWIG_Python.SoLazyElement_disableBlending(state)

    @staticmethod
    def setLightModel(state, model):
        return Coin_SWIG_Python.SoLazyElement_setLightModel(state, model)

    @staticmethod
    def setVertexOrdering(state, ordering):
        return Coin_SWIG_Python.SoLazyElement_setVertexOrdering(state, ordering)

    @staticmethod
    def setBackfaceCulling(state, onoff):
        return Coin_SWIG_Python.SoLazyElement_setBackfaceCulling(state, onoff)

    @staticmethod
    def setTwosideLighting(state, onoff):
        return Coin_SWIG_Python.SoLazyElement_setTwosideLighting(state, onoff)

    @staticmethod
    def setShadeModel(state, flatshading):
        return Coin_SWIG_Python.SoLazyElement_setShadeModel(state, flatshading)

    @staticmethod
    def setGLImageId(state, glimageid, alphatest):
        return Coin_SWIG_Python.SoLazyElement_setGLImageId(state, glimageid, alphatest)

    @staticmethod
    def setAlphaTest(state, onoff):
        return Coin_SWIG_Python.SoLazyElement_setAlphaTest(state, onoff)

    @staticmethod
    def getDiffuse(state, index):
        return Coin_SWIG_Python.SoLazyElement_getDiffuse(state, index)

    @staticmethod
    def getTransparency(arg1, index):
        return Coin_SWIG_Python.SoLazyElement_getTransparency(arg1, index)

    @staticmethod
    def getPackedColors(arg1):
        return Coin_SWIG_Python.SoLazyElement_getPackedColors(arg1)

    @staticmethod
    def getColorIndices(arg1):
        return Coin_SWIG_Python.SoLazyElement_getColorIndices(arg1)

    @staticmethod
    def getColorIndex(arg1, num):
        return Coin_SWIG_Python.SoLazyElement_getColorIndex(arg1, num)

    @staticmethod
    def getAmbient(arg1):
        return Coin_SWIG_Python.SoLazyElement_getAmbient(arg1)

    @staticmethod
    def getEmissive(arg1):
        return Coin_SWIG_Python.SoLazyElement_getEmissive(arg1)

    @staticmethod
    def getSpecular(arg1):
        return Coin_SWIG_Python.SoLazyElement_getSpecular(arg1)

    @staticmethod
    def getShininess(arg1):
        return Coin_SWIG_Python.SoLazyElement_getShininess(arg1)

    @staticmethod
    def getColorMaterial(arg1):
        return Coin_SWIG_Python.SoLazyElement_getColorMaterial(arg1)

    @staticmethod
    def getBlending(arg1, sfactor, dfactor):
        return Coin_SWIG_Python.SoLazyElement_getBlending(arg1, sfactor, dfactor)

    @staticmethod
    def getLightModel(arg1):
        return Coin_SWIG_Python.SoLazyElement_getLightModel(arg1)

    @staticmethod
    def getAlphaTest(state):
        return Coin_SWIG_Python.SoLazyElement_getAlphaTest(state)

    def getNumDiffuse(self):
        return Coin_SWIG_Python.SoLazyElement_getNumDiffuse(self)

    def getNumTransparencies(self):
        return Coin_SWIG_Python.SoLazyElement_getNumTransparencies(self)

    def getNumColorIndices(self):
        return Coin_SWIG_Python.SoLazyElement_getNumColorIndices(self)

    def isPacked(self):
        return Coin_SWIG_Python.SoLazyElement_isPacked(self)

    def isTransparent(self):
        return Coin_SWIG_Python.SoLazyElement_isTransparent(self)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoLazyElement_getInstance(state)

    @staticmethod
    def getDefaultAmbientIntensity():
        return Coin_SWIG_Python.SoLazyElement_getDefaultAmbientIntensity()

    @staticmethod
    def getDefaultDiffuse():
        return Coin_SWIG_Python.SoLazyElement_getDefaultDiffuse()

    @staticmethod
    def getDefaultAmbient():
        return Coin_SWIG_Python.SoLazyElement_getDefaultAmbient()

    @staticmethod
    def getDefaultSpecular():
        return Coin_SWIG_Python.SoLazyElement_getDefaultSpecular()

    @staticmethod
    def getDefaultEmissive():
        return Coin_SWIG_Python.SoLazyElement_getDefaultEmissive()

    @staticmethod
    def getDefaultShininess():
        return Coin_SWIG_Python.SoLazyElement_getDefaultShininess()

    @staticmethod
    def getDefaultPacked():
        return Coin_SWIG_Python.SoLazyElement_getDefaultPacked()

    @staticmethod
    def getDefaultTransparency():
        return Coin_SWIG_Python.SoLazyElement_getDefaultTransparency()

    @staticmethod
    def getDefaultLightModel():
        return Coin_SWIG_Python.SoLazyElement_getDefaultLightModel()

    @staticmethod
    def getDefaultColorIndex():
        return Coin_SWIG_Python.SoLazyElement_getDefaultColorIndex()

    @staticmethod
    def setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent):
        return Coin_SWIG_Python.SoLazyElement_setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent)

    @staticmethod
    def getWInstance(state):
        return Coin_SWIG_Python.SoLazyElement_getWInstance(state)

    def getPackedPointer(self):
        return Coin_SWIG_Python.SoLazyElement_getPackedPointer(self)

    def getDiffusePointer(self):
        return Coin_SWIG_Python.SoLazyElement_getDiffusePointer(self)

    def getColorIndexPointer(self):
        return Coin_SWIG_Python.SoLazyElement_getColorIndexPointer(self)

    def getTransparencyPointer(self):
        return Coin_SWIG_Python.SoLazyElement_getTransparencyPointer(self)

    @staticmethod
    def setTransparencyType(state, type):
        return Coin_SWIG_Python.SoLazyElement_setTransparencyType(state, type)

# Register SoLazyElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLazyElement_swigregister(SoLazyElement)

def SoLazyElement_getClassTypeId():
    return Coin_SWIG_Python.SoLazyElement_getClassTypeId()

def SoLazyElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLazyElement_getClassStackIndex()

def SoLazyElement_createInstance():
    return Coin_SWIG_Python.SoLazyElement_createInstance()

def SoLazyElement_initClass():
    return Coin_SWIG_Python.SoLazyElement_initClass()

def SoLazyElement_setDiffuse(state, node, numcolors, colors, packer):
    return Coin_SWIG_Python.SoLazyElement_setDiffuse(state, node, numcolors, colors, packer)

def SoLazyElement_setTransparency(state, node, numvalues, transparency, packer):
    return Coin_SWIG_Python.SoLazyElement_setTransparency(state, node, numvalues, transparency, packer)

def SoLazyElement_setColorIndices(state, node, numindices, indices):
    return Coin_SWIG_Python.SoLazyElement_setColorIndices(state, node, numindices, indices)

def SoLazyElement_setAmbient(state, color):
    return Coin_SWIG_Python.SoLazyElement_setAmbient(state, color)

def SoLazyElement_setEmissive(state, color):
    return Coin_SWIG_Python.SoLazyElement_setEmissive(state, color)

def SoLazyElement_setSpecular(state, color):
    return Coin_SWIG_Python.SoLazyElement_setSpecular(state, color)

def SoLazyElement_setShininess(state, value):
    return Coin_SWIG_Python.SoLazyElement_setShininess(state, value)

def SoLazyElement_setColorMaterial(state, value):
    return Coin_SWIG_Python.SoLazyElement_setColorMaterial(state, value)

def SoLazyElement_enableBlending(state, sfactor, dfactor):
    return Coin_SWIG_Python.SoLazyElement_enableBlending(state, sfactor, dfactor)

def SoLazyElement_disableBlending(state):
    return Coin_SWIG_Python.SoLazyElement_disableBlending(state)

def SoLazyElement_setLightModel(state, model):
    return Coin_SWIG_Python.SoLazyElement_setLightModel(state, model)

def SoLazyElement_setVertexOrdering(state, ordering):
    return Coin_SWIG_Python.SoLazyElement_setVertexOrdering(state, ordering)

def SoLazyElement_setBackfaceCulling(state, onoff):
    return Coin_SWIG_Python.SoLazyElement_setBackfaceCulling(state, onoff)

def SoLazyElement_setTwosideLighting(state, onoff):
    return Coin_SWIG_Python.SoLazyElement_setTwosideLighting(state, onoff)

def SoLazyElement_setShadeModel(state, flatshading):
    return Coin_SWIG_Python.SoLazyElement_setShadeModel(state, flatshading)

def SoLazyElement_setGLImageId(state, glimageid, alphatest):
    return Coin_SWIG_Python.SoLazyElement_setGLImageId(state, glimageid, alphatest)

def SoLazyElement_setAlphaTest(state, onoff):
    return Coin_SWIG_Python.SoLazyElement_setAlphaTest(state, onoff)

def SoLazyElement_getDiffuse(state, index):
    return Coin_SWIG_Python.SoLazyElement_getDiffuse(state, index)

def SoLazyElement_getTransparency(arg1, index):
    return Coin_SWIG_Python.SoLazyElement_getTransparency(arg1, index)

def SoLazyElement_getPackedColors(arg1):
    return Coin_SWIG_Python.SoLazyElement_getPackedColors(arg1)

def SoLazyElement_getColorIndices(arg1):
    return Coin_SWIG_Python.SoLazyElement_getColorIndices(arg1)

def SoLazyElement_getColorIndex(arg1, num):
    return Coin_SWIG_Python.SoLazyElement_getColorIndex(arg1, num)

def SoLazyElement_getAmbient(arg1):
    return Coin_SWIG_Python.SoLazyElement_getAmbient(arg1)

def SoLazyElement_getEmissive(arg1):
    return Coin_SWIG_Python.SoLazyElement_getEmissive(arg1)

def SoLazyElement_getSpecular(arg1):
    return Coin_SWIG_Python.SoLazyElement_getSpecular(arg1)

def SoLazyElement_getShininess(arg1):
    return Coin_SWIG_Python.SoLazyElement_getShininess(arg1)

def SoLazyElement_getColorMaterial(arg1):
    return Coin_SWIG_Python.SoLazyElement_getColorMaterial(arg1)

def SoLazyElement_getBlending(arg1, sfactor, dfactor):
    return Coin_SWIG_Python.SoLazyElement_getBlending(arg1, sfactor, dfactor)

def SoLazyElement_getLightModel(arg1):
    return Coin_SWIG_Python.SoLazyElement_getLightModel(arg1)

def SoLazyElement_getAlphaTest(state):
    return Coin_SWIG_Python.SoLazyElement_getAlphaTest(state)

def SoLazyElement_getInstance(state):
    return Coin_SWIG_Python.SoLazyElement_getInstance(state)

def SoLazyElement_getDefaultAmbientIntensity():
    return Coin_SWIG_Python.SoLazyElement_getDefaultAmbientIntensity()

def SoLazyElement_getDefaultDiffuse():
    return Coin_SWIG_Python.SoLazyElement_getDefaultDiffuse()

def SoLazyElement_getDefaultAmbient():
    return Coin_SWIG_Python.SoLazyElement_getDefaultAmbient()

def SoLazyElement_getDefaultSpecular():
    return Coin_SWIG_Python.SoLazyElement_getDefaultSpecular()

def SoLazyElement_getDefaultEmissive():
    return Coin_SWIG_Python.SoLazyElement_getDefaultEmissive()

def SoLazyElement_getDefaultShininess():
    return Coin_SWIG_Python.SoLazyElement_getDefaultShininess()

def SoLazyElement_getDefaultPacked():
    return Coin_SWIG_Python.SoLazyElement_getDefaultPacked()

def SoLazyElement_getDefaultTransparency():
    return Coin_SWIG_Python.SoLazyElement_getDefaultTransparency()

def SoLazyElement_getDefaultLightModel():
    return Coin_SWIG_Python.SoLazyElement_getDefaultLightModel()

def SoLazyElement_getDefaultColorIndex():
    return Coin_SWIG_Python.SoLazyElement_getDefaultColorIndex()

def SoLazyElement_setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent):
    return Coin_SWIG_Python.SoLazyElement_setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent)

def SoLazyElement_getWInstance(state):
    return Coin_SWIG_Python.SoLazyElement_getWInstance(state)

def SoLazyElement_setTransparencyType(state, type):
    return Coin_SWIG_Python.SoLazyElement_setTransparencyType(state, type)

class SoColorPacker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoColorPacker_swiginit(self, Coin_SWIG_Python.new_SoColorPacker())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoColorPacker

    def getPackedColors(self):
        return Coin_SWIG_Python.SoColorPacker_getPackedColors(self)

    def diffuseMatch(self, nodeid):
        return Coin_SWIG_Python.SoColorPacker_diffuseMatch(self, nodeid)

    def transpMatch(self, nodeid):
        return Coin_SWIG_Python.SoColorPacker_transpMatch(self, nodeid)

    def setNodeIds(self, diffuse, transp):
        return Coin_SWIG_Python.SoColorPacker_setNodeIds(self, diffuse, transp)

    def getSize(self):
        return Coin_SWIG_Python.SoColorPacker_getSize(self)

    def reallocate(self, size):
        return Coin_SWIG_Python.SoColorPacker_reallocate(self, size)

# Register SoColorPacker in Coin_SWIG_Python:
Coin_SWIG_Python.SoColorPacker_swigregister(SoColorPacker)

class SoLightModel(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLightModel_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLightModel_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLightModel_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoLightModel_swiginit(self, Coin_SWIG_Python.new_SoLightModel())
    BASE_COLOR = Coin_SWIG_Python.SoLightModel_BASE_COLOR
    PHONG = Coin_SWIG_Python.SoLightModel_PHONG
    model = property(Coin_SWIG_Python.SoLightModel_model_get, Coin_SWIG_Python.SoLightModel_model_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoLightModel_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoLightModel_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoLightModel_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLightModel

# Register SoLightModel in Coin_SWIG_Python:
Coin_SWIG_Python.SoLightModel_swigregister(SoLightModel)

def SoLightModel_getClassTypeId():
    return Coin_SWIG_Python.SoLightModel_getClassTypeId()

def SoLightModel_initClass():
    return Coin_SWIG_Python.SoLightModel_initClass()

class SoMaterialBindingElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMaterialBindingElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoMaterialBindingElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMaterialBindingElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMaterialBindingElement_initClass()
    OVERALL = Coin_SWIG_Python.SoMaterialBindingElement_OVERALL
    PER_PART = Coin_SWIG_Python.SoMaterialBindingElement_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoMaterialBindingElement_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoMaterialBindingElement_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoMaterialBindingElement_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoMaterialBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoMaterialBindingElement_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoMaterialBindingElement_DEFAULT
    NONE = Coin_SWIG_Python.SoMaterialBindingElement_NONE

    def init(self, state):
        return Coin_SWIG_Python.SoMaterialBindingElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoMaterialBindingElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoMaterialBindingElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoMaterialBindingElement_getDefault()

# Register SoMaterialBindingElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoMaterialBindingElement_swigregister(SoMaterialBindingElement)

def SoMaterialBindingElement_getClassTypeId():
    return Coin_SWIG_Python.SoMaterialBindingElement_getClassTypeId()

def SoMaterialBindingElement_getClassStackIndex():
    return Coin_SWIG_Python.SoMaterialBindingElement_getClassStackIndex()

def SoMaterialBindingElement_createInstance():
    return Coin_SWIG_Python.SoMaterialBindingElement_createInstance()

def SoMaterialBindingElement_initClass():
    return Coin_SWIG_Python.SoMaterialBindingElement_initClass()

def SoMaterialBindingElement_set(*args):
    return Coin_SWIG_Python.SoMaterialBindingElement_set(*args)

def SoMaterialBindingElement_get(state):
    return Coin_SWIG_Python.SoMaterialBindingElement_get(state)

def SoMaterialBindingElement_getDefault():
    return Coin_SWIG_Python.SoMaterialBindingElement_getDefault()

class SoMaterialBinding(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMaterialBinding_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMaterialBinding_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMaterialBinding_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoMaterialBinding_swiginit(self, Coin_SWIG_Python.new_SoMaterialBinding())
    OVERALL = Coin_SWIG_Python.SoMaterialBinding_OVERALL
    PER_PART = Coin_SWIG_Python.SoMaterialBinding_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoMaterialBinding_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoMaterialBinding_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoMaterialBinding_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoMaterialBinding_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoMaterialBinding_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoMaterialBinding_DEFAULT
    NONE = Coin_SWIG_Python.SoMaterialBinding_NONE
    value = property(Coin_SWIG_Python.SoMaterialBinding_value_get, Coin_SWIG_Python.SoMaterialBinding_value_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoMaterialBinding_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoMaterialBinding_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoMaterialBinding_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoMaterialBinding_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoMaterialBinding_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMaterialBinding

# Register SoMaterialBinding in Coin_SWIG_Python:
Coin_SWIG_Python.SoMaterialBinding_swigregister(SoMaterialBinding)

def SoMaterialBinding_getClassTypeId():
    return Coin_SWIG_Python.SoMaterialBinding_getClassTypeId()

def SoMaterialBinding_initClass():
    return Coin_SWIG_Python.SoMaterialBinding_initClass()

class SoNormalBindingElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNormalBindingElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoNormalBindingElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoNormalBindingElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNormalBindingElement_initClass()
    OVERALL = Coin_SWIG_Python.SoNormalBindingElement_OVERALL
    PER_PART = Coin_SWIG_Python.SoNormalBindingElement_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoNormalBindingElement_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoNormalBindingElement_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoNormalBindingElement_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoNormalBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoNormalBindingElement_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoNormalBindingElement_DEFAULT
    NONE = Coin_SWIG_Python.SoNormalBindingElement_NONE

    def init(self, state):
        return Coin_SWIG_Python.SoNormalBindingElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoNormalBindingElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoNormalBindingElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoNormalBindingElement_getDefault()

# Register SoNormalBindingElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormalBindingElement_swigregister(SoNormalBindingElement)

def SoNormalBindingElement_getClassTypeId():
    return Coin_SWIG_Python.SoNormalBindingElement_getClassTypeId()

def SoNormalBindingElement_getClassStackIndex():
    return Coin_SWIG_Python.SoNormalBindingElement_getClassStackIndex()

def SoNormalBindingElement_createInstance():
    return Coin_SWIG_Python.SoNormalBindingElement_createInstance()

def SoNormalBindingElement_initClass():
    return Coin_SWIG_Python.SoNormalBindingElement_initClass()

def SoNormalBindingElement_set(*args):
    return Coin_SWIG_Python.SoNormalBindingElement_set(*args)

def SoNormalBindingElement_get(state):
    return Coin_SWIG_Python.SoNormalBindingElement_get(state)

def SoNormalBindingElement_getDefault():
    return Coin_SWIG_Python.SoNormalBindingElement_getDefault()

class SoNormalBinding(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNormalBinding_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNormalBinding_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNormalBinding_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNormalBinding_swiginit(self, Coin_SWIG_Python.new_SoNormalBinding())
    OVERALL = Coin_SWIG_Python.SoNormalBinding_OVERALL
    PER_PART = Coin_SWIG_Python.SoNormalBinding_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoNormalBinding_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoNormalBinding_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoNormalBinding_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoNormalBinding_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoNormalBinding_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoNormalBinding_DEFAULT
    NONE = Coin_SWIG_Python.SoNormalBinding_NONE
    value = property(Coin_SWIG_Python.SoNormalBinding_value_get, Coin_SWIG_Python.SoNormalBinding_value_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoNormalBinding_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoNormalBinding_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoNormalBinding_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoNormalBinding_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoNormalBinding_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalBinding

# Register SoNormalBinding in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormalBinding_swigregister(SoNormalBinding)

def SoNormalBinding_getClassTypeId():
    return Coin_SWIG_Python.SoNormalBinding_getClassTypeId()

def SoNormalBinding_initClass():
    return Coin_SWIG_Python.SoNormalBinding_initClass()

class SoPickStyleElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPickStyleElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoPickStyleElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoPickStyleElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPickStyleElement_initClass()
    SHAPE = Coin_SWIG_Python.SoPickStyleElement_SHAPE
    BOUNDING_BOX = Coin_SWIG_Python.SoPickStyleElement_BOUNDING_BOX
    UNPICKABLE = Coin_SWIG_Python.SoPickStyleElement_UNPICKABLE

    def init(self, state):
        return Coin_SWIG_Python.SoPickStyleElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoPickStyleElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoPickStyleElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoPickStyleElement_getDefault()

# Register SoPickStyleElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoPickStyleElement_swigregister(SoPickStyleElement)

def SoPickStyleElement_getClassTypeId():
    return Coin_SWIG_Python.SoPickStyleElement_getClassTypeId()

def SoPickStyleElement_getClassStackIndex():
    return Coin_SWIG_Python.SoPickStyleElement_getClassStackIndex()

def SoPickStyleElement_createInstance():
    return Coin_SWIG_Python.SoPickStyleElement_createInstance()

def SoPickStyleElement_initClass():
    return Coin_SWIG_Python.SoPickStyleElement_initClass()

def SoPickStyleElement_set(*args):
    return Coin_SWIG_Python.SoPickStyleElement_set(*args)

def SoPickStyleElement_get(state):
    return Coin_SWIG_Python.SoPickStyleElement_get(state)

def SoPickStyleElement_getDefault():
    return Coin_SWIG_Python.SoPickStyleElement_getDefault()

class SoPickStyle(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPickStyle_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPickStyle_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPickStyle_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPickStyle_swiginit(self, Coin_SWIG_Python.new_SoPickStyle())
    SHAPE = Coin_SWIG_Python.SoPickStyle_SHAPE
    BOUNDING_BOX = Coin_SWIG_Python.SoPickStyle_BOUNDING_BOX
    UNPICKABLE = Coin_SWIG_Python.SoPickStyle_UNPICKABLE
    style = property(Coin_SWIG_Python.SoPickStyle_style_get, Coin_SWIG_Python.SoPickStyle_style_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoPickStyle_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoPickStyle_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoPickStyle_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPickStyle

# Register SoPickStyle in Coin_SWIG_Python:
Coin_SWIG_Python.SoPickStyle_swigregister(SoPickStyle)

def SoPickStyle_getClassTypeId():
    return Coin_SWIG_Python.SoPickStyle_getClassTypeId()

def SoPickStyle_initClass():
    return Coin_SWIG_Python.SoPickStyle_initClass()

class SoShapeHintsElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShapeHintsElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoShapeHintsElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoShapeHintsElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShapeHintsElement_initClass()
    UNKNOWN_ORDERING = Coin_SWIG_Python.SoShapeHintsElement_UNKNOWN_ORDERING
    CLOCKWISE = Coin_SWIG_Python.SoShapeHintsElement_CLOCKWISE
    COUNTERCLOCKWISE = Coin_SWIG_Python.SoShapeHintsElement_COUNTERCLOCKWISE
    ORDERING_AS_IS = Coin_SWIG_Python.SoShapeHintsElement_ORDERING_AS_IS
    UNKNOWN_SHAPE_TYPE = Coin_SWIG_Python.SoShapeHintsElement_UNKNOWN_SHAPE_TYPE
    SOLID = Coin_SWIG_Python.SoShapeHintsElement_SOLID
    SHAPE_TYPE_AS_IS = Coin_SWIG_Python.SoShapeHintsElement_SHAPE_TYPE_AS_IS
    UNKNOWN_FACE_TYPE = Coin_SWIG_Python.SoShapeHintsElement_UNKNOWN_FACE_TYPE
    CONVEX = Coin_SWIG_Python.SoShapeHintsElement_CONVEX
    FACE_TYPE_AS_IS = Coin_SWIG_Python.SoShapeHintsElement_FACE_TYPE_AS_IS

    def init(self, state):
        return Coin_SWIG_Python.SoShapeHintsElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoShapeHintsElement_push(self, state)

    def pop(self, state, prevtopelement):
        return Coin_SWIG_Python.SoShapeHintsElement_pop(self, state, prevtopelement)

    def matches(self, element):
        return Coin_SWIG_Python.SoShapeHintsElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoShapeHintsElement_copyMatchInfo(self)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoShapeHintsElement_set(*args)

    @staticmethod
    def get(state, vertexOrdering, shapeType, faceType):
        return Coin_SWIG_Python.SoShapeHintsElement_get(state, vertexOrdering, shapeType, faceType)

    @staticmethod
    def getVertexOrdering(state):
        return Coin_SWIG_Python.SoShapeHintsElement_getVertexOrdering(state)

    @staticmethod
    def getShapeType(state):
        return Coin_SWIG_Python.SoShapeHintsElement_getShapeType(state)

    @staticmethod
    def getFaceType(state):
        return Coin_SWIG_Python.SoShapeHintsElement_getFaceType(state)

    @staticmethod
    def getDefaultVertexOrdering():
        return Coin_SWIG_Python.SoShapeHintsElement_getDefaultVertexOrdering()

    @staticmethod
    def getDefaultShapeType():
        return Coin_SWIG_Python.SoShapeHintsElement_getDefaultShapeType()

    @staticmethod
    def getDefaultFaceType():
        return Coin_SWIG_Python.SoShapeHintsElement_getDefaultFaceType()

    def output(self, file):
        return Coin_SWIG_Python.SoShapeHintsElement_output(self, file)

# Register SoShapeHintsElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoShapeHintsElement_swigregister(SoShapeHintsElement)

def SoShapeHintsElement_getClassTypeId():
    return Coin_SWIG_Python.SoShapeHintsElement_getClassTypeId()

def SoShapeHintsElement_getClassStackIndex():
    return Coin_SWIG_Python.SoShapeHintsElement_getClassStackIndex()

def SoShapeHintsElement_createInstance():
    return Coin_SWIG_Python.SoShapeHintsElement_createInstance()

def SoShapeHintsElement_initClass():
    return Coin_SWIG_Python.SoShapeHintsElement_initClass()

def SoShapeHintsElement_set(*args):
    return Coin_SWIG_Python.SoShapeHintsElement_set(*args)

def SoShapeHintsElement_get(state, vertexOrdering, shapeType, faceType):
    return Coin_SWIG_Python.SoShapeHintsElement_get(state, vertexOrdering, shapeType, faceType)

def SoShapeHintsElement_getVertexOrdering(state):
    return Coin_SWIG_Python.SoShapeHintsElement_getVertexOrdering(state)

def SoShapeHintsElement_getShapeType(state):
    return Coin_SWIG_Python.SoShapeHintsElement_getShapeType(state)

def SoShapeHintsElement_getFaceType(state):
    return Coin_SWIG_Python.SoShapeHintsElement_getFaceType(state)

def SoShapeHintsElement_getDefaultVertexOrdering():
    return Coin_SWIG_Python.SoShapeHintsElement_getDefaultVertexOrdering()

def SoShapeHintsElement_getDefaultShapeType():
    return Coin_SWIG_Python.SoShapeHintsElement_getDefaultShapeType()

def SoShapeHintsElement_getDefaultFaceType():
    return Coin_SWIG_Python.SoShapeHintsElement_getDefaultFaceType()

class SoShapeHints(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShapeHints_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShapeHints_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShapeHints_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoShapeHints_swiginit(self, Coin_SWIG_Python.new_SoShapeHints())
    UNKNOWN_ORDERING = Coin_SWIG_Python.SoShapeHints_UNKNOWN_ORDERING
    CLOCKWISE = Coin_SWIG_Python.SoShapeHints_CLOCKWISE
    COUNTERCLOCKWISE = Coin_SWIG_Python.SoShapeHints_COUNTERCLOCKWISE
    UNKNOWN_SHAPE_TYPE = Coin_SWIG_Python.SoShapeHints_UNKNOWN_SHAPE_TYPE
    SOLID = Coin_SWIG_Python.SoShapeHints_SOLID
    UNKNOWN_FACE_TYPE = Coin_SWIG_Python.SoShapeHints_UNKNOWN_FACE_TYPE
    CONVEX = Coin_SWIG_Python.SoShapeHints_CONVEX
    vertexOrdering = property(Coin_SWIG_Python.SoShapeHints_vertexOrdering_get, Coin_SWIG_Python.SoShapeHints_vertexOrdering_set)
    shapeType = property(Coin_SWIG_Python.SoShapeHints_shapeType_get, Coin_SWIG_Python.SoShapeHints_shapeType_set)
    faceType = property(Coin_SWIG_Python.SoShapeHints_faceType_get, Coin_SWIG_Python.SoShapeHints_faceType_set)
    creaseAngle = property(Coin_SWIG_Python.SoShapeHints_creaseAngle_get, Coin_SWIG_Python.SoShapeHints_creaseAngle_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoShapeHints_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoShapeHints_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoShapeHints_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoShapeHints_getBoundingBox(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoShapeHints_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShapeHints

# Register SoShapeHints in Coin_SWIG_Python:
Coin_SWIG_Python.SoShapeHints_swigregister(SoShapeHints)

def SoShapeHints_getClassTypeId():
    return Coin_SWIG_Python.SoShapeHints_getClassTypeId()

def SoShapeHints_initClass():
    return Coin_SWIG_Python.SoShapeHints_initClass()

class SoSFImage(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFImage_swiginit(self, Coin_SWIG_Python.new_SoSFImage())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFImage

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFImage_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFImage_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFImage_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFImage_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFImage_isSame(self, field)
    COPY = Coin_SWIG_Python.SoSFImage_COPY
    NO_COPY = Coin_SWIG_Python.SoSFImage_NO_COPY
    NO_COPY_AND_DELETE = Coin_SWIG_Python.SoSFImage_NO_COPY_AND_DELETE
    NO_COPY_AND_FREE = Coin_SWIG_Python.SoSFImage_NO_COPY_AND_FREE

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFImage_initClass()

    def getValue(self):
        return Coin_SWIG_Python.SoSFImage_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFImage___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFImage___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoSFImage_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoSFImage_finishEditing(self)

    def setSubValue(self, dims, offset, pixels):
        return Coin_SWIG_Python.SoSFImage_setSubValue(self, dims, offset, pixels)

    def setSubValues(self, dims, offsets, num, pixelblocks):
        return Coin_SWIG_Python.SoSFImage_setSubValues(self, dims, offsets, num, pixelblocks)

    def getSubTexture(self, idx, dims, offset):
        return Coin_SWIG_Python.SoSFImage_getSubTexture(self, idx, dims, offset)

    def hasSubTextures(self, numsubtextures):
        return Coin_SWIG_Python.SoSFImage_hasSubTextures(self, numsubtextures)

    def setNeverWrite(self, flag):
        return Coin_SWIG_Python.SoSFImage_setNeverWrite(self, flag)

    def isNeverWrite(self):
        return Coin_SWIG_Python.SoSFImage_isNeverWrite(self)

    def hasTransparency(self):
        return Coin_SWIG_Python.SoSFImage_hasTransparency(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFImage_setValue(self, *args)

# Register SoSFImage in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFImage_swigregister(SoSFImage)

def SoSFImage_createInstance():
    return Coin_SWIG_Python.SoSFImage_createInstance()

def SoSFImage_getClassTypeId():
    return Coin_SWIG_Python.SoSFImage_getClassTypeId()

def SoSFImage_initClass():
    return Coin_SWIG_Python.SoSFImage_initClass()

class SoSFString(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFString_swiginit(self, Coin_SWIG_Python.new_SoSFString())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFString

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFString_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFString_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFString_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFString_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFString_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFString_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFString___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFString___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFString_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFString_setValue(self, *args)

# Register SoSFString in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFString_swigregister(SoSFString)

def SoSFString_createInstance():
    return Coin_SWIG_Python.SoSFString_createInstance()

def SoSFString_getClassTypeId():
    return Coin_SWIG_Python.SoSFString_getClassTypeId()

def SoSFString_initClass():
    return Coin_SWIG_Python.SoSFString_initClass()

class SoSFColor(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFColor_swiginit(self, Coin_SWIG_Python.new_SoSFColor())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFColor

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFColor_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFColor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFColor_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFColor_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFColor_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFColor_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFColor___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFColor___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFColor_initClass()

    def setHSVValue(self, *args):
        return Coin_SWIG_Python.SoSFColor_setHSVValue(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFColor_setValue(self, *args)

# Register SoSFColor in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFColor_swigregister(SoSFColor)

def SoSFColor_createInstance():
    return Coin_SWIG_Python.SoSFColor_createInstance()

def SoSFColor_getClassTypeId():
    return Coin_SWIG_Python.SoSFColor_getClassTypeId()

def SoSFColor_initClass():
    return Coin_SWIG_Python.SoSFColor_initClass()

class SoReplacedElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoReplacedElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoReplacedElement_getClassStackIndex()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoReplacedElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoReplacedElement_init(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoReplacedElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoReplacedElement_copyMatchInfo(self)

    def getNodeId(self):
        return Coin_SWIG_Python.SoReplacedElement_getNodeId(self)

    def output(self, file):
        return Coin_SWIG_Python.SoReplacedElement_output(self, file)

# Register SoReplacedElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoReplacedElement_swigregister(SoReplacedElement)

def SoReplacedElement_getClassTypeId():
    return Coin_SWIG_Python.SoReplacedElement_getClassTypeId()

def SoReplacedElement_getClassStackIndex():
    return Coin_SWIG_Python.SoReplacedElement_getClassStackIndex()

def SoReplacedElement_initClass():
    return Coin_SWIG_Python.SoReplacedElement_initClass()

class SbVec3s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec3s_swiginit(self, Coin_SWIG_Python.new_SbVec3s(*args))

    def dot(self, v):
        return Coin_SWIG_Python.SbVec3s_dot(self, v)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec3s_getValue(self, *args)

    def negate(self):
        return Coin_SWIG_Python.SbVec3s_negate(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec3s_setValue(self, *args)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec3s___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec3s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec3s___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec3s___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec3s___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec3s_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec3s___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec3s___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec3s___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec3s___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec3s___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec3s___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec3s___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec3s___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec3s___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3s

# Register SbVec3s in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec3s_swigregister(SbVec3s)

class SoTextureImageElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureImageElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureImageElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureImageElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureImageElement_initClass()
    BLEND = Coin_SWIG_Python.SoTextureImageElement_BLEND
    MODULATE = Coin_SWIG_Python.SoTextureImageElement_MODULATE
    DECAL = Coin_SWIG_Python.SoTextureImageElement_DECAL
    REPLACE = Coin_SWIG_Python.SoTextureImageElement_REPLACE
    CLAMP = Coin_SWIG_Python.SoTextureImageElement_CLAMP
    REPEAT = Coin_SWIG_Python.SoTextureImageElement_REPEAT
    CLAMP_TO_BORDER = Coin_SWIG_Python.SoTextureImageElement_CLAMP_TO_BORDER

    def init(self, state):
        return Coin_SWIG_Python.SoTextureImageElement_init(self, state)

    @staticmethod
    def setDefault(state, node):
        return Coin_SWIG_Python.SoTextureImageElement_setDefault(state, node)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoTextureImageElement_set(*args)

    @staticmethod
    def get(*args):
        return Coin_SWIG_Python.SoTextureImageElement_get(*args)

    @staticmethod
    def getBlendColor(state):
        return Coin_SWIG_Python.SoTextureImageElement_getBlendColor(state)

    @staticmethod
    def getImage(*args):
        return Coin_SWIG_Python.SoTextureImageElement_getImage(*args)

    @staticmethod
    def getModel(state):
        return Coin_SWIG_Python.SoTextureImageElement_getModel(state)

    @staticmethod
    def getWrapS(state):
        return Coin_SWIG_Python.SoTextureImageElement_getWrapS(state)

    @staticmethod
    def getWrapT(state):
        return Coin_SWIG_Python.SoTextureImageElement_getWrapT(state)

    @staticmethod
    def getWrapR(state):
        return Coin_SWIG_Python.SoTextureImageElement_getWrapR(state)

    @staticmethod
    def containsTransparency(state):
        return Coin_SWIG_Python.SoTextureImageElement_containsTransparency(state)

    @staticmethod
    def getDefault(*args):
        return Coin_SWIG_Python.SoTextureImageElement_getDefault(*args)

# Register SoTextureImageElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureImageElement_swigregister(SoTextureImageElement)

def SoTextureImageElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureImageElement_getClassTypeId()

def SoTextureImageElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureImageElement_getClassStackIndex()

def SoTextureImageElement_createInstance():
    return Coin_SWIG_Python.SoTextureImageElement_createInstance()

def SoTextureImageElement_initClass():
    return Coin_SWIG_Python.SoTextureImageElement_initClass()

def SoTextureImageElement_setDefault(state, node):
    return Coin_SWIG_Python.SoTextureImageElement_setDefault(state, node)

def SoTextureImageElement_set(*args):
    return Coin_SWIG_Python.SoTextureImageElement_set(*args)

def SoTextureImageElement_get(*args):
    return Coin_SWIG_Python.SoTextureImageElement_get(*args)

def SoTextureImageElement_getBlendColor(state):
    return Coin_SWIG_Python.SoTextureImageElement_getBlendColor(state)

def SoTextureImageElement_getImage(*args):
    return Coin_SWIG_Python.SoTextureImageElement_getImage(*args)

def SoTextureImageElement_getModel(state):
    return Coin_SWIG_Python.SoTextureImageElement_getModel(state)

def SoTextureImageElement_getWrapS(state):
    return Coin_SWIG_Python.SoTextureImageElement_getWrapS(state)

def SoTextureImageElement_getWrapT(state):
    return Coin_SWIG_Python.SoTextureImageElement_getWrapT(state)

def SoTextureImageElement_getWrapR(state):
    return Coin_SWIG_Python.SoTextureImageElement_getWrapR(state)

def SoTextureImageElement_containsTransparency(state):
    return Coin_SWIG_Python.SoTextureImageElement_containsTransparency(state)

def SoTextureImageElement_getDefault(*args):
    return Coin_SWIG_Python.SoTextureImageElement_getDefault(*args)

class SoTexture2(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTexture2_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTexture2_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTexture2_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTexture2_swiginit(self, Coin_SWIG_Python.new_SoTexture2())
    MODULATE = Coin_SWIG_Python.SoTexture2_MODULATE
    DECAL = Coin_SWIG_Python.SoTexture2_DECAL
    BLEND = Coin_SWIG_Python.SoTexture2_BLEND
    REPLACE = Coin_SWIG_Python.SoTexture2_REPLACE
    REPEAT = Coin_SWIG_Python.SoTexture2_REPEAT
    CLAMP = Coin_SWIG_Python.SoTexture2_CLAMP
    filename = property(Coin_SWIG_Python.SoTexture2_filename_get, Coin_SWIG_Python.SoTexture2_filename_set)
    image = property(Coin_SWIG_Python.SoTexture2_image_get, Coin_SWIG_Python.SoTexture2_image_set)
    wrapS = property(Coin_SWIG_Python.SoTexture2_wrapS_get, Coin_SWIG_Python.SoTexture2_wrapS_set)
    wrapT = property(Coin_SWIG_Python.SoTexture2_wrapT_get, Coin_SWIG_Python.SoTexture2_wrapT_set)
    model = property(Coin_SWIG_Python.SoTexture2_model_get, Coin_SWIG_Python.SoTexture2_model_set)
    blendColor = property(Coin_SWIG_Python.SoTexture2_blendColor_get, Coin_SWIG_Python.SoTexture2_blendColor_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTexture2_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTexture2_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTexture2_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoTexture2_rayPick(self, action)

    @staticmethod
    def readImage(fname, w, h, nc, bytes):
        return Coin_SWIG_Python.SoTexture2_readImage(fname, w, h, nc, bytes)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture2

# Register SoTexture2 in Coin_SWIG_Python:
Coin_SWIG_Python.SoTexture2_swigregister(SoTexture2)

def SoTexture2_getClassTypeId():
    return Coin_SWIG_Python.SoTexture2_getClassTypeId()

def SoTexture2_initClass():
    return Coin_SWIG_Python.SoTexture2_initClass()

def SoTexture2_readImage(fname, w, h, nc, bytes):
    return Coin_SWIG_Python.SoTexture2_readImage(fname, w, h, nc, bytes)

class SoTextureCoordinateBindingElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_initClass()
    PER_VERTEX = Coin_SWIG_Python.SoTextureCoordinateBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoTextureCoordinateBindingElement_PER_VERTEX_INDEXED

    def init(self, state):
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoTextureCoordinateBindingElement_getDefault()

# Register SoTextureCoordinateBindingElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateBindingElement_swigregister(SoTextureCoordinateBindingElement)

def SoTextureCoordinateBindingElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassTypeId()

def SoTextureCoordinateBindingElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassStackIndex()

def SoTextureCoordinateBindingElement_createInstance():
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_createInstance()

def SoTextureCoordinateBindingElement_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_initClass()

def SoTextureCoordinateBindingElement_set(*args):
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_set(*args)

def SoTextureCoordinateBindingElement_get(state):
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_get(state)

def SoTextureCoordinateBindingElement_getDefault():
    return Coin_SWIG_Python.SoTextureCoordinateBindingElement_getDefault()

class SoTextureCoordinateBinding(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateBinding_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateBinding_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateBinding_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateBinding_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateBinding())
    PER_VERTEX = Coin_SWIG_Python.SoTextureCoordinateBinding_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoTextureCoordinateBinding_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoTextureCoordinateBinding_DEFAULT
    value = property(Coin_SWIG_Python.SoTextureCoordinateBinding_value_get, Coin_SWIG_Python.SoTextureCoordinateBinding_value_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateBinding_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateBinding_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateBinding_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateBinding_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateBinding

# Register SoTextureCoordinateBinding in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateBinding_swigregister(SoTextureCoordinateBinding)

def SoTextureCoordinateBinding_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateBinding_getClassTypeId()

def SoTextureCoordinateBinding_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateBinding_initClass()

class SoTransformation(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformation_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformation_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformation

# Register SoTransformation in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformation_swigregister(SoTransformation)

def SoTransformation_getClassTypeId():
    return Coin_SWIG_Python.SoTransformation_getClassTypeId()

def SoTransformation_initClass():
    return Coin_SWIG_Python.SoTransformation_initClass()

class SoUnits(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoUnits_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoUnits_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoUnits_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoUnits_swiginit(self, Coin_SWIG_Python.new_SoUnits())
    METERS = Coin_SWIG_Python.SoUnits_METERS
    CENTIMETERS = Coin_SWIG_Python.SoUnits_CENTIMETERS
    MILLIMETERS = Coin_SWIG_Python.SoUnits_MILLIMETERS
    MICROMETERS = Coin_SWIG_Python.SoUnits_MICROMETERS
    MICRONS = Coin_SWIG_Python.SoUnits_MICRONS
    NANOMETERS = Coin_SWIG_Python.SoUnits_NANOMETERS
    ANGSTROMS = Coin_SWIG_Python.SoUnits_ANGSTROMS
    KILOMETERS = Coin_SWIG_Python.SoUnits_KILOMETERS
    FEET = Coin_SWIG_Python.SoUnits_FEET
    INCHES = Coin_SWIG_Python.SoUnits_INCHES
    POINTS = Coin_SWIG_Python.SoUnits_POINTS
    YARDS = Coin_SWIG_Python.SoUnits_YARDS
    MILES = Coin_SWIG_Python.SoUnits_MILES
    NAUTICAL_MILES = Coin_SWIG_Python.SoUnits_NAUTICAL_MILES
    units = property(Coin_SWIG_Python.SoUnits_units_get, Coin_SWIG_Python.SoUnits_units_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoUnits_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoUnits_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoUnits_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoUnits_getMatrix(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoUnits_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoUnits_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoUnits_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoUnits

# Register SoUnits in Coin_SWIG_Python:
Coin_SWIG_Python.SoUnits_swigregister(SoUnits)

def SoUnits_getClassTypeId():
    return Coin_SWIG_Python.SoUnits_getClassTypeId()

def SoUnits_initClass():
    return Coin_SWIG_Python.SoUnits_initClass()

class SoCallbackAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoCallbackAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCallbackAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoCallbackAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoCallbackAction_enableElement(type, stackindex)

    def __init__(self, *args):
        Coin_SWIG_Python.SoCallbackAction_swiginit(self, Coin_SWIG_Python.new_SoCallbackAction(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCallbackAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCallbackAction_initClass()

    def setViewportRegion(self, vp):
        return Coin_SWIG_Python.SoCallbackAction_setViewportRegion(self, vp)
    CONTINUE = Coin_SWIG_Python.SoCallbackAction_CONTINUE
    ABORT = Coin_SWIG_Python.SoCallbackAction_ABORT
    PRUNE = Coin_SWIG_Python.SoCallbackAction_PRUNE

    def getDecimationType(self):
        return Coin_SWIG_Python.SoCallbackAction_getDecimationType(self)

    def getDecimationPercentage(self):
        return Coin_SWIG_Python.SoCallbackAction_getDecimationPercentage(self)

    def getComplexity(self):
        return Coin_SWIG_Python.SoCallbackAction_getComplexity(self)

    def getComplexityType(self):
        return Coin_SWIG_Python.SoCallbackAction_getComplexityType(self)

    def getNumCoordinates(self):
        return Coin_SWIG_Python.SoCallbackAction_getNumCoordinates(self)

    def getCoordinate3(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getCoordinate3(self, index)

    def getCoordinate4(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getCoordinate4(self, index)

    def getDrawStyle(self):
        return Coin_SWIG_Python.SoCallbackAction_getDrawStyle(self)

    def getLinePattern(self):
        return Coin_SWIG_Python.SoCallbackAction_getLinePattern(self)

    def getLineWidth(self):
        return Coin_SWIG_Python.SoCallbackAction_getLineWidth(self)

    def getPointSize(self):
        return Coin_SWIG_Python.SoCallbackAction_getPointSize(self)

    def getFontName(self):
        return Coin_SWIG_Python.SoCallbackAction_getFontName(self)

    def getFontSize(self):
        return Coin_SWIG_Python.SoCallbackAction_getFontSize(self)

    def getLightModel(self):
        return Coin_SWIG_Python.SoCallbackAction_getLightModel(self)

    def getLightAttenuation(self):
        return Coin_SWIG_Python.SoCallbackAction_getLightAttenuation(self)

    def getMaterial(self, ambient, diffuse, specular, emission, shininess, transparency, index=0):
        return Coin_SWIG_Python.SoCallbackAction_getMaterial(self, ambient, diffuse, specular, emission, shininess, transparency, index)

    def getMaterialBinding(self):
        return Coin_SWIG_Python.SoCallbackAction_getMaterialBinding(self)

    def getNumNormals(self):
        return Coin_SWIG_Python.SoCallbackAction_getNumNormals(self)

    def getNormal(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getNormal(self, index)

    def getNormalBinding(self):
        return Coin_SWIG_Python.SoCallbackAction_getNormalBinding(self)

    def getNumProfileCoordinates(self):
        return Coin_SWIG_Python.SoCallbackAction_getNumProfileCoordinates(self)

    def getProfileCoordinate2(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getProfileCoordinate2(self, index)

    def getProfileCoordinate3(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getProfileCoordinate3(self, index)

    def getProfile(self):
        return Coin_SWIG_Python.SoCallbackAction_getProfile(self)

    def getVertexOrdering(self):
        return Coin_SWIG_Python.SoCallbackAction_getVertexOrdering(self)

    def getShapeType(self):
        return Coin_SWIG_Python.SoCallbackAction_getShapeType(self)

    def getFaceType(self):
        return Coin_SWIG_Python.SoCallbackAction_getFaceType(self)

    def getCreaseAngle(self):
        return Coin_SWIG_Python.SoCallbackAction_getCreaseAngle(self)

    def getNumTextureCoordinates(self):
        return Coin_SWIG_Python.SoCallbackAction_getNumTextureCoordinates(self)

    def getTextureCoordinate2(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinate2(self, index)

    def getTextureCoordinate3(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinate3(self, index)

    def getTextureCoordinate4(self, index):
        return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinate4(self, index)

    def getTextureCoordinateBinding(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinateBinding(self)

    def getTextureBlendColor(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureBlendColor(self)

    def getTextureImage(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_getTextureImage(self, *args)

    def getTextureMatrix(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureMatrix(self)

    def getTextureModel(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureModel(self)

    def getTextureWrapS(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureWrapS(self)

    def getTextureWrapT(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureWrapT(self)

    def getTextureWrapR(self):
        return Coin_SWIG_Python.SoCallbackAction_getTextureWrapR(self)

    def getModelMatrix(self):
        return Coin_SWIG_Python.SoCallbackAction_getModelMatrix(self)

    def getUnits(self):
        return Coin_SWIG_Python.SoCallbackAction_getUnits(self)

    def getFocalDistance(self):
        return Coin_SWIG_Python.SoCallbackAction_getFocalDistance(self)

    def getProjectionMatrix(self):
        return Coin_SWIG_Python.SoCallbackAction_getProjectionMatrix(self)

    def getViewingMatrix(self):
        return Coin_SWIG_Python.SoCallbackAction_getViewingMatrix(self)

    def getViewVolume(self):
        return Coin_SWIG_Python.SoCallbackAction_getViewVolume(self)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoCallbackAction_getViewportRegion(self)

    def getPickStyle(self):
        return Coin_SWIG_Python.SoCallbackAction_getPickStyle(self)

    def getSwitch(self):
        return Coin_SWIG_Python.SoCallbackAction_getSwitch(self)

    def getCurrentResponse(self):
        return Coin_SWIG_Python.SoCallbackAction_getCurrentResponse(self)

    def invokePreCallbacks(self, node):
        return Coin_SWIG_Python.SoCallbackAction_invokePreCallbacks(self, node)

    def invokePostCallbacks(self, node):
        return Coin_SWIG_Python.SoCallbackAction_invokePostCallbacks(self, node)

    def invokeTriangleCallbacks(self, shape, v1, v2, v3):
        return Coin_SWIG_Python.SoCallbackAction_invokeTriangleCallbacks(self, shape, v1, v2, v3)

    def invokeLineSegmentCallbacks(self, shape, v1, v2):
        return Coin_SWIG_Python.SoCallbackAction_invokeLineSegmentCallbacks(self, shape, v1, v2)

    def invokePointCallbacks(self, shape, v):
        return Coin_SWIG_Python.SoCallbackAction_invokePointCallbacks(self, shape, v)

    def shouldGeneratePrimitives(self, shape):
        return Coin_SWIG_Python.SoCallbackAction_shouldGeneratePrimitives(self, shape)

    def getCurPathTail(self):
        return Coin_SWIG_Python.SoCallbackAction_getCurPathTail(self)

    def setCurrentNode(self, node):
        return Coin_SWIG_Python.SoCallbackAction_setCurrentNode(self, node)

    def addPreCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addPreCallback(self, *args)

    def addPostCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addPostCallback(self, *args)

    def addPreTailCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addPreTailCallback(self, *args)

    def addPostTailCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addPostTailCallback(self, *args)

    def addTriangleCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addTriangleCallback(self, *args)

    def addLineSegmentCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addLineSegmentCallback(self, *args)

    def addPointCallback(self, *args):
        return Coin_SWIG_Python.SoCallbackAction_addPointCallback(self, *args)

# Register SoCallbackAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoCallbackAction_swigregister(SoCallbackAction)

def SoCallbackAction_getClassTypeId():
    return Coin_SWIG_Python.SoCallbackAction_getClassTypeId()

def SoCallbackAction_addMethod(type, method):
    return Coin_SWIG_Python.SoCallbackAction_addMethod(type, method)

def SoCallbackAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoCallbackAction_enableElement(type, stackindex)

def SoCallbackAction_initClass():
    return Coin_SWIG_Python.SoCallbackAction_initClass()

class SbVec2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec2f_swiginit(self, Coin_SWIG_Python.new_SbVec2f(*args))

    def dot(self, v):
        return Coin_SWIG_Python.SbVec2f_dot(self, v)

    def equals(self, v, tolerance):
        return Coin_SWIG_Python.SbVec2f_equals(self, v, tolerance)

    def getValue(self):
        return Coin_SWIG_Python.SbVec2f_getValue(self)

    def length(self):
        return Coin_SWIG_Python.SbVec2f_length(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec2f_negate(self)

    def normalize(self):
        return Coin_SWIG_Python.SbVec2f_normalize(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec2f_setValue(self, *args)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbVec2f___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec2f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec2f___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec2f___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec2f___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec2f_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec2f___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec2f___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec2f___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec2f___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec2f___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec2f___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec2f___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec2f___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec2f___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2f

# Register SbVec2f in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec2f_swigregister(SbVec2f)

class SbViewportRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbViewportRegion_swiginit(self, Coin_SWIG_Python.new_SbViewportRegion(*args))

    def setWindowSize(self, *args):
        return Coin_SWIG_Python.SbViewportRegion_setWindowSize(self, *args)

    def setViewport(self, *args):
        return Coin_SWIG_Python.SbViewportRegion_setViewport(self, *args)

    def setViewportPixels(self, *args):
        return Coin_SWIG_Python.SbViewportRegion_setViewportPixels(self, *args)

    def getWindowSize(self):
        return Coin_SWIG_Python.SbViewportRegion_getWindowSize(self)

    def getViewportOrigin(self):
        return Coin_SWIG_Python.SbViewportRegion_getViewportOrigin(self)

    def getViewportOriginPixels(self):
        return Coin_SWIG_Python.SbViewportRegion_getViewportOriginPixels(self)

    def getViewportSize(self):
        return Coin_SWIG_Python.SbViewportRegion_getViewportSize(self)

    def getViewportSizePixels(self):
        return Coin_SWIG_Python.SbViewportRegion_getViewportSizePixels(self)

    def getViewportAspectRatio(self):
        return Coin_SWIG_Python.SbViewportRegion_getViewportAspectRatio(self)

    def scaleWidth(self, ratio):
        return Coin_SWIG_Python.SbViewportRegion_scaleWidth(self, ratio)

    def scaleHeight(self, ratio):
        return Coin_SWIG_Python.SbViewportRegion_scaleHeight(self, ratio)

    def setPixelsPerInch(self, ppi):
        return Coin_SWIG_Python.SbViewportRegion_setPixelsPerInch(self, ppi)

    def getPixelsPerInch(self):
        return Coin_SWIG_Python.SbViewportRegion_getPixelsPerInch(self)

    def getPixelsPerPoint(self):
        return Coin_SWIG_Python.SbViewportRegion_getPixelsPerPoint(self)

    def output(self, file):
        return Coin_SWIG_Python.SbViewportRegion_output(self, file)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbViewportRegion___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbViewportRegion___ne__(self, u)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbViewportRegion

# Register SbViewportRegion in Coin_SWIG_Python:
Coin_SWIG_Python.SbViewportRegion_swigregister(SbViewportRegion)

class SoGLRenderAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoGLRenderAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLRenderAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoGLRenderAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoGLRenderAction_enableElement(type, stackindex)

    def __init__(self, viewportregion):
        Coin_SWIG_Python.SoGLRenderAction_swiginit(self, Coin_SWIG_Python.new_SoGLRenderAction(viewportregion))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLRenderAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLRenderAction_initClass()
    SCREEN_DOOR = Coin_SWIG_Python.SoGLRenderAction_SCREEN_DOOR
    ADD = Coin_SWIG_Python.SoGLRenderAction_ADD
    DELAYED_ADD = Coin_SWIG_Python.SoGLRenderAction_DELAYED_ADD
    SORTED_OBJECT_ADD = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_ADD
    BLEND = Coin_SWIG_Python.SoGLRenderAction_BLEND
    DELAYED_BLEND = Coin_SWIG_Python.SoGLRenderAction_DELAYED_BLEND
    SORTED_OBJECT_BLEND = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_BLEND
    SORTED_OBJECT_SORTED_TRIANGLE_ADD = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_SORTED_TRIANGLE_ADD
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
    NONE = Coin_SWIG_Python.SoGLRenderAction_NONE
    SORTED_LAYERS_BLEND = Coin_SWIG_Python.SoGLRenderAction_SORTED_LAYERS_BLEND
    CONTINUE = Coin_SWIG_Python.SoGLRenderAction_CONTINUE
    ABORT = Coin_SWIG_Python.SoGLRenderAction_ABORT
    PRUNE = Coin_SWIG_Python.SoGLRenderAction_PRUNE
    DELAY = Coin_SWIG_Python.SoGLRenderAction_DELAY

    def setViewportRegion(self, newregion):
        return Coin_SWIG_Python.SoGLRenderAction_setViewportRegion(self, newregion)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoGLRenderAction_getViewportRegion(self)

    def setUpdateArea(self, origin, size):
        return Coin_SWIG_Python.SoGLRenderAction_setUpdateArea(self, origin, size)

    def getUpdateArea(self, origin, size):
        return Coin_SWIG_Python.SoGLRenderAction_getUpdateArea(self, origin, size)

    def setTransparencyType(self, type):
        return Coin_SWIG_Python.SoGLRenderAction_setTransparencyType(self, type)

    def getTransparencyType(self):
        return Coin_SWIG_Python.SoGLRenderAction_getTransparencyType(self)

    def setSmoothing(self, smooth):
        return Coin_SWIG_Python.SoGLRenderAction_setSmoothing(self, smooth)

    def isSmoothing(self):
        return Coin_SWIG_Python.SoGLRenderAction_isSmoothing(self)

    def setNumPasses(self, num):
        return Coin_SWIG_Python.SoGLRenderAction_setNumPasses(self, num)

    def getNumPasses(self):
        return Coin_SWIG_Python.SoGLRenderAction_getNumPasses(self)

    def setPassUpdate(self, flag):
        return Coin_SWIG_Python.SoGLRenderAction_setPassUpdate(self, flag)

    def isPassUpdate(self):
        return Coin_SWIG_Python.SoGLRenderAction_isPassUpdate(self)

    def setCacheContext(self, context):
        return Coin_SWIG_Python.SoGLRenderAction_setCacheContext(self, context)

    def getCacheContext(self):
        return Coin_SWIG_Python.SoGLRenderAction_getCacheContext(self)

    def addDelayedPath(self, path):
        return Coin_SWIG_Python.SoGLRenderAction_addDelayedPath(self, path)

    def isRenderingDelayedPaths(self):
        return Coin_SWIG_Python.SoGLRenderAction_isRenderingDelayedPaths(self)

    def handleTransparency(self, istransparent=0):
        return Coin_SWIG_Python.SoGLRenderAction_handleTransparency(self, istransparent)

    def getCurPass(self):
        return Coin_SWIG_Python.SoGLRenderAction_getCurPass(self)

    def abortNow(self):
        return Coin_SWIG_Python.SoGLRenderAction_abortNow(self)

    def setRenderingIsRemote(self, isremote):
        return Coin_SWIG_Python.SoGLRenderAction_setRenderingIsRemote(self, isremote)

    def getRenderingIsRemote(self):
        return Coin_SWIG_Python.SoGLRenderAction_getRenderingIsRemote(self)

    def invalidateState(self):
        return Coin_SWIG_Python.SoGLRenderAction_invalidateState(self)

    def setSortedLayersNumPasses(self, num):
        return Coin_SWIG_Python.SoGLRenderAction_setSortedLayersNumPasses(self, num)

    def getSortedLayersNumPasses(self):
        return Coin_SWIG_Python.SoGLRenderAction_getSortedLayersNumPasses(self)

    def setPassCallback(self, *args):
        return Coin_SWIG_Python.SoGLRenderAction_setPassCallback(self, *args)

    def setAbortCallback(self, *args):
        return Coin_SWIG_Python.SoGLRenderAction_setAbortCallback(self, *args)

    def addPreRenderCallback(self, *args):
        return Coin_SWIG_Python.SoGLRenderAction_addPreRenderCallback(self, *args)

    def removePreRenderCallback(self, *args):
        return Coin_SWIG_Python.SoGLRenderAction_removePreRenderCallback(self, *args)

# Register SoGLRenderAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLRenderAction_swigregister(SoGLRenderAction)

def SoGLRenderAction_getClassTypeId():
    return Coin_SWIG_Python.SoGLRenderAction_getClassTypeId()

def SoGLRenderAction_addMethod(type, method):
    return Coin_SWIG_Python.SoGLRenderAction_addMethod(type, method)

def SoGLRenderAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoGLRenderAction_enableElement(type, stackindex)

def SoGLRenderAction_initClass():
    return Coin_SWIG_Python.SoGLRenderAction_initClass()

class SoBoxHighlightRenderAction(SoGLRenderAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_enableElement(type, stackindex)

    def __init__(self, *args):
        Coin_SWIG_Python.SoBoxHighlightRenderAction_swiginit(self, Coin_SWIG_Python.new_SoBoxHighlightRenderAction(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBoxHighlightRenderAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_initClass()

    def apply(self, *args):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_apply(self, *args)

    def setVisible(self, visible):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_setVisible(self, visible)

    def isVisible(self):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_isVisible(self)

    def setColor(self, color):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_setColor(self, color)

    def getColor(self):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_getColor(self)

    def setLinePattern(self, pattern):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_setLinePattern(self, pattern)

    def getLinePattern(self):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_getLinePattern(self)

    def setLineWidth(self, width):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_setLineWidth(self, width)

    def getLineWidth(self):
        return Coin_SWIG_Python.SoBoxHighlightRenderAction_getLineWidth(self)

# Register SoBoxHighlightRenderAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoBoxHighlightRenderAction_swigregister(SoBoxHighlightRenderAction)

def SoBoxHighlightRenderAction_getClassTypeId():
    return Coin_SWIG_Python.SoBoxHighlightRenderAction_getClassTypeId()

def SoBoxHighlightRenderAction_addMethod(type, method):
    return Coin_SWIG_Python.SoBoxHighlightRenderAction_addMethod(type, method)

def SoBoxHighlightRenderAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoBoxHighlightRenderAction_enableElement(type, stackindex)

def SoBoxHighlightRenderAction_initClass():
    return Coin_SWIG_Python.SoBoxHighlightRenderAction_initClass()

class SoLineHighlightRenderAction(SoGLRenderAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLineHighlightRenderAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_enableElement(type, stackindex)

    def __init__(self, *args):
        Coin_SWIG_Python.SoLineHighlightRenderAction_swiginit(self, Coin_SWIG_Python.new_SoLineHighlightRenderAction(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLineHighlightRenderAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLineHighlightRenderAction_initClass()

    def apply(self, *args):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_apply(self, *args)

    def setVisible(self, visible):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_setVisible(self, visible)

    def isVisible(self):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_isVisible(self)

    def setColor(self, color):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_setColor(self, color)

    def getColor(self):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_getColor(self)

    def setLinePattern(self, pattern):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_setLinePattern(self, pattern)

    def getLinePattern(self):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_getLinePattern(self)

    def setLineWidth(self, width):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_setLineWidth(self, width)

    def getLineWidth(self):
        return Coin_SWIG_Python.SoLineHighlightRenderAction_getLineWidth(self)

# Register SoLineHighlightRenderAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoLineHighlightRenderAction_swigregister(SoLineHighlightRenderAction)

def SoLineHighlightRenderAction_getClassTypeId():
    return Coin_SWIG_Python.SoLineHighlightRenderAction_getClassTypeId()

def SoLineHighlightRenderAction_addMethod(type, method):
    return Coin_SWIG_Python.SoLineHighlightRenderAction_addMethod(type, method)

def SoLineHighlightRenderAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoLineHighlightRenderAction_enableElement(type, stackindex)

def SoLineHighlightRenderAction_initClass():
    return Coin_SWIG_Python.SoLineHighlightRenderAction_initClass()

class SbBox3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox3f_swiginit(self, Coin_SWIG_Python.new_SbBox3f(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3f

    def getMin(self, *args):
        return Coin_SWIG_Python.SbBox3f_getMin(self, *args)

    def getMax(self, *args):
        return Coin_SWIG_Python.SbBox3f_getMax(self, *args)

    def getCenter(self):
        return Coin_SWIG_Python.SbBox3f_getCenter(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox3f_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox3f_intersect(self, *args)

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox3f_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox3f_getBounds(self, *args)

    def getOrigin(self, x0, y0, z0):
        return Coin_SWIG_Python.SbBox3f_getOrigin(self, x0, y0, z0)

    def getSize(self, dx, dy, dz):
        return Coin_SWIG_Python.SbBox3f_getSize(self, dx, dy, dz)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox3f_makeEmpty(self)

    def isEmpty(self):
        return Coin_SWIG_Python.SbBox3f_isEmpty(self)

    def hasVolume(self):
        return Coin_SWIG_Python.SbBox3f_hasVolume(self)

    def getSpan(self, dir, dmin, dmax):
        return Coin_SWIG_Python.SbBox3f_getSpan(self, dir, dmin, dmax)

    def transform(self, matrix):
        return Coin_SWIG_Python.SbBox3f_transform(self, matrix)

    def getVolume(self):
        return Coin_SWIG_Python.SbBox3f_getVolume(self)

    def outside(self, mvp, cullbits):
        return Coin_SWIG_Python.SbBox3f_outside(self, mvp, cullbits)

    def getClosestPoint(self, point):
        return Coin_SWIG_Python.SbBox3f_getClosestPoint(self, point)

    def output(self, file):
        return Coin_SWIG_Python.SbBox3f_output(self, file)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbBox3f___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbBox3f___ne__(self, u)

# Register SbBox3f in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox3f_swigregister(SbBox3f)

class SbMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbMatrix_swiginit(self, Coin_SWIG_Python.new_SbMatrix(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbMatrix

    def makeIdentity(self):
        return Coin_SWIG_Python.SbMatrix_makeIdentity(self)

    def setRotate(self, q):
        return Coin_SWIG_Python.SbMatrix_setRotate(self, q)

    def inverse(self):
        return Coin_SWIG_Python.SbMatrix_inverse(self)

    def det3(self, *args):
        return Coin_SWIG_Python.SbMatrix_det3(self, *args)

    def det4(self):
        return Coin_SWIG_Python.SbMatrix_det4(self)

    def equals(self, m, tolerance):
        return Coin_SWIG_Python.SbMatrix_equals(self, m, tolerance)

    def __imul__(self, m):
        return Coin_SWIG_Python.SbMatrix___imul__(self, m)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbMatrix_getValue(self, *args)

    @staticmethod
    def identity():
        return Coin_SWIG_Python.SbMatrix_identity()

    def setScale(self, *args):
        return Coin_SWIG_Python.SbMatrix_setScale(self, *args)

    def setTranslate(self, t):
        return Coin_SWIG_Python.SbMatrix_setTranslate(self, t)

    def setTransform(self, *args):
        return Coin_SWIG_Python.SbMatrix_setTransform(self, *args)

    def factor(self, r, s, u, t, proj):
        return Coin_SWIG_Python.SbMatrix_factor(self, r, s, u, t, proj)

    def LUDecomposition(self, index, d):
        return Coin_SWIG_Python.SbMatrix_LUDecomposition(self, index, d)

    def LUBackSubstitution(self, index, b):
        return Coin_SWIG_Python.SbMatrix_LUBackSubstitution(self, index, b)

    def transpose(self):
        return Coin_SWIG_Python.SbMatrix_transpose(self)

    def multRight(self, m):
        return Coin_SWIG_Python.SbMatrix_multRight(self, m)

    def multLeft(self, m):
        return Coin_SWIG_Python.SbMatrix_multLeft(self, m)

    def multMatrixVec(self, src):
        return Coin_SWIG_Python.SbMatrix_multMatrixVec(self, src)

    def multDirMatrix(self, src):
        return Coin_SWIG_Python.SbMatrix_multDirMatrix(self, src)

    def multLineMatrix(self, src, dst):
        return Coin_SWIG_Python.SbMatrix_multLineMatrix(self, src, dst)

    def multVecMatrix(self, *args):
        return Coin_SWIG_Python.SbMatrix_multVecMatrix(self, *args)

    def output(self, fp):
        return Coin_SWIG_Python.SbMatrix_output(self, fp)

    def getTransform(self, *args):
        return Coin_SWIG_Python.SbMatrix_getTransform(self, *args)

    def __mul__(self, *args):
        return Coin_SWIG_Python.SbMatrix___mul__(self, *args)

    def __rmul__(self, u):
        return Coin_SWIG_Python.SbMatrix___rmul__(self, u)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbMatrix___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbMatrix___ne__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbMatrix___getitem__(self, i)

# Register SbMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SbMatrix_swigregister(SbMatrix)

def SbMatrix_identity():
    return Coin_SWIG_Python.SbMatrix_identity()

class SbXfBox3f(SbBox3f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbXfBox3f_swiginit(self, Coin_SWIG_Python.new_SbXfBox3f(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbXfBox3f

    def setTransform(self, m):
        return Coin_SWIG_Python.SbXfBox3f_setTransform(self, m)

    def getTransform(self):
        return Coin_SWIG_Python.SbXfBox3f_getTransform(self)

    def getInverse(self):
        return Coin_SWIG_Python.SbXfBox3f_getInverse(self)

    def getCenter(self):
        return Coin_SWIG_Python.SbXfBox3f_getCenter(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbXfBox3f_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbXfBox3f_intersect(self, *args)

    def getSpan(self, direction, dMin, dMax):
        return Coin_SWIG_Python.SbXfBox3f_getSpan(self, direction, dMin, dMax)

    def project(self):
        return Coin_SWIG_Python.SbXfBox3f_project(self)

    def transform(self, m):
        return Coin_SWIG_Python.SbXfBox3f_transform(self, m)

    def getVolume(self):
        return Coin_SWIG_Python.SbXfBox3f_getVolume(self)

    def output(self, file):
        return Coin_SWIG_Python.SbXfBox3f_output(self, file)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbXfBox3f___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbXfBox3f___ne__(self, u)

# Register SbXfBox3f in Coin_SWIG_Python:
Coin_SWIG_Python.SbXfBox3f_swigregister(SbXfBox3f)

class SoGetBoundingBoxAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_enableElement(type, stackindex)

    def __init__(self, vp):
        Coin_SWIG_Python.SoGetBoundingBoxAction_swiginit(self, Coin_SWIG_Python.new_SoGetBoundingBoxAction(vp))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGetBoundingBoxAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGetBoundingBoxAction_initClass()
    TRANSFORM = Coin_SWIG_Python.SoGetBoundingBoxAction_TRANSFORM
    BBOX = Coin_SWIG_Python.SoGetBoundingBoxAction_BBOX
    ALL = Coin_SWIG_Python.SoGetBoundingBoxAction_ALL

    def setViewportRegion(self, newregion):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_setViewportRegion(self, newregion)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getViewportRegion(self)

    def getBoundingBox(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getBoundingBox(self)

    def getXfBoundingBox(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getXfBoundingBox(self)

    def getCenter(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getCenter(self)

    def setInCameraSpace(self, flag):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_setInCameraSpace(self, flag)

    def isInCameraSpace(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_isInCameraSpace(self)

    def setResetPath(self, *args):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_setResetPath(self, *args)

    def getResetPath(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getResetPath(self)

    def isResetPath(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_isResetPath(self)

    def isResetBefore(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_isResetBefore(self)

    def getWhatReset(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_getWhatReset(self)

    def checkResetBefore(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_checkResetBefore(self)

    def checkResetAfter(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_checkResetAfter(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_extendBy(self, *args)

    def setCenter(self, center, transformcenter):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_setCenter(self, center, transformcenter)

    def isCenterSet(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_isCenterSet(self)

    def resetCenter(self):
        return Coin_SWIG_Python.SoGetBoundingBoxAction_resetCenter(self)

# Register SoGetBoundingBoxAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoGetBoundingBoxAction_swigregister(SoGetBoundingBoxAction)

def SoGetBoundingBoxAction_getClassTypeId():
    return Coin_SWIG_Python.SoGetBoundingBoxAction_getClassTypeId()

def SoGetBoundingBoxAction_addMethod(type, method):
    return Coin_SWIG_Python.SoGetBoundingBoxAction_addMethod(type, method)

def SoGetBoundingBoxAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoGetBoundingBoxAction_enableElement(type, stackindex)

def SoGetBoundingBoxAction_initClass():
    return Coin_SWIG_Python.SoGetBoundingBoxAction_initClass()

class SbVec4f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4f_swiginit(self, Coin_SWIG_Python.new_SbVec4f(*args))

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4f_dot(self, v)

    def equals(self, v, tolerance):
        return Coin_SWIG_Python.SbVec4f_equals(self, v, tolerance)

    def getReal(self, v):
        return Coin_SWIG_Python.SbVec4f_getReal(self, v)

    def getValue(self):
        return Coin_SWIG_Python.SbVec4f_getValue(self)

    def length(self):
        return Coin_SWIG_Python.SbVec4f_length(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec4f_negate(self)

    def normalize(self):
        return Coin_SWIG_Python.SbVec4f_normalize(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4f_setValue(self, *args)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbVec4f___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec4f___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec4f___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4f___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec4f_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec4f___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec4f___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec4f___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec4f___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec4f___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec4f___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec4f___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec4f___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec4f___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4f

# Register SbVec4f in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4f_swigregister(SbVec4f)

class SbRotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbRotation_swiginit(self, Coin_SWIG_Python.new_SbRotation(*args))

    def getValue(self):
        return Coin_SWIG_Python.SbRotation_getValue(self)

    def getAxisAngle(self):
        return Coin_SWIG_Python.SbRotation_getAxisAngle(self)

    def getMatrix(self):
        return Coin_SWIG_Python.SbRotation_getMatrix(self)

    def invert(self):
        return Coin_SWIG_Python.SbRotation_invert(self)

    def inverse(self):
        return Coin_SWIG_Python.SbRotation_inverse(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbRotation_setValue(self, *args)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbRotation___imul__(self, *args)

    def equals(self, r, tolerance):
        return Coin_SWIG_Python.SbRotation_equals(self, r, tolerance)

    def multVec(self, src):
        return Coin_SWIG_Python.SbRotation_multVec(self, src)

    def scaleAngle(self, scaleFactor):
        return Coin_SWIG_Python.SbRotation_scaleAngle(self, scaleFactor)

    @staticmethod
    def slerp(rot0, rot1, t):
        return Coin_SWIG_Python.SbRotation_slerp(rot0, rot1, t)

    @staticmethod
    def identity():
        return Coin_SWIG_Python.SbRotation_identity()

    def output(self, fp):
        return Coin_SWIG_Python.SbRotation_output(self, fp)

    def __mul__(self, *args):
        return Coin_SWIG_Python.SbRotation___mul__(self, *args)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbRotation___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbRotation___nq__(self, u)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbRotation

# Register SbRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SbRotation_swigregister(SbRotation)

def SbRotation_slerp(rot0, rot1, t):
    return Coin_SWIG_Python.SbRotation_slerp(rot0, rot1, t)

def SbRotation_identity():
    return Coin_SWIG_Python.SbRotation_identity()

class SoGetMatrixAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoGetMatrixAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGetMatrixAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoGetMatrixAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoGetMatrixAction_enableElement(type, stackindex)

    def __init__(self, region):
        Coin_SWIG_Python.SoGetMatrixAction_swiginit(self, Coin_SWIG_Python.new_SoGetMatrixAction(region))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGetMatrixAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGetMatrixAction_initClass()

    def setViewportRegion(self, region):
        return Coin_SWIG_Python.SoGetMatrixAction_setViewportRegion(self, region)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoGetMatrixAction_getViewportRegion(self)

    def getMatrix(self):
        return Coin_SWIG_Python.SoGetMatrixAction_getMatrix(self)

    def getInverse(self):
        return Coin_SWIG_Python.SoGetMatrixAction_getInverse(self)

    def getTextureMatrix(self):
        return Coin_SWIG_Python.SoGetMatrixAction_getTextureMatrix(self)

    def getTextureInverse(self):
        return Coin_SWIG_Python.SoGetMatrixAction_getTextureInverse(self)

# Register SoGetMatrixAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoGetMatrixAction_swigregister(SoGetMatrixAction)

def SoGetMatrixAction_getClassTypeId():
    return Coin_SWIG_Python.SoGetMatrixAction_getClassTypeId()

def SoGetMatrixAction_addMethod(type, method):
    return Coin_SWIG_Python.SoGetMatrixAction_addMethod(type, method)

def SoGetMatrixAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoGetMatrixAction_enableElement(type, stackindex)

def SoGetMatrixAction_initClass():
    return Coin_SWIG_Python.SoGetMatrixAction_initClass()

class SoGetPrimitiveCountAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_enableElement(type, stackindex)

    def __init__(self):
        Coin_SWIG_Python.SoGetPrimitiveCountAction_swiginit(self, Coin_SWIG_Python.new_SoGetPrimitiveCountAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGetPrimitiveCountAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_initClass()

    def getTriangleCount(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getTriangleCount(self)

    def getLineCount(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getLineCount(self)

    def getPointCount(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getPointCount(self)

    def getTextCount(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getTextCount(self)

    def getImageCount(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getImageCount(self)

    def containsNoPrimitives(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_containsNoPrimitives(self)

    def containsNonTriangleShapes(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_containsNonTriangleShapes(self)

    def is3DTextCountedAsTriangles(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_is3DTextCountedAsTriangles(self)

    def setCount3DTextAsTriangles(self, flag):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_setCount3DTextAsTriangles(self, flag)

    def canApproximateCount(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_canApproximateCount(self)

    def setCanApproximate(self, flag):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_setCanApproximate(self, flag)

    def setDecimationValue(self, type, percentage=1.0):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_setDecimationValue(self, type, percentage)

    def getDecimationType(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getDecimationType(self)

    def getDecimationPercentage(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_getDecimationPercentage(self)

    def addNumTriangles(self, num):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumTriangles(self, num)

    def addNumLines(self, num):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumLines(self, num)

    def addNumPoints(self, num):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumPoints(self, num)

    def addNumText(self, num):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumText(self, num)

    def addNumImage(self, num):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumImage(self, num)

    def incNumTriangles(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumTriangles(self)

    def incNumLines(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumLines(self)

    def incNumPoints(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumPoints(self)

    def incNumText(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumText(self)

    def incNumImage(self):
        return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumImage(self)

# Register SoGetPrimitiveCountAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoGetPrimitiveCountAction_swigregister(SoGetPrimitiveCountAction)

def SoGetPrimitiveCountAction_getClassTypeId():
    return Coin_SWIG_Python.SoGetPrimitiveCountAction_getClassTypeId()

def SoGetPrimitiveCountAction_addMethod(type, method):
    return Coin_SWIG_Python.SoGetPrimitiveCountAction_addMethod(type, method)

def SoGetPrimitiveCountAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoGetPrimitiveCountAction_enableElement(type, stackindex)

def SoGetPrimitiveCountAction_initClass():
    return Coin_SWIG_Python.SoGetPrimitiveCountAction_initClass()

class SoHandleEventAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoHandleEventAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoHandleEventAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoHandleEventAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoHandleEventAction_enableElement(type, stackindex)

    def __init__(self, viewportregion):
        Coin_SWIG_Python.SoHandleEventAction_swiginit(self, Coin_SWIG_Python.new_SoHandleEventAction(viewportregion))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHandleEventAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoHandleEventAction_initClass()

    def setViewportRegion(self, newregion):
        return Coin_SWIG_Python.SoHandleEventAction_setViewportRegion(self, newregion)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoHandleEventAction_getViewportRegion(self)

    def setEvent(self, ev):
        return Coin_SWIG_Python.SoHandleEventAction_setEvent(self, ev)

    def getEvent(self):
        return Coin_SWIG_Python.SoHandleEventAction_getEvent(self)

    def setHandled(self):
        return Coin_SWIG_Python.SoHandleEventAction_setHandled(self)

    def isHandled(self):
        return Coin_SWIG_Python.SoHandleEventAction_isHandled(self)

    def setGrabber(self, node):
        return Coin_SWIG_Python.SoHandleEventAction_setGrabber(self, node)

    def releaseGrabber(self):
        return Coin_SWIG_Python.SoHandleEventAction_releaseGrabber(self)

    def getGrabber(self):
        return Coin_SWIG_Python.SoHandleEventAction_getGrabber(self)

    def setPickRoot(self, node):
        return Coin_SWIG_Python.SoHandleEventAction_setPickRoot(self, node)

    def getPickRoot(self):
        return Coin_SWIG_Python.SoHandleEventAction_getPickRoot(self)

    def setPickRadius(self, radiusinpixels):
        return Coin_SWIG_Python.SoHandleEventAction_setPickRadius(self, radiusinpixels)

    def getPickedPoint(self):
        return Coin_SWIG_Python.SoHandleEventAction_getPickedPoint(self)

    def getPickedPointList(self):
        return Coin_SWIG_Python.SoHandleEventAction_getPickedPointList(self)

# Register SoHandleEventAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoHandleEventAction_swigregister(SoHandleEventAction)

def SoHandleEventAction_getClassTypeId():
    return Coin_SWIG_Python.SoHandleEventAction_getClassTypeId()

def SoHandleEventAction_addMethod(type, method):
    return Coin_SWIG_Python.SoHandleEventAction_addMethod(type, method)

def SoHandleEventAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoHandleEventAction_enableElement(type, stackindex)

def SoHandleEventAction_initClass():
    return Coin_SWIG_Python.SoHandleEventAction_initClass()

class SoPickAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoPickAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPickAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoPickAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoPickAction_enableElement(type, stackindex)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPickAction_initClass()

    def setViewportRegion(self, newregion):
        return Coin_SWIG_Python.SoPickAction_setViewportRegion(self, newregion)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoPickAction_getViewportRegion(self)

    def enableCulling(self, flag):
        return Coin_SWIG_Python.SoPickAction_enableCulling(self, flag)

    def isCullingEnabled(self):
        return Coin_SWIG_Python.SoPickAction_isCullingEnabled(self)

# Register SoPickAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoPickAction_swigregister(SoPickAction)

def SoPickAction_getClassTypeId():
    return Coin_SWIG_Python.SoPickAction_getClassTypeId()

def SoPickAction_addMethod(type, method):
    return Coin_SWIG_Python.SoPickAction_addMethod(type, method)

def SoPickAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoPickAction_enableElement(type, stackindex)

def SoPickAction_initClass():
    return Coin_SWIG_Python.SoPickAction_initClass()

class SoRayPickAction(SoPickAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoRayPickAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRayPickAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoRayPickAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoRayPickAction_enableElement(type, stackindex)

    def __init__(self, viewportregion):
        Coin_SWIG_Python.SoRayPickAction_swiginit(self, Coin_SWIG_Python.new_SoRayPickAction(viewportregion))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRayPickAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRayPickAction_initClass()

    def setPoint(self, viewportPoint):
        return Coin_SWIG_Python.SoRayPickAction_setPoint(self, viewportPoint)

    def setNormalizedPoint(self, normpoint):
        return Coin_SWIG_Python.SoRayPickAction_setNormalizedPoint(self, normpoint)

    def setRadius(self, radiusinpixels):
        return Coin_SWIG_Python.SoRayPickAction_setRadius(self, radiusinpixels)

    def setRay(self, start, direction, neardistance=-1.0, fardistance=-1.0):
        return Coin_SWIG_Python.SoRayPickAction_setRay(self, start, direction, neardistance, fardistance)

    def setPickAll(self, flag):
        return Coin_SWIG_Python.SoRayPickAction_setPickAll(self, flag)

    def isPickAll(self):
        return Coin_SWIG_Python.SoRayPickAction_isPickAll(self)

    def getPickedPointList(self):
        return Coin_SWIG_Python.SoRayPickAction_getPickedPointList(self)

    def getPickedPoint(self, index=0):
        return Coin_SWIG_Python.SoRayPickAction_getPickedPoint(self, index)

    def computeWorldSpaceRay(self):
        return Coin_SWIG_Python.SoRayPickAction_computeWorldSpaceRay(self)

    def hasWorldSpaceRay(self):
        return Coin_SWIG_Python.SoRayPickAction_hasWorldSpaceRay(self)

    def setObjectSpace(self, *args):
        return Coin_SWIG_Python.SoRayPickAction_setObjectSpace(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SoRayPickAction_intersect(self, *args)

    def getViewVolume(self):
        return Coin_SWIG_Python.SoRayPickAction_getViewVolume(self)

    def getLine(self):
        return Coin_SWIG_Python.SoRayPickAction_getLine(self)

    def isBetweenPlanes(self, intersection):
        return Coin_SWIG_Python.SoRayPickAction_isBetweenPlanes(self, intersection)

    def addIntersection(self, objectspacepoint):
        return Coin_SWIG_Python.SoRayPickAction_addIntersection(self, objectspacepoint)

    def reset(self):
        return Coin_SWIG_Python.SoRayPickAction_reset(self)

# Register SoRayPickAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoRayPickAction_swigregister(SoRayPickAction)

def SoRayPickAction_getClassTypeId():
    return Coin_SWIG_Python.SoRayPickAction_getClassTypeId()

def SoRayPickAction_addMethod(type, method):
    return Coin_SWIG_Python.SoRayPickAction_addMethod(type, method)

def SoRayPickAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoRayPickAction_enableElement(type, stackindex)

def SoRayPickAction_initClass():
    return Coin_SWIG_Python.SoRayPickAction_initClass()

class SoSearchAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoSearchAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSearchAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoSearchAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoSearchAction_enableElement(type, stackindex)

    def __init__(self):
        Coin_SWIG_Python.SoSearchAction_swiginit(self, Coin_SWIG_Python.new_SoSearchAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSearchAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSearchAction_initClass()
    NODE = Coin_SWIG_Python.SoSearchAction_NODE
    TYPE = Coin_SWIG_Python.SoSearchAction_TYPE
    NAME = Coin_SWIG_Python.SoSearchAction_NAME
    FIRST = Coin_SWIG_Python.SoSearchAction_FIRST
    LAST = Coin_SWIG_Python.SoSearchAction_LAST
    ALL = Coin_SWIG_Python.SoSearchAction_ALL

    def setNode(self, node):
        return Coin_SWIG_Python.SoSearchAction_setNode(self, node)

    def getNode(self):
        return Coin_SWIG_Python.SoSearchAction_getNode(self)

    def setType(self, type, chkderived=1):
        return Coin_SWIG_Python.SoSearchAction_setType(self, type, chkderived)

    def getType(self, chkderived):
        return Coin_SWIG_Python.SoSearchAction_getType(self, chkderived)

    def setName(self, name):
        return Coin_SWIG_Python.SoSearchAction_setName(self, name)

    def getName(self):
        return Coin_SWIG_Python.SoSearchAction_getName(self)

    def setFind(self, what):
        return Coin_SWIG_Python.SoSearchAction_setFind(self, what)

    def getFind(self):
        return Coin_SWIG_Python.SoSearchAction_getFind(self)

    def setInterest(self, interest):
        return Coin_SWIG_Python.SoSearchAction_setInterest(self, interest)

    def getInterest(self):
        return Coin_SWIG_Python.SoSearchAction_getInterest(self)

    def setSearchingAll(self, searchall):
        return Coin_SWIG_Python.SoSearchAction_setSearchingAll(self, searchall)

    def isSearchingAll(self):
        return Coin_SWIG_Python.SoSearchAction_isSearchingAll(self)

    def getPath(self):
        return Coin_SWIG_Python.SoSearchAction_getPath(self)

    def getPaths(self):
        return Coin_SWIG_Python.SoSearchAction_getPaths(self)

    def reset(self):
        return Coin_SWIG_Python.SoSearchAction_reset(self)

    def setFound(self):
        return Coin_SWIG_Python.SoSearchAction_setFound(self)

    def isFound(self):
        return Coin_SWIG_Python.SoSearchAction_isFound(self)

    def addPath(self, path):
        return Coin_SWIG_Python.SoSearchAction_addPath(self, path)
    duringSearchAll = property(Coin_SWIG_Python.SoSearchAction_duringSearchAll_get, Coin_SWIG_Python.SoSearchAction_duringSearchAll_set)

# Register SoSearchAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoSearchAction_swigregister(SoSearchAction)

def SoSearchAction_getClassTypeId():
    return Coin_SWIG_Python.SoSearchAction_getClassTypeId()

def SoSearchAction_addMethod(type, method):
    return Coin_SWIG_Python.SoSearchAction_addMethod(type, method)

def SoSearchAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoSearchAction_enableElement(type, stackindex)

def SoSearchAction_initClass():
    return Coin_SWIG_Python.SoSearchAction_initClass()
cvar = Coin_SWIG_Python.cvar

class SoWriteAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoWriteAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoWriteAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoWriteAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoWriteAction_enableElement(type, stackindex)

    def __init__(self, *args):
        Coin_SWIG_Python.SoWriteAction_swiginit(self, Coin_SWIG_Python.new_SoWriteAction(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWriteAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoWriteAction_initClass()

    def getOutput(self):
        return Coin_SWIG_Python.SoWriteAction_getOutput(self)

    def continueToApply(self, *args):
        return Coin_SWIG_Python.SoWriteAction_continueToApply(self, *args)

# Register SoWriteAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoWriteAction_swigregister(SoWriteAction)

def SoWriteAction_getClassTypeId():
    return Coin_SWIG_Python.SoWriteAction_getClassTypeId()

def SoWriteAction_addMethod(type, method):
    return Coin_SWIG_Python.SoWriteAction_addMethod(type, method)

def SoWriteAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoWriteAction_enableElement(type, stackindex)

def SoWriteAction_initClass():
    return Coin_SWIG_Python.SoWriteAction_initClass()

class SoAudioRenderAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoAudioRenderAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAudioRenderAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoAudioRenderAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoAudioRenderAction_enableElement(type, stackindex)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAudioRenderAction_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoAudioRenderAction_swiginit(self, Coin_SWIG_Python.new_SoAudioRenderAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAudioRenderAction

    @staticmethod
    def callDoAction(action, node):
        return Coin_SWIG_Python.SoAudioRenderAction_callDoAction(action, node)

    @staticmethod
    def callAudioRender(action, node):
        return Coin_SWIG_Python.SoAudioRenderAction_callAudioRender(action, node)

# Register SoAudioRenderAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoAudioRenderAction_swigregister(SoAudioRenderAction)

def SoAudioRenderAction_getClassTypeId():
    return Coin_SWIG_Python.SoAudioRenderAction_getClassTypeId()

def SoAudioRenderAction_addMethod(type, method):
    return Coin_SWIG_Python.SoAudioRenderAction_addMethod(type, method)

def SoAudioRenderAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoAudioRenderAction_enableElement(type, stackindex)

def SoAudioRenderAction_initClass():
    return Coin_SWIG_Python.SoAudioRenderAction_initClass()

def SoAudioRenderAction_callDoAction(action, node):
    return Coin_SWIG_Python.SoAudioRenderAction_callDoAction(action, node)

def SoAudioRenderAction_callAudioRender(action, node):
    return Coin_SWIG_Python.SoAudioRenderAction_callAudioRender(action, node)

class SoIntersectingPrimitive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    path = property(Coin_SWIG_Python.SoIntersectingPrimitive_path_get, Coin_SWIG_Python.SoIntersectingPrimitive_path_set)
    SEGMENT = Coin_SWIG_Python.SoIntersectingPrimitive_SEGMENT
    LINE_SEGMENT = Coin_SWIG_Python.SoIntersectingPrimitive_LINE_SEGMENT
    TRIANGLE = Coin_SWIG_Python.SoIntersectingPrimitive_TRIANGLE
    type = property(Coin_SWIG_Python.SoIntersectingPrimitive_type_get, Coin_SWIG_Python.SoIntersectingPrimitive_type_set)
    vertex = property(Coin_SWIG_Python.SoIntersectingPrimitive_vertex_get, Coin_SWIG_Python.SoIntersectingPrimitive_vertex_set)
    xf_vertex = property(Coin_SWIG_Python.SoIntersectingPrimitive_xf_vertex_get, Coin_SWIG_Python.SoIntersectingPrimitive_xf_vertex_set)

    def __init__(self):
        Coin_SWIG_Python.SoIntersectingPrimitive_swiginit(self, Coin_SWIG_Python.new_SoIntersectingPrimitive())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIntersectingPrimitive

# Register SoIntersectingPrimitive in Coin_SWIG_Python:
Coin_SWIG_Python.SoIntersectingPrimitive_swigregister(SoIntersectingPrimitive)

class SoIntersectionDetectionAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIntersectionDetectionAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_enableElement(type, stackindex)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIntersectionDetectionAction_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoIntersectionDetectionAction_swiginit(self, Coin_SWIG_Python.new_SoIntersectionDetectionAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIntersectionDetectionAction
    NEXT_PRIMITIVE = Coin_SWIG_Python.SoIntersectionDetectionAction_NEXT_PRIMITIVE
    NEXT_SHAPE = Coin_SWIG_Python.SoIntersectionDetectionAction_NEXT_SHAPE
    ABORT = Coin_SWIG_Python.SoIntersectionDetectionAction_ABORT

    def setIntersectionDetectionEpsilon(self, epsilon):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setIntersectionDetectionEpsilon(self, epsilon)

    def getIntersectionDetectionEpsilon(self):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_getIntersectionDetectionEpsilon(self)

    @staticmethod
    def setIntersectionEpsilon(epsilon):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon)

    @staticmethod
    def getIntersectionEpsilon():
        return Coin_SWIG_Python.SoIntersectionDetectionAction_getIntersectionEpsilon()

    def setTypeEnabled(self, type, enable):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setTypeEnabled(self, type, enable)

    def isTypeEnabled(self, type, checkgroups=0):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_isTypeEnabled(self, type, checkgroups)

    def setManipsEnabled(self, enable):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setManipsEnabled(self, enable)

    def isManipsEnabled(self):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_isManipsEnabled(self)

    def setDraggersEnabled(self, enable):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setDraggersEnabled(self, enable)

    def isDraggersEnabled(self):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_isDraggersEnabled(self)

    def setShapeInternalsEnabled(self, enable):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setShapeInternalsEnabled(self, enable)

    def isShapeInternalsEnabled(self):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_isShapeInternalsEnabled(self)

    def apply(self, *args):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_apply(self, *args)

    def addVisitationCallback(self, *args):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_addVisitationCallback(self, *args)

    def removeVisitationCallback(self, *args):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_removeVisitationCallback(self, *args)

    def setFilterCallback(self, *args):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_setFilterCallback(self, *args)

    def addIntersectionCallback(self, *args):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_addIntersectionCallback(self, *args)

    def removeIntersectionCallback(self, *args):
        return Coin_SWIG_Python.SoIntersectionDetectionAction_removeIntersectionCallback(self, *args)

# Register SoIntersectionDetectionAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoIntersectionDetectionAction_swigregister(SoIntersectionDetectionAction)

def SoIntersectionDetectionAction_getClassTypeId():
    return Coin_SWIG_Python.SoIntersectionDetectionAction_getClassTypeId()

def SoIntersectionDetectionAction_addMethod(type, method):
    return Coin_SWIG_Python.SoIntersectionDetectionAction_addMethod(type, method)

def SoIntersectionDetectionAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoIntersectionDetectionAction_enableElement(type, stackindex)

def SoIntersectionDetectionAction_initClass():
    return Coin_SWIG_Python.SoIntersectionDetectionAction_initClass()

def SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon):
    return Coin_SWIG_Python.SoIntersectionDetectionAction_setIntersectionEpsilon(epsilon)

def SoIntersectionDetectionAction_getIntersectionEpsilon():
    return Coin_SWIG_Python.SoIntersectionDetectionAction_getIntersectionEpsilon()

class SoSimplifyAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoSimplifyAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSimplifyAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoSimplifyAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoSimplifyAction_enableElement(type, stackindex)

    def __init__(self):
        Coin_SWIG_Python.SoSimplifyAction_swiginit(self, Coin_SWIG_Python.new_SoSimplifyAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSimplifyAction

    def apply(self, *args):
        return Coin_SWIG_Python.SoSimplifyAction_apply(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSimplifyAction_initClass()

# Register SoSimplifyAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoSimplifyAction_swigregister(SoSimplifyAction)

def SoSimplifyAction_getClassTypeId():
    return Coin_SWIG_Python.SoSimplifyAction_getClassTypeId()

def SoSimplifyAction_addMethod(type, method):
    return Coin_SWIG_Python.SoSimplifyAction_addMethod(type, method)

def SoSimplifyAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoSimplifyAction_enableElement(type, stackindex)

def SoSimplifyAction_initClass():
    return Coin_SWIG_Python.SoSimplifyAction_initClass()

class SoReorganizeAction(SoSimplifyAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoReorganizeAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoReorganizeAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoReorganizeAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoReorganizeAction_enableElement(type, stackindex)

    def __init__(self, simplifier=None):
        Coin_SWIG_Python.SoReorganizeAction_swiginit(self, Coin_SWIG_Python.new_SoReorganizeAction(simplifier))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoReorganizeAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoReorganizeAction_initClass()

    def getSimplifiedSceneGraph(self):
        return Coin_SWIG_Python.SoReorganizeAction_getSimplifiedSceneGraph(self)

    def generateNormals(self, onoff):
        return Coin_SWIG_Python.SoReorganizeAction_generateNormals(self, onoff)

    def areNormalGenerated(self):
        return Coin_SWIG_Python.SoReorganizeAction_areNormalGenerated(self)

    def generateTriangleStrips(self, onoff):
        return Coin_SWIG_Python.SoReorganizeAction_generateTriangleStrips(self, onoff)

    def areTriangleStripGenerated(self):
        return Coin_SWIG_Python.SoReorganizeAction_areTriangleStripGenerated(self)

    def generateTexCoords(self, onoff):
        return Coin_SWIG_Python.SoReorganizeAction_generateTexCoords(self, onoff)

    def areTexCoordsGenerated(self):
        return Coin_SWIG_Python.SoReorganizeAction_areTexCoordsGenerated(self)

    def generateVPNodes(self, onoff):
        return Coin_SWIG_Python.SoReorganizeAction_generateVPNodes(self, onoff)

    def areVPNodesGenerated(self):
        return Coin_SWIG_Python.SoReorganizeAction_areVPNodesGenerated(self)

    def matchIndexArrays(self, onoff):
        return Coin_SWIG_Python.SoReorganizeAction_matchIndexArrays(self, onoff)

    def areIndexArraysMatched(self):
        return Coin_SWIG_Python.SoReorganizeAction_areIndexArraysMatched(self)

    def getSimplifier(self):
        return Coin_SWIG_Python.SoReorganizeAction_getSimplifier(self)

    def apply(self, *args):
        return Coin_SWIG_Python.SoReorganizeAction_apply(self, *args)

    @staticmethod
    def startReport(msg):
        return Coin_SWIG_Python.SoReorganizeAction_startReport(msg)

    @staticmethod
    def finishReport():
        return Coin_SWIG_Python.SoReorganizeAction_finishReport()

# Register SoReorganizeAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoReorganizeAction_swigregister(SoReorganizeAction)

def SoReorganizeAction_getClassTypeId():
    return Coin_SWIG_Python.SoReorganizeAction_getClassTypeId()

def SoReorganizeAction_addMethod(type, method):
    return Coin_SWIG_Python.SoReorganizeAction_addMethod(type, method)

def SoReorganizeAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoReorganizeAction_enableElement(type, stackindex)

def SoReorganizeAction_initClass():
    return Coin_SWIG_Python.SoReorganizeAction_initClass()

def SoReorganizeAction_startReport(msg):
    return Coin_SWIG_Python.SoReorganizeAction_startReport(msg)

def SoReorganizeAction_finishReport():
    return Coin_SWIG_Python.SoReorganizeAction_finishReport()

class SoToVRMLAction(SoAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoToVRMLAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoToVRMLAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoToVRMLAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoToVRMLAction_enableElement(type, stackindex)

    def __init__(self):
        Coin_SWIG_Python.SoToVRMLAction_swiginit(self, Coin_SWIG_Python.new_SoToVRMLAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoToVRMLAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoToVRMLAction_initClass()

    def apply(self, *args):
        return Coin_SWIG_Python.SoToVRMLAction_apply(self, *args)

    def getVRMLSceneGraph(self):
        return Coin_SWIG_Python.SoToVRMLAction_getVRMLSceneGraph(self)

    def expandSoFile(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_expandSoFile(self, flag)

    def areSoFileExpanded(self):
        return Coin_SWIG_Python.SoToVRMLAction_areSoFileExpanded(self)

    def setUrlName(self, name):
        return Coin_SWIG_Python.SoToVRMLAction_setUrlName(self, name)

    def getUrlName(self):
        return Coin_SWIG_Python.SoToVRMLAction_getUrlName(self)

    def writeTexCoords(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_writeTexCoords(self, flag)

    def areTexCoordWritten(self):
        return Coin_SWIG_Python.SoToVRMLAction_areTexCoordWritten(self)

    def expandTexture2Node(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_expandTexture2Node(self, flag)

    def areTexture2NodeExpanded(self):
        return Coin_SWIG_Python.SoToVRMLAction_areTexture2NodeExpanded(self)

    def keepUnknownNodes(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_keepUnknownNodes(self, flag)

    def areUnknownNodeKept(self):
        return Coin_SWIG_Python.SoToVRMLAction_areUnknownNodeKept(self)

    def convertInlineNodes(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_convertInlineNodes(self, flag)

    def doConvertInlineNodes(self):
        return Coin_SWIG_Python.SoToVRMLAction_doConvertInlineNodes(self)

    def conditionalConversion(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_conditionalConversion(self, flag)

    def doConditionalConversion(self):
        return Coin_SWIG_Python.SoToVRMLAction_doConditionalConversion(self)

    def setVerbosity(self, flag):
        return Coin_SWIG_Python.SoToVRMLAction_setVerbosity(self, flag)

    def isVerbose(self):
        return Coin_SWIG_Python.SoToVRMLAction_isVerbose(self)

# Register SoToVRMLAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoToVRMLAction_swigregister(SoToVRMLAction)

def SoToVRMLAction_getClassTypeId():
    return Coin_SWIG_Python.SoToVRMLAction_getClassTypeId()

def SoToVRMLAction_addMethod(type, method):
    return Coin_SWIG_Python.SoToVRMLAction_addMethod(type, method)

def SoToVRMLAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoToVRMLAction_enableElement(type, stackindex)

def SoToVRMLAction_initClass():
    return Coin_SWIG_Python.SoToVRMLAction_initClass()

class SoToVRML2Action(SoToVRMLAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoToVRML2Action_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoToVRML2Action_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoToVRML2Action_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoToVRML2Action_enableElement(type, stackindex)

    def __init__(self):
        Coin_SWIG_Python.SoToVRML2Action_swiginit(self, Coin_SWIG_Python.new_SoToVRML2Action())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoToVRML2Action

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoToVRML2Action_initClass()

    def apply(self, *args):
        return Coin_SWIG_Python.SoToVRML2Action_apply(self, *args)

    def getVRML2SceneGraph(self):
        return Coin_SWIG_Python.SoToVRML2Action_getVRML2SceneGraph(self)

    def reuseAppearanceNodes(self, appearance):
        return Coin_SWIG_Python.SoToVRML2Action_reuseAppearanceNodes(self, appearance)

    def doReuseAppearanceNodes(self):
        return Coin_SWIG_Python.SoToVRML2Action_doReuseAppearanceNodes(self)

    def reusePropertyNodes(self, property):
        return Coin_SWIG_Python.SoToVRML2Action_reusePropertyNodes(self, property)

    def doReusePropertyNodes(self):
        return Coin_SWIG_Python.SoToVRML2Action_doReusePropertyNodes(self)

    def reuseGeometryNodes(self, geometry):
        return Coin_SWIG_Python.SoToVRML2Action_reuseGeometryNodes(self, geometry)

    def doReuseGeometryNodes(self):
        return Coin_SWIG_Python.SoToVRML2Action_doReuseGeometryNodes(self)

# Register SoToVRML2Action in Coin_SWIG_Python:
Coin_SWIG_Python.SoToVRML2Action_swigregister(SoToVRML2Action)

def SoToVRML2Action_getClassTypeId():
    return Coin_SWIG_Python.SoToVRML2Action_getClassTypeId()

def SoToVRML2Action_addMethod(type, method):
    return Coin_SWIG_Python.SoToVRML2Action_addMethod(type, method)

def SoToVRML2Action_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoToVRML2Action_enableElement(type, stackindex)

def SoToVRML2Action_initClass():
    return Coin_SWIG_Python.SoToVRML2Action_initClass()

class SoHardCopy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def init():
        return Coin_SWIG_Python.SoHardCopy_init()

    @staticmethod
    def getProductName():
        return Coin_SWIG_Python.SoHardCopy_getProductName()

    @staticmethod
    def getVersion():
        return Coin_SWIG_Python.SoHardCopy_getVersion()

    def __init__(self):
        Coin_SWIG_Python.SoHardCopy_swiginit(self, Coin_SWIG_Python.new_SoHardCopy())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHardCopy

# Register SoHardCopy in Coin_SWIG_Python:
Coin_SWIG_Python.SoHardCopy_swigregister(SoHardCopy)

def SoHardCopy_init():
    return Coin_SWIG_Python.SoHardCopy_init()

def SoHardCopy_getProductName():
    return Coin_SWIG_Python.SoHardCopy_getProductName()

def SoHardCopy_getVersion():
    return Coin_SWIG_Python.SoHardCopy_getVersion()

class SoVectorOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoVectorOutput_swiginit(self, Coin_SWIG_Python.new_SoVectorOutput())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVectorOutput

    def openFile(self, filename):
        return Coin_SWIG_Python.SoVectorOutput_openFile(self, filename)

    def closeFile(self):
        return Coin_SWIG_Python.SoVectorOutput_closeFile(self)

    def getFilePointer(self):
        return Coin_SWIG_Python.SoVectorOutput_getFilePointer(self)

# Register SoVectorOutput in Coin_SWIG_Python:
Coin_SWIG_Python.SoVectorOutput_swigregister(SoVectorOutput)

class SoPSVectorOutput(SoVectorOutput):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoPSVectorOutput_swiginit(self, Coin_SWIG_Python.new_SoPSVectorOutput())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPSVectorOutput

    def setColored(self, flag=1):
        return Coin_SWIG_Python.SoPSVectorOutput_setColored(self, flag)

    def getColored(self):
        return Coin_SWIG_Python.SoPSVectorOutput_getColored(self)

# Register SoPSVectorOutput in Coin_SWIG_Python:
Coin_SWIG_Python.SoPSVectorOutput_swigregister(SoPSVectorOutput)

class SoVectorizeAction(SoCallbackAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoVectorizeAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVectorizeAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoVectorizeAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoVectorizeAction_enableElement(type, stackindex)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVectorizeAction

    def getOutput(self):
        return Coin_SWIG_Python.SoVectorizeAction_getOutput(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVectorizeAction_initClass()
    INCH = Coin_SWIG_Python.SoVectorizeAction_INCH
    MM = Coin_SWIG_Python.SoVectorizeAction_MM
    METER = Coin_SWIG_Python.SoVectorizeAction_METER
    PORTRAIT = Coin_SWIG_Python.SoVectorizeAction_PORTRAIT
    LANDSCAPE = Coin_SWIG_Python.SoVectorizeAction_LANDSCAPE
    A0 = Coin_SWIG_Python.SoVectorizeAction_A0
    A1 = Coin_SWIG_Python.SoVectorizeAction_A1
    A2 = Coin_SWIG_Python.SoVectorizeAction_A2
    A3 = Coin_SWIG_Python.SoVectorizeAction_A3
    A4 = Coin_SWIG_Python.SoVectorizeAction_A4
    A5 = Coin_SWIG_Python.SoVectorizeAction_A5
    A6 = Coin_SWIG_Python.SoVectorizeAction_A6
    A7 = Coin_SWIG_Python.SoVectorizeAction_A7
    A8 = Coin_SWIG_Python.SoVectorizeAction_A8
    A9 = Coin_SWIG_Python.SoVectorizeAction_A9
    A10 = Coin_SWIG_Python.SoVectorizeAction_A10

    def apply(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_apply(self, *args)

    def beginStandardPage(self, pagesize, border=10.0):
        return Coin_SWIG_Python.SoVectorizeAction_beginStandardPage(self, pagesize, border)

    def beginPage(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_beginPage(self, *args)

    def endPage(self):
        return Coin_SWIG_Python.SoVectorizeAction_endPage(self)

    def calibrate(self, vp):
        return Coin_SWIG_Python.SoVectorizeAction_calibrate(self, vp)

    def beginViewport(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_beginViewport(self, *args)

    def endViewport(self):
        return Coin_SWIG_Python.SoVectorizeAction_endViewport(self)

    def setOrientation(self, o):
        return Coin_SWIG_Python.SoVectorizeAction_setOrientation(self, o)

    def getOrientation(self):
        return Coin_SWIG_Python.SoVectorizeAction_getOrientation(self)

    def setBackgroundColor(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setBackgroundColor(self, *args)

    def getBackgroundColor(self, col):
        return Coin_SWIG_Python.SoVectorizeAction_getBackgroundColor(self, col)

    def setNominalWidth(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setNominalWidth(self, *args)

    def getNominalWidth(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_getNominalWidth(self, *args)

    def setPixelImageSize(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setPixelImageSize(self, *args)

    def getPixelImageSize(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_getPixelImageSize(self, *args)
    CIRCLE = Coin_SWIG_Python.SoVectorizeAction_CIRCLE
    SQUARE = Coin_SWIG_Python.SoVectorizeAction_SQUARE

    def setPointStyle(self, style):
        return Coin_SWIG_Python.SoVectorizeAction_setPointStyle(self, style)

    def getPointStyle(self):
        return Coin_SWIG_Python.SoVectorizeAction_getPointStyle(self)

    def getPageStartpos(self):
        return Coin_SWIG_Python.SoVectorizeAction_getPageStartpos(self)

    def getPageSize(self):
        return Coin_SWIG_Python.SoVectorizeAction_getPageSize(self)
    REVERSE_ONLY_BLACK_AND_WHITE = Coin_SWIG_Python.SoVectorizeAction_REVERSE_ONLY_BLACK_AND_WHITE
    AS_IS = Coin_SWIG_Python.SoVectorizeAction_AS_IS
    REVERSE = Coin_SWIG_Python.SoVectorizeAction_REVERSE
    NO_JOIN = Coin_SWIG_Python.SoVectorizeAction_NO_JOIN
    MITERED_JOIN = Coin_SWIG_Python.SoVectorizeAction_MITERED_JOIN
    MITERED_BEVELED_JOIN = Coin_SWIG_Python.SoVectorizeAction_MITERED_BEVELED_JOIN
    BEVELED_JOIN = Coin_SWIG_Python.SoVectorizeAction_BEVELED_JOIN
    TRIANGULAR_JOIN = Coin_SWIG_Python.SoVectorizeAction_TRIANGULAR_JOIN
    ROUNDED_JOIN = Coin_SWIG_Python.SoVectorizeAction_ROUNDED_JOIN
    BUTT_END = Coin_SWIG_Python.SoVectorizeAction_BUTT_END
    SQUARE_END = Coin_SWIG_Python.SoVectorizeAction_SQUARE_END
    TRIANGULAR_END = Coin_SWIG_Python.SoVectorizeAction_TRIANGULAR_END
    ROUND_END = Coin_SWIG_Python.SoVectorizeAction_ROUND_END
    NO_HLHSR = Coin_SWIG_Python.SoVectorizeAction_NO_HLHSR
    HLHSR_SIMPLE_PAINTER = Coin_SWIG_Python.SoVectorizeAction_HLHSR_SIMPLE_PAINTER
    HLHSR_PAINTER = Coin_SWIG_Python.SoVectorizeAction_HLHSR_PAINTER
    HLHSR_PAINTER_SURFACE_REMOVAL = Coin_SWIG_Python.SoVectorizeAction_HLHSR_PAINTER_SURFACE_REMOVAL
    HIDDEN_LINES_REMOVAL = Coin_SWIG_Python.SoVectorizeAction_HIDDEN_LINES_REMOVAL

    def setDrawingDimensions(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setDrawingDimensions(self, *args)

    def getDrawingDimensions(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_getDrawingDimensions(self, *args)

    def setStartPosition(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setStartPosition(self, *args)

    def getStartPosition(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_getStartPosition(self, *args)

    def setColorTranslationMethod(self, method):
        return Coin_SWIG_Python.SoVectorizeAction_setColorTranslationMethod(self, method)

    def getColorTranslationMethod(self):
        return Coin_SWIG_Python.SoVectorizeAction_getColorTranslationMethod(self)

    def setLineEndStyle(self, style):
        return Coin_SWIG_Python.SoVectorizeAction_setLineEndStyle(self, style)

    def getLineEndStyle(self):
        return Coin_SWIG_Python.SoVectorizeAction_getLineEndStyle(self)

    def setLineJoinsStyle(self, style):
        return Coin_SWIG_Python.SoVectorizeAction_setLineJoinsStyle(self, style)

    def getLineJoinsStyle(self):
        return Coin_SWIG_Python.SoVectorizeAction_getLineJoinsStyle(self)

    def setHLHSRMode(self, mode):
        return Coin_SWIG_Python.SoVectorizeAction_setHLHSRMode(self, mode)

    def getHLHSRMode(self):
        return Coin_SWIG_Python.SoVectorizeAction_getHLHSRMode(self)

    def setBorder(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setBorder(self, *args)

    def setMiterLimit(self, limit):
        return Coin_SWIG_Python.SoVectorizeAction_setMiterLimit(self, limit)

    def getMiterLimit(self):
        return Coin_SWIG_Python.SoVectorizeAction_getMiterLimit(self)

    def setPenDescription(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_setPenDescription(self, *args)

    def getPenDescription(self, *args):
        return Coin_SWIG_Python.SoVectorizeAction_getPenDescription(self, *args)

    def getPenNum(self):
        return Coin_SWIG_Python.SoVectorizeAction_getPenNum(self)

    def setColorPriority(self, priority):
        return Coin_SWIG_Python.SoVectorizeAction_setColorPriority(self, priority)

    def getColorPriority(self):
        return Coin_SWIG_Python.SoVectorizeAction_getColorPriority(self)

    def enableLighting(self, flag):
        return Coin_SWIG_Python.SoVectorizeAction_enableLighting(self, flag)

    def isLightingEnabled(self):
        return Coin_SWIG_Python.SoVectorizeAction_isLightingEnabled(self)

# Register SoVectorizeAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoVectorizeAction_swigregister(SoVectorizeAction)

def SoVectorizeAction_getClassTypeId():
    return Coin_SWIG_Python.SoVectorizeAction_getClassTypeId()

def SoVectorizeAction_addMethod(type, method):
    return Coin_SWIG_Python.SoVectorizeAction_addMethod(type, method)

def SoVectorizeAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoVectorizeAction_enableElement(type, stackindex)

def SoVectorizeAction_initClass():
    return Coin_SWIG_Python.SoVectorizeAction_initClass()

class SoShape(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShape_initClass()
    TRIANGLE_STRIP = Coin_SWIG_Python.SoShape_TRIANGLE_STRIP
    TRIANGLE_FAN = Coin_SWIG_Python.SoShape_TRIANGLE_FAN
    TRIANGLES = Coin_SWIG_Python.SoShape_TRIANGLES
    POLYGON = Coin_SWIG_Python.SoShape_POLYGON
    QUADS = Coin_SWIG_Python.SoShape_QUADS
    QUAD_STRIP = Coin_SWIG_Python.SoShape_QUAD_STRIP
    POINTS = Coin_SWIG_Python.SoShape_POINTS
    LINES = Coin_SWIG_Python.SoShape_LINES
    LINE_STRIP = Coin_SWIG_Python.SoShape_LINE_STRIP

    def affectsState(self):
        return Coin_SWIG_Python.SoShape_affectsState(self)

    def notify(self, nl):
        return Coin_SWIG_Python.SoShape_notify(self, nl)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoShape_getBoundingBox(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoShape_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoShape_rayPick(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoShape_callback(self, action)

    def computeBBox(self, action, box, center):
        return Coin_SWIG_Python.SoShape_computeBBox(self, action, box, center)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoShape_getPrimitiveCount(self, action)

    @staticmethod
    def getScreenSize(state, boundingbox, rectsize):
        return Coin_SWIG_Python.SoShape_getScreenSize(state, boundingbox, rectsize)

    @staticmethod
    def getDecimatedComplexity(state, complexity):
        return Coin_SWIG_Python.SoShape_getDecimatedComplexity(state, complexity)

    def getBoundingBoxCache(self):
        return Coin_SWIG_Python.SoShape_getBoundingBoxCache(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShape

# Register SoShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoShape_swigregister(SoShape)

def SoShape_getClassTypeId():
    return Coin_SWIG_Python.SoShape_getClassTypeId()

def SoShape_initClass():
    return Coin_SWIG_Python.SoShape_initClass()

def SoShape_getScreenSize(state, boundingbox, rectsize):
    return Coin_SWIG_Python.SoShape_getScreenSize(state, boundingbox, rectsize)

def SoShape_getDecimatedComplexity(state, complexity):
    return Coin_SWIG_Python.SoShape_getDecimatedComplexity(state, complexity)

class SoSFInt32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFInt32_swiginit(self, Coin_SWIG_Python.new_SoSFInt32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFInt32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFInt32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFInt32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFInt32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFInt32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFInt32_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFInt32_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFInt32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFInt32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFInt32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFInt32_setValue(self, *args)

# Register SoSFInt32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFInt32_swigregister(SoSFInt32)

def SoSFInt32_createInstance():
    return Coin_SWIG_Python.SoSFInt32_createInstance()

def SoSFInt32_getClassTypeId():
    return Coin_SWIG_Python.SoSFInt32_getClassTypeId()

def SoSFInt32_initClass():
    return Coin_SWIG_Python.SoSFInt32_initClass()

class SoImage(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoImage_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoImage_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoImage_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoImage_swiginit(self, Coin_SWIG_Python.new_SoImage())
    BOTTOM = Coin_SWIG_Python.SoImage_BOTTOM
    HALF = Coin_SWIG_Python.SoImage_HALF
    TOP = Coin_SWIG_Python.SoImage_TOP
    LEFT = Coin_SWIG_Python.SoImage_LEFT
    CENTER = Coin_SWIG_Python.SoImage_CENTER
    RIGHT = Coin_SWIG_Python.SoImage_RIGHT
    width = property(Coin_SWIG_Python.SoImage_width_get, Coin_SWIG_Python.SoImage_width_set)
    height = property(Coin_SWIG_Python.SoImage_height_get, Coin_SWIG_Python.SoImage_height_set)
    vertAlignment = property(Coin_SWIG_Python.SoImage_vertAlignment_get, Coin_SWIG_Python.SoImage_vertAlignment_set)
    horAlignment = property(Coin_SWIG_Python.SoImage_horAlignment_get, Coin_SWIG_Python.SoImage_horAlignment_set)
    image = property(Coin_SWIG_Python.SoImage_image_get, Coin_SWIG_Python.SoImage_image_set)
    filename = property(Coin_SWIG_Python.SoImage_filename_get, Coin_SWIG_Python.SoImage_filename_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoImage_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoImage_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoImage_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoImage

# Register SoImage in Coin_SWIG_Python:
Coin_SWIG_Python.SoImage_swigregister(SoImage)

def SoImage_getClassTypeId():
    return Coin_SWIG_Python.SoImage_getClassTypeId()

def SoImage_initClass():
    return Coin_SWIG_Python.SoImage_initClass()

class SoVectorizePSAction(SoVectorizeAction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoVectorizePSAction_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVectorizePSAction_getClassTypeId()

    @staticmethod
    def addMethod(type, method):
        return Coin_SWIG_Python.SoVectorizePSAction_addMethod(type, method)

    @staticmethod
    def enableElement(type, stackindex):
        return Coin_SWIG_Python.SoVectorizePSAction_enableElement(type, stackindex)

    def __init__(self):
        Coin_SWIG_Python.SoVectorizePSAction_swiginit(self, Coin_SWIG_Python.new_SoVectorizePSAction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVectorizePSAction

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVectorizePSAction_initClass()

    def setDefault2DFont(self, fontname):
        return Coin_SWIG_Python.SoVectorizePSAction_setDefault2DFont(self, fontname)

    def getDefault2DFont(self):
        return Coin_SWIG_Python.SoVectorizePSAction_getDefault2DFont(self)

    def setGouraudThreshold(self, eps):
        return Coin_SWIG_Python.SoVectorizePSAction_setGouraudThreshold(self, eps)

    def getOutput(self):
        return Coin_SWIG_Python.SoVectorizePSAction_getOutput(self)

    def getPSOutput(self):
        return Coin_SWIG_Python.SoVectorizePSAction_getPSOutput(self)

# Register SoVectorizePSAction in Coin_SWIG_Python:
Coin_SWIG_Python.SoVectorizePSAction_swigregister(SoVectorizePSAction)

def SoVectorizePSAction_getClassTypeId():
    return Coin_SWIG_Python.SoVectorizePSAction_getClassTypeId()

def SoVectorizePSAction_addMethod(type, method):
    return Coin_SWIG_Python.SoVectorizePSAction_addMethod(type, method)

def SoVectorizePSAction_enableElement(type, stackindex):
    return Coin_SWIG_Python.SoVectorizePSAction_enableElement(type, stackindex)

def SoVectorizePSAction_initClass():
    return Coin_SWIG_Python.SoVectorizePSAction_initClass()

class SoBundle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register SoBundle in Coin_SWIG_Python:
Coin_SWIG_Python.SoBundle_swigregister(SoBundle)

class SoMaterialBundle(SoBundle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, action):
        Coin_SWIG_Python.SoMaterialBundle_swiginit(self, Coin_SWIG_Python.new_SoMaterialBundle(action))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMaterialBundle

    def setUpMultiple(self):
        return Coin_SWIG_Python.SoMaterialBundle_setUpMultiple(self)

    def sendFirst(self):
        return Coin_SWIG_Python.SoMaterialBundle_sendFirst(self)

    def forceSend(self, index):
        return Coin_SWIG_Python.SoMaterialBundle_forceSend(self, index)

    def isColorOnly(self):
        return Coin_SWIG_Python.SoMaterialBundle_isColorOnly(self)

    def send(self, index, betweenbeginend):
        return Coin_SWIG_Python.SoMaterialBundle_send(self, index, betweenbeginend)

# Register SoMaterialBundle in Coin_SWIG_Python:
Coin_SWIG_Python.SoMaterialBundle_swigregister(SoMaterialBundle)

class SbBSPTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxnodepts=64, initsize=4):
        Coin_SWIG_Python.SbBSPTree_swiginit(self, Coin_SWIG_Python.new_SbBSPTree(maxnodepts, initsize))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBSPTree

    def numPoints(self):
        return Coin_SWIG_Python.SbBSPTree_numPoints(self)

    def getPoint(self, *args):
        return Coin_SWIG_Python.SbBSPTree_getPoint(self, *args)

    def getUserData(self, idx):
        return Coin_SWIG_Python.SbBSPTree_getUserData(self, idx)

    def setUserData(self, idx, data):
        return Coin_SWIG_Python.SbBSPTree_setUserData(self, idx, data)

    def addPoint(self, pt, userdata=None):
        return Coin_SWIG_Python.SbBSPTree_addPoint(self, pt, userdata)

    def removePoint(self, *args):
        return Coin_SWIG_Python.SbBSPTree_removePoint(self, *args)

    def findPoint(self, pos):
        return Coin_SWIG_Python.SbBSPTree_findPoint(self, pos)

    def clear(self, initsize=4):
        return Coin_SWIG_Python.SbBSPTree_clear(self, initsize)

    def getBBox(self):
        return Coin_SWIG_Python.SbBSPTree_getBBox(self)

    def getPointsArrayPtr(self):
        return Coin_SWIG_Python.SbBSPTree_getPointsArrayPtr(self)

    def findPoints(self, *args):
        return Coin_SWIG_Python.SbBSPTree_findPoints(self, *args)

    def findClosest(self, *args):
        return Coin_SWIG_Python.SbBSPTree_findClosest(self, *args)

# Register SbBSPTree in Coin_SWIG_Python:
Coin_SWIG_Python.SbBSPTree_swigregister(SbBSPTree)

class SoNormalGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ccw, approxVertices=64):
        Coin_SWIG_Python.SoNormalGenerator_swiginit(self, Coin_SWIG_Python.new_SoNormalGenerator(ccw, approxVertices))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalGenerator

    def reset(self, ccw):
        return Coin_SWIG_Python.SoNormalGenerator_reset(self, ccw)

    def beginPolygon(self):
        return Coin_SWIG_Python.SoNormalGenerator_beginPolygon(self)

    def polygonVertex(self, v):
        return Coin_SWIG_Python.SoNormalGenerator_polygonVertex(self, v)

    def endPolygon(self):
        return Coin_SWIG_Python.SoNormalGenerator_endPolygon(self)

    def triangle(self, v0, v1, v2):
        return Coin_SWIG_Python.SoNormalGenerator_triangle(self, v0, v1, v2)

    def quad(self, v0, v1, v2, v3):
        return Coin_SWIG_Python.SoNormalGenerator_quad(self, v0, v1, v2, v3)

    def generate(self, creaseAngle, striplens=None, numstrips=0):
        return Coin_SWIG_Python.SoNormalGenerator_generate(self, creaseAngle, striplens, numstrips)

    def generatePerStrip(self, striplens, numstrips):
        return Coin_SWIG_Python.SoNormalGenerator_generatePerStrip(self, striplens, numstrips)

    def generatePerFace(self):
        return Coin_SWIG_Python.SoNormalGenerator_generatePerFace(self)

    def generateOverall(self):
        return Coin_SWIG_Python.SoNormalGenerator_generateOverall(self)

    def getNumNormals(self):
        return Coin_SWIG_Python.SoNormalGenerator_getNumNormals(self)

    def setNumNormals(self, num):
        return Coin_SWIG_Python.SoNormalGenerator_setNumNormals(self, num)

    def getNormals(self):
        return Coin_SWIG_Python.SoNormalGenerator_getNormals(self)

    def getNormal(self, i):
        return Coin_SWIG_Python.SoNormalGenerator_getNormal(self, i)

    def setNormal(self, index, normal):
        return Coin_SWIG_Python.SoNormalGenerator_setNormal(self, index, normal)

# Register SoNormalGenerator in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormalGenerator_swigregister(SoNormalGenerator)

class SoNormalElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNormalElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoNormalElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoNormalElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNormalElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoNormalElement_init(self, state)

    @staticmethod
    def set(state, node, numNormals, normals, normalsAreUnitLength=0):
        return Coin_SWIG_Python.SoNormalElement_set(state, node, numNormals, normals, normalsAreUnitLength)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoNormalElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoNormalElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoNormalElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoNormalElement_getArrayPtr(self)

    def areNormalsUnitLength(self):
        return Coin_SWIG_Python.SoNormalElement_areNormalsUnitLength(self)

# Register SoNormalElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormalElement_swigregister(SoNormalElement)

def SoNormalElement_getClassTypeId():
    return Coin_SWIG_Python.SoNormalElement_getClassTypeId()

def SoNormalElement_getClassStackIndex():
    return Coin_SWIG_Python.SoNormalElement_getClassStackIndex()

def SoNormalElement_createInstance():
    return Coin_SWIG_Python.SoNormalElement_createInstance()

def SoNormalElement_initClass():
    return Coin_SWIG_Python.SoNormalElement_initClass()

def SoNormalElement_set(state, node, numNormals, normals, normalsAreUnitLength=0):
    return Coin_SWIG_Python.SoNormalElement_set(state, node, numNormals, normals, normalsAreUnitLength)

def SoNormalElement_getInstance(state):
    return Coin_SWIG_Python.SoNormalElement_getInstance(state)

class SoGLNormalElement(SoNormalElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLNormalElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLNormalElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLNormalElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLNormalElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLNormalElement_init(self, state)

    def send(self, index):
        return Coin_SWIG_Python.SoGLNormalElement_send(self, index)

# Register SoGLNormalElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLNormalElement_swigregister(SoGLNormalElement)

def SoGLNormalElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLNormalElement_getClassTypeId()

def SoGLNormalElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLNormalElement_getClassStackIndex()

def SoGLNormalElement_createInstance():
    return Coin_SWIG_Python.SoGLNormalElement_createInstance()

def SoGLNormalElement_initClass():
    return Coin_SWIG_Python.SoGLNormalElement_initClass()

class SoNormalBundle(SoBundle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, action, forrendering):
        Coin_SWIG_Python.SoNormalBundle_swiginit(self, Coin_SWIG_Python.new_SoNormalBundle(action, forrendering))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalBundle

    def shouldGenerate(self, numneeded):
        return Coin_SWIG_Python.SoNormalBundle_shouldGenerate(self, numneeded)

    def initGenerator(self, initnum=100):
        return Coin_SWIG_Python.SoNormalBundle_initGenerator(self, initnum)

    def beginPolygon(self):
        return Coin_SWIG_Python.SoNormalBundle_beginPolygon(self)

    def polygonVertex(self, v):
        return Coin_SWIG_Python.SoNormalBundle_polygonVertex(self, v)

    def endPolygon(self):
        return Coin_SWIG_Python.SoNormalBundle_endPolygon(self)

    def triangle(self, p1, p2, p3):
        return Coin_SWIG_Python.SoNormalBundle_triangle(self, p1, p2, p3)

    def generate(self, startindex=0, addtostate=1):
        return Coin_SWIG_Python.SoNormalBundle_generate(self, startindex, addtostate)

    def getGeneratedNormals(self):
        return Coin_SWIG_Python.SoNormalBundle_getGeneratedNormals(self)

    def getNumGeneratedNormals(self):
        return Coin_SWIG_Python.SoNormalBundle_getNumGeneratedNormals(self)

    def set(self, num, normals):
        return Coin_SWIG_Python.SoNormalBundle_set(self, num, normals)

    def get(self, index):
        return Coin_SWIG_Python.SoNormalBundle_get(self, index)

    def send(self, index):
        return Coin_SWIG_Python.SoNormalBundle_send(self, index)
    generator = property(Coin_SWIG_Python.SoNormalBundle_generator_get, Coin_SWIG_Python.SoNormalBundle_generator_set)

# Register SoNormalBundle in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormalBundle_swigregister(SoNormalBundle)

class SoTextureCoordinateElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateElement_initClass()
    NONE = Coin_SWIG_Python.SoTextureCoordinateElement_NONE
    TEXGEN = Coin_SWIG_Python.SoTextureCoordinateElement_TEXGEN
    EXPLICIT = Coin_SWIG_Python.SoTextureCoordinateElement_EXPLICIT
    FUNCTION = Coin_SWIG_Python.SoTextureCoordinateElement_FUNCTION
    DEFAULT = Coin_SWIG_Python.SoTextureCoordinateElement_DEFAULT

    def init(self, state):
        return Coin_SWIG_Python.SoTextureCoordinateElement_init(self, state)

    @staticmethod
    def setDefault(state, node):
        return Coin_SWIG_Python.SoTextureCoordinateElement_setDefault(state, node)

    @staticmethod
    def setFunction(state, node, func, userdata):
        return Coin_SWIG_Python.SoTextureCoordinateElement_setFunction(state, node, func, userdata)

    @staticmethod
    def set2(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoTextureCoordinateElement_set2(state, node, numCoords, coords)

    @staticmethod
    def set3(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoTextureCoordinateElement_set3(state, node, numCoords, coords)

    @staticmethod
    def set4(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoTextureCoordinateElement_set4(state, node, numCoords, coords)

    def getType(self, *args):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getType(self, *args)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getInstance(state)

    def get(self, point, normal):
        return Coin_SWIG_Python.SoTextureCoordinateElement_get(self, point, normal)

    def getNum(self):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getNum(self)

    def is2D(self):
        return Coin_SWIG_Python.SoTextureCoordinateElement_is2D(self)

    def getDimension(self):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getDimension(self)

    def get2(self, index):
        return Coin_SWIG_Python.SoTextureCoordinateElement_get2(self, index)

    def get3(self, index):
        return Coin_SWIG_Python.SoTextureCoordinateElement_get3(self, index)

    def get4(self, index):
        return Coin_SWIG_Python.SoTextureCoordinateElement_get4(self, index)

    def getArrayPtr2(self):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getArrayPtr2(self)

    def getArrayPtr3(self):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getArrayPtr3(self)

    def getArrayPtr4(self):
        return Coin_SWIG_Python.SoTextureCoordinateElement_getArrayPtr4(self)

# Register SoTextureCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateElement_swigregister(SoTextureCoordinateElement)

def SoTextureCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateElement_getClassTypeId()

def SoTextureCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureCoordinateElement_getClassStackIndex()

def SoTextureCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoTextureCoordinateElement_createInstance()

def SoTextureCoordinateElement_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateElement_initClass()

def SoTextureCoordinateElement_setDefault(state, node):
    return Coin_SWIG_Python.SoTextureCoordinateElement_setDefault(state, node)

def SoTextureCoordinateElement_setFunction(state, node, func, userdata):
    return Coin_SWIG_Python.SoTextureCoordinateElement_setFunction(state, node, func, userdata)

def SoTextureCoordinateElement_set2(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoTextureCoordinateElement_set2(state, node, numCoords, coords)

def SoTextureCoordinateElement_set3(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoTextureCoordinateElement_set3(state, node, numCoords, coords)

def SoTextureCoordinateElement_set4(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoTextureCoordinateElement_set4(state, node, numCoords, coords)

def SoTextureCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoTextureCoordinateElement_getInstance(state)

class SoGLTextureCoordinateElement(SoTextureCoordinateElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_pop(self, state, prevTopElement)

    @staticmethod
    def setTexGen(state, node, texgenFunc, texgenData=None, func=None, funcData=None):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_setTexGen(state, node, texgenFunc, texgenData, func, funcData)

    def getType(self):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_getType(self)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_getInstance(state)

    def send(self, *args):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_send(self, *args)

    def initMulti(self, state):
        return Coin_SWIG_Python.SoGLTextureCoordinateElement_initMulti(self, state)

# Register SoGLTextureCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLTextureCoordinateElement_swigregister(SoGLTextureCoordinateElement)

def SoGLTextureCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassTypeId()

def SoGLTextureCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassStackIndex()

def SoGLTextureCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoGLTextureCoordinateElement_createInstance()

def SoGLTextureCoordinateElement_initClass():
    return Coin_SWIG_Python.SoGLTextureCoordinateElement_initClass()

def SoGLTextureCoordinateElement_setTexGen(state, node, texgenFunc, texgenData=None, func=None, funcData=None):
    return Coin_SWIG_Python.SoGLTextureCoordinateElement_setTexGen(state, node, texgenFunc, texgenData, func, funcData)

def SoGLTextureCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoGLTextureCoordinateElement_getInstance(state)

class SoTextureCoordinateBundle(SoBundle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, action, forRendering, setUpDefault=1):
        Coin_SWIG_Python.SoTextureCoordinateBundle_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateBundle(action, forRendering, setUpDefault))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateBundle

    def needCoordinates(self):
        return Coin_SWIG_Python.SoTextureCoordinateBundle_needCoordinates(self)

    def isFunction(self):
        return Coin_SWIG_Python.SoTextureCoordinateBundle_isFunction(self)

    def get(self, *args):
        return Coin_SWIG_Python.SoTextureCoordinateBundle_get(self, *args)

    def send(self, *args):
        return Coin_SWIG_Python.SoTextureCoordinateBundle_send(self, *args)

    def needIndices(self):
        return Coin_SWIG_Python.SoTextureCoordinateBundle_needIndices(self)

# Register SoTextureCoordinateBundle in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateBundle_swigregister(SoTextureCoordinateBundle)

class SoCache(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, state):
        Coin_SWIG_Python.SoCache_swiginit(self, Coin_SWIG_Python.new_SoCache(state))

    def ref(self):
        return Coin_SWIG_Python.SoCache_ref(self)

    def unref(self, state=None):
        return Coin_SWIG_Python.SoCache_unref(self, state)

    def addElement(self, elem):
        return Coin_SWIG_Python.SoCache_addElement(self, elem)

    def addCacheDependency(self, state, cache):
        return Coin_SWIG_Python.SoCache_addCacheDependency(self, state, cache)

    def isValid(self, state):
        return Coin_SWIG_Python.SoCache_isValid(self, state)

    def getInvalidElement(self, state):
        return Coin_SWIG_Python.SoCache_getInvalidElement(self, state)

    def invalidate(self):
        return Coin_SWIG_Python.SoCache_invalidate(self)

# Register SoCache in Coin_SWIG_Python:
Coin_SWIG_Python.SoCache_swigregister(SoCache)

class SoBoundingBoxCache(SoCache):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, state):
        Coin_SWIG_Python.SoBoundingBoxCache_swiginit(self, Coin_SWIG_Python.new_SoBoundingBoxCache(state))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBoundingBoxCache

    def set(self, boundingbox, centerset, centerpoint):
        return Coin_SWIG_Python.SoBoundingBoxCache_set(self, boundingbox, centerset, centerpoint)

    def getBox(self):
        return Coin_SWIG_Python.SoBoundingBoxCache_getBox(self)

    def getProjectedBox(self):
        return Coin_SWIG_Python.SoBoundingBoxCache_getProjectedBox(self)

    def isCenterSet(self):
        return Coin_SWIG_Python.SoBoundingBoxCache_isCenterSet(self)

    def getCenter(self):
        return Coin_SWIG_Python.SoBoundingBoxCache_getCenter(self)

    @staticmethod
    def setHasLinesOrPoints(state):
        return Coin_SWIG_Python.SoBoundingBoxCache_setHasLinesOrPoints(state)

    def hasLinesOrPoints(self):
        return Coin_SWIG_Python.SoBoundingBoxCache_hasLinesOrPoints(self)

# Register SoBoundingBoxCache in Coin_SWIG_Python:
Coin_SWIG_Python.SoBoundingBoxCache_swigregister(SoBoundingBoxCache)

def SoBoundingBoxCache_setHasLinesOrPoints(state):
    return Coin_SWIG_Python.SoBoundingBoxCache_setHasLinesOrPoints(state)

class SoConvexDataCache(SoCache):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, state):
        Coin_SWIG_Python.SoConvexDataCache_swiginit(self, Coin_SWIG_Python.new_SoConvexDataCache(state))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoConvexDataCache
    NONE = Coin_SWIG_Python.SoConvexDataCache_NONE
    PER_FACE = Coin_SWIG_Python.SoConvexDataCache_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoConvexDataCache_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoConvexDataCache_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoConvexDataCache_PER_VERTEX_INDEXED

    def generate(self, coords, coordindices, numcoordindices, matindices, normindices, texindices, matbinding, normbinding, texbinding):
        return Coin_SWIG_Python.SoConvexDataCache_generate(self, coords, coordindices, numcoordindices, matindices, normindices, texindices, matbinding, normbinding, texbinding)

    def getCoordIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getCoordIndices(self)

    def getNumCoordIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getNumCoordIndices(self)

    def getMaterialIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getMaterialIndices(self)

    def getNumMaterialIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getNumMaterialIndices(self)

    def getNormalIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getNormalIndices(self)

    def getNumNormalIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getNumNormalIndices(self)

    def getTexIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getTexIndices(self)

    def getNumTexIndices(self):
        return Coin_SWIG_Python.SoConvexDataCache_getNumTexIndices(self)

# Register SoConvexDataCache in Coin_SWIG_Python:
Coin_SWIG_Python.SoConvexDataCache_swigregister(SoConvexDataCache)

class SoGLCacheList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, numcaches=2):
        Coin_SWIG_Python.SoGLCacheList_swiginit(self, Coin_SWIG_Python.new_SoGLCacheList(numcaches))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLCacheList

    def call(self, action):
        return Coin_SWIG_Python.SoGLCacheList_call(self, action)

    def open(self, action, autocache=1):
        return Coin_SWIG_Python.SoGLCacheList_open(self, action, autocache)

    def close(self, action):
        return Coin_SWIG_Python.SoGLCacheList_close(self, action)

    def invalidateAll(self):
        return Coin_SWIG_Python.SoGLCacheList_invalidateAll(self)

# Register SoGLCacheList in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLCacheList_swigregister(SoGLCacheList)

class SoGLLazyElement(SoLazyElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLLazyElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLLazyElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLLazyElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLLazyElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLLazyElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLLazyElement_push(self, state)

    def pop(self, state, prevtopelement):
        return Coin_SWIG_Python.SoGLLazyElement_pop(self, state, prevtopelement)

    @staticmethod
    def sendAllMaterial(state):
        return Coin_SWIG_Python.SoGLLazyElement_sendAllMaterial(state)

    @staticmethod
    def sendNoMaterial(state):
        return Coin_SWIG_Python.SoGLLazyElement_sendNoMaterial(state)

    @staticmethod
    def sendOnlyDiffuseColor(state):
        return Coin_SWIG_Python.SoGLLazyElement_sendOnlyDiffuseColor(state)

    @staticmethod
    def sendLightModel(state, model):
        return Coin_SWIG_Python.SoGLLazyElement_sendLightModel(state, model)

    @staticmethod
    def sendPackedDiffuse(state, diffuse):
        return Coin_SWIG_Python.SoGLLazyElement_sendPackedDiffuse(state, diffuse)

    @staticmethod
    def sendFlatshading(state, onoff):
        return Coin_SWIG_Python.SoGLLazyElement_sendFlatshading(state, onoff)

    @staticmethod
    def sendVertexOrdering(state, ordering):
        return Coin_SWIG_Python.SoGLLazyElement_sendVertexOrdering(state, ordering)

    @staticmethod
    def sendTwosideLighting(state, onoff):
        return Coin_SWIG_Python.SoGLLazyElement_sendTwosideLighting(state, onoff)

    @staticmethod
    def sendBackfaceCulling(state, onoff):
        return Coin_SWIG_Python.SoGLLazyElement_sendBackfaceCulling(state, onoff)

    def sendDiffuseByIndex(self, index):
        return Coin_SWIG_Python.SoGLLazyElement_sendDiffuseByIndex(self, index)

    @staticmethod
    def isColorIndex(state):
        return Coin_SWIG_Python.SoGLLazyElement_isColorIndex(state)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoGLLazyElement_getInstance(state)

    def send(self, state, mask):
        return Coin_SWIG_Python.SoGLLazyElement_send(self, state, mask)

    def sendVPPacked(self, state, pcolor):
        return Coin_SWIG_Python.SoGLLazyElement_sendVPPacked(self, state, pcolor)

    def reset(self, state, bitmask):
        return Coin_SWIG_Python.SoGLLazyElement_reset(self, state, bitmask)
    didsetbitmask = property(Coin_SWIG_Python.SoGLLazyElement_didsetbitmask_get, Coin_SWIG_Python.SoGLLazyElement_didsetbitmask_set)
    didntsetbitmask = property(Coin_SWIG_Python.SoGLLazyElement_didntsetbitmask_get, Coin_SWIG_Python.SoGLLazyElement_didntsetbitmask_set)
    cachebitmask = property(Coin_SWIG_Python.SoGLLazyElement_cachebitmask_get, Coin_SWIG_Python.SoGLLazyElement_cachebitmask_set)
    forcediffuse = property(Coin_SWIG_Python.SoGLLazyElement_forcediffuse_get, Coin_SWIG_Python.SoGLLazyElement_forcediffuse_set)
    glstate = property(Coin_SWIG_Python.SoGLLazyElement_glstate_get, Coin_SWIG_Python.SoGLLazyElement_glstate_set)
    postcachestate = property(Coin_SWIG_Python.SoGLLazyElement_postcachestate_get, Coin_SWIG_Python.SoGLLazyElement_postcachestate_set)
    precachestate = property(Coin_SWIG_Python.SoGLLazyElement_precachestate_get, Coin_SWIG_Python.SoGLLazyElement_precachestate_set)
    colorindex = property(Coin_SWIG_Python.SoGLLazyElement_colorindex_get, Coin_SWIG_Python.SoGLLazyElement_colorindex_set)
    colorpacker = property(Coin_SWIG_Python.SoGLLazyElement_colorpacker_get, Coin_SWIG_Python.SoGLLazyElement_colorpacker_set)
    packedpointer = property(Coin_SWIG_Python.SoGLLazyElement_packedpointer_get, Coin_SWIG_Python.SoGLLazyElement_packedpointer_set)
    transpmask = property(Coin_SWIG_Python.SoGLLazyElement_transpmask_get, Coin_SWIG_Python.SoGLLazyElement_transpmask_set)
    state = property(Coin_SWIG_Python.SoGLLazyElement_state_get, Coin_SWIG_Python.SoGLLazyElement_state_set)

    def setDiffuseElt(self, arg2, numcolors, colors, packer):
        return Coin_SWIG_Python.SoGLLazyElement_setDiffuseElt(self, arg2, numcolors, colors, packer)

    def setPackedElt(self, node, numcolors, colors, packedtransparency):
        return Coin_SWIG_Python.SoGLLazyElement_setPackedElt(self, node, numcolors, colors, packedtransparency)

    def setColorIndexElt(self, node, numindices, indices):
        return Coin_SWIG_Python.SoGLLazyElement_setColorIndexElt(self, node, numindices, indices)

    def setTranspElt(self, node, numtransp, transp, packer):
        return Coin_SWIG_Python.SoGLLazyElement_setTranspElt(self, node, numtransp, transp, packer)

    def setTranspTypeElt(self, type):
        return Coin_SWIG_Python.SoGLLazyElement_setTranspTypeElt(self, type)

    def setAmbientElt(self, color):
        return Coin_SWIG_Python.SoGLLazyElement_setAmbientElt(self, color)

    def setEmissiveElt(self, color):
        return Coin_SWIG_Python.SoGLLazyElement_setEmissiveElt(self, color)

    def setSpecularElt(self, color):
        return Coin_SWIG_Python.SoGLLazyElement_setSpecularElt(self, color)

    def setShininessElt(self, value):
        return Coin_SWIG_Python.SoGLLazyElement_setShininessElt(self, value)

    def setColorMaterialElt(self, value):
        return Coin_SWIG_Python.SoGLLazyElement_setColorMaterialElt(self, value)

    def enableBlendingElt(self, sfactor, dfactor):
        return Coin_SWIG_Python.SoGLLazyElement_enableBlendingElt(self, sfactor, dfactor)

    def disableBlendingElt(self):
        return Coin_SWIG_Python.SoGLLazyElement_disableBlendingElt(self)

    def setLightModelElt(self, state, model):
        return Coin_SWIG_Python.SoGLLazyElement_setLightModelElt(self, state, model)

    def setMaterialElt(self, node, bitmask, packer, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent):
        return Coin_SWIG_Python.SoGLLazyElement_setMaterialElt(self, node, bitmask, packer, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent)

    def setVertexOrderingElt(self, ordering):
        return Coin_SWIG_Python.SoGLLazyElement_setVertexOrderingElt(self, ordering)

    def setBackfaceCullingElt(self, onoff):
        return Coin_SWIG_Python.SoGLLazyElement_setBackfaceCullingElt(self, onoff)

    def setTwosideLightingElt(self, onoff):
        return Coin_SWIG_Python.SoGLLazyElement_setTwosideLightingElt(self, onoff)

    def setShadeModelElt(self, flatshading):
        return Coin_SWIG_Python.SoGLLazyElement_setShadeModelElt(self, flatshading)

    def setGLImageIdElt(self, glimageid, alphatest):
        return Coin_SWIG_Python.SoGLLazyElement_setGLImageIdElt(self, glimageid, alphatest)

    def setAlphaTestElt(self, onoff):
        return Coin_SWIG_Python.SoGLLazyElement_setAlphaTestElt(self, onoff)

    @staticmethod
    def beginCaching(state, prestate, poststate):
        return Coin_SWIG_Python.SoGLLazyElement_beginCaching(state, prestate, poststate)

    @staticmethod
    def endCaching(state):
        return Coin_SWIG_Python.SoGLLazyElement_endCaching(state)

    @staticmethod
    def preCacheCall(state, prestate):
        return Coin_SWIG_Python.SoGLLazyElement_preCacheCall(state, prestate)

    @staticmethod
    def postCacheCall(state, poststate):
        return Coin_SWIG_Python.SoGLLazyElement_postCacheCall(state, poststate)

    def updateColorVBO(self, vbo):
        return Coin_SWIG_Python.SoGLLazyElement_updateColorVBO(self, vbo)

# Register SoGLLazyElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLLazyElement_swigregister(SoGLLazyElement)

def SoGLLazyElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLLazyElement_getClassTypeId()

def SoGLLazyElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLLazyElement_getClassStackIndex()

def SoGLLazyElement_createInstance():
    return Coin_SWIG_Python.SoGLLazyElement_createInstance()

def SoGLLazyElement_initClass():
    return Coin_SWIG_Python.SoGLLazyElement_initClass()

def SoGLLazyElement_sendAllMaterial(state):
    return Coin_SWIG_Python.SoGLLazyElement_sendAllMaterial(state)

def SoGLLazyElement_sendNoMaterial(state):
    return Coin_SWIG_Python.SoGLLazyElement_sendNoMaterial(state)

def SoGLLazyElement_sendOnlyDiffuseColor(state):
    return Coin_SWIG_Python.SoGLLazyElement_sendOnlyDiffuseColor(state)

def SoGLLazyElement_sendLightModel(state, model):
    return Coin_SWIG_Python.SoGLLazyElement_sendLightModel(state, model)

def SoGLLazyElement_sendPackedDiffuse(state, diffuse):
    return Coin_SWIG_Python.SoGLLazyElement_sendPackedDiffuse(state, diffuse)

def SoGLLazyElement_sendFlatshading(state, onoff):
    return Coin_SWIG_Python.SoGLLazyElement_sendFlatshading(state, onoff)

def SoGLLazyElement_sendVertexOrdering(state, ordering):
    return Coin_SWIG_Python.SoGLLazyElement_sendVertexOrdering(state, ordering)

def SoGLLazyElement_sendTwosideLighting(state, onoff):
    return Coin_SWIG_Python.SoGLLazyElement_sendTwosideLighting(state, onoff)

def SoGLLazyElement_sendBackfaceCulling(state, onoff):
    return Coin_SWIG_Python.SoGLLazyElement_sendBackfaceCulling(state, onoff)

def SoGLLazyElement_isColorIndex(state):
    return Coin_SWIG_Python.SoGLLazyElement_isColorIndex(state)

def SoGLLazyElement_getInstance(state):
    return Coin_SWIG_Python.SoGLLazyElement_getInstance(state)

def SoGLLazyElement_beginCaching(state, prestate, poststate):
    return Coin_SWIG_Python.SoGLLazyElement_beginCaching(state, prestate, poststate)

def SoGLLazyElement_endCaching(state):
    return Coin_SWIG_Python.SoGLLazyElement_endCaching(state)

def SoGLLazyElement_preCacheCall(state, prestate):
    return Coin_SWIG_Python.SoGLLazyElement_preCacheCall(state, prestate)

def SoGLLazyElement_postCacheCall(state, poststate):
    return Coin_SWIG_Python.SoGLLazyElement_postCacheCall(state, poststate)

class SoGLRenderCache(SoCache):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, state):
        Coin_SWIG_Python.SoGLRenderCache_swiginit(self, Coin_SWIG_Python.new_SoGLRenderCache(state))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLRenderCache

    def open(self, state):
        return Coin_SWIG_Python.SoGLRenderCache_open(self, state)

    def close(self):
        return Coin_SWIG_Python.SoGLRenderCache_close(self)

    def call(self, state):
        return Coin_SWIG_Python.SoGLRenderCache_call(self, state)

    def getCacheContext(self):
        return Coin_SWIG_Python.SoGLRenderCache_getCacheContext(self)

    def isValid(self, state):
        return Coin_SWIG_Python.SoGLRenderCache_isValid(self, state)

    def addNestedCache(self, child):
        return Coin_SWIG_Python.SoGLRenderCache_addNestedCache(self, child)

    def getPreLazyState(self):
        return Coin_SWIG_Python.SoGLRenderCache_getPreLazyState(self)

    def getPostLazyState(self):
        return Coin_SWIG_Python.SoGLRenderCache_getPostLazyState(self)

# Register SoGLRenderCache in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLRenderCache_swigregister(SoGLRenderCache)

class SoNormalCache(SoCache):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, state):
        Coin_SWIG_Python.SoNormalCache_swiginit(self, Coin_SWIG_Python.new_SoNormalCache(state))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalCache

    def set(self, *args):
        return Coin_SWIG_Python.SoNormalCache_set(self, *args)

    def generatePerVertex(self, coords, coordindices, numcoordindices, crease_angle, facenormals=None, ccw=1, tristrip=0):
        return Coin_SWIG_Python.SoNormalCache_generatePerVertex(self, coords, coordindices, numcoordindices, crease_angle, facenormals, ccw, tristrip)

    def generatePerFace(self, coords, coordindices, numcoorindices, ccw):
        return Coin_SWIG_Python.SoNormalCache_generatePerFace(self, coords, coordindices, numcoorindices, ccw)

    def generatePerFaceStrip(self, coords, coordindices, numcoorindices, ccw):
        return Coin_SWIG_Python.SoNormalCache_generatePerFaceStrip(self, coords, coordindices, numcoorindices, ccw)

    def generatePerStrip(self, coords, coordindices, numcoorindices, ccw):
        return Coin_SWIG_Python.SoNormalCache_generatePerStrip(self, coords, coordindices, numcoorindices, ccw)

    def generatePerVertexQuad(self, coords, vPerRow, vPerColumn, ccw):
        return Coin_SWIG_Python.SoNormalCache_generatePerVertexQuad(self, coords, vPerRow, vPerColumn, ccw)

    def generatePerFaceQuad(self, coords, vPerRow, vPerColumn, ccw):
        return Coin_SWIG_Python.SoNormalCache_generatePerFaceQuad(self, coords, vPerRow, vPerColumn, ccw)

    def generatePerRowQuad(self, coords, vPerRow, vPerColumn, ccw):
        return Coin_SWIG_Python.SoNormalCache_generatePerRowQuad(self, coords, vPerRow, vPerColumn, ccw)

    def getNum(self):
        return Coin_SWIG_Python.SoNormalCache_getNum(self)

    def getNormals(self):
        return Coin_SWIG_Python.SoNormalCache_getNormals(self)

    def getNumIndices(self):
        return Coin_SWIG_Python.SoNormalCache_getNumIndices(self)

    def getIndices(self):
        return Coin_SWIG_Python.SoNormalCache_getIndices(self)

# Register SoNormalCache in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormalCache_swigregister(SoNormalCache)

class SoTextureCoordinateCache(SoCache):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, state):
        Coin_SWIG_Python.SoTextureCoordinateCache_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateCache(state))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateCache

    def generate(self, bbox, vertices, numvertices):
        return Coin_SWIG_Python.SoTextureCoordinateCache_generate(self, bbox, vertices, numvertices)

    def get(self):
        return Coin_SWIG_Python.SoTextureCoordinateCache_get(self)

    def getNum(self):
        return Coin_SWIG_Python.SoTextureCoordinateCache_getNum(self)

# Register SoTextureCoordinateCache in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateCache_swigregister(SoTextureCoordinateCache)

class SoDetail(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDetail_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoDetail_initClasses()

    def copy(self):
        return Coin_SWIG_Python.SoDetail_copy(self)

    def getTypeId(self):
        return Coin_SWIG_Python.SoDetail_getTypeId(self)

    def isOfType(self, type):
        return Coin_SWIG_Python.SoDetail_isOfType(self, type)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDetail_getClassTypeId()

# Register SoDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoDetail_swigregister(SoDetail)

def SoDetail_initClass():
    return Coin_SWIG_Python.SoDetail_initClass()

def SoDetail_initClasses():
    return Coin_SWIG_Python.SoDetail_initClasses()

def SoDetail_getClassTypeId():
    return Coin_SWIG_Python.SoDetail_getClassTypeId()

class SoConeDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoConeDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoConeDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoConeDetail_swiginit(self, Coin_SWIG_Python.new_SoConeDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoConeDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoConeDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoConeDetail_copy(self)

    def setPart(self, part):
        return Coin_SWIG_Python.SoConeDetail_setPart(self, part)

    def getPart(self):
        return Coin_SWIG_Python.SoConeDetail_getPart(self)

# Register SoConeDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoConeDetail_swigregister(SoConeDetail)

def SoConeDetail_getClassTypeId():
    return Coin_SWIG_Python.SoConeDetail_getClassTypeId()

def SoConeDetail_initClass():
    return Coin_SWIG_Python.SoConeDetail_initClass()

class SoCubeDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoCubeDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCubeDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoCubeDetail_swiginit(self, Coin_SWIG_Python.new_SoCubeDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCubeDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCubeDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoCubeDetail_copy(self)

    def setPart(self, part):
        return Coin_SWIG_Python.SoCubeDetail_setPart(self, part)

    def getPart(self):
        return Coin_SWIG_Python.SoCubeDetail_getPart(self)

# Register SoCubeDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoCubeDetail_swigregister(SoCubeDetail)

def SoCubeDetail_getClassTypeId():
    return Coin_SWIG_Python.SoCubeDetail_getClassTypeId()

def SoCubeDetail_initClass():
    return Coin_SWIG_Python.SoCubeDetail_initClass()

class SoCylinderDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoCylinderDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCylinderDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoCylinderDetail_swiginit(self, Coin_SWIG_Python.new_SoCylinderDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCylinderDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCylinderDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoCylinderDetail_copy(self)

    def setPart(self, part):
        return Coin_SWIG_Python.SoCylinderDetail_setPart(self, part)

    def getPart(self):
        return Coin_SWIG_Python.SoCylinderDetail_getPart(self)

# Register SoCylinderDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoCylinderDetail_swigregister(SoCylinderDetail)

def SoCylinderDetail_getClassTypeId():
    return Coin_SWIG_Python.SoCylinderDetail_getClassTypeId()

def SoCylinderDetail_initClass():
    return Coin_SWIG_Python.SoCylinderDetail_initClass()

class SoPointDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoPointDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPointDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoPointDetail_swiginit(self, Coin_SWIG_Python.new_SoPointDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPointDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoPointDetail_copy(self)

    def getCoordinateIndex(self):
        return Coin_SWIG_Python.SoPointDetail_getCoordinateIndex(self)

    def getMaterialIndex(self):
        return Coin_SWIG_Python.SoPointDetail_getMaterialIndex(self)

    def getNormalIndex(self):
        return Coin_SWIG_Python.SoPointDetail_getNormalIndex(self)

    def getTextureCoordIndex(self):
        return Coin_SWIG_Python.SoPointDetail_getTextureCoordIndex(self)

    def setCoordinateIndex(self, idx):
        return Coin_SWIG_Python.SoPointDetail_setCoordinateIndex(self, idx)

    def setMaterialIndex(self, idx):
        return Coin_SWIG_Python.SoPointDetail_setMaterialIndex(self, idx)

    def setNormalIndex(self, idx):
        return Coin_SWIG_Python.SoPointDetail_setNormalIndex(self, idx)

    def setTextureCoordIndex(self, idx):
        return Coin_SWIG_Python.SoPointDetail_setTextureCoordIndex(self, idx)

# Register SoPointDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoPointDetail_swigregister(SoPointDetail)

def SoPointDetail_getClassTypeId():
    return Coin_SWIG_Python.SoPointDetail_getClassTypeId()

def SoPointDetail_initClass():
    return Coin_SWIG_Python.SoPointDetail_initClass()

class SoFaceDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoFaceDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFaceDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoFaceDetail_swiginit(self, Coin_SWIG_Python.new_SoFaceDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFaceDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFaceDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoFaceDetail_copy(self)

    def getNumPoints(self):
        return Coin_SWIG_Python.SoFaceDetail_getNumPoints(self)

    def getPoint(self, idx):
        return Coin_SWIG_Python.SoFaceDetail_getPoint(self, idx)

    def getPoints(self):
        return Coin_SWIG_Python.SoFaceDetail_getPoints(self)

    def getFaceIndex(self):
        return Coin_SWIG_Python.SoFaceDetail_getFaceIndex(self)

    def getPartIndex(self):
        return Coin_SWIG_Python.SoFaceDetail_getPartIndex(self)

    def setNumPoints(self, num):
        return Coin_SWIG_Python.SoFaceDetail_setNumPoints(self, num)

    def setPoint(self, idx, detail):
        return Coin_SWIG_Python.SoFaceDetail_setPoint(self, idx, detail)

    def setFaceIndex(self, idx):
        return Coin_SWIG_Python.SoFaceDetail_setFaceIndex(self, idx)

    def setPartIndex(self, idx):
        return Coin_SWIG_Python.SoFaceDetail_setPartIndex(self, idx)

    def incFaceIndex(self):
        return Coin_SWIG_Python.SoFaceDetail_incFaceIndex(self)

    def incPartIndex(self):
        return Coin_SWIG_Python.SoFaceDetail_incPartIndex(self)

# Register SoFaceDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoFaceDetail_swigregister(SoFaceDetail)

def SoFaceDetail_getClassTypeId():
    return Coin_SWIG_Python.SoFaceDetail_getClassTypeId()

def SoFaceDetail_initClass():
    return Coin_SWIG_Python.SoFaceDetail_initClass()

class SoLineDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoLineDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLineDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoLineDetail_swiginit(self, Coin_SWIG_Python.new_SoLineDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLineDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLineDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoLineDetail_copy(self)

    def getPoint0(self):
        return Coin_SWIG_Python.SoLineDetail_getPoint0(self)

    def getPoint1(self):
        return Coin_SWIG_Python.SoLineDetail_getPoint1(self)

    def getLineIndex(self):
        return Coin_SWIG_Python.SoLineDetail_getLineIndex(self)

    def getPartIndex(self):
        return Coin_SWIG_Python.SoLineDetail_getPartIndex(self)

    def setPoint0(self, detail):
        return Coin_SWIG_Python.SoLineDetail_setPoint0(self, detail)

    def setPoint1(self, detail):
        return Coin_SWIG_Python.SoLineDetail_setPoint1(self, detail)

    def setLineIndex(self, idx):
        return Coin_SWIG_Python.SoLineDetail_setLineIndex(self, idx)

    def setPartIndex(self, idx):
        return Coin_SWIG_Python.SoLineDetail_setPartIndex(self, idx)

    def incLineIndex(self):
        return Coin_SWIG_Python.SoLineDetail_incLineIndex(self)

    def incPartIndex(self):
        return Coin_SWIG_Python.SoLineDetail_incPartIndex(self)

# Register SoLineDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoLineDetail_swigregister(SoLineDetail)

def SoLineDetail_getClassTypeId():
    return Coin_SWIG_Python.SoLineDetail_getClassTypeId()

def SoLineDetail_initClass():
    return Coin_SWIG_Python.SoLineDetail_initClass()

class SoNodeKitDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoNodeKitDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNodeKitDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoNodeKitDetail_swiginit(self, Coin_SWIG_Python.new_SoNodeKitDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeKitDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNodeKitDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoNodeKitDetail_copy(self)

    def setNodeKit(self, kit):
        return Coin_SWIG_Python.SoNodeKitDetail_setNodeKit(self, kit)

    def getNodeKit(self):
        return Coin_SWIG_Python.SoNodeKitDetail_getNodeKit(self)

    def setPart(self, part):
        return Coin_SWIG_Python.SoNodeKitDetail_setPart(self, part)

    def getPart(self):
        return Coin_SWIG_Python.SoNodeKitDetail_getPart(self)

    def setPartName(self, name):
        return Coin_SWIG_Python.SoNodeKitDetail_setPartName(self, name)

    def getPartName(self):
        return Coin_SWIG_Python.SoNodeKitDetail_getPartName(self)

# Register SoNodeKitDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeKitDetail_swigregister(SoNodeKitDetail)

def SoNodeKitDetail_getClassTypeId():
    return Coin_SWIG_Python.SoNodeKitDetail_getClassTypeId()

def SoNodeKitDetail_initClass():
    return Coin_SWIG_Python.SoNodeKitDetail_initClass()

class SoTextDetail(SoDetail):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextDetail_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextDetail_getClassTypeId()

    def __init__(self):
        Coin_SWIG_Python.SoTextDetail_swiginit(self, Coin_SWIG_Python.new_SoTextDetail())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextDetail

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextDetail_initClass()

    def copy(self):
        return Coin_SWIG_Python.SoTextDetail_copy(self)

    def getStringIndex(self):
        return Coin_SWIG_Python.SoTextDetail_getStringIndex(self)

    def getCharacterIndex(self):
        return Coin_SWIG_Python.SoTextDetail_getCharacterIndex(self)

    def getPart(self):
        return Coin_SWIG_Python.SoTextDetail_getPart(self)

    def setStringIndex(self, idx):
        return Coin_SWIG_Python.SoTextDetail_setStringIndex(self, idx)

    def setCharacterIndex(self, idx):
        return Coin_SWIG_Python.SoTextDetail_setCharacterIndex(self, idx)

    def setPart(self, idx):
        return Coin_SWIG_Python.SoTextDetail_setPart(self, idx)

# Register SoTextDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextDetail_swigregister(SoTextDetail)

def SoTextDetail_getClassTypeId():
    return Coin_SWIG_Python.SoTextDetail_getClassTypeId()

def SoTextDetail_initClass():
    return Coin_SWIG_Python.SoTextDetail_initClass()

class SoSFNode(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFNode_swiginit(self, Coin_SWIG_Python.new_SoSFNode())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFNode

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFNode_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFNode_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFNode_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFNode_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFNode_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFNode_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFNode___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFNode___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFNode_initClass()

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoSFNode_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoSFNode_referencesCopy(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFNode_setValue(self, *args)

# Register SoSFNode in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFNode_swigregister(SoSFNode)

def SoSFNode_createInstance():
    return Coin_SWIG_Python.SoSFNode_createInstance()

def SoSFNode_getClassTypeId():
    return Coin_SWIG_Python.SoSFNode_getClassTypeId()

def SoSFNode_initClass():
    return Coin_SWIG_Python.SoSFNode_initClass()

SO_CATALOG_NAME_NOT_FOUND = Coin_SWIG_Python.SO_CATALOG_NAME_NOT_FOUND
class SoNodekitCatalog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNodekitCatalog_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNodekitCatalog_swiginit(self, Coin_SWIG_Python.new_SoNodekitCatalog())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodekitCatalog

    def getNumEntries(self):
        return Coin_SWIG_Python.SoNodekitCatalog_getNumEntries(self)

    def getPartNumber(self, name):
        return Coin_SWIG_Python.SoNodekitCatalog_getPartNumber(self, name)

    def getName(self, part):
        return Coin_SWIG_Python.SoNodekitCatalog_getName(self, part)

    def getType(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getType(self, *args)

    def getDefaultType(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getDefaultType(self, *args)

    def isNullByDefault(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_isNullByDefault(self, *args)

    def isLeaf(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_isLeaf(self, *args)

    def getParentName(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getParentName(self, *args)

    def getParentPartNumber(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getParentPartNumber(self, *args)

    def getRightSiblingName(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getRightSiblingName(self, *args)

    def getRightSiblingPartNumber(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getRightSiblingPartNumber(self, *args)

    def isList(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_isList(self, *args)

    def getListContainerType(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getListContainerType(self, *args)

    def getListItemTypes(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_getListItemTypes(self, *args)

    def isPublic(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_isPublic(self, *args)

    def clone(self, type):
        return Coin_SWIG_Python.SoNodekitCatalog_clone(self, type)

    def addEntry(self, name, type, defaulttype, isdefaultnull, parent, rightsibling, islist, listcontainertype, listitemtype, ispublic):
        return Coin_SWIG_Python.SoNodekitCatalog_addEntry(self, name, type, defaulttype, isdefaultnull, parent, rightsibling, islist, listcontainertype, listitemtype, ispublic)

    def addListItemType(self, *args):
        return Coin_SWIG_Python.SoNodekitCatalog_addListItemType(self, *args)

    def narrowTypes(self, name, newtype, newdefaulttype):
        return Coin_SWIG_Python.SoNodekitCatalog_narrowTypes(self, name, newtype, newdefaulttype)

    def setNullByDefault(self, name, nullbydefault):
        return Coin_SWIG_Python.SoNodekitCatalog_setNullByDefault(self, name, nullbydefault)

    def recursiveSearch(self, part, name, checked):
        return Coin_SWIG_Python.SoNodekitCatalog_recursiveSearch(self, part, name, checked)

    def printCheck(self):
        return Coin_SWIG_Python.SoNodekitCatalog_printCheck(self)

# Register SoNodekitCatalog in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodekitCatalog_swigregister(SoNodekitCatalog)

def SoNodekitCatalog_initClass():
    return Coin_SWIG_Python.SoNodekitCatalog_initClass()

class SoSFName(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFName_swiginit(self, Coin_SWIG_Python.new_SoSFName())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFName

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFName_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFName_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFName_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFName_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFName_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFName_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFName___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFName___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFName_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFName_setValue(self, *args)

# Register SoSFName in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFName_swigregister(SoSFName)

def SoSFName_createInstance():
    return Coin_SWIG_Python.SoSFName_createInstance()

def SoSFName_getClassTypeId():
    return Coin_SWIG_Python.SoSFName_getClassTypeId()

def SoSFName_initClass():
    return Coin_SWIG_Python.SoSFName_initClass()

class SoMFName(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFName_swiginit(self, Coin_SWIG_Python.new_SoMFName())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFName

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFName_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFName_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFName_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFName_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFName_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFName_find(self, value, addifnotfound)

    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFName_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFName___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFName___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFName_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFName_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFName_initClass()

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFName_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFName_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFName_setValues,args)



    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFName___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFName___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFName_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFName_getValues(self, i)

# Register SoMFName in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFName_swigregister(SoMFName)

def SoMFName_createInstance():
    return Coin_SWIG_Python.SoMFName_createInstance()

def SoMFName_getClassTypeId():
    return Coin_SWIG_Python.SoMFName_getClassTypeId()

def SoMFName_initClass():
    return Coin_SWIG_Python.SoMFName_initClass()

class SoNodeKitListPart(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNodeKitListPart_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNodeKitListPart_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNodeKitListPart_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNodeKitListPart_swiginit(self, Coin_SWIG_Python.new_SoNodeKitListPart())

    def getContainerType(self):
        return Coin_SWIG_Python.SoNodeKitListPart_getContainerType(self)

    def setContainerType(self, newContainerType):
        return Coin_SWIG_Python.SoNodeKitListPart_setContainerType(self, newContainerType)

    def getChildTypes(self):
        return Coin_SWIG_Python.SoNodeKitListPart_getChildTypes(self)

    def addChildType(self, typeToAdd):
        return Coin_SWIG_Python.SoNodeKitListPart_addChildType(self, typeToAdd)

    def isTypePermitted(self, typeToCheck):
        return Coin_SWIG_Python.SoNodeKitListPart_isTypePermitted(self, typeToCheck)

    def isChildPermitted(self, child):
        return Coin_SWIG_Python.SoNodeKitListPart_isChildPermitted(self, child)

    def containerSet(self, fieldDataString):
        return Coin_SWIG_Python.SoNodeKitListPart_containerSet(self, fieldDataString)

    def lockTypes(self):
        return Coin_SWIG_Python.SoNodeKitListPart_lockTypes(self)

    def isTypeLocked(self):
        return Coin_SWIG_Python.SoNodeKitListPart_isTypeLocked(self)

    def addChild(self, child):
        return Coin_SWIG_Python.SoNodeKitListPart_addChild(self, child)

    def insertChild(self, child, childIndex):
        return Coin_SWIG_Python.SoNodeKitListPart_insertChild(self, child, childIndex)

    def getChild(self, index):
        return Coin_SWIG_Python.SoNodeKitListPart_getChild(self, index)

    def findChild(self, child):
        return Coin_SWIG_Python.SoNodeKitListPart_findChild(self, child)

    def getNumChildren(self):
        return Coin_SWIG_Python.SoNodeKitListPart_getNumChildren(self)

    def removeChild(self, *args):
        return Coin_SWIG_Python.SoNodeKitListPart_removeChild(self, *args)

    def replaceChild(self, *args):
        return Coin_SWIG_Python.SoNodeKitListPart_replaceChild(self, *args)

    def affectsState(self):
        return Coin_SWIG_Python.SoNodeKitListPart_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_search(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoNodeKitListPart_getPrimitiveCount(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoNodeKitListPart_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeKitListPart

# Register SoNodeKitListPart in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeKitListPart_swigregister(SoNodeKitListPart)

def SoNodeKitListPart_getClassTypeId():
    return Coin_SWIG_Python.SoNodeKitListPart_getClassTypeId()

def SoNodeKitListPart_initClass():
    return Coin_SWIG_Python.SoNodeKitListPart_initClass()

class SoNodeKitPath(SoPath):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getLength(self):
        return Coin_SWIG_Python.SoNodeKitPath_getLength(self)

    def getTail(self):
        return Coin_SWIG_Python.SoNodeKitPath_getTail(self)

    def getNode(self, idx):
        return Coin_SWIG_Python.SoNodeKitPath_getNode(self, idx)

    def getNodeFromTail(self, idx):
        return Coin_SWIG_Python.SoNodeKitPath_getNodeFromTail(self, idx)

    def truncate(self, length):
        return Coin_SWIG_Python.SoNodeKitPath_truncate(self, length)

    def pop(self):
        return Coin_SWIG_Python.SoNodeKitPath_pop(self)

    def append(self, *args):
        return Coin_SWIG_Python.SoNodeKitPath_append(self, *args)

    def containsNode(self, node):
        return Coin_SWIG_Python.SoNodeKitPath_containsNode(self, node)

    def findFork(self, path):
        return Coin_SWIG_Python.SoNodeKitPath_findFork(self, path)

    def __eq__(self, u):
        return Coin_SWIG_Python.SoNodeKitPath___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SoNodeKitPath___nq__(self, u)

# Register SoNodeKitPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeKitPath_swigregister(SoNodeKitPath)

class SoChildList(SoNodeList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoChildList_swiginit(self, Coin_SWIG_Python.new_SoChildList(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoChildList

    def append(self, node):
        return Coin_SWIG_Python.SoChildList_append(self, node)

    def insert(self, ptr, addbefore):
        return Coin_SWIG_Python.SoChildList_insert(self, ptr, addbefore)

    def remove(self, index):
        return Coin_SWIG_Python.SoChildList_remove(self, index)

    def truncate(self, length):
        return Coin_SWIG_Python.SoChildList_truncate(self, length)

    def copy(self, cl):
        return Coin_SWIG_Python.SoChildList_copy(self, cl)

    def set(self, index, node):
        return Coin_SWIG_Python.SoChildList_set(self, index, node)

    def traverseInPath(self, action, numindices, indices):
        return Coin_SWIG_Python.SoChildList_traverseInPath(self, action, numindices, indices)

    def traverse(self, *args):
        return Coin_SWIG_Python.SoChildList_traverse(self, *args)

    def addPathAuditor(self, path):
        return Coin_SWIG_Python.SoChildList_addPathAuditor(self, path)

    def removePathAuditor(self, path):
        return Coin_SWIG_Python.SoChildList_removePathAuditor(self, path)

# Register SoChildList in Coin_SWIG_Python:
Coin_SWIG_Python.SoChildList_swigregister(SoChildList)

class SoBaseKit(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBaseKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBaseKit_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBaseKit_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoBaseKit_swiginit(self, Coin_SWIG_Python.new_SoBaseKit())

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoBaseKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoBaseKit_getNodekitCatalog(self)

    def getPart(self, partname, makeifneeded):
        return Coin_SWIG_Python.SoBaseKit_getPart(self, partname, makeifneeded)

    def getPartString(self, part):
        return Coin_SWIG_Python.SoBaseKit_getPartString(self, part)

    def createPathToPart(self, partname, makeifneeded, pathtoextend=None):
        return Coin_SWIG_Python.SoBaseKit_createPathToPart(self, partname, makeifneeded, pathtoextend)

    def setPart(self, partname, srcFrom):
        return Coin_SWIG_Python.SoBaseKit_setPart(self, partname, srcFrom)

    def set(self, *args):
        return Coin_SWIG_Python.SoBaseKit_set(self, *args)

    def doAction(self, action):
        return Coin_SWIG_Python.SoBaseKit_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoBaseKit_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoBaseKit_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoBaseKit_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoBaseKit_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoBaseKit_handleEvent(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoBaseKit_rayPick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoBaseKit_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoBaseKit_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoBaseKit_getPrimitiveCount(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoBaseKit_getChildren(self)

    def printDiagram(self):
        return Coin_SWIG_Python.SoBaseKit_printDiagram(self)

    def printSubDiagram(self, rootname, level):
        return Coin_SWIG_Python.SoBaseKit_printSubDiagram(self, rootname, level)

    def printTable(self):
        return Coin_SWIG_Python.SoBaseKit_printTable(self)

    def addWriteReference(self, out, isfromfield=0):
        return Coin_SWIG_Python.SoBaseKit_addWriteReference(self, out, isfromfield)

    def forceChildDrivenWriteRefs(self, out):
        return Coin_SWIG_Python.SoBaseKit_forceChildDrivenWriteRefs(self, out)

    @staticmethod
    def isSearchingChildren():
        return Coin_SWIG_Python.SoBaseKit_isSearchingChildren()

    @staticmethod
    def setSearchingChildren(newval):
        return Coin_SWIG_Python.SoBaseKit_setSearchingChildren(newval)

    @staticmethod
    def typeCheck(partname, parttype, node):
        return Coin_SWIG_Python.SoBaseKit_typeCheck(partname, parttype, node)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBaseKit

    def __getattr__(self,name):
        try:
            return SoNode.__getattr__(self, name)
        except AttributeError, e:
            c = _coin.SoBaseKit_getNodekitCatalog(self)
            if c.getPartNumber(name) >= 0:
                part = self.getPart(name,1)
                return part
            raise e

    def __setattr__(self,name,value):
       if name == 'this':
          return SoNode.__setattr__(self,name,value)
       c = _coin.SoBaseKit_getNodekitCatalog(self)
       if c.getPartNumber(name) >= 0:
          return self.setPart(name, value)
       return SoNode.__setattr__(self,name,value)       


# Register SoBaseKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoBaseKit_swigregister(SoBaseKit)

def SoBaseKit_getClassTypeId():
    return Coin_SWIG_Python.SoBaseKit_getClassTypeId()

def SoBaseKit_initClass():
    return Coin_SWIG_Python.SoBaseKit_initClass()

def SoBaseKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoBaseKit_getClassNodekitCatalog()

def SoBaseKit_isSearchingChildren():
    return Coin_SWIG_Python.SoBaseKit_isSearchingChildren()

def SoBaseKit_setSearchingChildren(newval):
    return Coin_SWIG_Python.SoBaseKit_setSearchingChildren(newval)

def SoBaseKit_typeCheck(partname, parttype, node):
    return Coin_SWIG_Python.SoBaseKit_typeCheck(partname, parttype, node)

class SoSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSensor

    def setFunction(self, callbackfunction):
        return Coin_SWIG_Python.SoSensor_setFunction(self, callbackfunction)

    def getFunction(self):
        return Coin_SWIG_Python.SoSensor_getFunction(self)

    def setData(self, callbackdata):
        return Coin_SWIG_Python.SoSensor_setData(self, callbackdata)

    def getData(self):
        return Coin_SWIG_Python.SoSensor_getData(self)

    def schedule(self):
        return Coin_SWIG_Python.SoSensor_schedule(self)

    def unschedule(self):
        return Coin_SWIG_Python.SoSensor_unschedule(self)

    def isScheduled(self):
        return Coin_SWIG_Python.SoSensor_isScheduled(self)

    def trigger(self):
        return Coin_SWIG_Python.SoSensor_trigger(self)

    def isBefore(self, s):
        return Coin_SWIG_Python.SoSensor_isBefore(self, s)

    def setNextInQueue(self, next):
        return Coin_SWIG_Python.SoSensor_setNextInQueue(self, next)

    def getNextInQueue(self):
        return Coin_SWIG_Python.SoSensor_getNextInQueue(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSensor_initClass()

# Register SoSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoSensor_swigregister(SoSensor)

def SoSensor_initClass():
    return Coin_SWIG_Python.SoSensor_initClass()

class SoDelayQueueSensor(SoSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoDelayQueueSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoDelayQueueSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoDelayQueueSensor

    def setPriority(self, pri):
        return Coin_SWIG_Python.SoDelayQueueSensor_setPriority(self, pri)

    def getPriority(self):
        return Coin_SWIG_Python.SoDelayQueueSensor_getPriority(self)

    @staticmethod
    def getDefaultPriority():
        return Coin_SWIG_Python.SoDelayQueueSensor_getDefaultPriority()

    def schedule(self):
        return Coin_SWIG_Python.SoDelayQueueSensor_schedule(self)

    def unschedule(self):
        return Coin_SWIG_Python.SoDelayQueueSensor_unschedule(self)

    def isScheduled(self):
        return Coin_SWIG_Python.SoDelayQueueSensor_isScheduled(self)

    def isIdleOnly(self):
        return Coin_SWIG_Python.SoDelayQueueSensor_isIdleOnly(self)

    def trigger(self):
        return Coin_SWIG_Python.SoDelayQueueSensor_trigger(self)

# Register SoDelayQueueSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoDelayQueueSensor_swigregister(SoDelayQueueSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoDelayQueueSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoDelayQueueSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



def SoDelayQueueSensor_getDefaultPriority():
    return Coin_SWIG_Python.SoDelayQueueSensor_getDefaultPriority()

class SoDataSensor(SoDelayQueueSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDataSensor

    def setDeleteCallback(self, function, data=None):
        return Coin_SWIG_Python.SoDataSensor_setDeleteCallback(self, function, data)

    def getTriggerNode(self):
        return Coin_SWIG_Python.SoDataSensor_getTriggerNode(self)

    def getTriggerField(self):
        return Coin_SWIG_Python.SoDataSensor_getTriggerField(self)

    def getTriggerPath(self):
        return Coin_SWIG_Python.SoDataSensor_getTriggerPath(self)

    def setTriggerPathFlag(self, flag):
        return Coin_SWIG_Python.SoDataSensor_setTriggerPathFlag(self, flag)

    def getTriggerPathFlag(self):
        return Coin_SWIG_Python.SoDataSensor_getTriggerPathFlag(self)

    def trigger(self):
        return Coin_SWIG_Python.SoDataSensor_trigger(self)

    def notify(self, l):
        return Coin_SWIG_Python.SoDataSensor_notify(self, l)

    def dyingReference(self):
        return Coin_SWIG_Python.SoDataSensor_dyingReference(self)

# Register SoDataSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoDataSensor_swigregister(SoDataSensor)

class SoFieldSensor(SoDataSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoFieldSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoFieldSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldSensor

    def attach(self, field):
        return Coin_SWIG_Python.SoFieldSensor_attach(self, field)

    def detach(self):
        return Coin_SWIG_Python.SoFieldSensor_detach(self)

    def getAttachedField(self):
        return Coin_SWIG_Python.SoFieldSensor_getAttachedField(self)

    def trigger(self):
        return Coin_SWIG_Python.SoFieldSensor_trigger(self)

# Register SoFieldSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoFieldSensor_swigregister(SoFieldSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoFieldSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoFieldSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoInteractionKit(SoBaseKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInteractionKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInteractionKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoInteractionKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoInteractionKit_getNodekitCatalog(self)
    renderCaching = property(Coin_SWIG_Python.SoInteractionKit_renderCaching_get, Coin_SWIG_Python.SoInteractionKit_renderCaching_set)
    boundingBoxCaching = property(Coin_SWIG_Python.SoInteractionKit_boundingBoxCaching_get, Coin_SWIG_Python.SoInteractionKit_boundingBoxCaching_set)
    renderCulling = property(Coin_SWIG_Python.SoInteractionKit_renderCulling_get, Coin_SWIG_Python.SoInteractionKit_renderCulling_set)
    pickCulling = property(Coin_SWIG_Python.SoInteractionKit_pickCulling_get, Coin_SWIG_Python.SoInteractionKit_pickCulling_set)

    def __init__(self):
        Coin_SWIG_Python.SoInteractionKit_swiginit(self, Coin_SWIG_Python.new_SoInteractionKit())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInteractionKit_initClass()
    OFF = Coin_SWIG_Python.SoInteractionKit_OFF
    ON = Coin_SWIG_Python.SoInteractionKit_ON
    AUTO = Coin_SWIG_Python.SoInteractionKit_AUTO

    def setPartAsPath(self, partname, path):
        return Coin_SWIG_Python.SoInteractionKit_setPartAsPath(self, partname, path)

    def setPartAsDefault(self, *args):
        return Coin_SWIG_Python.SoInteractionKit_setPartAsDefault(self, *args)

    def isPathSurrogateInMySubgraph(self, *args):
        return Coin_SWIG_Python.SoInteractionKit_isPathSurrogateInMySubgraph(self, *args)

    @staticmethod
    def setSwitchValue(node, newVal):
        return Coin_SWIG_Python.SoInteractionKit_setSwitchValue(node, newVal)

    def setPart(self, partname, srcFrom):
        return Coin_SWIG_Python.SoInteractionKit_setPart(self, partname, srcFrom)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInteractionKit

# Register SoInteractionKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoInteractionKit_swigregister(SoInteractionKit)

def SoInteractionKit_getClassTypeId():
    return Coin_SWIG_Python.SoInteractionKit_getClassTypeId()

def SoInteractionKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoInteractionKit_getClassNodekitCatalog()

def SoInteractionKit_initClass():
    return Coin_SWIG_Python.SoInteractionKit_initClass()

def SoInteractionKit_setSwitchValue(node, newVal):
    return Coin_SWIG_Python.SoInteractionKit_setSwitchValue(node, newVal)

class SoSFBool(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBool_swiginit(self, Coin_SWIG_Python.new_SoSFBool())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBool

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBool_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBool_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBool_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBool_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBool_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFBool_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBool___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBool___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBool_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBool_setValue(self, *args)

# Register SoSFBool in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBool_swigregister(SoSFBool)

def SoSFBool_createInstance():
    return Coin_SWIG_Python.SoSFBool_createInstance()

def SoSFBool_getClassTypeId():
    return Coin_SWIG_Python.SoSFBool_getClassTypeId()

def SoSFBool_initClass():
    return Coin_SWIG_Python.SoSFBool_initClass()

class SoCallbackList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoCallbackList_swiginit(self, Coin_SWIG_Python.new_SoCallbackList())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCallbackList

    def addCallback(self, f, userData=None):
        return Coin_SWIG_Python.SoCallbackList_addCallback(self, f, userData)

    def removeCallback(self, f, userdata=None):
        return Coin_SWIG_Python.SoCallbackList_removeCallback(self, f, userdata)

    def clearCallbacks(self):
        return Coin_SWIG_Python.SoCallbackList_clearCallbacks(self)

    def getNumCallbacks(self):
        return Coin_SWIG_Python.SoCallbackList_getNumCallbacks(self)

    def invokeCallbacks(self, callbackdata):
        return Coin_SWIG_Python.SoCallbackList_invokeCallbacks(self, callbackdata)

# Register SoCallbackList in Coin_SWIG_Python:
Coin_SWIG_Python.SoCallbackList_swigregister(SoCallbackList)

class SbVec3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec3d_swiginit(self, Coin_SWIG_Python.new_SbVec3d(*args))

    def cross(self, v):
        return Coin_SWIG_Python.SbVec3d_cross(self, v)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec3d_dot(self, v)

    def equals(self, v, tolerance):
        return Coin_SWIG_Python.SbVec3d_equals(self, v, tolerance)

    def getClosestAxis(self):
        return Coin_SWIG_Python.SbVec3d_getClosestAxis(self)

    def getValue(self):
        return Coin_SWIG_Python.SbVec3d_getValue(self)

    def length(self):
        return Coin_SWIG_Python.SbVec3d_length(self)

    def sqrLength(self):
        return Coin_SWIG_Python.SbVec3d_sqrLength(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec3d_negate(self)

    def normalize(self):
        return Coin_SWIG_Python.SbVec3d_normalize(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec3d_setValue(self, *args)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbVec3d___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec3d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec3d___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec3d___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec3d___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec3d_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec3d___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec3d___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec3d___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec3d___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec3d___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec3d___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec3d___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec3d___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec3d___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3d

# Register SbVec3d in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec3d_swigregister(SbVec3d)

class SbDPViewVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ORTHOGRAPHIC = Coin_SWIG_Python.SbDPViewVolume_ORTHOGRAPHIC
    PERSPECTIVE = Coin_SWIG_Python.SbDPViewVolume_PERSPECTIVE

    def __init__(self):
        Coin_SWIG_Python.SbDPViewVolume_swiginit(self, Coin_SWIG_Python.new_SbDPViewVolume())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPViewVolume

    def getMatrices(self, affine, proj):
        return Coin_SWIG_Python.SbDPViewVolume_getMatrices(self, affine, proj)

    def getMatrix(self):
        return Coin_SWIG_Python.SbDPViewVolume_getMatrix(self)

    def getCameraSpaceMatrix(self):
        return Coin_SWIG_Python.SbDPViewVolume_getCameraSpaceMatrix(self)

    def projectPointToLine(self, *args):
        return Coin_SWIG_Python.SbDPViewVolume_projectPointToLine(self, *args)

    def projectToScreen(self, src, dst):
        return Coin_SWIG_Python.SbDPViewVolume_projectToScreen(self, src, dst)

    def getPlane(self, distFromEye):
        return Coin_SWIG_Python.SbDPViewVolume_getPlane(self, distFromEye)

    def getSightPoint(self, distFromEye):
        return Coin_SWIG_Python.SbDPViewVolume_getSightPoint(self, distFromEye)

    def getPlanePoint(self, distFromEye, normPoint):
        return Coin_SWIG_Python.SbDPViewVolume_getPlanePoint(self, distFromEye, normPoint)

    def getAlignRotation(self, rightAngleOnly=0):
        return Coin_SWIG_Python.SbDPViewVolume_getAlignRotation(self, rightAngleOnly)

    def getWorldToScreenScale(self, worldCenter, normRadius):
        return Coin_SWIG_Python.SbDPViewVolume_getWorldToScreenScale(self, worldCenter, normRadius)

    def projectBox(self, box):
        return Coin_SWIG_Python.SbDPViewVolume_projectBox(self, box)

    def narrow(self, *args):
        return Coin_SWIG_Python.SbDPViewVolume_narrow(self, *args)

    def ortho(self, left, right, bottom, top, nearval, farval):
        return Coin_SWIG_Python.SbDPViewVolume_ortho(self, left, right, bottom, top, nearval, farval)

    def perspective(self, fovy, aspect, nearval, farval):
        return Coin_SWIG_Python.SbDPViewVolume_perspective(self, fovy, aspect, nearval, farval)

    def frustum(self, left, right, bottom, top, nearval, farval):
        return Coin_SWIG_Python.SbDPViewVolume_frustum(self, left, right, bottom, top, nearval, farval)

    def rotateCamera(self, q):
        return Coin_SWIG_Python.SbDPViewVolume_rotateCamera(self, q)

    def translateCamera(self, v):
        return Coin_SWIG_Python.SbDPViewVolume_translateCamera(self, v)

    def zVector(self):
        return Coin_SWIG_Python.SbDPViewVolume_zVector(self)

    def zNarrow(self, nearval, farval):
        return Coin_SWIG_Python.SbDPViewVolume_zNarrow(self, nearval, farval)

    def scale(self, factor):
        return Coin_SWIG_Python.SbDPViewVolume_scale(self, factor)

    def scaleWidth(self, ratio):
        return Coin_SWIG_Python.SbDPViewVolume_scaleWidth(self, ratio)

    def scaleHeight(self, ratio):
        return Coin_SWIG_Python.SbDPViewVolume_scaleHeight(self, ratio)

    def getProjectionType(self):
        return Coin_SWIG_Python.SbDPViewVolume_getProjectionType(self)

    def getProjectionPoint(self):
        return Coin_SWIG_Python.SbDPViewVolume_getProjectionPoint(self)

    def getProjectionDirection(self):
        return Coin_SWIG_Python.SbDPViewVolume_getProjectionDirection(self)

    def getNearDist(self):
        return Coin_SWIG_Python.SbDPViewVolume_getNearDist(self)

    def getWidth(self):
        return Coin_SWIG_Python.SbDPViewVolume_getWidth(self)

    def getHeight(self):
        return Coin_SWIG_Python.SbDPViewVolume_getHeight(self)

    def getDepth(self):
        return Coin_SWIG_Python.SbDPViewVolume_getDepth(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbDPViewVolume_output(self, fp)

    def getViewVolumePlanes(self, planes):
        return Coin_SWIG_Python.SbDPViewVolume_getViewVolumePlanes(self, planes)

    def transform(self, matrix):
        return Coin_SWIG_Python.SbDPViewVolume_transform(self, matrix)

    def getViewUp(self):
        return Coin_SWIG_Python.SbDPViewVolume_getViewUp(self)

    def copyValues(self, vv):
        return Coin_SWIG_Python.SbDPViewVolume_copyValues(self, vv)

# Register SbDPViewVolume in Coin_SWIG_Python:
Coin_SWIG_Python.SbDPViewVolume_swigregister(SbDPViewVolume)

class SbViewVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ORTHOGRAPHIC = Coin_SWIG_Python.SbViewVolume_ORTHOGRAPHIC
    PERSPECTIVE = Coin_SWIG_Python.SbViewVolume_PERSPECTIVE

    def __init__(self):
        Coin_SWIG_Python.SbViewVolume_swiginit(self, Coin_SWIG_Python.new_SbViewVolume())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbViewVolume

    def getMatrices(self, affine, proj):
        return Coin_SWIG_Python.SbViewVolume_getMatrices(self, affine, proj)

    def getMatrix(self):
        return Coin_SWIG_Python.SbViewVolume_getMatrix(self)

    def getCameraSpaceMatrix(self):
        return Coin_SWIG_Python.SbViewVolume_getCameraSpaceMatrix(self)

    def projectPointToLine(self, pt):
        return Coin_SWIG_Python.SbViewVolume_projectPointToLine(self, pt)

    def projectToScreen(self, src):
        return Coin_SWIG_Python.SbViewVolume_projectToScreen(self, src)

    def getPlane(self, distFromEye):
        return Coin_SWIG_Python.SbViewVolume_getPlane(self, distFromEye)

    def getSightPoint(self, distFromEye):
        return Coin_SWIG_Python.SbViewVolume_getSightPoint(self, distFromEye)

    def getPlanePoint(self, distFromEye, normPoint):
        return Coin_SWIG_Python.SbViewVolume_getPlanePoint(self, distFromEye, normPoint)

    def getAlignRotation(self, rightAngleOnly=0):
        return Coin_SWIG_Python.SbViewVolume_getAlignRotation(self, rightAngleOnly)

    def getWorldToScreenScale(self, worldCenter, normRadius):
        return Coin_SWIG_Python.SbViewVolume_getWorldToScreenScale(self, worldCenter, normRadius)

    def projectBox(self, box):
        return Coin_SWIG_Python.SbViewVolume_projectBox(self, box)

    def narrow(self, *args):
        return Coin_SWIG_Python.SbViewVolume_narrow(self, *args)

    def ortho(self, left, right, bottom, top, nearval, farval):
        return Coin_SWIG_Python.SbViewVolume_ortho(self, left, right, bottom, top, nearval, farval)

    def perspective(self, fovy, aspect, nearval, farval):
        return Coin_SWIG_Python.SbViewVolume_perspective(self, fovy, aspect, nearval, farval)

    def frustum(self, left, right, bottom, top, nearval, farval):
        return Coin_SWIG_Python.SbViewVolume_frustum(self, left, right, bottom, top, nearval, farval)

    def rotateCamera(self, q):
        return Coin_SWIG_Python.SbViewVolume_rotateCamera(self, q)

    def translateCamera(self, v):
        return Coin_SWIG_Python.SbViewVolume_translateCamera(self, v)

    def zVector(self):
        return Coin_SWIG_Python.SbViewVolume_zVector(self)

    def zNarrow(self, nearval, farval):
        return Coin_SWIG_Python.SbViewVolume_zNarrow(self, nearval, farval)

    def scale(self, factor):
        return Coin_SWIG_Python.SbViewVolume_scale(self, factor)

    def scaleWidth(self, ratio):
        return Coin_SWIG_Python.SbViewVolume_scaleWidth(self, ratio)

    def scaleHeight(self, ratio):
        return Coin_SWIG_Python.SbViewVolume_scaleHeight(self, ratio)

    def getProjectionType(self):
        return Coin_SWIG_Python.SbViewVolume_getProjectionType(self)

    def getProjectionPoint(self):
        return Coin_SWIG_Python.SbViewVolume_getProjectionPoint(self)

    def getProjectionDirection(self):
        return Coin_SWIG_Python.SbViewVolume_getProjectionDirection(self)

    def getNearDist(self):
        return Coin_SWIG_Python.SbViewVolume_getNearDist(self)

    def getWidth(self):
        return Coin_SWIG_Python.SbViewVolume_getWidth(self)

    def getHeight(self):
        return Coin_SWIG_Python.SbViewVolume_getHeight(self)

    def getDepth(self):
        return Coin_SWIG_Python.SbViewVolume_getDepth(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbViewVolume_output(self, fp)

    def getViewVolumePlanes(self, planes):
        return Coin_SWIG_Python.SbViewVolume_getViewVolumePlanes(self, planes)

    def transform(self):
        return Coin_SWIG_Python.SbViewVolume_transform(self)

    def getViewUp(self):
        return Coin_SWIG_Python.SbViewVolume_getViewUp(self)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbViewVolume_intersect(self, *args)

    def outsideTest(self, p, bmin, bmax):
        return Coin_SWIG_Python.SbViewVolume_outsideTest(self, p, bmin, bmax)
    type = property(Coin_SWIG_Python.SbViewVolume_type_get, Coin_SWIG_Python.SbViewVolume_type_set)
    projPoint = property(Coin_SWIG_Python.SbViewVolume_projPoint_get, Coin_SWIG_Python.SbViewVolume_projPoint_set)
    projDir = property(Coin_SWIG_Python.SbViewVolume_projDir_get, Coin_SWIG_Python.SbViewVolume_projDir_set)
    nearDist = property(Coin_SWIG_Python.SbViewVolume_nearDist_get, Coin_SWIG_Python.SbViewVolume_nearDist_set)
    nearToFar = property(Coin_SWIG_Python.SbViewVolume_nearToFar_get, Coin_SWIG_Python.SbViewVolume_nearToFar_set)
    llf = property(Coin_SWIG_Python.SbViewVolume_llf_get, Coin_SWIG_Python.SbViewVolume_llf_set)
    lrf = property(Coin_SWIG_Python.SbViewVolume_lrf_get, Coin_SWIG_Python.SbViewVolume_lrf_set)
    ulf = property(Coin_SWIG_Python.SbViewVolume_ulf_get, Coin_SWIG_Python.SbViewVolume_ulf_set)

# Register SbViewVolume in Coin_SWIG_Python:
Coin_SWIG_Python.SbViewVolume_swigregister(SbViewVolume)

class SoSFVec3f(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec3f_swiginit(self, Coin_SWIG_Python.new_SoSFVec3f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec3f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec3f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec3f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec3f_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec3f_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec3f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec3f___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec3f_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec3f_setValue(self, *args)

# Register SoSFVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec3f_swigregister(SoSFVec3f)

def SoSFVec3f_createInstance():
    return Coin_SWIG_Python.SoSFVec3f_createInstance()

def SoSFVec3f_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec3f_getClassTypeId()

def SoSFVec3f_initClass():
    return Coin_SWIG_Python.SoSFVec3f_initClass()

class SoScale(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoScale_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoScale_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoScale_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoScale_swiginit(self, Coin_SWIG_Python.new_SoScale())
    scaleFactor = property(Coin_SWIG_Python.SoScale_scaleFactor_get, Coin_SWIG_Python.SoScale_scaleFactor_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoScale_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoScale_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoScale_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoScale_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoScale_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoScale_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoScale_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale

# Register SoScale in Coin_SWIG_Python:
Coin_SWIG_Python.SoScale_swigregister(SoScale)

def SoScale_getClassTypeId():
    return Coin_SWIG_Python.SoScale_getClassTypeId()

def SoScale_initClass():
    return Coin_SWIG_Python.SoScale_initClass()

class SoDragger(SoInteractionKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoDragger_getNodekitCatalog(self)
    isActive = property(Coin_SWIG_Python.SoDragger_isActive_get, Coin_SWIG_Python.SoDragger_isActive_set)
    FRONT = Coin_SWIG_Python.SoDragger_FRONT
    BACK = Coin_SWIG_Python.SoDragger_BACK
    USE_PICK = Coin_SWIG_Python.SoDragger_USE_PICK

    def callback(self, action):
        return Coin_SWIG_Python.SoDragger_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoDragger_GLRender(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoDragger_getMatrix(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoDragger_rayPick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoDragger_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoDragger_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoDragger_getPrimitiveCount(self, action)

    def setMinGesture(self, pixels):
        return Coin_SWIG_Python.SoDragger_setMinGesture(self, pixels)

    def getMinGesture(self):
        return Coin_SWIG_Python.SoDragger_getMinGesture(self)

    def enableValueChangedCallbacks(self, newval):
        return Coin_SWIG_Python.SoDragger_enableValueChangedCallbacks(self, newval)

    def getMotionMatrix(self):
        return Coin_SWIG_Python.SoDragger_getMotionMatrix(self)

    def registerChildDragger(self, child):
        return Coin_SWIG_Python.SoDragger_registerChildDragger(self, child)

    def unregisterChildDragger(self, child):
        return Coin_SWIG_Python.SoDragger_unregisterChildDragger(self, child)

    def registerChildDraggerMovingIndependently(self, child):
        return Coin_SWIG_Python.SoDragger_registerChildDraggerMovingIndependently(self, child)

    def unregisterChildDraggerMovingIndependently(self, child):
        return Coin_SWIG_Python.SoDragger_unregisterChildDraggerMovingIndependently(self, child)

    def getLocalToWorldMatrix(self):
        return Coin_SWIG_Python.SoDragger_getLocalToWorldMatrix(self)

    def getWorldToLocalMatrix(self):
        return Coin_SWIG_Python.SoDragger_getWorldToLocalMatrix(self)

    def getLocalStartingPoint(self):
        return Coin_SWIG_Python.SoDragger_getLocalStartingPoint(self)

    def getWorldStartingPoint(self):
        return Coin_SWIG_Python.SoDragger_getWorldStartingPoint(self)

    def getPartToLocalMatrix(self, partname, parttolocalmatrix, localtopartmatrix):
        return Coin_SWIG_Python.SoDragger_getPartToLocalMatrix(self, partname, parttolocalmatrix, localtopartmatrix)

    def transformMatrixLocalToWorld(self, frommatrix, tomatrix):
        return Coin_SWIG_Python.SoDragger_transformMatrixLocalToWorld(self, frommatrix, tomatrix)

    def transformMatrixWorldToLocal(self, frommatrix, tomatrix):
        return Coin_SWIG_Python.SoDragger_transformMatrixWorldToLocal(self, frommatrix, tomatrix)

    def transformMatrixToLocalSpace(self, frommatrix, tomatrix, fromspacepartname):
        return Coin_SWIG_Python.SoDragger_transformMatrixToLocalSpace(self, frommatrix, tomatrix, fromspacepartname)

    def setMotionMatrix(self, newmatrix):
        return Coin_SWIG_Python.SoDragger_setMotionMatrix(self, newmatrix)

    def valueChanged(self):
        return Coin_SWIG_Python.SoDragger_valueChanged(self)

    def getStartMotionMatrix(self):
        return Coin_SWIG_Python.SoDragger_getStartMotionMatrix(self)

    def saveStartParameters(self):
        return Coin_SWIG_Python.SoDragger_saveStartParameters(self)

    def getPickPath(self):
        return Coin_SWIG_Python.SoDragger_getPickPath(self)

    def getEvent(self):
        return Coin_SWIG_Python.SoDragger_getEvent(self)

    def createPathToThis(self):
        return Coin_SWIG_Python.SoDragger_createPathToThis(self)

    def getSurrogatePartPickedOwner(self):
        return Coin_SWIG_Python.SoDragger_getSurrogatePartPickedOwner(self)

    def getSurrogatePartPickedName(self):
        return Coin_SWIG_Python.SoDragger_getSurrogatePartPickedName(self)

    def getSurrogatePartPickedPath(self):
        return Coin_SWIG_Python.SoDragger_getSurrogatePartPickedPath(self)

    def setStartingPoint(self, *args):
        return Coin_SWIG_Python.SoDragger_setStartingPoint(self, *args)

    def getViewVolume(self):
        return Coin_SWIG_Python.SoDragger_getViewVolume(self)

    def setViewVolume(self, vol):
        return Coin_SWIG_Python.SoDragger_setViewVolume(self, vol)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoDragger_getViewportRegion(self)

    def setViewportRegion(self, reg):
        return Coin_SWIG_Python.SoDragger_setViewportRegion(self, reg)

    def getHandleEventAction(self):
        return Coin_SWIG_Python.SoDragger_getHandleEventAction(self)

    def setHandleEventAction(self, newAction):
        return Coin_SWIG_Python.SoDragger_setHandleEventAction(self, newAction)

    def setTempPathToThis(self, somethingclose):
        return Coin_SWIG_Python.SoDragger_setTempPathToThis(self, somethingclose)

    def grabEventsSetup(self):
        return Coin_SWIG_Python.SoDragger_grabEventsSetup(self)

    def grabEventsCleanup(self):
        return Coin_SWIG_Python.SoDragger_grabEventsCleanup(self)

    def workFieldsIntoTransform(self, mtx):
        return Coin_SWIG_Python.SoDragger_workFieldsIntoTransform(self, mtx)

    def setFrontOnProjector(self, newval):
        return Coin_SWIG_Python.SoDragger_setFrontOnProjector(self, newval)

    def getFrontOnProjector(self):
        return Coin_SWIG_Python.SoDragger_getFrontOnProjector(self)

    @staticmethod
    def setMinScale(newminscale):
        return Coin_SWIG_Python.SoDragger_setMinScale(newminscale)

    @staticmethod
    def getMinScale():
        return Coin_SWIG_Python.SoDragger_getMinScale()

    @staticmethod
    def workValuesIntoTransform(mtx, translationptr, rotationptr, scalefactorptr, scaleorientationptr, centerptr):
        return Coin_SWIG_Python.SoDragger_workValuesIntoTransform(mtx, translationptr, rotationptr, scalefactorptr, scaleorientationptr, centerptr)

    @staticmethod
    def getTransformFast(*args):
        return Coin_SWIG_Python.SoDragger_getTransformFast(*args)

    @staticmethod
    def appendTranslation(mtx, translation, conversion=None):
        return Coin_SWIG_Python.SoDragger_appendTranslation(mtx, translation, conversion)

    @staticmethod
    def appendScale(mtx, scale, scalecenter, conversion=None):
        return Coin_SWIG_Python.SoDragger_appendScale(mtx, scale, scalecenter, conversion)

    @staticmethod
    def appendRotation(mtx, rot, rotcenter, conversion=None):
        return Coin_SWIG_Python.SoDragger_appendRotation(mtx, rot, rotcenter, conversion)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDragger_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoDragger_initClasses()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDragger

    def addStartCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_addStartCallback(self, *args)

    def removeStartCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_removeStartCallback(self, *args)

    def addMotionCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_addMotionCallback(self, *args)

    def removeMotionCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_removeMotionCallback(self, *args)

    def addFinishCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_addFinishCallback(self, *args)

    def removeFinishCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_removeFinishCallback(self, *args)

    def addValueChangedCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_addValueChangedCallback(self, *args)

    def removeValueChangedCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_removeValueChangedCallback(self, *args)

    def addOtherEventCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_addOtherEventCallback(self, *args)

    def removeOtherEventCallback(self, *args):
        return Coin_SWIG_Python.SoDragger_removeOtherEventCallback(self, *args)

# Register SoDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoDragger_swigregister(SoDragger)

def SoDragger_getClassTypeId():
    return Coin_SWIG_Python.SoDragger_getClassTypeId()

def SoDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoDragger_getClassNodekitCatalog()

def SoDragger_setMinScale(newminscale):
    return Coin_SWIG_Python.SoDragger_setMinScale(newminscale)

def SoDragger_getMinScale():
    return Coin_SWIG_Python.SoDragger_getMinScale()

def SoDragger_workValuesIntoTransform(mtx, translationptr, rotationptr, scalefactorptr, scaleorientationptr, centerptr):
    return Coin_SWIG_Python.SoDragger_workValuesIntoTransform(mtx, translationptr, rotationptr, scalefactorptr, scaleorientationptr, centerptr)

def SoDragger_getTransformFast(*args):
    return Coin_SWIG_Python.SoDragger_getTransformFast(*args)

def SoDragger_appendTranslation(mtx, translation, conversion=None):
    return Coin_SWIG_Python.SoDragger_appendTranslation(mtx, translation, conversion)

def SoDragger_appendScale(mtx, scale, scalecenter, conversion=None):
    return Coin_SWIG_Python.SoDragger_appendScale(mtx, scale, scalecenter, conversion)

def SoDragger_appendRotation(mtx, rot, rotcenter, conversion=None):
    return Coin_SWIG_Python.SoDragger_appendRotation(mtx, rot, rotcenter, conversion)

def SoDragger_initClass():
    return Coin_SWIG_Python.SoDragger_initClass()

def SoDragger_initClasses():
    return Coin_SWIG_Python.SoDragger_initClasses()

class SoSFRotation(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFRotation_swiginit(self, Coin_SWIG_Python.new_SoSFRotation())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFRotation

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFRotation_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFRotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFRotation_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFRotation_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFRotation_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFRotation___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFRotation___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFRotation_initClass()

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFRotation_getValue(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFRotation_setValue(self, *args)

# Register SoSFRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFRotation_swigregister(SoSFRotation)

def SoSFRotation_createInstance():
    return Coin_SWIG_Python.SoSFRotation_createInstance()

def SoSFRotation_getClassTypeId():
    return Coin_SWIG_Python.SoSFRotation_getClassTypeId()

def SoSFRotation_initClass():
    return Coin_SWIG_Python.SoSFRotation_initClass()

class SoCenterballDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCenterballDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCenterballDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoCenterballDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoCenterballDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCenterballDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCenterballDragger_swiginit(self, Coin_SWIG_Python.new_SoCenterballDragger())

    def saveStartParameters(self):
        return Coin_SWIG_Python.SoCenterballDragger_saveStartParameters(self)
    rotation = property(Coin_SWIG_Python.SoCenterballDragger_rotation_get, Coin_SWIG_Python.SoCenterballDragger_rotation_set)
    center = property(Coin_SWIG_Python.SoCenterballDragger_center_get, Coin_SWIG_Python.SoCenterballDragger_center_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCenterballDragger

# Register SoCenterballDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoCenterballDragger_swigregister(SoCenterballDragger)

def SoCenterballDragger_getClassTypeId():
    return Coin_SWIG_Python.SoCenterballDragger_getClassTypeId()

def SoCenterballDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoCenterballDragger_getClassNodekitCatalog()

def SoCenterballDragger_initClass():
    return Coin_SWIG_Python.SoCenterballDragger_initClass()

class SoDirectionalLightDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDirectionalLightDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDirectionalLightDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoDirectionalLightDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoDirectionalLightDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDirectionalLightDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoDirectionalLightDragger_swiginit(self, Coin_SWIG_Python.new_SoDirectionalLightDragger())
    rotation = property(Coin_SWIG_Python.SoDirectionalLightDragger_rotation_get, Coin_SWIG_Python.SoDirectionalLightDragger_rotation_set)
    translation = property(Coin_SWIG_Python.SoDirectionalLightDragger_translation_get, Coin_SWIG_Python.SoDirectionalLightDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDirectionalLightDragger

# Register SoDirectionalLightDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoDirectionalLightDragger_swigregister(SoDirectionalLightDragger)

def SoDirectionalLightDragger_getClassTypeId():
    return Coin_SWIG_Python.SoDirectionalLightDragger_getClassTypeId()

def SoDirectionalLightDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoDirectionalLightDragger_getClassNodekitCatalog()

def SoDirectionalLightDragger_initClass():
    return Coin_SWIG_Python.SoDirectionalLightDragger_initClass()

class SoDragPointDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDragPointDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDragPointDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoDragPointDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoDragPointDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDragPointDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoDragPointDragger_swiginit(self, Coin_SWIG_Python.new_SoDragPointDragger())

    def setJumpLimit(self, limit):
        return Coin_SWIG_Python.SoDragPointDragger_setJumpLimit(self, limit)

    def getJumpLimit(self):
        return Coin_SWIG_Python.SoDragPointDragger_getJumpLimit(self)

    def showNextDraggerSet(self):
        return Coin_SWIG_Python.SoDragPointDragger_showNextDraggerSet(self)
    translation = property(Coin_SWIG_Python.SoDragPointDragger_translation_get, Coin_SWIG_Python.SoDragPointDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDragPointDragger

# Register SoDragPointDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoDragPointDragger_swigregister(SoDragPointDragger)

def SoDragPointDragger_getClassTypeId():
    return Coin_SWIG_Python.SoDragPointDragger_getClassTypeId()

def SoDragPointDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoDragPointDragger_getClassNodekitCatalog()

def SoDragPointDragger_initClass():
    return Coin_SWIG_Python.SoDragPointDragger_initClass()

class SoHandleBoxDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoHandleBoxDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoHandleBoxDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoHandleBoxDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoHandleBoxDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoHandleBoxDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoHandleBoxDragger_swiginit(self, Coin_SWIG_Python.new_SoHandleBoxDragger())
    scaleFactor = property(Coin_SWIG_Python.SoHandleBoxDragger_scaleFactor_get, Coin_SWIG_Python.SoHandleBoxDragger_scaleFactor_set)
    translation = property(Coin_SWIG_Python.SoHandleBoxDragger_translation_get, Coin_SWIG_Python.SoHandleBoxDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHandleBoxDragger

# Register SoHandleBoxDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoHandleBoxDragger_swigregister(SoHandleBoxDragger)

def SoHandleBoxDragger_getClassTypeId():
    return Coin_SWIG_Python.SoHandleBoxDragger_getClassTypeId()

def SoHandleBoxDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoHandleBoxDragger_getClassNodekitCatalog()

def SoHandleBoxDragger_initClass():
    return Coin_SWIG_Python.SoHandleBoxDragger_initClass()

class SoJackDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoJackDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoJackDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoJackDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoJackDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoJackDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoJackDragger_swiginit(self, Coin_SWIG_Python.new_SoJackDragger())
    rotation = property(Coin_SWIG_Python.SoJackDragger_rotation_get, Coin_SWIG_Python.SoJackDragger_rotation_set)
    translation = property(Coin_SWIG_Python.SoJackDragger_translation_get, Coin_SWIG_Python.SoJackDragger_translation_set)
    scaleFactor = property(Coin_SWIG_Python.SoJackDragger_scaleFactor_get, Coin_SWIG_Python.SoJackDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoJackDragger

# Register SoJackDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoJackDragger_swigregister(SoJackDragger)

def SoJackDragger_getClassTypeId():
    return Coin_SWIG_Python.SoJackDragger_getClassTypeId()

def SoJackDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoJackDragger_getClassNodekitCatalog()

def SoJackDragger_initClass():
    return Coin_SWIG_Python.SoJackDragger_initClass()

class SoPointLightDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPointLightDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPointLightDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoPointLightDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoPointLightDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPointLightDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPointLightDragger_swiginit(self, Coin_SWIG_Python.new_SoPointLightDragger())
    translation = property(Coin_SWIG_Python.SoPointLightDragger_translation_get, Coin_SWIG_Python.SoPointLightDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointLightDragger

# Register SoPointLightDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoPointLightDragger_swigregister(SoPointLightDragger)

def SoPointLightDragger_getClassTypeId():
    return Coin_SWIG_Python.SoPointLightDragger_getClassTypeId()

def SoPointLightDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoPointLightDragger_getClassNodekitCatalog()

def SoPointLightDragger_initClass():
    return Coin_SWIG_Python.SoPointLightDragger_initClass()

class SoRotateCylindricalDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRotateCylindricalDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoRotateCylindricalDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoRotateCylindricalDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoRotateCylindricalDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRotateCylindricalDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoRotateCylindricalDragger_swiginit(self, Coin_SWIG_Python.new_SoRotateCylindricalDragger())
    rotation = property(Coin_SWIG_Python.SoRotateCylindricalDragger_rotation_get, Coin_SWIG_Python.SoRotateCylindricalDragger_rotation_set)

    def setProjector(self, p):
        return Coin_SWIG_Python.SoRotateCylindricalDragger_setProjector(self, p)

    def getProjector(self):
        return Coin_SWIG_Python.SoRotateCylindricalDragger_getProjector(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotateCylindricalDragger

# Register SoRotateCylindricalDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoRotateCylindricalDragger_swigregister(SoRotateCylindricalDragger)

def SoRotateCylindricalDragger_getClassTypeId():
    return Coin_SWIG_Python.SoRotateCylindricalDragger_getClassTypeId()

def SoRotateCylindricalDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoRotateCylindricalDragger_getClassNodekitCatalog()

def SoRotateCylindricalDragger_initClass():
    return Coin_SWIG_Python.SoRotateCylindricalDragger_initClass()

class SoRotateDiscDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRotateDiscDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoRotateDiscDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoRotateDiscDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoRotateDiscDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRotateDiscDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoRotateDiscDragger_swiginit(self, Coin_SWIG_Python.new_SoRotateDiscDragger())
    rotation = property(Coin_SWIG_Python.SoRotateDiscDragger_rotation_get, Coin_SWIG_Python.SoRotateDiscDragger_rotation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotateDiscDragger

# Register SoRotateDiscDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoRotateDiscDragger_swigregister(SoRotateDiscDragger)

def SoRotateDiscDragger_getClassTypeId():
    return Coin_SWIG_Python.SoRotateDiscDragger_getClassTypeId()

def SoRotateDiscDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoRotateDiscDragger_getClassNodekitCatalog()

def SoRotateDiscDragger_initClass():
    return Coin_SWIG_Python.SoRotateDiscDragger_initClass()

class SoRotateSphericalDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRotateSphericalDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoRotateSphericalDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoRotateSphericalDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoRotateSphericalDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRotateSphericalDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoRotateSphericalDragger_swiginit(self, Coin_SWIG_Python.new_SoRotateSphericalDragger())
    rotation = property(Coin_SWIG_Python.SoRotateSphericalDragger_rotation_get, Coin_SWIG_Python.SoRotateSphericalDragger_rotation_set)

    def setProjector(self, p):
        return Coin_SWIG_Python.SoRotateSphericalDragger_setProjector(self, p)

    def getProjector(self):
        return Coin_SWIG_Python.SoRotateSphericalDragger_getProjector(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotateSphericalDragger

# Register SoRotateSphericalDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoRotateSphericalDragger_swigregister(SoRotateSphericalDragger)

def SoRotateSphericalDragger_getClassTypeId():
    return Coin_SWIG_Python.SoRotateSphericalDragger_getClassTypeId()

def SoRotateSphericalDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoRotateSphericalDragger_getClassNodekitCatalog()

def SoRotateSphericalDragger_initClass():
    return Coin_SWIG_Python.SoRotateSphericalDragger_initClass()

class SoScale1Dragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoScale1Dragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoScale1Dragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoScale1Dragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoScale1Dragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoScale1Dragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoScale1Dragger_swiginit(self, Coin_SWIG_Python.new_SoScale1Dragger())
    scaleFactor = property(Coin_SWIG_Python.SoScale1Dragger_scaleFactor_get, Coin_SWIG_Python.SoScale1Dragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale1Dragger

# Register SoScale1Dragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoScale1Dragger_swigregister(SoScale1Dragger)

def SoScale1Dragger_getClassTypeId():
    return Coin_SWIG_Python.SoScale1Dragger_getClassTypeId()

def SoScale1Dragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoScale1Dragger_getClassNodekitCatalog()

def SoScale1Dragger_initClass():
    return Coin_SWIG_Python.SoScale1Dragger_initClass()

class SoScale2Dragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoScale2Dragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoScale2Dragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoScale2Dragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoScale2Dragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoScale2Dragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoScale2Dragger_swiginit(self, Coin_SWIG_Python.new_SoScale2Dragger())
    scaleFactor = property(Coin_SWIG_Python.SoScale2Dragger_scaleFactor_get, Coin_SWIG_Python.SoScale2Dragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale2Dragger

# Register SoScale2Dragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoScale2Dragger_swigregister(SoScale2Dragger)

def SoScale2Dragger_getClassTypeId():
    return Coin_SWIG_Python.SoScale2Dragger_getClassTypeId()

def SoScale2Dragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoScale2Dragger_getClassNodekitCatalog()

def SoScale2Dragger_initClass():
    return Coin_SWIG_Python.SoScale2Dragger_initClass()

class SoScale2UniformDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoScale2UniformDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoScale2UniformDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoScale2UniformDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoScale2UniformDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoScale2UniformDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoScale2UniformDragger_swiginit(self, Coin_SWIG_Python.new_SoScale2UniformDragger())
    scaleFactor = property(Coin_SWIG_Python.SoScale2UniformDragger_scaleFactor_get, Coin_SWIG_Python.SoScale2UniformDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale2UniformDragger

# Register SoScale2UniformDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoScale2UniformDragger_swigregister(SoScale2UniformDragger)

def SoScale2UniformDragger_getClassTypeId():
    return Coin_SWIG_Python.SoScale2UniformDragger_getClassTypeId()

def SoScale2UniformDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoScale2UniformDragger_getClassNodekitCatalog()

def SoScale2UniformDragger_initClass():
    return Coin_SWIG_Python.SoScale2UniformDragger_initClass()

class SoScaleUniformDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoScaleUniformDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoScaleUniformDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoScaleUniformDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoScaleUniformDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoScaleUniformDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoScaleUniformDragger_swiginit(self, Coin_SWIG_Python.new_SoScaleUniformDragger())
    scaleFactor = property(Coin_SWIG_Python.SoScaleUniformDragger_scaleFactor_get, Coin_SWIG_Python.SoScaleUniformDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScaleUniformDragger

# Register SoScaleUniformDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoScaleUniformDragger_swigregister(SoScaleUniformDragger)

def SoScaleUniformDragger_getClassTypeId():
    return Coin_SWIG_Python.SoScaleUniformDragger_getClassTypeId()

def SoScaleUniformDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoScaleUniformDragger_getClassNodekitCatalog()

def SoScaleUniformDragger_initClass():
    return Coin_SWIG_Python.SoScaleUniformDragger_initClass()

class SoSpotLightDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSpotLightDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSpotLightDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoSpotLightDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoSpotLightDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSpotLightDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSpotLightDragger_swiginit(self, Coin_SWIG_Python.new_SoSpotLightDragger())
    rotation = property(Coin_SWIG_Python.SoSpotLightDragger_rotation_get, Coin_SWIG_Python.SoSpotLightDragger_rotation_set)
    translation = property(Coin_SWIG_Python.SoSpotLightDragger_translation_get, Coin_SWIG_Python.SoSpotLightDragger_translation_set)
    angle = property(Coin_SWIG_Python.SoSpotLightDragger_angle_get, Coin_SWIG_Python.SoSpotLightDragger_angle_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpotLightDragger

# Register SoSpotLightDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoSpotLightDragger_swigregister(SoSpotLightDragger)

def SoSpotLightDragger_getClassTypeId():
    return Coin_SWIG_Python.SoSpotLightDragger_getClassTypeId()

def SoSpotLightDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoSpotLightDragger_getClassNodekitCatalog()

def SoSpotLightDragger_initClass():
    return Coin_SWIG_Python.SoSpotLightDragger_initClass()

class SoTabBoxDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTabBoxDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTabBoxDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTabBoxDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTabBoxDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTabBoxDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTabBoxDragger_swiginit(self, Coin_SWIG_Python.new_SoTabBoxDragger())
    translation = property(Coin_SWIG_Python.SoTabBoxDragger_translation_get, Coin_SWIG_Python.SoTabBoxDragger_translation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTabBoxDragger_scaleFactor_get, Coin_SWIG_Python.SoTabBoxDragger_scaleFactor_set)

    def adjustScaleTabSize(self):
        return Coin_SWIG_Python.SoTabBoxDragger_adjustScaleTabSize(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTabBoxDragger

# Register SoTabBoxDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTabBoxDragger_swigregister(SoTabBoxDragger)

def SoTabBoxDragger_getClassTypeId():
    return Coin_SWIG_Python.SoTabBoxDragger_getClassTypeId()

def SoTabBoxDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTabBoxDragger_getClassNodekitCatalog()

def SoTabBoxDragger_initClass():
    return Coin_SWIG_Python.SoTabBoxDragger_initClass()

class SoTabPlaneDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTabPlaneDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTabPlaneDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTabPlaneDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTabPlaneDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTabPlaneDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTabPlaneDragger_swiginit(self, Coin_SWIG_Python.new_SoTabPlaneDragger())
    translation = property(Coin_SWIG_Python.SoTabPlaneDragger_translation_get, Coin_SWIG_Python.SoTabPlaneDragger_translation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTabPlaneDragger_scaleFactor_get, Coin_SWIG_Python.SoTabPlaneDragger_scaleFactor_set)

    def adjustScaleTabSize(self):
        return Coin_SWIG_Python.SoTabPlaneDragger_adjustScaleTabSize(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTabPlaneDragger

# Register SoTabPlaneDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTabPlaneDragger_swigregister(SoTabPlaneDragger)

def SoTabPlaneDragger_getClassTypeId():
    return Coin_SWIG_Python.SoTabPlaneDragger_getClassTypeId()

def SoTabPlaneDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTabPlaneDragger_getClassNodekitCatalog()

def SoTabPlaneDragger_initClass():
    return Coin_SWIG_Python.SoTabPlaneDragger_initClass()

class SoTrackballDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTrackballDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTrackballDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTrackballDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTrackballDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTrackballDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTrackballDragger_swiginit(self, Coin_SWIG_Python.new_SoTrackballDragger())
    rotation = property(Coin_SWIG_Python.SoTrackballDragger_rotation_get, Coin_SWIG_Python.SoTrackballDragger_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTrackballDragger_scaleFactor_get, Coin_SWIG_Python.SoTrackballDragger_scaleFactor_set)

    def isAnimationEnabled(self):
        return Coin_SWIG_Python.SoTrackballDragger_isAnimationEnabled(self)

    def setAnimationEnabled(self, newval):
        return Coin_SWIG_Python.SoTrackballDragger_setAnimationEnabled(self, newval)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTrackballDragger

# Register SoTrackballDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTrackballDragger_swigregister(SoTrackballDragger)

def SoTrackballDragger_getClassTypeId():
    return Coin_SWIG_Python.SoTrackballDragger_getClassTypeId()

def SoTrackballDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTrackballDragger_getClassNodekitCatalog()

def SoTrackballDragger_initClass():
    return Coin_SWIG_Python.SoTrackballDragger_initClass()

class SoTransformBoxDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformBoxDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformBoxDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTransformBoxDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTransformBoxDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformBoxDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransformBoxDragger_swiginit(self, Coin_SWIG_Python.new_SoTransformBoxDragger())
    rotation = property(Coin_SWIG_Python.SoTransformBoxDragger_rotation_get, Coin_SWIG_Python.SoTransformBoxDragger_rotation_set)
    translation = property(Coin_SWIG_Python.SoTransformBoxDragger_translation_get, Coin_SWIG_Python.SoTransformBoxDragger_translation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTransformBoxDragger_scaleFactor_get, Coin_SWIG_Python.SoTransformBoxDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformBoxDragger

# Register SoTransformBoxDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformBoxDragger_swigregister(SoTransformBoxDragger)

def SoTransformBoxDragger_getClassTypeId():
    return Coin_SWIG_Python.SoTransformBoxDragger_getClassTypeId()

def SoTransformBoxDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTransformBoxDragger_getClassNodekitCatalog()

def SoTransformBoxDragger_initClass():
    return Coin_SWIG_Python.SoTransformBoxDragger_initClass()

class SoTransformerDragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformerDragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformerDragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTransformerDragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTransformerDragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformerDragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransformerDragger_swiginit(self, Coin_SWIG_Python.new_SoTransformerDragger())
    rotation = property(Coin_SWIG_Python.SoTransformerDragger_rotation_get, Coin_SWIG_Python.SoTransformerDragger_rotation_set)
    translation = property(Coin_SWIG_Python.SoTransformerDragger_translation_get, Coin_SWIG_Python.SoTransformerDragger_translation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTransformerDragger_scaleFactor_get, Coin_SWIG_Python.SoTransformerDragger_scaleFactor_set)
    minDiscRotDot = property(Coin_SWIG_Python.SoTransformerDragger_minDiscRotDot_get, Coin_SWIG_Python.SoTransformerDragger_minDiscRotDot_set)
    INACTIVE = Coin_SWIG_Python.SoTransformerDragger_INACTIVE
    RIT_X_ROTATE = Coin_SWIG_Python.SoTransformerDragger_RIT_X_ROTATE
    TOP_Y_ROTATE = Coin_SWIG_Python.SoTransformerDragger_TOP_Y_ROTATE
    FNT_Z_ROTATE = Coin_SWIG_Python.SoTransformerDragger_FNT_Z_ROTATE
    LFT_X_ROTATE = Coin_SWIG_Python.SoTransformerDragger_LFT_X_ROTATE
    BOT_Y_ROTATE = Coin_SWIG_Python.SoTransformerDragger_BOT_Y_ROTATE
    BAK_Z_ROTATE = Coin_SWIG_Python.SoTransformerDragger_BAK_Z_ROTATE
    PX_PY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_PY_PZ_3D_SCALE
    PX_PY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_PY_NZ_3D_SCALE
    PX_NY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_NY_PZ_3D_SCALE
    PX_NY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_NY_NZ_3D_SCALE
    NX_PY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_PY_PZ_3D_SCALE
    NX_PY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_PY_NZ_3D_SCALE
    NX_NY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_NY_PZ_3D_SCALE
    NX_NY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_NY_NZ_3D_SCALE
    RIT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_RIT_TRANSLATE
    TOP_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_TOP_TRANSLATE
    FNT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_FNT_TRANSLATE
    LFT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_LFT_TRANSLATE
    BOT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_BOT_TRANSLATE
    BAK_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_BAK_TRANSLATE

    def getCurrentState(self):
        return Coin_SWIG_Python.SoTransformerDragger_getCurrentState(self)

    def unsquishKnobs(self):
        return Coin_SWIG_Python.SoTransformerDragger_unsquishKnobs(self)

    def isLocateHighlighting(self):
        return Coin_SWIG_Python.SoTransformerDragger_isLocateHighlighting(self)

    def setLocateHighlighting(self, onoff):
        return Coin_SWIG_Python.SoTransformerDragger_setLocateHighlighting(self, onoff)

    @staticmethod
    def setColinearThreshold(newval):
        return Coin_SWIG_Python.SoTransformerDragger_setColinearThreshold(newval)

    @staticmethod
    def getColinearThreshold():
        return Coin_SWIG_Python.SoTransformerDragger_getColinearThreshold()

    def getBoxPointInWorldSpace(self, pointonunitbox):
        return Coin_SWIG_Python.SoTransformerDragger_getBoxPointInWorldSpace(self, pointonunitbox)

    def getBoxDirInWorldSpace(self, dironunitbox):
        return Coin_SWIG_Python.SoTransformerDragger_getBoxDirInWorldSpace(self, dironunitbox)

    def getWorldPointInBoxSpace(self, pointinworldspace):
        return Coin_SWIG_Python.SoTransformerDragger_getWorldPointInBoxSpace(self, pointinworldspace)

    def getWorldPointInPixelSpace(self, thepoint):
        return Coin_SWIG_Python.SoTransformerDragger_getWorldPointInPixelSpace(self, thepoint)

    def getInteractiveCenterInBoxSpace(self):
        return Coin_SWIG_Python.SoTransformerDragger_getInteractiveCenterInBoxSpace(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformerDragger

# Register SoTransformerDragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformerDragger_swigregister(SoTransformerDragger)

def SoTransformerDragger_getClassTypeId():
    return Coin_SWIG_Python.SoTransformerDragger_getClassTypeId()

def SoTransformerDragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTransformerDragger_getClassNodekitCatalog()

def SoTransformerDragger_initClass():
    return Coin_SWIG_Python.SoTransformerDragger_initClass()

def SoTransformerDragger_setColinearThreshold(newval):
    return Coin_SWIG_Python.SoTransformerDragger_setColinearThreshold(newval)

def SoTransformerDragger_getColinearThreshold():
    return Coin_SWIG_Python.SoTransformerDragger_getColinearThreshold()

class SoTranslate1Dragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTranslate1Dragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTranslate1Dragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTranslate1Dragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTranslate1Dragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTranslate1Dragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTranslate1Dragger_swiginit(self, Coin_SWIG_Python.new_SoTranslate1Dragger())
    translation = property(Coin_SWIG_Python.SoTranslate1Dragger_translation_get, Coin_SWIG_Python.SoTranslate1Dragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranslate1Dragger

# Register SoTranslate1Dragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTranslate1Dragger_swigregister(SoTranslate1Dragger)

def SoTranslate1Dragger_getClassTypeId():
    return Coin_SWIG_Python.SoTranslate1Dragger_getClassTypeId()

def SoTranslate1Dragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTranslate1Dragger_getClassNodekitCatalog()

def SoTranslate1Dragger_initClass():
    return Coin_SWIG_Python.SoTranslate1Dragger_initClass()

class SoTranslate2Dragger(SoDragger):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTranslate2Dragger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTranslate2Dragger_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoTranslate2Dragger_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoTranslate2Dragger_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTranslate2Dragger_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTranslate2Dragger_swiginit(self, Coin_SWIG_Python.new_SoTranslate2Dragger())
    translation = property(Coin_SWIG_Python.SoTranslate2Dragger_translation_get, Coin_SWIG_Python.SoTranslate2Dragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranslate2Dragger

# Register SoTranslate2Dragger in Coin_SWIG_Python:
Coin_SWIG_Python.SoTranslate2Dragger_swigregister(SoTranslate2Dragger)

def SoTranslate2Dragger_getClassTypeId():
    return Coin_SWIG_Python.SoTranslate2Dragger_getClassTypeId()

def SoTranslate2Dragger_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoTranslate2Dragger_getClassNodekitCatalog()

def SoTranslate2Dragger_initClass():
    return Coin_SWIG_Python.SoTranslate2Dragger_initClass()

class SoAccumulatedElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAccumulatedElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoAccumulatedElement_getClassStackIndex()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAccumulatedElement_initClass()

    def matches(self, element):
        return Coin_SWIG_Python.SoAccumulatedElement_matches(self, element)

# Register SoAccumulatedElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoAccumulatedElement_swigregister(SoAccumulatedElement)

def SoAccumulatedElement_getClassTypeId():
    return Coin_SWIG_Python.SoAccumulatedElement_getClassTypeId()

def SoAccumulatedElement_getClassStackIndex():
    return Coin_SWIG_Python.SoAccumulatedElement_getClassStackIndex()

def SoAccumulatedElement_initClass():
    return Coin_SWIG_Python.SoAccumulatedElement_initClass()

class SoAmbientColorElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAmbientColorElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoAmbientColorElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoAmbientColorElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAmbientColorElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoAmbientColorElement_init(self, state)

    @staticmethod
    def set(state, node, numcolors, colors):
        return Coin_SWIG_Python.SoAmbientColorElement_set(state, node, numcolors, colors)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoAmbientColorElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoAmbientColorElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoAmbientColorElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoAmbientColorElement_getArrayPtr(self)

# Register SoAmbientColorElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoAmbientColorElement_swigregister(SoAmbientColorElement)

def SoAmbientColorElement_getClassTypeId():
    return Coin_SWIG_Python.SoAmbientColorElement_getClassTypeId()

def SoAmbientColorElement_getClassStackIndex():
    return Coin_SWIG_Python.SoAmbientColorElement_getClassStackIndex()

def SoAmbientColorElement_createInstance():
    return Coin_SWIG_Python.SoAmbientColorElement_createInstance()

def SoAmbientColorElement_initClass():
    return Coin_SWIG_Python.SoAmbientColorElement_initClass()

def SoAmbientColorElement_set(state, node, numcolors, colors):
    return Coin_SWIG_Python.SoAmbientColorElement_set(state, node, numcolors, colors)

def SoAmbientColorElement_getInstance(state):
    return Coin_SWIG_Python.SoAmbientColorElement_getInstance(state)

class SoAnnoText3CharOrientElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_init(self, state)

    @staticmethod
    def set(state, isOriented):
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_set(state, isOriented)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoAnnoText3CharOrientElement_getDefault()

# Register SoAnnoText3CharOrientElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoAnnoText3CharOrientElement_swigregister(SoAnnoText3CharOrientElement)

def SoAnnoText3CharOrientElement_getClassTypeId():
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassTypeId()

def SoAnnoText3CharOrientElement_getClassStackIndex():
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassStackIndex()

def SoAnnoText3CharOrientElement_createInstance():
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_createInstance()

def SoAnnoText3CharOrientElement_initClass():
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_initClass()

def SoAnnoText3CharOrientElement_set(state, isOriented):
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_set(state, isOriented)

def SoAnnoText3CharOrientElement_get(state):
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_get(state)

def SoAnnoText3CharOrientElement_getDefault():
    return Coin_SWIG_Python.SoAnnoText3CharOrientElement_getDefault()

class SoAnnoText3FontSizeHintElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_initClass()
    ANNOTATION = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_ANNOTATION
    FIT_TEXT_VECTOR = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_FIT_TEXT_VECTOR

    def init(self, state):
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_init(self, state)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getDefault()

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_set(*args)

# Register SoAnnoText3FontSizeHintElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_swigregister(SoAnnoText3FontSizeHintElement)

def SoAnnoText3FontSizeHintElement_getClassTypeId():
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassTypeId()

def SoAnnoText3FontSizeHintElement_getClassStackIndex():
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassStackIndex()

def SoAnnoText3FontSizeHintElement_createInstance():
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_createInstance()

def SoAnnoText3FontSizeHintElement_initClass():
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_initClass()

def SoAnnoText3FontSizeHintElement_get(state):
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_get(state)

def SoAnnoText3FontSizeHintElement_getDefault():
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getDefault()

def SoAnnoText3FontSizeHintElement_set(*args):
    return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_set(*args)

class SoAnnoText3RenderPrintElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_initClass()
    RENDER3D_PRINT_VECTOR = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_RENDER3D_PRINT_VECTOR
    RENDER3D_PRINT_RASTER = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_RENDER3D_PRINT_RASTER
    RENDER2D_PRINT_RASTER = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_RENDER2D_PRINT_RASTER

    def init(self, state):
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_init(self, state)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getDefault()

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_set(*args)

# Register SoAnnoText3RenderPrintElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoAnnoText3RenderPrintElement_swigregister(SoAnnoText3RenderPrintElement)

def SoAnnoText3RenderPrintElement_getClassTypeId():
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassTypeId()

def SoAnnoText3RenderPrintElement_getClassStackIndex():
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassStackIndex()

def SoAnnoText3RenderPrintElement_createInstance():
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_createInstance()

def SoAnnoText3RenderPrintElement_initClass():
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_initClass()

def SoAnnoText3RenderPrintElement_get(state):
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_get(state)

def SoAnnoText3RenderPrintElement_getDefault():
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getDefault()

def SoAnnoText3RenderPrintElement_set(*args):
    return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_set(*args)

class SoModelMatrixElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoModelMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoModelMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoModelMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoModelMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoModelMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoModelMatrixElement_push(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoModelMatrixElement_matches(self, element)

    @staticmethod
    def makeIdentity(state, node):
        return Coin_SWIG_Python.SoModelMatrixElement_makeIdentity(state, node)

    @staticmethod
    def set(state, node):
        return Coin_SWIG_Python.SoModelMatrixElement_set(state, node)

    @staticmethod
    def setCullMatrix(state, node):
        return Coin_SWIG_Python.SoModelMatrixElement_setCullMatrix(state, node)

    @staticmethod
    def mult(state, node):
        return Coin_SWIG_Python.SoModelMatrixElement_mult(state, node)

    @staticmethod
    def translateBy(state, node, translation):
        return Coin_SWIG_Python.SoModelMatrixElement_translateBy(state, node, translation)

    @staticmethod
    def rotateBy(state, node, rotation):
        return Coin_SWIG_Python.SoModelMatrixElement_rotateBy(state, node, rotation)

    @staticmethod
    def scaleBy(state, node, scaleFactor):
        return Coin_SWIG_Python.SoModelMatrixElement_scaleBy(state, node, scaleFactor)

    @staticmethod
    def pushMatrix(state):
        return Coin_SWIG_Python.SoModelMatrixElement_pushMatrix(state)

    @staticmethod
    def popMatrix(state):
        return Coin_SWIG_Python.SoModelMatrixElement_popMatrix(state)

    @staticmethod
    def getCombinedCullMatrix(state):
        return Coin_SWIG_Python.SoModelMatrixElement_getCombinedCullMatrix(state)

    @staticmethod
    def get(*args):
        return Coin_SWIG_Python.SoModelMatrixElement_get(*args)

    def getModelMatrix(self):
        return Coin_SWIG_Python.SoModelMatrixElement_getModelMatrix(self)

# Register SoModelMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoModelMatrixElement_swigregister(SoModelMatrixElement)

def SoModelMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoModelMatrixElement_getClassTypeId()

def SoModelMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoModelMatrixElement_getClassStackIndex()

def SoModelMatrixElement_createInstance():
    return Coin_SWIG_Python.SoModelMatrixElement_createInstance()

def SoModelMatrixElement_initClass():
    return Coin_SWIG_Python.SoModelMatrixElement_initClass()

def SoModelMatrixElement_makeIdentity(state, node):
    return Coin_SWIG_Python.SoModelMatrixElement_makeIdentity(state, node)

def SoModelMatrixElement_set(state, node):
    return Coin_SWIG_Python.SoModelMatrixElement_set(state, node)

def SoModelMatrixElement_setCullMatrix(state, node):
    return Coin_SWIG_Python.SoModelMatrixElement_setCullMatrix(state, node)

def SoModelMatrixElement_mult(state, node):
    return Coin_SWIG_Python.SoModelMatrixElement_mult(state, node)

def SoModelMatrixElement_translateBy(state, node, translation):
    return Coin_SWIG_Python.SoModelMatrixElement_translateBy(state, node, translation)

def SoModelMatrixElement_rotateBy(state, node, rotation):
    return Coin_SWIG_Python.SoModelMatrixElement_rotateBy(state, node, rotation)

def SoModelMatrixElement_scaleBy(state, node, scaleFactor):
    return Coin_SWIG_Python.SoModelMatrixElement_scaleBy(state, node, scaleFactor)

def SoModelMatrixElement_pushMatrix(state):
    return Coin_SWIG_Python.SoModelMatrixElement_pushMatrix(state)

def SoModelMatrixElement_popMatrix(state):
    return Coin_SWIG_Python.SoModelMatrixElement_popMatrix(state)

def SoModelMatrixElement_getCombinedCullMatrix(state):
    return Coin_SWIG_Python.SoModelMatrixElement_getCombinedCullMatrix(state)

def SoModelMatrixElement_get(*args):
    return Coin_SWIG_Python.SoModelMatrixElement_get(*args)

class SoBBoxModelMatrixElement(SoModelMatrixElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_push(self, state)

    @staticmethod
    def reset(state, node):
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_reset(state, node)

    @staticmethod
    def pushMatrix(state, localmatrix):
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_pushMatrix(state, localmatrix)

    @staticmethod
    def popMatrix(state, localmatrix):
        return Coin_SWIG_Python.SoBBoxModelMatrixElement_popMatrix(state, localmatrix)

# Register SoBBoxModelMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoBBoxModelMatrixElement_swigregister(SoBBoxModelMatrixElement)

def SoBBoxModelMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassTypeId()

def SoBBoxModelMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassStackIndex()

def SoBBoxModelMatrixElement_createInstance():
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_createInstance()

def SoBBoxModelMatrixElement_initClass():
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_initClass()

def SoBBoxModelMatrixElement_reset(state, node):
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_reset(state, node)

def SoBBoxModelMatrixElement_pushMatrix(state, localmatrix):
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_pushMatrix(state, localmatrix)

def SoBBoxModelMatrixElement_popMatrix(state, localmatrix):
    return Coin_SWIG_Python.SoBBoxModelMatrixElement_popMatrix(state, localmatrix)

class SoBumpMapCoordinateElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_init(self, state)

    @staticmethod
    def set(state, node, numcoords, coords):
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_set(state, node, numcoords, coords)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoBumpMapCoordinateElement_getArrayPtr(self)

# Register SoBumpMapCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoBumpMapCoordinateElement_swigregister(SoBumpMapCoordinateElement)

def SoBumpMapCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassTypeId()

def SoBumpMapCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassStackIndex()

def SoBumpMapCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoBumpMapCoordinateElement_createInstance()

def SoBumpMapCoordinateElement_initClass():
    return Coin_SWIG_Python.SoBumpMapCoordinateElement_initClass()

def SoBumpMapCoordinateElement_set(state, node, numcoords, coords):
    return Coin_SWIG_Python.SoBumpMapCoordinateElement_set(state, node, numcoords, coords)

def SoBumpMapCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoBumpMapCoordinateElement_getInstance(state)

class SoBumpMapElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBumpMapElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoBumpMapElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoBumpMapElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBumpMapElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoBumpMapElement_init(self, state)

    @staticmethod
    def set(state, node, image):
        return Coin_SWIG_Python.SoBumpMapElement_set(state, node, image)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoBumpMapElement_get(state)

# Register SoBumpMapElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoBumpMapElement_swigregister(SoBumpMapElement)

def SoBumpMapElement_getClassTypeId():
    return Coin_SWIG_Python.SoBumpMapElement_getClassTypeId()

def SoBumpMapElement_getClassStackIndex():
    return Coin_SWIG_Python.SoBumpMapElement_getClassStackIndex()

def SoBumpMapElement_createInstance():
    return Coin_SWIG_Python.SoBumpMapElement_createInstance()

def SoBumpMapElement_initClass():
    return Coin_SWIG_Python.SoBumpMapElement_initClass()

def SoBumpMapElement_set(state, node, image):
    return Coin_SWIG_Python.SoBumpMapElement_set(state, node, image)

def SoBumpMapElement_get(state):
    return Coin_SWIG_Python.SoBumpMapElement_get(state)

class SoBumpMapMatrixElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBumpMapMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoBumpMapMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoBumpMapMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBumpMapMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_push(self, state)

    @staticmethod
    def makeIdentity(state, node):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_makeIdentity(state, node)

    @staticmethod
    def set(state, node):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_set(state, node)

    @staticmethod
    def mult(state, node):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_mult(state, node)

    @staticmethod
    def translateBy(state, node, translation):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_translateBy(state, node, translation)

    @staticmethod
    def rotateBy(state, node, rotation):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_rotateBy(state, node, rotation)

    @staticmethod
    def scaleBy(state, node, scaleFactor):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_scaleBy(state, node, scaleFactor)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoBumpMapMatrixElement_get(state)

# Register SoBumpMapMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoBumpMapMatrixElement_swigregister(SoBumpMapMatrixElement)

def SoBumpMapMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoBumpMapMatrixElement_getClassTypeId()

def SoBumpMapMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoBumpMapMatrixElement_getClassStackIndex()

def SoBumpMapMatrixElement_createInstance():
    return Coin_SWIG_Python.SoBumpMapMatrixElement_createInstance()

def SoBumpMapMatrixElement_initClass():
    return Coin_SWIG_Python.SoBumpMapMatrixElement_initClass()

def SoBumpMapMatrixElement_makeIdentity(state, node):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_makeIdentity(state, node)

def SoBumpMapMatrixElement_set(state, node):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_set(state, node)

def SoBumpMapMatrixElement_mult(state, node):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_mult(state, node)

def SoBumpMapMatrixElement_translateBy(state, node, translation):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_translateBy(state, node, translation)

def SoBumpMapMatrixElement_rotateBy(state, node, rotation):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_rotateBy(state, node, rotation)

def SoBumpMapMatrixElement_scaleBy(state, node, scaleFactor):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_scaleBy(state, node, scaleFactor)

def SoBumpMapMatrixElement_get(state):
    return Coin_SWIG_Python.SoBumpMapMatrixElement_get(state)

class SoCacheElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCacheElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoCacheElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoCacheElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCacheElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoCacheElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoCacheElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoCacheElement_pop(self, state, prevTopElement)

    @staticmethod
    def set(state, cache):
        return Coin_SWIG_Python.SoCacheElement_set(state, cache)

    def getCache(self):
        return Coin_SWIG_Python.SoCacheElement_getCache(self)

    @staticmethod
    def anyOpen(state):
        return Coin_SWIG_Python.SoCacheElement_anyOpen(state)

    @staticmethod
    def invalidate(state):
        return Coin_SWIG_Python.SoCacheElement_invalidate(state)

    def matches(self, element):
        return Coin_SWIG_Python.SoCacheElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoCacheElement_copyMatchInfo(self)

    def getNextCacheElement(self):
        return Coin_SWIG_Python.SoCacheElement_getNextCacheElement(self)

    @staticmethod
    def addElement(state, element):
        return Coin_SWIG_Python.SoCacheElement_addElement(state, element)

    @staticmethod
    def addCacheDependency(state, cache):
        return Coin_SWIG_Python.SoCacheElement_addCacheDependency(state, cache)

    @staticmethod
    def setInvalid(newvalue):
        return Coin_SWIG_Python.SoCacheElement_setInvalid(newvalue)

    @staticmethod
    def getCurrentCache(state):
        return Coin_SWIG_Python.SoCacheElement_getCurrentCache(state)

# Register SoCacheElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoCacheElement_swigregister(SoCacheElement)

def SoCacheElement_getClassTypeId():
    return Coin_SWIG_Python.SoCacheElement_getClassTypeId()

def SoCacheElement_getClassStackIndex():
    return Coin_SWIG_Python.SoCacheElement_getClassStackIndex()

def SoCacheElement_createInstance():
    return Coin_SWIG_Python.SoCacheElement_createInstance()

def SoCacheElement_initClass():
    return Coin_SWIG_Python.SoCacheElement_initClass()

def SoCacheElement_set(state, cache):
    return Coin_SWIG_Python.SoCacheElement_set(state, cache)

def SoCacheElement_anyOpen(state):
    return Coin_SWIG_Python.SoCacheElement_anyOpen(state)

def SoCacheElement_invalidate(state):
    return Coin_SWIG_Python.SoCacheElement_invalidate(state)

def SoCacheElement_addElement(state, element):
    return Coin_SWIG_Python.SoCacheElement_addElement(state, element)

def SoCacheElement_addCacheDependency(state, cache):
    return Coin_SWIG_Python.SoCacheElement_addCacheDependency(state, cache)

def SoCacheElement_setInvalid(newvalue):
    return Coin_SWIG_Python.SoCacheElement_setInvalid(newvalue)

def SoCacheElement_getCurrentCache(state):
    return Coin_SWIG_Python.SoCacheElement_getCurrentCache(state)

class SbPlane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbPlane_swiginit(self, Coin_SWIG_Python.new_SbPlane(*args))

    def offset(self, d):
        return Coin_SWIG_Python.SbPlane_offset(self, d)

    def transform(self):
        return Coin_SWIG_Python.SbPlane_transform(self)

    def isInHalfSpace(self, point):
        return Coin_SWIG_Python.SbPlane_isInHalfSpace(self, point)

    def getDistance(self, point):
        return Coin_SWIG_Python.SbPlane_getDistance(self, point)

    def getNormal(self):
        return Coin_SWIG_Python.SbPlane_getNormal(self)

    def getDistanceFromOrigin(self):
        return Coin_SWIG_Python.SbPlane_getDistanceFromOrigin(self)

    def output(self, file):
        return Coin_SWIG_Python.SbPlane_output(self, file)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbPlane_intersect(self, *args)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbPlane___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbPlane___ne__(self, u)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbPlane

# Register SbPlane in Coin_SWIG_Python:
Coin_SWIG_Python.SbPlane_swigregister(SbPlane)

class SoClipPlaneElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoClipPlaneElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoClipPlaneElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoClipPlaneElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoClipPlaneElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoClipPlaneElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoClipPlaneElement_push(self, state)

    @staticmethod
    def add(state, node, plane):
        return Coin_SWIG_Python.SoClipPlaneElement_add(state, node, plane)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoClipPlaneElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoClipPlaneElement_getNum(self)

    def get(self, index, inworldspace=1):
        return Coin_SWIG_Python.SoClipPlaneElement_get(self, index, inworldspace)

# Register SoClipPlaneElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoClipPlaneElement_swigregister(SoClipPlaneElement)

def SoClipPlaneElement_getClassTypeId():
    return Coin_SWIG_Python.SoClipPlaneElement_getClassTypeId()

def SoClipPlaneElement_getClassStackIndex():
    return Coin_SWIG_Python.SoClipPlaneElement_getClassStackIndex()

def SoClipPlaneElement_createInstance():
    return Coin_SWIG_Python.SoClipPlaneElement_createInstance()

def SoClipPlaneElement_initClass():
    return Coin_SWIG_Python.SoClipPlaneElement_initClass()

def SoClipPlaneElement_add(state, node, plane):
    return Coin_SWIG_Python.SoClipPlaneElement_add(state, node, plane)

def SoClipPlaneElement_getInstance(state):
    return Coin_SWIG_Python.SoClipPlaneElement_getInstance(state)

class SoFloatElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFloatElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoFloatElement_getClassStackIndex()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFloatElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoFloatElement_init(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoFloatElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoFloatElement_copyMatchInfo(self)

    def output(self, file):
        return Coin_SWIG_Python.SoFloatElement_output(self, file)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoFloatElement_set(*args)

    @staticmethod
    def get(stackIndex, state):
        return Coin_SWIG_Python.SoFloatElement_get(stackIndex, state)

    def setElt(self, value):
        return Coin_SWIG_Python.SoFloatElement_setElt(self, value)

# Register SoFloatElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoFloatElement_swigregister(SoFloatElement)

def SoFloatElement_getClassTypeId():
    return Coin_SWIG_Python.SoFloatElement_getClassTypeId()

def SoFloatElement_getClassStackIndex():
    return Coin_SWIG_Python.SoFloatElement_getClassStackIndex()

def SoFloatElement_initClass():
    return Coin_SWIG_Python.SoFloatElement_initClass()

def SoFloatElement_set(*args):
    return Coin_SWIG_Python.SoFloatElement_set(*args)

def SoFloatElement_get(stackIndex, state):
    return Coin_SWIG_Python.SoFloatElement_get(stackIndex, state)

class SoComplexityElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComplexityElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoComplexityElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComplexityElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComplexityElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoComplexityElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoComplexityElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoComplexityElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoComplexityElement_getDefault()

# Register SoComplexityElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoComplexityElement_swigregister(SoComplexityElement)

def SoComplexityElement_getClassTypeId():
    return Coin_SWIG_Python.SoComplexityElement_getClassTypeId()

def SoComplexityElement_getClassStackIndex():
    return Coin_SWIG_Python.SoComplexityElement_getClassStackIndex()

def SoComplexityElement_createInstance():
    return Coin_SWIG_Python.SoComplexityElement_createInstance()

def SoComplexityElement_initClass():
    return Coin_SWIG_Python.SoComplexityElement_initClass()

def SoComplexityElement_set(*args):
    return Coin_SWIG_Python.SoComplexityElement_set(*args)

def SoComplexityElement_get(state):
    return Coin_SWIG_Python.SoComplexityElement_get(state)

def SoComplexityElement_getDefault():
    return Coin_SWIG_Python.SoComplexityElement_getDefault()

class SoCoordinateElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCoordinateElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoCoordinateElement_init(self, state)

    @staticmethod
    def set3(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoCoordinateElement_set3(state, node, numCoords, coords)

    @staticmethod
    def set4(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoCoordinateElement_set4(state, node, numCoords, coords)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoCoordinateElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoCoordinateElement_getNum(self)

    def is3D(self):
        return Coin_SWIG_Python.SoCoordinateElement_is3D(self)

    def get3(self, index):
        return Coin_SWIG_Python.SoCoordinateElement_get3(self, index)

    def get4(self, index):
        return Coin_SWIG_Python.SoCoordinateElement_get4(self, index)

    def getArrayPtr3(self):
        return Coin_SWIG_Python.SoCoordinateElement_getArrayPtr3(self)

    def getArrayPtr4(self):
        return Coin_SWIG_Python.SoCoordinateElement_getArrayPtr4(self)

    @staticmethod
    def getDefault3():
        return Coin_SWIG_Python.SoCoordinateElement_getDefault3()

    @staticmethod
    def getDefault4():
        return Coin_SWIG_Python.SoCoordinateElement_getDefault4()

    def output(self, file):
        return Coin_SWIG_Python.SoCoordinateElement_output(self, file)

# Register SoCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoCoordinateElement_swigregister(SoCoordinateElement)

def SoCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoCoordinateElement_getClassTypeId()

def SoCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoCoordinateElement_getClassStackIndex()

def SoCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoCoordinateElement_createInstance()

def SoCoordinateElement_initClass():
    return Coin_SWIG_Python.SoCoordinateElement_initClass()

def SoCoordinateElement_set3(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoCoordinateElement_set3(state, node, numCoords, coords)

def SoCoordinateElement_set4(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoCoordinateElement_set4(state, node, numCoords, coords)

def SoCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoCoordinateElement_getInstance(state)

def SoCoordinateElement_getDefault3():
    return Coin_SWIG_Python.SoCoordinateElement_getDefault3()

def SoCoordinateElement_getDefault4():
    return Coin_SWIG_Python.SoCoordinateElement_getDefault4()

class SoCreaseAngleElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCreaseAngleElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoCreaseAngleElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoCreaseAngleElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCreaseAngleElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoCreaseAngleElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoCreaseAngleElement_set(*args)

    @staticmethod
    def get(*args):
        return Coin_SWIG_Python.SoCreaseAngleElement_get(*args)

    @staticmethod
    def getDefault(*args):
        return Coin_SWIG_Python.SoCreaseAngleElement_getDefault(*args)

# Register SoCreaseAngleElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoCreaseAngleElement_swigregister(SoCreaseAngleElement)

def SoCreaseAngleElement_getClassTypeId():
    return Coin_SWIG_Python.SoCreaseAngleElement_getClassTypeId()

def SoCreaseAngleElement_getClassStackIndex():
    return Coin_SWIG_Python.SoCreaseAngleElement_getClassStackIndex()

def SoCreaseAngleElement_createInstance():
    return Coin_SWIG_Python.SoCreaseAngleElement_createInstance()

def SoCreaseAngleElement_initClass():
    return Coin_SWIG_Python.SoCreaseAngleElement_initClass()

def SoCreaseAngleElement_set(*args):
    return Coin_SWIG_Python.SoCreaseAngleElement_set(*args)

def SoCreaseAngleElement_get(*args):
    return Coin_SWIG_Python.SoCreaseAngleElement_get(*args)

def SoCreaseAngleElement_getDefault(*args):
    return Coin_SWIG_Python.SoCreaseAngleElement_getDefault(*args)

class SoCullElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCullElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoCullElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoCullElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCullElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoCullElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoCullElement_push(self, state)

    @staticmethod
    def setViewVolume(state, vv):
        return Coin_SWIG_Python.SoCullElement_setViewVolume(state, vv)

    @staticmethod
    def addPlane(state, newplane):
        return Coin_SWIG_Python.SoCullElement_addPlane(state, newplane)

    @staticmethod
    def cullBox(state, box, transform=1):
        return Coin_SWIG_Python.SoCullElement_cullBox(state, box, transform)

    @staticmethod
    def cullTest(state, box, transform=1):
        return Coin_SWIG_Python.SoCullElement_cullTest(state, box, transform)

    @staticmethod
    def completelyInside(state):
        return Coin_SWIG_Python.SoCullElement_completelyInside(state)

    def matches(self, elt):
        return Coin_SWIG_Python.SoCullElement_matches(self, elt)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoCullElement_copyMatchInfo(self)

# Register SoCullElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoCullElement_swigregister(SoCullElement)

def SoCullElement_getClassTypeId():
    return Coin_SWIG_Python.SoCullElement_getClassTypeId()

def SoCullElement_getClassStackIndex():
    return Coin_SWIG_Python.SoCullElement_getClassStackIndex()

def SoCullElement_createInstance():
    return Coin_SWIG_Python.SoCullElement_createInstance()

def SoCullElement_initClass():
    return Coin_SWIG_Python.SoCullElement_initClass()

def SoCullElement_setViewVolume(state, vv):
    return Coin_SWIG_Python.SoCullElement_setViewVolume(state, vv)

def SoCullElement_addPlane(state, newplane):
    return Coin_SWIG_Python.SoCullElement_addPlane(state, newplane)

def SoCullElement_cullBox(state, box, transform=1):
    return Coin_SWIG_Python.SoCullElement_cullBox(state, box, transform)

def SoCullElement_cullTest(state, box, transform=1):
    return Coin_SWIG_Python.SoCullElement_cullTest(state, box, transform)

def SoCullElement_completelyInside(state):
    return Coin_SWIG_Python.SoCullElement_completelyInside(state)

class SoDecimationPercentageElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecimationPercentageElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoDecimationPercentageElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecimationPercentageElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecimationPercentageElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoDecimationPercentageElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoDecimationPercentageElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoDecimationPercentageElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoDecimationPercentageElement_getDefault()

# Register SoDecimationPercentageElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecimationPercentageElement_swigregister(SoDecimationPercentageElement)

def SoDecimationPercentageElement_getClassTypeId():
    return Coin_SWIG_Python.SoDecimationPercentageElement_getClassTypeId()

def SoDecimationPercentageElement_getClassStackIndex():
    return Coin_SWIG_Python.SoDecimationPercentageElement_getClassStackIndex()

def SoDecimationPercentageElement_createInstance():
    return Coin_SWIG_Python.SoDecimationPercentageElement_createInstance()

def SoDecimationPercentageElement_initClass():
    return Coin_SWIG_Python.SoDecimationPercentageElement_initClass()

def SoDecimationPercentageElement_set(*args):
    return Coin_SWIG_Python.SoDecimationPercentageElement_set(*args)

def SoDecimationPercentageElement_get(state):
    return Coin_SWIG_Python.SoDecimationPercentageElement_get(state)

def SoDecimationPercentageElement_getDefault():
    return Coin_SWIG_Python.SoDecimationPercentageElement_getDefault()

class SoDiffuseColorElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDiffuseColorElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoDiffuseColorElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDiffuseColorElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDiffuseColorElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoDiffuseColorElement_init(self, state)

    @staticmethod
    def set(state, node, numcolors, colors):
        return Coin_SWIG_Python.SoDiffuseColorElement_set(state, node, numcolors, colors)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoDiffuseColorElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoDiffuseColorElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoDiffuseColorElement_get(self, index)

    def isPacked(self):
        return Coin_SWIG_Python.SoDiffuseColorElement_isPacked(self)

    def hasPackedTransparency(self):
        return Coin_SWIG_Python.SoDiffuseColorElement_hasPackedTransparency(self)

    def getColorArrayPtr(self):
        return Coin_SWIG_Python.SoDiffuseColorElement_getColorArrayPtr(self)

    def getPackedArrayPtr(self):
        return Coin_SWIG_Python.SoDiffuseColorElement_getPackedArrayPtr(self)

# Register SoDiffuseColorElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoDiffuseColorElement_swigregister(SoDiffuseColorElement)

def SoDiffuseColorElement_getClassTypeId():
    return Coin_SWIG_Python.SoDiffuseColorElement_getClassTypeId()

def SoDiffuseColorElement_getClassStackIndex():
    return Coin_SWIG_Python.SoDiffuseColorElement_getClassStackIndex()

def SoDiffuseColorElement_createInstance():
    return Coin_SWIG_Python.SoDiffuseColorElement_createInstance()

def SoDiffuseColorElement_initClass():
    return Coin_SWIG_Python.SoDiffuseColorElement_initClass()

def SoDiffuseColorElement_set(state, node, numcolors, colors):
    return Coin_SWIG_Python.SoDiffuseColorElement_set(state, node, numcolors, colors)

def SoDiffuseColorElement_getInstance(state):
    return Coin_SWIG_Python.SoDiffuseColorElement_getInstance(state)

class SoGLClipPlaneElement(SoClipPlaneElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLClipPlaneElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLClipPlaneElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLClipPlaneElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLClipPlaneElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLClipPlaneElement_init(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLClipPlaneElement_pop(self, state, prevTopElement)

    @staticmethod
    def getMaxGLPlanes():
        return Coin_SWIG_Python.SoGLClipPlaneElement_getMaxGLPlanes()

# Register SoGLClipPlaneElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLClipPlaneElement_swigregister(SoGLClipPlaneElement)

def SoGLClipPlaneElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLClipPlaneElement_getClassTypeId()

def SoGLClipPlaneElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLClipPlaneElement_getClassStackIndex()

def SoGLClipPlaneElement_createInstance():
    return Coin_SWIG_Python.SoGLClipPlaneElement_createInstance()

def SoGLClipPlaneElement_initClass():
    return Coin_SWIG_Python.SoGLClipPlaneElement_initClass()

def SoGLClipPlaneElement_getMaxGLPlanes():
    return Coin_SWIG_Python.SoGLClipPlaneElement_getMaxGLPlanes()

class SoLightElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLightElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLightElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLightElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLightElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoLightElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoLightElement_push(self, state)

    @staticmethod
    def add(state, light):
        return Coin_SWIG_Python.SoLightElement_add(state, light)

    @staticmethod
    def getLights(state):
        return Coin_SWIG_Python.SoLightElement_getLights(state)

    @staticmethod
    def getMatrix(state, index):
        return Coin_SWIG_Python.SoLightElement_getMatrix(state, index)

# Register SoLightElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLightElement_swigregister(SoLightElement)

def SoLightElement_getClassTypeId():
    return Coin_SWIG_Python.SoLightElement_getClassTypeId()

def SoLightElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLightElement_getClassStackIndex()

def SoLightElement_createInstance():
    return Coin_SWIG_Python.SoLightElement_createInstance()

def SoLightElement_initClass():
    return Coin_SWIG_Python.SoLightElement_initClass()

def SoLightElement_add(state, light):
    return Coin_SWIG_Python.SoLightElement_add(state, light)

def SoLightElement_getLights(state):
    return Coin_SWIG_Python.SoLightElement_getLights(state)

def SoLightElement_getMatrix(state, index):
    return Coin_SWIG_Python.SoLightElement_getMatrix(state, index)

class SoGLModelMatrixElement(SoModelMatrixElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLModelMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLModelMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLModelMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLModelMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLModelMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLModelMatrixElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLModelMatrixElement_pop(self, state, prevTopElement)

# Register SoGLModelMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLModelMatrixElement_swigregister(SoGLModelMatrixElement)

def SoGLModelMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLModelMatrixElement_getClassTypeId()

def SoGLModelMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLModelMatrixElement_getClassStackIndex()

def SoGLModelMatrixElement_createInstance():
    return Coin_SWIG_Python.SoGLModelMatrixElement_createInstance()

def SoGLModelMatrixElement_initClass():
    return Coin_SWIG_Python.SoGLModelMatrixElement_initClass()

class SoProfileElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProfileElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoProfileElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoProfileElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProfileElement_initClass()
    START_FIRST = Coin_SWIG_Python.SoProfileElement_START_FIRST
    START_NEW = Coin_SWIG_Python.SoProfileElement_START_NEW
    ADD_TO_CURRENT = Coin_SWIG_Python.SoProfileElement_ADD_TO_CURRENT

    def init(self, state):
        return Coin_SWIG_Python.SoProfileElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoProfileElement_push(self, state)

    @staticmethod
    def add(state, profile):
        return Coin_SWIG_Python.SoProfileElement_add(state, profile)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoProfileElement_get(state)

# Register SoProfileElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoProfileElement_swigregister(SoProfileElement)

def SoProfileElement_getClassTypeId():
    return Coin_SWIG_Python.SoProfileElement_getClassTypeId()

def SoProfileElement_getClassStackIndex():
    return Coin_SWIG_Python.SoProfileElement_getClassStackIndex()

def SoProfileElement_createInstance():
    return Coin_SWIG_Python.SoProfileElement_createInstance()

def SoProfileElement_initClass():
    return Coin_SWIG_Python.SoProfileElement_initClass()

def SoProfileElement_add(state, profile):
    return Coin_SWIG_Python.SoProfileElement_add(state, profile)

def SoProfileElement_get(state):
    return Coin_SWIG_Python.SoProfileElement_get(state)

class SoTextureMatrixElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTextureMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoTextureMatrixElement_push(self, state)

    @staticmethod
    def makeIdentity(state, node):
        return Coin_SWIG_Python.SoTextureMatrixElement_makeIdentity(state, node)

    @staticmethod
    def set(state, node):
        return Coin_SWIG_Python.SoTextureMatrixElement_set(state, node)

    @staticmethod
    def mult(state, node):
        return Coin_SWIG_Python.SoTextureMatrixElement_mult(state, node)

    @staticmethod
    def translateBy(state, node, translation):
        return Coin_SWIG_Python.SoTextureMatrixElement_translateBy(state, node, translation)

    @staticmethod
    def rotateBy(state, node, rotation):
        return Coin_SWIG_Python.SoTextureMatrixElement_rotateBy(state, node, rotation)

    @staticmethod
    def scaleBy(state, node, scaleFactor):
        return Coin_SWIG_Python.SoTextureMatrixElement_scaleBy(state, node, scaleFactor)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTextureMatrixElement_get(state)

    @staticmethod
    def emptyMatrix(state):
        return Coin_SWIG_Python.SoTextureMatrixElement_emptyMatrix(state)

# Register SoTextureMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureMatrixElement_swigregister(SoTextureMatrixElement)

def SoTextureMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureMatrixElement_getClassTypeId()

def SoTextureMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureMatrixElement_getClassStackIndex()

def SoTextureMatrixElement_createInstance():
    return Coin_SWIG_Python.SoTextureMatrixElement_createInstance()

def SoTextureMatrixElement_initClass():
    return Coin_SWIG_Python.SoTextureMatrixElement_initClass()

def SoTextureMatrixElement_makeIdentity(state, node):
    return Coin_SWIG_Python.SoTextureMatrixElement_makeIdentity(state, node)

def SoTextureMatrixElement_set(state, node):
    return Coin_SWIG_Python.SoTextureMatrixElement_set(state, node)

def SoTextureMatrixElement_mult(state, node):
    return Coin_SWIG_Python.SoTextureMatrixElement_mult(state, node)

def SoTextureMatrixElement_translateBy(state, node, translation):
    return Coin_SWIG_Python.SoTextureMatrixElement_translateBy(state, node, translation)

def SoTextureMatrixElement_rotateBy(state, node, rotation):
    return Coin_SWIG_Python.SoTextureMatrixElement_rotateBy(state, node, rotation)

def SoTextureMatrixElement_scaleBy(state, node, scaleFactor):
    return Coin_SWIG_Python.SoTextureMatrixElement_scaleBy(state, node, scaleFactor)

def SoTextureMatrixElement_get(state):
    return Coin_SWIG_Python.SoTextureMatrixElement_get(state)

def SoTextureMatrixElement_emptyMatrix(state):
    return Coin_SWIG_Python.SoTextureMatrixElement_emptyMatrix(state)

class SoGLTextureMatrixElement(SoTextureMatrixElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLTextureMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLTextureMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLTextureMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLTextureMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_init(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_pop(self, state, prevTopElement)

    @staticmethod
    def setEltIdentity():
        return Coin_SWIG_Python.SoGLTextureMatrixElement_setEltIdentity()

    def setElt(self):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_setElt(self)

    def makeEltIdentity(self):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_makeEltIdentity(self)

    def multElt(self):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_multElt(self)

    def translateEltBy(self, translation):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_translateEltBy(self, translation)

    def rotateEltBy(self, translation):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_rotateEltBy(self, translation)

    def scaleEltBy(self, scaleFactor):
        return Coin_SWIG_Python.SoGLTextureMatrixElement_scaleEltBy(self, scaleFactor)

# Register SoGLTextureMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLTextureMatrixElement_swigregister(SoGLTextureMatrixElement)

def SoGLTextureMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLTextureMatrixElement_getClassTypeId()

def SoGLTextureMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLTextureMatrixElement_getClassStackIndex()

def SoGLTextureMatrixElement_createInstance():
    return Coin_SWIG_Python.SoGLTextureMatrixElement_createInstance()

def SoGLTextureMatrixElement_initClass():
    return Coin_SWIG_Python.SoGLTextureMatrixElement_initClass()

def SoGLTextureMatrixElement_setEltIdentity():
    return Coin_SWIG_Python.SoGLTextureMatrixElement_setEltIdentity()

class SoGLDrawStyleElement(SoDrawStyleElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLDrawStyleElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLDrawStyleElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLDrawStyleElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLDrawStyleElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLDrawStyleElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLDrawStyleElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLDrawStyleElement_pop(self, state, prevTopElement)

# Register SoGLDrawStyleElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLDrawStyleElement_swigregister(SoGLDrawStyleElement)

def SoGLDrawStyleElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLDrawStyleElement_getClassTypeId()

def SoGLDrawStyleElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLDrawStyleElement_getClassStackIndex()

def SoGLDrawStyleElement_createInstance():
    return Coin_SWIG_Python.SoGLDrawStyleElement_createInstance()

def SoGLDrawStyleElement_initClass():
    return Coin_SWIG_Python.SoGLDrawStyleElement_initClass()

class SoGLLightIdElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLLightIdElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLLightIdElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLLightIdElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLLightIdElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLLightIdElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLLightIdElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLLightIdElement_pop(self, state, prevTopElement)

    @staticmethod
    def increment(*args):
        return Coin_SWIG_Python.SoGLLightIdElement_increment(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoGLLightIdElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoGLLightIdElement_getDefault()

    @staticmethod
    def getMaxGLSources():
        return Coin_SWIG_Python.SoGLLightIdElement_getMaxGLSources()

# Register SoGLLightIdElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLLightIdElement_swigregister(SoGLLightIdElement)

def SoGLLightIdElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLLightIdElement_getClassTypeId()

def SoGLLightIdElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLLightIdElement_getClassStackIndex()

def SoGLLightIdElement_createInstance():
    return Coin_SWIG_Python.SoGLLightIdElement_createInstance()

def SoGLLightIdElement_initClass():
    return Coin_SWIG_Python.SoGLLightIdElement_initClass()

def SoGLLightIdElement_increment(*args):
    return Coin_SWIG_Python.SoGLLightIdElement_increment(*args)

def SoGLLightIdElement_get(state):
    return Coin_SWIG_Python.SoGLLightIdElement_get(state)

def SoGLLightIdElement_getDefault():
    return Coin_SWIG_Python.SoGLLightIdElement_getDefault()

def SoGLLightIdElement_getMaxGLSources():
    return Coin_SWIG_Python.SoGLLightIdElement_getMaxGLSources()

class SoTextureEnabledElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureEnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureEnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureEnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureEnabledElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTextureEnabledElement_init(self, state)

    @staticmethod
    def set(state, node, enabled):
        return Coin_SWIG_Python.SoTextureEnabledElement_set(state, node, enabled)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTextureEnabledElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoTextureEnabledElement_getDefault()

    def setElt(self, value):
        return Coin_SWIG_Python.SoTextureEnabledElement_setElt(self, value)

# Register SoTextureEnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureEnabledElement_swigregister(SoTextureEnabledElement)

def SoTextureEnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureEnabledElement_getClassTypeId()

def SoTextureEnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureEnabledElement_getClassStackIndex()

def SoTextureEnabledElement_createInstance():
    return Coin_SWIG_Python.SoTextureEnabledElement_createInstance()

def SoTextureEnabledElement_initClass():
    return Coin_SWIG_Python.SoTextureEnabledElement_initClass()

def SoTextureEnabledElement_set(state, node, enabled):
    return Coin_SWIG_Python.SoTextureEnabledElement_set(state, node, enabled)

def SoTextureEnabledElement_get(state):
    return Coin_SWIG_Python.SoTextureEnabledElement_get(state)

def SoTextureEnabledElement_getDefault():
    return Coin_SWIG_Python.SoTextureEnabledElement_getDefault()

class SoGLTextureEnabledElement(SoTextureEnabledElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLTextureEnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLTextureEnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLTextureEnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLTextureEnabledElement_initClass()
    DISABLED = Coin_SWIG_Python.SoGLTextureEnabledElement_DISABLED
    TEXTURE2D = Coin_SWIG_Python.SoGLTextureEnabledElement_TEXTURE2D
    RECTANGLE = Coin_SWIG_Python.SoGLTextureEnabledElement_RECTANGLE
    CUBEMAP = Coin_SWIG_Python.SoGLTextureEnabledElement_CUBEMAP

    def init(self, state):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_pop(self, state, prevTopElement)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoGLTextureEnabledElement_getDefault()

    def setElt(self, value):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_setElt(self, value)

    @staticmethod
    def enableRectangle(state, node):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_enableRectangle(state, node)

    @staticmethod
    def enableCubeMap(state, node):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_enableCubeMap(state, node)

    @staticmethod
    def getMode(state):
        return Coin_SWIG_Python.SoGLTextureEnabledElement_getMode(state)

# Register SoGLTextureEnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLTextureEnabledElement_swigregister(SoGLTextureEnabledElement)

def SoGLTextureEnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLTextureEnabledElement_getClassTypeId()

def SoGLTextureEnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLTextureEnabledElement_getClassStackIndex()

def SoGLTextureEnabledElement_createInstance():
    return Coin_SWIG_Python.SoGLTextureEnabledElement_createInstance()

def SoGLTextureEnabledElement_initClass():
    return Coin_SWIG_Python.SoGLTextureEnabledElement_initClass()

def SoGLTextureEnabledElement_set(*args):
    return Coin_SWIG_Python.SoGLTextureEnabledElement_set(*args)

def SoGLTextureEnabledElement_get(state):
    return Coin_SWIG_Python.SoGLTextureEnabledElement_get(state)

def SoGLTextureEnabledElement_getDefault():
    return Coin_SWIG_Python.SoGLTextureEnabledElement_getDefault()

def SoGLTextureEnabledElement_enableRectangle(state, node):
    return Coin_SWIG_Python.SoGLTextureEnabledElement_enableRectangle(state, node)

def SoGLTextureEnabledElement_enableCubeMap(state, node):
    return Coin_SWIG_Python.SoGLTextureEnabledElement_enableCubeMap(state, node)

def SoGLTextureEnabledElement_getMode(state):
    return Coin_SWIG_Python.SoGLTextureEnabledElement_getMode(state)

class SoTexture3EnabledElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTexture3EnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTexture3EnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTexture3EnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTexture3EnabledElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTexture3EnabledElement_init(self, state)

    @staticmethod
    def set(state, node, enabled):
        return Coin_SWIG_Python.SoTexture3EnabledElement_set(state, node, enabled)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTexture3EnabledElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoTexture3EnabledElement_getDefault()

    def setElt(self, value):
        return Coin_SWIG_Python.SoTexture3EnabledElement_setElt(self, value)

# Register SoTexture3EnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTexture3EnabledElement_swigregister(SoTexture3EnabledElement)

def SoTexture3EnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoTexture3EnabledElement_getClassTypeId()

def SoTexture3EnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTexture3EnabledElement_getClassStackIndex()

def SoTexture3EnabledElement_createInstance():
    return Coin_SWIG_Python.SoTexture3EnabledElement_createInstance()

def SoTexture3EnabledElement_initClass():
    return Coin_SWIG_Python.SoTexture3EnabledElement_initClass()

def SoTexture3EnabledElement_set(state, node, enabled):
    return Coin_SWIG_Python.SoTexture3EnabledElement_set(state, node, enabled)

def SoTexture3EnabledElement_get(state):
    return Coin_SWIG_Python.SoTexture3EnabledElement_get(state)

def SoTexture3EnabledElement_getDefault():
    return Coin_SWIG_Python.SoTexture3EnabledElement_getDefault()

class SoGLTexture3EnabledElement(SoTexture3EnabledElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_pop(self, state, prevTopElement)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_getDefault()

    def setElt(self, value):
        return Coin_SWIG_Python.SoGLTexture3EnabledElement_setElt(self, value)

# Register SoGLTexture3EnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLTexture3EnabledElement_swigregister(SoGLTexture3EnabledElement)

def SoGLTexture3EnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassTypeId()

def SoGLTexture3EnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassStackIndex()

def SoGLTexture3EnabledElement_createInstance():
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_createInstance()

def SoGLTexture3EnabledElement_initClass():
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_initClass()

def SoGLTexture3EnabledElement_set(*args):
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_set(*args)

def SoGLTexture3EnabledElement_get(state):
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_get(state)

def SoGLTexture3EnabledElement_getDefault():
    return Coin_SWIG_Python.SoGLTexture3EnabledElement_getDefault()

class SoLinePatternElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLinePatternElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLinePatternElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLinePatternElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLinePatternElement_initClass()
    CONTINUOUS = Coin_SWIG_Python.SoLinePatternElement_CONTINUOUS

    def init(self, state):
        return Coin_SWIG_Python.SoLinePatternElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoLinePatternElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoLinePatternElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoLinePatternElement_getDefault()

# Register SoLinePatternElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLinePatternElement_swigregister(SoLinePatternElement)

def SoLinePatternElement_getClassTypeId():
    return Coin_SWIG_Python.SoLinePatternElement_getClassTypeId()

def SoLinePatternElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLinePatternElement_getClassStackIndex()

def SoLinePatternElement_createInstance():
    return Coin_SWIG_Python.SoLinePatternElement_createInstance()

def SoLinePatternElement_initClass():
    return Coin_SWIG_Python.SoLinePatternElement_initClass()

def SoLinePatternElement_set(*args):
    return Coin_SWIG_Python.SoLinePatternElement_set(*args)

def SoLinePatternElement_get(state):
    return Coin_SWIG_Python.SoLinePatternElement_get(state)

def SoLinePatternElement_getDefault():
    return Coin_SWIG_Python.SoLinePatternElement_getDefault()

class SoGLLinePatternElement(SoLinePatternElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLLinePatternElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLLinePatternElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLLinePatternElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLLinePatternElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLLinePatternElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLLinePatternElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLLinePatternElement_pop(self, state, prevTopElement)

# Register SoGLLinePatternElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLLinePatternElement_swigregister(SoGLLinePatternElement)

def SoGLLinePatternElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLLinePatternElement_getClassTypeId()

def SoGLLinePatternElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLLinePatternElement_getClassStackIndex()

def SoGLLinePatternElement_createInstance():
    return Coin_SWIG_Python.SoGLLinePatternElement_createInstance()

def SoGLLinePatternElement_initClass():
    return Coin_SWIG_Python.SoGLLinePatternElement_initClass()

class SoSwitchElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSwitchElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoSwitchElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSwitchElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSwitchElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoSwitchElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoSwitchElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoSwitchElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoSwitchElement_getDefault()

# Register SoSwitchElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoSwitchElement_swigregister(SoSwitchElement)

def SoSwitchElement_getClassTypeId():
    return Coin_SWIG_Python.SoSwitchElement_getClassTypeId()

def SoSwitchElement_getClassStackIndex():
    return Coin_SWIG_Python.SoSwitchElement_getClassStackIndex()

def SoSwitchElement_createInstance():
    return Coin_SWIG_Python.SoSwitchElement_createInstance()

def SoSwitchElement_initClass():
    return Coin_SWIG_Python.SoSwitchElement_initClass()

def SoSwitchElement_set(*args):
    return Coin_SWIG_Python.SoSwitchElement_set(*args)

def SoSwitchElement_get(state):
    return Coin_SWIG_Python.SoSwitchElement_get(state)

def SoSwitchElement_getDefault():
    return Coin_SWIG_Python.SoSwitchElement_getDefault()

class SoTextOutlineEnabledElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_pop(self, state, prevTopElement)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoTextOutlineEnabledElement_getDefault()

# Register SoTextOutlineEnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextOutlineEnabledElement_swigregister(SoTextOutlineEnabledElement)

def SoTextOutlineEnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassTypeId()

def SoTextOutlineEnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassStackIndex()

def SoTextOutlineEnabledElement_createInstance():
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_createInstance()

def SoTextOutlineEnabledElement_initClass():
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_initClass()

def SoTextOutlineEnabledElement_set(*args):
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_set(*args)

def SoTextOutlineEnabledElement_get(state):
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_get(state)

def SoTextOutlineEnabledElement_getDefault():
    return Coin_SWIG_Python.SoTextOutlineEnabledElement_getDefault()

class SoUnitsElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoUnitsElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoUnitsElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoUnitsElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoUnitsElement_initClass()
    METERS = Coin_SWIG_Python.SoUnitsElement_METERS
    CENTIMETERS = Coin_SWIG_Python.SoUnitsElement_CENTIMETERS
    MILLIMETERS = Coin_SWIG_Python.SoUnitsElement_MILLIMETERS
    MICROMETERS = Coin_SWIG_Python.SoUnitsElement_MICROMETERS
    MICRONS = Coin_SWIG_Python.SoUnitsElement_MICRONS
    NANOMETERS = Coin_SWIG_Python.SoUnitsElement_NANOMETERS
    ANGSTROMS = Coin_SWIG_Python.SoUnitsElement_ANGSTROMS
    KILOMETERS = Coin_SWIG_Python.SoUnitsElement_KILOMETERS
    FEET = Coin_SWIG_Python.SoUnitsElement_FEET
    INCHES = Coin_SWIG_Python.SoUnitsElement_INCHES
    POINTS = Coin_SWIG_Python.SoUnitsElement_POINTS
    YARDS = Coin_SWIG_Python.SoUnitsElement_YARDS
    MILES = Coin_SWIG_Python.SoUnitsElement_MILES
    NAUTICAL_MILES = Coin_SWIG_Python.SoUnitsElement_NAUTICAL_MILES

    def init(self, state):
        return Coin_SWIG_Python.SoUnitsElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoUnitsElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoUnitsElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoUnitsElement_getDefault()

# Register SoUnitsElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoUnitsElement_swigregister(SoUnitsElement)

def SoUnitsElement_getClassTypeId():
    return Coin_SWIG_Python.SoUnitsElement_getClassTypeId()

def SoUnitsElement_getClassStackIndex():
    return Coin_SWIG_Python.SoUnitsElement_getClassStackIndex()

def SoUnitsElement_createInstance():
    return Coin_SWIG_Python.SoUnitsElement_createInstance()

def SoUnitsElement_initClass():
    return Coin_SWIG_Python.SoUnitsElement_initClass()

def SoUnitsElement_set(*args):
    return Coin_SWIG_Python.SoUnitsElement_set(*args)

def SoUnitsElement_get(state):
    return Coin_SWIG_Python.SoUnitsElement_get(state)

def SoUnitsElement_getDefault():
    return Coin_SWIG_Python.SoUnitsElement_getDefault()

class SoFocalDistanceElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFocalDistanceElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoFocalDistanceElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoFocalDistanceElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFocalDistanceElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoFocalDistanceElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoFocalDistanceElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoFocalDistanceElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoFocalDistanceElement_getDefault()

# Register SoFocalDistanceElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoFocalDistanceElement_swigregister(SoFocalDistanceElement)

def SoFocalDistanceElement_getClassTypeId():
    return Coin_SWIG_Python.SoFocalDistanceElement_getClassTypeId()

def SoFocalDistanceElement_getClassStackIndex():
    return Coin_SWIG_Python.SoFocalDistanceElement_getClassStackIndex()

def SoFocalDistanceElement_createInstance():
    return Coin_SWIG_Python.SoFocalDistanceElement_createInstance()

def SoFocalDistanceElement_initClass():
    return Coin_SWIG_Python.SoFocalDistanceElement_initClass()

def SoFocalDistanceElement_set(*args):
    return Coin_SWIG_Python.SoFocalDistanceElement_set(*args)

def SoFocalDistanceElement_get(state):
    return Coin_SWIG_Python.SoFocalDistanceElement_get(state)

def SoFocalDistanceElement_getDefault():
    return Coin_SWIG_Python.SoFocalDistanceElement_getDefault()

class SoFontSizeElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFontSizeElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoFontSizeElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoFontSizeElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFontSizeElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoFontSizeElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoFontSizeElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoFontSizeElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoFontSizeElement_getDefault()

# Register SoFontSizeElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoFontSizeElement_swigregister(SoFontSizeElement)

def SoFontSizeElement_getClassTypeId():
    return Coin_SWIG_Python.SoFontSizeElement_getClassTypeId()

def SoFontSizeElement_getClassStackIndex():
    return Coin_SWIG_Python.SoFontSizeElement_getClassStackIndex()

def SoFontSizeElement_createInstance():
    return Coin_SWIG_Python.SoFontSizeElement_createInstance()

def SoFontSizeElement_initClass():
    return Coin_SWIG_Python.SoFontSizeElement_initClass()

def SoFontSizeElement_set(*args):
    return Coin_SWIG_Python.SoFontSizeElement_set(*args)

def SoFontSizeElement_get(state):
    return Coin_SWIG_Python.SoFontSizeElement_get(state)

def SoFontSizeElement_getDefault():
    return Coin_SWIG_Python.SoFontSizeElement_getDefault()

class SoLineWidthElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLineWidthElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLineWidthElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLineWidthElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLineWidthElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoLineWidthElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoLineWidthElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoLineWidthElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoLineWidthElement_getDefault()

# Register SoLineWidthElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLineWidthElement_swigregister(SoLineWidthElement)

def SoLineWidthElement_getClassTypeId():
    return Coin_SWIG_Python.SoLineWidthElement_getClassTypeId()

def SoLineWidthElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLineWidthElement_getClassStackIndex()

def SoLineWidthElement_createInstance():
    return Coin_SWIG_Python.SoLineWidthElement_createInstance()

def SoLineWidthElement_initClass():
    return Coin_SWIG_Python.SoLineWidthElement_initClass()

def SoLineWidthElement_set(*args):
    return Coin_SWIG_Python.SoLineWidthElement_set(*args)

def SoLineWidthElement_get(state):
    return Coin_SWIG_Python.SoLineWidthElement_get(state)

def SoLineWidthElement_getDefault():
    return Coin_SWIG_Python.SoLineWidthElement_getDefault()

class SoGLLineWidthElement(SoLineWidthElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLLineWidthElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLLineWidthElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLLineWidthElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLLineWidthElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLLineWidthElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLLineWidthElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLLineWidthElement_pop(self, state, prevTopElement)

# Register SoGLLineWidthElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLLineWidthElement_swigregister(SoGLLineWidthElement)

def SoGLLineWidthElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLLineWidthElement_getClassTypeId()

def SoGLLineWidthElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLLineWidthElement_getClassStackIndex()

def SoGLLineWidthElement_createInstance():
    return Coin_SWIG_Python.SoGLLineWidthElement_createInstance()

def SoGLLineWidthElement_initClass():
    return Coin_SWIG_Python.SoGLLineWidthElement_initClass()

class SoPointSizeElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPointSizeElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoPointSizeElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoPointSizeElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPointSizeElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoPointSizeElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoPointSizeElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoPointSizeElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoPointSizeElement_getDefault()

# Register SoPointSizeElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoPointSizeElement_swigregister(SoPointSizeElement)

def SoPointSizeElement_getClassTypeId():
    return Coin_SWIG_Python.SoPointSizeElement_getClassTypeId()

def SoPointSizeElement_getClassStackIndex():
    return Coin_SWIG_Python.SoPointSizeElement_getClassStackIndex()

def SoPointSizeElement_createInstance():
    return Coin_SWIG_Python.SoPointSizeElement_createInstance()

def SoPointSizeElement_initClass():
    return Coin_SWIG_Python.SoPointSizeElement_initClass()

def SoPointSizeElement_set(*args):
    return Coin_SWIG_Python.SoPointSizeElement_set(*args)

def SoPointSizeElement_get(state):
    return Coin_SWIG_Python.SoPointSizeElement_get(state)

def SoPointSizeElement_getDefault():
    return Coin_SWIG_Python.SoPointSizeElement_getDefault()

class SoGLPointSizeElement(SoPointSizeElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLPointSizeElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLPointSizeElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLPointSizeElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLPointSizeElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLPointSizeElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLPointSizeElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLPointSizeElement_pop(self, state, prevTopElement)

# Register SoGLPointSizeElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLPointSizeElement_swigregister(SoGLPointSizeElement)

def SoGLPointSizeElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLPointSizeElement_getClassTypeId()

def SoGLPointSizeElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLPointSizeElement_getClassStackIndex()

def SoGLPointSizeElement_createInstance():
    return Coin_SWIG_Python.SoGLPointSizeElement_createInstance()

def SoGLPointSizeElement_initClass():
    return Coin_SWIG_Python.SoGLPointSizeElement_initClass()

class SoTextureQualityElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureQualityElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureQualityElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureQualityElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureQualityElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTextureQualityElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoTextureQualityElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTextureQualityElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoTextureQualityElement_getDefault()

# Register SoTextureQualityElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureQualityElement_swigregister(SoTextureQualityElement)

def SoTextureQualityElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureQualityElement_getClassTypeId()

def SoTextureQualityElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureQualityElement_getClassStackIndex()

def SoTextureQualityElement_createInstance():
    return Coin_SWIG_Python.SoTextureQualityElement_createInstance()

def SoTextureQualityElement_initClass():
    return Coin_SWIG_Python.SoTextureQualityElement_initClass()

def SoTextureQualityElement_set(*args):
    return Coin_SWIG_Python.SoTextureQualityElement_set(*args)

def SoTextureQualityElement_get(state):
    return Coin_SWIG_Python.SoTextureQualityElement_get(state)

def SoTextureQualityElement_getDefault():
    return Coin_SWIG_Python.SoTextureQualityElement_getDefault()

class SoTextureOverrideElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureOverrideElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureOverrideElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureOverrideElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureOverrideElement_initClass()

    def matches(self, element):
        return Coin_SWIG_Python.SoTextureOverrideElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoTextureOverrideElement_copyMatchInfo(self)

    def init(self, state):
        return Coin_SWIG_Python.SoTextureOverrideElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoTextureOverrideElement_push(self, state)

    @staticmethod
    def getQualityOverride(state):
        return Coin_SWIG_Python.SoTextureOverrideElement_getQualityOverride(state)

    @staticmethod
    def getImageOverride(state):
        return Coin_SWIG_Python.SoTextureOverrideElement_getImageOverride(state)

    @staticmethod
    def getBumpMapOverride(state):
        return Coin_SWIG_Python.SoTextureOverrideElement_getBumpMapOverride(state)

    @staticmethod
    def setQualityOverride(state, value):
        return Coin_SWIG_Python.SoTextureOverrideElement_setQualityOverride(state, value)

    @staticmethod
    def setImageOverride(state, value):
        return Coin_SWIG_Python.SoTextureOverrideElement_setImageOverride(state, value)

    @staticmethod
    def setBumpMapOverride(state, value):
        return Coin_SWIG_Python.SoTextureOverrideElement_setBumpMapOverride(state, value)

    def output(self, fp):
        return Coin_SWIG_Python.SoTextureOverrideElement_output(self, fp)

# Register SoTextureOverrideElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureOverrideElement_swigregister(SoTextureOverrideElement)

def SoTextureOverrideElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureOverrideElement_getClassTypeId()

def SoTextureOverrideElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureOverrideElement_getClassStackIndex()

def SoTextureOverrideElement_createInstance():
    return Coin_SWIG_Python.SoTextureOverrideElement_createInstance()

def SoTextureOverrideElement_initClass():
    return Coin_SWIG_Python.SoTextureOverrideElement_initClass()

def SoTextureOverrideElement_getQualityOverride(state):
    return Coin_SWIG_Python.SoTextureOverrideElement_getQualityOverride(state)

def SoTextureOverrideElement_getImageOverride(state):
    return Coin_SWIG_Python.SoTextureOverrideElement_getImageOverride(state)

def SoTextureOverrideElement_getBumpMapOverride(state):
    return Coin_SWIG_Python.SoTextureOverrideElement_getBumpMapOverride(state)

def SoTextureOverrideElement_setQualityOverride(state, value):
    return Coin_SWIG_Python.SoTextureOverrideElement_setQualityOverride(state, value)

def SoTextureOverrideElement_setImageOverride(state, value):
    return Coin_SWIG_Python.SoTextureOverrideElement_setImageOverride(state, value)

def SoTextureOverrideElement_setBumpMapOverride(state, value):
    return Coin_SWIG_Python.SoTextureOverrideElement_setBumpMapOverride(state, value)

class SoGLRenderPassElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLRenderPassElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLRenderPassElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLRenderPassElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLRenderPassElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLRenderPassElement_init(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoGLRenderPassElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoGLRenderPassElement_copyMatchInfo(self)

    @staticmethod
    def set(state, _pass):
        return Coin_SWIG_Python.SoGLRenderPassElement_set(state, _pass)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoGLRenderPassElement_get(state)

# Register SoGLRenderPassElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLRenderPassElement_swigregister(SoGLRenderPassElement)

def SoGLRenderPassElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLRenderPassElement_getClassTypeId()

def SoGLRenderPassElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLRenderPassElement_getClassStackIndex()

def SoGLRenderPassElement_createInstance():
    return Coin_SWIG_Python.SoGLRenderPassElement_createInstance()

def SoGLRenderPassElement_initClass():
    return Coin_SWIG_Python.SoGLRenderPassElement_initClass()

def SoGLRenderPassElement_set(state, _pass):
    return Coin_SWIG_Python.SoGLRenderPassElement_set(state, _pass)

def SoGLRenderPassElement_get(state):
    return Coin_SWIG_Python.SoGLRenderPassElement_get(state)

class SoGLUpdateAreaElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLUpdateAreaElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLUpdateAreaElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLUpdateAreaElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLUpdateAreaElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_pop(self, state, prevTopElement)

    def matches(self, element):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_copyMatchInfo(self)

    @staticmethod
    def set(state, origin, size):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_set(state, origin, size)

    @staticmethod
    def get(state, origin, size):
        return Coin_SWIG_Python.SoGLUpdateAreaElement_get(state, origin, size)

    @staticmethod
    def getDefaultOrigin():
        return Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultOrigin()

    @staticmethod
    def getDefaultSize():
        return Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultSize()

# Register SoGLUpdateAreaElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLUpdateAreaElement_swigregister(SoGLUpdateAreaElement)

def SoGLUpdateAreaElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLUpdateAreaElement_getClassTypeId()

def SoGLUpdateAreaElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLUpdateAreaElement_getClassStackIndex()

def SoGLUpdateAreaElement_createInstance():
    return Coin_SWIG_Python.SoGLUpdateAreaElement_createInstance()

def SoGLUpdateAreaElement_initClass():
    return Coin_SWIG_Python.SoGLUpdateAreaElement_initClass()

def SoGLUpdateAreaElement_set(state, origin, size):
    return Coin_SWIG_Python.SoGLUpdateAreaElement_set(state, origin, size)

def SoGLUpdateAreaElement_get(state, origin, size):
    return Coin_SWIG_Python.SoGLUpdateAreaElement_get(state, origin, size)

def SoGLUpdateAreaElement_getDefaultOrigin():
    return Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultOrigin()

def SoGLUpdateAreaElement_getDefaultSize():
    return Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultSize()

class SoLocalBBoxMatrixElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_push(self, state)

    @staticmethod
    def makeIdentity(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_makeIdentity(state)

    @staticmethod
    def set(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_set(state)

    @staticmethod
    def mult(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_mult(state)

    @staticmethod
    def translateBy(state, translation):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_translateBy(state, translation)

    @staticmethod
    def rotateBy(state, rotation):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_rotateBy(state, rotation)

    @staticmethod
    def scaleBy(state, scaleFactor):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_scaleBy(state, scaleFactor)

    @staticmethod
    def pushMatrix(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_pushMatrix(state)

    @staticmethod
    def popMatrix(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_popMatrix(state)

    @staticmethod
    def resetAll(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_resetAll(state)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_get(state)

    def matches(self, element):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoLocalBBoxMatrixElement_copyMatchInfo(self)

# Register SoLocalBBoxMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLocalBBoxMatrixElement_swigregister(SoLocalBBoxMatrixElement)

def SoLocalBBoxMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassTypeId()

def SoLocalBBoxMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassStackIndex()

def SoLocalBBoxMatrixElement_createInstance():
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_createInstance()

def SoLocalBBoxMatrixElement_initClass():
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_initClass()

def SoLocalBBoxMatrixElement_makeIdentity(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_makeIdentity(state)

def SoLocalBBoxMatrixElement_set(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_set(state)

def SoLocalBBoxMatrixElement_mult(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_mult(state)

def SoLocalBBoxMatrixElement_translateBy(state, translation):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_translateBy(state, translation)

def SoLocalBBoxMatrixElement_rotateBy(state, rotation):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_rotateBy(state, rotation)

def SoLocalBBoxMatrixElement_scaleBy(state, scaleFactor):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_scaleBy(state, scaleFactor)

def SoLocalBBoxMatrixElement_pushMatrix(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_pushMatrix(state)

def SoLocalBBoxMatrixElement_popMatrix(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_popMatrix(state)

def SoLocalBBoxMatrixElement_resetAll(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_resetAll(state)

def SoLocalBBoxMatrixElement_get(state):
    return Coin_SWIG_Python.SoLocalBBoxMatrixElement_get(state)

class SoOverrideElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoOverrideElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoOverrideElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoOverrideElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoOverrideElement_initClass()
    AMBIENT_COLOR = Coin_SWIG_Python.SoOverrideElement_AMBIENT_COLOR
    COLOR_INDEX = Coin_SWIG_Python.SoOverrideElement_COLOR_INDEX
    COMPLEXITY = Coin_SWIG_Python.SoOverrideElement_COMPLEXITY
    COMPLEXITY_TYPE = Coin_SWIG_Python.SoOverrideElement_COMPLEXITY_TYPE
    CREASE_ANGLE = Coin_SWIG_Python.SoOverrideElement_CREASE_ANGLE
    DIFFUSE_COLOR = Coin_SWIG_Python.SoOverrideElement_DIFFUSE_COLOR
    DRAW_STYLE = Coin_SWIG_Python.SoOverrideElement_DRAW_STYLE
    EMISSIVE_COLOR = Coin_SWIG_Python.SoOverrideElement_EMISSIVE_COLOR
    FONT_NAME = Coin_SWIG_Python.SoOverrideElement_FONT_NAME
    FONT_SIZE = Coin_SWIG_Python.SoOverrideElement_FONT_SIZE
    LIGHT_MODEL = Coin_SWIG_Python.SoOverrideElement_LIGHT_MODEL
    LINE_PATTERN = Coin_SWIG_Python.SoOverrideElement_LINE_PATTERN
    LINE_WIDTH = Coin_SWIG_Python.SoOverrideElement_LINE_WIDTH
    MATERIAL_BINDING = Coin_SWIG_Python.SoOverrideElement_MATERIAL_BINDING
    POINT_SIZE = Coin_SWIG_Python.SoOverrideElement_POINT_SIZE
    PICK_STYLE = Coin_SWIG_Python.SoOverrideElement_PICK_STYLE
    SHAPE_HINTS = Coin_SWIG_Python.SoOverrideElement_SHAPE_HINTS
    SHININESS = Coin_SWIG_Python.SoOverrideElement_SHININESS
    SPECULAR_COLOR = Coin_SWIG_Python.SoOverrideElement_SPECULAR_COLOR
    POLYGON_OFFSET = Coin_SWIG_Python.SoOverrideElement_POLYGON_OFFSET
    TRANSPARENCY = Coin_SWIG_Python.SoOverrideElement_TRANSPARENCY
    TRANSPARENCY_TYPE = Coin_SWIG_Python.SoOverrideElement_TRANSPARENCY_TYPE
    NORMAL_VECTOR = Coin_SWIG_Python.SoOverrideElement_NORMAL_VECTOR
    NORMAL_BINDING = Coin_SWIG_Python.SoOverrideElement_NORMAL_BINDING

    def init(self, state):
        return Coin_SWIG_Python.SoOverrideElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoOverrideElement_push(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoOverrideElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoOverrideElement_copyMatchInfo(self)

    @staticmethod
    def getFlags(state):
        return Coin_SWIG_Python.SoOverrideElement_getFlags(state)

    @staticmethod
    def getAmbientColorOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getAmbientColorOverride(state)

    @staticmethod
    def getColorIndexOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getColorIndexOverride(state)

    @staticmethod
    def getComplexityOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getComplexityOverride(state)

    @staticmethod
    def getComplexityTypeOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getComplexityTypeOverride(state)

    @staticmethod
    def getCreaseAngleOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getCreaseAngleOverride(state)

    @staticmethod
    def getDiffuseColorOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getDiffuseColorOverride(state)

    @staticmethod
    def getDrawStyleOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getDrawStyleOverride(state)

    @staticmethod
    def getEmissiveColorOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getEmissiveColorOverride(state)

    @staticmethod
    def getFontNameOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getFontNameOverride(state)

    @staticmethod
    def getFontSizeOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getFontSizeOverride(state)

    @staticmethod
    def getLightModelOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getLightModelOverride(state)

    @staticmethod
    def getLinePatternOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getLinePatternOverride(state)

    @staticmethod
    def getLineWidthOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getLineWidthOverride(state)

    @staticmethod
    def getMaterialBindingOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getMaterialBindingOverride(state)

    @staticmethod
    def getPickStyleOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getPickStyleOverride(state)

    @staticmethod
    def getPointSizeOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getPointSizeOverride(state)

    @staticmethod
    def getPolygonOffsetOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getPolygonOffsetOverride(state)

    @staticmethod
    def getShapeHintsOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getShapeHintsOverride(state)

    @staticmethod
    def getShininessOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getShininessOverride(state)

    @staticmethod
    def getSpecularColorOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getSpecularColorOverride(state)

    @staticmethod
    def getTransparencyOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getTransparencyOverride(state)

    @staticmethod
    def getTransparencyTypeOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getTransparencyTypeOverride(state)

    @staticmethod
    def getNormalVectorOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getNormalVectorOverride(state)

    @staticmethod
    def getNormalBindingOverride(state):
        return Coin_SWIG_Python.SoOverrideElement_getNormalBindingOverride(state)

    @staticmethod
    def setAmbientColorOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setAmbientColorOverride(state, node, override)

    @staticmethod
    def setColorIndexOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setColorIndexOverride(state, node, override)

    @staticmethod
    def setComplexityOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setComplexityOverride(state, node, override)

    @staticmethod
    def setComplexityTypeOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setComplexityTypeOverride(state, node, override)

    @staticmethod
    def setCreaseAngleOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setCreaseAngleOverride(state, node, override)

    @staticmethod
    def setDiffuseColorOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setDiffuseColorOverride(state, node, override)

    @staticmethod
    def setDrawStyleOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setDrawStyleOverride(state, node, override)

    @staticmethod
    def setEmissiveColorOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setEmissiveColorOverride(state, node, override)

    @staticmethod
    def setFontNameOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setFontNameOverride(state, node, override)

    @staticmethod
    def setFontSizeOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setFontSizeOverride(state, node, override)

    @staticmethod
    def setLightModelOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setLightModelOverride(state, node, override)

    @staticmethod
    def setLinePatternOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setLinePatternOverride(state, node, override)

    @staticmethod
    def setLineWidthOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setLineWidthOverride(state, node, override)

    @staticmethod
    def setMaterialBindingOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setMaterialBindingOverride(state, node, override)

    @staticmethod
    def setPickStyleOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setPickStyleOverride(state, node, override)

    @staticmethod
    def setPointSizeOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setPointSizeOverride(state, node, override)

    @staticmethod
    def setPolygonOffsetOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setPolygonOffsetOverride(state, node, override)

    @staticmethod
    def setShapeHintsOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setShapeHintsOverride(state, node, override)

    @staticmethod
    def setShininessOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setShininessOverride(state, node, override)

    @staticmethod
    def setSpecularColorOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setSpecularColorOverride(state, node, override)

    @staticmethod
    def setTransparencyOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setTransparencyOverride(state, node, override)

    @staticmethod
    def setTransparencyTypeOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setTransparencyTypeOverride(state, node, override)

    @staticmethod
    def setNormalVectorOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setNormalVectorOverride(state, node, override)

    @staticmethod
    def setNormalBindingOverride(state, node, override):
        return Coin_SWIG_Python.SoOverrideElement_setNormalBindingOverride(state, node, override)

    def output(self, file):
        return Coin_SWIG_Python.SoOverrideElement_output(self, file)

# Register SoOverrideElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoOverrideElement_swigregister(SoOverrideElement)

def SoOverrideElement_getClassTypeId():
    return Coin_SWIG_Python.SoOverrideElement_getClassTypeId()

def SoOverrideElement_getClassStackIndex():
    return Coin_SWIG_Python.SoOverrideElement_getClassStackIndex()

def SoOverrideElement_createInstance():
    return Coin_SWIG_Python.SoOverrideElement_createInstance()

def SoOverrideElement_initClass():
    return Coin_SWIG_Python.SoOverrideElement_initClass()

def SoOverrideElement_getFlags(state):
    return Coin_SWIG_Python.SoOverrideElement_getFlags(state)

def SoOverrideElement_getAmbientColorOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getAmbientColorOverride(state)

def SoOverrideElement_getColorIndexOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getColorIndexOverride(state)

def SoOverrideElement_getComplexityOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getComplexityOverride(state)

def SoOverrideElement_getComplexityTypeOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getComplexityTypeOverride(state)

def SoOverrideElement_getCreaseAngleOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getCreaseAngleOverride(state)

def SoOverrideElement_getDiffuseColorOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getDiffuseColorOverride(state)

def SoOverrideElement_getDrawStyleOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getDrawStyleOverride(state)

def SoOverrideElement_getEmissiveColorOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getEmissiveColorOverride(state)

def SoOverrideElement_getFontNameOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getFontNameOverride(state)

def SoOverrideElement_getFontSizeOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getFontSizeOverride(state)

def SoOverrideElement_getLightModelOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getLightModelOverride(state)

def SoOverrideElement_getLinePatternOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getLinePatternOverride(state)

def SoOverrideElement_getLineWidthOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getLineWidthOverride(state)

def SoOverrideElement_getMaterialBindingOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getMaterialBindingOverride(state)

def SoOverrideElement_getPickStyleOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getPickStyleOverride(state)

def SoOverrideElement_getPointSizeOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getPointSizeOverride(state)

def SoOverrideElement_getPolygonOffsetOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getPolygonOffsetOverride(state)

def SoOverrideElement_getShapeHintsOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getShapeHintsOverride(state)

def SoOverrideElement_getShininessOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getShininessOverride(state)

def SoOverrideElement_getSpecularColorOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getSpecularColorOverride(state)

def SoOverrideElement_getTransparencyOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getTransparencyOverride(state)

def SoOverrideElement_getTransparencyTypeOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getTransparencyTypeOverride(state)

def SoOverrideElement_getNormalVectorOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getNormalVectorOverride(state)

def SoOverrideElement_getNormalBindingOverride(state):
    return Coin_SWIG_Python.SoOverrideElement_getNormalBindingOverride(state)

def SoOverrideElement_setAmbientColorOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setAmbientColorOverride(state, node, override)

def SoOverrideElement_setColorIndexOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setColorIndexOverride(state, node, override)

def SoOverrideElement_setComplexityOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setComplexityOverride(state, node, override)

def SoOverrideElement_setComplexityTypeOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setComplexityTypeOverride(state, node, override)

def SoOverrideElement_setCreaseAngleOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setCreaseAngleOverride(state, node, override)

def SoOverrideElement_setDiffuseColorOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setDiffuseColorOverride(state, node, override)

def SoOverrideElement_setDrawStyleOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setDrawStyleOverride(state, node, override)

def SoOverrideElement_setEmissiveColorOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setEmissiveColorOverride(state, node, override)

def SoOverrideElement_setFontNameOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setFontNameOverride(state, node, override)

def SoOverrideElement_setFontSizeOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setFontSizeOverride(state, node, override)

def SoOverrideElement_setLightModelOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setLightModelOverride(state, node, override)

def SoOverrideElement_setLinePatternOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setLinePatternOverride(state, node, override)

def SoOverrideElement_setLineWidthOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setLineWidthOverride(state, node, override)

def SoOverrideElement_setMaterialBindingOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setMaterialBindingOverride(state, node, override)

def SoOverrideElement_setPickStyleOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setPickStyleOverride(state, node, override)

def SoOverrideElement_setPointSizeOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setPointSizeOverride(state, node, override)

def SoOverrideElement_setPolygonOffsetOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setPolygonOffsetOverride(state, node, override)

def SoOverrideElement_setShapeHintsOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setShapeHintsOverride(state, node, override)

def SoOverrideElement_setShininessOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setShininessOverride(state, node, override)

def SoOverrideElement_setSpecularColorOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setSpecularColorOverride(state, node, override)

def SoOverrideElement_setTransparencyOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setTransparencyOverride(state, node, override)

def SoOverrideElement_setTransparencyTypeOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setTransparencyTypeOverride(state, node, override)

def SoOverrideElement_setNormalVectorOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setNormalVectorOverride(state, node, override)

def SoOverrideElement_setNormalBindingOverride(state, node, override):
    return Coin_SWIG_Python.SoOverrideElement_setNormalBindingOverride(state, node, override)

class SoPickRayElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPickRayElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoPickRayElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoPickRayElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPickRayElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoPickRayElement_init(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoPickRayElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoPickRayElement_copyMatchInfo(self)

    @staticmethod
    def set(state, volume):
        return Coin_SWIG_Python.SoPickRayElement_set(state, volume)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoPickRayElement_get(state)

# Register SoPickRayElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoPickRayElement_swigregister(SoPickRayElement)

def SoPickRayElement_getClassTypeId():
    return Coin_SWIG_Python.SoPickRayElement_getClassTypeId()

def SoPickRayElement_getClassStackIndex():
    return Coin_SWIG_Python.SoPickRayElement_getClassStackIndex()

def SoPickRayElement_createInstance():
    return Coin_SWIG_Python.SoPickRayElement_createInstance()

def SoPickRayElement_initClass():
    return Coin_SWIG_Python.SoPickRayElement_initClass()

def SoPickRayElement_set(state, volume):
    return Coin_SWIG_Python.SoPickRayElement_set(state, volume)

def SoPickRayElement_get(state):
    return Coin_SWIG_Python.SoPickRayElement_get(state)

class SoGLCoordinateElement(SoCoordinateElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLCoordinateElement_initClass()

    def getPtr3(self):
        return Coin_SWIG_Python.SoGLCoordinateElement_getPtr3(self)

    def getPtr4(self):
        return Coin_SWIG_Python.SoGLCoordinateElement_getPtr4(self)

    def send(self, index):
        return Coin_SWIG_Python.SoGLCoordinateElement_send(self, index)

# Register SoGLCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLCoordinateElement_swigregister(SoGLCoordinateElement)

def SoGLCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLCoordinateElement_getClassTypeId()

def SoGLCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLCoordinateElement_getClassStackIndex()

def SoGLCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoGLCoordinateElement_createInstance()

def SoGLCoordinateElement_initClass():
    return Coin_SWIG_Python.SoGLCoordinateElement_initClass()

class SoEnvironmentElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoEnvironmentElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoEnvironmentElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoEnvironmentElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoEnvironmentElement_initClass()
    NONE = Coin_SWIG_Python.SoEnvironmentElement_NONE
    HAZE = Coin_SWIG_Python.SoEnvironmentElement_HAZE
    FOG = Coin_SWIG_Python.SoEnvironmentElement_FOG
    SMOKE = Coin_SWIG_Python.SoEnvironmentElement_SMOKE

    def init(self, state):
        return Coin_SWIG_Python.SoEnvironmentElement_init(self, state)

    @staticmethod
    def set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart=0.0):
        return Coin_SWIG_Python.SoEnvironmentElement_set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

    @staticmethod
    def get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart):
        return Coin_SWIG_Python.SoEnvironmentElement_get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

    @staticmethod
    def getAmbientIntensity(state):
        return Coin_SWIG_Python.SoEnvironmentElement_getAmbientIntensity(state)

    @staticmethod
    def getFogVisibility(state):
        return Coin_SWIG_Python.SoEnvironmentElement_getFogVisibility(state)

    @staticmethod
    def getLightAttenuation(state):
        return Coin_SWIG_Python.SoEnvironmentElement_getLightAttenuation(state)

    @staticmethod
    def getAmbientColor(state):
        return Coin_SWIG_Python.SoEnvironmentElement_getAmbientColor(state)

    @staticmethod
    def getFogColor(state):
        return Coin_SWIG_Python.SoEnvironmentElement_getFogColor(state)

    @staticmethod
    def getFogType(state):
        return Coin_SWIG_Python.SoEnvironmentElement_getFogType(state)

    @staticmethod
    def getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear):
        return Coin_SWIG_Python.SoEnvironmentElement_getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear)

    def output(self, file):
        return Coin_SWIG_Python.SoEnvironmentElement_output(self, file)

# Register SoEnvironmentElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoEnvironmentElement_swigregister(SoEnvironmentElement)

def SoEnvironmentElement_getClassTypeId():
    return Coin_SWIG_Python.SoEnvironmentElement_getClassTypeId()

def SoEnvironmentElement_getClassStackIndex():
    return Coin_SWIG_Python.SoEnvironmentElement_getClassStackIndex()

def SoEnvironmentElement_createInstance():
    return Coin_SWIG_Python.SoEnvironmentElement_createInstance()

def SoEnvironmentElement_initClass():
    return Coin_SWIG_Python.SoEnvironmentElement_initClass()

def SoEnvironmentElement_set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart=0.0):
    return Coin_SWIG_Python.SoEnvironmentElement_set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

def SoEnvironmentElement_get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart):
    return Coin_SWIG_Python.SoEnvironmentElement_get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart)

def SoEnvironmentElement_getAmbientIntensity(state):
    return Coin_SWIG_Python.SoEnvironmentElement_getAmbientIntensity(state)

def SoEnvironmentElement_getFogVisibility(state):
    return Coin_SWIG_Python.SoEnvironmentElement_getFogVisibility(state)

def SoEnvironmentElement_getLightAttenuation(state):
    return Coin_SWIG_Python.SoEnvironmentElement_getLightAttenuation(state)

def SoEnvironmentElement_getAmbientColor(state):
    return Coin_SWIG_Python.SoEnvironmentElement_getAmbientColor(state)

def SoEnvironmentElement_getFogColor(state):
    return Coin_SWIG_Python.SoEnvironmentElement_getFogColor(state)

def SoEnvironmentElement_getFogType(state):
    return Coin_SWIG_Python.SoEnvironmentElement_getFogType(state)

def SoEnvironmentElement_getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear):
    return Coin_SWIG_Python.SoEnvironmentElement_getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear)

class SoGLEnvironmentElement(SoEnvironmentElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLEnvironmentElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLEnvironmentElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLEnvironmentElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLEnvironmentElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLEnvironmentElement_init(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLEnvironmentElement_pop(self, state, prevTopElement)

# Register SoGLEnvironmentElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLEnvironmentElement_swigregister(SoGLEnvironmentElement)

def SoGLEnvironmentElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLEnvironmentElement_getClassTypeId()

def SoGLEnvironmentElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLEnvironmentElement_getClassStackIndex()

def SoGLEnvironmentElement_createInstance():
    return Coin_SWIG_Python.SoGLEnvironmentElement_createInstance()

def SoGLEnvironmentElement_initClass():
    return Coin_SWIG_Python.SoGLEnvironmentElement_initClass()

class SoFontNameElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFontNameElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoFontNameElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoFontNameElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFontNameElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoFontNameElement_init(self, state)

    @staticmethod
    def set(state, node, fontName):
        return Coin_SWIG_Python.SoFontNameElement_set(state, node, fontName)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoFontNameElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoFontNameElement_getDefault()

    def matches(self, element):
        return Coin_SWIG_Python.SoFontNameElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoFontNameElement_copyMatchInfo(self)

    def output(self, file):
        return Coin_SWIG_Python.SoFontNameElement_output(self, file)

# Register SoFontNameElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoFontNameElement_swigregister(SoFontNameElement)

def SoFontNameElement_getClassTypeId():
    return Coin_SWIG_Python.SoFontNameElement_getClassTypeId()

def SoFontNameElement_getClassStackIndex():
    return Coin_SWIG_Python.SoFontNameElement_getClassStackIndex()

def SoFontNameElement_createInstance():
    return Coin_SWIG_Python.SoFontNameElement_createInstance()

def SoFontNameElement_initClass():
    return Coin_SWIG_Python.SoFontNameElement_initClass()

def SoFontNameElement_set(state, node, fontName):
    return Coin_SWIG_Python.SoFontNameElement_set(state, node, fontName)

def SoFontNameElement_get(state):
    return Coin_SWIG_Python.SoFontNameElement_get(state)

def SoFontNameElement_getDefault():
    return Coin_SWIG_Python.SoFontNameElement_getDefault()

class SoLightAttenuationElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLightAttenuationElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLightAttenuationElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLightAttenuationElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLightAttenuationElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoLightAttenuationElement_init(self, state)

    @staticmethod
    def set(state, node, lightAttenuation):
        return Coin_SWIG_Python.SoLightAttenuationElement_set(state, node, lightAttenuation)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoLightAttenuationElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoLightAttenuationElement_getDefault()

    def matches(self, element):
        return Coin_SWIG_Python.SoLightAttenuationElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoLightAttenuationElement_copyMatchInfo(self)

    def output(self, file):
        return Coin_SWIG_Python.SoLightAttenuationElement_output(self, file)

# Register SoLightAttenuationElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLightAttenuationElement_swigregister(SoLightAttenuationElement)

def SoLightAttenuationElement_getClassTypeId():
    return Coin_SWIG_Python.SoLightAttenuationElement_getClassTypeId()

def SoLightAttenuationElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLightAttenuationElement_getClassStackIndex()

def SoLightAttenuationElement_createInstance():
    return Coin_SWIG_Python.SoLightAttenuationElement_createInstance()

def SoLightAttenuationElement_initClass():
    return Coin_SWIG_Python.SoLightAttenuationElement_initClass()

def SoLightAttenuationElement_set(state, node, lightAttenuation):
    return Coin_SWIG_Python.SoLightAttenuationElement_set(state, node, lightAttenuation)

def SoLightAttenuationElement_get(state):
    return Coin_SWIG_Python.SoLightAttenuationElement_get(state)

def SoLightAttenuationElement_getDefault():
    return Coin_SWIG_Python.SoLightAttenuationElement_getDefault()

class SoPolygonOffsetElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPolygonOffsetElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoPolygonOffsetElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoPolygonOffsetElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPolygonOffsetElement_initClass()
    FILLED = Coin_SWIG_Python.SoPolygonOffsetElement_FILLED
    LINES = Coin_SWIG_Python.SoPolygonOffsetElement_LINES
    POINTS = Coin_SWIG_Python.SoPolygonOffsetElement_POINTS

    def init(self, state):
        return Coin_SWIG_Python.SoPolygonOffsetElement_init(self, state)

    @staticmethod
    def set(state, node, factor, units, styles, on):
        return Coin_SWIG_Python.SoPolygonOffsetElement_set(state, node, factor, units, styles, on)

    @staticmethod
    def get(state, factor, units, styles, on):
        return Coin_SWIG_Python.SoPolygonOffsetElement_get(state, factor, units, styles, on)

    @staticmethod
    def getDefault(factor, units, styles, on):
        return Coin_SWIG_Python.SoPolygonOffsetElement_getDefault(factor, units, styles, on)

# Register SoPolygonOffsetElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoPolygonOffsetElement_swigregister(SoPolygonOffsetElement)

def SoPolygonOffsetElement_getClassTypeId():
    return Coin_SWIG_Python.SoPolygonOffsetElement_getClassTypeId()

def SoPolygonOffsetElement_getClassStackIndex():
    return Coin_SWIG_Python.SoPolygonOffsetElement_getClassStackIndex()

def SoPolygonOffsetElement_createInstance():
    return Coin_SWIG_Python.SoPolygonOffsetElement_createInstance()

def SoPolygonOffsetElement_initClass():
    return Coin_SWIG_Python.SoPolygonOffsetElement_initClass()

def SoPolygonOffsetElement_set(state, node, factor, units, styles, on):
    return Coin_SWIG_Python.SoPolygonOffsetElement_set(state, node, factor, units, styles, on)

def SoPolygonOffsetElement_get(state, factor, units, styles, on):
    return Coin_SWIG_Python.SoPolygonOffsetElement_get(state, factor, units, styles, on)

def SoPolygonOffsetElement_getDefault(factor, units, styles, on):
    return Coin_SWIG_Python.SoPolygonOffsetElement_getDefault(factor, units, styles, on)

class SoGLPolygonOffsetElement(SoPolygonOffsetElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLPolygonOffsetElement_pop(self, state, prevTopElement)

# Register SoGLPolygonOffsetElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLPolygonOffsetElement_swigregister(SoGLPolygonOffsetElement)

def SoGLPolygonOffsetElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassTypeId()

def SoGLPolygonOffsetElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassStackIndex()

def SoGLPolygonOffsetElement_createInstance():
    return Coin_SWIG_Python.SoGLPolygonOffsetElement_createInstance()

def SoGLPolygonOffsetElement_initClass():
    return Coin_SWIG_Python.SoGLPolygonOffsetElement_initClass()

class SoProjectionMatrixElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProjectionMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoProjectionMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoProjectionMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProjectionMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoProjectionMatrixElement_init(self, state)

    @staticmethod
    def set(state, node):
        return Coin_SWIG_Python.SoProjectionMatrixElement_set(state, node)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoProjectionMatrixElement_get(state)

# Register SoProjectionMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoProjectionMatrixElement_swigregister(SoProjectionMatrixElement)

def SoProjectionMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoProjectionMatrixElement_getClassTypeId()

def SoProjectionMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoProjectionMatrixElement_getClassStackIndex()

def SoProjectionMatrixElement_createInstance():
    return Coin_SWIG_Python.SoProjectionMatrixElement_createInstance()

def SoProjectionMatrixElement_initClass():
    return Coin_SWIG_Python.SoProjectionMatrixElement_initClass()

def SoProjectionMatrixElement_set(state, node):
    return Coin_SWIG_Python.SoProjectionMatrixElement_set(state, node)

def SoProjectionMatrixElement_get(state):
    return Coin_SWIG_Python.SoProjectionMatrixElement_get(state)

class SoGLProjectionMatrixElement(SoProjectionMatrixElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLProjectionMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLProjectionMatrixElement_initClass()

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLProjectionMatrixElement_pop(self, state, prevTopElement)

# Register SoGLProjectionMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLProjectionMatrixElement_swigregister(SoGLProjectionMatrixElement)

def SoGLProjectionMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassTypeId()

def SoGLProjectionMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassStackIndex()

def SoGLProjectionMatrixElement_createInstance():
    return Coin_SWIG_Python.SoGLProjectionMatrixElement_createInstance()

def SoGLProjectionMatrixElement_initClass():
    return Coin_SWIG_Python.SoGLProjectionMatrixElement_initClass()

class SoProfileCoordinateElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProfileCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoProfileCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoProfileCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProfileCoordinateElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoProfileCoordinateElement_init(self, state)

    @staticmethod
    def set2(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoProfileCoordinateElement_set2(state, node, numCoords, coords)

    @staticmethod
    def set3(state, node, numCoords, coords):
        return Coin_SWIG_Python.SoProfileCoordinateElement_set3(state, node, numCoords, coords)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoProfileCoordinateElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoProfileCoordinateElement_getNum(self)

    def get2(self, index):
        return Coin_SWIG_Python.SoProfileCoordinateElement_get2(self, index)

    def get3(self, index):
        return Coin_SWIG_Python.SoProfileCoordinateElement_get3(self, index)

    def is2D(self):
        return Coin_SWIG_Python.SoProfileCoordinateElement_is2D(self)

    @staticmethod
    def getDefault2():
        return Coin_SWIG_Python.SoProfileCoordinateElement_getDefault2()

    @staticmethod
    def getDefault3():
        return Coin_SWIG_Python.SoProfileCoordinateElement_getDefault3()

    def getArrayPtr2(self):
        return Coin_SWIG_Python.SoProfileCoordinateElement_getArrayPtr2(self)

    def getArrayPtr3(self):
        return Coin_SWIG_Python.SoProfileCoordinateElement_getArrayPtr3(self)

# Register SoProfileCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoProfileCoordinateElement_swigregister(SoProfileCoordinateElement)

def SoProfileCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoProfileCoordinateElement_getClassTypeId()

def SoProfileCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoProfileCoordinateElement_getClassStackIndex()

def SoProfileCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoProfileCoordinateElement_createInstance()

def SoProfileCoordinateElement_initClass():
    return Coin_SWIG_Python.SoProfileCoordinateElement_initClass()

def SoProfileCoordinateElement_set2(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoProfileCoordinateElement_set2(state, node, numCoords, coords)

def SoProfileCoordinateElement_set3(state, node, numCoords, coords):
    return Coin_SWIG_Python.SoProfileCoordinateElement_set3(state, node, numCoords, coords)

def SoProfileCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoProfileCoordinateElement_getInstance(state)

def SoProfileCoordinateElement_getDefault2():
    return Coin_SWIG_Python.SoProfileCoordinateElement_getDefault2()

def SoProfileCoordinateElement_getDefault3():
    return Coin_SWIG_Python.SoProfileCoordinateElement_getDefault3()

class SoGLTextureImageElement(SoTextureImageElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLTextureImageElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLTextureImageElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLTextureImageElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLTextureImageElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLTextureImageElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLTextureImageElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLTextureImageElement_pop(self, state, prevTopElement)

    @staticmethod
    def set(state, node, image, model, blendColor):
        return Coin_SWIG_Python.SoGLTextureImageElement_set(state, node, image, model, blendColor)

    @staticmethod
    def get(state, model, blendcolor):
        return Coin_SWIG_Python.SoGLTextureImageElement_get(state, model, blendcolor)

    @staticmethod
    def getMaxGLTextureSize():
        return Coin_SWIG_Python.SoGLTextureImageElement_getMaxGLTextureSize()

    def isTextureSizeLegal(self, xsize, ysize, zsize, bytespertexel):
        return Coin_SWIG_Python.SoGLTextureImageElement_isTextureSizeLegal(self, xsize, ysize, zsize, bytespertexel)

# Register SoGLTextureImageElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLTextureImageElement_swigregister(SoGLTextureImageElement)

def SoGLTextureImageElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLTextureImageElement_getClassTypeId()

def SoGLTextureImageElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLTextureImageElement_getClassStackIndex()

def SoGLTextureImageElement_createInstance():
    return Coin_SWIG_Python.SoGLTextureImageElement_createInstance()

def SoGLTextureImageElement_initClass():
    return Coin_SWIG_Python.SoGLTextureImageElement_initClass()

def SoGLTextureImageElement_set(state, node, image, model, blendColor):
    return Coin_SWIG_Python.SoGLTextureImageElement_set(state, node, image, model, blendColor)

def SoGLTextureImageElement_get(state, model, blendcolor):
    return Coin_SWIG_Python.SoGLTextureImageElement_get(state, model, blendcolor)

def SoGLTextureImageElement_getMaxGLTextureSize():
    return Coin_SWIG_Python.SoGLTextureImageElement_getMaxGLTextureSize()

class SoViewingMatrixElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoViewingMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoViewingMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoViewingMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoViewingMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoViewingMatrixElement_init(self, state)

    @staticmethod
    def set(state, node, ViewingMatrix):
        return Coin_SWIG_Python.SoViewingMatrixElement_set(state, node, ViewingMatrix)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoViewingMatrixElement_get(state)

# Register SoViewingMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoViewingMatrixElement_swigregister(SoViewingMatrixElement)

def SoViewingMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoViewingMatrixElement_getClassTypeId()

def SoViewingMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoViewingMatrixElement_getClassStackIndex()

def SoViewingMatrixElement_createInstance():
    return Coin_SWIG_Python.SoViewingMatrixElement_createInstance()

def SoViewingMatrixElement_initClass():
    return Coin_SWIG_Python.SoViewingMatrixElement_initClass()

def SoViewingMatrixElement_set(state, node, ViewingMatrix):
    return Coin_SWIG_Python.SoViewingMatrixElement_set(state, node, ViewingMatrix)

def SoViewingMatrixElement_get(state):
    return Coin_SWIG_Python.SoViewingMatrixElement_get(state)

class SoGLViewingMatrixElement(SoViewingMatrixElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLViewingMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLViewingMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLViewingMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLViewingMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLViewingMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLViewingMatrixElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLViewingMatrixElement_pop(self, state, prevTopElement)

    @staticmethod
    def getNodeId(state):
        return Coin_SWIG_Python.SoGLViewingMatrixElement_getNodeId(state)

    @staticmethod
    def getResetMatrix(state):
        return Coin_SWIG_Python.SoGLViewingMatrixElement_getResetMatrix(state)

# Register SoGLViewingMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLViewingMatrixElement_swigregister(SoGLViewingMatrixElement)

def SoGLViewingMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLViewingMatrixElement_getClassTypeId()

def SoGLViewingMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLViewingMatrixElement_getClassStackIndex()

def SoGLViewingMatrixElement_createInstance():
    return Coin_SWIG_Python.SoGLViewingMatrixElement_createInstance()

def SoGLViewingMatrixElement_initClass():
    return Coin_SWIG_Python.SoGLViewingMatrixElement_initClass()

def SoGLViewingMatrixElement_getNodeId(state):
    return Coin_SWIG_Python.SoGLViewingMatrixElement_getNodeId(state)

def SoGLViewingMatrixElement_getResetMatrix(state):
    return Coin_SWIG_Python.SoGLViewingMatrixElement_getResetMatrix(state)

class SoResetMatrixElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoResetMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoResetMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoResetMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoResetMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoResetMatrixElement_init(self, state)

    @staticmethod
    def set(state, m):
        return Coin_SWIG_Python.SoResetMatrixElement_set(state, m)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoResetMatrixElement_get(state)

# Register SoResetMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoResetMatrixElement_swigregister(SoResetMatrixElement)

def SoResetMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoResetMatrixElement_getClassTypeId()

def SoResetMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoResetMatrixElement_getClassStackIndex()

def SoResetMatrixElement_createInstance():
    return Coin_SWIG_Python.SoResetMatrixElement_createInstance()

def SoResetMatrixElement_initClass():
    return Coin_SWIG_Python.SoResetMatrixElement_initClass()

def SoResetMatrixElement_set(state, m):
    return Coin_SWIG_Python.SoResetMatrixElement_set(state, m)

def SoResetMatrixElement_get(state):
    return Coin_SWIG_Python.SoResetMatrixElement_get(state)

class SoViewVolumeElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoViewVolumeElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoViewVolumeElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoViewVolumeElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoViewVolumeElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoViewVolumeElement_init(self, state)

    @staticmethod
    def set(state, node, viewVolume):
        return Coin_SWIG_Python.SoViewVolumeElement_set(state, node, viewVolume)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoViewVolumeElement_get(state)

# Register SoViewVolumeElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoViewVolumeElement_swigregister(SoViewVolumeElement)

def SoViewVolumeElement_getClassTypeId():
    return Coin_SWIG_Python.SoViewVolumeElement_getClassTypeId()

def SoViewVolumeElement_getClassStackIndex():
    return Coin_SWIG_Python.SoViewVolumeElement_getClassStackIndex()

def SoViewVolumeElement_createInstance():
    return Coin_SWIG_Python.SoViewVolumeElement_createInstance()

def SoViewVolumeElement_initClass():
    return Coin_SWIG_Python.SoViewVolumeElement_initClass()

def SoViewVolumeElement_set(state, node, viewVolume):
    return Coin_SWIG_Python.SoViewVolumeElement_set(state, node, viewVolume)

def SoViewVolumeElement_get(state):
    return Coin_SWIG_Python.SoViewVolumeElement_get(state)

class SoGLShapeHintsElement(SoShapeHintsElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLShapeHintsElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLShapeHintsElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLShapeHintsElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLShapeHintsElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLShapeHintsElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLShapeHintsElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLShapeHintsElement_pop(self, state, prevTopElement)

    @staticmethod
    def forceSend(*args):
        return Coin_SWIG_Python.SoGLShapeHintsElement_forceSend(*args)

# Register SoGLShapeHintsElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLShapeHintsElement_swigregister(SoGLShapeHintsElement)

def SoGLShapeHintsElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLShapeHintsElement_getClassTypeId()

def SoGLShapeHintsElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLShapeHintsElement_getClassStackIndex()

def SoGLShapeHintsElement_createInstance():
    return Coin_SWIG_Python.SoGLShapeHintsElement_createInstance()

def SoGLShapeHintsElement_initClass():
    return Coin_SWIG_Python.SoGLShapeHintsElement_initClass()

def SoGLShapeHintsElement_forceSend(*args):
    return Coin_SWIG_Python.SoGLShapeHintsElement_forceSend(*args)

class SoShapeStyleElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShapeStyleElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoShapeStyleElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoShapeStyleElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShapeStyleElement_initClass()
    LIGHTING = Coin_SWIG_Python.SoShapeStyleElement_LIGHTING
    TEXENABLED = Coin_SWIG_Python.SoShapeStyleElement_TEXENABLED
    TEXFUNC = Coin_SWIG_Python.SoShapeStyleElement_TEXFUNC
    BBOXCMPLX = Coin_SWIG_Python.SoShapeStyleElement_BBOXCMPLX
    INVISIBLE = Coin_SWIG_Python.SoShapeStyleElement_INVISIBLE
    ABORTCB = Coin_SWIG_Python.SoShapeStyleElement_ABORTCB
    OVERRIDE = Coin_SWIG_Python.SoShapeStyleElement_OVERRIDE
    TEX3ENABLED = Coin_SWIG_Python.SoShapeStyleElement_TEX3ENABLED
    BIGIMAGE = Coin_SWIG_Python.SoShapeStyleElement_BIGIMAGE
    BUMPMAP = Coin_SWIG_Python.SoShapeStyleElement_BUMPMAP
    VERTEXARRAY = Coin_SWIG_Python.SoShapeStyleElement_VERTEXARRAY
    TRANSP_TEXTURE = Coin_SWIG_Python.SoShapeStyleElement_TRANSP_TEXTURE
    TRANSP_MATERIAL = Coin_SWIG_Python.SoShapeStyleElement_TRANSP_MATERIAL
    TRANSP_SORTED_TRIANGLES = Coin_SWIG_Python.SoShapeStyleElement_TRANSP_SORTED_TRIANGLES
    SHADOWMAP = Coin_SWIG_Python.SoShapeStyleElement_SHADOWMAP
    SHADOWS = Coin_SWIG_Python.SoShapeStyleElement_SHADOWS

    def init(self, state):
        return Coin_SWIG_Python.SoShapeStyleElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoShapeStyleElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoShapeStyleElement_pop(self, state, prevTopElement)

    def matches(self, element):
        return Coin_SWIG_Python.SoShapeStyleElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoShapeStyleElement_copyMatchInfo(self)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoShapeStyleElement_get(state)

    def getFlags(self):
        return Coin_SWIG_Python.SoShapeStyleElement_getFlags(self)

    def mightNotRender(self):
        return Coin_SWIG_Python.SoShapeStyleElement_mightNotRender(self)

    def needNormals(self):
        return Coin_SWIG_Python.SoShapeStyleElement_needNormals(self)

    def needTexCoords(self):
        return Coin_SWIG_Python.SoShapeStyleElement_needTexCoords(self)

    def getRenderCaseMask(self):
        return Coin_SWIG_Python.SoShapeStyleElement_getRenderCaseMask(self)

    @staticmethod
    def setDrawStyle(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setDrawStyle(state, value)

    @staticmethod
    def setComplexityType(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setComplexityType(state, value)

    @staticmethod
    def setTransparencyType(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setTransparencyType(state, value)

    @staticmethod
    def setTextureEnabled(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setTextureEnabled(state, value)

    @staticmethod
    def setTexture3Enabled(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setTexture3Enabled(state, value)

    @staticmethod
    def setTextureFunction(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setTextureFunction(state, value)

    @staticmethod
    def setLightModel(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setLightModel(state, value)

    @staticmethod
    def setOverrides(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setOverrides(state, value)

    @staticmethod
    def isScreenDoor(state):
        return Coin_SWIG_Python.SoShapeStyleElement_isScreenDoor(state)

    @staticmethod
    def getTransparencyType(state):
        return Coin_SWIG_Python.SoShapeStyleElement_getTransparencyType(state)

    def isTextureFunction(self):
        return Coin_SWIG_Python.SoShapeStyleElement_isTextureFunction(self)

    @staticmethod
    def setBumpmapEnabled(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setBumpmapEnabled(state, value)

    @staticmethod
    def setBigImageEnabled(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setBigImageEnabled(state, value)

    @staticmethod
    def setVertexArrayRendering(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setVertexArrayRendering(state, value)

    @staticmethod
    def setTransparentMaterial(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setTransparentMaterial(state, value)

    @staticmethod
    def setTransparentTexture(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setTransparentTexture(state, value)

    @staticmethod
    def setShadowMapRendering(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setShadowMapRendering(state, value)

    @staticmethod
    def setShadowsRendering(state, value):
        return Coin_SWIG_Python.SoShapeStyleElement_setShadowsRendering(state, value)

# Register SoShapeStyleElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoShapeStyleElement_swigregister(SoShapeStyleElement)

def SoShapeStyleElement_getClassTypeId():
    return Coin_SWIG_Python.SoShapeStyleElement_getClassTypeId()

def SoShapeStyleElement_getClassStackIndex():
    return Coin_SWIG_Python.SoShapeStyleElement_getClassStackIndex()

def SoShapeStyleElement_createInstance():
    return Coin_SWIG_Python.SoShapeStyleElement_createInstance()

def SoShapeStyleElement_initClass():
    return Coin_SWIG_Python.SoShapeStyleElement_initClass()

def SoShapeStyleElement_get(state):
    return Coin_SWIG_Python.SoShapeStyleElement_get(state)

def SoShapeStyleElement_setDrawStyle(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setDrawStyle(state, value)

def SoShapeStyleElement_setComplexityType(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setComplexityType(state, value)

def SoShapeStyleElement_setTransparencyType(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setTransparencyType(state, value)

def SoShapeStyleElement_setTextureEnabled(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setTextureEnabled(state, value)

def SoShapeStyleElement_setTexture3Enabled(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setTexture3Enabled(state, value)

def SoShapeStyleElement_setTextureFunction(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setTextureFunction(state, value)

def SoShapeStyleElement_setLightModel(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setLightModel(state, value)

def SoShapeStyleElement_setOverrides(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setOverrides(state, value)

def SoShapeStyleElement_isScreenDoor(state):
    return Coin_SWIG_Python.SoShapeStyleElement_isScreenDoor(state)

def SoShapeStyleElement_getTransparencyType(state):
    return Coin_SWIG_Python.SoShapeStyleElement_getTransparencyType(state)

def SoShapeStyleElement_setBumpmapEnabled(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setBumpmapEnabled(state, value)

def SoShapeStyleElement_setBigImageEnabled(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setBigImageEnabled(state, value)

def SoShapeStyleElement_setVertexArrayRendering(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setVertexArrayRendering(state, value)

def SoShapeStyleElement_setTransparentMaterial(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setTransparentMaterial(state, value)

def SoShapeStyleElement_setTransparentTexture(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setTransparentTexture(state, value)

def SoShapeStyleElement_setShadowMapRendering(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setShadowMapRendering(state, value)

def SoShapeStyleElement_setShadowsRendering(state, value):
    return Coin_SWIG_Python.SoShapeStyleElement_setShadowsRendering(state, value)

class SoViewportRegionElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoViewportRegionElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoViewportRegionElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoViewportRegionElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoViewportRegionElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoViewportRegionElement_init(self, state)

    def matches(self, element):
        return Coin_SWIG_Python.SoViewportRegionElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoViewportRegionElement_copyMatchInfo(self)

    @staticmethod
    def set(state, viewportRegion):
        return Coin_SWIG_Python.SoViewportRegionElement_set(state, viewportRegion)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoViewportRegionElement_get(state)

    def output(self, file):
        return Coin_SWIG_Python.SoViewportRegionElement_output(self, file)

# Register SoViewportRegionElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoViewportRegionElement_swigregister(SoViewportRegionElement)

def SoViewportRegionElement_getClassTypeId():
    return Coin_SWIG_Python.SoViewportRegionElement_getClassTypeId()

def SoViewportRegionElement_getClassStackIndex():
    return Coin_SWIG_Python.SoViewportRegionElement_getClassStackIndex()

def SoViewportRegionElement_createInstance():
    return Coin_SWIG_Python.SoViewportRegionElement_createInstance()

def SoViewportRegionElement_initClass():
    return Coin_SWIG_Python.SoViewportRegionElement_initClass()

def SoViewportRegionElement_set(state, viewportRegion):
    return Coin_SWIG_Python.SoViewportRegionElement_set(state, viewportRegion)

def SoViewportRegionElement_get(state):
    return Coin_SWIG_Python.SoViewportRegionElement_get(state)

class SoGLViewportRegionElement(SoViewportRegionElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLViewportRegionElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLViewportRegionElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLViewportRegionElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLViewportRegionElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLViewportRegionElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLViewportRegionElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLViewportRegionElement_pop(self, state, prevTopElement)

# Register SoGLViewportRegionElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLViewportRegionElement_swigregister(SoGLViewportRegionElement)

def SoGLViewportRegionElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLViewportRegionElement_getClassTypeId()

def SoGLViewportRegionElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLViewportRegionElement_getClassStackIndex()

def SoGLViewportRegionElement_createInstance():
    return Coin_SWIG_Python.SoGLViewportRegionElement_createInstance()

def SoGLViewportRegionElement_initClass():
    return Coin_SWIG_Python.SoGLViewportRegionElement_initClass()

class SoWindowElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoWindowElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoWindowElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoWindowElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoWindowElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoWindowElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoWindowElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoWindowElement_pop(self, state, prevTopElement)

    def matches(self, element):
        return Coin_SWIG_Python.SoWindowElement_matches(self, element)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoWindowElement_copyMatchInfo(self)

    @staticmethod
    def set(state, window, context, display, action):
        return Coin_SWIG_Python.SoWindowElement_set(state, window, context, display, action)

    @staticmethod
    def get(state, window, context, display, action):
        return Coin_SWIG_Python.SoWindowElement_get(state, window, context, display, action)

# Register SoWindowElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoWindowElement_swigregister(SoWindowElement)

def SoWindowElement_getClassTypeId():
    return Coin_SWIG_Python.SoWindowElement_getClassTypeId()

def SoWindowElement_getClassStackIndex():
    return Coin_SWIG_Python.SoWindowElement_getClassStackIndex()

def SoWindowElement_createInstance():
    return Coin_SWIG_Python.SoWindowElement_createInstance()

def SoWindowElement_initClass():
    return Coin_SWIG_Python.SoWindowElement_initClass()

def SoWindowElement_set(state, window, context, display, action):
    return Coin_SWIG_Python.SoWindowElement_set(state, window, context, display, action)

def SoWindowElement_get(state, window, context, display, action):
    return Coin_SWIG_Python.SoWindowElement_get(state, window, context, display, action)

class SoGLCacheContextElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLCacheContextElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLCacheContextElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLCacheContextElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLCacheContextElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLCacheContextElement_init(self, state)

    def matches(self, elt):
        return Coin_SWIG_Python.SoGLCacheContextElement_matches(self, elt)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoGLCacheContextElement_copyMatchInfo(self)

    @staticmethod
    def set(state, context, twopasstransparency, remoterendering):
        return Coin_SWIG_Python.SoGLCacheContextElement_set(state, context, twopasstransparency, remoterendering)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoGLCacheContextElement_get(state)

    @staticmethod
    def getExtID(str):
        return Coin_SWIG_Python.SoGLCacheContextElement_getExtID(str)

    @staticmethod
    def getOpenGLVersion(state, major, minor):
        return Coin_SWIG_Python.SoGLCacheContextElement_getOpenGLVersion(state, major, minor)

    @staticmethod
    def extSupported(state, extid):
        return Coin_SWIG_Python.SoGLCacheContextElement_extSupported(state, extid)

    @staticmethod
    def areMipMapsFast(state):
        return Coin_SWIG_Python.SoGLCacheContextElement_areMipMapsFast(state)
    DO_AUTO_CACHE = Coin_SWIG_Python.SoGLCacheContextElement_DO_AUTO_CACHE
    DONT_AUTO_CACHE = Coin_SWIG_Python.SoGLCacheContextElement_DONT_AUTO_CACHE

    @staticmethod
    def shouldAutoCache(state, bits):
        return Coin_SWIG_Python.SoGLCacheContextElement_shouldAutoCache(state, bits)

    @staticmethod
    def setAutoCacheBits(state, bits):
        return Coin_SWIG_Python.SoGLCacheContextElement_setAutoCacheBits(state, bits)

    @staticmethod
    def resetAutoCacheBits(state):
        return Coin_SWIG_Python.SoGLCacheContextElement_resetAutoCacheBits(state)

    @staticmethod
    def getIsRemoteRendering(state):
        return Coin_SWIG_Python.SoGLCacheContextElement_getIsRemoteRendering(state)

    @staticmethod
    def getUniqueCacheContext():
        return Coin_SWIG_Python.SoGLCacheContextElement_getUniqueCacheContext()

    @staticmethod
    def scheduleDeleteCallback(contextid, cb, closure):
        return Coin_SWIG_Python.SoGLCacheContextElement_scheduleDeleteCallback(contextid, cb, closure)

# Register SoGLCacheContextElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLCacheContextElement_swigregister(SoGLCacheContextElement)

def SoGLCacheContextElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLCacheContextElement_getClassTypeId()

def SoGLCacheContextElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLCacheContextElement_getClassStackIndex()

def SoGLCacheContextElement_createInstance():
    return Coin_SWIG_Python.SoGLCacheContextElement_createInstance()

def SoGLCacheContextElement_initClass():
    return Coin_SWIG_Python.SoGLCacheContextElement_initClass()

def SoGLCacheContextElement_set(state, context, twopasstransparency, remoterendering):
    return Coin_SWIG_Python.SoGLCacheContextElement_set(state, context, twopasstransparency, remoterendering)

def SoGLCacheContextElement_get(state):
    return Coin_SWIG_Python.SoGLCacheContextElement_get(state)

def SoGLCacheContextElement_getExtID(str):
    return Coin_SWIG_Python.SoGLCacheContextElement_getExtID(str)

def SoGLCacheContextElement_getOpenGLVersion(state, major, minor):
    return Coin_SWIG_Python.SoGLCacheContextElement_getOpenGLVersion(state, major, minor)

def SoGLCacheContextElement_extSupported(state, extid):
    return Coin_SWIG_Python.SoGLCacheContextElement_extSupported(state, extid)

def SoGLCacheContextElement_areMipMapsFast(state):
    return Coin_SWIG_Python.SoGLCacheContextElement_areMipMapsFast(state)

def SoGLCacheContextElement_shouldAutoCache(state, bits):
    return Coin_SWIG_Python.SoGLCacheContextElement_shouldAutoCache(state, bits)

def SoGLCacheContextElement_setAutoCacheBits(state, bits):
    return Coin_SWIG_Python.SoGLCacheContextElement_setAutoCacheBits(state, bits)

def SoGLCacheContextElement_resetAutoCacheBits(state):
    return Coin_SWIG_Python.SoGLCacheContextElement_resetAutoCacheBits(state)

def SoGLCacheContextElement_getIsRemoteRendering(state):
    return Coin_SWIG_Python.SoGLCacheContextElement_getIsRemoteRendering(state)

def SoGLCacheContextElement_getUniqueCacheContext():
    return Coin_SWIG_Python.SoGLCacheContextElement_getUniqueCacheContext()

def SoGLCacheContextElement_scheduleDeleteCallback(contextid, cb, closure):
    return Coin_SWIG_Python.SoGLCacheContextElement_scheduleDeleteCallback(contextid, cb, closure)

class SoGLDisplayList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DISPLAY_LIST = Coin_SWIG_Python.SoGLDisplayList_DISPLAY_LIST
    TEXTURE_OBJECT = Coin_SWIG_Python.SoGLDisplayList_TEXTURE_OBJECT

    def __init__(self, state, type, allocnum=1, mipmaptexobj=0):
        Coin_SWIG_Python.SoGLDisplayList_swiginit(self, Coin_SWIG_Python.new_SoGLDisplayList(state, type, allocnum, mipmaptexobj))

    def ref(self):
        return Coin_SWIG_Python.SoGLDisplayList_ref(self)

    def unref(self, state=None):
        return Coin_SWIG_Python.SoGLDisplayList_unref(self, state)

    def open(self, state, index=0):
        return Coin_SWIG_Python.SoGLDisplayList_open(self, state, index)

    def close(self, state):
        return Coin_SWIG_Python.SoGLDisplayList_close(self, state)

    def call(self, state, index=0):
        return Coin_SWIG_Python.SoGLDisplayList_call(self, state, index)

    def addDependency(self, state):
        return Coin_SWIG_Python.SoGLDisplayList_addDependency(self, state)

    def isMipMapTextureObject(self):
        return Coin_SWIG_Python.SoGLDisplayList_isMipMapTextureObject(self)

    def getType(self):
        return Coin_SWIG_Python.SoGLDisplayList_getType(self)

    def getNumAllocated(self):
        return Coin_SWIG_Python.SoGLDisplayList_getNumAllocated(self)

    def getFirstIndex(self):
        return Coin_SWIG_Python.SoGLDisplayList_getFirstIndex(self)

    def getContext(self):
        return Coin_SWIG_Python.SoGLDisplayList_getContext(self)

    def setTextureTarget(self, target):
        return Coin_SWIG_Python.SoGLDisplayList_setTextureTarget(self, target)

    def getTextureTarget(self):
        return Coin_SWIG_Python.SoGLDisplayList_getTextureTarget(self)

# Register SoGLDisplayList in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLDisplayList_swigregister(SoGLDisplayList)

class SoGLColorIndexElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLColorIndexElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLColorIndexElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLColorIndexElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLColorIndexElement_initClass()

    @staticmethod
    def isColorIndexMode(state):
        return Coin_SWIG_Python.SoGLColorIndexElement_isColorIndexMode(state)

    def init(self, state):
        return Coin_SWIG_Python.SoGLColorIndexElement_init(self, state)

    @staticmethod
    def set(state, node, numindices, indices):
        return Coin_SWIG_Python.SoGLColorIndexElement_set(state, node, numindices, indices)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoGLColorIndexElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoGLColorIndexElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoGLColorIndexElement_get(self, index)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoGLColorIndexElement_getDefault()

# Register SoGLColorIndexElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLColorIndexElement_swigregister(SoGLColorIndexElement)

def SoGLColorIndexElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLColorIndexElement_getClassTypeId()

def SoGLColorIndexElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLColorIndexElement_getClassStackIndex()

def SoGLColorIndexElement_createInstance():
    return Coin_SWIG_Python.SoGLColorIndexElement_createInstance()

def SoGLColorIndexElement_initClass():
    return Coin_SWIG_Python.SoGLColorIndexElement_initClass()

def SoGLColorIndexElement_isColorIndexMode(state):
    return Coin_SWIG_Python.SoGLColorIndexElement_isColorIndexMode(state)

def SoGLColorIndexElement_set(state, node, numindices, indices):
    return Coin_SWIG_Python.SoGLColorIndexElement_set(state, node, numindices, indices)

def SoGLColorIndexElement_getInstance(state):
    return Coin_SWIG_Python.SoGLColorIndexElement_getInstance(state)

def SoGLColorIndexElement_getDefault():
    return Coin_SWIG_Python.SoGLColorIndexElement_getDefault()

class SoListenerPositionElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoListenerPositionElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoListenerPositionElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoListenerPositionElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoListenerPositionElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoListenerPositionElement_init(self, state)

    @staticmethod
    def set(state, node, position, setbylistener):
        return Coin_SWIG_Python.SoListenerPositionElement_set(state, node, position, setbylistener)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoListenerPositionElement_get(state)

    @staticmethod
    def isSetByListener(state):
        return Coin_SWIG_Python.SoListenerPositionElement_isSetByListener(state)

    def output(self, file):
        return Coin_SWIG_Python.SoListenerPositionElement_output(self, file)

# Register SoListenerPositionElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoListenerPositionElement_swigregister(SoListenerPositionElement)

def SoListenerPositionElement_getClassTypeId():
    return Coin_SWIG_Python.SoListenerPositionElement_getClassTypeId()

def SoListenerPositionElement_getClassStackIndex():
    return Coin_SWIG_Python.SoListenerPositionElement_getClassStackIndex()

def SoListenerPositionElement_createInstance():
    return Coin_SWIG_Python.SoListenerPositionElement_createInstance()

def SoListenerPositionElement_initClass():
    return Coin_SWIG_Python.SoListenerPositionElement_initClass()

def SoListenerPositionElement_set(state, node, position, setbylistener):
    return Coin_SWIG_Python.SoListenerPositionElement_set(state, node, position, setbylistener)

def SoListenerPositionElement_get(state):
    return Coin_SWIG_Python.SoListenerPositionElement_get(state)

def SoListenerPositionElement_isSetByListener(state):
    return Coin_SWIG_Python.SoListenerPositionElement_isSetByListener(state)

class SoListenerOrientationElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoListenerOrientationElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoListenerOrientationElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoListenerOrientationElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoListenerOrientationElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoListenerOrientationElement_init(self, state)

    @staticmethod
    def set(state, node, orientation, setbylistener):
        return Coin_SWIG_Python.SoListenerOrientationElement_set(state, node, orientation, setbylistener)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoListenerOrientationElement_get(state)

    @staticmethod
    def isSetByListener(state):
        return Coin_SWIG_Python.SoListenerOrientationElement_isSetByListener(state)

    def output(self, file):
        return Coin_SWIG_Python.SoListenerOrientationElement_output(self, file)

# Register SoListenerOrientationElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoListenerOrientationElement_swigregister(SoListenerOrientationElement)

def SoListenerOrientationElement_getClassTypeId():
    return Coin_SWIG_Python.SoListenerOrientationElement_getClassTypeId()

def SoListenerOrientationElement_getClassStackIndex():
    return Coin_SWIG_Python.SoListenerOrientationElement_getClassStackIndex()

def SoListenerOrientationElement_createInstance():
    return Coin_SWIG_Python.SoListenerOrientationElement_createInstance()

def SoListenerOrientationElement_initClass():
    return Coin_SWIG_Python.SoListenerOrientationElement_initClass()

def SoListenerOrientationElement_set(state, node, orientation, setbylistener):
    return Coin_SWIG_Python.SoListenerOrientationElement_set(state, node, orientation, setbylistener)

def SoListenerOrientationElement_get(state):
    return Coin_SWIG_Python.SoListenerOrientationElement_get(state)

def SoListenerOrientationElement_isSetByListener(state):
    return Coin_SWIG_Python.SoListenerOrientationElement_isSetByListener(state)

class SoListenerDopplerElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoListenerDopplerElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoListenerDopplerElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoListenerDopplerElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoListenerDopplerElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoListenerDopplerElement_init(self, state)

    @staticmethod
    def setDopplerVelocity(state, node, velocity):
        return Coin_SWIG_Python.SoListenerDopplerElement_setDopplerVelocity(state, node, velocity)

    @staticmethod
    def setDopplerFactor(state, node, factor):
        return Coin_SWIG_Python.SoListenerDopplerElement_setDopplerFactor(state, node, factor)

    @staticmethod
    def getDopplerVelocity(state):
        return Coin_SWIG_Python.SoListenerDopplerElement_getDopplerVelocity(state)

    @staticmethod
    def getDopplerFactor(state):
        return Coin_SWIG_Python.SoListenerDopplerElement_getDopplerFactor(state)

    def output(self, file):
        return Coin_SWIG_Python.SoListenerDopplerElement_output(self, file)

# Register SoListenerDopplerElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoListenerDopplerElement_swigregister(SoListenerDopplerElement)

def SoListenerDopplerElement_getClassTypeId():
    return Coin_SWIG_Python.SoListenerDopplerElement_getClassTypeId()

def SoListenerDopplerElement_getClassStackIndex():
    return Coin_SWIG_Python.SoListenerDopplerElement_getClassStackIndex()

def SoListenerDopplerElement_createInstance():
    return Coin_SWIG_Python.SoListenerDopplerElement_createInstance()

def SoListenerDopplerElement_initClass():
    return Coin_SWIG_Python.SoListenerDopplerElement_initClass()

def SoListenerDopplerElement_setDopplerVelocity(state, node, velocity):
    return Coin_SWIG_Python.SoListenerDopplerElement_setDopplerVelocity(state, node, velocity)

def SoListenerDopplerElement_setDopplerFactor(state, node, factor):
    return Coin_SWIG_Python.SoListenerDopplerElement_setDopplerFactor(state, node, factor)

def SoListenerDopplerElement_getDopplerVelocity(state):
    return Coin_SWIG_Python.SoListenerDopplerElement_getDopplerVelocity(state)

def SoListenerDopplerElement_getDopplerFactor(state):
    return Coin_SWIG_Python.SoListenerDopplerElement_getDopplerFactor(state)

class SoListenerGainElement(SoFloatElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoListenerGainElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoListenerGainElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoListenerGainElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoListenerGainElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoListenerGainElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoListenerGainElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoListenerGainElement_get(state)

# Register SoListenerGainElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoListenerGainElement_swigregister(SoListenerGainElement)

def SoListenerGainElement_getClassTypeId():
    return Coin_SWIG_Python.SoListenerGainElement_getClassTypeId()

def SoListenerGainElement_getClassStackIndex():
    return Coin_SWIG_Python.SoListenerGainElement_getClassStackIndex()

def SoListenerGainElement_createInstance():
    return Coin_SWIG_Python.SoListenerGainElement_createInstance()

def SoListenerGainElement_initClass():
    return Coin_SWIG_Python.SoListenerGainElement_initClass()

def SoListenerGainElement_set(*args):
    return Coin_SWIG_Python.SoListenerGainElement_set(*args)

def SoListenerGainElement_get(state):
    return Coin_SWIG_Python.SoListenerGainElement_get(state)

class SoSoundElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSoundElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoSoundElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSoundElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSoundElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoSoundElement_init(self, state)

    @staticmethod
    def set(state, node, scenegraphhassoundnode, soundnodeisplaying, ispartofactivescenegraph):
        return Coin_SWIG_Python.SoSoundElement_set(state, node, scenegraphhassoundnode, soundnodeisplaying, ispartofactivescenegraph)

    @staticmethod
    def setSceneGraphHasSoundNode(state, node, flag):
        return Coin_SWIG_Python.SoSoundElement_setSceneGraphHasSoundNode(state, node, flag)

    @staticmethod
    def sceneGraphHasSoundNode(state):
        return Coin_SWIG_Python.SoSoundElement_sceneGraphHasSoundNode(state)

    @staticmethod
    def setSoundNodeIsPlaying(state, node, flag):
        return Coin_SWIG_Python.SoSoundElement_setSoundNodeIsPlaying(state, node, flag)

    @staticmethod
    def soundNodeIsPlaying(state):
        return Coin_SWIG_Python.SoSoundElement_soundNodeIsPlaying(state)

    @staticmethod
    def setIsPartOfActiveSceneGraph(state, node, flag):
        return Coin_SWIG_Python.SoSoundElement_setIsPartOfActiveSceneGraph(state, node, flag)

    @staticmethod
    def isPartOfActiveSceneGraph(state):
        return Coin_SWIG_Python.SoSoundElement_isPartOfActiveSceneGraph(state)

    def push(self, state):
        return Coin_SWIG_Python.SoSoundElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoSoundElement_pop(self, state, prevTopElement)

    def output(self, file):
        return Coin_SWIG_Python.SoSoundElement_output(self, file)

# Register SoSoundElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoSoundElement_swigregister(SoSoundElement)

def SoSoundElement_getClassTypeId():
    return Coin_SWIG_Python.SoSoundElement_getClassTypeId()

def SoSoundElement_getClassStackIndex():
    return Coin_SWIG_Python.SoSoundElement_getClassStackIndex()

def SoSoundElement_createInstance():
    return Coin_SWIG_Python.SoSoundElement_createInstance()

def SoSoundElement_initClass():
    return Coin_SWIG_Python.SoSoundElement_initClass()

def SoSoundElement_set(state, node, scenegraphhassoundnode, soundnodeisplaying, ispartofactivescenegraph):
    return Coin_SWIG_Python.SoSoundElement_set(state, node, scenegraphhassoundnode, soundnodeisplaying, ispartofactivescenegraph)

def SoSoundElement_setSceneGraphHasSoundNode(state, node, flag):
    return Coin_SWIG_Python.SoSoundElement_setSceneGraphHasSoundNode(state, node, flag)

def SoSoundElement_sceneGraphHasSoundNode(state):
    return Coin_SWIG_Python.SoSoundElement_sceneGraphHasSoundNode(state)

def SoSoundElement_setSoundNodeIsPlaying(state, node, flag):
    return Coin_SWIG_Python.SoSoundElement_setSoundNodeIsPlaying(state, node, flag)

def SoSoundElement_soundNodeIsPlaying(state):
    return Coin_SWIG_Python.SoSoundElement_soundNodeIsPlaying(state)

def SoSoundElement_setIsPartOfActiveSceneGraph(state, node, flag):
    return Coin_SWIG_Python.SoSoundElement_setIsPartOfActiveSceneGraph(state, node, flag)

def SoSoundElement_isPartOfActiveSceneGraph(state):
    return Coin_SWIG_Python.SoSoundElement_isPartOfActiveSceneGraph(state)

class SoGLVBOElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLVBOElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLVBOElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLVBOElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLVBOElement_initClass()

    @staticmethod
    def shouldCreateVBO(state, numdata):
        return Coin_SWIG_Python.SoGLVBOElement_shouldCreateVBO(state, numdata)

    @staticmethod
    def setVertexVBO(state, vbo):
        return Coin_SWIG_Python.SoGLVBOElement_setVertexVBO(state, vbo)

    @staticmethod
    def setNormalVBO(state, vbo):
        return Coin_SWIG_Python.SoGLVBOElement_setNormalVBO(state, vbo)

    @staticmethod
    def setColorVBO(state, vbo):
        return Coin_SWIG_Python.SoGLVBOElement_setColorVBO(state, vbo)

    @staticmethod
    def setTexCoordVBO(state, unit, vbo):
        return Coin_SWIG_Python.SoGLVBOElement_setTexCoordVBO(state, unit, vbo)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoGLVBOElement_getInstance(state)

    def init(self, state):
        return Coin_SWIG_Python.SoGLVBOElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLVBOElement_push(self, state)

    def pop(self, state, prevtopelement):
        return Coin_SWIG_Python.SoGLVBOElement_pop(self, state, prevtopelement)

    def matches(self, elt):
        return Coin_SWIG_Python.SoGLVBOElement_matches(self, elt)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoGLVBOElement_copyMatchInfo(self)

    def getVertexVBO(self):
        return Coin_SWIG_Python.SoGLVBOElement_getVertexVBO(self)

    def getNormalVBO(self):
        return Coin_SWIG_Python.SoGLVBOElement_getNormalVBO(self)

    def getColorVBO(self):
        return Coin_SWIG_Python.SoGLVBOElement_getColorVBO(self)

    def getNumTexCoordVBO(self):
        return Coin_SWIG_Python.SoGLVBOElement_getNumTexCoordVBO(self)

    def getTexCoordVBO(self, idx):
        return Coin_SWIG_Python.SoGLVBOElement_getTexCoordVBO(self, idx)

# Register SoGLVBOElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLVBOElement_swigregister(SoGLVBOElement)

def SoGLVBOElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLVBOElement_getClassTypeId()

def SoGLVBOElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLVBOElement_getClassStackIndex()

def SoGLVBOElement_createInstance():
    return Coin_SWIG_Python.SoGLVBOElement_createInstance()

def SoGLVBOElement_initClass():
    return Coin_SWIG_Python.SoGLVBOElement_initClass()

def SoGLVBOElement_shouldCreateVBO(state, numdata):
    return Coin_SWIG_Python.SoGLVBOElement_shouldCreateVBO(state, numdata)

def SoGLVBOElement_setVertexVBO(state, vbo):
    return Coin_SWIG_Python.SoGLVBOElement_setVertexVBO(state, vbo)

def SoGLVBOElement_setNormalVBO(state, vbo):
    return Coin_SWIG_Python.SoGLVBOElement_setNormalVBO(state, vbo)

def SoGLVBOElement_setColorVBO(state, vbo):
    return Coin_SWIG_Python.SoGLVBOElement_setColorVBO(state, vbo)

def SoGLVBOElement_setTexCoordVBO(state, unit, vbo):
    return Coin_SWIG_Python.SoGLVBOElement_setTexCoordVBO(state, unit, vbo)

def SoGLVBOElement_getInstance(state):
    return Coin_SWIG_Python.SoGLVBOElement_getInstance(state)

class SoSpecularColorElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSpecularColorElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoSpecularColorElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSpecularColorElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSpecularColorElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoSpecularColorElement_init(self, state)

    @staticmethod
    def set(state, node, numColors, colors):
        return Coin_SWIG_Python.SoSpecularColorElement_set(state, node, numColors, colors)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoSpecularColorElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoSpecularColorElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoSpecularColorElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoSpecularColorElement_getArrayPtr(self)

# Register SoSpecularColorElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoSpecularColorElement_swigregister(SoSpecularColorElement)

def SoSpecularColorElement_getClassTypeId():
    return Coin_SWIG_Python.SoSpecularColorElement_getClassTypeId()

def SoSpecularColorElement_getClassStackIndex():
    return Coin_SWIG_Python.SoSpecularColorElement_getClassStackIndex()

def SoSpecularColorElement_createInstance():
    return Coin_SWIG_Python.SoSpecularColorElement_createInstance()

def SoSpecularColorElement_initClass():
    return Coin_SWIG_Python.SoSpecularColorElement_initClass()

def SoSpecularColorElement_set(state, node, numColors, colors):
    return Coin_SWIG_Python.SoSpecularColorElement_set(state, node, numColors, colors)

def SoSpecularColorElement_getInstance(state):
    return Coin_SWIG_Python.SoSpecularColorElement_getInstance(state)

class SoEmissiveColorElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoEmissiveColorElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoEmissiveColorElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoEmissiveColorElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoEmissiveColorElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoEmissiveColorElement_init(self, state)

    @staticmethod
    def set(state, node, numcolors, colors):
        return Coin_SWIG_Python.SoEmissiveColorElement_set(state, node, numcolors, colors)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoEmissiveColorElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoEmissiveColorElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoEmissiveColorElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoEmissiveColorElement_getArrayPtr(self)

# Register SoEmissiveColorElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoEmissiveColorElement_swigregister(SoEmissiveColorElement)

def SoEmissiveColorElement_getClassTypeId():
    return Coin_SWIG_Python.SoEmissiveColorElement_getClassTypeId()

def SoEmissiveColorElement_getClassStackIndex():
    return Coin_SWIG_Python.SoEmissiveColorElement_getClassStackIndex()

def SoEmissiveColorElement_createInstance():
    return Coin_SWIG_Python.SoEmissiveColorElement_createInstance()

def SoEmissiveColorElement_initClass():
    return Coin_SWIG_Python.SoEmissiveColorElement_initClass()

def SoEmissiveColorElement_set(state, node, numcolors, colors):
    return Coin_SWIG_Python.SoEmissiveColorElement_set(state, node, numcolors, colors)

def SoEmissiveColorElement_getInstance(state):
    return Coin_SWIG_Python.SoEmissiveColorElement_getInstance(state)

class SoShininessElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShininessElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoShininessElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoShininessElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShininessElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoShininessElement_init(self, state)

    @staticmethod
    def set(state, node, numvalues, values):
        return Coin_SWIG_Python.SoShininessElement_set(state, node, numvalues, values)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoShininessElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoShininessElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoShininessElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoShininessElement_getArrayPtr(self)

# Register SoShininessElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoShininessElement_swigregister(SoShininessElement)

def SoShininessElement_getClassTypeId():
    return Coin_SWIG_Python.SoShininessElement_getClassTypeId()

def SoShininessElement_getClassStackIndex():
    return Coin_SWIG_Python.SoShininessElement_getClassStackIndex()

def SoShininessElement_createInstance():
    return Coin_SWIG_Python.SoShininessElement_createInstance()

def SoShininessElement_initClass():
    return Coin_SWIG_Python.SoShininessElement_initClass()

def SoShininessElement_set(state, node, numvalues, values):
    return Coin_SWIG_Python.SoShininessElement_set(state, node, numvalues, values)

def SoShininessElement_getInstance(state):
    return Coin_SWIG_Python.SoShininessElement_getInstance(state)

class SoTransparencyElement(SoReplacedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransparencyElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTransparencyElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTransparencyElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransparencyElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTransparencyElement_init(self, state)

    @staticmethod
    def set(state, node, numvalues, values):
        return Coin_SWIG_Python.SoTransparencyElement_set(state, node, numvalues, values)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoTransparencyElement_getInstance(state)

    def getNum(self):
        return Coin_SWIG_Python.SoTransparencyElement_getNum(self)

    def get(self, index):
        return Coin_SWIG_Python.SoTransparencyElement_get(self, index)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SoTransparencyElement_getArrayPtr(self)

# Register SoTransparencyElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransparencyElement_swigregister(SoTransparencyElement)

def SoTransparencyElement_getClassTypeId():
    return Coin_SWIG_Python.SoTransparencyElement_getClassTypeId()

def SoTransparencyElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTransparencyElement_getClassStackIndex()

def SoTransparencyElement_createInstance():
    return Coin_SWIG_Python.SoTransparencyElement_createInstance()

def SoTransparencyElement_initClass():
    return Coin_SWIG_Python.SoTransparencyElement_initClass()

def SoTransparencyElement_set(state, node, numvalues, values):
    return Coin_SWIG_Python.SoTransparencyElement_set(state, node, numvalues, values)

def SoTransparencyElement_getInstance(state):
    return Coin_SWIG_Python.SoTransparencyElement_getInstance(state)

class SoLightModelElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLightModelElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoLightModelElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoLightModelElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLightModelElement_initClass()
    BASE_COLOR = Coin_SWIG_Python.SoLightModelElement_BASE_COLOR
    PHONG = Coin_SWIG_Python.SoLightModelElement_PHONG

    def init(self, state):
        return Coin_SWIG_Python.SoLightModelElement_init(self, state)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoLightModelElement_set(*args)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoLightModelElement_get(state)

    @staticmethod
    def getDefault():
        return Coin_SWIG_Python.SoLightModelElement_getDefault()

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoLightModelElement_getInstance(state)

# Register SoLightModelElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoLightModelElement_swigregister(SoLightModelElement)

def SoLightModelElement_getClassTypeId():
    return Coin_SWIG_Python.SoLightModelElement_getClassTypeId()

def SoLightModelElement_getClassStackIndex():
    return Coin_SWIG_Python.SoLightModelElement_getClassStackIndex()

def SoLightModelElement_createInstance():
    return Coin_SWIG_Python.SoLightModelElement_createInstance()

def SoLightModelElement_initClass():
    return Coin_SWIG_Python.SoLightModelElement_initClass()

def SoLightModelElement_set(*args):
    return Coin_SWIG_Python.SoLightModelElement_set(*args)

def SoLightModelElement_get(state):
    return Coin_SWIG_Python.SoLightModelElement_get(state)

def SoLightModelElement_getDefault():
    return Coin_SWIG_Python.SoLightModelElement_getDefault()

def SoLightModelElement_getInstance(state):
    return Coin_SWIG_Python.SoLightModelElement_getInstance(state)

class SoMultiTextureCoordinateElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_init(self, state)

    @staticmethod
    def setDefault(state, node, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_setDefault(state, node, unit)

    @staticmethod
    def setFunction(state, node, unit, func, userdata):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_setFunction(state, node, unit, func, userdata)

    @staticmethod
    def set2(state, node, unit, numCoords, coords):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_set2(state, node, unit, numCoords, coords)

    @staticmethod
    def set3(state, node, unit, numCoords, coords):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_set3(state, node, unit, numCoords, coords)

    @staticmethod
    def set4(state, node, unit, numCoords, coords):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_set4(state, node, unit, numCoords, coords)

    def getType(self, *args):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getType(self, *args)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getInstance(state)

    def get(self, unit, point, normal):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get(self, unit, point, normal)

    def getNum(self, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getNum(self, unit)

    def is2D(self, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_is2D(self, unit)

    def getDimension(self, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getDimension(self, unit)

    def get2(self, unit, index):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get2(self, unit, index)

    def get3(self, unit, index):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get3(self, unit, index)

    def get4(self, unit, index):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get4(self, unit, index)

    def getArrayPtr2(self, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getArrayPtr2(self, unit)

    def getArrayPtr3(self, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getArrayPtr3(self, unit)

    def getArrayPtr4(self, unit):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getArrayPtr4(self, unit)

    def push(self, state):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_push(self, state)

    def matches(self, elem):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_matches(self, elem)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoMultiTextureCoordinateElement_copyMatchInfo(self)

# Register SoMultiTextureCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoMultiTextureCoordinateElement_swigregister(SoMultiTextureCoordinateElement)

def SoMultiTextureCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassTypeId()

def SoMultiTextureCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassStackIndex()

def SoMultiTextureCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_createInstance()

def SoMultiTextureCoordinateElement_initClass():
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_initClass()

def SoMultiTextureCoordinateElement_setDefault(state, node, unit):
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_setDefault(state, node, unit)

def SoMultiTextureCoordinateElement_setFunction(state, node, unit, func, userdata):
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_setFunction(state, node, unit, func, userdata)

def SoMultiTextureCoordinateElement_set2(state, node, unit, numCoords, coords):
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_set2(state, node, unit, numCoords, coords)

def SoMultiTextureCoordinateElement_set3(state, node, unit, numCoords, coords):
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_set3(state, node, unit, numCoords, coords)

def SoMultiTextureCoordinateElement_set4(state, node, unit, numCoords, coords):
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_set4(state, node, unit, numCoords, coords)

def SoMultiTextureCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getInstance(state)

class SoGLMultiTextureCoordinateElement(SoMultiTextureCoordinateElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_pop(self, state, prevTopElement)

    @staticmethod
    def setTexGen(state, node, unit, texgenFunc, texgenData=None, func=None, funcData=None):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_setTexGen(state, node, unit, texgenFunc, texgenData, func, funcData)

    def getType(self, unit):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getType(self, unit)

    @staticmethod
    def getInstance(state):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getInstance(state)

    def send(self, *args):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_send(self, *args)

    def initRender(self, enabled, maxenabled):
        return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_initRender(self, enabled, maxenabled)

# Register SoGLMultiTextureCoordinateElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_swigregister(SoGLMultiTextureCoordinateElement)

def SoGLMultiTextureCoordinateElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassTypeId()

def SoGLMultiTextureCoordinateElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassStackIndex()

def SoGLMultiTextureCoordinateElement_createInstance():
    return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_createInstance()

def SoGLMultiTextureCoordinateElement_initClass():
    return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_initClass()

def SoGLMultiTextureCoordinateElement_setTexGen(state, node, unit, texgenFunc, texgenData=None, func=None, funcData=None):
    return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_setTexGen(state, node, unit, texgenFunc, texgenData, func, funcData)

def SoGLMultiTextureCoordinateElement_getInstance(state):
    return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getInstance(state)

class SoMultiTextureEnabledElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_initClass()
    DISABLED = Coin_SWIG_Python.SoMultiTextureEnabledElement_DISABLED
    TEXTURE2D = Coin_SWIG_Python.SoMultiTextureEnabledElement_TEXTURE2D
    RECTANGLE = Coin_SWIG_Python.SoMultiTextureEnabledElement_RECTANGLE
    CUBEMAP = Coin_SWIG_Python.SoMultiTextureEnabledElement_CUBEMAP
    TEXTURE3D = Coin_SWIG_Python.SoMultiTextureEnabledElement_TEXTURE3D

    def init(self, state):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_init(self, state)

    @staticmethod
    def set(state, node, unit, enabled):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_set(state, node, unit, enabled)

    @staticmethod
    def get(state, unit):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_get(state, unit)

    def setElt(self, unit, enabled):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_setElt(self, unit, enabled)

    def push(self, state):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_push(self, state)

    def matches(self, elem):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_matches(self, elem)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_copyMatchInfo(self)

    @staticmethod
    def getEnabledUnits(state, lastenabled):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_getEnabledUnits(state, lastenabled)

    @staticmethod
    def getActiveUnits(state, lastenabled):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_getActiveUnits(state, lastenabled)

    @staticmethod
    def enableRectangle(state, node, unit):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_enableRectangle(state, node, unit)

    @staticmethod
    def enableCubeMap(state, node, unit):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_enableCubeMap(state, node, unit)

    @staticmethod
    def getMode(state, unit):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_getMode(state, unit)

    @staticmethod
    def disableAll(state):
        return Coin_SWIG_Python.SoMultiTextureEnabledElement_disableAll(state)

# Register SoMultiTextureEnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoMultiTextureEnabledElement_swigregister(SoMultiTextureEnabledElement)

def SoMultiTextureEnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassTypeId()

def SoMultiTextureEnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassStackIndex()

def SoMultiTextureEnabledElement_createInstance():
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_createInstance()

def SoMultiTextureEnabledElement_initClass():
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_initClass()

def SoMultiTextureEnabledElement_set(state, node, unit, enabled):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_set(state, node, unit, enabled)

def SoMultiTextureEnabledElement_get(state, unit):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_get(state, unit)

def SoMultiTextureEnabledElement_getEnabledUnits(state, lastenabled):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_getEnabledUnits(state, lastenabled)

def SoMultiTextureEnabledElement_getActiveUnits(state, lastenabled):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_getActiveUnits(state, lastenabled)

def SoMultiTextureEnabledElement_enableRectangle(state, node, unit):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_enableRectangle(state, node, unit)

def SoMultiTextureEnabledElement_enableCubeMap(state, node, unit):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_enableCubeMap(state, node, unit)

def SoMultiTextureEnabledElement_getMode(state, unit):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_getMode(state, unit)

def SoMultiTextureEnabledElement_disableAll(state):
    return Coin_SWIG_Python.SoMultiTextureEnabledElement_disableAll(state)

class SoGLMultiTextureEnabledElement(SoMultiTextureEnabledElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_pop(self, state, prevTopElement)

    def setElt(self, unit, onoff):
        return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_setElt(self, unit, onoff)

# Register SoGLMultiTextureEnabledElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLMultiTextureEnabledElement_swigregister(SoGLMultiTextureEnabledElement)

def SoGLMultiTextureEnabledElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassTypeId()

def SoGLMultiTextureEnabledElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassStackIndex()

def SoGLMultiTextureEnabledElement_createInstance():
    return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_createInstance()

def SoGLMultiTextureEnabledElement_initClass():
    return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_initClass()

class SoMultiTextureImageElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMultiTextureImageElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoMultiTextureImageElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMultiTextureImageElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMultiTextureImageElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoMultiTextureImageElement_init(self, state)

    @staticmethod
    def setDefault(state, node, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_setDefault(state, node, unit)

    @staticmethod
    def set(*args):
        return Coin_SWIG_Python.SoMultiTextureImageElement_set(*args)

    @staticmethod
    def get(*args):
        return Coin_SWIG_Python.SoMultiTextureImageElement_get(*args)

    @staticmethod
    def getImage(*args):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getImage(*args)

    @staticmethod
    def getBlendColor(state, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getBlendColor(state, unit)

    @staticmethod
    def getModel(state, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getModel(state, unit)

    @staticmethod
    def getWrapS(state, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getWrapS(state, unit)

    @staticmethod
    def getWrapT(state, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getWrapT(state, unit)

    @staticmethod
    def getWrapR(state, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getWrapR(state, unit)

    @staticmethod
    def containsTransparency(state):
        return Coin_SWIG_Python.SoMultiTextureImageElement_containsTransparency(state)

    @staticmethod
    def getDefault(*args):
        return Coin_SWIG_Python.SoMultiTextureImageElement_getDefault(*args)

    def push(self, state):
        return Coin_SWIG_Python.SoMultiTextureImageElement_push(self, state)

    def matches(self, elem):
        return Coin_SWIG_Python.SoMultiTextureImageElement_matches(self, elem)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoMultiTextureImageElement_copyMatchInfo(self)

    def setElt(self, *args):
        return Coin_SWIG_Python.SoMultiTextureImageElement_setElt(self, *args)

    def hasTransparency(self, unit):
        return Coin_SWIG_Python.SoMultiTextureImageElement_hasTransparency(self, unit)

# Register SoMultiTextureImageElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoMultiTextureImageElement_swigregister(SoMultiTextureImageElement)

def SoMultiTextureImageElement_getClassTypeId():
    return Coin_SWIG_Python.SoMultiTextureImageElement_getClassTypeId()

def SoMultiTextureImageElement_getClassStackIndex():
    return Coin_SWIG_Python.SoMultiTextureImageElement_getClassStackIndex()

def SoMultiTextureImageElement_createInstance():
    return Coin_SWIG_Python.SoMultiTextureImageElement_createInstance()

def SoMultiTextureImageElement_initClass():
    return Coin_SWIG_Python.SoMultiTextureImageElement_initClass()

def SoMultiTextureImageElement_setDefault(state, node, unit):
    return Coin_SWIG_Python.SoMultiTextureImageElement_setDefault(state, node, unit)

def SoMultiTextureImageElement_set(*args):
    return Coin_SWIG_Python.SoMultiTextureImageElement_set(*args)

def SoMultiTextureImageElement_get(*args):
    return Coin_SWIG_Python.SoMultiTextureImageElement_get(*args)

def SoMultiTextureImageElement_getImage(*args):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getImage(*args)

def SoMultiTextureImageElement_getBlendColor(state, unit):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getBlendColor(state, unit)

def SoMultiTextureImageElement_getModel(state, unit):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getModel(state, unit)

def SoMultiTextureImageElement_getWrapS(state, unit):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getWrapS(state, unit)

def SoMultiTextureImageElement_getWrapT(state, unit):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getWrapT(state, unit)

def SoMultiTextureImageElement_getWrapR(state, unit):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getWrapR(state, unit)

def SoMultiTextureImageElement_containsTransparency(state):
    return Coin_SWIG_Python.SoMultiTextureImageElement_containsTransparency(state)

def SoMultiTextureImageElement_getDefault(*args):
    return Coin_SWIG_Python.SoMultiTextureImageElement_getDefault(*args)

class SoGLMultiTextureImageElement(SoMultiTextureImageElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_pop(self, state, prevTopElement)

    @staticmethod
    def set(state, node, unit, image, model, blendColor):
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_set(state, node, unit, image, model, blendColor)

    @staticmethod
    def restore(state, unit):
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_restore(state, unit)

    @staticmethod
    def get(state, unit, model, blendcolor):
        return Coin_SWIG_Python.SoGLMultiTextureImageElement_get(state, unit, model, blendcolor)

# Register SoGLMultiTextureImageElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLMultiTextureImageElement_swigregister(SoGLMultiTextureImageElement)

def SoGLMultiTextureImageElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassTypeId()

def SoGLMultiTextureImageElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassStackIndex()

def SoGLMultiTextureImageElement_createInstance():
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_createInstance()

def SoGLMultiTextureImageElement_initClass():
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_initClass()

def SoGLMultiTextureImageElement_set(state, node, unit, image, model, blendColor):
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_set(state, node, unit, image, model, blendColor)

def SoGLMultiTextureImageElement_restore(state, unit):
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_restore(state, unit)

def SoGLMultiTextureImageElement_get(state, unit, model, blendcolor):
    return Coin_SWIG_Python.SoGLMultiTextureImageElement_get(state, unit, model, blendcolor)

class SoMultiTextureMatrixElement(SoAccumulatedElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_push(self, state)

    @staticmethod
    def set(state, node, unit):
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_set(state, node, unit)

    @staticmethod
    def mult(state, node, unit):
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_mult(state, node, unit)

    @staticmethod
    def get(state, unit):
        return Coin_SWIG_Python.SoMultiTextureMatrixElement_get(state, unit)

# Register SoMultiTextureMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoMultiTextureMatrixElement_swigregister(SoMultiTextureMatrixElement)

def SoMultiTextureMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassTypeId()

def SoMultiTextureMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassStackIndex()

def SoMultiTextureMatrixElement_createInstance():
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_createInstance()

def SoMultiTextureMatrixElement_initClass():
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_initClass()

def SoMultiTextureMatrixElement_set(state, node, unit):
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_set(state, node, unit)

def SoMultiTextureMatrixElement_mult(state, node, unit):
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_mult(state, node, unit)

def SoMultiTextureMatrixElement_get(state, unit):
    return Coin_SWIG_Python.SoMultiTextureMatrixElement_get(state, unit)

class SoGLMultiTextureMatrixElement(SoMultiTextureMatrixElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_init(self, state)

    def push(self, state):
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_push(self, state)

    def pop(self, state, prevTopElement):
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_pop(self, state, prevTopElement)

    def multElt(self, unit):
        return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_multElt(self, unit)

# Register SoGLMultiTextureMatrixElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLMultiTextureMatrixElement_swigregister(SoGLMultiTextureMatrixElement)

def SoGLMultiTextureMatrixElement_getClassTypeId():
    return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassTypeId()

def SoGLMultiTextureMatrixElement_getClassStackIndex():
    return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassStackIndex()

def SoGLMultiTextureMatrixElement_createInstance():
    return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_createInstance()

def SoGLMultiTextureMatrixElement_initClass():
    return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_initClass()

class SbColor4f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbColor4f_swiginit(self, Coin_SWIG_Python.new_SbColor4f(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbColor4f_setValue(self, *args)

    def getValue(self):
        return Coin_SWIG_Python.SbColor4f_getValue(self)

    def setRGB(self, col):
        return Coin_SWIG_Python.SbColor4f_setRGB(self, col)

    def getRGB(self, color):
        return Coin_SWIG_Python.SbColor4f_getRGB(self, color)

    def setHSVValue(self, *args):
        return Coin_SWIG_Python.SbColor4f_setHSVValue(self, *args)

    def getHSVValue(self):
        return Coin_SWIG_Python.SbColor4f_getHSVValue(self)

    def setPackedValue(self, rgba):
        return Coin_SWIG_Python.SbColor4f_setPackedValue(self, rgba)

    def getPackedValue(self):
        return Coin_SWIG_Python.SbColor4f_getPackedValue(self)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbColor4f___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbColor4f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, c):
        return Coin_SWIG_Python.SbColor4f___iadd__(self, c)

    def __isub__(self, c):
        return Coin_SWIG_Python.SbColor4f___isub__(self, c)

    def __add__(self, u):
        return Coin_SWIG_Python.SbColor4f___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbColor4f___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbColor4f___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbColor4f___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbColor4f___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbColor4f___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbColor4f___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbColor4f___getitem__(self, i)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbColor4f

# Register SbColor4f in Coin_SWIG_Python:
Coin_SWIG_Python.SbColor4f_swigregister(SbColor4f)

class SoTextureCombineElement(SoElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCombineElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureCombineElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureCombineElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCombineElement_initClass()
    PRIMARY_COLOR = Coin_SWIG_Python.SoTextureCombineElement_PRIMARY_COLOR
    TEXTURE = Coin_SWIG_Python.SoTextureCombineElement_TEXTURE
    CONSTANT = Coin_SWIG_Python.SoTextureCombineElement_CONSTANT
    PREVIOUS = Coin_SWIG_Python.SoTextureCombineElement_PREVIOUS
    SRC_COLOR = Coin_SWIG_Python.SoTextureCombineElement_SRC_COLOR
    ONE_MINUS_SRC_COLOR = Coin_SWIG_Python.SoTextureCombineElement_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = Coin_SWIG_Python.SoTextureCombineElement_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = Coin_SWIG_Python.SoTextureCombineElement_ONE_MINUS_SRC_ALPHA
    REPLACE = Coin_SWIG_Python.SoTextureCombineElement_REPLACE
    MODULATE = Coin_SWIG_Python.SoTextureCombineElement_MODULATE
    ADD = Coin_SWIG_Python.SoTextureCombineElement_ADD
    ADD_SIGNED = Coin_SWIG_Python.SoTextureCombineElement_ADD_SIGNED
    SUBTRACT = Coin_SWIG_Python.SoTextureCombineElement_SUBTRACT
    INTERPOLATE = Coin_SWIG_Python.SoTextureCombineElement_INTERPOLATE
    DOT3_RGB = Coin_SWIG_Python.SoTextureCombineElement_DOT3_RGB
    DOT3_RGBA = Coin_SWIG_Python.SoTextureCombineElement_DOT3_RGBA

    def init(self, state):
        return Coin_SWIG_Python.SoTextureCombineElement_init(self, state)

    @staticmethod
    def set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
        return Coin_SWIG_Python.SoTextureCombineElement_set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

    @staticmethod
    def isDefault(state, unit):
        return Coin_SWIG_Python.SoTextureCombineElement_isDefault(state, unit)

    @staticmethod
    def get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
        return Coin_SWIG_Python.SoTextureCombineElement_get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

    def push(self, state):
        return Coin_SWIG_Python.SoTextureCombineElement_push(self, state)

    def matches(self, elem):
        return Coin_SWIG_Python.SoTextureCombineElement_matches(self, elem)

    def copyMatchInfo(self):
        return Coin_SWIG_Python.SoTextureCombineElement_copyMatchInfo(self)

    def setElt(self, unit, nodeid, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
        return Coin_SWIG_Python.SoTextureCombineElement_setElt(self, unit, nodeid, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

    @staticmethod
    def apply(state, unit):
        return Coin_SWIG_Python.SoTextureCombineElement_apply(state, unit)

# Register SoTextureCombineElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCombineElement_swigregister(SoTextureCombineElement)

def SoTextureCombineElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCombineElement_getClassTypeId()

def SoTextureCombineElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureCombineElement_getClassStackIndex()

def SoTextureCombineElement_createInstance():
    return Coin_SWIG_Python.SoTextureCombineElement_createInstance()

def SoTextureCombineElement_initClass():
    return Coin_SWIG_Python.SoTextureCombineElement_initClass()

def SoTextureCombineElement_set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
    return Coin_SWIG_Python.SoTextureCombineElement_set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

def SoTextureCombineElement_isDefault(state, unit):
    return Coin_SWIG_Python.SoTextureCombineElement_isDefault(state, unit)

def SoTextureCombineElement_get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
    return Coin_SWIG_Python.SoTextureCombineElement_get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale)

def SoTextureCombineElement_apply(state, unit):
    return Coin_SWIG_Python.SoTextureCombineElement_apply(state, unit)

class SoTextureUnitElement(SoInt32Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureUnitElement_getClassTypeId()

    @staticmethod
    def getClassStackIndex():
        return Coin_SWIG_Python.SoTextureUnitElement_getClassStackIndex()

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTextureUnitElement_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureUnitElement_initClass()

    def init(self, state):
        return Coin_SWIG_Python.SoTextureUnitElement_init(self, state)

    @staticmethod
    def set(state, node, units):
        return Coin_SWIG_Python.SoTextureUnitElement_set(state, node, units)

    @staticmethod
    def get(state):
        return Coin_SWIG_Python.SoTextureUnitElement_get(state)

# Register SoTextureUnitElement in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureUnitElement_swigregister(SoTextureUnitElement)

def SoTextureUnitElement_getClassTypeId():
    return Coin_SWIG_Python.SoTextureUnitElement_getClassTypeId()

def SoTextureUnitElement_getClassStackIndex():
    return Coin_SWIG_Python.SoTextureUnitElement_getClassStackIndex()

def SoTextureUnitElement_createInstance():
    return Coin_SWIG_Python.SoTextureUnitElement_createInstance()

def SoTextureUnitElement_initClass():
    return Coin_SWIG_Python.SoTextureUnitElement_initClass()

def SoTextureUnitElement_set(state, node, units):
    return Coin_SWIG_Python.SoTextureUnitElement_set(state, node, units)

def SoTextureUnitElement_get(state):
    return Coin_SWIG_Python.SoTextureUnitElement_get(state)

class SoEngine(SoFieldContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoEngine_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoEngine_initClasses()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoEngine_getClassTypeId()

    def evaluateWrapper(self):
        return Coin_SWIG_Python.SoEngine_evaluateWrapper(self)

    def getOutputs(self, l):
        return Coin_SWIG_Python.SoEngine_getOutputs(self, l)

    def getOutput(self, outputname):
        return Coin_SWIG_Python.SoEngine_getOutput(self, outputname)

    def getOutputName(self, output, outputname):
        return Coin_SWIG_Python.SoEngine_getOutputName(self, output, outputname)

    def getOutputData(self):
        return Coin_SWIG_Python.SoEngine_getOutputData(self)

    @staticmethod
    def getByName(*args):
        return Coin_SWIG_Python.SoEngine_getByName(*args)

    def isNotifying(self):
        return Coin_SWIG_Python.SoEngine_isNotifying(self)

    def notify(self, nl):
        return Coin_SWIG_Python.SoEngine_notify(self, nl)

    def copy(self):
        return Coin_SWIG_Python.SoEngine_copy(self)

    def copyThroughConnection(self):
        return Coin_SWIG_Python.SoEngine_copyThroughConnection(self)

    def shouldCopy(self):
        return Coin_SWIG_Python.SoEngine_shouldCopy(self)

    def writeInstance(self, out):
        return Coin_SWIG_Python.SoEngine_writeInstance(self, out)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngine


    def __getattr__(self, name):
        try:
            return SoFieldContainer.__getattr__(self, name)
        except AttributeError, e:
            out = self.getOutput(SbName(name))
            if out is None:
                raise e
            return out

    def __setattr__(self,name,value):
        if name == 'this':
            return SoFieldContainer.__setattr__(self, name, value)
        out = self.getOutput(SbName(name))
        if out is None:
            return SoFieldContainer.__setattr__(self, name, value)
        raise AttributeError('Cannot set output %s on engine %s' %(name,self.__class__.__name__))



# Register SoEngine in Coin_SWIG_Python:
Coin_SWIG_Python.SoEngine_swigregister(SoEngine)

def SoEngine_initClass():
    return Coin_SWIG_Python.SoEngine_initClass()

def SoEngine_initClasses():
    return Coin_SWIG_Python.SoEngine_initClasses()

def SoEngine_getClassTypeId():
    return Coin_SWIG_Python.SoEngine_getClassTypeId()

def SoEngine_getByName(*args):
    return Coin_SWIG_Python.SoEngine_getByName(*args)

class SoEngineOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoEngineOutput_swiginit(self, Coin_SWIG_Python.new_SoEngineOutput())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineOutput

    def getConnectionType(self):
        return Coin_SWIG_Python.SoEngineOutput_getConnectionType(self)

    def getForwardConnections(self, fl):
        return Coin_SWIG_Python.SoEngineOutput_getForwardConnections(self, fl)

    def enable(self, flag):
        return Coin_SWIG_Python.SoEngineOutput_enable(self, flag)

    def isEnabled(self):
        return Coin_SWIG_Python.SoEngineOutput_isEnabled(self)

    def getContainer(self):
        return Coin_SWIG_Python.SoEngineOutput_getContainer(self)

    def getNodeContainer(self):
        return Coin_SWIG_Python.SoEngineOutput_getNodeContainer(self)

    def isNodeEngineOutput(self):
        return Coin_SWIG_Python.SoEngineOutput_isNodeEngineOutput(self)

    def setContainer(self, engine):
        return Coin_SWIG_Python.SoEngineOutput_setContainer(self, engine)

    def setNodeContainer(self, nodeengine):
        return Coin_SWIG_Python.SoEngineOutput_setNodeContainer(self, nodeengine)

    def addConnection(self, f):
        return Coin_SWIG_Python.SoEngineOutput_addConnection(self, f)

    def removeConnection(self, f):
        return Coin_SWIG_Python.SoEngineOutput_removeConnection(self, f)

    def getNumConnections(self):
        return Coin_SWIG_Python.SoEngineOutput_getNumConnections(self)

    def prepareToWrite(self):
        return Coin_SWIG_Python.SoEngineOutput_prepareToWrite(self)

    def doneWriting(self):
        return Coin_SWIG_Python.SoEngineOutput_doneWriting(self)

    def touchSlaves(self, nl, donotify):
        return Coin_SWIG_Python.SoEngineOutput_touchSlaves(self, nl, donotify)

    def getFieldContainer(self):
        return Coin_SWIG_Python.SoEngineOutput_getFieldContainer(self)

# Register SoEngineOutput in Coin_SWIG_Python:
Coin_SWIG_Python.SoEngineOutput_swigregister(SoEngineOutput)

class SoEngineOutputData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoEngineOutputData_swiginit(self, Coin_SWIG_Python.new_SoEngineOutputData(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineOutputData

    def addOutput(self, *args):
        return Coin_SWIG_Python.SoEngineOutputData_addOutput(self, *args)

    def getNumOutputs(self):
        return Coin_SWIG_Python.SoEngineOutputData_getNumOutputs(self)

    def getOutputName(self, index):
        return Coin_SWIG_Python.SoEngineOutputData_getOutputName(self, index)

    def getOutput(self, *args):
        return Coin_SWIG_Python.SoEngineOutputData_getOutput(self, *args)

    def getIndex(self, *args):
        return Coin_SWIG_Python.SoEngineOutputData_getIndex(self, *args)

    def getType(self, index):
        return Coin_SWIG_Python.SoEngineOutputData_getType(self, index)

    def readDescriptions(self, _in, engine):
        return Coin_SWIG_Python.SoEngineOutputData_readDescriptions(self, _in, engine)

    def writeDescriptions(self, out, engine):
        return Coin_SWIG_Python.SoEngineOutputData_writeDescriptions(self, out, engine)

# Register SoEngineOutputData in Coin_SWIG_Python:
Coin_SWIG_Python.SoEngineOutputData_swigregister(SoEngineOutputData)

class SoMFBool(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFBool_swiginit(self, Coin_SWIG_Python.new_SoMFBool())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFBool

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFBool_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFBool_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFBool_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFBool_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFBool_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFBool_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFBool):
             val = args[1].getValues()
             return _coin.SoMFBool_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFBool_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFBool):
             val = args[2].getValues()
             return _coin.SoMFBool_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFBool_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFBool_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFBool_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFBool___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFBool___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFBool_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFBool_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFBool_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFBool_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFBool_setValue(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFBool___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFBool___setitem__(self, i, value)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFBool_getValues(self, i)

# Register SoMFBool in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFBool_swigregister(SoMFBool)

def SoMFBool_createInstance():
    return Coin_SWIG_Python.SoMFBool_createInstance()

def SoMFBool_getClassTypeId():
    return Coin_SWIG_Python.SoMFBool_getClassTypeId()

def SoMFBool_initClass():
    return Coin_SWIG_Python.SoMFBool_initClass()

class SoMFEnum(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFEnum_swiginit(self, Coin_SWIG_Python.new_SoMFEnum())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFEnum

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFEnum_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFEnum_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFEnum_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFEnum_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFEnum_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFEnum_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFEnum):
             val = args[1].getValues()
             return _coin.SoMFEnum_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFEnum_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFEnum):
             val = args[2].getValues()
             return _coin.SoMFEnum_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFEnum_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFEnum_setValues(*args)



    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFEnum___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFEnum___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFEnum_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFEnum_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFEnum_initClass()

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFEnum_set1Value(self, *args)

    def setEnums(self, num, values, names):
        return Coin_SWIG_Python.SoMFEnum_setEnums(self, num, values, names)

    def getNumEnums(self):
        return Coin_SWIG_Python.SoMFEnum_getNumEnums(self)

    def getEnum(self, idx, name):
        return Coin_SWIG_Python.SoMFEnum_getEnum(self, idx, name)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFEnum___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFEnum___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFEnum_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFEnum_getValues(self, i)

# Register SoMFEnum in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFEnum_swigregister(SoMFEnum)

def SoMFEnum_createInstance():
    return Coin_SWIG_Python.SoMFEnum_createInstance()

def SoMFEnum_getClassTypeId():
    return Coin_SWIG_Python.SoMFEnum_getClassTypeId()

def SoMFEnum_initClass():
    return Coin_SWIG_Python.SoMFEnum_initClass()

class SoBoolOperation(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBoolOperation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBoolOperation_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoBoolOperation_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoBoolOperation_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoBoolOperation_createInstance()
    CLEAR = Coin_SWIG_Python.SoBoolOperation_CLEAR
    SET = Coin_SWIG_Python.SoBoolOperation_SET
    A = Coin_SWIG_Python.SoBoolOperation_A
    NOT_A = Coin_SWIG_Python.SoBoolOperation_NOT_A
    B = Coin_SWIG_Python.SoBoolOperation_B
    NOT_B = Coin_SWIG_Python.SoBoolOperation_NOT_B
    A_OR_B = Coin_SWIG_Python.SoBoolOperation_A_OR_B
    NOT_A_OR_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_OR_B
    A_OR_NOT_B = Coin_SWIG_Python.SoBoolOperation_A_OR_NOT_B
    NOT_A_OR_NOT_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_OR_NOT_B
    A_AND_B = Coin_SWIG_Python.SoBoolOperation_A_AND_B
    NOT_A_AND_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_AND_B
    A_AND_NOT_B = Coin_SWIG_Python.SoBoolOperation_A_AND_NOT_B
    NOT_A_AND_NOT_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_AND_NOT_B
    A_EQUALS_B = Coin_SWIG_Python.SoBoolOperation_A_EQUALS_B
    A_NOT_EQUALS_B = Coin_SWIG_Python.SoBoolOperation_A_NOT_EQUALS_B
    a = property(Coin_SWIG_Python.SoBoolOperation_a_get, Coin_SWIG_Python.SoBoolOperation_a_set)
    b = property(Coin_SWIG_Python.SoBoolOperation_b_get, Coin_SWIG_Python.SoBoolOperation_b_set)
    operation = property(Coin_SWIG_Python.SoBoolOperation_operation_get, Coin_SWIG_Python.SoBoolOperation_operation_set)
    output = property(Coin_SWIG_Python.SoBoolOperation_output_get, Coin_SWIG_Python.SoBoolOperation_output_set)
    inverse = property(Coin_SWIG_Python.SoBoolOperation_inverse_get, Coin_SWIG_Python.SoBoolOperation_inverse_set)

    def __init__(self):
        Coin_SWIG_Python.SoBoolOperation_swiginit(self, Coin_SWIG_Python.new_SoBoolOperation())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBoolOperation_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBoolOperation

# Register SoBoolOperation in Coin_SWIG_Python:
Coin_SWIG_Python.SoBoolOperation_swigregister(SoBoolOperation)

def SoBoolOperation_getClassTypeId():
    return Coin_SWIG_Python.SoBoolOperation_getClassTypeId()

def SoBoolOperation_createInstance():
    return Coin_SWIG_Python.SoBoolOperation_createInstance()

def SoBoolOperation_initClass():
    return Coin_SWIG_Python.SoBoolOperation_initClass()

class SoMFFloat(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFFloat_swiginit(self, Coin_SWIG_Python.new_SoMFFloat())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFFloat

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFFloat_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFFloat_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFFloat_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFFloat_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFFloat_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFFloat_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFFloat):
             val = args[1].getValues()
             return _coin.SoMFFloat_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFFloat_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFFloat):
             val = args[2].getValues()
             return _coin.SoMFFloat_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFFloat_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFFloat_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFFloat_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFFloat___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFFloat___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFFloat_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFFloat_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFFloat_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFFloat_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFFloat___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFFloat___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFFloat_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFFloat_getValues(self, i)

# Register SoMFFloat in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFFloat_swigregister(SoMFFloat)

def SoMFFloat_createInstance():
    return Coin_SWIG_Python.SoMFFloat_createInstance()

def SoMFFloat_getClassTypeId():
    return Coin_SWIG_Python.SoMFFloat_getClassTypeId()

def SoMFFloat_initClass():
    return Coin_SWIG_Python.SoMFFloat_initClass()

class SoMFVec3f(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec3f_swiginit(self, Coin_SWIG_Python.new_SoMFVec3f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec3f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec3f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec3f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec3f_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec3f_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec3f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec3f___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec3f_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec3f_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec3f_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec3f_initClass()

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec3f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec3f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec3f_setValues(*args)



    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec3f_set1Value(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFVec3f___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFVec3f___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec3f_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFVec3f_getValues(self, i)

# Register SoMFVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec3f_swigregister(SoMFVec3f)

def SoMFVec3f_createInstance():
    return Coin_SWIG_Python.SoMFVec3f_createInstance()

def SoMFVec3f_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec3f_getClassTypeId()

def SoMFVec3f_initClass():
    return Coin_SWIG_Python.SoMFVec3f_initClass()

class SoMFString(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFString_swiginit(self, Coin_SWIG_Python.new_SoMFString())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFString

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFString_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFString_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFString_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFString_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFString_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFString_find(self, value, addifnotfound)

    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFString_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFString___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFString___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFString_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFString_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFString_initClass()

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFString_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFString_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFString_setValues(*args)



    def deleteText(self, fromline, fromchar, toline, tochar):
        return Coin_SWIG_Python.SoMFString_deleteText(self, fromline, fromchar, toline, tochar)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFString___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFString___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFString_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFString_getValues(self, i)

# Register SoMFString in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFString_swigregister(SoMFString)

def SoMFString_createInstance():
    return Coin_SWIG_Python.SoMFString_createInstance()

def SoMFString_getClassTypeId():
    return Coin_SWIG_Python.SoMFString_getClassTypeId()

def SoMFString_initClass():
    return Coin_SWIG_Python.SoMFString_initClass()

class SoCalculator(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCalculator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCalculator_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoCalculator_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoCalculator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoCalculator_createInstance()
    a = property(Coin_SWIG_Python.SoCalculator_a_get, Coin_SWIG_Python.SoCalculator_a_set)
    b = property(Coin_SWIG_Python.SoCalculator_b_get, Coin_SWIG_Python.SoCalculator_b_set)
    c = property(Coin_SWIG_Python.SoCalculator_c_get, Coin_SWIG_Python.SoCalculator_c_set)
    d = property(Coin_SWIG_Python.SoCalculator_d_get, Coin_SWIG_Python.SoCalculator_d_set)
    e = property(Coin_SWIG_Python.SoCalculator_e_get, Coin_SWIG_Python.SoCalculator_e_set)
    f = property(Coin_SWIG_Python.SoCalculator_f_get, Coin_SWIG_Python.SoCalculator_f_set)
    g = property(Coin_SWIG_Python.SoCalculator_g_get, Coin_SWIG_Python.SoCalculator_g_set)
    h = property(Coin_SWIG_Python.SoCalculator_h_get, Coin_SWIG_Python.SoCalculator_h_set)
    A = property(Coin_SWIG_Python.SoCalculator_A_get, Coin_SWIG_Python.SoCalculator_A_set)
    B = property(Coin_SWIG_Python.SoCalculator_B_get, Coin_SWIG_Python.SoCalculator_B_set)
    C = property(Coin_SWIG_Python.SoCalculator_C_get, Coin_SWIG_Python.SoCalculator_C_set)
    D = property(Coin_SWIG_Python.SoCalculator_D_get, Coin_SWIG_Python.SoCalculator_D_set)
    E = property(Coin_SWIG_Python.SoCalculator_E_get, Coin_SWIG_Python.SoCalculator_E_set)
    F = property(Coin_SWIG_Python.SoCalculator_F_get, Coin_SWIG_Python.SoCalculator_F_set)
    G = property(Coin_SWIG_Python.SoCalculator_G_get, Coin_SWIG_Python.SoCalculator_G_set)
    H = property(Coin_SWIG_Python.SoCalculator_H_get, Coin_SWIG_Python.SoCalculator_H_set)
    expression = property(Coin_SWIG_Python.SoCalculator_expression_get, Coin_SWIG_Python.SoCalculator_expression_set)
    oa = property(Coin_SWIG_Python.SoCalculator_oa_get, Coin_SWIG_Python.SoCalculator_oa_set)
    ob = property(Coin_SWIG_Python.SoCalculator_ob_get, Coin_SWIG_Python.SoCalculator_ob_set)
    oc = property(Coin_SWIG_Python.SoCalculator_oc_get, Coin_SWIG_Python.SoCalculator_oc_set)
    od = property(Coin_SWIG_Python.SoCalculator_od_get, Coin_SWIG_Python.SoCalculator_od_set)
    oA = property(Coin_SWIG_Python.SoCalculator_oA_get, Coin_SWIG_Python.SoCalculator_oA_set)
    oB = property(Coin_SWIG_Python.SoCalculator_oB_get, Coin_SWIG_Python.SoCalculator_oB_set)
    oC = property(Coin_SWIG_Python.SoCalculator_oC_get, Coin_SWIG_Python.SoCalculator_oC_set)
    oD = property(Coin_SWIG_Python.SoCalculator_oD_get, Coin_SWIG_Python.SoCalculator_oD_set)

    def __init__(self):
        Coin_SWIG_Python.SoCalculator_swiginit(self, Coin_SWIG_Python.new_SoCalculator())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCalculator_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCalculator

# Register SoCalculator in Coin_SWIG_Python:
Coin_SWIG_Python.SoCalculator_swigregister(SoCalculator)

def SoCalculator_getClassTypeId():
    return Coin_SWIG_Python.SoCalculator_getClassTypeId()

def SoCalculator_createInstance():
    return Coin_SWIG_Python.SoCalculator_createInstance()

def SoCalculator_initClass():
    return Coin_SWIG_Python.SoCalculator_initClass()

class SoMFVec2f(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec2f_swiginit(self, Coin_SWIG_Python.new_SoMFVec2f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec2f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec2f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec2f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec2f_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec2f_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec2f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec2f___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec2f_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec2f_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec2f_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec2f_initClass()

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec2f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec2f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec2f_setValues(*args)



    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec2f_set1Value(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFVec2f___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFVec2f___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec2f_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFVec2f_getValues(self, i)

# Register SoMFVec2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec2f_swigregister(SoMFVec2f)

def SoMFVec2f_createInstance():
    return Coin_SWIG_Python.SoMFVec2f_createInstance()

def SoMFVec2f_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec2f_getClassTypeId()

def SoMFVec2f_initClass():
    return Coin_SWIG_Python.SoMFVec2f_initClass()

class SoComposeVec2f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComposeVec2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComposeVec2f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComposeVec2f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComposeVec2f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComposeVec2f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoComposeVec2f_swiginit(self, Coin_SWIG_Python.new_SoComposeVec2f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComposeVec2f_initClass()
    x = property(Coin_SWIG_Python.SoComposeVec2f_x_get, Coin_SWIG_Python.SoComposeVec2f_x_set)
    y = property(Coin_SWIG_Python.SoComposeVec2f_y_get, Coin_SWIG_Python.SoComposeVec2f_y_set)
    vector = property(Coin_SWIG_Python.SoComposeVec2f_vector_get, Coin_SWIG_Python.SoComposeVec2f_vector_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeVec2f

# Register SoComposeVec2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoComposeVec2f_swigregister(SoComposeVec2f)

def SoComposeVec2f_getClassTypeId():
    return Coin_SWIG_Python.SoComposeVec2f_getClassTypeId()

def SoComposeVec2f_createInstance():
    return Coin_SWIG_Python.SoComposeVec2f_createInstance()

def SoComposeVec2f_initClass():
    return Coin_SWIG_Python.SoComposeVec2f_initClass()

class SoComposeVec3f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComposeVec3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComposeVec3f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComposeVec3f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComposeVec3f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComposeVec3f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoComposeVec3f_swiginit(self, Coin_SWIG_Python.new_SoComposeVec3f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComposeVec3f_initClass()
    x = property(Coin_SWIG_Python.SoComposeVec3f_x_get, Coin_SWIG_Python.SoComposeVec3f_x_set)
    y = property(Coin_SWIG_Python.SoComposeVec3f_y_get, Coin_SWIG_Python.SoComposeVec3f_y_set)
    z = property(Coin_SWIG_Python.SoComposeVec3f_z_get, Coin_SWIG_Python.SoComposeVec3f_z_set)
    vector = property(Coin_SWIG_Python.SoComposeVec3f_vector_get, Coin_SWIG_Python.SoComposeVec3f_vector_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeVec3f

# Register SoComposeVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoComposeVec3f_swigregister(SoComposeVec3f)

def SoComposeVec3f_getClassTypeId():
    return Coin_SWIG_Python.SoComposeVec3f_getClassTypeId()

def SoComposeVec3f_createInstance():
    return Coin_SWIG_Python.SoComposeVec3f_createInstance()

def SoComposeVec3f_initClass():
    return Coin_SWIG_Python.SoComposeVec3f_initClass()

class SoMFVec4f(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4f_swiginit(self, Coin_SWIG_Python.new_SoMFVec4f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4f_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4f_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4f___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4f_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4f_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4f_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4f_initClass()

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec4f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec4f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec4f_setValues(*args)



    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4f_set1Value(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFVec4f___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFVec4f___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4f_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFVec4f_getValues(self, i)

# Register SoMFVec4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4f_swigregister(SoMFVec4f)

def SoMFVec4f_createInstance():
    return Coin_SWIG_Python.SoMFVec4f_createInstance()

def SoMFVec4f_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4f_getClassTypeId()

def SoMFVec4f_initClass():
    return Coin_SWIG_Python.SoMFVec4f_initClass()

class SoComposeVec4f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComposeVec4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComposeVec4f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComposeVec4f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComposeVec4f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComposeVec4f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoComposeVec4f_swiginit(self, Coin_SWIG_Python.new_SoComposeVec4f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComposeVec4f_initClass()
    x = property(Coin_SWIG_Python.SoComposeVec4f_x_get, Coin_SWIG_Python.SoComposeVec4f_x_set)
    y = property(Coin_SWIG_Python.SoComposeVec4f_y_get, Coin_SWIG_Python.SoComposeVec4f_y_set)
    z = property(Coin_SWIG_Python.SoComposeVec4f_z_get, Coin_SWIG_Python.SoComposeVec4f_z_set)
    w = property(Coin_SWIG_Python.SoComposeVec4f_w_get, Coin_SWIG_Python.SoComposeVec4f_w_set)
    vector = property(Coin_SWIG_Python.SoComposeVec4f_vector_get, Coin_SWIG_Python.SoComposeVec4f_vector_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeVec4f

# Register SoComposeVec4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoComposeVec4f_swigregister(SoComposeVec4f)

def SoComposeVec4f_getClassTypeId():
    return Coin_SWIG_Python.SoComposeVec4f_getClassTypeId()

def SoComposeVec4f_createInstance():
    return Coin_SWIG_Python.SoComposeVec4f_createInstance()

def SoComposeVec4f_initClass():
    return Coin_SWIG_Python.SoComposeVec4f_initClass()

class SoDecomposeVec2f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecomposeVec2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDecomposeVec2f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoDecomposeVec2f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoDecomposeVec2f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecomposeVec2f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoDecomposeVec2f_swiginit(self, Coin_SWIG_Python.new_SoDecomposeVec2f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecomposeVec2f_initClass()
    vector = property(Coin_SWIG_Python.SoDecomposeVec2f_vector_get, Coin_SWIG_Python.SoDecomposeVec2f_vector_set)
    x = property(Coin_SWIG_Python.SoDecomposeVec2f_x_get, Coin_SWIG_Python.SoDecomposeVec2f_x_set)
    y = property(Coin_SWIG_Python.SoDecomposeVec2f_y_get, Coin_SWIG_Python.SoDecomposeVec2f_y_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeVec2f

# Register SoDecomposeVec2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecomposeVec2f_swigregister(SoDecomposeVec2f)

def SoDecomposeVec2f_getClassTypeId():
    return Coin_SWIG_Python.SoDecomposeVec2f_getClassTypeId()

def SoDecomposeVec2f_createInstance():
    return Coin_SWIG_Python.SoDecomposeVec2f_createInstance()

def SoDecomposeVec2f_initClass():
    return Coin_SWIG_Python.SoDecomposeVec2f_initClass()

class SoDecomposeVec3f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecomposeVec3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDecomposeVec3f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoDecomposeVec3f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoDecomposeVec3f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecomposeVec3f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoDecomposeVec3f_swiginit(self, Coin_SWIG_Python.new_SoDecomposeVec3f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecomposeVec3f_initClass()
    vector = property(Coin_SWIG_Python.SoDecomposeVec3f_vector_get, Coin_SWIG_Python.SoDecomposeVec3f_vector_set)
    x = property(Coin_SWIG_Python.SoDecomposeVec3f_x_get, Coin_SWIG_Python.SoDecomposeVec3f_x_set)
    y = property(Coin_SWIG_Python.SoDecomposeVec3f_y_get, Coin_SWIG_Python.SoDecomposeVec3f_y_set)
    z = property(Coin_SWIG_Python.SoDecomposeVec3f_z_get, Coin_SWIG_Python.SoDecomposeVec3f_z_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeVec3f

# Register SoDecomposeVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecomposeVec3f_swigregister(SoDecomposeVec3f)

def SoDecomposeVec3f_getClassTypeId():
    return Coin_SWIG_Python.SoDecomposeVec3f_getClassTypeId()

def SoDecomposeVec3f_createInstance():
    return Coin_SWIG_Python.SoDecomposeVec3f_createInstance()

def SoDecomposeVec3f_initClass():
    return Coin_SWIG_Python.SoDecomposeVec3f_initClass()

class SoDecomposeVec4f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecomposeVec4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDecomposeVec4f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoDecomposeVec4f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoDecomposeVec4f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecomposeVec4f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoDecomposeVec4f_swiginit(self, Coin_SWIG_Python.new_SoDecomposeVec4f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecomposeVec4f_initClass()
    vector = property(Coin_SWIG_Python.SoDecomposeVec4f_vector_get, Coin_SWIG_Python.SoDecomposeVec4f_vector_set)
    x = property(Coin_SWIG_Python.SoDecomposeVec4f_x_get, Coin_SWIG_Python.SoDecomposeVec4f_x_set)
    y = property(Coin_SWIG_Python.SoDecomposeVec4f_y_get, Coin_SWIG_Python.SoDecomposeVec4f_y_set)
    z = property(Coin_SWIG_Python.SoDecomposeVec4f_z_get, Coin_SWIG_Python.SoDecomposeVec4f_z_set)
    w = property(Coin_SWIG_Python.SoDecomposeVec4f_w_get, Coin_SWIG_Python.SoDecomposeVec4f_w_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeVec4f

# Register SoDecomposeVec4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecomposeVec4f_swigregister(SoDecomposeVec4f)

def SoDecomposeVec4f_getClassTypeId():
    return Coin_SWIG_Python.SoDecomposeVec4f_getClassTypeId()

def SoDecomposeVec4f_createInstance():
    return Coin_SWIG_Python.SoDecomposeVec4f_createInstance()

def SoDecomposeVec4f_initClass():
    return Coin_SWIG_Python.SoDecomposeVec4f_initClass()

class SoComposeRotation(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComposeRotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComposeRotation_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComposeRotation_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComposeRotation_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComposeRotation_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoComposeRotation_swiginit(self, Coin_SWIG_Python.new_SoComposeRotation())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComposeRotation_initClass()
    axis = property(Coin_SWIG_Python.SoComposeRotation_axis_get, Coin_SWIG_Python.SoComposeRotation_axis_set)
    angle = property(Coin_SWIG_Python.SoComposeRotation_angle_get, Coin_SWIG_Python.SoComposeRotation_angle_set)
    rotation = property(Coin_SWIG_Python.SoComposeRotation_rotation_get, Coin_SWIG_Python.SoComposeRotation_rotation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeRotation

# Register SoComposeRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoComposeRotation_swigregister(SoComposeRotation)

def SoComposeRotation_getClassTypeId():
    return Coin_SWIG_Python.SoComposeRotation_getClassTypeId()

def SoComposeRotation_createInstance():
    return Coin_SWIG_Python.SoComposeRotation_createInstance()

def SoComposeRotation_initClass():
    return Coin_SWIG_Python.SoComposeRotation_initClass()

class SoMFRotation(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFRotation_swiginit(self, Coin_SWIG_Python.new_SoMFRotation())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFRotation

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFRotation_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFRotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFRotation_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFRotation_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFRotation_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFRotation_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFRotation___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFRotation___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFRotation_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFRotation_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFRotation_initClass()

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFRotation_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFRotation_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFRotation_setValues(*args)



    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFRotation_set1Value(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFRotation___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFRotation___setitem__(self, i, value)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFRotation_getValues(self, i)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFRotation_setValue(self, *args)

# Register SoMFRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFRotation_swigregister(SoMFRotation)

def SoMFRotation_createInstance():
    return Coin_SWIG_Python.SoMFRotation_createInstance()

def SoMFRotation_getClassTypeId():
    return Coin_SWIG_Python.SoMFRotation_getClassTypeId()

def SoMFRotation_initClass():
    return Coin_SWIG_Python.SoMFRotation_initClass()

class SoDecomposeRotation(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecomposeRotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDecomposeRotation_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoDecomposeRotation_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoDecomposeRotation_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecomposeRotation_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoDecomposeRotation_swiginit(self, Coin_SWIG_Python.new_SoDecomposeRotation())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecomposeRotation_initClass()
    rotation = property(Coin_SWIG_Python.SoDecomposeRotation_rotation_get, Coin_SWIG_Python.SoDecomposeRotation_rotation_set)
    axis = property(Coin_SWIG_Python.SoDecomposeRotation_axis_get, Coin_SWIG_Python.SoDecomposeRotation_axis_set)
    angle = property(Coin_SWIG_Python.SoDecomposeRotation_angle_get, Coin_SWIG_Python.SoDecomposeRotation_angle_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeRotation

# Register SoDecomposeRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecomposeRotation_swigregister(SoDecomposeRotation)

def SoDecomposeRotation_getClassTypeId():
    return Coin_SWIG_Python.SoDecomposeRotation_getClassTypeId()

def SoDecomposeRotation_createInstance():
    return Coin_SWIG_Python.SoDecomposeRotation_createInstance()

def SoDecomposeRotation_initClass():
    return Coin_SWIG_Python.SoDecomposeRotation_initClass()

class SoComposeMatrix(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComposeMatrix_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComposeMatrix_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComposeMatrix_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComposeMatrix_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComposeMatrix_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoComposeMatrix_swiginit(self, Coin_SWIG_Python.new_SoComposeMatrix())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComposeMatrix_initClass()
    translation = property(Coin_SWIG_Python.SoComposeMatrix_translation_get, Coin_SWIG_Python.SoComposeMatrix_translation_set)
    rotation = property(Coin_SWIG_Python.SoComposeMatrix_rotation_get, Coin_SWIG_Python.SoComposeMatrix_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoComposeMatrix_scaleFactor_get, Coin_SWIG_Python.SoComposeMatrix_scaleFactor_set)
    scaleOrientation = property(Coin_SWIG_Python.SoComposeMatrix_scaleOrientation_get, Coin_SWIG_Python.SoComposeMatrix_scaleOrientation_set)
    center = property(Coin_SWIG_Python.SoComposeMatrix_center_get, Coin_SWIG_Python.SoComposeMatrix_center_set)
    matrix = property(Coin_SWIG_Python.SoComposeMatrix_matrix_get, Coin_SWIG_Python.SoComposeMatrix_matrix_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeMatrix

# Register SoComposeMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SoComposeMatrix_swigregister(SoComposeMatrix)

def SoComposeMatrix_getClassTypeId():
    return Coin_SWIG_Python.SoComposeMatrix_getClassTypeId()

def SoComposeMatrix_createInstance():
    return Coin_SWIG_Python.SoComposeMatrix_createInstance()

def SoComposeMatrix_initClass():
    return Coin_SWIG_Python.SoComposeMatrix_initClass()

class SoMFMatrix(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFMatrix_swiginit(self, Coin_SWIG_Python.new_SoMFMatrix())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFMatrix

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFMatrix_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFMatrix_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFMatrix_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFMatrix_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFMatrix_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFMatrix_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFMatrix_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFMatrix_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFMatrix_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFMatrix_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFMatrix___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFMatrix___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFMatrix_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFMatrix_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFMatrix_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFMatrix___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFMatrix___setitem__(self, i, value)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFMatrix_getValues(self, i)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFMatrix_setValue(self, *args)

# Register SoMFMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFMatrix_swigregister(SoMFMatrix)

def SoMFMatrix_createInstance():
    return Coin_SWIG_Python.SoMFMatrix_createInstance()

def SoMFMatrix_getClassTypeId():
    return Coin_SWIG_Python.SoMFMatrix_getClassTypeId()

def SoMFMatrix_initClass():
    return Coin_SWIG_Python.SoMFMatrix_initClass()

class SoDecomposeMatrix(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDecomposeMatrix_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDecomposeMatrix_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoDecomposeMatrix_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoDecomposeMatrix_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoDecomposeMatrix_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoDecomposeMatrix_swiginit(self, Coin_SWIG_Python.new_SoDecomposeMatrix())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDecomposeMatrix_initClass()
    matrix = property(Coin_SWIG_Python.SoDecomposeMatrix_matrix_get, Coin_SWIG_Python.SoDecomposeMatrix_matrix_set)
    center = property(Coin_SWIG_Python.SoDecomposeMatrix_center_get, Coin_SWIG_Python.SoDecomposeMatrix_center_set)
    translation = property(Coin_SWIG_Python.SoDecomposeMatrix_translation_get, Coin_SWIG_Python.SoDecomposeMatrix_translation_set)
    rotation = property(Coin_SWIG_Python.SoDecomposeMatrix_rotation_get, Coin_SWIG_Python.SoDecomposeMatrix_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoDecomposeMatrix_scaleFactor_get, Coin_SWIG_Python.SoDecomposeMatrix_scaleFactor_set)
    scaleOrientation = property(Coin_SWIG_Python.SoDecomposeMatrix_scaleOrientation_get, Coin_SWIG_Python.SoDecomposeMatrix_scaleOrientation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeMatrix

# Register SoDecomposeMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SoDecomposeMatrix_swigregister(SoDecomposeMatrix)

def SoDecomposeMatrix_getClassTypeId():
    return Coin_SWIG_Python.SoDecomposeMatrix_getClassTypeId()

def SoDecomposeMatrix_createInstance():
    return Coin_SWIG_Python.SoDecomposeMatrix_createInstance()

def SoDecomposeMatrix_initClass():
    return Coin_SWIG_Python.SoDecomposeMatrix_initClass()

class SoComposeRotationFromTo(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComposeRotationFromTo_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComposeRotationFromTo_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComposeRotationFromTo_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComposeRotationFromTo_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComposeRotationFromTo_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoComposeRotationFromTo_swiginit(self, Coin_SWIG_Python.new_SoComposeRotationFromTo())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComposeRotationFromTo_initClass()
    srcFrom = property(Coin_SWIG_Python.SoComposeRotationFromTo_srcFrom_get, Coin_SWIG_Python.SoComposeRotationFromTo_srcFrom_set)
    destTo = property(Coin_SWIG_Python.SoComposeRotationFromTo_destTo_get, Coin_SWIG_Python.SoComposeRotationFromTo_destTo_set)
    rotation = property(Coin_SWIG_Python.SoComposeRotationFromTo_rotation_get, Coin_SWIG_Python.SoComposeRotationFromTo_rotation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeRotationFromTo

# Register SoComposeRotationFromTo in Coin_SWIG_Python:
Coin_SWIG_Python.SoComposeRotationFromTo_swigregister(SoComposeRotationFromTo)

def SoComposeRotationFromTo_getClassTypeId():
    return Coin_SWIG_Python.SoComposeRotationFromTo_getClassTypeId()

def SoComposeRotationFromTo_createInstance():
    return Coin_SWIG_Python.SoComposeRotationFromTo_createInstance()

def SoComposeRotationFromTo_initClass():
    return Coin_SWIG_Python.SoComposeRotationFromTo_initClass()

class SoSFPath(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFPath_swiginit(self, Coin_SWIG_Python.new_SoSFPath())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFPath

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFPath_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFPath_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFPath_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFPath_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFPath_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFPath_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFPath___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFPath___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFPath_initClass()

    def notify(self, l):
        return Coin_SWIG_Python.SoSFPath_notify(self, l)

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoSFPath_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoSFPath_referencesCopy(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFPath_setValue(self, *args)

# Register SoSFPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFPath_swigregister(SoSFPath)

def SoSFPath_createInstance():
    return Coin_SWIG_Python.SoSFPath_createInstance()

def SoSFPath_getClassTypeId():
    return Coin_SWIG_Python.SoSFPath_getClassTypeId()

def SoSFPath_initClass():
    return Coin_SWIG_Python.SoSFPath_initClass()

class SoComputeBoundingBox(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoComputeBoundingBox_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoComputeBoundingBox_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoComputeBoundingBox_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoComputeBoundingBox_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoComputeBoundingBox_createInstance()
    node = property(Coin_SWIG_Python.SoComputeBoundingBox_node_get, Coin_SWIG_Python.SoComputeBoundingBox_node_set)
    path = property(Coin_SWIG_Python.SoComputeBoundingBox_path_get, Coin_SWIG_Python.SoComputeBoundingBox_path_set)
    min = property(Coin_SWIG_Python.SoComputeBoundingBox_min_get, Coin_SWIG_Python.SoComputeBoundingBox_min_set)
    max = property(Coin_SWIG_Python.SoComputeBoundingBox_max_get, Coin_SWIG_Python.SoComputeBoundingBox_max_set)
    boxCenter = property(Coin_SWIG_Python.SoComputeBoundingBox_boxCenter_get, Coin_SWIG_Python.SoComputeBoundingBox_boxCenter_set)
    objectCenter = property(Coin_SWIG_Python.SoComputeBoundingBox_objectCenter_get, Coin_SWIG_Python.SoComputeBoundingBox_objectCenter_set)

    def __init__(self):
        Coin_SWIG_Python.SoComputeBoundingBox_swiginit(self, Coin_SWIG_Python.new_SoComputeBoundingBox())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoComputeBoundingBox_initClass()

    def setViewportRegion(self, vpr):
        return Coin_SWIG_Python.SoComputeBoundingBox_setViewportRegion(self, vpr)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoComputeBoundingBox_getViewportRegion(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComputeBoundingBox

# Register SoComputeBoundingBox in Coin_SWIG_Python:
Coin_SWIG_Python.SoComputeBoundingBox_swigregister(SoComputeBoundingBox)

def SoComputeBoundingBox_getClassTypeId():
    return Coin_SWIG_Python.SoComputeBoundingBox_getClassTypeId()

def SoComputeBoundingBox_createInstance():
    return Coin_SWIG_Python.SoComputeBoundingBox_createInstance()

def SoComputeBoundingBox_initClass():
    return Coin_SWIG_Python.SoComputeBoundingBox_initClass()

class SoConcatenate(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoConcatenate_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoConcatenate_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoConcatenate_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoConcatenate_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoConcatenate_createInstance()
    NUMINPUTS = Coin_SWIG_Python.SoConcatenate_NUMINPUTS

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoConcatenate_initClass()

    def __init__(self, inputType):
        Coin_SWIG_Python.SoConcatenate_swiginit(self, Coin_SWIG_Python.new_SoConcatenate(inputType))
    input = property(Coin_SWIG_Python.SoConcatenate_input_get, Coin_SWIG_Python.SoConcatenate_input_set)
    output = property(Coin_SWIG_Python.SoConcatenate_output_get, Coin_SWIG_Python.SoConcatenate_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoConcatenate

# Register SoConcatenate in Coin_SWIG_Python:
Coin_SWIG_Python.SoConcatenate_swigregister(SoConcatenate)

def SoConcatenate_getClassTypeId():
    return Coin_SWIG_Python.SoConcatenate_getClassTypeId()

def SoConcatenate_createInstance():
    return Coin_SWIG_Python.SoConcatenate_createInstance()

def SoConcatenate_initClass():
    return Coin_SWIG_Python.SoConcatenate_initClass()

class SoSFTrigger(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFTrigger_swiginit(self, Coin_SWIG_Python.new_SoSFTrigger())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFTrigger

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFTrigger_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFTrigger_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFTrigger_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFTrigger_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFTrigger_isSame(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFTrigger_initClass()

    def getValue(self):
        return Coin_SWIG_Python.SoSFTrigger_getValue(self)

    def __eq__(self, trigger):
        return Coin_SWIG_Python.SoSFTrigger___eq__(self, trigger)

    def __ne__(self, trigger):
        return Coin_SWIG_Python.SoSFTrigger___ne__(self, trigger)

    def startNotify(self):
        return Coin_SWIG_Python.SoSFTrigger_startNotify(self)

    def notify(self, l):
        return Coin_SWIG_Python.SoSFTrigger_notify(self, l)

    def touch(self):
        return Coin_SWIG_Python.SoSFTrigger_touch(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFTrigger_setValue(self, *args)

# Register SoSFTrigger in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFTrigger_swigregister(SoSFTrigger)

def SoSFTrigger_createInstance():
    return Coin_SWIG_Python.SoSFTrigger_createInstance()

def SoSFTrigger_getClassTypeId():
    return Coin_SWIG_Python.SoSFTrigger_getClassTypeId()

def SoSFTrigger_initClass():
    return Coin_SWIG_Python.SoSFTrigger_initClass()

class SoSFShort(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFShort_swiginit(self, Coin_SWIG_Python.new_SoSFShort())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFShort

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFShort_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFShort_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFShort_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFShort_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFShort_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFShort_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFShort___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFShort___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFShort_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFShort_setValue(self, *args)

# Register SoSFShort in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFShort_swigregister(SoSFShort)

def SoSFShort_createInstance():
    return Coin_SWIG_Python.SoSFShort_createInstance()

def SoSFShort_getClassTypeId():
    return Coin_SWIG_Python.SoSFShort_getClassTypeId()

def SoSFShort_initClass():
    return Coin_SWIG_Python.SoSFShort_initClass()

class SoCounter(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCounter_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCounter_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoCounter_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoCounter_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoCounter_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCounter_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCounter_swiginit(self, Coin_SWIG_Python.new_SoCounter())
    min = property(Coin_SWIG_Python.SoCounter_min_get, Coin_SWIG_Python.SoCounter_min_set)
    max = property(Coin_SWIG_Python.SoCounter_max_get, Coin_SWIG_Python.SoCounter_max_set)
    step = property(Coin_SWIG_Python.SoCounter_step_get, Coin_SWIG_Python.SoCounter_step_set)
    trigger = property(Coin_SWIG_Python.SoCounter_trigger_get, Coin_SWIG_Python.SoCounter_trigger_set)
    reset = property(Coin_SWIG_Python.SoCounter_reset_get, Coin_SWIG_Python.SoCounter_reset_set)
    output = property(Coin_SWIG_Python.SoCounter_output_get, Coin_SWIG_Python.SoCounter_output_set)
    syncOut = property(Coin_SWIG_Python.SoCounter_syncOut_get, Coin_SWIG_Python.SoCounter_syncOut_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCounter

# Register SoCounter in Coin_SWIG_Python:
Coin_SWIG_Python.SoCounter_swigregister(SoCounter)

def SoCounter_getClassTypeId():
    return Coin_SWIG_Python.SoCounter_getClassTypeId()

def SoCounter_createInstance():
    return Coin_SWIG_Python.SoCounter_createInstance()

def SoCounter_initClass():
    return Coin_SWIG_Python.SoCounter_initClass()

class SoSFTime(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFTime_swiginit(self, Coin_SWIG_Python.new_SoSFTime())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFTime

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFTime_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFTime_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFTime_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFTime_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFTime_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFTime_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFTime___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFTime___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFTime_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFTime_setValue(self, *args)

# Register SoSFTime in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFTime_swigregister(SoSFTime)

def SoSFTime_createInstance():
    return Coin_SWIG_Python.SoSFTime_createInstance()

def SoSFTime_getClassTypeId():
    return Coin_SWIG_Python.SoSFTime_getClassTypeId()

def SoSFTime_initClass():
    return Coin_SWIG_Python.SoSFTime_initClass()

class SoElapsedTime(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoElapsedTime_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoElapsedTime_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoElapsedTime_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoElapsedTime_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoElapsedTime_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoElapsedTime_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoElapsedTime_swiginit(self, Coin_SWIG_Python.new_SoElapsedTime())
    timeIn = property(Coin_SWIG_Python.SoElapsedTime_timeIn_get, Coin_SWIG_Python.SoElapsedTime_timeIn_set)
    speed = property(Coin_SWIG_Python.SoElapsedTime_speed_get, Coin_SWIG_Python.SoElapsedTime_speed_set)
    on = property(Coin_SWIG_Python.SoElapsedTime_on_get, Coin_SWIG_Python.SoElapsedTime_on_set)
    pause = property(Coin_SWIG_Python.SoElapsedTime_pause_get, Coin_SWIG_Python.SoElapsedTime_pause_set)
    reset = property(Coin_SWIG_Python.SoElapsedTime_reset_get, Coin_SWIG_Python.SoElapsedTime_reset_set)
    timeOut = property(Coin_SWIG_Python.SoElapsedTime_timeOut_get, Coin_SWIG_Python.SoElapsedTime_timeOut_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoElapsedTime

# Register SoElapsedTime in Coin_SWIG_Python:
Coin_SWIG_Python.SoElapsedTime_swigregister(SoElapsedTime)

def SoElapsedTime_getClassTypeId():
    return Coin_SWIG_Python.SoElapsedTime_getClassTypeId()

def SoElapsedTime_createInstance():
    return Coin_SWIG_Python.SoElapsedTime_createInstance()

def SoElapsedTime_initClass():
    return Coin_SWIG_Python.SoElapsedTime_initClass()

class SoFieldConverter(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFieldConverter_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFieldConverter_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoFieldConverter_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoFieldConverter_getOutputData(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFieldConverter_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoFieldConverter_initClasses()

    def getInput(self, type):
        return Coin_SWIG_Python.SoFieldConverter_getInput(self, type)

    def getOutput(self, type):
        return Coin_SWIG_Python.SoFieldConverter_getOutput(self, type)

    def getConnectedInput(self):
        return Coin_SWIG_Python.SoFieldConverter_getConnectedInput(self)

    def getForwardConnections(self, l):
        return Coin_SWIG_Python.SoFieldConverter_getForwardConnections(self, l)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldConverter

# Register SoFieldConverter in Coin_SWIG_Python:
Coin_SWIG_Python.SoFieldConverter_swigregister(SoFieldConverter)

def SoFieldConverter_getClassTypeId():
    return Coin_SWIG_Python.SoFieldConverter_getClassTypeId()

def SoFieldConverter_initClass():
    return Coin_SWIG_Python.SoFieldConverter_initClass()

def SoFieldConverter_initClasses():
    return Coin_SWIG_Python.SoFieldConverter_initClasses()

class SoGate(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGate_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoGate_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoGate_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoGate_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoGate_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGate_initClass()

    def __init__(self, type):
        Coin_SWIG_Python.SoGate_swiginit(self, Coin_SWIG_Python.new_SoGate(type))
    enable = property(Coin_SWIG_Python.SoGate_enable_get, Coin_SWIG_Python.SoGate_enable_set)
    trigger = property(Coin_SWIG_Python.SoGate_trigger_get, Coin_SWIG_Python.SoGate_trigger_set)
    input = property(Coin_SWIG_Python.SoGate_input_get, Coin_SWIG_Python.SoGate_input_set)
    output = property(Coin_SWIG_Python.SoGate_output_get, Coin_SWIG_Python.SoGate_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGate

# Register SoGate in Coin_SWIG_Python:
Coin_SWIG_Python.SoGate_swigregister(SoGate)

def SoGate_getClassTypeId():
    return Coin_SWIG_Python.SoGate_getClassTypeId()

def SoGate_createInstance():
    return Coin_SWIG_Python.SoGate_createInstance()

def SoGate_initClass():
    return Coin_SWIG_Python.SoGate_initClass()

class SoInterpolate(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInterpolate_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInterpolate_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoInterpolate_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoInterpolate_getOutputData(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInterpolate_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoInterpolate_initClasses()
    alpha = property(Coin_SWIG_Python.SoInterpolate_alpha_get, Coin_SWIG_Python.SoInterpolate_alpha_set)
    output = property(Coin_SWIG_Python.SoInterpolate_output_get, Coin_SWIG_Python.SoInterpolate_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolate

# Register SoInterpolate in Coin_SWIG_Python:
Coin_SWIG_Python.SoInterpolate_swigregister(SoInterpolate)

def SoInterpolate_getClassTypeId():
    return Coin_SWIG_Python.SoInterpolate_getClassTypeId()

def SoInterpolate_initClass():
    return Coin_SWIG_Python.SoInterpolate_initClass()

def SoInterpolate_initClasses():
    return Coin_SWIG_Python.SoInterpolate_initClasses()

class SoInterpolateFloat(SoInterpolate):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInterpolateFloat_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInterpolateFloat_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoInterpolateFloat_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoInterpolateFloat_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoInterpolateFloat_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoInterpolateFloat_swiginit(self, Coin_SWIG_Python.new_SoInterpolateFloat())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInterpolateFloat_initClass()
    input0 = property(Coin_SWIG_Python.SoInterpolateFloat_input0_get, Coin_SWIG_Python.SoInterpolateFloat_input0_set)
    input1 = property(Coin_SWIG_Python.SoInterpolateFloat_input1_get, Coin_SWIG_Python.SoInterpolateFloat_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateFloat

# Register SoInterpolateFloat in Coin_SWIG_Python:
Coin_SWIG_Python.SoInterpolateFloat_swigregister(SoInterpolateFloat)

def SoInterpolateFloat_getClassTypeId():
    return Coin_SWIG_Python.SoInterpolateFloat_getClassTypeId()

def SoInterpolateFloat_createInstance():
    return Coin_SWIG_Python.SoInterpolateFloat_createInstance()

def SoInterpolateFloat_initClass():
    return Coin_SWIG_Python.SoInterpolateFloat_initClass()

class SoInterpolateVec2f(SoInterpolate):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInterpolateVec2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInterpolateVec2f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoInterpolateVec2f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoInterpolateVec2f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoInterpolateVec2f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoInterpolateVec2f_swiginit(self, Coin_SWIG_Python.new_SoInterpolateVec2f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInterpolateVec2f_initClass()
    input0 = property(Coin_SWIG_Python.SoInterpolateVec2f_input0_get, Coin_SWIG_Python.SoInterpolateVec2f_input0_set)
    input1 = property(Coin_SWIG_Python.SoInterpolateVec2f_input1_get, Coin_SWIG_Python.SoInterpolateVec2f_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateVec2f

# Register SoInterpolateVec2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoInterpolateVec2f_swigregister(SoInterpolateVec2f)

def SoInterpolateVec2f_getClassTypeId():
    return Coin_SWIG_Python.SoInterpolateVec2f_getClassTypeId()

def SoInterpolateVec2f_createInstance():
    return Coin_SWIG_Python.SoInterpolateVec2f_createInstance()

def SoInterpolateVec2f_initClass():
    return Coin_SWIG_Python.SoInterpolateVec2f_initClass()

class SoInterpolateVec3f(SoInterpolate):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInterpolateVec3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInterpolateVec3f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoInterpolateVec3f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoInterpolateVec3f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoInterpolateVec3f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoInterpolateVec3f_swiginit(self, Coin_SWIG_Python.new_SoInterpolateVec3f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInterpolateVec3f_initClass()
    input0 = property(Coin_SWIG_Python.SoInterpolateVec3f_input0_get, Coin_SWIG_Python.SoInterpolateVec3f_input0_set)
    input1 = property(Coin_SWIG_Python.SoInterpolateVec3f_input1_get, Coin_SWIG_Python.SoInterpolateVec3f_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateVec3f

# Register SoInterpolateVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoInterpolateVec3f_swigregister(SoInterpolateVec3f)

def SoInterpolateVec3f_getClassTypeId():
    return Coin_SWIG_Python.SoInterpolateVec3f_getClassTypeId()

def SoInterpolateVec3f_createInstance():
    return Coin_SWIG_Python.SoInterpolateVec3f_createInstance()

def SoInterpolateVec3f_initClass():
    return Coin_SWIG_Python.SoInterpolateVec3f_initClass()

class SoInterpolateVec4f(SoInterpolate):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInterpolateVec4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInterpolateVec4f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoInterpolateVec4f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoInterpolateVec4f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoInterpolateVec4f_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoInterpolateVec4f_swiginit(self, Coin_SWIG_Python.new_SoInterpolateVec4f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInterpolateVec4f_initClass()
    input0 = property(Coin_SWIG_Python.SoInterpolateVec4f_input0_get, Coin_SWIG_Python.SoInterpolateVec4f_input0_set)
    input1 = property(Coin_SWIG_Python.SoInterpolateVec4f_input1_get, Coin_SWIG_Python.SoInterpolateVec4f_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateVec4f

# Register SoInterpolateVec4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoInterpolateVec4f_swigregister(SoInterpolateVec4f)

def SoInterpolateVec4f_getClassTypeId():
    return Coin_SWIG_Python.SoInterpolateVec4f_getClassTypeId()

def SoInterpolateVec4f_createInstance():
    return Coin_SWIG_Python.SoInterpolateVec4f_createInstance()

def SoInterpolateVec4f_initClass():
    return Coin_SWIG_Python.SoInterpolateVec4f_initClass()

class SoInterpolateRotation(SoInterpolate):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInterpolateRotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInterpolateRotation_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoInterpolateRotation_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoInterpolateRotation_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoInterpolateRotation_createInstance()

    def __init__(self):
        Coin_SWIG_Python.SoInterpolateRotation_swiginit(self, Coin_SWIG_Python.new_SoInterpolateRotation())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInterpolateRotation_initClass()
    input0 = property(Coin_SWIG_Python.SoInterpolateRotation_input0_get, Coin_SWIG_Python.SoInterpolateRotation_input0_set)
    input1 = property(Coin_SWIG_Python.SoInterpolateRotation_input1_get, Coin_SWIG_Python.SoInterpolateRotation_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateRotation

# Register SoInterpolateRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoInterpolateRotation_swigregister(SoInterpolateRotation)

def SoInterpolateRotation_getClassTypeId():
    return Coin_SWIG_Python.SoInterpolateRotation_getClassTypeId()

def SoInterpolateRotation_createInstance():
    return Coin_SWIG_Python.SoInterpolateRotation_createInstance()

def SoInterpolateRotation_initClass():
    return Coin_SWIG_Python.SoInterpolateRotation_initClass()

class SoOnOff(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoOnOff_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoOnOff_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoOnOff_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoOnOff_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoOnOff_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoOnOff_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoOnOff_swiginit(self, Coin_SWIG_Python.new_SoOnOff())
    on = property(Coin_SWIG_Python.SoOnOff_on_get, Coin_SWIG_Python.SoOnOff_on_set)
    off = property(Coin_SWIG_Python.SoOnOff_off_get, Coin_SWIG_Python.SoOnOff_off_set)
    toggle = property(Coin_SWIG_Python.SoOnOff_toggle_get, Coin_SWIG_Python.SoOnOff_toggle_set)
    isOn = property(Coin_SWIG_Python.SoOnOff_isOn_get, Coin_SWIG_Python.SoOnOff_isOn_set)
    isOff = property(Coin_SWIG_Python.SoOnOff_isOff_get, Coin_SWIG_Python.SoOnOff_isOff_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOnOff

# Register SoOnOff in Coin_SWIG_Python:
Coin_SWIG_Python.SoOnOff_swigregister(SoOnOff)

def SoOnOff_getClassTypeId():
    return Coin_SWIG_Python.SoOnOff_getClassTypeId()

def SoOnOff_createInstance():
    return Coin_SWIG_Python.SoOnOff_createInstance()

def SoOnOff_initClass():
    return Coin_SWIG_Python.SoOnOff_initClass()

class SoSFBitMask(SoSFEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBitMask_swiginit(self, Coin_SWIG_Python.new_SoSFBitMask())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBitMask

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBitMask_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBitMask_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBitMask_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBitMask_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBitMask_isSame(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBitMask_initClass()

# Register SoSFBitMask in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBitMask_swigregister(SoSFBitMask)

def SoSFBitMask_createInstance():
    return Coin_SWIG_Python.SoSFBitMask_createInstance()

def SoSFBitMask_getClassTypeId():
    return Coin_SWIG_Python.SoSFBitMask_getClassTypeId()

def SoSFBitMask_initClass():
    return Coin_SWIG_Python.SoSFBitMask_initClass()

class SoOneShot(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoOneShot_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoOneShot_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoOneShot_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoOneShot_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoOneShot_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoOneShot_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoOneShot_swiginit(self, Coin_SWIG_Python.new_SoOneShot())
    RETRIGGERABLE = Coin_SWIG_Python.SoOneShot_RETRIGGERABLE
    HOLD_FINAL = Coin_SWIG_Python.SoOneShot_HOLD_FINAL
    timeIn = property(Coin_SWIG_Python.SoOneShot_timeIn_get, Coin_SWIG_Python.SoOneShot_timeIn_set)
    duration = property(Coin_SWIG_Python.SoOneShot_duration_get, Coin_SWIG_Python.SoOneShot_duration_set)
    trigger = property(Coin_SWIG_Python.SoOneShot_trigger_get, Coin_SWIG_Python.SoOneShot_trigger_set)
    flags = property(Coin_SWIG_Python.SoOneShot_flags_get, Coin_SWIG_Python.SoOneShot_flags_set)
    disable = property(Coin_SWIG_Python.SoOneShot_disable_get, Coin_SWIG_Python.SoOneShot_disable_set)
    timeOut = property(Coin_SWIG_Python.SoOneShot_timeOut_get, Coin_SWIG_Python.SoOneShot_timeOut_set)
    isActive = property(Coin_SWIG_Python.SoOneShot_isActive_get, Coin_SWIG_Python.SoOneShot_isActive_set)
    ramp = property(Coin_SWIG_Python.SoOneShot_ramp_get, Coin_SWIG_Python.SoOneShot_ramp_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOneShot

# Register SoOneShot in Coin_SWIG_Python:
Coin_SWIG_Python.SoOneShot_swigregister(SoOneShot)

def SoOneShot_getClassTypeId():
    return Coin_SWIG_Python.SoOneShot_getClassTypeId()

def SoOneShot_createInstance():
    return Coin_SWIG_Python.SoOneShot_createInstance()

def SoOneShot_initClass():
    return Coin_SWIG_Python.SoOneShot_initClass()

class SoSelectOne(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSelectOne_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSelectOne_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoSelectOne_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoSelectOne_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSelectOne_createInstance()
    index = property(Coin_SWIG_Python.SoSelectOne_index_get, Coin_SWIG_Python.SoSelectOne_index_set)
    input = property(Coin_SWIG_Python.SoSelectOne_input_get, Coin_SWIG_Python.SoSelectOne_input_set)
    output = property(Coin_SWIG_Python.SoSelectOne_output_get, Coin_SWIG_Python.SoSelectOne_output_set)

    def __init__(self, inputtype):
        Coin_SWIG_Python.SoSelectOne_swiginit(self, Coin_SWIG_Python.new_SoSelectOne(inputtype))

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSelectOne_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSelectOne

# Register SoSelectOne in Coin_SWIG_Python:
Coin_SWIG_Python.SoSelectOne_swigregister(SoSelectOne)

def SoSelectOne_getClassTypeId():
    return Coin_SWIG_Python.SoSelectOne_getClassTypeId()

def SoSelectOne_createInstance():
    return Coin_SWIG_Python.SoSelectOne_createInstance()

def SoSelectOne_initClass():
    return Coin_SWIG_Python.SoSelectOne_initClass()

class SoTimeCounter(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTimeCounter_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTimeCounter_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoTimeCounter_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoTimeCounter_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTimeCounter_createInstance()
    timeIn = property(Coin_SWIG_Python.SoTimeCounter_timeIn_get, Coin_SWIG_Python.SoTimeCounter_timeIn_set)
    min = property(Coin_SWIG_Python.SoTimeCounter_min_get, Coin_SWIG_Python.SoTimeCounter_min_set)
    max = property(Coin_SWIG_Python.SoTimeCounter_max_get, Coin_SWIG_Python.SoTimeCounter_max_set)
    step = property(Coin_SWIG_Python.SoTimeCounter_step_get, Coin_SWIG_Python.SoTimeCounter_step_set)
    on = property(Coin_SWIG_Python.SoTimeCounter_on_get, Coin_SWIG_Python.SoTimeCounter_on_set)
    frequency = property(Coin_SWIG_Python.SoTimeCounter_frequency_get, Coin_SWIG_Python.SoTimeCounter_frequency_set)
    duty = property(Coin_SWIG_Python.SoTimeCounter_duty_get, Coin_SWIG_Python.SoTimeCounter_duty_set)
    reset = property(Coin_SWIG_Python.SoTimeCounter_reset_get, Coin_SWIG_Python.SoTimeCounter_reset_set)
    syncIn = property(Coin_SWIG_Python.SoTimeCounter_syncIn_get, Coin_SWIG_Python.SoTimeCounter_syncIn_set)
    output = property(Coin_SWIG_Python.SoTimeCounter_output_get, Coin_SWIG_Python.SoTimeCounter_output_set)
    syncOut = property(Coin_SWIG_Python.SoTimeCounter_syncOut_get, Coin_SWIG_Python.SoTimeCounter_syncOut_set)

    def __init__(self):
        Coin_SWIG_Python.SoTimeCounter_swiginit(self, Coin_SWIG_Python.new_SoTimeCounter())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTimeCounter_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTimeCounter

# Register SoTimeCounter in Coin_SWIG_Python:
Coin_SWIG_Python.SoTimeCounter_swigregister(SoTimeCounter)

def SoTimeCounter_getClassTypeId():
    return Coin_SWIG_Python.SoTimeCounter_getClassTypeId()

def SoTimeCounter_createInstance():
    return Coin_SWIG_Python.SoTimeCounter_createInstance()

def SoTimeCounter_initClass():
    return Coin_SWIG_Python.SoTimeCounter_initClass()

class SoTransformVec3f(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformVec3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformVec3f_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoTransformVec3f_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoTransformVec3f_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTransformVec3f_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformVec3f_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransformVec3f_swiginit(self, Coin_SWIG_Python.new_SoTransformVec3f())
    vector = property(Coin_SWIG_Python.SoTransformVec3f_vector_get, Coin_SWIG_Python.SoTransformVec3f_vector_set)
    matrix = property(Coin_SWIG_Python.SoTransformVec3f_matrix_get, Coin_SWIG_Python.SoTransformVec3f_matrix_set)
    point = property(Coin_SWIG_Python.SoTransformVec3f_point_get, Coin_SWIG_Python.SoTransformVec3f_point_set)
    direction = property(Coin_SWIG_Python.SoTransformVec3f_direction_get, Coin_SWIG_Python.SoTransformVec3f_direction_set)
    normalDirection = property(Coin_SWIG_Python.SoTransformVec3f_normalDirection_get, Coin_SWIG_Python.SoTransformVec3f_normalDirection_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformVec3f

# Register SoTransformVec3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformVec3f_swigregister(SoTransformVec3f)

def SoTransformVec3f_getClassTypeId():
    return Coin_SWIG_Python.SoTransformVec3f_getClassTypeId()

def SoTransformVec3f_createInstance():
    return Coin_SWIG_Python.SoTransformVec3f_createInstance()

def SoTransformVec3f_initClass():
    return Coin_SWIG_Python.SoTransformVec3f_initClass()

class SoTriggerAny(SoEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTriggerAny_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTriggerAny_getTypeId(self)

    def getFieldData(self):
        return Coin_SWIG_Python.SoTriggerAny_getFieldData(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoTriggerAny_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoTriggerAny_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTriggerAny_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTriggerAny_swiginit(self, Coin_SWIG_Python.new_SoTriggerAny())
    input0 = property(Coin_SWIG_Python.SoTriggerAny_input0_get, Coin_SWIG_Python.SoTriggerAny_input0_set)
    input1 = property(Coin_SWIG_Python.SoTriggerAny_input1_get, Coin_SWIG_Python.SoTriggerAny_input1_set)
    input2 = property(Coin_SWIG_Python.SoTriggerAny_input2_get, Coin_SWIG_Python.SoTriggerAny_input2_set)
    input3 = property(Coin_SWIG_Python.SoTriggerAny_input3_get, Coin_SWIG_Python.SoTriggerAny_input3_set)
    input4 = property(Coin_SWIG_Python.SoTriggerAny_input4_get, Coin_SWIG_Python.SoTriggerAny_input4_set)
    input5 = property(Coin_SWIG_Python.SoTriggerAny_input5_get, Coin_SWIG_Python.SoTriggerAny_input5_set)
    input6 = property(Coin_SWIG_Python.SoTriggerAny_input6_get, Coin_SWIG_Python.SoTriggerAny_input6_set)
    input7 = property(Coin_SWIG_Python.SoTriggerAny_input7_get, Coin_SWIG_Python.SoTriggerAny_input7_set)
    input8 = property(Coin_SWIG_Python.SoTriggerAny_input8_get, Coin_SWIG_Python.SoTriggerAny_input8_set)
    input9 = property(Coin_SWIG_Python.SoTriggerAny_input9_get, Coin_SWIG_Python.SoTriggerAny_input9_set)
    output = property(Coin_SWIG_Python.SoTriggerAny_output_get, Coin_SWIG_Python.SoTriggerAny_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTriggerAny

# Register SoTriggerAny in Coin_SWIG_Python:
Coin_SWIG_Python.SoTriggerAny_swigregister(SoTriggerAny)

def SoTriggerAny_getClassTypeId():
    return Coin_SWIG_Python.SoTriggerAny_getClassTypeId()

def SoTriggerAny_createInstance():
    return Coin_SWIG_Python.SoTriggerAny_createInstance()

def SoTriggerAny_initClass():
    return Coin_SWIG_Python.SoTriggerAny_initClass()

class SoNodeEngine(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNodeEngine_initClass()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNodeEngine_getClassTypeId()

    def evaluateWrapper(self):
        return Coin_SWIG_Python.SoNodeEngine_evaluateWrapper(self)

    def getOutputs(self, l):
        return Coin_SWIG_Python.SoNodeEngine_getOutputs(self, l)

    def getOutput(self, outputname):
        return Coin_SWIG_Python.SoNodeEngine_getOutput(self, outputname)

    def getOutputName(self, output, outputname):
        return Coin_SWIG_Python.SoNodeEngine_getOutputName(self, output, outputname)

    def getOutputData(self):
        return Coin_SWIG_Python.SoNodeEngine_getOutputData(self)

    def isNotifying(self):
        return Coin_SWIG_Python.SoNodeEngine_isNotifying(self)

    def notify(self, nl):
        return Coin_SWIG_Python.SoNodeEngine_notify(self, nl)

    def writeInstance(self, out):
        return Coin_SWIG_Python.SoNodeEngine_writeInstance(self, out)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeEngine

# Register SoNodeEngine in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeEngine_swigregister(SoNodeEngine)

def SoNodeEngine_initClass():
    return Coin_SWIG_Python.SoNodeEngine_initClass()

def SoNodeEngine_getClassTypeId():
    return Coin_SWIG_Python.SoNodeEngine_getClassTypeId()

class SoError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoError_swiginit(self, Coin_SWIG_Python.new_SoError())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoError

    @staticmethod
    def setHandlerCallback(func, data):
        return Coin_SWIG_Python.SoError_setHandlerCallback(func, data)

    @staticmethod
    def getHandlerCallback():
        return Coin_SWIG_Python.SoError_getHandlerCallback()

    @staticmethod
    def getHandlerData():
        return Coin_SWIG_Python.SoError_getHandlerData()

    def getDebugString(self):
        return Coin_SWIG_Python.SoError_getDebugString(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoError_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoError_getTypeId(self)

    def isOfType(self, type):
        return Coin_SWIG_Python.SoError_isOfType(self, type)

    @staticmethod
    def post(*args):
        return Coin_SWIG_Python.SoError_post(*args)

    @staticmethod
    def getString(*args):
        return Coin_SWIG_Python.SoError_getString(*args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoError_initClass()

    @staticmethod
    def initClasses():
        return Coin_SWIG_Python.SoError_initClasses()

# Register SoError in Coin_SWIG_Python:
Coin_SWIG_Python.SoError_swigregister(SoError)

def SoError_setHandlerCallback(func, data):
    return Coin_SWIG_Python.SoError_setHandlerCallback(func, data)

def SoError_getHandlerCallback():
    return Coin_SWIG_Python.SoError_getHandlerCallback()

def SoError_getHandlerData():
    return Coin_SWIG_Python.SoError_getHandlerData()

def SoError_getClassTypeId():
    return Coin_SWIG_Python.SoError_getClassTypeId()

def SoError_post(*args):
    return Coin_SWIG_Python.SoError_post(*args)

def SoError_getString(*args):
    return Coin_SWIG_Python.SoError_getString(*args)

def SoError_initClass():
    return Coin_SWIG_Python.SoError_initClass()

def SoError_initClasses():
    return Coin_SWIG_Python.SoError_initClasses()

class SoDebugError(SoError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ERROR = Coin_SWIG_Python.SoDebugError_ERROR
    WARNING = Coin_SWIG_Python.SoDebugError_WARNING
    INFO = Coin_SWIG_Python.SoDebugError_INFO

    @staticmethod
    def setHandlerCallback(function, data):
        return Coin_SWIG_Python.SoDebugError_setHandlerCallback(function, data)

    @staticmethod
    def getHandlerCallback():
        return Coin_SWIG_Python.SoDebugError_getHandlerCallback()

    @staticmethod
    def getHandlerData():
        return Coin_SWIG_Python.SoDebugError_getHandlerData()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDebugError_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDebugError_getTypeId(self)

    def getSeverity(self):
        return Coin_SWIG_Python.SoDebugError_getSeverity(self)

    @staticmethod
    def post(*args):
        return Coin_SWIG_Python.SoDebugError_post(*args)

    @staticmethod
    def postWarning(*args):
        return Coin_SWIG_Python.SoDebugError_postWarning(*args)

    @staticmethod
    def postInfo(*args):
        return Coin_SWIG_Python.SoDebugError_postInfo(*args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDebugError_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoDebugError_swiginit(self, Coin_SWIG_Python.new_SoDebugError())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDebugError

# Register SoDebugError in Coin_SWIG_Python:
Coin_SWIG_Python.SoDebugError_swigregister(SoDebugError)

def SoDebugError_setHandlerCallback(function, data):
    return Coin_SWIG_Python.SoDebugError_setHandlerCallback(function, data)

def SoDebugError_getHandlerCallback():
    return Coin_SWIG_Python.SoDebugError_getHandlerCallback()

def SoDebugError_getHandlerData():
    return Coin_SWIG_Python.SoDebugError_getHandlerData()

def SoDebugError_getClassTypeId():
    return Coin_SWIG_Python.SoDebugError_getClassTypeId()

def SoDebugError_post(*args):
    return Coin_SWIG_Python.SoDebugError_post(*args)

def SoDebugError_postWarning(*args):
    return Coin_SWIG_Python.SoDebugError_postWarning(*args)

def SoDebugError_postInfo(*args):
    return Coin_SWIG_Python.SoDebugError_postInfo(*args)

def SoDebugError_initClass():
    return Coin_SWIG_Python.SoDebugError_initClass()

class SoMemoryError(SoError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def setHandlerCallback(callback, data):
        return Coin_SWIG_Python.SoMemoryError_setHandlerCallback(callback, data)

    @staticmethod
    def getHandlerCallback():
        return Coin_SWIG_Python.SoMemoryError_getHandlerCallback()

    @staticmethod
    def getHandlerData():
        return Coin_SWIG_Python.SoMemoryError_getHandlerData()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMemoryError_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMemoryError_getTypeId(self)

    @staticmethod
    def post(whatWasAllocated):
        return Coin_SWIG_Python.SoMemoryError_post(whatWasAllocated)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMemoryError_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoMemoryError_swiginit(self, Coin_SWIG_Python.new_SoMemoryError())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMemoryError

# Register SoMemoryError in Coin_SWIG_Python:
Coin_SWIG_Python.SoMemoryError_swigregister(SoMemoryError)

def SoMemoryError_setHandlerCallback(callback, data):
    return Coin_SWIG_Python.SoMemoryError_setHandlerCallback(callback, data)

def SoMemoryError_getHandlerCallback():
    return Coin_SWIG_Python.SoMemoryError_getHandlerCallback()

def SoMemoryError_getHandlerData():
    return Coin_SWIG_Python.SoMemoryError_getHandlerData()

def SoMemoryError_getClassTypeId():
    return Coin_SWIG_Python.SoMemoryError_getClassTypeId()

def SoMemoryError_post(whatWasAllocated):
    return Coin_SWIG_Python.SoMemoryError_post(whatWasAllocated)

def SoMemoryError_initClass():
    return Coin_SWIG_Python.SoMemoryError_initClass()

class SoReadError(SoError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def setHandlerCallback(function, data):
        return Coin_SWIG_Python.SoReadError_setHandlerCallback(function, data)

    @staticmethod
    def getHandlerCallback():
        return Coin_SWIG_Python.SoReadError_getHandlerCallback()

    @staticmethod
    def getHandlerData():
        return Coin_SWIG_Python.SoReadError_getHandlerData()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoReadError_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoReadError_getTypeId(self)

    @staticmethod
    def post(*args):
        return Coin_SWIG_Python.SoReadError_post(*args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoReadError_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoReadError_swiginit(self, Coin_SWIG_Python.new_SoReadError())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoReadError

# Register SoReadError in Coin_SWIG_Python:
Coin_SWIG_Python.SoReadError_swigregister(SoReadError)

def SoReadError_setHandlerCallback(function, data):
    return Coin_SWIG_Python.SoReadError_setHandlerCallback(function, data)

def SoReadError_getHandlerCallback():
    return Coin_SWIG_Python.SoReadError_getHandlerCallback()

def SoReadError_getHandlerData():
    return Coin_SWIG_Python.SoReadError_getHandlerData()

def SoReadError_getClassTypeId():
    return Coin_SWIG_Python.SoReadError_getClassTypeId()

def SoReadError_post(*args):
    return Coin_SWIG_Python.SoReadError_post(*args)

def SoReadError_initClass():
    return Coin_SWIG_Python.SoReadError_initClass()

class SoButtonEvent(SoEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoButtonEvent_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoButtonEvent_getTypeId(self)
    UP = Coin_SWIG_Python.SoButtonEvent_UP
    DOWN = Coin_SWIG_Python.SoButtonEvent_DOWN
    UNKNOWN = Coin_SWIG_Python.SoButtonEvent_UNKNOWN

    def __init__(self):
        Coin_SWIG_Python.SoButtonEvent_swiginit(self, Coin_SWIG_Python.new_SoButtonEvent())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoButtonEvent

    def setState(self, state):
        return Coin_SWIG_Python.SoButtonEvent_setState(self, state)

    def getState(self):
        return Coin_SWIG_Python.SoButtonEvent_getState(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoButtonEvent_initClass()

# Register SoButtonEvent in Coin_SWIG_Python:
Coin_SWIG_Python.SoButtonEvent_swigregister(SoButtonEvent)

def SoButtonEvent_getClassTypeId():
    return Coin_SWIG_Python.SoButtonEvent_getClassTypeId()

def SoButtonEvent_initClass():
    return Coin_SWIG_Python.SoButtonEvent_initClass()

class SoLocation2Event(SoEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLocation2Event_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLocation2Event_getTypeId(self)

    def __init__(self):
        Coin_SWIG_Python.SoLocation2Event_swiginit(self, Coin_SWIG_Python.new_SoLocation2Event())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLocation2Event

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLocation2Event_initClass()

# Register SoLocation2Event in Coin_SWIG_Python:
Coin_SWIG_Python.SoLocation2Event_swigregister(SoLocation2Event)

def SoLocation2Event_getClassTypeId():
    return Coin_SWIG_Python.SoLocation2Event_getClassTypeId()

def SoLocation2Event_initClass():
    return Coin_SWIG_Python.SoLocation2Event_initClass()

class SoMotion3Event(SoEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMotion3Event_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMotion3Event_getTypeId(self)

    def __init__(self):
        Coin_SWIG_Python.SoMotion3Event_swiginit(self, Coin_SWIG_Python.new_SoMotion3Event())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMotion3Event

    def setTranslation(self, t):
        return Coin_SWIG_Python.SoMotion3Event_setTranslation(self, t)

    def getTranslation(self):
        return Coin_SWIG_Python.SoMotion3Event_getTranslation(self)

    def setRotation(self, r):
        return Coin_SWIG_Python.SoMotion3Event_setRotation(self, r)

    def getRotation(self):
        return Coin_SWIG_Python.SoMotion3Event_getRotation(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMotion3Event_initClass()

# Register SoMotion3Event in Coin_SWIG_Python:
Coin_SWIG_Python.SoMotion3Event_swigregister(SoMotion3Event)

def SoMotion3Event_getClassTypeId():
    return Coin_SWIG_Python.SoMotion3Event_getClassTypeId()

def SoMotion3Event_initClass():
    return Coin_SWIG_Python.SoMotion3Event_initClass()

class SoKeyboardEvent(SoButtonEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoKeyboardEvent_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoKeyboardEvent_getTypeId(self)
    ANY = Coin_SWIG_Python.SoKeyboardEvent_ANY
    UNDEFINED = Coin_SWIG_Python.SoKeyboardEvent_UNDEFINED
    LEFT_SHIFT = Coin_SWIG_Python.SoKeyboardEvent_LEFT_SHIFT
    RIGHT_SHIFT = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_SHIFT
    LEFT_CONTROL = Coin_SWIG_Python.SoKeyboardEvent_LEFT_CONTROL
    RIGHT_CONTROL = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_CONTROL
    LEFT_ALT = Coin_SWIG_Python.SoKeyboardEvent_LEFT_ALT
    RIGHT_ALT = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_ALT
    NUMBER_0 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_0
    NUMBER_1 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_1
    NUMBER_2 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_2
    NUMBER_3 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_3
    NUMBER_4 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_4
    NUMBER_5 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_5
    NUMBER_6 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_6
    NUMBER_7 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_7
    NUMBER_8 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_8
    NUMBER_9 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_9
    A = Coin_SWIG_Python.SoKeyboardEvent_A
    B = Coin_SWIG_Python.SoKeyboardEvent_B
    C = Coin_SWIG_Python.SoKeyboardEvent_C
    D = Coin_SWIG_Python.SoKeyboardEvent_D
    E = Coin_SWIG_Python.SoKeyboardEvent_E
    F = Coin_SWIG_Python.SoKeyboardEvent_F
    G = Coin_SWIG_Python.SoKeyboardEvent_G
    H = Coin_SWIG_Python.SoKeyboardEvent_H
    I = Coin_SWIG_Python.SoKeyboardEvent_I
    J = Coin_SWIG_Python.SoKeyboardEvent_J
    K = Coin_SWIG_Python.SoKeyboardEvent_K
    L = Coin_SWIG_Python.SoKeyboardEvent_L
    M = Coin_SWIG_Python.SoKeyboardEvent_M
    N = Coin_SWIG_Python.SoKeyboardEvent_N
    O = Coin_SWIG_Python.SoKeyboardEvent_O
    P = Coin_SWIG_Python.SoKeyboardEvent_P
    Q = Coin_SWIG_Python.SoKeyboardEvent_Q
    R = Coin_SWIG_Python.SoKeyboardEvent_R
    S = Coin_SWIG_Python.SoKeyboardEvent_S
    T = Coin_SWIG_Python.SoKeyboardEvent_T
    U = Coin_SWIG_Python.SoKeyboardEvent_U
    V = Coin_SWIG_Python.SoKeyboardEvent_V
    W = Coin_SWIG_Python.SoKeyboardEvent_W
    X = Coin_SWIG_Python.SoKeyboardEvent_X
    Y = Coin_SWIG_Python.SoKeyboardEvent_Y
    Z = Coin_SWIG_Python.SoKeyboardEvent_Z
    HOME = Coin_SWIG_Python.SoKeyboardEvent_HOME
    LEFT_ARROW = Coin_SWIG_Python.SoKeyboardEvent_LEFT_ARROW
    UP_ARROW = Coin_SWIG_Python.SoKeyboardEvent_UP_ARROW
    RIGHT_ARROW = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_ARROW
    DOWN_ARROW = Coin_SWIG_Python.SoKeyboardEvent_DOWN_ARROW
    PAGE_UP = Coin_SWIG_Python.SoKeyboardEvent_PAGE_UP
    PAGE_DOWN = Coin_SWIG_Python.SoKeyboardEvent_PAGE_DOWN
    END = Coin_SWIG_Python.SoKeyboardEvent_END
    PRIOR = Coin_SWIG_Python.SoKeyboardEvent_PRIOR
    NEXT = Coin_SWIG_Python.SoKeyboardEvent_NEXT
    PAD_ENTER = Coin_SWIG_Python.SoKeyboardEvent_PAD_ENTER
    PAD_F1 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F1
    PAD_F2 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F2
    PAD_F3 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F3
    PAD_F4 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F4
    PAD_0 = Coin_SWIG_Python.SoKeyboardEvent_PAD_0
    PAD_1 = Coin_SWIG_Python.SoKeyboardEvent_PAD_1
    PAD_2 = Coin_SWIG_Python.SoKeyboardEvent_PAD_2
    PAD_3 = Coin_SWIG_Python.SoKeyboardEvent_PAD_3
    PAD_4 = Coin_SWIG_Python.SoKeyboardEvent_PAD_4
    PAD_5 = Coin_SWIG_Python.SoKeyboardEvent_PAD_5
    PAD_6 = Coin_SWIG_Python.SoKeyboardEvent_PAD_6
    PAD_7 = Coin_SWIG_Python.SoKeyboardEvent_PAD_7
    PAD_8 = Coin_SWIG_Python.SoKeyboardEvent_PAD_8
    PAD_9 = Coin_SWIG_Python.SoKeyboardEvent_PAD_9
    PAD_ADD = Coin_SWIG_Python.SoKeyboardEvent_PAD_ADD
    PAD_SUBTRACT = Coin_SWIG_Python.SoKeyboardEvent_PAD_SUBTRACT
    PAD_MULTIPLY = Coin_SWIG_Python.SoKeyboardEvent_PAD_MULTIPLY
    PAD_DIVIDE = Coin_SWIG_Python.SoKeyboardEvent_PAD_DIVIDE
    PAD_SPACE = Coin_SWIG_Python.SoKeyboardEvent_PAD_SPACE
    PAD_TAB = Coin_SWIG_Python.SoKeyboardEvent_PAD_TAB
    PAD_INSERT = Coin_SWIG_Python.SoKeyboardEvent_PAD_INSERT
    PAD_DELETE = Coin_SWIG_Python.SoKeyboardEvent_PAD_DELETE
    PAD_PERIOD = Coin_SWIG_Python.SoKeyboardEvent_PAD_PERIOD
    F1 = Coin_SWIG_Python.SoKeyboardEvent_F1
    F2 = Coin_SWIG_Python.SoKeyboardEvent_F2
    F3 = Coin_SWIG_Python.SoKeyboardEvent_F3
    F4 = Coin_SWIG_Python.SoKeyboardEvent_F4
    F5 = Coin_SWIG_Python.SoKeyboardEvent_F5
    F6 = Coin_SWIG_Python.SoKeyboardEvent_F6
    F7 = Coin_SWIG_Python.SoKeyboardEvent_F7
    F8 = Coin_SWIG_Python.SoKeyboardEvent_F8
    F9 = Coin_SWIG_Python.SoKeyboardEvent_F9
    F10 = Coin_SWIG_Python.SoKeyboardEvent_F10
    F11 = Coin_SWIG_Python.SoKeyboardEvent_F11
    F12 = Coin_SWIG_Python.SoKeyboardEvent_F12
    BACKSPACE = Coin_SWIG_Python.SoKeyboardEvent_BACKSPACE
    TAB = Coin_SWIG_Python.SoKeyboardEvent_TAB
    RETURN = Coin_SWIG_Python.SoKeyboardEvent_RETURN
    ENTER = Coin_SWIG_Python.SoKeyboardEvent_ENTER
    PAUSE = Coin_SWIG_Python.SoKeyboardEvent_PAUSE
    SCROLL_LOCK = Coin_SWIG_Python.SoKeyboardEvent_SCROLL_LOCK
    ESCAPE = Coin_SWIG_Python.SoKeyboardEvent_ESCAPE
    DELETE = Coin_SWIG_Python.SoKeyboardEvent_DELETE
    KEY_DELETE = Coin_SWIG_Python.SoKeyboardEvent_KEY_DELETE
    PRINT = Coin_SWIG_Python.SoKeyboardEvent_PRINT
    INSERT = Coin_SWIG_Python.SoKeyboardEvent_INSERT
    NUM_LOCK = Coin_SWIG_Python.SoKeyboardEvent_NUM_LOCK
    CAPS_LOCK = Coin_SWIG_Python.SoKeyboardEvent_CAPS_LOCK
    SHIFT_LOCK = Coin_SWIG_Python.SoKeyboardEvent_SHIFT_LOCK
    SPACE = Coin_SWIG_Python.SoKeyboardEvent_SPACE
    APOSTROPHE = Coin_SWIG_Python.SoKeyboardEvent_APOSTROPHE
    COMMA = Coin_SWIG_Python.SoKeyboardEvent_COMMA
    MINUS = Coin_SWIG_Python.SoKeyboardEvent_MINUS
    PERIOD = Coin_SWIG_Python.SoKeyboardEvent_PERIOD
    SLASH = Coin_SWIG_Python.SoKeyboardEvent_SLASH
    SEMICOLON = Coin_SWIG_Python.SoKeyboardEvent_SEMICOLON
    EQUAL = Coin_SWIG_Python.SoKeyboardEvent_EQUAL
    BRACKETLEFT = Coin_SWIG_Python.SoKeyboardEvent_BRACKETLEFT
    BACKSLASH = Coin_SWIG_Python.SoKeyboardEvent_BACKSLASH
    BRACKETRIGHT = Coin_SWIG_Python.SoKeyboardEvent_BRACKETRIGHT
    GRAVE = Coin_SWIG_Python.SoKeyboardEvent_GRAVE

    def __init__(self):
        Coin_SWIG_Python.SoKeyboardEvent_swiginit(self, Coin_SWIG_Python.new_SoKeyboardEvent())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoKeyboardEvent

    def setKey(self, key):
        return Coin_SWIG_Python.SoKeyboardEvent_setKey(self, key)

    def getKey(self):
        return Coin_SWIG_Python.SoKeyboardEvent_getKey(self)

    def setPrintableCharacter(self, c):
        return Coin_SWIG_Python.SoKeyboardEvent_setPrintableCharacter(self, c)

    def getPrintableCharacter(self):
        return Coin_SWIG_Python.SoKeyboardEvent_getPrintableCharacter(self)

    @staticmethod
    def isKeyPressEvent(e, whichKey):
        return Coin_SWIG_Python.SoKeyboardEvent_isKeyPressEvent(e, whichKey)

    @staticmethod
    def isKeyReleaseEvent(e, whichKey):
        return Coin_SWIG_Python.SoKeyboardEvent_isKeyReleaseEvent(e, whichKey)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoKeyboardEvent_initClass()

# Register SoKeyboardEvent in Coin_SWIG_Python:
Coin_SWIG_Python.SoKeyboardEvent_swigregister(SoKeyboardEvent)

def SoKeyboardEvent_getClassTypeId():
    return Coin_SWIG_Python.SoKeyboardEvent_getClassTypeId()

def SoKeyboardEvent_isKeyPressEvent(e, whichKey):
    return Coin_SWIG_Python.SoKeyboardEvent_isKeyPressEvent(e, whichKey)

def SoKeyboardEvent_isKeyReleaseEvent(e, whichKey):
    return Coin_SWIG_Python.SoKeyboardEvent_isKeyReleaseEvent(e, whichKey)

def SoKeyboardEvent_initClass():
    return Coin_SWIG_Python.SoKeyboardEvent_initClass()

class SoMouseButtonEvent(SoButtonEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMouseButtonEvent_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMouseButtonEvent_getTypeId(self)
    ANY = Coin_SWIG_Python.SoMouseButtonEvent_ANY
    BUTTON1 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON1
    BUTTON2 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON2
    BUTTON3 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON3
    BUTTON4 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON4
    BUTTON5 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON5

    def __init__(self):
        Coin_SWIG_Python.SoMouseButtonEvent_swiginit(self, Coin_SWIG_Python.new_SoMouseButtonEvent())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMouseButtonEvent

    def setButton(self, button):
        return Coin_SWIG_Python.SoMouseButtonEvent_setButton(self, button)

    def getButton(self):
        return Coin_SWIG_Python.SoMouseButtonEvent_getButton(self)

    @staticmethod
    def isButtonPressEvent(e, whichButton):
        return Coin_SWIG_Python.SoMouseButtonEvent_isButtonPressEvent(e, whichButton)

    @staticmethod
    def isButtonReleaseEvent(e, whichButton):
        return Coin_SWIG_Python.SoMouseButtonEvent_isButtonReleaseEvent(e, whichButton)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMouseButtonEvent_initClass()

# Register SoMouseButtonEvent in Coin_SWIG_Python:
Coin_SWIG_Python.SoMouseButtonEvent_swigregister(SoMouseButtonEvent)

def SoMouseButtonEvent_getClassTypeId():
    return Coin_SWIG_Python.SoMouseButtonEvent_getClassTypeId()

def SoMouseButtonEvent_isButtonPressEvent(e, whichButton):
    return Coin_SWIG_Python.SoMouseButtonEvent_isButtonPressEvent(e, whichButton)

def SoMouseButtonEvent_isButtonReleaseEvent(e, whichButton):
    return Coin_SWIG_Python.SoMouseButtonEvent_isButtonReleaseEvent(e, whichButton)

def SoMouseButtonEvent_initClass():
    return Coin_SWIG_Python.SoMouseButtonEvent_initClass()

class SoSpaceballButtonEvent(SoButtonEvent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSpaceballButtonEvent_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSpaceballButtonEvent_getTypeId(self)
    ANY = Coin_SWIG_Python.SoSpaceballButtonEvent_ANY
    BUTTON1 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON1
    BUTTON2 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON2
    BUTTON3 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON3
    BUTTON4 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON4
    BUTTON5 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON5
    BUTTON6 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON6
    BUTTON7 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON7
    BUTTON8 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON8
    PICK = Coin_SWIG_Python.SoSpaceballButtonEvent_PICK

    def __init__(self):
        Coin_SWIG_Python.SoSpaceballButtonEvent_swiginit(self, Coin_SWIG_Python.new_SoSpaceballButtonEvent())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpaceballButtonEvent

    def setButton(self, button):
        return Coin_SWIG_Python.SoSpaceballButtonEvent_setButton(self, button)

    def getButton(self):
        return Coin_SWIG_Python.SoSpaceballButtonEvent_getButton(self)

    @staticmethod
    def isButtonPressEvent(e, whichButton):
        return Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonPressEvent(e, whichButton)

    @staticmethod
    def isButtonReleaseEvent(e, whichButton):
        return Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonReleaseEvent(e, whichButton)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSpaceballButtonEvent_initClass()

# Register SoSpaceballButtonEvent in Coin_SWIG_Python:
Coin_SWIG_Python.SoSpaceballButtonEvent_swigregister(SoSpaceballButtonEvent)

def SoSpaceballButtonEvent_getClassTypeId():
    return Coin_SWIG_Python.SoSpaceballButtonEvent_getClassTypeId()

def SoSpaceballButtonEvent_isButtonPressEvent(e, whichButton):
    return Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonPressEvent(e, whichButton)

def SoSpaceballButtonEvent_isButtonReleaseEvent(e, whichButton):
    return Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonReleaseEvent(e, whichButton)

def SoSpaceballButtonEvent_initClass():
    return Coin_SWIG_Python.SoSpaceballButtonEvent_initClass()

class SbBox2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox2s_swiginit(self, Coin_SWIG_Python.new_SbBox2s(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2s

    def getMin(self):
        return Coin_SWIG_Python.SbBox2s_getMin(self)

    def getMax(self):
        return Coin_SWIG_Python.SbBox2s_getMax(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox2s_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox2s_intersect(self, *args)

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox2s_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox2s_getBounds(self, *args)

    def getOrigin(self, originX, originY):
        return Coin_SWIG_Python.SbBox2s_getOrigin(self, originX, originY)

    def getSize(self, sizeX, sizeY):
        return Coin_SWIG_Python.SbBox2s_getSize(self, sizeX, sizeY)

    def getAspectRatio(self):
        return Coin_SWIG_Python.SbBox2s_getAspectRatio(self)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox2s_makeEmpty(self)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbBox2s___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbBox2s___ne__(self, u)

# Register SbBox2s in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox2s_swigregister(SbBox2s)

class SoSFBox2s(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox2s_swiginit(self, Coin_SWIG_Python.new_SoSFBox2s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox2s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox2s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox2s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox2s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox2s_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox2s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox2s___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox2s_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2s_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2s_getValue(self, *args)

# Register SoSFBox2s in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox2s_swigregister(SoSFBox2s)

def SoSFBox2s_createInstance():
    return Coin_SWIG_Python.SoSFBox2s_createInstance()

def SoSFBox2s_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox2s_getClassTypeId()

def SoSFBox2s_initClass():
    return Coin_SWIG_Python.SoSFBox2s_initClass()

class SbVec2i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec2i32_swiginit(self, Coin_SWIG_Python.new_SbVec2i32(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec2i32_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec2i32_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec2i32_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec2i32_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec2i32___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec2i32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec2i32___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec2i32___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec2i32___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2i32

# Register SbVec2i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec2i32_swigregister(SbVec2i32)

class SbBox2i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox2i32_swiginit(self, Coin_SWIG_Python.new_SbBox2i32(*args))

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox2i32_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox2i32_getBounds(self, *args)

    def getMin(self, *args):
        return Coin_SWIG_Python.SbBox2i32_getMin(self, *args)

    def getMax(self, *args):
        return Coin_SWIG_Python.SbBox2i32_getMax(self, *args)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox2i32_extendBy(self, *args)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox2i32_makeEmpty(self)

    def isEmpty(self):
        return Coin_SWIG_Python.SbBox2i32_isEmpty(self)

    def hasArea(self):
        return Coin_SWIG_Python.SbBox2i32_hasArea(self)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox2i32_intersect(self, *args)

    def getCenter(self):
        return Coin_SWIG_Python.SbBox2i32_getCenter(self)

    def getOrigin(self, originX, originY):
        return Coin_SWIG_Python.SbBox2i32_getOrigin(self, originX, originY)

    def getSize(self, sizeX, sizeY):
        return Coin_SWIG_Python.SbBox2i32_getSize(self, sizeX, sizeY)

    def getAspectRatio(self):
        return Coin_SWIG_Python.SbBox2i32_getAspectRatio(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2i32

# Register SbBox2i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox2i32_swigregister(SbBox2i32)

class SoSFBox2i32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox2i32_swiginit(self, Coin_SWIG_Python.new_SoSFBox2i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox2i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox2i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox2i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox2i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox2i32_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox2i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox2i32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox2i32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2i32_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2i32_getValue(self, *args)

# Register SoSFBox2i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox2i32_swigregister(SoSFBox2i32)

def SoSFBox2i32_createInstance():
    return Coin_SWIG_Python.SoSFBox2i32_createInstance()

def SoSFBox2i32_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox2i32_getClassTypeId()

def SoSFBox2i32_initClass():
    return Coin_SWIG_Python.SoSFBox2i32_initClass()

class SbBox2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox2f_swiginit(self, Coin_SWIG_Python.new_SbBox2f(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2f

    def getMin(self):
        return Coin_SWIG_Python.SbBox2f_getMin(self)

    def getMax(self):
        return Coin_SWIG_Python.SbBox2f_getMax(self)

    def getCenter(self):
        return Coin_SWIG_Python.SbBox2f_getCenter(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox2f_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox2f_intersect(self, *args)

    def getClosestPoint(self, p):
        return Coin_SWIG_Python.SbBox2f_getClosestPoint(self, p)

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox2f_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox2f_getBounds(self, *args)

    def getOrigin(self, x0, y0):
        return Coin_SWIG_Python.SbBox2f_getOrigin(self, x0, y0)

    def getSize(self):
        return Coin_SWIG_Python.SbBox2f_getSize(self)

    def getAspectRatio(self):
        return Coin_SWIG_Python.SbBox2f_getAspectRatio(self)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox2f_makeEmpty(self)

    def isEmpty(self):
        return Coin_SWIG_Python.SbBox2f_isEmpty(self)

    def hasArea(self):
        return Coin_SWIG_Python.SbBox2f_hasArea(self)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbBox2f___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbBox2f___ne__(self, u)

# Register SbBox2f in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox2f_swigregister(SbBox2f)

class SoSFBox2f(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox2f_swiginit(self, Coin_SWIG_Python.new_SoSFBox2f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox2f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox2f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox2f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox2f_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox2f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox2f___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox2f_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2f_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2f_getValue(self, *args)

# Register SoSFBox2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox2f_swigregister(SoSFBox2f)

def SoSFBox2f_createInstance():
    return Coin_SWIG_Python.SoSFBox2f_createInstance()

def SoSFBox2f_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox2f_getClassTypeId()

def SoSFBox2f_initClass():
    return Coin_SWIG_Python.SoSFBox2f_initClass()

class SbVec2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec2d_swiginit(self, Coin_SWIG_Python.new_SbVec2d(*args))

    def dot(self, v):
        return Coin_SWIG_Python.SbVec2d_dot(self, v)

    def equals(self, v, tolerance):
        return Coin_SWIG_Python.SbVec2d_equals(self, v, tolerance)

    def getValue(self):
        return Coin_SWIG_Python.SbVec2d_getValue(self)

    def length(self):
        return Coin_SWIG_Python.SbVec2d_length(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec2d_negate(self)

    def normalize(self):
        return Coin_SWIG_Python.SbVec2d_normalize(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec2d_setValue(self, *args)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbVec2d___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec2d___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec2d___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec2d___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec2d_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec2d___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec2d___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec2d___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec2d___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec2d___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec2d___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec2d___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec2d___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec2d___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2d

# Register SbVec2d in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec2d_swigregister(SbVec2d)

class SbBox2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox2d_swiginit(self, Coin_SWIG_Python.new_SbBox2d(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2d

    def getMin(self):
        return Coin_SWIG_Python.SbBox2d_getMin(self)

    def getMax(self):
        return Coin_SWIG_Python.SbBox2d_getMax(self)

    def getCenter(self):
        return Coin_SWIG_Python.SbBox2d_getCenter(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox2d_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox2d_intersect(self, *args)

    def findIntersection(self, a, b, ia, ib):
        return Coin_SWIG_Python.SbBox2d_findIntersection(self, a, b, ia, ib)

    def getClosestPoint(self, p):
        return Coin_SWIG_Python.SbBox2d_getClosestPoint(self, p)

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox2d_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox2d_getBounds(self, *args)

    def getOrigin(self, x0, y0):
        return Coin_SWIG_Python.SbBox2d_getOrigin(self, x0, y0)

    def getSize(self, w, h):
        return Coin_SWIG_Python.SbBox2d_getSize(self, w, h)

    def getAspectRatio(self):
        return Coin_SWIG_Python.SbBox2d_getAspectRatio(self)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox2d_makeEmpty(self)

    def isEmpty(self):
        return Coin_SWIG_Python.SbBox2d_isEmpty(self)

    def hasArea(self):
        return Coin_SWIG_Python.SbBox2d_hasArea(self)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbBox2d___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbBox2d___ne__(self, u)

    def setValue(self, u):
        return Coin_SWIG_Python.SbBox2d_setValue(self, u)

# Register SbBox2d in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox2d_swigregister(SbBox2d)

class SoSFBox2d(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox2d_swiginit(self, Coin_SWIG_Python.new_SoSFBox2d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox2d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox2d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox2d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox2d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox2d_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox2d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox2d___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox2d_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2d_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox2d_getValue(self, *args)

# Register SoSFBox2d in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox2d_swigregister(SoSFBox2d)

def SoSFBox2d_createInstance():
    return Coin_SWIG_Python.SoSFBox2d_createInstance()

def SoSFBox2d_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox2d_getClassTypeId()

def SoSFBox2d_initClass():
    return Coin_SWIG_Python.SoSFBox2d_initClass()

class SbBox3s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox3s_swiginit(self, Coin_SWIG_Python.new_SbBox3s(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3s

    def getMin(self):
        return Coin_SWIG_Python.SbBox3s_getMin(self)

    def getMax(self):
        return Coin_SWIG_Python.SbBox3s_getMax(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox3s_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox3s_intersect(self, *args)

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox3s_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox3s_getBounds(self, *args)

    def getOrigin(self, originX, originY, originZ):
        return Coin_SWIG_Python.SbBox3s_getOrigin(self, originX, originY, originZ)

    def getSize(self, sizeX, sizeY, sizeZ):
        return Coin_SWIG_Python.SbBox3s_getSize(self, sizeX, sizeY, sizeZ)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox3s_makeEmpty(self)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbBox3s___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbBox3s___ne__(self, u)

# Register SbBox3s in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox3s_swigregister(SbBox3s)

class SoSFBox3s(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox3s_swiginit(self, Coin_SWIG_Python.new_SoSFBox3s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox3s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox3s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox3s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox3s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox3s_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox3s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox3s___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox3s_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3s_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3s_getValue(self, *args)

# Register SoSFBox3s in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox3s_swigregister(SoSFBox3s)

def SoSFBox3s_createInstance():
    return Coin_SWIG_Python.SoSFBox3s_createInstance()

def SoSFBox3s_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox3s_getClassTypeId()

def SoSFBox3s_initClass():
    return Coin_SWIG_Python.SoSFBox3s_initClass()

class SbVec3i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec3i32_swiginit(self, Coin_SWIG_Python.new_SbVec3i32(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec3i32_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec3i32_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec3i32_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec3i32_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec3i32___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec3i32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec3i32___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec3i32___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec3i32___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3i32

# Register SbVec3i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec3i32_swigregister(SbVec3i32)

class SbBox3i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox3i32_swiginit(self, Coin_SWIG_Python.new_SbBox3i32(*args))

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox3i32_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox3i32_getBounds(self, *args)

    def getMin(self, *args):
        return Coin_SWIG_Python.SbBox3i32_getMin(self, *args)

    def getMax(self, *args):
        return Coin_SWIG_Python.SbBox3i32_getMax(self, *args)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox3i32_extendBy(self, *args)

    def transform(self, m):
        return Coin_SWIG_Python.SbBox3i32_transform(self, m)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox3i32_makeEmpty(self)

    def isEmpty(self):
        return Coin_SWIG_Python.SbBox3i32_isEmpty(self)

    def hasVolume(self):
        return Coin_SWIG_Python.SbBox3i32_hasVolume(self)

    def getVolume(self):
        return Coin_SWIG_Python.SbBox3i32_getVolume(self)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox3i32_intersect(self, *args)

    def outside(self, MVP, cullBits):
        return Coin_SWIG_Python.SbBox3i32_outside(self, MVP, cullBits)

    def getClosestPoint(self, pt):
        return Coin_SWIG_Python.SbBox3i32_getClosestPoint(self, pt)

    def getCenter(self):
        return Coin_SWIG_Python.SbBox3i32_getCenter(self)

    def getOrigin(self, originX, originY, originZ):
        return Coin_SWIG_Python.SbBox3i32_getOrigin(self, originX, originY, originZ)

    def getSize(self, sizeX, sizeY, sizeZ):
        return Coin_SWIG_Python.SbBox3i32_getSize(self, sizeX, sizeY, sizeZ)

    def getSpan(self, direction, dmin, dmax):
        return Coin_SWIG_Python.SbBox3i32_getSpan(self, direction, dmin, dmax)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3i32

# Register SbBox3i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox3i32_swigregister(SbBox3i32)

class SoSFBox3i32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox3i32_swiginit(self, Coin_SWIG_Python.new_SoSFBox3i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox3i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox3i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox3i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox3i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox3i32_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox3i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox3i32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox3i32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3i32_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3i32_getValue(self, *args)

# Register SoSFBox3i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox3i32_swigregister(SoSFBox3i32)

def SoSFBox3i32_createInstance():
    return Coin_SWIG_Python.SoSFBox3i32_createInstance()

def SoSFBox3i32_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox3i32_getClassTypeId()

def SoSFBox3i32_initClass():
    return Coin_SWIG_Python.SoSFBox3i32_initClass()

class SoSFBox3f(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox3f_swiginit(self, Coin_SWIG_Python.new_SoSFBox3f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox3f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox3f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox3f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox3f_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox3f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox3f___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox3f_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3f_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3f_getValue(self, *args)

# Register SoSFBox3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox3f_swigregister(SoSFBox3f)

def SoSFBox3f_createInstance():
    return Coin_SWIG_Python.SoSFBox3f_createInstance()

def SoSFBox3f_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox3f_getClassTypeId()

def SoSFBox3f_initClass():
    return Coin_SWIG_Python.SoSFBox3f_initClass()

class SbBox3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbBox3d_swiginit(self, Coin_SWIG_Python.new_SbBox3d(*args))

    def setBounds(self, *args):
        return Coin_SWIG_Python.SbBox3d_setBounds(self, *args)

    def getBounds(self, *args):
        return Coin_SWIG_Python.SbBox3d_getBounds(self, *args)

    def getMin(self, *args):
        return Coin_SWIG_Python.SbBox3d_getMin(self, *args)

    def getMax(self, *args):
        return Coin_SWIG_Python.SbBox3d_getMax(self, *args)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbBox3d_extendBy(self, *args)

    def transform(self, matrix):
        return Coin_SWIG_Python.SbBox3d_transform(self, matrix)

    def makeEmpty(self):
        return Coin_SWIG_Python.SbBox3d_makeEmpty(self)

    def isEmpty(self):
        return Coin_SWIG_Python.SbBox3d_isEmpty(self)

    def hasVolume(self):
        return Coin_SWIG_Python.SbBox3d_hasVolume(self)

    def getVolume(self):
        return Coin_SWIG_Python.SbBox3d_getVolume(self)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbBox3d_intersect(self, *args)

    def getClosestPoint(self, point):
        return Coin_SWIG_Python.SbBox3d_getClosestPoint(self, point)

    def outside(self, mvp, cullbits):
        return Coin_SWIG_Python.SbBox3d_outside(self, mvp, cullbits)

    def getCenter(self):
        return Coin_SWIG_Python.SbBox3d_getCenter(self)

    def getOrigin(self, origoX, origoY, origoZ):
        return Coin_SWIG_Python.SbBox3d_getOrigin(self, origoX, origoY, origoZ)

    def getSize(self, sizeX, sizeY, sizeZ):
        return Coin_SWIG_Python.SbBox3d_getSize(self, sizeX, sizeY, sizeZ)

    def getSpan(self, dir, dmin, dmax):
        return Coin_SWIG_Python.SbBox3d_getSpan(self, dir, dmin, dmax)

    def output(self, file):
        return Coin_SWIG_Python.SbBox3d_output(self, file)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3d

# Register SbBox3d in Coin_SWIG_Python:
Coin_SWIG_Python.SbBox3d_swigregister(SbBox3d)

class SoSFBox3d(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFBox3d_swiginit(self, Coin_SWIG_Python.new_SoSFBox3d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFBox3d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFBox3d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFBox3d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFBox3d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFBox3d_isSame(self, field)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFBox3d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFBox3d___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFBox3d_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3d_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SoSFBox3d_getValue(self, *args)

# Register SoSFBox3d in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFBox3d_swigregister(SoSFBox3d)

def SoSFBox3d_createInstance():
    return Coin_SWIG_Python.SoSFBox3d_createInstance()

def SoSFBox3d_getClassTypeId():
    return Coin_SWIG_Python.SoSFBox3d_getClassTypeId()

def SoSFBox3d_initClass():
    return Coin_SWIG_Python.SoSFBox3d_initClass()

class SoSFColorRGBA(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFColorRGBA_swiginit(self, Coin_SWIG_Python.new_SoSFColorRGBA())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFColorRGBA

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFColorRGBA_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFColorRGBA_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFColorRGBA_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFColorRGBA_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFColorRGBA_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFColorRGBA_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFColorRGBA___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFColorRGBA___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFColorRGBA_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFColorRGBA_setValue(self, *args)

    def setHSVValue(self, *args):
        return Coin_SWIG_Python.SoSFColorRGBA_setHSVValue(self, *args)

# Register SoSFColorRGBA in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFColorRGBA_swigregister(SoSFColorRGBA)

def SoSFColorRGBA_createInstance():
    return Coin_SWIG_Python.SoSFColorRGBA_createInstance()

def SoSFColorRGBA_getClassTypeId():
    return Coin_SWIG_Python.SoSFColorRGBA_getClassTypeId()

def SoSFColorRGBA_initClass():
    return Coin_SWIG_Python.SoSFColorRGBA_initClass()

class SoSFDouble(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFDouble_swiginit(self, Coin_SWIG_Python.new_SoSFDouble())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFDouble

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFDouble_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFDouble_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFDouble_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFDouble_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFDouble_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFDouble_getValue(self)

    def setValue(self, newvalue):
        return Coin_SWIG_Python.SoSFDouble_setValue(self, newvalue)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFDouble___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFDouble___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFDouble_initClass()

# Register SoSFDouble in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFDouble_swigregister(SoSFDouble)

def SoSFDouble_createInstance():
    return Coin_SWIG_Python.SoSFDouble_createInstance()

def SoSFDouble_getClassTypeId():
    return Coin_SWIG_Python.SoSFDouble_getClassTypeId()

def SoSFDouble_initClass():
    return Coin_SWIG_Python.SoSFDouble_initClass()

class SoSFEngine(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFEngine_swiginit(self, Coin_SWIG_Python.new_SoSFEngine())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFEngine

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFEngine_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFEngine_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFEngine_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFEngine_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFEngine_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFEngine_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFEngine___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFEngine___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFEngine_initClass()

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoSFEngine_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoSFEngine_referencesCopy(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFEngine_setValue(self, *args)

# Register SoSFEngine in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFEngine_swigregister(SoSFEngine)

def SoSFEngine_createInstance():
    return Coin_SWIG_Python.SoSFEngine_createInstance()

def SoSFEngine_getClassTypeId():
    return Coin_SWIG_Python.SoSFEngine_getClassTypeId()

def SoSFEngine_initClass():
    return Coin_SWIG_Python.SoSFEngine_initClass()

class SoSFImage3(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFImage3_swiginit(self, Coin_SWIG_Python.new_SoSFImage3())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFImage3

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFImage3_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFImage3_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFImage3_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFImage3_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFImage3_isSame(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFImage3_initClass()

    def getValue(self):
        return Coin_SWIG_Python.SoSFImage3_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFImage3___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFImage3___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoSFImage3_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoSFImage3_finishEditing(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFImage3_setValue(self, *args)

# Register SoSFImage3 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFImage3_swigregister(SoSFImage3)

def SoSFImage3_createInstance():
    return Coin_SWIG_Python.SoSFImage3_createInstance()

def SoSFImage3_getClassTypeId():
    return Coin_SWIG_Python.SoSFImage3_getClassTypeId()

def SoSFImage3_initClass():
    return Coin_SWIG_Python.SoSFImage3_initClass()

class SoSFMatrix(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFMatrix_swiginit(self, Coin_SWIG_Python.new_SoSFMatrix())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFMatrix

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFMatrix_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFMatrix_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFMatrix_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFMatrix_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFMatrix_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFMatrix_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFMatrix___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFMatrix___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFMatrix_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFMatrix_setValue(self, *args)

# Register SoSFMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFMatrix_swigregister(SoSFMatrix)

def SoSFMatrix_createInstance():
    return Coin_SWIG_Python.SoSFMatrix_createInstance()

def SoSFMatrix_getClassTypeId():
    return Coin_SWIG_Python.SoSFMatrix_getClassTypeId()

def SoSFMatrix_initClass():
    return Coin_SWIG_Python.SoSFMatrix_initClass()

class SoSFPlane(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFPlane_swiginit(self, Coin_SWIG_Python.new_SoSFPlane())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFPlane

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFPlane_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFPlane_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFPlane_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFPlane_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFPlane_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFPlane_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFPlane___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFPlane___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFPlane_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFPlane_setValue(self, *args)

# Register SoSFPlane in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFPlane_swigregister(SoSFPlane)

def SoSFPlane_createInstance():
    return Coin_SWIG_Python.SoSFPlane_createInstance()

def SoSFPlane_getClassTypeId():
    return Coin_SWIG_Python.SoSFPlane_getClassTypeId()

def SoSFPlane_initClass():
    return Coin_SWIG_Python.SoSFPlane_initClass()

class SoSFUInt32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFUInt32_swiginit(self, Coin_SWIG_Python.new_SoSFUInt32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFUInt32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFUInt32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFUInt32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFUInt32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFUInt32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFUInt32_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFUInt32_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFUInt32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFUInt32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFUInt32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFUInt32_setValue(self, *args)

# Register SoSFUInt32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFUInt32_swigregister(SoSFUInt32)

def SoSFUInt32_createInstance():
    return Coin_SWIG_Python.SoSFUInt32_createInstance()

def SoSFUInt32_getClassTypeId():
    return Coin_SWIG_Python.SoSFUInt32_getClassTypeId()

def SoSFUInt32_initClass():
    return Coin_SWIG_Python.SoSFUInt32_initClass()

class SbVec2b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec2b_swiginit(self, Coin_SWIG_Python.new_SbVec2b(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec2b_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec2b_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec2b_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec2b_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec2b___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec2b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec2b___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec2b___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec2b___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2b

# Register SbVec2b in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec2b_swigregister(SbVec2b)

class SoSFVec2b(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec2b_swiginit(self, Coin_SWIG_Python.new_SoSFVec2b())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2b

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec2b_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec2b_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec2b_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec2b_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec2b_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec2b_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec2b___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec2b___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec2b_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec2b_setValue(self, *args)

# Register SoSFVec2b in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec2b_swigregister(SoSFVec2b)

def SoSFVec2b_createInstance():
    return Coin_SWIG_Python.SoSFVec2b_createInstance()

def SoSFVec2b_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec2b_getClassTypeId()

def SoSFVec2b_initClass():
    return Coin_SWIG_Python.SoSFVec2b_initClass()

class SoSFVec2s(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec2s_swiginit(self, Coin_SWIG_Python.new_SoSFVec2s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec2s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec2s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec2s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec2s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec2s_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec2s_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec2s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec2s___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec2s_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec2s_setValue(self, *args)

# Register SoSFVec2s in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec2s_swigregister(SoSFVec2s)

def SoSFVec2s_createInstance():
    return Coin_SWIG_Python.SoSFVec2s_createInstance()

def SoSFVec2s_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec2s_getClassTypeId()

def SoSFVec2s_initClass():
    return Coin_SWIG_Python.SoSFVec2s_initClass()

class SoSFVec2i32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec2i32_swiginit(self, Coin_SWIG_Python.new_SoSFVec2i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec2i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec2i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec2i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec2i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec2i32_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec2i32_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec2i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec2i32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec2i32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec2i32_setValue(self, *args)

# Register SoSFVec2i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec2i32_swigregister(SoSFVec2i32)

def SoSFVec2i32_createInstance():
    return Coin_SWIG_Python.SoSFVec2i32_createInstance()

def SoSFVec2i32_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec2i32_getClassTypeId()

def SoSFVec2i32_initClass():
    return Coin_SWIG_Python.SoSFVec2i32_initClass()

class SoSFVec2f(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec2f_swiginit(self, Coin_SWIG_Python.new_SoSFVec2f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec2f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec2f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec2f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec2f_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec2f_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec2f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec2f___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec2f_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec2f_setValue(self, *args)

# Register SoSFVec2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec2f_swigregister(SoSFVec2f)

def SoSFVec2f_createInstance():
    return Coin_SWIG_Python.SoSFVec2f_createInstance()

def SoSFVec2f_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec2f_getClassTypeId()

def SoSFVec2f_initClass():
    return Coin_SWIG_Python.SoSFVec2f_initClass()

class SoSFVec2d(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec2d_swiginit(self, Coin_SWIG_Python.new_SoSFVec2d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec2d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec2d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec2d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec2d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec2d_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec2d_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec2d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec2d___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec2d_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec2d_setValue(self, *args)

# Register SoSFVec2d in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec2d_swigregister(SoSFVec2d)

def SoSFVec2d_createInstance():
    return Coin_SWIG_Python.SoSFVec2d_createInstance()

def SoSFVec2d_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec2d_getClassTypeId()

def SoSFVec2d_initClass():
    return Coin_SWIG_Python.SoSFVec2d_initClass()

class SbVec3b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec3b_swiginit(self, Coin_SWIG_Python.new_SbVec3b(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec3b_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec3b_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec3b_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec3b_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec3b___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec3b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec3b___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec3b___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec3b___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3b

# Register SbVec3b in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec3b_swigregister(SbVec3b)

class SoSFVec3b(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec3b_swiginit(self, Coin_SWIG_Python.new_SoSFVec3b())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3b

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec3b_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec3b_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec3b_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec3b_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec3b_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec3b_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec3b___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec3b___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec3b_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec3b_setValue(self, *args)

# Register SoSFVec3b in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec3b_swigregister(SoSFVec3b)

def SoSFVec3b_createInstance():
    return Coin_SWIG_Python.SoSFVec3b_createInstance()

def SoSFVec3b_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec3b_getClassTypeId()

def SoSFVec3b_initClass():
    return Coin_SWIG_Python.SoSFVec3b_initClass()

class SoSFVec3s(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec3s_swiginit(self, Coin_SWIG_Python.new_SoSFVec3s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec3s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec3s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec3s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec3s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec3s_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec3s_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec3s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec3s___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec3s_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec3s_setValue(self, *args)

# Register SoSFVec3s in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec3s_swigregister(SoSFVec3s)

def SoSFVec3s_createInstance():
    return Coin_SWIG_Python.SoSFVec3s_createInstance()

def SoSFVec3s_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec3s_getClassTypeId()

def SoSFVec3s_initClass():
    return Coin_SWIG_Python.SoSFVec3s_initClass()

class SoSFVec3i32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec3i32_swiginit(self, Coin_SWIG_Python.new_SoSFVec3i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec3i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec3i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec3i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec3i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec3i32_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec3i32_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec3i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec3i32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec3i32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec3i32_setValue(self, *args)

# Register SoSFVec3i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec3i32_swigregister(SoSFVec3i32)

def SoSFVec3i32_createInstance():
    return Coin_SWIG_Python.SoSFVec3i32_createInstance()

def SoSFVec3i32_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec3i32_getClassTypeId()

def SoSFVec3i32_initClass():
    return Coin_SWIG_Python.SoSFVec3i32_initClass()

class SoSFVec3d(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec3d_swiginit(self, Coin_SWIG_Python.new_SoSFVec3d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec3d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec3d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec3d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec3d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec3d_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec3d_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec3d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec3d___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec3d_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec3d_setValue(self, *args)

# Register SoSFVec3d in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec3d_swigregister(SoSFVec3d)

def SoSFVec3d_createInstance():
    return Coin_SWIG_Python.SoSFVec3d_createInstance()

def SoSFVec3d_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec3d_getClassTypeId()

def SoSFVec3d_initClass():
    return Coin_SWIG_Python.SoSFVec3d_initClass()

class SbVec4b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4b_swiginit(self, Coin_SWIG_Python.new_SbVec4b(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4b_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec4b_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4b_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec4b_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec4b___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec4b___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec4b___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4b___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4b

# Register SbVec4b in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4b_swigregister(SbVec4b)

class SoSFVec4b(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4b_swiginit(self, Coin_SWIG_Python.new_SoSFVec4b())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4b

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4b_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4b_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4b_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4b_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4b_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4b_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4b___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4b___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4b_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4b_setValue(self, *args)

# Register SoSFVec4b in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4b_swigregister(SoSFVec4b)

def SoSFVec4b_createInstance():
    return Coin_SWIG_Python.SoSFVec4b_createInstance()

def SoSFVec4b_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4b_getClassTypeId()

def SoSFVec4b_initClass():
    return Coin_SWIG_Python.SoSFVec4b_initClass()

class SbVec4s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4s_swiginit(self, Coin_SWIG_Python.new_SbVec4s(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4s_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec4s_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4s_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec4s_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec4s___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec4s___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec4s___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4s___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4s

# Register SbVec4s in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4s_swigregister(SbVec4s)

class SoSFVec4s(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4s_swiginit(self, Coin_SWIG_Python.new_SoSFVec4s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4s_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4s_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4s___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4s_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4s_setValue(self, *args)

# Register SoSFVec4s in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4s_swigregister(SoSFVec4s)

def SoSFVec4s_createInstance():
    return Coin_SWIG_Python.SoSFVec4s_createInstance()

def SoSFVec4s_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4s_getClassTypeId()

def SoSFVec4s_initClass():
    return Coin_SWIG_Python.SoSFVec4s_initClass()

class SbVec4i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4i32_swiginit(self, Coin_SWIG_Python.new_SbVec4i32(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4i32_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec4i32_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4i32_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec4i32_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec4i32___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4i32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec4i32___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec4i32___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4i32___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4i32

# Register SbVec4i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4i32_swigregister(SbVec4i32)

class SoSFVec4i32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4i32_swiginit(self, Coin_SWIG_Python.new_SoSFVec4i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4i32_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4i32_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4i32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4i32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4i32_setValue(self, *args)

# Register SoSFVec4i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4i32_swigregister(SoSFVec4i32)

def SoSFVec4i32_createInstance():
    return Coin_SWIG_Python.SoSFVec4i32_createInstance()

def SoSFVec4i32_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4i32_getClassTypeId()

def SoSFVec4i32_initClass():
    return Coin_SWIG_Python.SoSFVec4i32_initClass()

class SoSFVec4f(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4f_swiginit(self, Coin_SWIG_Python.new_SoSFVec4f())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4f

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4f_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4f_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4f_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4f_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4f_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4f___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4f___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4f_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4f_setValue(self, *args)

# Register SoSFVec4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4f_swigregister(SoSFVec4f)

def SoSFVec4f_createInstance():
    return Coin_SWIG_Python.SoSFVec4f_createInstance()

def SoSFVec4f_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4f_getClassTypeId()

def SoSFVec4f_initClass():
    return Coin_SWIG_Python.SoSFVec4f_initClass()

class SbVec4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4d_swiginit(self, Coin_SWIG_Python.new_SbVec4d(*args))

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4d_dot(self, v)

    def equals(self, v, tolerance):
        return Coin_SWIG_Python.SbVec4d_equals(self, v, tolerance)

    def getReal(self, v):
        return Coin_SWIG_Python.SbVec4d_getReal(self, v)

    def getValue(self):
        return Coin_SWIG_Python.SbVec4d_getValue(self)

    def length(self):
        return Coin_SWIG_Python.SbVec4d_length(self)

    def negate(self):
        return Coin_SWIG_Python.SbVec4d_negate(self)

    def normalize(self):
        return Coin_SWIG_Python.SbVec4d_normalize(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4d_setValue(self, *args)

    def __imul__(self, d):
        return Coin_SWIG_Python.SbVec4d___imul__(self, d)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return Coin_SWIG_Python.SbVec4d___iadd__(self, u)

    def __isub__(self, u):
        return Coin_SWIG_Python.SbVec4d___isub__(self, u)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4d___neg__(self)

    def output(self, fp):
        return Coin_SWIG_Python.SbVec4d_output(self, fp)

    def __add__(self, u):
        return Coin_SWIG_Python.SbVec4d___add__(self, u)

    def __sub__(self, u):
        return Coin_SWIG_Python.SbVec4d___sub__(self, u)

    def __mul__(self, d):
        return Coin_SWIG_Python.SbVec4d___mul__(self, d)

    def __rmul__(self, d):
        return Coin_SWIG_Python.SbVec4d___rmul__(self, d)

    def __div__(self, d):
        return Coin_SWIG_Python.SbVec4d___div__(self, d)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbVec4d___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbVec4d___nq__(self, u)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec4d___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec4d___setitem__(self, i, value)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4d

# Register SbVec4d in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4d_swigregister(SbVec4d)

class SoSFVec4d(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4d_swiginit(self, Coin_SWIG_Python.new_SoSFVec4d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4d_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4d_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4d___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4d_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4d_setValue(self, *args)

# Register SoSFVec4d in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4d_swigregister(SoSFVec4d)

def SoSFVec4d_createInstance():
    return Coin_SWIG_Python.SoSFVec4d_createInstance()

def SoSFVec4d_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4d_getClassTypeId()

def SoSFVec4d_initClass():
    return Coin_SWIG_Python.SoSFVec4d_initClass()

class SbVec4ub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4ub_swiginit(self, Coin_SWIG_Python.new_SbVec4ub(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4ub_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec4ub_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4ub_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec4ub_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec4ub___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4ub___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec4ub___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec4ub___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4ub___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4ub

# Register SbVec4ub in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4ub_swigregister(SbVec4ub)

class SoSFVec4ub(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4ub_swiginit(self, Coin_SWIG_Python.new_SoSFVec4ub())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4ub

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4ub_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4ub_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4ub_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4ub_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4ub_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4ub_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4ub___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4ub___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4ub_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4ub_setValue(self, *args)

# Register SoSFVec4ub in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4ub_swigregister(SoSFVec4ub)

def SoSFVec4ub_createInstance():
    return Coin_SWIG_Python.SoSFVec4ub_createInstance()

def SoSFVec4ub_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4ub_getClassTypeId()

def SoSFVec4ub_initClass():
    return Coin_SWIG_Python.SoSFVec4ub_initClass()

class SbVec4us(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4us_swiginit(self, Coin_SWIG_Python.new_SbVec4us(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4us_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec4us_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4us_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec4us_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec4us___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4us___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec4us___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec4us___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4us___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4us

# Register SbVec4us in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4us_swigregister(SbVec4us)

class SoSFVec4us(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4us_swiginit(self, Coin_SWIG_Python.new_SoSFVec4us())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4us

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4us_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4us_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4us_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4us_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4us_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4us_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4us___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4us___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4us_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4us_setValue(self, *args)

# Register SoSFVec4us in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4us_swigregister(SoSFVec4us)

def SoSFVec4us_createInstance():
    return Coin_SWIG_Python.SoSFVec4us_createInstance()

def SoSFVec4us_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4us_getClassTypeId()

def SoSFVec4us_initClass():
    return Coin_SWIG_Python.SoSFVec4us_initClass()

class SbVec4ui32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbVec4ui32_swiginit(self, Coin_SWIG_Python.new_SbVec4ui32(*args))

    def setValue(self, *args):
        return Coin_SWIG_Python.SbVec4ui32_setValue(self, *args)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbVec4ui32_getValue(self, *args)

    def dot(self, v):
        return Coin_SWIG_Python.SbVec4ui32_dot(self, v)

    def negate(self):
        return Coin_SWIG_Python.SbVec4ui32_negate(self)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbVec4ui32___imul__(self, *args)

    def __itruediv__(self, *args):
        return Coin_SWIG_Python.SbVec4ui32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, v):
        return Coin_SWIG_Python.SbVec4ui32___iadd__(self, v)

    def __isub__(self, v):
        return Coin_SWIG_Python.SbVec4ui32___isub__(self, v)

    def __neg__(self):
        return Coin_SWIG_Python.SbVec4ui32___neg__(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4ui32

# Register SbVec4ui32 in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec4ui32_swigregister(SbVec4ui32)

class SoSFVec4ui32(SoSField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSFVec4ui32_swiginit(self, Coin_SWIG_Python.new_SoSFVec4ui32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4ui32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoSFVec4ui32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSFVec4ui32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSFVec4ui32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoSFVec4ui32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoSFVec4ui32_isSame(self, field)

    def getValue(self):
        return Coin_SWIG_Python.SoSFVec4ui32_getValue(self)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoSFVec4ui32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoSFVec4ui32___ne__(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSFVec4ui32_initClass()

    def setValue(self, *args):
        return Coin_SWIG_Python.SoSFVec4ui32_setValue(self, *args)

# Register SoSFVec4ui32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSFVec4ui32_swigregister(SoSFVec4ui32)

def SoSFVec4ui32_createInstance():
    return Coin_SWIG_Python.SoSFVec4ui32_createInstance()

def SoSFVec4ui32_getClassTypeId():
    return Coin_SWIG_Python.SoSFVec4ui32_getClassTypeId()

def SoSFVec4ui32_initClass():
    return Coin_SWIG_Python.SoSFVec4ui32_initClass()

class SoMFColor(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFColor_swiginit(self, Coin_SWIG_Python.new_SoMFColor())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFColor

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFColor_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFColor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFColor_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFColor_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFColor_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFColor_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFColor___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFColor___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFColor_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFColor_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFColor_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFColor_initClass()

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFColor_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFColor_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFColor_setValues,args)



    def setHSVValues(self, start, num, hsv):
        return Coin_SWIG_Python.SoMFColor_setHSVValues(self, start, num, hsv)

    def setHSVValue(self, *args):
        return Coin_SWIG_Python.SoMFColor_setHSVValue(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFColor_set1Value(self, *args)

    def set1HSVValue(self, *args):
        return Coin_SWIG_Python.SoMFColor_set1HSVValue(self, *args)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFColor___getitem__(self, i)

    def __setitem__(self, *args):
        return Coin_SWIG_Python.SoMFColor___setitem__(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFColor_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFColor_getValues(self, i)

# Register SoMFColor in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFColor_swigregister(SoMFColor)

def SoMFColor_createInstance():
    return Coin_SWIG_Python.SoMFColor_createInstance()

def SoMFColor_getClassTypeId():
    return Coin_SWIG_Python.SoMFColor_getClassTypeId()

def SoMFColor_initClass():
    return Coin_SWIG_Python.SoMFColor_initClass()

class SoMFColorRGBA(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFColorRGBA_swiginit(self, Coin_SWIG_Python.new_SoMFColorRGBA())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFColorRGBA

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFColorRGBA_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFColorRGBA_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFColorRGBA_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFColorRGBA_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFColorRGBA_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFColorRGBA_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFColorRGBA_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFColorRGBA___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFColorRGBA___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFColorRGBA_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFColorRGBA_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFColorRGBA_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFColorRGBA_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFColorRGBA_setValues(self, *args)

    def setHSVValues(self, start, num, hsv):
        return Coin_SWIG_Python.SoMFColorRGBA_setHSVValues(self, start, num, hsv)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFColorRGBA_setValue(self, *args)

    def setHSVValue(self, *args):
        return Coin_SWIG_Python.SoMFColorRGBA_setHSVValue(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFColorRGBA_set1Value(self, *args)

    def set1HSVValue(self, *args):
        return Coin_SWIG_Python.SoMFColorRGBA_set1HSVValue(self, *args)

# Register SoMFColorRGBA in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFColorRGBA_swigregister(SoMFColorRGBA)

def SoMFColorRGBA_createInstance():
    return Coin_SWIG_Python.SoMFColorRGBA_createInstance()

def SoMFColorRGBA_getClassTypeId():
    return Coin_SWIG_Python.SoMFColorRGBA_getClassTypeId()

def SoMFColorRGBA_initClass():
    return Coin_SWIG_Python.SoMFColorRGBA_initClass()

class SoMFDouble(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFDouble_swiginit(self, Coin_SWIG_Python.new_SoMFDouble())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFDouble

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFDouble_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFDouble_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFDouble_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFDouble_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFDouble_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFDouble_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFDouble_find(self, value, addifnotfound)

    def setValues(self, start, num, newvals):
        return Coin_SWIG_Python.SoMFDouble_setValues(self, start, num, newvals)

    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFDouble_set1Value(self, idx, value)

    def setValue(self, value):
        return Coin_SWIG_Python.SoMFDouble_setValue(self, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFDouble___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFDouble___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFDouble_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFDouble_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFDouble_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFDouble_initClass()

# Register SoMFDouble in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFDouble_swigregister(SoMFDouble)

def SoMFDouble_createInstance():
    return Coin_SWIG_Python.SoMFDouble_createInstance()

def SoMFDouble_getClassTypeId():
    return Coin_SWIG_Python.SoMFDouble_getClassTypeId()

def SoMFDouble_initClass():
    return Coin_SWIG_Python.SoMFDouble_initClass()

class SoMFEngine(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFEngine_swiginit(self, Coin_SWIG_Python.new_SoMFEngine())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFEngine

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFEngine_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFEngine_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFEngine_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFEngine_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFEngine_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFEngine_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFEngine_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFEngine_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFEngine_setValues,args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFEngine_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFEngine___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFEngine___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFEngine_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFEngine_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFEngine_initClass()

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoMFEngine_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoMFEngine_referencesCopy(self)

    def deleteValues(self, start, num=-1):
        return Coin_SWIG_Python.SoMFEngine_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return Coin_SWIG_Python.SoMFEngine_insertSpace(self, start, num)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFEngine___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFEngine___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFEngine_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFEngine_getValues(self, i)

# Register SoMFEngine in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFEngine_swigregister(SoMFEngine)

def SoMFEngine_createInstance():
    return Coin_SWIG_Python.SoMFEngine_createInstance()

def SoMFEngine_getClassTypeId():
    return Coin_SWIG_Python.SoMFEngine_getClassTypeId()

def SoMFEngine_initClass():
    return Coin_SWIG_Python.SoMFEngine_initClass()

class SoMFBitMask(SoMFEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFBitMask_swiginit(self, Coin_SWIG_Python.new_SoMFBitMask())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFBitMask

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFBitMask_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFBitMask_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFBitMask_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFBitMask_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFBitMask_isSame(self, field)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFBitMask_initClass()

# Register SoMFBitMask in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFBitMask_swigregister(SoMFBitMask)

def SoMFBitMask_createInstance():
    return Coin_SWIG_Python.SoMFBitMask_createInstance()

def SoMFBitMask_getClassTypeId():
    return Coin_SWIG_Python.SoMFBitMask_getClassTypeId()

def SoMFBitMask_initClass():
    return Coin_SWIG_Python.SoMFBitMask_initClass()

class SoMFInt32(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFInt32_swiginit(self, Coin_SWIG_Python.new_SoMFInt32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFInt32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFInt32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFInt32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFInt32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFInt32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFInt32_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFInt32_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFInt32):
             val = args[1].getValues()
             return _coin.SoMFInt32_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFInt32_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFInt32):
             val = args[2].getValues()
             return _coin.SoMFInt32_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFInt32_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFInt32_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFInt32_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFInt32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFInt32___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFInt32_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFInt32_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFInt32_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFInt32_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFInt32___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFInt32___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFInt32_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFInt32_getValues(self, i)

# Register SoMFInt32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFInt32_swigregister(SoMFInt32)

def SoMFInt32_createInstance():
    return Coin_SWIG_Python.SoMFInt32_createInstance()

def SoMFInt32_getClassTypeId():
    return Coin_SWIG_Python.SoMFInt32_getClassTypeId()

def SoMFInt32_initClass():
    return Coin_SWIG_Python.SoMFInt32_initClass()

class SoMFNode(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFNode_swiginit(self, Coin_SWIG_Python.new_SoMFNode())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFNode

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFNode_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFNode_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFNode_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFNode_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFNode_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFNode_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFNode_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFNode_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFNode_setValues,args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFNode_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFNode___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFNode___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFNode_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFNode_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFNode_initClass()

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoMFNode_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoMFNode_referencesCopy(self)

    def addNode(self, node):
        return Coin_SWIG_Python.SoMFNode_addNode(self, node)

    def insertNode(self, node, idx):
        return Coin_SWIG_Python.SoMFNode_insertNode(self, node, idx)

    def getNode(self, idx):
        return Coin_SWIG_Python.SoMFNode_getNode(self, idx)

    def findNode(self, node):
        return Coin_SWIG_Python.SoMFNode_findNode(self, node)

    def getNumNodes(self):
        return Coin_SWIG_Python.SoMFNode_getNumNodes(self)

    def removeNode(self, *args):
        return Coin_SWIG_Python.SoMFNode_removeNode(self, *args)

    def removeAllNodes(self):
        return Coin_SWIG_Python.SoMFNode_removeAllNodes(self)

    def replaceNode(self, *args):
        return Coin_SWIG_Python.SoMFNode_replaceNode(self, *args)

    def deleteValues(self, start, num=-1):
        return Coin_SWIG_Python.SoMFNode_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return Coin_SWIG_Python.SoMFNode_insertSpace(self, start, num)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFNode___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFNode___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFNode_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFNode_getValues(self, i)

# Register SoMFNode in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFNode_swigregister(SoMFNode)

def SoMFNode_createInstance():
    return Coin_SWIG_Python.SoMFNode_createInstance()

def SoMFNode_getClassTypeId():
    return Coin_SWIG_Python.SoMFNode_getClassTypeId()

def SoMFNode_initClass():
    return Coin_SWIG_Python.SoMFNode_initClass()

class SoMFPath(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFPath_swiginit(self, Coin_SWIG_Python.new_SoMFPath())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFPath

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFPath_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFPath_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFPath_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFPath_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFPath_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFPath_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFPath_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFPath_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFPath_setValues,args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFPath_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFPath___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFPath___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFPath_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFPath_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFPath_initClass()

    def notify(self, l):
        return Coin_SWIG_Python.SoMFPath_notify(self, l)

    def fixCopy(self, copyconnections):
        return Coin_SWIG_Python.SoMFPath_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return Coin_SWIG_Python.SoMFPath_referencesCopy(self)

    def deleteValues(self, start, num=-1):
        return Coin_SWIG_Python.SoMFPath_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return Coin_SWIG_Python.SoMFPath_insertSpace(self, start, num)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFPath___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFPath___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFPath_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFPath_getValues(self, i)

# Register SoMFPath in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFPath_swigregister(SoMFPath)

def SoMFPath_createInstance():
    return Coin_SWIG_Python.SoMFPath_createInstance()

def SoMFPath_getClassTypeId():
    return Coin_SWIG_Python.SoMFPath_getClassTypeId()

def SoMFPath_initClass():
    return Coin_SWIG_Python.SoMFPath_initClass()

class SoMFPlane(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFPlane_swiginit(self, Coin_SWIG_Python.new_SoMFPlane())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFPlane

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFPlane_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFPlane_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFPlane_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFPlane_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFPlane_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFPlane_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFPlane_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFPlane_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFPlane_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFPlane_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFPlane___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFPlane___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFPlane_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFPlane_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFPlane_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFPlane___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFPlane___setitem__(self, i, value)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFPlane_getValues(self, i)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFPlane_setValue(self, *args)

# Register SoMFPlane in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFPlane_swigregister(SoMFPlane)

def SoMFPlane_createInstance():
    return Coin_SWIG_Python.SoMFPlane_createInstance()

def SoMFPlane_getClassTypeId():
    return Coin_SWIG_Python.SoMFPlane_getClassTypeId()

def SoMFPlane_initClass():
    return Coin_SWIG_Python.SoMFPlane_initClass()

class SoMFShort(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFShort_swiginit(self, Coin_SWIG_Python.new_SoMFShort())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFShort

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFShort_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFShort_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFShort_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFShort_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFShort_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFShort_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFShort_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFShort_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFShort_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFShort_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFShort___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFShort___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFShort_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFShort_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFShort_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFShort_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFShort___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFShort___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFShort_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFShort_getValues(self, i)

# Register SoMFShort in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFShort_swigregister(SoMFShort)

def SoMFShort_createInstance():
    return Coin_SWIG_Python.SoMFShort_createInstance()

def SoMFShort_getClassTypeId():
    return Coin_SWIG_Python.SoMFShort_getClassTypeId()

def SoMFShort_initClass():
    return Coin_SWIG_Python.SoMFShort_initClass()

class SoMFTime(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFTime_swiginit(self, Coin_SWIG_Python.new_SoMFTime())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFTime

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFTime_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFTime_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFTime_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFTime_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFTime_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFTime_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFTime_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFTime_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFTime_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFTime_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFTime___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFTime___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFTime_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFTime_finishEditing(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFTime_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFTime___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFTime___setitem__(self, i, value)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFTime_getValues(self, i)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFTime_setValue(self, *args)

# Register SoMFTime in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFTime_swigregister(SoMFTime)

def SoMFTime_createInstance():
    return Coin_SWIG_Python.SoMFTime_createInstance()

def SoMFTime_getClassTypeId():
    return Coin_SWIG_Python.SoMFTime_getClassTypeId()

def SoMFTime_initClass():
    return Coin_SWIG_Python.SoMFTime_initClass()

class SoMFUInt32(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFUInt32_swiginit(self, Coin_SWIG_Python.new_SoMFUInt32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFUInt32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFUInt32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFUInt32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFUInt32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFUInt32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFUInt32_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFUInt32_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFUInt32):
             val = args[1].getValues()
             return _coin.SoMFUInt32_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFUInt32_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFUInt32):
             val = args[2].getValues()
             return _coin.SoMFUInt32_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFUInt32_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFUInt32_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFUInt32_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFUInt32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFUInt32___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFUInt32_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFUInt32_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFUInt32_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFUInt32_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFUInt32___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFUInt32___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFUInt32_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFUInt32_getValues(self, i)

# Register SoMFUInt32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFUInt32_swigregister(SoMFUInt32)

def SoMFUInt32_createInstance():
    return Coin_SWIG_Python.SoMFUInt32_createInstance()

def SoMFUInt32_getClassTypeId():
    return Coin_SWIG_Python.SoMFUInt32_getClassTypeId()

def SoMFUInt32_initClass():
    return Coin_SWIG_Python.SoMFUInt32_initClass()

class SoMFUShort(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFUShort_swiginit(self, Coin_SWIG_Python.new_SoMFUShort())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFUShort

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFUShort_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFUShort_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFUShort_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFUShort_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFUShort_isSame(self, field)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFUShort_find(self, value, addifnotfound)

    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFUShort_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFUShort_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFUShort_setValues(*args)



    def set1Value(self, idx, value):
        return Coin_SWIG_Python.SoMFUShort_set1Value(self, idx, value)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFUShort___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFUShort___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFUShort_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFUShort_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFUShort_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFUShort_initClass()

    def __getitem__(self, i):
        return Coin_SWIG_Python.SoMFUShort___getitem__(self, i)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SoMFUShort___setitem__(self, i, value)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFUShort_setValue(self, *args)

    def getValues(self, i=0):
        return Coin_SWIG_Python.SoMFUShort_getValues(self, i)

# Register SoMFUShort in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFUShort_swigregister(SoMFUShort)

def SoMFUShort_createInstance():
    return Coin_SWIG_Python.SoMFUShort_createInstance()

def SoMFUShort_getClassTypeId():
    return Coin_SWIG_Python.SoMFUShort_getClassTypeId()

def SoMFUShort_initClass():
    return Coin_SWIG_Python.SoMFUShort_initClass()

class SoMFVec2b(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec2b_swiginit(self, Coin_SWIG_Python.new_SoMFVec2b())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2b

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec2b_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec2b_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec2b_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec2b_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec2b_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec2b_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec2b_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec2b___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec2b___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec2b_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec2b_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec2b_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec2b_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec2b_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec2b_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec2b_setValue(self, *args)

# Register SoMFVec2b in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec2b_swigregister(SoMFVec2b)

def SoMFVec2b_createInstance():
    return Coin_SWIG_Python.SoMFVec2b_createInstance()

def SoMFVec2b_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec2b_getClassTypeId()

def SoMFVec2b_initClass():
    return Coin_SWIG_Python.SoMFVec2b_initClass()

class SoMFVec2s(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec2s_swiginit(self, Coin_SWIG_Python.new_SoMFVec2s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec2s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec2s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec2s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec2s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec2s_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec2s_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec2s_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec2s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec2s___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec2s_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec2s_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec2s_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec2s_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec2s_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec2s_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec2s_setValue(self, *args)

# Register SoMFVec2s in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec2s_swigregister(SoMFVec2s)

def SoMFVec2s_createInstance():
    return Coin_SWIG_Python.SoMFVec2s_createInstance()

def SoMFVec2s_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec2s_getClassTypeId()

def SoMFVec2s_initClass():
    return Coin_SWIG_Python.SoMFVec2s_initClass()

class SoMFVec2i32(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec2i32_swiginit(self, Coin_SWIG_Python.new_SoMFVec2i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec2i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec2i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec2i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec2i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec2i32_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec2i32_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec2i32_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec2i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec2i32___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec2i32_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec2i32_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec2i32_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec2i32_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec2i32_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec2i32_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec2i32_setValue(self, *args)

# Register SoMFVec2i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec2i32_swigregister(SoMFVec2i32)

def SoMFVec2i32_createInstance():
    return Coin_SWIG_Python.SoMFVec2i32_createInstance()

def SoMFVec2i32_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec2i32_getClassTypeId()

def SoMFVec2i32_initClass():
    return Coin_SWIG_Python.SoMFVec2i32_initClass()

class SoMFVec2d(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec2d_swiginit(self, Coin_SWIG_Python.new_SoMFVec2d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec2d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec2d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec2d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec2d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec2d_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec2d_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec2d_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec2d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec2d___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec2d_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec2d_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec2d_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec2d_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec2d_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec2d_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec2d_setValue(self, *args)

# Register SoMFVec2d in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec2d_swigregister(SoMFVec2d)

def SoMFVec2d_createInstance():
    return Coin_SWIG_Python.SoMFVec2d_createInstance()

def SoMFVec2d_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec2d_getClassTypeId()

def SoMFVec2d_initClass():
    return Coin_SWIG_Python.SoMFVec2d_initClass()

class SoMFVec3b(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec3b_swiginit(self, Coin_SWIG_Python.new_SoMFVec3b())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3b

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec3b_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec3b_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec3b_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec3b_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec3b_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec3b_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec3b_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec3b___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec3b___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec3b_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec3b_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec3b_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec3b_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec3b_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec3b_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec3b_setValue(self, *args)

# Register SoMFVec3b in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec3b_swigregister(SoMFVec3b)

def SoMFVec3b_createInstance():
    return Coin_SWIG_Python.SoMFVec3b_createInstance()

def SoMFVec3b_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec3b_getClassTypeId()

def SoMFVec3b_initClass():
    return Coin_SWIG_Python.SoMFVec3b_initClass()

class SoMFVec3s(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec3s_swiginit(self, Coin_SWIG_Python.new_SoMFVec3s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec3s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec3s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec3s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec3s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec3s_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec3s_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec3s_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec3s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec3s___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec3s_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec3s_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec3s_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec3s_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec3s_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec3s_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec3s_setValue(self, *args)

# Register SoMFVec3s in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec3s_swigregister(SoMFVec3s)

def SoMFVec3s_createInstance():
    return Coin_SWIG_Python.SoMFVec3s_createInstance()

def SoMFVec3s_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec3s_getClassTypeId()

def SoMFVec3s_initClass():
    return Coin_SWIG_Python.SoMFVec3s_initClass()

class SoMFVec3i32(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec3i32_swiginit(self, Coin_SWIG_Python.new_SoMFVec3i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec3i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec3i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec3i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec3i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec3i32_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec3i32_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec3i32_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec3i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec3i32___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec3i32_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec3i32_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec3i32_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec3i32_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec3i32_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec3i32_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec3i32_setValue(self, *args)

# Register SoMFVec3i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec3i32_swigregister(SoMFVec3i32)

def SoMFVec3i32_createInstance():
    return Coin_SWIG_Python.SoMFVec3i32_createInstance()

def SoMFVec3i32_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec3i32_getClassTypeId()

def SoMFVec3i32_initClass():
    return Coin_SWIG_Python.SoMFVec3i32_initClass()

class SoMFVec3d(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec3d_swiginit(self, Coin_SWIG_Python.new_SoMFVec3d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec3d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec3d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec3d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec3d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec3d_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec3d_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec3d_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec3d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec3d___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec3d_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec3d_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec3d_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec3d_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec3d_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec3d_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec3d_setValue(self, *args)

# Register SoMFVec3d in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec3d_swigregister(SoMFVec3d)

def SoMFVec3d_createInstance():
    return Coin_SWIG_Python.SoMFVec3d_createInstance()

def SoMFVec3d_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec3d_getClassTypeId()

def SoMFVec3d_initClass():
    return Coin_SWIG_Python.SoMFVec3d_initClass()

class SoMFVec4b(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4b_swiginit(self, Coin_SWIG_Python.new_SoMFVec4b())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4b

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4b_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4b_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4b_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4b_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4b_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4b_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4b_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4b___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4b___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4b_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4b_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4b_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4b_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4b_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4b_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4b_setValue(self, *args)

# Register SoMFVec4b in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4b_swigregister(SoMFVec4b)

def SoMFVec4b_createInstance():
    return Coin_SWIG_Python.SoMFVec4b_createInstance()

def SoMFVec4b_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4b_getClassTypeId()

def SoMFVec4b_initClass():
    return Coin_SWIG_Python.SoMFVec4b_initClass()

class SoMFVec4s(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4s_swiginit(self, Coin_SWIG_Python.new_SoMFVec4s())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4s

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4s_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4s_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4s_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4s_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4s_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4s_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4s_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4s___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4s___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4s_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4s_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4s_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4s_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4s_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4s_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4s_setValue(self, *args)

# Register SoMFVec4s in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4s_swigregister(SoMFVec4s)

def SoMFVec4s_createInstance():
    return Coin_SWIG_Python.SoMFVec4s_createInstance()

def SoMFVec4s_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4s_getClassTypeId()

def SoMFVec4s_initClass():
    return Coin_SWIG_Python.SoMFVec4s_initClass()

class SoMFVec4i32(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4i32_swiginit(self, Coin_SWIG_Python.new_SoMFVec4i32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4i32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4i32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4i32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4i32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4i32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4i32_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4i32_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4i32_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4i32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4i32___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4i32_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4i32_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4i32_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4i32_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4i32_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4i32_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4i32_setValue(self, *args)

# Register SoMFVec4i32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4i32_swigregister(SoMFVec4i32)

def SoMFVec4i32_createInstance():
    return Coin_SWIG_Python.SoMFVec4i32_createInstance()

def SoMFVec4i32_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4i32_getClassTypeId()

def SoMFVec4i32_initClass():
    return Coin_SWIG_Python.SoMFVec4i32_initClass()

class SoMFVec4d(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4d_swiginit(self, Coin_SWIG_Python.new_SoMFVec4d())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4d

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4d_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4d_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4d_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4d_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4d_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4d_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4d_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4d___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4d___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4d_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4d_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4d_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4d_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4d_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4d_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4d_setValue(self, *args)

# Register SoMFVec4d in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4d_swigregister(SoMFVec4d)

def SoMFVec4d_createInstance():
    return Coin_SWIG_Python.SoMFVec4d_createInstance()

def SoMFVec4d_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4d_getClassTypeId()

def SoMFVec4d_initClass():
    return Coin_SWIG_Python.SoMFVec4d_initClass()

class SoMFVec4ub(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4ub_swiginit(self, Coin_SWIG_Python.new_SoMFVec4ub())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4ub

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4ub_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4ub_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4ub_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4ub_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4ub_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4ub_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4ub_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4ub___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4ub___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4ub_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4ub_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4ub_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4ub_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4ub_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4ub_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4ub_setValue(self, *args)

# Register SoMFVec4ub in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4ub_swigregister(SoMFVec4ub)

def SoMFVec4ub_createInstance():
    return Coin_SWIG_Python.SoMFVec4ub_createInstance()

def SoMFVec4ub_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4ub_getClassTypeId()

def SoMFVec4ub_initClass():
    return Coin_SWIG_Python.SoMFVec4ub_initClass()

class SoMFVec4us(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4us_swiginit(self, Coin_SWIG_Python.new_SoMFVec4us())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4us

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4us_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4us_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4us_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4us_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4us_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4us_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4us_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4us___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4us___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4us_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4us_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4us_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4us_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4us_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4us_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4us_setValue(self, *args)

# Register SoMFVec4us in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4us_swigregister(SoMFVec4us)

def SoMFVec4us_createInstance():
    return Coin_SWIG_Python.SoMFVec4us_createInstance()

def SoMFVec4us_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4us_getClassTypeId()

def SoMFVec4us_initClass():
    return Coin_SWIG_Python.SoMFVec4us_initClass()

class SoMFVec4ui32(SoMField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoMFVec4ui32_swiginit(self, Coin_SWIG_Python.new_SoMFVec4ui32())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4ui32

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoMFVec4ui32_createInstance()

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMFVec4ui32_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMFVec4ui32_getTypeId(self)

    def copyFrom(self, field):
        return Coin_SWIG_Python.SoMFVec4ui32_copyFrom(self, field)

    def isSame(self, field):
        return Coin_SWIG_Python.SoMFVec4ui32_isSame(self, field)

    def getValues(self, start):
        return Coin_SWIG_Python.SoMFVec4ui32_getValues(self, start)

    def find(self, value, addifnotfound=0):
        return Coin_SWIG_Python.SoMFVec4ui32_find(self, value, addifnotfound)

    def __eq__(self, field):
        return Coin_SWIG_Python.SoMFVec4ui32___eq__(self, field)

    def __ne__(self, field):
        return Coin_SWIG_Python.SoMFVec4ui32___ne__(self, field)

    def startEditing(self):
        return Coin_SWIG_Python.SoMFVec4ui32_startEditing(self)

    def finishEditing(self):
        return Coin_SWIG_Python.SoMFVec4ui32_finishEditing(self)

    def setValuesPointer(self, *args):
        return Coin_SWIG_Python.SoMFVec4ui32_setValuesPointer(self, *args)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMFVec4ui32_initClass()

    def setValues(self, *args):
        return Coin_SWIG_Python.SoMFVec4ui32_setValues(self, *args)

    def set1Value(self, *args):
        return Coin_SWIG_Python.SoMFVec4ui32_set1Value(self, *args)

    def setValue(self, *args):
        return Coin_SWIG_Python.SoMFVec4ui32_setValue(self, *args)

# Register SoMFVec4ui32 in Coin_SWIG_Python:
Coin_SWIG_Python.SoMFVec4ui32_swigregister(SoMFVec4ui32)

def SoMFVec4ui32_createInstance():
    return Coin_SWIG_Python.SoMFVec4ui32_createInstance()

def SoMFVec4ui32_getClassTypeId():
    return Coin_SWIG_Python.SoMFVec4ui32_getClassTypeId()

def SoMFVec4ui32_initClass():
    return Coin_SWIG_Python.SoMFVec4ui32_initClass()

class SbStringList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbStringList_swiginit(self, Coin_SWIG_Python.new_SbStringList(*args))

    def append(self, string):
        return Coin_SWIG_Python.SbStringList_append(self, string)

    def find(self, string):
        return Coin_SWIG_Python.SbStringList_find(self, string)

    def insert(self, string, insertbefore):
        return Coin_SWIG_Python.SbStringList_insert(self, string, insertbefore)

    def getArrayPtr(self):
        return Coin_SWIG_Python.SbStringList_getArrayPtr(self)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbStringList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbStringList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SbStringList_get(self, i)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbStringList

# Register SbStringList in Coin_SWIG_Python:
Coin_SWIG_Python.SbStringList_swigregister(SbStringList)

class SbVec3fList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SbVec3fList_swiginit(self, Coin_SWIG_Python.new_SbVec3fList())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3fList

    def append(self, item):
        return Coin_SWIG_Python.SbVec3fList_append(self, item)

    def insert(self, item, insertbefore):
        return Coin_SWIG_Python.SbVec3fList_insert(self, item, insertbefore)

    def __setitem__(self, i, value):
        return Coin_SWIG_Python.SbVec3fList___setitem__(self, i, value)

    def __getitem__(self, i):
        return Coin_SWIG_Python.SbVec3fList___getitem__(self, i)

    def get(self, i):
        return Coin_SWIG_Python.SbVec3fList_get(self, i)

# Register SbVec3fList in Coin_SWIG_Python:
Coin_SWIG_Python.SbVec3fList_swigregister(SbVec3fList)

class SoLockManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def SetUnlockString(unlockstr):
        return Coin_SWIG_Python.SoLockManager_SetUnlockString(unlockstr)

    @staticmethod
    def GetUnlockString():
        return Coin_SWIG_Python.SoLockManager_GetUnlockString()

    def __init__(self):
        Coin_SWIG_Python.SoLockManager_swiginit(self, Coin_SWIG_Python.new_SoLockManager())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLockManager

# Register SoLockManager in Coin_SWIG_Python:
Coin_SWIG_Python.SoLockManager_swigregister(SoLockManager)

def SoLockManager_SetUnlockString(unlockstr):
    return Coin_SWIG_Python.SoLockManager_SetUnlockString(unlockstr)

def SoLockManager_GetUnlockString():
    return Coin_SWIG_Python.SoLockManager_GetUnlockString()

class SoTransform(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransform_swiginit(self, Coin_SWIG_Python.new_SoTransform())
    translation = property(Coin_SWIG_Python.SoTransform_translation_get, Coin_SWIG_Python.SoTransform_translation_set)
    rotation = property(Coin_SWIG_Python.SoTransform_rotation_get, Coin_SWIG_Python.SoTransform_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTransform_scaleFactor_get, Coin_SWIG_Python.SoTransform_scaleFactor_set)
    scaleOrientation = property(Coin_SWIG_Python.SoTransform_scaleOrientation_get, Coin_SWIG_Python.SoTransform_scaleOrientation_set)
    center = property(Coin_SWIG_Python.SoTransform_center_get, Coin_SWIG_Python.SoTransform_center_set)

    def pointAt(self, frompoint, topoint):
        return Coin_SWIG_Python.SoTransform_pointAt(self, frompoint, topoint)

    def getScaleSpaceMatrix(self, mat, inv):
        return Coin_SWIG_Python.SoTransform_getScaleSpaceMatrix(self, mat, inv)

    def getRotationSpaceMatrix(self, mat, inv):
        return Coin_SWIG_Python.SoTransform_getRotationSpaceMatrix(self, mat, inv)

    def getTranslationSpaceMatrix(self, mat, inv):
        return Coin_SWIG_Python.SoTransform_getTranslationSpaceMatrix(self, mat, inv)

    def multLeft(self, mat):
        return Coin_SWIG_Python.SoTransform_multLeft(self, mat)

    def multRight(self, mat):
        return Coin_SWIG_Python.SoTransform_multRight(self, mat)

    def combineLeft(self, nodeonright):
        return Coin_SWIG_Python.SoTransform_combineLeft(self, nodeonright)

    def combineRight(self, nodeonleft):
        return Coin_SWIG_Python.SoTransform_combineRight(self, nodeonleft)

    def setMatrix(self, mat):
        return Coin_SWIG_Python.SoTransform_setMatrix(self, mat)

    def recenter(self, newcenter):
        return Coin_SWIG_Python.SoTransform_recenter(self, newcenter)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTransform_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTransform_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTransform_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoTransform_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTransform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTransform_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoTransform_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransform

# Register SoTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransform_swigregister(SoTransform)

def SoTransform_getClassTypeId():
    return Coin_SWIG_Python.SoTransform_getClassTypeId()

def SoTransform_initClass():
    return Coin_SWIG_Python.SoTransform_initClass()

class SoTransformManip(SoTransform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransformManip_swiginit(self, Coin_SWIG_Python.new_SoTransformManip())

    def getDragger(self):
        return Coin_SWIG_Python.SoTransformManip_getDragger(self)

    def replaceNode(self, p):
        return Coin_SWIG_Python.SoTransformManip_replaceNode(self, p)

    def replaceManip(self, p, newone):
        return Coin_SWIG_Python.SoTransformManip_replaceManip(self, p, newone)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTransformManip_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTransformManip_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTransformManip_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoTransformManip_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTransformManip_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoTransformManip_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTransformManip_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoTransformManip_search(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoTransformManip_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformManip

# Register SoTransformManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformManip_swigregister(SoTransformManip)

def SoTransformManip_getClassTypeId():
    return Coin_SWIG_Python.SoTransformManip_getClassTypeId()

def SoTransformManip_initClass():
    return Coin_SWIG_Python.SoTransformManip_initClass()

class SoCenterballManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCenterballManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCenterballManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCenterballManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCenterballManip_swiginit(self, Coin_SWIG_Python.new_SoCenterballManip())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCenterballManip

# Register SoCenterballManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoCenterballManip_swigregister(SoCenterballManip)

def SoCenterballManip_getClassTypeId():
    return Coin_SWIG_Python.SoCenterballManip_getClassTypeId()

def SoCenterballManip_initClass():
    return Coin_SWIG_Python.SoCenterballManip_initClass()

class SoClipPlane(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoClipPlane_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoClipPlane_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoClipPlane_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoClipPlane_swiginit(self, Coin_SWIG_Python.new_SoClipPlane())
    plane = property(Coin_SWIG_Python.SoClipPlane_plane_get, Coin_SWIG_Python.SoClipPlane_plane_set)
    on = property(Coin_SWIG_Python.SoClipPlane_on_get, Coin_SWIG_Python.SoClipPlane_on_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoClipPlane_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoClipPlane_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoClipPlane_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoClipPlane_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoClipPlane

# Register SoClipPlane in Coin_SWIG_Python:
Coin_SWIG_Python.SoClipPlane_swigregister(SoClipPlane)

def SoClipPlane_getClassTypeId():
    return Coin_SWIG_Python.SoClipPlane_getClassTypeId()

def SoClipPlane_initClass():
    return Coin_SWIG_Python.SoClipPlane_initClass()

class SoClipPlaneManip(SoClipPlane):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoClipPlaneManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoClipPlaneManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoClipPlaneManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoClipPlaneManip_swiginit(self, Coin_SWIG_Python.new_SoClipPlaneManip())

    def getDragger(self):
        return Coin_SWIG_Python.SoClipPlaneManip_getDragger(self)

    def setValue(self, box, planenormal, draggerscalefactor):
        return Coin_SWIG_Python.SoClipPlaneManip_setValue(self, box, planenormal, draggerscalefactor)

    def replaceNode(self, p):
        return Coin_SWIG_Python.SoClipPlaneManip_replaceNode(self, p)

    def replaceManip(self, p, newone):
        return Coin_SWIG_Python.SoClipPlaneManip_replaceManip(self, p, newone)

    def doAction(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoClipPlaneManip_search(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoClipPlaneManip_getChildren(self)
    draggerPosition = property(Coin_SWIG_Python.SoClipPlaneManip_draggerPosition_get, Coin_SWIG_Python.SoClipPlaneManip_draggerPosition_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoClipPlaneManip

# Register SoClipPlaneManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoClipPlaneManip_swigregister(SoClipPlaneManip)

def SoClipPlaneManip_getClassTypeId():
    return Coin_SWIG_Python.SoClipPlaneManip_getClassTypeId()

def SoClipPlaneManip_initClass():
    return Coin_SWIG_Python.SoClipPlaneManip_initClass()

class SoLight(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLight_initClass()
    on = property(Coin_SWIG_Python.SoLight_on_get, Coin_SWIG_Python.SoLight_on_set)
    intensity = property(Coin_SWIG_Python.SoLight_intensity_get, Coin_SWIG_Python.SoLight_intensity_set)
    color = property(Coin_SWIG_Python.SoLight_color_get, Coin_SWIG_Python.SoLight_color_set)

    def callback(self, action):
        return Coin_SWIG_Python.SoLight_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLight

# Register SoLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoLight_swigregister(SoLight)

def SoLight_getClassTypeId():
    return Coin_SWIG_Python.SoLight_getClassTypeId()

def SoLight_initClass():
    return Coin_SWIG_Python.SoLight_initClass()

class SoDirectionalLight(SoLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDirectionalLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDirectionalLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDirectionalLight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoDirectionalLight_swiginit(self, Coin_SWIG_Python.new_SoDirectionalLight())
    direction = property(Coin_SWIG_Python.SoDirectionalLight_direction_get, Coin_SWIG_Python.SoDirectionalLight_direction_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoDirectionalLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDirectionalLight

# Register SoDirectionalLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoDirectionalLight_swigregister(SoDirectionalLight)

def SoDirectionalLight_getClassTypeId():
    return Coin_SWIG_Python.SoDirectionalLight_getClassTypeId()

def SoDirectionalLight_initClass():
    return Coin_SWIG_Python.SoDirectionalLight_initClass()

class SoDirectionalLightManip(SoDirectionalLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoDirectionalLightManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoDirectionalLightManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoDirectionalLightManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoDirectionalLightManip_swiginit(self, Coin_SWIG_Python.new_SoDirectionalLightManip())

    def getDragger(self):
        return Coin_SWIG_Python.SoDirectionalLightManip_getDragger(self)

    def replaceNode(self, path):
        return Coin_SWIG_Python.SoDirectionalLightManip_replaceNode(self, path)

    def replaceManip(self, path, newone):
        return Coin_SWIG_Python.SoDirectionalLightManip_replaceManip(self, path, newone)

    def doAction(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoDirectionalLightManip_search(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoDirectionalLightManip_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDirectionalLightManip

# Register SoDirectionalLightManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoDirectionalLightManip_swigregister(SoDirectionalLightManip)

def SoDirectionalLightManip_getClassTypeId():
    return Coin_SWIG_Python.SoDirectionalLightManip_getClassTypeId()

def SoDirectionalLightManip_initClass():
    return Coin_SWIG_Python.SoDirectionalLightManip_initClass()

class SoHandleBoxManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoHandleBoxManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoHandleBoxManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoHandleBoxManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoHandleBoxManip_swiginit(self, Coin_SWIG_Python.new_SoHandleBoxManip())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHandleBoxManip

# Register SoHandleBoxManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoHandleBoxManip_swigregister(SoHandleBoxManip)

def SoHandleBoxManip_getClassTypeId():
    return Coin_SWIG_Python.SoHandleBoxManip_getClassTypeId()

def SoHandleBoxManip_initClass():
    return Coin_SWIG_Python.SoHandleBoxManip_initClass()

class SoJackManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoJackManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoJackManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoJackManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoJackManip_swiginit(self, Coin_SWIG_Python.new_SoJackManip())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoJackManip

# Register SoJackManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoJackManip_swigregister(SoJackManip)

def SoJackManip_getClassTypeId():
    return Coin_SWIG_Python.SoJackManip_getClassTypeId()

def SoJackManip_initClass():
    return Coin_SWIG_Python.SoJackManip_initClass()

class SoPointLight(SoLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPointLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPointLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPointLight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPointLight_swiginit(self, Coin_SWIG_Python.new_SoPointLight())
    location = property(Coin_SWIG_Python.SoPointLight_location_get, Coin_SWIG_Python.SoPointLight_location_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoPointLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointLight

# Register SoPointLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoPointLight_swigregister(SoPointLight)

def SoPointLight_getClassTypeId():
    return Coin_SWIG_Python.SoPointLight_getClassTypeId()

def SoPointLight_initClass():
    return Coin_SWIG_Python.SoPointLight_initClass()

class SoPointLightManip(SoPointLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPointLightManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPointLightManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPointLightManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPointLightManip_swiginit(self, Coin_SWIG_Python.new_SoPointLightManip())

    def getDragger(self):
        return Coin_SWIG_Python.SoPointLightManip_getDragger(self)

    def replaceNode(self, path):
        return Coin_SWIG_Python.SoPointLightManip_replaceNode(self, path)

    def replaceManip(self, path, newone):
        return Coin_SWIG_Python.SoPointLightManip_replaceManip(self, path, newone)

    def doAction(self, action):
        return Coin_SWIG_Python.SoPointLightManip_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoPointLightManip_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoPointLightManip_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoPointLightManip_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoPointLightManip_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoPointLightManip_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoPointLightManip_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoPointLightManip_search(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoPointLightManip_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointLightManip

# Register SoPointLightManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoPointLightManip_swigregister(SoPointLightManip)

def SoPointLightManip_getClassTypeId():
    return Coin_SWIG_Python.SoPointLightManip_getClassTypeId()

def SoPointLightManip_initClass():
    return Coin_SWIG_Python.SoPointLightManip_initClass()

class SoSpotLight(SoLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSpotLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSpotLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSpotLight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSpotLight_swiginit(self, Coin_SWIG_Python.new_SoSpotLight())
    location = property(Coin_SWIG_Python.SoSpotLight_location_get, Coin_SWIG_Python.SoSpotLight_location_set)
    direction = property(Coin_SWIG_Python.SoSpotLight_direction_get, Coin_SWIG_Python.SoSpotLight_direction_set)
    dropOffRate = property(Coin_SWIG_Python.SoSpotLight_dropOffRate_get, Coin_SWIG_Python.SoSpotLight_dropOffRate_set)
    cutOffAngle = property(Coin_SWIG_Python.SoSpotLight_cutOffAngle_get, Coin_SWIG_Python.SoSpotLight_cutOffAngle_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoSpotLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpotLight

# Register SoSpotLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoSpotLight_swigregister(SoSpotLight)

def SoSpotLight_getClassTypeId():
    return Coin_SWIG_Python.SoSpotLight_getClassTypeId()

def SoSpotLight_initClass():
    return Coin_SWIG_Python.SoSpotLight_initClass()

class SoSpotLightManip(SoSpotLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSpotLightManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSpotLightManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSpotLightManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSpotLightManip_swiginit(self, Coin_SWIG_Python.new_SoSpotLightManip())

    def getDragger(self):
        return Coin_SWIG_Python.SoSpotLightManip_getDragger(self)

    def replaceNode(self, p):
        return Coin_SWIG_Python.SoSpotLightManip_replaceNode(self, p)

    def replaceManip(self, p, newone):
        return Coin_SWIG_Python.SoSpotLightManip_replaceManip(self, p, newone)

    def doAction(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoSpotLightManip_search(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoSpotLightManip_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpotLightManip

# Register SoSpotLightManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoSpotLightManip_swigregister(SoSpotLightManip)

def SoSpotLightManip_getClassTypeId():
    return Coin_SWIG_Python.SoSpotLightManip_getClassTypeId()

def SoSpotLightManip_initClass():
    return Coin_SWIG_Python.SoSpotLightManip_initClass()

class SoTabBoxManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTabBoxManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTabBoxManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTabBoxManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTabBoxManip_swiginit(self, Coin_SWIG_Python.new_SoTabBoxManip())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTabBoxManip

# Register SoTabBoxManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoTabBoxManip_swigregister(SoTabBoxManip)

def SoTabBoxManip_getClassTypeId():
    return Coin_SWIG_Python.SoTabBoxManip_getClassTypeId()

def SoTabBoxManip_initClass():
    return Coin_SWIG_Python.SoTabBoxManip_initClass()

class SoTrackballManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTrackballManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTrackballManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTrackballManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTrackballManip_swiginit(self, Coin_SWIG_Python.new_SoTrackballManip())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTrackballManip

# Register SoTrackballManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoTrackballManip_swigregister(SoTrackballManip)

def SoTrackballManip_getClassTypeId():
    return Coin_SWIG_Python.SoTrackballManip_getClassTypeId()

def SoTrackballManip_initClass():
    return Coin_SWIG_Python.SoTrackballManip_initClass()

class SoTransformBoxManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformBoxManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformBoxManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformBoxManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransformBoxManip_swiginit(self, Coin_SWIG_Python.new_SoTransformBoxManip())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformBoxManip

# Register SoTransformBoxManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformBoxManip_swigregister(SoTransformBoxManip)

def SoTransformBoxManip_getClassTypeId():
    return Coin_SWIG_Python.SoTransformBoxManip_getClassTypeId()

def SoTransformBoxManip_initClass():
    return Coin_SWIG_Python.SoTransformBoxManip_initClass()

class SoTransformerManip(SoTransformManip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformerManip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformerManip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformerManip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransformerManip_swiginit(self, Coin_SWIG_Python.new_SoTransformerManip())

    def isLocateHighlighting(self):
        return Coin_SWIG_Python.SoTransformerManip_isLocateHighlighting(self)

    def setLocateHighlighting(self, onoff):
        return Coin_SWIG_Python.SoTransformerManip_setLocateHighlighting(self, onoff)

    def unsquishKnobs(self):
        return Coin_SWIG_Python.SoTransformerManip_unsquishKnobs(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformerManip

# Register SoTransformerManip in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformerManip_swigregister(SoTransformerManip)

def SoTransformerManip_getClassTypeId():
    return Coin_SWIG_Python.SoTransformerManip_getClassTypeId()

def SoTransformerManip_initClass():
    return Coin_SWIG_Python.SoTransformerManip_initClass()

class SoAudioDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        return Coin_SWIG_Python.SoAudioDevice_instance()

    def init(self, devicetype, devicename):
        return Coin_SWIG_Python.SoAudioDevice_init(self, devicetype, devicename)

    def enable(self):
        return Coin_SWIG_Python.SoAudioDevice_enable(self)

    def disable(self):
        return Coin_SWIG_Python.SoAudioDevice_disable(self)

    def isEnabled(self):
        return Coin_SWIG_Python.SoAudioDevice_isEnabled(self)

    def haveSound(self):
        return Coin_SWIG_Python.SoAudioDevice_haveSound(self)

    def setGain(self, gain):
        return Coin_SWIG_Python.SoAudioDevice_setGain(self, gain)

    def mute(self, mute=1):
        return Coin_SWIG_Python.SoAudioDevice_mute(self, mute)

    def cleanup(self):
        return Coin_SWIG_Python.SoAudioDevice_cleanup(self)

# Register SoAudioDevice in Coin_SWIG_Python:
Coin_SWIG_Python.SoAudioDevice_swigregister(SoAudioDevice)

def SoAudioDevice_instance():
    return Coin_SWIG_Python.SoAudioDevice_instance()

class SoByteStream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoByteStream_swiginit(self, Coin_SWIG_Python.new_SoByteStream())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoByteStream

    def convert(self, *args):
        return Coin_SWIG_Python.SoByteStream_convert(self, *args)

    def getData(self):
        return Coin_SWIG_Python.SoByteStream_getData(self)

    def getNumBytes(self):
        return Coin_SWIG_Python.SoByteStream_getNumBytes(self)

    @staticmethod
    def unconvert(*args):
        return Coin_SWIG_Python.SoByteStream_unconvert(*args)

    def copy(self, d, len):
        return Coin_SWIG_Python.SoByteStream_copy(self, d, len)

    def isRawData(self):
        return Coin_SWIG_Python.SoByteStream_isRawData(self)

# Register SoByteStream in Coin_SWIG_Python:
Coin_SWIG_Python.SoByteStream_swigregister(SoByteStream)

def SoByteStream_unconvert(*args):
    return Coin_SWIG_Python.SoByteStream_unconvert(*args)

class SoContextHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def destructingContext(contextid):
        return Coin_SWIG_Python.SoContextHandler_destructingContext(contextid)

    @staticmethod
    def addContextDestructionCallback(func, closure):
        return Coin_SWIG_Python.SoContextHandler_addContextDestructionCallback(func, closure)

    @staticmethod
    def removeContextDestructionCallback(func, closure):
        return Coin_SWIG_Python.SoContextHandler_removeContextDestructionCallback(func, closure)

    def __init__(self):
        Coin_SWIG_Python.SoContextHandler_swiginit(self, Coin_SWIG_Python.new_SoContextHandler())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoContextHandler

# Register SoContextHandler in Coin_SWIG_Python:
Coin_SWIG_Python.SoContextHandler_swigregister(SoContextHandler)

def SoContextHandler_destructingContext(contextid):
    return Coin_SWIG_Python.SoContextHandler_destructingContext(contextid)

def SoContextHandler_addContextDestructionCallback(func, closure):
    return Coin_SWIG_Python.SoContextHandler_addContextDestructionCallback(func, closure)

def SoContextHandler_removeContextDestructionCallback(func, closure):
    return Coin_SWIG_Python.SoContextHandler_removeContextDestructionCallback(func, closure)

class SoGLImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoGLImage_swiginit(self, Coin_SWIG_Python.new_SoGLImage())

    def unref(self, state=None):
        return Coin_SWIG_Python.SoGLImage_unref(self, state)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLImage_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoGLImage_getTypeId(self)

    def isOfType(self, type):
        return Coin_SWIG_Python.SoGLImage_isOfType(self, type)
    REPEAT = Coin_SWIG_Python.SoGLImage_REPEAT
    CLAMP = Coin_SWIG_Python.SoGLImage_CLAMP
    CLAMP_TO_EDGE = Coin_SWIG_Python.SoGLImage_CLAMP_TO_EDGE
    CLAMP_TO_BORDER = Coin_SWIG_Python.SoGLImage_CLAMP_TO_BORDER
    IMAGE = Coin_SWIG_Python.SoGLImage_IMAGE
    SUBIMAGE = Coin_SWIG_Python.SoGLImage_SUBIMAGE
    MIPMAP = Coin_SWIG_Python.SoGLImage_MIPMAP

    def setGLDisplayList(self, *args):
        return Coin_SWIG_Python.SoGLImage_setGLDisplayList(self, *args)

    def setPBuffer(self, *args):
        return Coin_SWIG_Python.SoGLImage_setPBuffer(self, *args)

    def setData(self, *args):
        return Coin_SWIG_Python.SoGLImage_setData(self, *args)
    SCALE_DOWN = Coin_SWIG_Python.SoGLImage_SCALE_DOWN
    NO_MIPMAP = Coin_SWIG_Python.SoGLImage_NO_MIPMAP
    LINEAR_MAG_FILTER = Coin_SWIG_Python.SoGLImage_LINEAR_MAG_FILTER
    LINEAR_MIN_FILTER = Coin_SWIG_Python.SoGLImage_LINEAR_MIN_FILTER
    LINEAR_MIPMAP_FILTER = Coin_SWIG_Python.SoGLImage_LINEAR_MIPMAP_FILTER
    FORCE_TRANSPARENCY_TRUE = Coin_SWIG_Python.SoGLImage_FORCE_TRANSPARENCY_TRUE
    FORCE_TRANSPARENCY_FALSE = Coin_SWIG_Python.SoGLImage_FORCE_TRANSPARENCY_FALSE
    FORCE_ALPHA_TEST_TRUE = Coin_SWIG_Python.SoGLImage_FORCE_ALPHA_TEST_TRUE
    FORCE_ALPHA_TEST_FALSE = Coin_SWIG_Python.SoGLImage_FORCE_ALPHA_TEST_FALSE
    INVINCIBLE = Coin_SWIG_Python.SoGLImage_INVINCIBLE
    RECTANGLE = Coin_SWIG_Python.SoGLImage_RECTANGLE
    COMPRESSED = Coin_SWIG_Python.SoGLImage_COMPRESSED
    USE_QUALITY_VALUE = Coin_SWIG_Python.SoGLImage_USE_QUALITY_VALUE

    def setFlags(self, flags):
        return Coin_SWIG_Python.SoGLImage_setFlags(self, flags)

    def getFlags(self):
        return Coin_SWIG_Python.SoGLImage_getFlags(self)

    def getImage(self):
        return Coin_SWIG_Python.SoGLImage_getImage(self)

    def getGLDisplayList(self, state):
        return Coin_SWIG_Python.SoGLImage_getGLDisplayList(self, state)

    def hasTransparency(self):
        return Coin_SWIG_Python.SoGLImage_hasTransparency(self)

    def useAlphaTest(self):
        return Coin_SWIG_Python.SoGLImage_useAlphaTest(self)

    def getWrapS(self):
        return Coin_SWIG_Python.SoGLImage_getWrapS(self)

    def getWrapT(self):
        return Coin_SWIG_Python.SoGLImage_getWrapT(self)

    def getWrapR(self):
        return Coin_SWIG_Python.SoGLImage_getWrapR(self)

    def getQuality(self):
        return Coin_SWIG_Python.SoGLImage_getQuality(self)

    def getGLImageId(self):
        return Coin_SWIG_Python.SoGLImage_getGLImageId(self)

    @staticmethod
    def beginFrame(state):
        return Coin_SWIG_Python.SoGLImage_beginFrame(state)

    @staticmethod
    def tagImage(state, image):
        return Coin_SWIG_Python.SoGLImage_tagImage(state, image)

    @staticmethod
    def endFrame(state):
        return Coin_SWIG_Python.SoGLImage_endFrame(state)

    @staticmethod
    def setDisplayListMaxAge(maxage):
        return Coin_SWIG_Python.SoGLImage_setDisplayListMaxAge(maxage)

    @staticmethod
    def freeAllImages(state=None):
        return Coin_SWIG_Python.SoGLImage_freeAllImages(state)

    def setEndFrameCallback(self, cb, closure):
        return Coin_SWIG_Python.SoGLImage_setEndFrameCallback(self, cb, closure)

    def getNumFramesSinceUsed(self):
        return Coin_SWIG_Python.SoGLImage_getNumFramesSinceUsed(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLImage_initClass()

    @staticmethod
    def setResizeCallback(f, closure):
        return Coin_SWIG_Python.SoGLImage_setResizeCallback(f, closure)

# Register SoGLImage in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLImage_swigregister(SoGLImage)

def SoGLImage_getClassTypeId():
    return Coin_SWIG_Python.SoGLImage_getClassTypeId()

def SoGLImage_beginFrame(state):
    return Coin_SWIG_Python.SoGLImage_beginFrame(state)

def SoGLImage_tagImage(state, image):
    return Coin_SWIG_Python.SoGLImage_tagImage(state, image)

def SoGLImage_endFrame(state):
    return Coin_SWIG_Python.SoGLImage_endFrame(state)

def SoGLImage_setDisplayListMaxAge(maxage):
    return Coin_SWIG_Python.SoGLImage_setDisplayListMaxAge(maxage)

def SoGLImage_freeAllImages(state=None):
    return Coin_SWIG_Python.SoGLImage_freeAllImages(state)

def SoGLImage_initClass():
    return Coin_SWIG_Python.SoGLImage_initClass()

def SoGLImage_setResizeCallback(f, closure):
    return Coin_SWIG_Python.SoGLImage_setResizeCallback(f, closure)

class SoGLBigImage(SoGLImage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoGLBigImage_swiginit(self, Coin_SWIG_Python.new_SoGLBigImage())

    def unref(self, state=None):
        return Coin_SWIG_Python.SoGLBigImage_unref(self, state)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGLBigImage_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoGLBigImage_getTypeId(self)

    def setData(self, *args):
        return Coin_SWIG_Python.SoGLBigImage_setData(self, *args)

    def initSubImages(self, subimagesize):
        return Coin_SWIG_Python.SoGLBigImage_initSubImages(self, subimagesize)

    def handleSubImage(self, idx, start, end, tcmul):
        return Coin_SWIG_Python.SoGLBigImage_handleSubImage(self, idx, start, end, tcmul)

    def applySubImage(self, state, idx, quality, projsize):
        return Coin_SWIG_Python.SoGLBigImage_applySubImage(self, state, idx, quality, projsize)

    def exceededChangeLimit(self):
        return Coin_SWIG_Python.SoGLBigImage_exceededChangeLimit(self)

    @staticmethod
    def setChangeLimit(limit):
        return Coin_SWIG_Python.SoGLBigImage_setChangeLimit(limit)

    def getGLDisplayList(self, state):
        return Coin_SWIG_Python.SoGLBigImage_getGLDisplayList(self, state)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGLBigImage_initClass()

# Register SoGLBigImage in Coin_SWIG_Python:
Coin_SWIG_Python.SoGLBigImage_swigregister(SoGLBigImage)

def SoGLBigImage_getClassTypeId():
    return Coin_SWIG_Python.SoGLBigImage_getClassTypeId()

def SoGLBigImage_setChangeLimit(limit):
    return Coin_SWIG_Python.SoGLBigImage_setChangeLimit(limit)

def SoGLBigImage_initClass():
    return Coin_SWIG_Python.SoGLBigImage_initClass()

class SoGlyph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    FONT2D = Coin_SWIG_Python.SoGlyph_FONT2D
    FONT3D = Coin_SWIG_Python.SoGlyph_FONT3D

    def unref(self):
        return Coin_SWIG_Python.SoGlyph_unref(self)

    def getCoords(self):
        return Coin_SWIG_Python.SoGlyph_getCoords(self)

    def getFaceIndices(self):
        return Coin_SWIG_Python.SoGlyph_getFaceIndices(self)

    def getEdgeIndices(self):
        return Coin_SWIG_Python.SoGlyph_getEdgeIndices(self)

    def getNextCWEdge(self, edgeidx):
        return Coin_SWIG_Python.SoGlyph_getNextCWEdge(self, edgeidx)

    def getNextCCWEdge(self, edgeidx):
        return Coin_SWIG_Python.SoGlyph_getNextCCWEdge(self, edgeidx)

    def getWidth(self):
        return Coin_SWIG_Python.SoGlyph_getWidth(self)

    def getBoundingBox(self):
        return Coin_SWIG_Python.SoGlyph_getBoundingBox(self)

    @staticmethod
    def getGlyph(*args):
        return Coin_SWIG_Python.SoGlyph_getGlyph(*args)

    def getAdvance(self):
        return Coin_SWIG_Python.SoGlyph_getAdvance(self)

    def getKerning(self, rightglyph):
        return Coin_SWIG_Python.SoGlyph_getKerning(self, rightglyph)

    def getBitmap(self, size, pos, antialiased):
        return Coin_SWIG_Python.SoGlyph_getBitmap(self, size, pos, antialiased)

# Register SoGlyph in Coin_SWIG_Python:
Coin_SWIG_Python.SoGlyph_swigregister(SoGlyph)

def SoGlyph_getGlyph(*args):
    return Coin_SWIG_Python.SoGlyph_getGlyph(*args)

class SoProto(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, externproto=0):
        Coin_SWIG_Python.SoProto_swiginit(self, Coin_SWIG_Python.new_SoProto(externproto))

    @staticmethod
    def setFetchExternProtoCallback(cb, closure):
        return Coin_SWIG_Python.SoProto_setFetchExternProtoCallback(cb, closure)

    def getTypeId(self):
        return Coin_SWIG_Python.SoProto_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProto_getClassTypeId()

    @staticmethod
    def findProto(name):
        return Coin_SWIG_Python.SoProto_findProto(name)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProto_initClass()

    def createProtoInstance(self):
        return Coin_SWIG_Python.SoProto_createProtoInstance(self)

    def addISReference(self, container, fieldname, interfacename):
        return Coin_SWIG_Python.SoProto_addISReference(self, container, fieldname, interfacename)

    def findISReference(self, container, fieldname):
        return Coin_SWIG_Python.SoProto_findISReference(self, container, fieldname)

    def addReference(self, name, base):
        return Coin_SWIG_Python.SoProto_addReference(self, name, base)

    def removeReference(self, name):
        return Coin_SWIG_Python.SoProto_removeReference(self, name)

    def findReference(self, name):
        return Coin_SWIG_Python.SoProto_findReference(self, name)

    def addRoute(self, fromnode, fromfield, tonode, tofield):
        return Coin_SWIG_Python.SoProto_addRoute(self, fromnode, fromfield, tonode, tofield)

    def getProtoName(self):
        return Coin_SWIG_Python.SoProto_getProtoName(self)

    def readInstance(self, _in, flags):
        return Coin_SWIG_Python.SoProto_readInstance(self, _in, flags)

    def write(self, action):
        return Coin_SWIG_Python.SoProto_write(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProto

# Register SoProto in Coin_SWIG_Python:
Coin_SWIG_Python.SoProto_swigregister(SoProto)

def SoProto_setFetchExternProtoCallback(cb, closure):
    return Coin_SWIG_Python.SoProto_setFetchExternProtoCallback(cb, closure)

def SoProto_getClassTypeId():
    return Coin_SWIG_Python.SoProto_getClassTypeId()

def SoProto_findProto(name):
    return Coin_SWIG_Python.SoProto_findProto(name)

def SoProto_initClass():
    return Coin_SWIG_Python.SoProto_initClass()

class SoProtoInstance(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProtoInstance_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoProtoInstance_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProtoInstance_initClass()

    def __init__(self, proto, deffielddata):
        Coin_SWIG_Python.SoProtoInstance_swiginit(self, Coin_SWIG_Python.new_SoProtoInstance(proto, deffielddata))

    @staticmethod
    def findProtoInstance(rootnode):
        return Coin_SWIG_Python.SoProtoInstance_findProtoInstance(rootnode)

    def setRootNode(self, root):
        return Coin_SWIG_Python.SoProtoInstance_setRootNode(self, root)

    def getRootNode(self):
        return Coin_SWIG_Python.SoProtoInstance_getRootNode(self)

    def getProtoDefinition(self):
        return Coin_SWIG_Python.SoProtoInstance_getProtoDefinition(self)

    def getProtoName(self):
        return Coin_SWIG_Python.SoProtoInstance_getProtoName(self)

    def write(self, action):
        return Coin_SWIG_Python.SoProtoInstance_write(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProtoInstance

# Register SoProtoInstance in Coin_SWIG_Python:
Coin_SWIG_Python.SoProtoInstance_swigregister(SoProtoInstance)

def SoProtoInstance_getClassTypeId():
    return Coin_SWIG_Python.SoProtoInstance_getClassTypeId()

def SoProtoInstance_initClass():
    return Coin_SWIG_Python.SoProtoInstance_initClass()

def SoProtoInstance_findProtoInstance(rootnode):
    return Coin_SWIG_Python.SoProtoInstance_findProtoInstance(rootnode)

class SoTranReceiver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, root):
        Coin_SWIG_Python.SoTranReceiver_swiginit(self, Coin_SWIG_Python.new_SoTranReceiver(root))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranReceiver

    def interpret(self, _in):
        return Coin_SWIG_Python.SoTranReceiver_interpret(self, _in)

# Register SoTranReceiver in Coin_SWIG_Python:
Coin_SWIG_Python.SoTranReceiver_swigregister(SoTranReceiver)

class SoTranSender(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, output):
        Coin_SWIG_Python.SoTranSender_swiginit(self, Coin_SWIG_Python.new_SoTranSender(output))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranSender

    def getOutput(self):
        return Coin_SWIG_Python.SoTranSender_getOutput(self)

    def insert(self, *args):
        return Coin_SWIG_Python.SoTranSender_insert(self, *args)

    def remove(self, parent, n):
        return Coin_SWIG_Python.SoTranSender_remove(self, parent, n)

    def replace(self, parent, n, newnode):
        return Coin_SWIG_Python.SoTranSender_replace(self, parent, n, newnode)

    def modify(self, node):
        return Coin_SWIG_Python.SoTranSender_modify(self, node)

    def prepareToSend(self):
        return Coin_SWIG_Python.SoTranSender_prepareToSend(self)

# Register SoTranSender in Coin_SWIG_Python:
Coin_SWIG_Python.SoTranSender_swigregister(SoTranSender)

class SoAppearanceKit(SoBaseKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAppearanceKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoAppearanceKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoAppearanceKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoAppearanceKit_getNodekitCatalog(self)

    def __init__(self):
        Coin_SWIG_Python.SoAppearanceKit_swiginit(self, Coin_SWIG_Python.new_SoAppearanceKit())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAppearanceKit_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAppearanceKit

# Register SoAppearanceKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoAppearanceKit_swigregister(SoAppearanceKit)

def SoAppearanceKit_getClassTypeId():
    return Coin_SWIG_Python.SoAppearanceKit_getClassTypeId()

def SoAppearanceKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoAppearanceKit_getClassNodekitCatalog()

def SoAppearanceKit_initClass():
    return Coin_SWIG_Python.SoAppearanceKit_initClass()

class SoCameraKit(SoBaseKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCameraKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCameraKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoCameraKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoCameraKit_getNodekitCatalog(self)

    def __init__(self):
        Coin_SWIG_Python.SoCameraKit_swiginit(self, Coin_SWIG_Python.new_SoCameraKit())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCameraKit_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCameraKit

# Register SoCameraKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoCameraKit_swigregister(SoCameraKit)

def SoCameraKit_getClassTypeId():
    return Coin_SWIG_Python.SoCameraKit_getClassTypeId()

def SoCameraKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoCameraKit_getClassNodekitCatalog()

def SoCameraKit_initClass():
    return Coin_SWIG_Python.SoCameraKit_initClass()

class SoLightKit(SoBaseKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLightKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLightKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoLightKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoLightKit_getNodekitCatalog(self)

    def __init__(self):
        Coin_SWIG_Python.SoLightKit_swiginit(self, Coin_SWIG_Python.new_SoLightKit())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLightKit_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLightKit

# Register SoLightKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoLightKit_swigregister(SoLightKit)

def SoLightKit_getClassTypeId():
    return Coin_SWIG_Python.SoLightKit_getClassTypeId()

def SoLightKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoLightKit_getClassNodekitCatalog()

def SoLightKit_initClass():
    return Coin_SWIG_Python.SoLightKit_initClass()

class SoNodeKit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def init():
        return Coin_SWIG_Python.SoNodeKit_init()

    def __init__(self):
        Coin_SWIG_Python.SoNodeKit_swiginit(self, Coin_SWIG_Python.new_SoNodeKit())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeKit

# Register SoNodeKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeKit_swigregister(SoNodeKit)

def SoNodeKit_init():
    return Coin_SWIG_Python.SoNodeKit_init()

class SoSceneKit(SoBaseKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSceneKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSceneKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoSceneKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoSceneKit_getNodekitCatalog(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSceneKit_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSceneKit_swiginit(self, Coin_SWIG_Python.new_SoSceneKit())

    def getCameraNumber(self):
        return Coin_SWIG_Python.SoSceneKit_getCameraNumber(self)

    def setCameraNumber(self, camNum):
        return Coin_SWIG_Python.SoSceneKit_setCameraNumber(self, camNum)

    def affectsState(self):
        return Coin_SWIG_Python.SoSceneKit_affectsState(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSceneKit

# Register SoSceneKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoSceneKit_swigregister(SoSceneKit)

def SoSceneKit_getClassTypeId():
    return Coin_SWIG_Python.SoSceneKit_getClassTypeId()

def SoSceneKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoSceneKit_getClassNodekitCatalog()

def SoSceneKit_initClass():
    return Coin_SWIG_Python.SoSceneKit_initClass()

class SoSeparatorKit(SoBaseKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSeparatorKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSeparatorKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoSeparatorKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoSeparatorKit_getNodekitCatalog(self)

    def __init__(self):
        Coin_SWIG_Python.SoSeparatorKit_swiginit(self, Coin_SWIG_Python.new_SoSeparatorKit())
    OFF = Coin_SWIG_Python.SoSeparatorKit_OFF
    ON = Coin_SWIG_Python.SoSeparatorKit_ON
    AUTO = Coin_SWIG_Python.SoSeparatorKit_AUTO
    renderCaching = property(Coin_SWIG_Python.SoSeparatorKit_renderCaching_get, Coin_SWIG_Python.SoSeparatorKit_renderCaching_set)
    boundingBoxCaching = property(Coin_SWIG_Python.SoSeparatorKit_boundingBoxCaching_get, Coin_SWIG_Python.SoSeparatorKit_boundingBoxCaching_set)
    renderCulling = property(Coin_SWIG_Python.SoSeparatorKit_renderCulling_get, Coin_SWIG_Python.SoSeparatorKit_renderCulling_set)
    pickCulling = property(Coin_SWIG_Python.SoSeparatorKit_pickCulling_get, Coin_SWIG_Python.SoSeparatorKit_pickCulling_set)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSeparatorKit_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSeparatorKit

# Register SoSeparatorKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoSeparatorKit_swigregister(SoSeparatorKit)

def SoSeparatorKit_getClassTypeId():
    return Coin_SWIG_Python.SoSeparatorKit_getClassTypeId()

def SoSeparatorKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoSeparatorKit_getClassNodekitCatalog()

def SoSeparatorKit_initClass():
    return Coin_SWIG_Python.SoSeparatorKit_initClass()

class SoShapeKit(SoSeparatorKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShapeKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShapeKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoShapeKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoShapeKit_getNodekitCatalog(self)

    def __init__(self):
        Coin_SWIG_Python.SoShapeKit_swiginit(self, Coin_SWIG_Python.new_SoShapeKit())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShapeKit_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShapeKit

# Register SoShapeKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoShapeKit_swigregister(SoShapeKit)

def SoShapeKit_getClassTypeId():
    return Coin_SWIG_Python.SoShapeKit_getClassTypeId()

def SoShapeKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoShapeKit_getClassNodekitCatalog()

def SoShapeKit_initClass():
    return Coin_SWIG_Python.SoShapeKit_initClass()

class SoWrapperKit(SoSeparatorKit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoWrapperKit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoWrapperKit_getTypeId(self)

    @staticmethod
    def getClassNodekitCatalog():
        return Coin_SWIG_Python.SoWrapperKit_getClassNodekitCatalog()

    def getNodekitCatalog(self):
        return Coin_SWIG_Python.SoWrapperKit_getNodekitCatalog(self)

    def __init__(self):
        Coin_SWIG_Python.SoWrapperKit_swiginit(self, Coin_SWIG_Python.new_SoWrapperKit())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoWrapperKit_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWrapperKit

# Register SoWrapperKit in Coin_SWIG_Python:
Coin_SWIG_Python.SoWrapperKit_swigregister(SoWrapperKit)

def SoWrapperKit_getClassTypeId():
    return Coin_SWIG_Python.SoWrapperKit_getClassTypeId()

def SoWrapperKit_getClassNodekitCatalog():
    return Coin_SWIG_Python.SoWrapperKit_getClassNodekitCatalog()

def SoWrapperKit_initClass():
    return Coin_SWIG_Python.SoWrapperKit_initClass()

class SoGroup(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGroup_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoGroup_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGroup_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoGroup_swiginit(self, Coin_SWIG_Python.new_SoGroup(*args))

    def addChild(self, node):
        return Coin_SWIG_Python.SoGroup_addChild(self, node)

    def insertChild(self, child, newchildindex):
        return Coin_SWIG_Python.SoGroup_insertChild(self, child, newchildindex)

    def getChild(self, index):
        return Coin_SWIG_Python.SoGroup_getChild(self, index)

    def findChild(self, node):
        return Coin_SWIG_Python.SoGroup_findChild(self, node)

    def getNumChildren(self):
        return Coin_SWIG_Python.SoGroup_getNumChildren(self)

    def removeChild(self, *args):
        return Coin_SWIG_Python.SoGroup_removeChild(self, *args)

    def removeAllChildren(self):
        return Coin_SWIG_Python.SoGroup_removeAllChildren(self)

    def replaceChild(self, *args):
        return Coin_SWIG_Python.SoGroup_replaceChild(self, *args)

    def doAction(self, action):
        return Coin_SWIG_Python.SoGroup_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoGroup_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoGroup_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoGroup_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoGroup_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoGroup_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoGroup_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoGroup_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoGroup_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoGroup_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoGroup_audioRender(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoGroup_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGroup

# Register SoGroup in Coin_SWIG_Python:
Coin_SWIG_Python.SoGroup_swigregister(SoGroup)

def SoGroup_getClassTypeId():
    return Coin_SWIG_Python.SoGroup_getClassTypeId()

def SoGroup_initClass():
    return Coin_SWIG_Python.SoGroup_initClass()

class SoSeparator(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSeparator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSeparator_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSeparator_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoSeparator_swiginit(self, Coin_SWIG_Python.new_SoSeparator(*args))
    OFF = Coin_SWIG_Python.SoSeparator_OFF
    ON = Coin_SWIG_Python.SoSeparator_ON
    AUTO = Coin_SWIG_Python.SoSeparator_AUTO
    renderCaching = property(Coin_SWIG_Python.SoSeparator_renderCaching_get, Coin_SWIG_Python.SoSeparator_renderCaching_set)
    boundingBoxCaching = property(Coin_SWIG_Python.SoSeparator_boundingBoxCaching_get, Coin_SWIG_Python.SoSeparator_boundingBoxCaching_set)
    renderCulling = property(Coin_SWIG_Python.SoSeparator_renderCulling_get, Coin_SWIG_Python.SoSeparator_renderCulling_set)
    pickCulling = property(Coin_SWIG_Python.SoSeparator_pickCulling_get, Coin_SWIG_Python.SoSeparator_pickCulling_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoSeparator_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoSeparator_GLRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoSeparator_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoSeparator_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoSeparator_GLRenderOffPath(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoSeparator_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoSeparator_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoSeparator_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoSeparator_handleEvent(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoSeparator_rayPick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoSeparator_search(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoSeparator_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoSeparator_audioRender(self, action)

    def notify(self, nl):
        return Coin_SWIG_Python.SoSeparator_notify(self, nl)

    @staticmethod
    def setNumRenderCaches(howmany):
        return Coin_SWIG_Python.SoSeparator_setNumRenderCaches(howmany)

    @staticmethod
    def getNumRenderCaches():
        return Coin_SWIG_Python.SoSeparator_getNumRenderCaches()

    def affectsState(self):
        return Coin_SWIG_Python.SoSeparator_affectsState(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSeparator

# Register SoSeparator in Coin_SWIG_Python:
Coin_SWIG_Python.SoSeparator_swigregister(SoSeparator)

def SoSeparator_getClassTypeId():
    return Coin_SWIG_Python.SoSeparator_getClassTypeId()

def SoSeparator_initClass():
    return Coin_SWIG_Python.SoSeparator_initClass()

def SoSeparator_setNumRenderCaches(howmany):
    return Coin_SWIG_Python.SoSeparator_setNumRenderCaches(howmany)

def SoSeparator_getNumRenderCaches():
    return Coin_SWIG_Python.SoSeparator_getNumRenderCaches()

class SoAnnotation(SoSeparator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAnnotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoAnnotation_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAnnotation_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoAnnotation_swiginit(self, Coin_SWIG_Python.new_SoAnnotation())

    def GLRender(self, action):
        return Coin_SWIG_Python.SoAnnotation_GLRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoAnnotation_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoAnnotation_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoAnnotation_GLRenderOffPath(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAnnotation

# Register SoAnnotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoAnnotation_swigregister(SoAnnotation)

def SoAnnotation_getClassTypeId():
    return Coin_SWIG_Python.SoAnnotation_getClassTypeId()

def SoAnnotation_initClass():
    return Coin_SWIG_Python.SoAnnotation_initClass()

class SoAntiSquish(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAntiSquish_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoAntiSquish_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAntiSquish_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoAntiSquish_swiginit(self, Coin_SWIG_Python.new_SoAntiSquish())
    X = Coin_SWIG_Python.SoAntiSquish_X
    Y = Coin_SWIG_Python.SoAntiSquish_Y
    Z = Coin_SWIG_Python.SoAntiSquish_Z
    AVERAGE_DIMENSION = Coin_SWIG_Python.SoAntiSquish_AVERAGE_DIMENSION
    BIGGEST_DIMENSION = Coin_SWIG_Python.SoAntiSquish_BIGGEST_DIMENSION
    SMALLEST_DIMENSION = Coin_SWIG_Python.SoAntiSquish_SMALLEST_DIMENSION
    LONGEST_DIAGONAL = Coin_SWIG_Python.SoAntiSquish_LONGEST_DIAGONAL
    sizing = property(Coin_SWIG_Python.SoAntiSquish_sizing_get, Coin_SWIG_Python.SoAntiSquish_sizing_set)
    recalcAlways = property(Coin_SWIG_Python.SoAntiSquish_recalcAlways_get, Coin_SWIG_Python.SoAntiSquish_recalcAlways_set)

    def recalc(self):
        return Coin_SWIG_Python.SoAntiSquish_recalc(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoAntiSquish_doAction(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAntiSquish

# Register SoAntiSquish in Coin_SWIG_Python:
Coin_SWIG_Python.SoAntiSquish_swigregister(SoAntiSquish)

def SoAntiSquish_getClassTypeId():
    return Coin_SWIG_Python.SoAntiSquish_getClassTypeId()

def SoAntiSquish_initClass():
    return Coin_SWIG_Python.SoAntiSquish_initClass()

class SoArray(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoArray_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoArray_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoArray_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoArray_swiginit(self, Coin_SWIG_Python.new_SoArray())
    FIRST = Coin_SWIG_Python.SoArray_FIRST
    CENTER = Coin_SWIG_Python.SoArray_CENTER
    LAST = Coin_SWIG_Python.SoArray_LAST
    origin = property(Coin_SWIG_Python.SoArray_origin_get, Coin_SWIG_Python.SoArray_origin_set)
    numElements1 = property(Coin_SWIG_Python.SoArray_numElements1_get, Coin_SWIG_Python.SoArray_numElements1_set)
    numElements2 = property(Coin_SWIG_Python.SoArray_numElements2_get, Coin_SWIG_Python.SoArray_numElements2_set)
    numElements3 = property(Coin_SWIG_Python.SoArray_numElements3_get, Coin_SWIG_Python.SoArray_numElements3_set)
    separation1 = property(Coin_SWIG_Python.SoArray_separation1_get, Coin_SWIG_Python.SoArray_separation1_set)
    separation2 = property(Coin_SWIG_Python.SoArray_separation2_get, Coin_SWIG_Python.SoArray_separation2_set)
    separation3 = property(Coin_SWIG_Python.SoArray_separation3_get, Coin_SWIG_Python.SoArray_separation3_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoArray_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoArray_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoArray_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoArray_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoArray_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoArray_getBoundingBox(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoArray_handleEvent(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoArray_getMatrix(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoArray_search(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoArray_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoArray_audioRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoArray

# Register SoArray in Coin_SWIG_Python:
Coin_SWIG_Python.SoArray_swigregister(SoArray)

def SoArray_getClassTypeId():
    return Coin_SWIG_Python.SoArray_getClassTypeId()

def SoArray_initClass():
    return Coin_SWIG_Python.SoArray_initClass()

class SoAsciiText(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoAsciiText_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoAsciiText_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoAsciiText_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoAsciiText_swiginit(self, Coin_SWIG_Python.new_SoAsciiText())
    LEFT = Coin_SWIG_Python.SoAsciiText_LEFT
    RIGHT = Coin_SWIG_Python.SoAsciiText_RIGHT
    CENTER = Coin_SWIG_Python.SoAsciiText_CENTER
    string = property(Coin_SWIG_Python.SoAsciiText_string_get, Coin_SWIG_Python.SoAsciiText_string_set)
    spacing = property(Coin_SWIG_Python.SoAsciiText_spacing_get, Coin_SWIG_Python.SoAsciiText_spacing_set)
    justification = property(Coin_SWIG_Python.SoAsciiText_justification_get, Coin_SWIG_Python.SoAsciiText_justification_set)
    width = property(Coin_SWIG_Python.SoAsciiText_width_get, Coin_SWIG_Python.SoAsciiText_width_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoAsciiText_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoAsciiText_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAsciiText

# Register SoAsciiText in Coin_SWIG_Python:
Coin_SWIG_Python.SoAsciiText_swigregister(SoAsciiText)

def SoAsciiText_getClassTypeId():
    return Coin_SWIG_Python.SoAsciiText_getClassTypeId()

def SoAsciiText_initClass():
    return Coin_SWIG_Python.SoAsciiText_initClass()

class SoBaseColor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBaseColor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBaseColor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBaseColor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoBaseColor_swiginit(self, Coin_SWIG_Python.new_SoBaseColor())
    rgb = property(Coin_SWIG_Python.SoBaseColor_rgb_get, Coin_SWIG_Python.SoBaseColor_rgb_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoBaseColor_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoBaseColor_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoBaseColor_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBaseColor

# Register SoBaseColor in Coin_SWIG_Python:
Coin_SWIG_Python.SoBaseColor_swigregister(SoBaseColor)

def SoBaseColor_getClassTypeId():
    return Coin_SWIG_Python.SoBaseColor_getClassTypeId()

def SoBaseColor_initClass():
    return Coin_SWIG_Python.SoBaseColor_initClass()

SO_SWITCH_NONE = Coin_SWIG_Python.SO_SWITCH_NONE
SO_SWITCH_INHERIT = Coin_SWIG_Python.SO_SWITCH_INHERIT
SO_SWITCH_ALL = Coin_SWIG_Python.SO_SWITCH_ALL
class SoSwitch(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSwitch_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSwitch_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSwitch_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoSwitch_swiginit(self, Coin_SWIG_Python.new_SoSwitch(*args))
    whichChild = property(Coin_SWIG_Python.SoSwitch_whichChild_get, Coin_SWIG_Python.SoSwitch_whichChild_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoSwitch_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoSwitch_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoSwitch_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoSwitch_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoSwitch_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoSwitch_getBoundingBox(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoSwitch_handleEvent(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoSwitch_getMatrix(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoSwitch_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoSwitch_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoSwitch_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoSwitch_audioRender(self, action)

    def notify(self, nl):
        return Coin_SWIG_Python.SoSwitch_notify(self, nl)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSwitch

# Register SoSwitch in Coin_SWIG_Python:
Coin_SWIG_Python.SoSwitch_swigregister(SoSwitch)

def SoSwitch_getClassTypeId():
    return Coin_SWIG_Python.SoSwitch_getClassTypeId()

def SoSwitch_initClass():
    return Coin_SWIG_Python.SoSwitch_initClass()

class SoBlinker(SoSwitch):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBlinker_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBlinker_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBlinker_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoBlinker_swiginit(self, Coin_SWIG_Python.new_SoBlinker())
    speed = property(Coin_SWIG_Python.SoBlinker_speed_get, Coin_SWIG_Python.SoBlinker_speed_set)
    on = property(Coin_SWIG_Python.SoBlinker_on_get, Coin_SWIG_Python.SoBlinker_on_set)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoBlinker_getBoundingBox(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoBlinker_write(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBlinker

# Register SoBlinker in Coin_SWIG_Python:
Coin_SWIG_Python.SoBlinker_swigregister(SoBlinker)

def SoBlinker_getClassTypeId():
    return Coin_SWIG_Python.SoBlinker_getClassTypeId()

def SoBlinker_initClass():
    return Coin_SWIG_Python.SoBlinker_initClass()

class SoBumpMapCoordinate(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBumpMapCoordinate_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBumpMapCoordinate_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBumpMapCoordinate_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoBumpMapCoordinate_swiginit(self, Coin_SWIG_Python.new_SoBumpMapCoordinate())
    point = property(Coin_SWIG_Python.SoBumpMapCoordinate_point_get, Coin_SWIG_Python.SoBumpMapCoordinate_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoBumpMapCoordinate_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoBumpMapCoordinate_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoBumpMapCoordinate_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoBumpMapCoordinate_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBumpMapCoordinate

# Register SoBumpMapCoordinate in Coin_SWIG_Python:
Coin_SWIG_Python.SoBumpMapCoordinate_swigregister(SoBumpMapCoordinate)

def SoBumpMapCoordinate_getClassTypeId():
    return Coin_SWIG_Python.SoBumpMapCoordinate_getClassTypeId()

def SoBumpMapCoordinate_initClass():
    return Coin_SWIG_Python.SoBumpMapCoordinate_initClass()

class SoBumpMap(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBumpMap_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBumpMap_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBumpMap_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoBumpMap_swiginit(self, Coin_SWIG_Python.new_SoBumpMap())
    REPEAT = Coin_SWIG_Python.SoBumpMap_REPEAT
    CLAMP = Coin_SWIG_Python.SoBumpMap_CLAMP
    filename = property(Coin_SWIG_Python.SoBumpMap_filename_get, Coin_SWIG_Python.SoBumpMap_filename_set)
    image = property(Coin_SWIG_Python.SoBumpMap_image_get, Coin_SWIG_Python.SoBumpMap_image_set)
    wrapS = property(Coin_SWIG_Python.SoBumpMap_wrapS_get, Coin_SWIG_Python.SoBumpMap_wrapS_set)
    wrapT = property(Coin_SWIG_Python.SoBumpMap_wrapT_get, Coin_SWIG_Python.SoBumpMap_wrapT_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoBumpMap_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoBumpMap_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoBumpMap_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoBumpMap_rayPick(self, action)

    @staticmethod
    def readImage(fname, w, h, nc, bytes):
        return Coin_SWIG_Python.SoBumpMap_readImage(fname, w, h, nc, bytes)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBumpMap

# Register SoBumpMap in Coin_SWIG_Python:
Coin_SWIG_Python.SoBumpMap_swigregister(SoBumpMap)

def SoBumpMap_getClassTypeId():
    return Coin_SWIG_Python.SoBumpMap_getClassTypeId()

def SoBumpMap_initClass():
    return Coin_SWIG_Python.SoBumpMap_initClass()

def SoBumpMap_readImage(fname, w, h, nc, bytes):
    return Coin_SWIG_Python.SoBumpMap_readImage(fname, w, h, nc, bytes)

class SoBumpMapTransform(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoBumpMapTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoBumpMapTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoBumpMapTransform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoBumpMapTransform_swiginit(self, Coin_SWIG_Python.new_SoBumpMapTransform())
    translation = property(Coin_SWIG_Python.SoBumpMapTransform_translation_get, Coin_SWIG_Python.SoBumpMapTransform_translation_set)
    rotation = property(Coin_SWIG_Python.SoBumpMapTransform_rotation_get, Coin_SWIG_Python.SoBumpMapTransform_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoBumpMapTransform_scaleFactor_get, Coin_SWIG_Python.SoBumpMapTransform_scaleFactor_set)
    center = property(Coin_SWIG_Python.SoBumpMapTransform_center_get, Coin_SWIG_Python.SoBumpMapTransform_center_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoBumpMapTransform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoBumpMapTransform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoBumpMapTransform_GLRender(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoBumpMapTransform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoBumpMapTransform_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBumpMapTransform

# Register SoBumpMapTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoBumpMapTransform_swigregister(SoBumpMapTransform)

def SoBumpMapTransform_getClassTypeId():
    return Coin_SWIG_Python.SoBumpMapTransform_getClassTypeId()

def SoBumpMapTransform_initClass():
    return Coin_SWIG_Python.SoBumpMapTransform_initClass()

class SoCallback(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCallback_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCallback_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCallback_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCallback_swiginit(self, Coin_SWIG_Python.new_SoCallback())

    def doAction(self, action):
        return Coin_SWIG_Python.SoCallback_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoCallback_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCallback_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoCallback_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoCallback_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoCallback_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoCallback_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoCallback_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoCallback_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCallback_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCallback

    def setCallback(self, *args):
        return Coin_SWIG_Python.SoCallback_setCallback(self, *args)

# Register SoCallback in Coin_SWIG_Python:
Coin_SWIG_Python.SoCallback_swigregister(SoCallback)

def SoCallback_getClassTypeId():
    return Coin_SWIG_Python.SoCallback_getClassTypeId()

def SoCallback_initClass():
    return Coin_SWIG_Python.SoCallback_initClass()

SO_ASPECT_SQUARE = Coin_SWIG_Python.SO_ASPECT_SQUARE
SO_ASPECT_VIDEO = Coin_SWIG_Python.SO_ASPECT_VIDEO
SO_ASPECT_35mm_ACADEMY = Coin_SWIG_Python.SO_ASPECT_35mm_ACADEMY
SO_ASPECT_16mm = Coin_SWIG_Python.SO_ASPECT_16mm
SO_ASPECT_35mm_FULL = Coin_SWIG_Python.SO_ASPECT_35mm_FULL
SO_ASPECT_70mm = Coin_SWIG_Python.SO_ASPECT_70mm
SO_ASPECT_CINEMASCOPE = Coin_SWIG_Python.SO_ASPECT_CINEMASCOPE
SO_ASPECT_HDTV = Coin_SWIG_Python.SO_ASPECT_HDTV
SO_ASPECT_PANAVISION = Coin_SWIG_Python.SO_ASPECT_PANAVISION
SO_ASPECT_35mm = Coin_SWIG_Python.SO_ASPECT_35mm
SO_ASPECT_VISTAVISION = Coin_SWIG_Python.SO_ASPECT_VISTAVISION
class SoCamera(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCamera_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCamera_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCamera_initClass()
    CROP_VIEWPORT_FILL_FRAME = Coin_SWIG_Python.SoCamera_CROP_VIEWPORT_FILL_FRAME
    CROP_VIEWPORT_LINE_FRAME = Coin_SWIG_Python.SoCamera_CROP_VIEWPORT_LINE_FRAME
    CROP_VIEWPORT_NO_FRAME = Coin_SWIG_Python.SoCamera_CROP_VIEWPORT_NO_FRAME
    ADJUST_CAMERA = Coin_SWIG_Python.SoCamera_ADJUST_CAMERA
    LEAVE_ALONE = Coin_SWIG_Python.SoCamera_LEAVE_ALONE
    viewportMapping = property(Coin_SWIG_Python.SoCamera_viewportMapping_get, Coin_SWIG_Python.SoCamera_viewportMapping_set)
    position = property(Coin_SWIG_Python.SoCamera_position_get, Coin_SWIG_Python.SoCamera_position_set)
    orientation = property(Coin_SWIG_Python.SoCamera_orientation_get, Coin_SWIG_Python.SoCamera_orientation_set)
    aspectRatio = property(Coin_SWIG_Python.SoCamera_aspectRatio_get, Coin_SWIG_Python.SoCamera_aspectRatio_set)
    nearDistance = property(Coin_SWIG_Python.SoCamera_nearDistance_get, Coin_SWIG_Python.SoCamera_nearDistance_set)
    farDistance = property(Coin_SWIG_Python.SoCamera_farDistance_get, Coin_SWIG_Python.SoCamera_farDistance_set)
    focalDistance = property(Coin_SWIG_Python.SoCamera_focalDistance_get, Coin_SWIG_Python.SoCamera_focalDistance_set)

    def pointAt(self, *args):
        return Coin_SWIG_Python.SoCamera_pointAt(self, *args)

    def scaleHeight(self, scalefactor):
        return Coin_SWIG_Python.SoCamera_scaleHeight(self, scalefactor)

    def getViewVolume(self, useaspectratio=0.0):
        return Coin_SWIG_Python.SoCamera_getViewVolume(self, useaspectratio)

    def viewAll(self, *args):
        return Coin_SWIG_Python.SoCamera_viewAll(self, *args)

    def getViewportBounds(self, region):
        return Coin_SWIG_Python.SoCamera_getViewportBounds(self, region)
    MONOSCOPIC = Coin_SWIG_Python.SoCamera_MONOSCOPIC
    LEFT_VIEW = Coin_SWIG_Python.SoCamera_LEFT_VIEW
    RIGHT_VIEW = Coin_SWIG_Python.SoCamera_RIGHT_VIEW

    def setStereoMode(self, mode):
        return Coin_SWIG_Python.SoCamera_setStereoMode(self, mode)

    def getStereoMode(self):
        return Coin_SWIG_Python.SoCamera_getStereoMode(self)

    def setStereoAdjustment(self, adjustment):
        return Coin_SWIG_Python.SoCamera_setStereoAdjustment(self, adjustment)

    def getStereoAdjustment(self):
        return Coin_SWIG_Python.SoCamera_getStereoAdjustment(self)

    def setBalanceAdjustment(self, adjustment):
        return Coin_SWIG_Python.SoCamera_setBalanceAdjustment(self, adjustment)

    def getBalanceAdjustment(self):
        return Coin_SWIG_Python.SoCamera_getBalanceAdjustment(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoCamera_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoCamera_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCamera_GLRender(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoCamera_audioRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoCamera_getBoundingBox(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoCamera_handleEvent(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoCamera_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCamera_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCamera

# Register SoCamera in Coin_SWIG_Python:
Coin_SWIG_Python.SoCamera_swigregister(SoCamera)

def SoCamera_getClassTypeId():
    return Coin_SWIG_Python.SoCamera_getClassTypeId()

def SoCamera_initClass():
    return Coin_SWIG_Python.SoCamera_initClass()

class SoColorIndex(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoColorIndex_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoColorIndex_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoColorIndex_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoColorIndex_swiginit(self, Coin_SWIG_Python.new_SoColorIndex())
    index = property(Coin_SWIG_Python.SoColorIndex_index_get, Coin_SWIG_Python.SoColorIndex_index_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoColorIndex_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoColorIndex

# Register SoColorIndex in Coin_SWIG_Python:
Coin_SWIG_Python.SoColorIndex_swigregister(SoColorIndex)

def SoColorIndex_getClassTypeId():
    return Coin_SWIG_Python.SoColorIndex_getClassTypeId()

def SoColorIndex_initClass():
    return Coin_SWIG_Python.SoColorIndex_initClass()

class SoCone(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCone_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCone_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCone_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCone_swiginit(self, Coin_SWIG_Python.new_SoCone())
    SIDES = Coin_SWIG_Python.SoCone_SIDES
    BOTTOM = Coin_SWIG_Python.SoCone_BOTTOM
    ALL = Coin_SWIG_Python.SoCone_ALL
    parts = property(Coin_SWIG_Python.SoCone_parts_get, Coin_SWIG_Python.SoCone_parts_set)
    bottomRadius = property(Coin_SWIG_Python.SoCone_bottomRadius_get, Coin_SWIG_Python.SoCone_bottomRadius_set)
    height = property(Coin_SWIG_Python.SoCone_height_get, Coin_SWIG_Python.SoCone_height_set)

    def addPart(self, part):
        return Coin_SWIG_Python.SoCone_addPart(self, part)

    def removePart(self, part):
        return Coin_SWIG_Python.SoCone_removePart(self, part)

    def hasPart(self, part):
        return Coin_SWIG_Python.SoCone_hasPart(self, part)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCone_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoCone_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCone_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCone

# Register SoCone in Coin_SWIG_Python:
Coin_SWIG_Python.SoCone_swigregister(SoCone)

def SoCone_getClassTypeId():
    return Coin_SWIG_Python.SoCone_getClassTypeId()

def SoCone_initClass():
    return Coin_SWIG_Python.SoCone_initClass()

class SoCoordinate3(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCoordinate3_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCoordinate3_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCoordinate3_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCoordinate3_swiginit(self, Coin_SWIG_Python.new_SoCoordinate3())
    point = property(Coin_SWIG_Python.SoCoordinate3_point_get, Coin_SWIG_Python.SoCoordinate3_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoCoordinate3_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCoordinate3_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoCoordinate3_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoCoordinate3_getBoundingBox(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoCoordinate3_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCoordinate3_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCoordinate3

# Register SoCoordinate3 in Coin_SWIG_Python:
Coin_SWIG_Python.SoCoordinate3_swigregister(SoCoordinate3)

def SoCoordinate3_getClassTypeId():
    return Coin_SWIG_Python.SoCoordinate3_getClassTypeId()

def SoCoordinate3_initClass():
    return Coin_SWIG_Python.SoCoordinate3_initClass()

class SoCoordinate4(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCoordinate4_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCoordinate4_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCoordinate4_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCoordinate4_swiginit(self, Coin_SWIG_Python.new_SoCoordinate4())
    point = property(Coin_SWIG_Python.SoCoordinate4_point_get, Coin_SWIG_Python.SoCoordinate4_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoCoordinate4_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCoordinate4_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoCoordinate4_getBoundingBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoCoordinate4_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoCoordinate4_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCoordinate4_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCoordinate4

# Register SoCoordinate4 in Coin_SWIG_Python:
Coin_SWIG_Python.SoCoordinate4_swigregister(SoCoordinate4)

def SoCoordinate4_getClassTypeId():
    return Coin_SWIG_Python.SoCoordinate4_getClassTypeId()

def SoCoordinate4_initClass():
    return Coin_SWIG_Python.SoCoordinate4_initClass()

class SoCube(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCube_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCube_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCube_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCube_swiginit(self, Coin_SWIG_Python.new_SoCube())
    width = property(Coin_SWIG_Python.SoCube_width_get, Coin_SWIG_Python.SoCube_width_set)
    height = property(Coin_SWIG_Python.SoCube_height_get, Coin_SWIG_Python.SoCube_height_set)
    depth = property(Coin_SWIG_Python.SoCube_depth_get, Coin_SWIG_Python.SoCube_depth_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCube_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoCube_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCube_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCube

# Register SoCube in Coin_SWIG_Python:
Coin_SWIG_Python.SoCube_swigregister(SoCube)

def SoCube_getClassTypeId():
    return Coin_SWIG_Python.SoCube_getClassTypeId()

def SoCube_initClass():
    return Coin_SWIG_Python.SoCube_initClass()

class SoCylinder(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoCylinder_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoCylinder_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoCylinder_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoCylinder_swiginit(self, Coin_SWIG_Python.new_SoCylinder())
    SIDES = Coin_SWIG_Python.SoCylinder_SIDES
    TOP = Coin_SWIG_Python.SoCylinder_TOP
    BOTTOM = Coin_SWIG_Python.SoCylinder_BOTTOM
    ALL = Coin_SWIG_Python.SoCylinder_ALL
    radius = property(Coin_SWIG_Python.SoCylinder_radius_get, Coin_SWIG_Python.SoCylinder_radius_set)
    height = property(Coin_SWIG_Python.SoCylinder_height_get, Coin_SWIG_Python.SoCylinder_height_set)
    parts = property(Coin_SWIG_Python.SoCylinder_parts_get, Coin_SWIG_Python.SoCylinder_parts_set)

    def addPart(self, part):
        return Coin_SWIG_Python.SoCylinder_addPart(self, part)

    def removePart(self, part):
        return Coin_SWIG_Python.SoCylinder_removePart(self, part)

    def hasPart(self, part):
        return Coin_SWIG_Python.SoCylinder_hasPart(self, part)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoCylinder_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoCylinder_getPrimitiveCount(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoCylinder_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCylinder

# Register SoCylinder in Coin_SWIG_Python:
Coin_SWIG_Python.SoCylinder_swigregister(SoCylinder)

def SoCylinder_getClassTypeId():
    return Coin_SWIG_Python.SoCylinder_getClassTypeId()

def SoCylinder_initClass():
    return Coin_SWIG_Python.SoCylinder_initClass()

class SoEnvironment(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoEnvironment_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoEnvironment_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoEnvironment_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoEnvironment_swiginit(self, Coin_SWIG_Python.new_SoEnvironment())
    NONE = Coin_SWIG_Python.SoEnvironment_NONE
    HAZE = Coin_SWIG_Python.SoEnvironment_HAZE
    FOG = Coin_SWIG_Python.SoEnvironment_FOG
    SMOKE = Coin_SWIG_Python.SoEnvironment_SMOKE

    def GLRender(self, action):
        return Coin_SWIG_Python.SoEnvironment_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoEnvironment_callback(self, action)
    ambientIntensity = property(Coin_SWIG_Python.SoEnvironment_ambientIntensity_get, Coin_SWIG_Python.SoEnvironment_ambientIntensity_set)
    ambientColor = property(Coin_SWIG_Python.SoEnvironment_ambientColor_get, Coin_SWIG_Python.SoEnvironment_ambientColor_set)
    attenuation = property(Coin_SWIG_Python.SoEnvironment_attenuation_get, Coin_SWIG_Python.SoEnvironment_attenuation_set)
    fogType = property(Coin_SWIG_Python.SoEnvironment_fogType_get, Coin_SWIG_Python.SoEnvironment_fogType_set)
    fogColor = property(Coin_SWIG_Python.SoEnvironment_fogColor_get, Coin_SWIG_Python.SoEnvironment_fogColor_set)
    fogVisibility = property(Coin_SWIG_Python.SoEnvironment_fogVisibility_get, Coin_SWIG_Python.SoEnvironment_fogVisibility_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEnvironment

# Register SoEnvironment in Coin_SWIG_Python:
Coin_SWIG_Python.SoEnvironment_swigregister(SoEnvironment)

def SoEnvironment_getClassTypeId():
    return Coin_SWIG_Python.SoEnvironment_getClassTypeId()

def SoEnvironment_initClass():
    return Coin_SWIG_Python.SoEnvironment_initClass()

class SoEventCallback(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoEventCallback_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoEventCallback_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoEventCallback_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoEventCallback_swiginit(self, Coin_SWIG_Python.new_SoEventCallback())

    def setPath(self, path):
        return Coin_SWIG_Python.SoEventCallback_setPath(self, path)

    def getPath(self):
        return Coin_SWIG_Python.SoEventCallback_getPath(self)

    def getAction(self):
        return Coin_SWIG_Python.SoEventCallback_getAction(self)

    def getEvent(self):
        return Coin_SWIG_Python.SoEventCallback_getEvent(self)

    def getPickedPoint(self):
        return Coin_SWIG_Python.SoEventCallback_getPickedPoint(self)

    def setHandled(self):
        return Coin_SWIG_Python.SoEventCallback_setHandled(self)

    def isHandled(self):
        return Coin_SWIG_Python.SoEventCallback_isHandled(self)

    def grabEvents(self):
        return Coin_SWIG_Python.SoEventCallback_grabEvents(self)

    def releaseEvents(self):
        return Coin_SWIG_Python.SoEventCallback_releaseEvents(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEventCallback

    def addEventCallback(self, *args):
        return Coin_SWIG_Python.SoEventCallback_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        return Coin_SWIG_Python.SoEventCallback_removeEventCallback(self, *args)

# Register SoEventCallback in Coin_SWIG_Python:
Coin_SWIG_Python.SoEventCallback_swigregister(SoEventCallback)

def SoEventCallback_getClassTypeId():
    return Coin_SWIG_Python.SoEventCallback_getClassTypeId()

def SoEventCallback_initClass():
    return Coin_SWIG_Python.SoEventCallback_initClass()

class SoSelection(SoSeparator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSelection_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSelection_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSelection_initClass()
    SINGLE = Coin_SWIG_Python.SoSelection_SINGLE
    TOGGLE = Coin_SWIG_Python.SoSelection_TOGGLE
    SHIFT = Coin_SWIG_Python.SoSelection_SHIFT
    policy = property(Coin_SWIG_Python.SoSelection_policy_get, Coin_SWIG_Python.SoSelection_policy_set)

    def __init__(self, *args):
        Coin_SWIG_Python.SoSelection_swiginit(self, Coin_SWIG_Python.new_SoSelection(*args))

    def select(self, *args):
        return Coin_SWIG_Python.SoSelection_select(self, *args)

    def deselect(self, *args):
        return Coin_SWIG_Python.SoSelection_deselect(self, *args)

    def toggle(self, *args):
        return Coin_SWIG_Python.SoSelection_toggle(self, *args)

    def isSelected(self, *args):
        return Coin_SWIG_Python.SoSelection_isSelected(self, *args)

    def deselectAll(self):
        return Coin_SWIG_Python.SoSelection_deselectAll(self)

    def getNumSelected(self):
        return Coin_SWIG_Python.SoSelection_getNumSelected(self)

    def getList(self):
        return Coin_SWIG_Python.SoSelection_getList(self)

    def getPath(self, index):
        return Coin_SWIG_Python.SoSelection_getPath(self, index)

    def setPickMatching(self, pickMatching):
        return Coin_SWIG_Python.SoSelection_setPickMatching(self, pickMatching)

    def isPickMatching(self):
        return Coin_SWIG_Python.SoSelection_isPickMatching(self)

    def getPickMatching(self):
        return Coin_SWIG_Python.SoSelection_getPickMatching(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSelection

    def addSelectionCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_addSelectionCallback(self, *args)

    def removeSelectionCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_removeSelectionCallback(self, *args)

    def addDeselectionCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_addDeselectionCallback(self, *args)

    def removeDeselectionCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_removeDeselectionCallback(self, *args)

    def addStartCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_addStartCallback(self, *args)

    def removeStartCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_removeStartCallback(self, *args)

    def addFinishCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_addFinishCallback(self, *args)

    def removeFinishCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_removeFinishCallback(self, *args)

    def setPickFilterCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_setPickFilterCallback(self, *args)

    def addChangeCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_addChangeCallback(self, *args)

    def removeChangeCallback(self, *args):
        return Coin_SWIG_Python.SoSelection_removeChangeCallback(self, *args)

# Register SoSelection in Coin_SWIG_Python:
Coin_SWIG_Python.SoSelection_swigregister(SoSelection)

def SoSelection_getClassTypeId():
    return Coin_SWIG_Python.SoSelection_getClassTypeId()

def SoSelection_initClass():
    return Coin_SWIG_Python.SoSelection_initClass()

class SoExtSelection(SoSelection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoExtSelection_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoExtSelection_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoExtSelection_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoExtSelection_swiginit(self, Coin_SWIG_Python.new_SoExtSelection())
    NOLASSO = Coin_SWIG_Python.SoExtSelection_NOLASSO
    LASSO = Coin_SWIG_Python.SoExtSelection_LASSO
    RECTANGLE = Coin_SWIG_Python.SoExtSelection_RECTANGLE
    FULL_BBOX = Coin_SWIG_Python.SoExtSelection_FULL_BBOX
    PART_BBOX = Coin_SWIG_Python.SoExtSelection_PART_BBOX
    FULL = Coin_SWIG_Python.SoExtSelection_FULL
    PART = Coin_SWIG_Python.SoExtSelection_PART
    ALL_SHAPES = Coin_SWIG_Python.SoExtSelection_ALL_SHAPES
    VISIBLE_SHAPES = Coin_SWIG_Python.SoExtSelection_VISIBLE_SHAPES
    lassoType = property(Coin_SWIG_Python.SoExtSelection_lassoType_get, Coin_SWIG_Python.SoExtSelection_lassoType_set)
    lassoPolicy = property(Coin_SWIG_Python.SoExtSelection_lassoPolicy_get, Coin_SWIG_Python.SoExtSelection_lassoPolicy_set)
    lassoMode = property(Coin_SWIG_Python.SoExtSelection_lassoMode_get, Coin_SWIG_Python.SoExtSelection_lassoMode_set)

    def useOverlay(self, overlay=1):
        return Coin_SWIG_Python.SoExtSelection_useOverlay(self, overlay)

    def isUsingOverlay(self):
        return Coin_SWIG_Python.SoExtSelection_isUsingOverlay(self)

    def getOverlaySceneGraph(self):
        return Coin_SWIG_Python.SoExtSelection_getOverlaySceneGraph(self)

    def setOverlayLassoColorIndex(self, index):
        return Coin_SWIG_Python.SoExtSelection_setOverlayLassoColorIndex(self, index)

    def getOverlayLassoColorIndex(self):
        return Coin_SWIG_Python.SoExtSelection_getOverlayLassoColorIndex(self)

    def setLassoColor(self, color):
        return Coin_SWIG_Python.SoExtSelection_setLassoColor(self, color)

    def getLassoColor(self):
        return Coin_SWIG_Python.SoExtSelection_getLassoColor(self)

    def setLassoWidth(self, width):
        return Coin_SWIG_Python.SoExtSelection_setLassoWidth(self, width)

    def getLassoWidth(self):
        return Coin_SWIG_Python.SoExtSelection_getLassoWidth(self)

    def setOverlayLassoPattern(self, pattern):
        return Coin_SWIG_Python.SoExtSelection_setOverlayLassoPattern(self, pattern)

    def getOverlayLassoPattern(self):
        return Coin_SWIG_Python.SoExtSelection_getOverlayLassoPattern(self)

    def animateOverlayLasso(self, animate=1):
        return Coin_SWIG_Python.SoExtSelection_animateOverlayLasso(self, animate)

    def isOverlayLassoAnimated(self):
        return Coin_SWIG_Python.SoExtSelection_isOverlayLassoAnimated(self)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoExtSelection_handleEvent(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoExtSelection_GLRenderBelowPath(self, action)

    def select(self, *args):
        return Coin_SWIG_Python.SoExtSelection_select(self, *args)

    def getLassoCoordsDC(self, numCoords):
        return Coin_SWIG_Python.SoExtSelection_getLassoCoordsDC(self, numCoords)

    def getLassoCoordsWC(self, numCoords):
        return Coin_SWIG_Python.SoExtSelection_getLassoCoordsWC(self, numCoords)

    def getSelectionPathList(self):
        return Coin_SWIG_Python.SoExtSelection_getSelectionPathList(self)

    def setLassoFilterCallback(self, f, userdata=None, callonlyifselectable=1):
        return Coin_SWIG_Python.SoExtSelection_setLassoFilterCallback(self, f, userdata, callonlyifselectable)

    def setTriangleFilterCallback(self, func, userdata=None):
        return Coin_SWIG_Python.SoExtSelection_setTriangleFilterCallback(self, func, userdata)

    def setLineSegmentFilterCallback(self, func, userdata=None):
        return Coin_SWIG_Python.SoExtSelection_setLineSegmentFilterCallback(self, func, userdata)

    def setPointFilterCallback(self, func, userdata=None):
        return Coin_SWIG_Python.SoExtSelection_setPointFilterCallback(self, func, userdata)

    def wasShiftDown(self):
        return Coin_SWIG_Python.SoExtSelection_wasShiftDown(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoExtSelection

# Register SoExtSelection in Coin_SWIG_Python:
Coin_SWIG_Python.SoExtSelection_swigregister(SoExtSelection)

def SoExtSelection_getClassTypeId():
    return Coin_SWIG_Python.SoExtSelection_getClassTypeId()

def SoExtSelection_initClass():
    return Coin_SWIG_Python.SoExtSelection_initClass()

class SoVertexProperty(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVertexProperty_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVertexProperty_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVertexProperty_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVertexProperty_swiginit(self, Coin_SWIG_Python.new_SoVertexProperty())
    OVERALL = Coin_SWIG_Python.SoVertexProperty_OVERALL
    PER_PART = Coin_SWIG_Python.SoVertexProperty_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoVertexProperty_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoVertexProperty_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoVertexProperty_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoVertexProperty_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoVertexProperty_PER_VERTEX_INDEXED
    vertex = property(Coin_SWIG_Python.SoVertexProperty_vertex_get, Coin_SWIG_Python.SoVertexProperty_vertex_set)
    texCoord = property(Coin_SWIG_Python.SoVertexProperty_texCoord_get, Coin_SWIG_Python.SoVertexProperty_texCoord_set)
    texCoord3 = property(Coin_SWIG_Python.SoVertexProperty_texCoord3_get, Coin_SWIG_Python.SoVertexProperty_texCoord3_set)
    normal = property(Coin_SWIG_Python.SoVertexProperty_normal_get, Coin_SWIG_Python.SoVertexProperty_normal_set)
    normalBinding = property(Coin_SWIG_Python.SoVertexProperty_normalBinding_get, Coin_SWIG_Python.SoVertexProperty_normalBinding_set)
    orderedRGBA = property(Coin_SWIG_Python.SoVertexProperty_orderedRGBA_get, Coin_SWIG_Python.SoVertexProperty_orderedRGBA_set)
    materialBinding = property(Coin_SWIG_Python.SoVertexProperty_materialBinding_get, Coin_SWIG_Python.SoVertexProperty_materialBinding_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVertexProperty_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVertexProperty_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVertexProperty_getBoundingBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVertexProperty_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVertexProperty_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVertexProperty_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVertexProperty

# Register SoVertexProperty in Coin_SWIG_Python:
Coin_SWIG_Python.SoVertexProperty_swigregister(SoVertexProperty)

def SoVertexProperty_getClassTypeId():
    return Coin_SWIG_Python.SoVertexProperty_getClassTypeId()

def SoVertexProperty_initClass():
    return Coin_SWIG_Python.SoVertexProperty_initClass()

class SoVertexShape(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVertexShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVertexShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVertexShape_initClass()
    vertexProperty = property(Coin_SWIG_Python.SoVertexShape_vertexProperty_get, Coin_SWIG_Python.SoVertexShape_vertexProperty_set)

    def notify(self, nl):
        return Coin_SWIG_Python.SoVertexShape_notify(self, nl)

    def generateDefaultNormals(self, *args):
        return Coin_SWIG_Python.SoVertexShape_generateDefaultNormals(self, *args)

    def write(self, action):
        return Coin_SWIG_Python.SoVertexShape_write(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVertexShape

# Register SoVertexShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoVertexShape_swigregister(SoVertexShape)

def SoVertexShape_getClassTypeId():
    return Coin_SWIG_Python.SoVertexShape_getClassTypeId()

def SoVertexShape_initClass():
    return Coin_SWIG_Python.SoVertexShape_initClass()

class SoNonIndexedShape(SoVertexShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNonIndexedShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNonIndexedShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNonIndexedShape_initClass()
    startIndex = property(Coin_SWIG_Python.SoNonIndexedShape_startIndex_get, Coin_SWIG_Python.SoNonIndexedShape_startIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNonIndexedShape

# Register SoNonIndexedShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoNonIndexedShape_swigregister(SoNonIndexedShape)

def SoNonIndexedShape_getClassTypeId():
    return Coin_SWIG_Python.SoNonIndexedShape_getClassTypeId()

def SoNonIndexedShape_initClass():
    return Coin_SWIG_Python.SoNonIndexedShape_initClass()

class SoFaceSet(SoNonIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFaceSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFaceSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFaceSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoFaceSet_swiginit(self, Coin_SWIG_Python.new_SoFaceSet())
    numVertices = property(Coin_SWIG_Python.SoFaceSet_numVertices_get, Coin_SWIG_Python.SoFaceSet_numVertices_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoFaceSet_GLRender(self, action)

    def generateDefaultNormals(self, state, nb):
        return Coin_SWIG_Python.SoFaceSet_generateDefaultNormals(self, state, nb)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoFaceSet_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFaceSet

# Register SoFaceSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoFaceSet_swigregister(SoFaceSet)

def SoFaceSet_getClassTypeId():
    return Coin_SWIG_Python.SoFaceSet_getClassTypeId()

def SoFaceSet_initClass():
    return Coin_SWIG_Python.SoFaceSet_initClass()

class SoFile(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFile_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFile_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFile_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoFile_swiginit(self, Coin_SWIG_Python.new_SoFile())
    name = property(Coin_SWIG_Python.SoFile_name_get, Coin_SWIG_Python.SoFile_name_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoFile_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoFile_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoFile_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoFile_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoFile_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoFile_handleEvent(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoFile_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoFile_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoFile_audioRender(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoFile_search(self, action)

    def copyChildren(self):
        return Coin_SWIG_Python.SoFile_copyChildren(self)

    def getChildren(self):
        return Coin_SWIG_Python.SoFile_getChildren(self)

    def copyContents(self, srcFrom, copyconnections):
        return Coin_SWIG_Python.SoFile_copyContents(self, srcFrom, copyconnections)

    def getFullName(self):
        return Coin_SWIG_Python.SoFile_getFullName(self)

    @staticmethod
    def setSearchOK(dosearch):
        return Coin_SWIG_Python.SoFile_setSearchOK(dosearch)

    @staticmethod
    def getSearchOK():
        return Coin_SWIG_Python.SoFile_getSearchOK()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFile

# Register SoFile in Coin_SWIG_Python:
Coin_SWIG_Python.SoFile_swigregister(SoFile)

def SoFile_getClassTypeId():
    return Coin_SWIG_Python.SoFile_getClassTypeId()

def SoFile_initClass():
    return Coin_SWIG_Python.SoFile_initClass()

def SoFile_setSearchOK(dosearch):
    return Coin_SWIG_Python.SoFile_setSearchOK(dosearch)

def SoFile_getSearchOK():
    return Coin_SWIG_Python.SoFile_getSearchOK()

class SoFont(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFont_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFont_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFont_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoFont_swiginit(self, Coin_SWIG_Python.new_SoFont())
    name = property(Coin_SWIG_Python.SoFont_name_get, Coin_SWIG_Python.SoFont_name_set)
    size = property(Coin_SWIG_Python.SoFont_size_get, Coin_SWIG_Python.SoFont_size_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoFont_doAction(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoFont_getBoundingBox(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoFont_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoFont_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoFont_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoFont_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFont

# Register SoFont in Coin_SWIG_Python:
Coin_SWIG_Python.SoFont_swigregister(SoFont)

def SoFont_getClassTypeId():
    return Coin_SWIG_Python.SoFont_getClassTypeId()

def SoFont_initClass():
    return Coin_SWIG_Python.SoFont_initClass()

class SoFontStyle(SoFont):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFontStyle_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFontStyle_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFontStyle_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoFontStyle_swiginit(self, Coin_SWIG_Python.new_SoFontStyle())
    SERIF = Coin_SWIG_Python.SoFontStyle_SERIF
    SANS = Coin_SWIG_Python.SoFontStyle_SANS
    TYPEWRITER = Coin_SWIG_Python.SoFontStyle_TYPEWRITER
    NONE = Coin_SWIG_Python.SoFontStyle_NONE
    BOLD = Coin_SWIG_Python.SoFontStyle_BOLD
    ITALIC = Coin_SWIG_Python.SoFontStyle_ITALIC
    family = property(Coin_SWIG_Python.SoFontStyle_family_get, Coin_SWIG_Python.SoFontStyle_family_set)
    style = property(Coin_SWIG_Python.SoFontStyle_style_get, Coin_SWIG_Python.SoFontStyle_style_set)

    def getFontName(self):
        return Coin_SWIG_Python.SoFontStyle_getFontName(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoFontStyle_doAction(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoFontStyle_getBoundingBox(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoFontStyle_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoFontStyle_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoFontStyle_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoFontStyle_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFontStyle

# Register SoFontStyle in Coin_SWIG_Python:
Coin_SWIG_Python.SoFontStyle_swigregister(SoFontStyle)

def SoFontStyle_getClassTypeId():
    return Coin_SWIG_Python.SoFontStyle_getClassTypeId()

def SoFontStyle_initClass():
    return Coin_SWIG_Python.SoFontStyle_initClass()

class SoIndexedShape(SoVertexShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIndexedShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoIndexedShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIndexedShape_initClass()
    coordIndex = property(Coin_SWIG_Python.SoIndexedShape_coordIndex_get, Coin_SWIG_Python.SoIndexedShape_coordIndex_set)
    materialIndex = property(Coin_SWIG_Python.SoIndexedShape_materialIndex_get, Coin_SWIG_Python.SoIndexedShape_materialIndex_set)
    normalIndex = property(Coin_SWIG_Python.SoIndexedShape_normalIndex_get, Coin_SWIG_Python.SoIndexedShape_normalIndex_set)
    textureCoordIndex = property(Coin_SWIG_Python.SoIndexedShape_textureCoordIndex_get, Coin_SWIG_Python.SoIndexedShape_textureCoordIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedShape

# Register SoIndexedShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoIndexedShape_swigregister(SoIndexedShape)

def SoIndexedShape_getClassTypeId():
    return Coin_SWIG_Python.SoIndexedShape_getClassTypeId()

def SoIndexedShape_initClass():
    return Coin_SWIG_Python.SoIndexedShape_initClass()

SO_END_FACE_INDEX = Coin_SWIG_Python.SO_END_FACE_INDEX
class SoIndexedFaceSet(SoIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIndexedFaceSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoIndexedFaceSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIndexedFaceSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoIndexedFaceSet_swiginit(self, Coin_SWIG_Python.new_SoIndexedFaceSet())

    def GLRender(self, action):
        return Coin_SWIG_Python.SoIndexedFaceSet_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoIndexedFaceSet_getPrimitiveCount(self, action)

    def generateDefaultNormals(self, *args):
        return Coin_SWIG_Python.SoIndexedFaceSet_generateDefaultNormals(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedFaceSet

# Register SoIndexedFaceSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoIndexedFaceSet_swigregister(SoIndexedFaceSet)

def SoIndexedFaceSet_getClassTypeId():
    return Coin_SWIG_Python.SoIndexedFaceSet_getClassTypeId()

def SoIndexedFaceSet_initClass():
    return Coin_SWIG_Python.SoIndexedFaceSet_initClass()

SO_END_LINE_INDEX = Coin_SWIG_Python.SO_END_LINE_INDEX
class SoIndexedLineSet(SoIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIndexedLineSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoIndexedLineSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIndexedLineSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoIndexedLineSet_swiginit(self, Coin_SWIG_Python.new_SoIndexedLineSet())

    def GLRender(self, action):
        return Coin_SWIG_Python.SoIndexedLineSet_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoIndexedLineSet_getBoundingBox(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoIndexedLineSet_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedLineSet

# Register SoIndexedLineSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoIndexedLineSet_swigregister(SoIndexedLineSet)

def SoIndexedLineSet_getClassTypeId():
    return Coin_SWIG_Python.SoIndexedLineSet_getClassTypeId()

def SoIndexedLineSet_initClass():
    return Coin_SWIG_Python.SoIndexedLineSet_initClass()

class SoIndexedNurbsCurve(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIndexedNurbsCurve_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoIndexedNurbsCurve_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIndexedNurbsCurve_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoIndexedNurbsCurve_swiginit(self, Coin_SWIG_Python.new_SoIndexedNurbsCurve())
    numControlPoints = property(Coin_SWIG_Python.SoIndexedNurbsCurve_numControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsCurve_numControlPoints_set)
    coordIndex = property(Coin_SWIG_Python.SoIndexedNurbsCurve_coordIndex_get, Coin_SWIG_Python.SoIndexedNurbsCurve_coordIndex_set)
    knotVector = property(Coin_SWIG_Python.SoIndexedNurbsCurve_knotVector_get, Coin_SWIG_Python.SoIndexedNurbsCurve_knotVector_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsCurve_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsCurve_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsCurve_getPrimitiveCount(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsCurve_getBoundingBox(self, action)

    def sendPrimitive(self, arg2, arg3):
        return Coin_SWIG_Python.SoIndexedNurbsCurve_sendPrimitive(self, arg2, arg3)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedNurbsCurve

# Register SoIndexedNurbsCurve in Coin_SWIG_Python:
Coin_SWIG_Python.SoIndexedNurbsCurve_swigregister(SoIndexedNurbsCurve)

def SoIndexedNurbsCurve_getClassTypeId():
    return Coin_SWIG_Python.SoIndexedNurbsCurve_getClassTypeId()

def SoIndexedNurbsCurve_initClass():
    return Coin_SWIG_Python.SoIndexedNurbsCurve_initClass()

class SoIndexedNurbsSurface(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIndexedNurbsSurface_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoIndexedNurbsSurface_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIndexedNurbsSurface_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoIndexedNurbsSurface_swiginit(self, Coin_SWIG_Python.new_SoIndexedNurbsSurface())
    numUControlPoints = property(Coin_SWIG_Python.SoIndexedNurbsSurface_numUControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numUControlPoints_set)
    numVControlPoints = property(Coin_SWIG_Python.SoIndexedNurbsSurface_numVControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numVControlPoints_set)
    coordIndex = property(Coin_SWIG_Python.SoIndexedNurbsSurface_coordIndex_get, Coin_SWIG_Python.SoIndexedNurbsSurface_coordIndex_set)
    uKnotVector = property(Coin_SWIG_Python.SoIndexedNurbsSurface_uKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_uKnotVector_set)
    vKnotVector = property(Coin_SWIG_Python.SoIndexedNurbsSurface_vKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_vKnotVector_set)
    numSControlPoints = property(Coin_SWIG_Python.SoIndexedNurbsSurface_numSControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numSControlPoints_set)
    numTControlPoints = property(Coin_SWIG_Python.SoIndexedNurbsSurface_numTControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numTControlPoints_set)
    textureCoordIndex = property(Coin_SWIG_Python.SoIndexedNurbsSurface_textureCoordIndex_get, Coin_SWIG_Python.SoIndexedNurbsSurface_textureCoordIndex_set)
    sKnotVector = property(Coin_SWIG_Python.SoIndexedNurbsSurface_sKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_sKnotVector_set)
    tKnotVector = property(Coin_SWIG_Python.SoIndexedNurbsSurface_tKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_tKnotVector_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsSurface_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsSurface_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoIndexedNurbsSurface_getPrimitiveCount(self, action)

    def sendPrimitive(self, arg2, arg3):
        return Coin_SWIG_Python.SoIndexedNurbsSurface_sendPrimitive(self, arg2, arg3)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedNurbsSurface

# Register SoIndexedNurbsSurface in Coin_SWIG_Python:
Coin_SWIG_Python.SoIndexedNurbsSurface_swigregister(SoIndexedNurbsSurface)

def SoIndexedNurbsSurface_getClassTypeId():
    return Coin_SWIG_Python.SoIndexedNurbsSurface_getClassTypeId()

def SoIndexedNurbsSurface_initClass():
    return Coin_SWIG_Python.SoIndexedNurbsSurface_initClass()

SO_END_STRIP_INDEX = Coin_SWIG_Python.SO_END_STRIP_INDEX
class SoIndexedTriangleStripSet(SoIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoIndexedTriangleStripSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoIndexedTriangleStripSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoIndexedTriangleStripSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoIndexedTriangleStripSet_swiginit(self, Coin_SWIG_Python.new_SoIndexedTriangleStripSet())

    def GLRender(self, action):
        return Coin_SWIG_Python.SoIndexedTriangleStripSet_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoIndexedTriangleStripSet_getPrimitiveCount(self, action)

    def generateDefaultNormals(self, state, nb):
        return Coin_SWIG_Python.SoIndexedTriangleStripSet_generateDefaultNormals(self, state, nb)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedTriangleStripSet

# Register SoIndexedTriangleStripSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoIndexedTriangleStripSet_swigregister(SoIndexedTriangleStripSet)

def SoIndexedTriangleStripSet_getClassTypeId():
    return Coin_SWIG_Python.SoIndexedTriangleStripSet_getClassTypeId()

def SoIndexedTriangleStripSet_initClass():
    return Coin_SWIG_Python.SoIndexedTriangleStripSet_initClass()

class SoInfo(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoInfo_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoInfo_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoInfo_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoInfo_swiginit(self, Coin_SWIG_Python.new_SoInfo())
    string = property(Coin_SWIG_Python.SoInfo_string_get, Coin_SWIG_Python.SoInfo_string_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInfo

# Register SoInfo in Coin_SWIG_Python:
Coin_SWIG_Python.SoInfo_swigregister(SoInfo)

def SoInfo_getClassTypeId():
    return Coin_SWIG_Python.SoInfo_getClassTypeId()

def SoInfo_initClass():
    return Coin_SWIG_Python.SoInfo_initClass()

class SoLabel(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLabel_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLabel_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLabel_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoLabel_swiginit(self, Coin_SWIG_Python.new_SoLabel())
    label = property(Coin_SWIG_Python.SoLabel_label_get, Coin_SWIG_Python.SoLabel_label_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLabel

# Register SoLabel in Coin_SWIG_Python:
Coin_SWIG_Python.SoLabel_swigregister(SoLabel)

def SoLabel_getClassTypeId():
    return Coin_SWIG_Python.SoLabel_getClassTypeId()

def SoLabel_initClass():
    return Coin_SWIG_Python.SoLabel_initClass()

class SoLevelOfDetail(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLevelOfDetail_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLevelOfDetail_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLevelOfDetail_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoLevelOfDetail_swiginit(self, Coin_SWIG_Python.new_SoLevelOfDetail(*args))
    screenArea = property(Coin_SWIG_Python.SoLevelOfDetail_screenArea_get, Coin_SWIG_Python.SoLevelOfDetail_screenArea_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoLevelOfDetail_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoLevelOfDetail_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoLevelOfDetail_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoLevelOfDetail_rayPick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoLevelOfDetail_getBoundingBox(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoLevelOfDetail_audioRender(self, action)

    def notify(self, nl):
        return Coin_SWIG_Python.SoLevelOfDetail_notify(self, nl)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLevelOfDetail

# Register SoLevelOfDetail in Coin_SWIG_Python:
Coin_SWIG_Python.SoLevelOfDetail_swigregister(SoLevelOfDetail)

def SoLevelOfDetail_getClassTypeId():
    return Coin_SWIG_Python.SoLevelOfDetail_getClassTypeId()

def SoLevelOfDetail_initClass():
    return Coin_SWIG_Python.SoLevelOfDetail_initClass()

class SoProfile(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProfile_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoProfile_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProfile_initClass()
    START_FIRST = Coin_SWIG_Python.SoProfile_START_FIRST
    START_NEW = Coin_SWIG_Python.SoProfile_START_NEW
    ADD_TO_CURRENT = Coin_SWIG_Python.SoProfile_ADD_TO_CURRENT
    index = property(Coin_SWIG_Python.SoProfile_index_get, Coin_SWIG_Python.SoProfile_index_set)
    linkage = property(Coin_SWIG_Python.SoProfile_linkage_get, Coin_SWIG_Python.SoProfile_linkage_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoProfile_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoProfile_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoProfile_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoProfile_getBoundingBox(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoProfile_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoProfile_getPrimitiveCount(self, action)

    def getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector):
        return Coin_SWIG_Python.SoProfile_getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector)

    def getVertices(self, state, numvertices, vertices):
        return Coin_SWIG_Python.SoProfile_getVertices(self, state, numvertices, vertices)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProfile

# Register SoProfile in Coin_SWIG_Python:
Coin_SWIG_Python.SoProfile_swigregister(SoProfile)

def SoProfile_getClassTypeId():
    return Coin_SWIG_Python.SoProfile_getClassTypeId()

def SoProfile_initClass():
    return Coin_SWIG_Python.SoProfile_initClass()

class SoLinearProfile(SoProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLinearProfile_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLinearProfile_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLinearProfile_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoLinearProfile_swiginit(self, Coin_SWIG_Python.new_SoLinearProfile())

    def getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector):
        return Coin_SWIG_Python.SoLinearProfile_getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector)

    def getVertices(self, state, numvertices, vertices):
        return Coin_SWIG_Python.SoLinearProfile_getVertices(self, state, numvertices, vertices)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLinearProfile

# Register SoLinearProfile in Coin_SWIG_Python:
Coin_SWIG_Python.SoLinearProfile_swigregister(SoLinearProfile)

def SoLinearProfile_getClassTypeId():
    return Coin_SWIG_Python.SoLinearProfile_getClassTypeId()

def SoLinearProfile_initClass():
    return Coin_SWIG_Python.SoLinearProfile_initClass()

class SoLineSet(SoNonIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLineSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLineSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLineSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoLineSet_swiginit(self, Coin_SWIG_Python.new_SoLineSet())
    numVertices = property(Coin_SWIG_Python.SoLineSet_numVertices_get, Coin_SWIG_Python.SoLineSet_numVertices_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoLineSet_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoLineSet_getBoundingBox(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoLineSet_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLineSet

# Register SoLineSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoLineSet_swigregister(SoLineSet)

def SoLineSet_getClassTypeId():
    return Coin_SWIG_Python.SoLineSet_getClassTypeId()

def SoLineSet_initClass():
    return Coin_SWIG_Python.SoLineSet_initClass()

class SoListener(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoListener_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoListener_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoListener_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoListener_swiginit(self, Coin_SWIG_Python.new_SoListener())
    position = property(Coin_SWIG_Python.SoListener_position_get, Coin_SWIG_Python.SoListener_position_set)
    orientation = property(Coin_SWIG_Python.SoListener_orientation_get, Coin_SWIG_Python.SoListener_orientation_set)
    gain = property(Coin_SWIG_Python.SoListener_gain_get, Coin_SWIG_Python.SoListener_gain_set)
    dopplerVelocity = property(Coin_SWIG_Python.SoListener_dopplerVelocity_get, Coin_SWIG_Python.SoListener_dopplerVelocity_set)
    dopplerFactor = property(Coin_SWIG_Python.SoListener_dopplerFactor_get, Coin_SWIG_Python.SoListener_dopplerFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoListener

# Register SoListener in Coin_SWIG_Python:
Coin_SWIG_Python.SoListener_swigregister(SoListener)

def SoListener_getClassTypeId():
    return Coin_SWIG_Python.SoListener_getClassTypeId()

def SoListener_initClass():
    return Coin_SWIG_Python.SoListener_initClass()

class SoLocateHighlight(SoSeparator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLocateHighlight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLocateHighlight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLocateHighlight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoLocateHighlight_swiginit(self, Coin_SWIG_Python.new_SoLocateHighlight())
    AUTO = Coin_SWIG_Python.SoLocateHighlight_AUTO
    ON = Coin_SWIG_Python.SoLocateHighlight_ON
    OFF = Coin_SWIG_Python.SoLocateHighlight_OFF
    EMISSIVE = Coin_SWIG_Python.SoLocateHighlight_EMISSIVE
    EMISSIVE_DIFFUSE = Coin_SWIG_Python.SoLocateHighlight_EMISSIVE_DIFFUSE
    color = property(Coin_SWIG_Python.SoLocateHighlight_color_get, Coin_SWIG_Python.SoLocateHighlight_color_set)
    style = property(Coin_SWIG_Python.SoLocateHighlight_style_get, Coin_SWIG_Python.SoLocateHighlight_style_set)
    mode = property(Coin_SWIG_Python.SoLocateHighlight_mode_get, Coin_SWIG_Python.SoLocateHighlight_mode_set)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoLocateHighlight_handleEvent(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoLocateHighlight_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoLocateHighlight_GLRenderInPath(self, action)

    @staticmethod
    def turnOffCurrentHighlight(action):
        return Coin_SWIG_Python.SoLocateHighlight_turnOffCurrentHighlight(action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLocateHighlight

# Register SoLocateHighlight in Coin_SWIG_Python:
Coin_SWIG_Python.SoLocateHighlight_swigregister(SoLocateHighlight)

def SoLocateHighlight_getClassTypeId():
    return Coin_SWIG_Python.SoLocateHighlight_getClassTypeId()

def SoLocateHighlight_initClass():
    return Coin_SWIG_Python.SoLocateHighlight_initClass()

def SoLocateHighlight_turnOffCurrentHighlight(action):
    return Coin_SWIG_Python.SoLocateHighlight_turnOffCurrentHighlight(action)

class SoLOD(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoLOD_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoLOD_getTypeId(self)

    def __init__(self, *args):
        Coin_SWIG_Python.SoLOD_swiginit(self, Coin_SWIG_Python.new_SoLOD(*args))

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoLOD_initClass()
    range = property(Coin_SWIG_Python.SoLOD_range_get, Coin_SWIG_Python.SoLOD_range_set)
    center = property(Coin_SWIG_Python.SoLOD_center_get, Coin_SWIG_Python.SoLOD_center_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoLOD_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoLOD_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoLOD_GLRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoLOD_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoLOD_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoLOD_GLRenderOffPath(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoLOD_rayPick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoLOD_getBoundingBox(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoLOD_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoLOD_audioRender(self, action)

    def notify(self, nl):
        return Coin_SWIG_Python.SoLOD_notify(self, nl)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLOD

# Register SoLOD in Coin_SWIG_Python:
Coin_SWIG_Python.SoLOD_swigregister(SoLOD)

def SoLOD_getClassTypeId():
    return Coin_SWIG_Python.SoLOD_getClassTypeId()

def SoLOD_initClass():
    return Coin_SWIG_Python.SoLOD_initClass()

class SoPointSet(SoNonIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPointSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPointSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPointSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPointSet_swiginit(self, Coin_SWIG_Python.new_SoPointSet())
    numPoints = property(Coin_SWIG_Python.SoPointSet_numPoints_get, Coin_SWIG_Python.SoPointSet_numPoints_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoPointSet_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoPointSet_getBoundingBox(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoPointSet_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointSet

# Register SoPointSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoPointSet_swigregister(SoPointSet)

def SoPointSet_getClassTypeId():
    return Coin_SWIG_Python.SoPointSet_getClassTypeId()

def SoPointSet_initClass():
    return Coin_SWIG_Python.SoPointSet_initClass()

class SoMarkerSet(SoPointSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMarkerSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMarkerSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMarkerSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoMarkerSet_swiginit(self, Coin_SWIG_Python.new_SoMarkerSet())
    NONE = Coin_SWIG_Python.SoMarkerSet_NONE
    CROSS_5_5 = Coin_SWIG_Python.SoMarkerSet_CROSS_5_5
    PLUS_5_5 = Coin_SWIG_Python.SoMarkerSet_PLUS_5_5
    MINUS_5_5 = Coin_SWIG_Python.SoMarkerSet_MINUS_5_5
    SLASH_5_5 = Coin_SWIG_Python.SoMarkerSet_SLASH_5_5
    BACKSLASH_5_5 = Coin_SWIG_Python.SoMarkerSet_BACKSLASH_5_5
    BAR_5_5 = Coin_SWIG_Python.SoMarkerSet_BAR_5_5
    STAR_5_5 = Coin_SWIG_Python.SoMarkerSet_STAR_5_5
    Y_5_5 = Coin_SWIG_Python.SoMarkerSet_Y_5_5
    LIGHTNING_5_5 = Coin_SWIG_Python.SoMarkerSet_LIGHTNING_5_5
    WELL_5_5 = Coin_SWIG_Python.SoMarkerSet_WELL_5_5
    CIRCLE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_LINE_5_5
    SQUARE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_SQUARE_LINE_5_5
    DIAMOND_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_LINE_5_5
    TRIANGLE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_LINE_5_5
    RHOMBUS_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_LINE_5_5
    HOURGLASS_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_LINE_5_5
    SATELLITE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_LINE_5_5
    PINE_TREE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_LINE_5_5
    CAUTION_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_CAUTION_LINE_5_5
    SHIP_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_SHIP_LINE_5_5
    CIRCLE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_FILLED_5_5
    SQUARE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_SQUARE_FILLED_5_5
    DIAMOND_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_FILLED_5_5
    TRIANGLE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_FILLED_5_5
    RHOMBUS_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_FILLED_5_5
    HOURGLASS_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_FILLED_5_5
    SATELLITE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_FILLED_5_5
    PINE_TREE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_FILLED_5_5
    CAUTION_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_CAUTION_FILLED_5_5
    SHIP_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_SHIP_FILLED_5_5
    CROSS_7_7 = Coin_SWIG_Python.SoMarkerSet_CROSS_7_7
    PLUS_7_7 = Coin_SWIG_Python.SoMarkerSet_PLUS_7_7
    MINUS_7_7 = Coin_SWIG_Python.SoMarkerSet_MINUS_7_7
    SLASH_7_7 = Coin_SWIG_Python.SoMarkerSet_SLASH_7_7
    BACKSLASH_7_7 = Coin_SWIG_Python.SoMarkerSet_BACKSLASH_7_7
    BAR_7_7 = Coin_SWIG_Python.SoMarkerSet_BAR_7_7
    STAR_7_7 = Coin_SWIG_Python.SoMarkerSet_STAR_7_7
    Y_7_7 = Coin_SWIG_Python.SoMarkerSet_Y_7_7
    LIGHTNING_7_7 = Coin_SWIG_Python.SoMarkerSet_LIGHTNING_7_7
    WELL_7_7 = Coin_SWIG_Python.SoMarkerSet_WELL_7_7
    CIRCLE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_LINE_7_7
    SQUARE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_SQUARE_LINE_7_7
    DIAMOND_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_LINE_7_7
    TRIANGLE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_LINE_7_7
    RHOMBUS_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_LINE_7_7
    HOURGLASS_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_LINE_7_7
    SATELLITE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_LINE_7_7
    PINE_TREE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_LINE_7_7
    CAUTION_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_CAUTION_LINE_7_7
    SHIP_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_SHIP_LINE_7_7
    CIRCLE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_FILLED_7_7
    SQUARE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_SQUARE_FILLED_7_7
    DIAMOND_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_FILLED_7_7
    TRIANGLE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_FILLED_7_7
    RHOMBUS_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_FILLED_7_7
    HOURGLASS_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_FILLED_7_7
    SATELLITE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_FILLED_7_7
    PINE_TREE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_FILLED_7_7
    CAUTION_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_CAUTION_FILLED_7_7
    SHIP_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_SHIP_FILLED_7_7
    CROSS_9_9 = Coin_SWIG_Python.SoMarkerSet_CROSS_9_9
    PLUS_9_9 = Coin_SWIG_Python.SoMarkerSet_PLUS_9_9
    MINUS_9_9 = Coin_SWIG_Python.SoMarkerSet_MINUS_9_9
    SLASH_9_9 = Coin_SWIG_Python.SoMarkerSet_SLASH_9_9
    BACKSLASH_9_9 = Coin_SWIG_Python.SoMarkerSet_BACKSLASH_9_9
    BAR_9_9 = Coin_SWIG_Python.SoMarkerSet_BAR_9_9
    STAR_9_9 = Coin_SWIG_Python.SoMarkerSet_STAR_9_9
    Y_9_9 = Coin_SWIG_Python.SoMarkerSet_Y_9_9
    LIGHTNING_9_9 = Coin_SWIG_Python.SoMarkerSet_LIGHTNING_9_9
    WELL_9_9 = Coin_SWIG_Python.SoMarkerSet_WELL_9_9
    CIRCLE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_LINE_9_9
    SQUARE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_SQUARE_LINE_9_9
    DIAMOND_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_LINE_9_9
    TRIANGLE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_LINE_9_9
    RHOMBUS_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_LINE_9_9
    HOURGLASS_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_LINE_9_9
    SATELLITE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_LINE_9_9
    PINE_TREE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_LINE_9_9
    CAUTION_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_CAUTION_LINE_9_9
    SHIP_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_SHIP_LINE_9_9
    CIRCLE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_FILLED_9_9
    SQUARE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_SQUARE_FILLED_9_9
    DIAMOND_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_FILLED_9_9
    TRIANGLE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_FILLED_9_9
    RHOMBUS_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_FILLED_9_9
    HOURGLASS_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_FILLED_9_9
    SATELLITE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_FILLED_9_9
    PINE_TREE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_FILLED_9_9
    CAUTION_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_CAUTION_FILLED_9_9
    SHIP_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_SHIP_FILLED_9_9
    NUM_MARKERS = Coin_SWIG_Python.SoMarkerSet_NUM_MARKERS
    markerIndex = property(Coin_SWIG_Python.SoMarkerSet_markerIndex_get, Coin_SWIG_Python.SoMarkerSet_markerIndex_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoMarkerSet_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoMarkerSet_getPrimitiveCount(self, action)

    @staticmethod
    def getNumDefinedMarkers():
        return Coin_SWIG_Python.SoMarkerSet_getNumDefinedMarkers()

    @staticmethod
    def addMarker(idx, size, bytes, isLSBFirst=1, isUpToDown=1):
        return Coin_SWIG_Python.SoMarkerSet_addMarker(idx, size, bytes, isLSBFirst, isUpToDown)

    @staticmethod
    def getMarker(idx, size, bytes, isLSBFirst):
        return Coin_SWIG_Python.SoMarkerSet_getMarker(idx, size, bytes, isLSBFirst)

    @staticmethod
    def removeMarker(idx):
        return Coin_SWIG_Python.SoMarkerSet_removeMarker(idx)

    @staticmethod
    def isMarkerBitSet(idx, bitNumber):
        return Coin_SWIG_Python.SoMarkerSet_isMarkerBitSet(idx, bitNumber)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMarkerSet

# Register SoMarkerSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoMarkerSet_swigregister(SoMarkerSet)

def SoMarkerSet_getClassTypeId():
    return Coin_SWIG_Python.SoMarkerSet_getClassTypeId()

def SoMarkerSet_initClass():
    return Coin_SWIG_Python.SoMarkerSet_initClass()

def SoMarkerSet_getNumDefinedMarkers():
    return Coin_SWIG_Python.SoMarkerSet_getNumDefinedMarkers()

def SoMarkerSet_addMarker(idx, size, bytes, isLSBFirst=1, isUpToDown=1):
    return Coin_SWIG_Python.SoMarkerSet_addMarker(idx, size, bytes, isLSBFirst, isUpToDown)

def SoMarkerSet_getMarker(idx, size, bytes, isLSBFirst):
    return Coin_SWIG_Python.SoMarkerSet_getMarker(idx, size, bytes, isLSBFirst)

def SoMarkerSet_removeMarker(idx):
    return Coin_SWIG_Python.SoMarkerSet_removeMarker(idx)

def SoMarkerSet_isMarkerBitSet(idx, bitNumber):
    return Coin_SWIG_Python.SoMarkerSet_isMarkerBitSet(idx, bitNumber)

class SoMaterial(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMaterial_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMaterial_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMaterial_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoMaterial_swiginit(self, Coin_SWIG_Python.new_SoMaterial())
    ambientColor = property(Coin_SWIG_Python.SoMaterial_ambientColor_get, Coin_SWIG_Python.SoMaterial_ambientColor_set)
    diffuseColor = property(Coin_SWIG_Python.SoMaterial_diffuseColor_get, Coin_SWIG_Python.SoMaterial_diffuseColor_set)
    specularColor = property(Coin_SWIG_Python.SoMaterial_specularColor_get, Coin_SWIG_Python.SoMaterial_specularColor_set)
    emissiveColor = property(Coin_SWIG_Python.SoMaterial_emissiveColor_get, Coin_SWIG_Python.SoMaterial_emissiveColor_set)
    shininess = property(Coin_SWIG_Python.SoMaterial_shininess_get, Coin_SWIG_Python.SoMaterial_shininess_set)
    transparency = property(Coin_SWIG_Python.SoMaterial_transparency_get, Coin_SWIG_Python.SoMaterial_transparency_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoMaterial_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoMaterial_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoMaterial_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMaterial

# Register SoMaterial in Coin_SWIG_Python:
Coin_SWIG_Python.SoMaterial_swigregister(SoMaterial)

def SoMaterial_getClassTypeId():
    return Coin_SWIG_Python.SoMaterial_getClassTypeId()

def SoMaterial_initClass():
    return Coin_SWIG_Python.SoMaterial_initClass()

class SoMatrixTransform(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMatrixTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMatrixTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMatrixTransform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoMatrixTransform_swiginit(self, Coin_SWIG_Python.new_SoMatrixTransform())
    matrix = property(Coin_SWIG_Python.SoMatrixTransform_matrix_get, Coin_SWIG_Python.SoMatrixTransform_matrix_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoMatrixTransform_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMatrixTransform

# Register SoMatrixTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoMatrixTransform_swigregister(SoMatrixTransform)

def SoMatrixTransform_getClassTypeId():
    return Coin_SWIG_Python.SoMatrixTransform_getClassTypeId()

def SoMatrixTransform_initClass():
    return Coin_SWIG_Python.SoMatrixTransform_initClass()

class SoMultipleCopy(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoMultipleCopy_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoMultipleCopy_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoMultipleCopy_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoMultipleCopy_swiginit(self, Coin_SWIG_Python.new_SoMultipleCopy())
    matrix = property(Coin_SWIG_Python.SoMultipleCopy_matrix_get, Coin_SWIG_Python.SoMultipleCopy_matrix_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoMultipleCopy_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_getBoundingBox(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_handleEvent(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_getMatrix(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_search(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoMultipleCopy_audioRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMultipleCopy

# Register SoMultipleCopy in Coin_SWIG_Python:
Coin_SWIG_Python.SoMultipleCopy_swigregister(SoMultipleCopy)

def SoMultipleCopy_getClassTypeId():
    return Coin_SWIG_Python.SoMultipleCopy_getClassTypeId()

def SoMultipleCopy_initClass():
    return Coin_SWIG_Python.SoMultipleCopy_initClass()

class SoNormal(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNormal_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNormal_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNormal_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNormal_swiginit(self, Coin_SWIG_Python.new_SoNormal())
    vector = property(Coin_SWIG_Python.SoNormal_vector_get, Coin_SWIG_Python.SoNormal_vector_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoNormal_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoNormal_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoNormal_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoNormal_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoNormal_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormal

# Register SoNormal in Coin_SWIG_Python:
Coin_SWIG_Python.SoNormal_swigregister(SoNormal)

def SoNormal_getClassTypeId():
    return Coin_SWIG_Python.SoNormal_getClassTypeId()

def SoNormal_initClass():
    return Coin_SWIG_Python.SoNormal_initClass()

class SoNurbsCurve(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNurbsCurve_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNurbsCurve_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNurbsCurve_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNurbsCurve_swiginit(self, Coin_SWIG_Python.new_SoNurbsCurve())
    numControlPoints = property(Coin_SWIG_Python.SoNurbsCurve_numControlPoints_get, Coin_SWIG_Python.SoNurbsCurve_numControlPoints_set)
    knotVector = property(Coin_SWIG_Python.SoNurbsCurve_knotVector_get, Coin_SWIG_Python.SoNurbsCurve_knotVector_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoNurbsCurve_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoNurbsCurve_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoNurbsCurve_getPrimitiveCount(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoNurbsCurve_getBoundingBox(self, action)

    def sendPrimitive(self, arg2, arg3):
        return Coin_SWIG_Python.SoNurbsCurve_sendPrimitive(self, arg2, arg3)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNurbsCurve

# Register SoNurbsCurve in Coin_SWIG_Python:
Coin_SWIG_Python.SoNurbsCurve_swigregister(SoNurbsCurve)

def SoNurbsCurve_getClassTypeId():
    return Coin_SWIG_Python.SoNurbsCurve_getClassTypeId()

def SoNurbsCurve_initClass():
    return Coin_SWIG_Python.SoNurbsCurve_initClass()

class SoNurbsProfile(SoProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNurbsProfile_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNurbsProfile_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNurbsProfile_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNurbsProfile_swiginit(self, Coin_SWIG_Python.new_SoNurbsProfile())
    knotVector = property(Coin_SWIG_Python.SoNurbsProfile_knotVector_get, Coin_SWIG_Python.SoNurbsProfile_knotVector_set)

    def getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector):
        return Coin_SWIG_Python.SoNurbsProfile_getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector)

    def getVertices(self, state, numvertices, vertices):
        return Coin_SWIG_Python.SoNurbsProfile_getVertices(self, state, numvertices, vertices)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNurbsProfile

# Register SoNurbsProfile in Coin_SWIG_Python:
Coin_SWIG_Python.SoNurbsProfile_swigregister(SoNurbsProfile)

def SoNurbsProfile_getClassTypeId():
    return Coin_SWIG_Python.SoNurbsProfile_getClassTypeId()

def SoNurbsProfile_initClass():
    return Coin_SWIG_Python.SoNurbsProfile_initClass()

class SoNurbsSurface(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoNurbsSurface_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoNurbsSurface_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoNurbsSurface_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoNurbsSurface_swiginit(self, Coin_SWIG_Python.new_SoNurbsSurface())
    numUControlPoints = property(Coin_SWIG_Python.SoNurbsSurface_numUControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numUControlPoints_set)
    numVControlPoints = property(Coin_SWIG_Python.SoNurbsSurface_numVControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numVControlPoints_set)
    numSControlPoints = property(Coin_SWIG_Python.SoNurbsSurface_numSControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numSControlPoints_set)
    numTControlPoints = property(Coin_SWIG_Python.SoNurbsSurface_numTControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numTControlPoints_set)
    uKnotVector = property(Coin_SWIG_Python.SoNurbsSurface_uKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_uKnotVector_set)
    vKnotVector = property(Coin_SWIG_Python.SoNurbsSurface_vKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_vKnotVector_set)
    sKnotVector = property(Coin_SWIG_Python.SoNurbsSurface_sKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_sKnotVector_set)
    tKnotVector = property(Coin_SWIG_Python.SoNurbsSurface_tKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_tKnotVector_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoNurbsSurface_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoNurbsSurface_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoNurbsSurface_getPrimitiveCount(self, action)

    def sendPrimitive(self, arg2, arg3):
        return Coin_SWIG_Python.SoNurbsSurface_sendPrimitive(self, arg2, arg3)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNurbsSurface

# Register SoNurbsSurface in Coin_SWIG_Python:
Coin_SWIG_Python.SoNurbsSurface_swigregister(SoNurbsSurface)

def SoNurbsSurface_getClassTypeId():
    return Coin_SWIG_Python.SoNurbsSurface_getClassTypeId()

def SoNurbsSurface_initClass():
    return Coin_SWIG_Python.SoNurbsSurface_initClass()

class SoOrthographicCamera(SoCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoOrthographicCamera_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoOrthographicCamera_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoOrthographicCamera_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoOrthographicCamera_swiginit(self, Coin_SWIG_Python.new_SoOrthographicCamera())
    height = property(Coin_SWIG_Python.SoOrthographicCamera_height_get, Coin_SWIG_Python.SoOrthographicCamera_height_set)

    def scaleHeight(self, scalefactor):
        return Coin_SWIG_Python.SoOrthographicCamera_scaleHeight(self, scalefactor)

    def getViewVolume(self, useaspectratio=0.0):
        return Coin_SWIG_Python.SoOrthographicCamera_getViewVolume(self, useaspectratio)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOrthographicCamera

# Register SoOrthographicCamera in Coin_SWIG_Python:
Coin_SWIG_Python.SoOrthographicCamera_swigregister(SoOrthographicCamera)

def SoOrthographicCamera_getClassTypeId():
    return Coin_SWIG_Python.SoOrthographicCamera_getClassTypeId()

def SoOrthographicCamera_initClass():
    return Coin_SWIG_Python.SoOrthographicCamera_initClass()

class SoPackedColor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPackedColor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPackedColor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPackedColor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPackedColor_swiginit(self, Coin_SWIG_Python.new_SoPackedColor())
    orderedRGBA = property(Coin_SWIG_Python.SoPackedColor_orderedRGBA_get, Coin_SWIG_Python.SoPackedColor_orderedRGBA_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoPackedColor_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoPackedColor_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoPackedColor_callback(self, action)

    def isTransparent(self):
        return Coin_SWIG_Python.SoPackedColor_isTransparent(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPackedColor

# Register SoPackedColor in Coin_SWIG_Python:
Coin_SWIG_Python.SoPackedColor_swigregister(SoPackedColor)

def SoPackedColor_getClassTypeId():
    return Coin_SWIG_Python.SoPackedColor_getClassTypeId()

def SoPackedColor_initClass():
    return Coin_SWIG_Python.SoPackedColor_initClass()

class SoPathSwitch(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPathSwitch_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPathSwitch_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPathSwitch_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoPathSwitch_swiginit(self, Coin_SWIG_Python.new_SoPathSwitch(*args))
    path = property(Coin_SWIG_Python.SoPathSwitch_path_get, Coin_SWIG_Python.SoPathSwitch_path_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoPathSwitch_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoPathSwitch_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoPathSwitch_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoPathSwitch_getBoundingBox(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoPathSwitch_handleEvent(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoPathSwitch_getMatrix(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoPathSwitch_search(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoPathSwitch_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoPathSwitch_audioRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPathSwitch

# Register SoPathSwitch in Coin_SWIG_Python:
Coin_SWIG_Python.SoPathSwitch_swigregister(SoPathSwitch)

def SoPathSwitch_getClassTypeId():
    return Coin_SWIG_Python.SoPathSwitch_getClassTypeId()

def SoPathSwitch_initClass():
    return Coin_SWIG_Python.SoPathSwitch_initClass()

class SoRotation(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRotation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoRotation_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRotation_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoRotation_swiginit(self, Coin_SWIG_Python.new_SoRotation())
    rotation = property(Coin_SWIG_Python.SoRotation_rotation_get, Coin_SWIG_Python.SoRotation_rotation_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoRotation_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoRotation_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoRotation_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoRotation_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoRotation_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoRotation_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoRotation_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotation

# Register SoRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SoRotation_swigregister(SoRotation)

def SoRotation_getClassTypeId():
    return Coin_SWIG_Python.SoRotation_getClassTypeId()

def SoRotation_initClass():
    return Coin_SWIG_Python.SoRotation_initClass()

class SoPendulum(SoRotation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPendulum_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPendulum_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPendulum_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPendulum_swiginit(self, Coin_SWIG_Python.new_SoPendulum())
    rotation0 = property(Coin_SWIG_Python.SoPendulum_rotation0_get, Coin_SWIG_Python.SoPendulum_rotation0_set)
    rotation1 = property(Coin_SWIG_Python.SoPendulum_rotation1_get, Coin_SWIG_Python.SoPendulum_rotation1_set)
    speed = property(Coin_SWIG_Python.SoPendulum_speed_get, Coin_SWIG_Python.SoPendulum_speed_set)
    on = property(Coin_SWIG_Python.SoPendulum_on_get, Coin_SWIG_Python.SoPendulum_on_set)

    def write(self, action):
        return Coin_SWIG_Python.SoPendulum_write(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPendulum

# Register SoPendulum in Coin_SWIG_Python:
Coin_SWIG_Python.SoPendulum_swigregister(SoPendulum)

def SoPendulum_getClassTypeId():
    return Coin_SWIG_Python.SoPendulum_getClassTypeId()

def SoPendulum_initClass():
    return Coin_SWIG_Python.SoPendulum_initClass()

class SoPerspectiveCamera(SoCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPerspectiveCamera_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPerspectiveCamera_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPerspectiveCamera_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPerspectiveCamera_swiginit(self, Coin_SWIG_Python.new_SoPerspectiveCamera())
    heightAngle = property(Coin_SWIG_Python.SoPerspectiveCamera_heightAngle_get, Coin_SWIG_Python.SoPerspectiveCamera_heightAngle_set)

    def scaleHeight(self, scalefactor):
        return Coin_SWIG_Python.SoPerspectiveCamera_scaleHeight(self, scalefactor)

    def getViewVolume(self, useaspectratio=0.0):
        return Coin_SWIG_Python.SoPerspectiveCamera_getViewVolume(self, useaspectratio)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPerspectiveCamera

# Register SoPerspectiveCamera in Coin_SWIG_Python:
Coin_SWIG_Python.SoPerspectiveCamera_swigregister(SoPerspectiveCamera)

def SoPerspectiveCamera_getClassTypeId():
    return Coin_SWIG_Python.SoPerspectiveCamera_getClassTypeId()

def SoPerspectiveCamera_initClass():
    return Coin_SWIG_Python.SoPerspectiveCamera_initClass()

class SoPolygonOffset(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoPolygonOffset_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoPolygonOffset_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoPolygonOffset_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoPolygonOffset_swiginit(self, Coin_SWIG_Python.new_SoPolygonOffset())
    FILLED = Coin_SWIG_Python.SoPolygonOffset_FILLED
    LINES = Coin_SWIG_Python.SoPolygonOffset_LINES
    POINTS = Coin_SWIG_Python.SoPolygonOffset_POINTS
    factor = property(Coin_SWIG_Python.SoPolygonOffset_factor_get, Coin_SWIG_Python.SoPolygonOffset_factor_set)
    units = property(Coin_SWIG_Python.SoPolygonOffset_units_get, Coin_SWIG_Python.SoPolygonOffset_units_set)
    styles = property(Coin_SWIG_Python.SoPolygonOffset_styles_get, Coin_SWIG_Python.SoPolygonOffset_styles_set)
    on = property(Coin_SWIG_Python.SoPolygonOffset_on_get, Coin_SWIG_Python.SoPolygonOffset_on_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoPolygonOffset_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoPolygonOffset_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoPolygonOffset_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPolygonOffset

# Register SoPolygonOffset in Coin_SWIG_Python:
Coin_SWIG_Python.SoPolygonOffset_swigregister(SoPolygonOffset)

def SoPolygonOffset_getClassTypeId():
    return Coin_SWIG_Python.SoPolygonOffset_getClassTypeId()

def SoPolygonOffset_initClass():
    return Coin_SWIG_Python.SoPolygonOffset_initClass()

class SoProfileCoordinate2(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProfileCoordinate2_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoProfileCoordinate2_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProfileCoordinate2_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoProfileCoordinate2_swiginit(self, Coin_SWIG_Python.new_SoProfileCoordinate2())
    point = property(Coin_SWIG_Python.SoProfileCoordinate2_point_get, Coin_SWIG_Python.SoProfileCoordinate2_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate2_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate2_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate2_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate2_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate2_getBoundingBox(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate2_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProfileCoordinate2

# Register SoProfileCoordinate2 in Coin_SWIG_Python:
Coin_SWIG_Python.SoProfileCoordinate2_swigregister(SoProfileCoordinate2)

def SoProfileCoordinate2_getClassTypeId():
    return Coin_SWIG_Python.SoProfileCoordinate2_getClassTypeId()

def SoProfileCoordinate2_initClass():
    return Coin_SWIG_Python.SoProfileCoordinate2_initClass()

class SoProfileCoordinate3(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoProfileCoordinate3_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoProfileCoordinate3_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoProfileCoordinate3_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoProfileCoordinate3_swiginit(self, Coin_SWIG_Python.new_SoProfileCoordinate3())
    point = property(Coin_SWIG_Python.SoProfileCoordinate3_point_get, Coin_SWIG_Python.SoProfileCoordinate3_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate3_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate3_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate3_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate3_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoProfileCoordinate3_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProfileCoordinate3

# Register SoProfileCoordinate3 in Coin_SWIG_Python:
Coin_SWIG_Python.SoProfileCoordinate3_swigregister(SoProfileCoordinate3)

def SoProfileCoordinate3_getClassTypeId():
    return Coin_SWIG_Python.SoProfileCoordinate3_getClassTypeId()

def SoProfileCoordinate3_initClass():
    return Coin_SWIG_Python.SoProfileCoordinate3_initClass()

class SoQuadMesh(SoNonIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoQuadMesh_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoQuadMesh_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoQuadMesh_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoQuadMesh_swiginit(self, Coin_SWIG_Python.new_SoQuadMesh())
    verticesPerColumn = property(Coin_SWIG_Python.SoQuadMesh_verticesPerColumn_get, Coin_SWIG_Python.SoQuadMesh_verticesPerColumn_set)
    verticesPerRow = property(Coin_SWIG_Python.SoQuadMesh_verticesPerRow_get, Coin_SWIG_Python.SoQuadMesh_verticesPerRow_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoQuadMesh_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoQuadMesh_getPrimitiveCount(self, action)

    def generateDefaultNormals(self, state, nb):
        return Coin_SWIG_Python.SoQuadMesh_generateDefaultNormals(self, state, nb)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoQuadMesh

# Register SoQuadMesh in Coin_SWIG_Python:
Coin_SWIG_Python.SoQuadMesh_swigregister(SoQuadMesh)

def SoQuadMesh_getClassTypeId():
    return Coin_SWIG_Python.SoQuadMesh_getClassTypeId()

def SoQuadMesh_initClass():
    return Coin_SWIG_Python.SoQuadMesh_initClass()

class SoResetTransform(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoResetTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoResetTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoResetTransform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoResetTransform_swiginit(self, Coin_SWIG_Python.new_SoResetTransform())
    TRANSFORM = Coin_SWIG_Python.SoResetTransform_TRANSFORM
    BBOX = Coin_SWIG_Python.SoResetTransform_BBOX
    whatToReset = property(Coin_SWIG_Python.SoResetTransform_whatToReset_get, Coin_SWIG_Python.SoResetTransform_whatToReset_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoResetTransform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoResetTransform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoResetTransform_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoResetTransform_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoResetTransform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoResetTransform_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoResetTransform_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoResetTransform

# Register SoResetTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoResetTransform_swigregister(SoResetTransform)

def SoResetTransform_getClassTypeId():
    return Coin_SWIG_Python.SoResetTransform_getClassTypeId()

def SoResetTransform_initClass():
    return Coin_SWIG_Python.SoResetTransform_initClass()

class SoRotationXYZ(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRotationXYZ_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoRotationXYZ_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRotationXYZ_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoRotationXYZ_swiginit(self, Coin_SWIG_Python.new_SoRotationXYZ())
    X = Coin_SWIG_Python.SoRotationXYZ_X
    Y = Coin_SWIG_Python.SoRotationXYZ_Y
    Z = Coin_SWIG_Python.SoRotationXYZ_Z
    axis = property(Coin_SWIG_Python.SoRotationXYZ_axis_get, Coin_SWIG_Python.SoRotationXYZ_axis_set)
    angle = property(Coin_SWIG_Python.SoRotationXYZ_angle_get, Coin_SWIG_Python.SoRotationXYZ_angle_set)

    def getRotation(self):
        return Coin_SWIG_Python.SoRotationXYZ_getRotation(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoRotationXYZ_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotationXYZ

# Register SoRotationXYZ in Coin_SWIG_Python:
Coin_SWIG_Python.SoRotationXYZ_swigregister(SoRotationXYZ)

def SoRotationXYZ_getClassTypeId():
    return Coin_SWIG_Python.SoRotationXYZ_getClassTypeId()

def SoRotationXYZ_initClass():
    return Coin_SWIG_Python.SoRotationXYZ_initClass()

class SoRotor(SoRotation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoRotor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoRotor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoRotor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoRotor_swiginit(self, Coin_SWIG_Python.new_SoRotor())
    speed = property(Coin_SWIG_Python.SoRotor_speed_get, Coin_SWIG_Python.SoRotor_speed_set)
    on = property(Coin_SWIG_Python.SoRotor_on_get, Coin_SWIG_Python.SoRotor_on_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotor

# Register SoRotor in Coin_SWIG_Python:
Coin_SWIG_Python.SoRotor_swigregister(SoRotor)

def SoRotor_getClassTypeId():
    return Coin_SWIG_Python.SoRotor_getClassTypeId()

def SoRotor_initClass():
    return Coin_SWIG_Python.SoRotor_initClass()

class SoTranslation(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTranslation_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTranslation_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTranslation_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTranslation_swiginit(self, Coin_SWIG_Python.new_SoTranslation())
    translation = property(Coin_SWIG_Python.SoTranslation_translation_get, Coin_SWIG_Python.SoTranslation_translation_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTranslation_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTranslation_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTranslation_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoTranslation_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTranslation_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTranslation_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoTranslation_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranslation

# Register SoTranslation in Coin_SWIG_Python:
Coin_SWIG_Python.SoTranslation_swigregister(SoTranslation)

def SoTranslation_getClassTypeId():
    return Coin_SWIG_Python.SoTranslation_getClassTypeId()

def SoTranslation_initClass():
    return Coin_SWIG_Python.SoTranslation_initClass()

class SoShuttle(SoTranslation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShuttle_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShuttle_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShuttle_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoShuttle_swiginit(self, Coin_SWIG_Python.new_SoShuttle())
    translation0 = property(Coin_SWIG_Python.SoShuttle_translation0_get, Coin_SWIG_Python.SoShuttle_translation0_set)
    translation1 = property(Coin_SWIG_Python.SoShuttle_translation1_get, Coin_SWIG_Python.SoShuttle_translation1_set)
    speed = property(Coin_SWIG_Python.SoShuttle_speed_get, Coin_SWIG_Python.SoShuttle_speed_set)
    on = property(Coin_SWIG_Python.SoShuttle_on_get, Coin_SWIG_Python.SoShuttle_on_set)

    def write(self, action):
        return Coin_SWIG_Python.SoShuttle_write(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShuttle

# Register SoShuttle in Coin_SWIG_Python:
Coin_SWIG_Python.SoShuttle_swigregister(SoShuttle)

def SoShuttle_getClassTypeId():
    return Coin_SWIG_Python.SoShuttle_getClassTypeId()

def SoShuttle_initClass():
    return Coin_SWIG_Python.SoShuttle_initClass()

class SoSphere(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSphere_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSphere_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSphere_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSphere_swiginit(self, Coin_SWIG_Python.new_SoSphere())
    radius = property(Coin_SWIG_Python.SoSphere_radius_get, Coin_SWIG_Python.SoSphere_radius_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoSphere_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoSphere_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoSphere_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSphere

# Register SoSphere in Coin_SWIG_Python:
Coin_SWIG_Python.SoSphere_swigregister(SoSphere)

def SoSphere_getClassTypeId():
    return Coin_SWIG_Python.SoSphere_getClassTypeId()

def SoSphere_initClass():
    return Coin_SWIG_Python.SoSphere_initClass()

class SoSurroundScale(SoTransformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSurroundScale_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSurroundScale_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSurroundScale_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSurroundScale_swiginit(self, Coin_SWIG_Python.new_SoSurroundScale())
    numNodesUpToContainer = property(Coin_SWIG_Python.SoSurroundScale_numNodesUpToContainer_get, Coin_SWIG_Python.SoSurroundScale_numNodesUpToContainer_set)
    numNodesUpToReset = property(Coin_SWIG_Python.SoSurroundScale_numNodesUpToReset_get, Coin_SWIG_Python.SoSurroundScale_numNodesUpToReset_set)

    def invalidate(self):
        return Coin_SWIG_Python.SoSurroundScale_invalidate(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoSurroundScale_doAction(self, action)

    def setDoingTranslations(self, val):
        return Coin_SWIG_Python.SoSurroundScale_setDoingTranslations(self, val)

    def isDoingTranslations(self):
        return Coin_SWIG_Python.SoSurroundScale_isDoingTranslations(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSurroundScale

# Register SoSurroundScale in Coin_SWIG_Python:
Coin_SWIG_Python.SoSurroundScale_swigregister(SoSurroundScale)

def SoSurroundScale_getClassTypeId():
    return Coin_SWIG_Python.SoSurroundScale_getClassTypeId()

def SoSurroundScale_initClass():
    return Coin_SWIG_Python.SoSurroundScale_initClass()

class SoText2(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoText2_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoText2_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoText2_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoText2_swiginit(self, Coin_SWIG_Python.new_SoText2())
    LEFT = Coin_SWIG_Python.SoText2_LEFT
    RIGHT = Coin_SWIG_Python.SoText2_RIGHT
    CENTER = Coin_SWIG_Python.SoText2_CENTER
    string = property(Coin_SWIG_Python.SoText2_string_get, Coin_SWIG_Python.SoText2_string_set)
    spacing = property(Coin_SWIG_Python.SoText2_spacing_get, Coin_SWIG_Python.SoText2_spacing_set)
    justification = property(Coin_SWIG_Python.SoText2_justification_get, Coin_SWIG_Python.SoText2_justification_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoText2_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoText2_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoText2_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoText2

# Register SoText2 in Coin_SWIG_Python:
Coin_SWIG_Python.SoText2_swigregister(SoText2)

def SoText2_getClassTypeId():
    return Coin_SWIG_Python.SoText2_getClassTypeId()

def SoText2_initClass():
    return Coin_SWIG_Python.SoText2_initClass()

class SoText3(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoText3_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoText3_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoText3_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoText3_swiginit(self, Coin_SWIG_Python.new_SoText3())
    FRONT = Coin_SWIG_Python.SoText3_FRONT
    SIDES = Coin_SWIG_Python.SoText3_SIDES
    BACK = Coin_SWIG_Python.SoText3_BACK
    ALL = Coin_SWIG_Python.SoText3_ALL
    LEFT = Coin_SWIG_Python.SoText3_LEFT
    RIGHT = Coin_SWIG_Python.SoText3_RIGHT
    CENTER = Coin_SWIG_Python.SoText3_CENTER
    string = property(Coin_SWIG_Python.SoText3_string_get, Coin_SWIG_Python.SoText3_string_set)
    spacing = property(Coin_SWIG_Python.SoText3_spacing_get, Coin_SWIG_Python.SoText3_spacing_set)
    justification = property(Coin_SWIG_Python.SoText3_justification_get, Coin_SWIG_Python.SoText3_justification_set)
    parts = property(Coin_SWIG_Python.SoText3_parts_get, Coin_SWIG_Python.SoText3_parts_set)

    def getCharacterBounds(self, state, stringindex, charindex):
        return Coin_SWIG_Python.SoText3_getCharacterBounds(self, state, stringindex, charindex)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoText3_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoText3_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoText3

# Register SoText3 in Coin_SWIG_Python:
Coin_SWIG_Python.SoText3_swigregister(SoText3)

def SoText3_getClassTypeId():
    return Coin_SWIG_Python.SoText3_getClassTypeId()

def SoText3_initClass():
    return Coin_SWIG_Python.SoText3_initClass()

class SoTexture2Transform(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTexture2Transform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTexture2Transform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTexture2Transform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTexture2Transform_swiginit(self, Coin_SWIG_Python.new_SoTexture2Transform())
    translation = property(Coin_SWIG_Python.SoTexture2Transform_translation_get, Coin_SWIG_Python.SoTexture2Transform_translation_set)
    rotation = property(Coin_SWIG_Python.SoTexture2Transform_rotation_get, Coin_SWIG_Python.SoTexture2Transform_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTexture2Transform_scaleFactor_get, Coin_SWIG_Python.SoTexture2Transform_scaleFactor_set)
    center = property(Coin_SWIG_Python.SoTexture2Transform_center_get, Coin_SWIG_Python.SoTexture2Transform_center_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTexture2Transform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTexture2Transform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTexture2Transform_GLRender(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTexture2Transform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTexture2Transform_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture2Transform

# Register SoTexture2Transform in Coin_SWIG_Python:
Coin_SWIG_Python.SoTexture2Transform_swigregister(SoTexture2Transform)

def SoTexture2Transform_getClassTypeId():
    return Coin_SWIG_Python.SoTexture2Transform_getClassTypeId()

def SoTexture2Transform_initClass():
    return Coin_SWIG_Python.SoTexture2Transform_initClass()

class SoTexture3(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTexture3_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTexture3_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTexture3_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTexture3_swiginit(self, Coin_SWIG_Python.new_SoTexture3())
    MODULATE = Coin_SWIG_Python.SoTexture3_MODULATE
    DECAL = Coin_SWIG_Python.SoTexture3_DECAL
    BLEND = Coin_SWIG_Python.SoTexture3_BLEND
    REPEAT = Coin_SWIG_Python.SoTexture3_REPEAT
    CLAMP = Coin_SWIG_Python.SoTexture3_CLAMP
    filenames = property(Coin_SWIG_Python.SoTexture3_filenames_get, Coin_SWIG_Python.SoTexture3_filenames_set)
    images = property(Coin_SWIG_Python.SoTexture3_images_get, Coin_SWIG_Python.SoTexture3_images_set)
    wrapR = property(Coin_SWIG_Python.SoTexture3_wrapR_get, Coin_SWIG_Python.SoTexture3_wrapR_set)
    wrapS = property(Coin_SWIG_Python.SoTexture3_wrapS_get, Coin_SWIG_Python.SoTexture3_wrapS_set)
    wrapT = property(Coin_SWIG_Python.SoTexture3_wrapT_get, Coin_SWIG_Python.SoTexture3_wrapT_set)
    model = property(Coin_SWIG_Python.SoTexture3_model_get, Coin_SWIG_Python.SoTexture3_model_set)
    blendColor = property(Coin_SWIG_Python.SoTexture3_blendColor_get, Coin_SWIG_Python.SoTexture3_blendColor_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTexture3_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTexture3_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTexture3_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture3

# Register SoTexture3 in Coin_SWIG_Python:
Coin_SWIG_Python.SoTexture3_swigregister(SoTexture3)

def SoTexture3_getClassTypeId():
    return Coin_SWIG_Python.SoTexture3_getClassTypeId()

def SoTexture3_initClass():
    return Coin_SWIG_Python.SoTexture3_initClass()

class SoTexture3Transform(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTexture3Transform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTexture3Transform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTexture3Transform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTexture3Transform_swiginit(self, Coin_SWIG_Python.new_SoTexture3Transform())
    translation = property(Coin_SWIG_Python.SoTexture3Transform_translation_get, Coin_SWIG_Python.SoTexture3Transform_translation_set)
    rotation = property(Coin_SWIG_Python.SoTexture3Transform_rotation_get, Coin_SWIG_Python.SoTexture3Transform_rotation_set)
    scaleFactor = property(Coin_SWIG_Python.SoTexture3Transform_scaleFactor_get, Coin_SWIG_Python.SoTexture3Transform_scaleFactor_set)
    scaleOrientation = property(Coin_SWIG_Python.SoTexture3Transform_scaleOrientation_get, Coin_SWIG_Python.SoTexture3Transform_scaleOrientation_set)
    center = property(Coin_SWIG_Python.SoTexture3Transform_center_get, Coin_SWIG_Python.SoTexture3Transform_center_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTexture3Transform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTexture3Transform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTexture3Transform_GLRender(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTexture3Transform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTexture3Transform_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture3Transform

# Register SoTexture3Transform in Coin_SWIG_Python:
Coin_SWIG_Python.SoTexture3Transform_swigregister(SoTexture3Transform)

def SoTexture3Transform_getClassTypeId():
    return Coin_SWIG_Python.SoTexture3Transform_getClassTypeId()

def SoTexture3Transform_initClass():
    return Coin_SWIG_Python.SoTexture3Transform_initClass()

class SoTextureMatrixTransform(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureMatrixTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureMatrixTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureMatrixTransform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureMatrixTransform_swiginit(self, Coin_SWIG_Python.new_SoTextureMatrixTransform())
    matrix = property(Coin_SWIG_Python.SoTextureMatrixTransform_matrix_get, Coin_SWIG_Python.SoTextureMatrixTransform_matrix_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureMatrixTransform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureMatrixTransform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureMatrixTransform_GLRender(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTextureMatrixTransform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureMatrixTransform_pick(self, action)

# Register SoTextureMatrixTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureMatrixTransform_swigregister(SoTextureMatrixTransform)

def SoTextureMatrixTransform_getClassTypeId():
    return Coin_SWIG_Python.SoTextureMatrixTransform_getClassTypeId()

def SoTextureMatrixTransform_initClass():
    return Coin_SWIG_Python.SoTextureMatrixTransform_initClass()

class SoTextureCoordinate2(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinate2_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinate2_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinate2_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinate2_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinate2())
    point = property(Coin_SWIG_Python.SoTextureCoordinate2_point_get, Coin_SWIG_Python.SoTextureCoordinate2_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate2_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate2_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate2_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate2_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinate2

# Register SoTextureCoordinate2 in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinate2_swigregister(SoTextureCoordinate2)

def SoTextureCoordinate2_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinate2_getClassTypeId()

def SoTextureCoordinate2_initClass():
    return Coin_SWIG_Python.SoTextureCoordinate2_initClass()

class SoTextureCoordinate3(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinate3_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinate3_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinate3_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinate3_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinate3())
    point = property(Coin_SWIG_Python.SoTextureCoordinate3_point_get, Coin_SWIG_Python.SoTextureCoordinate3_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate3_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate3_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate3_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinate3_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinate3

# Register SoTextureCoordinate3 in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinate3_swigregister(SoTextureCoordinate3)

def SoTextureCoordinate3_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinate3_getClassTypeId()

def SoTextureCoordinate3_initClass():
    return Coin_SWIG_Python.SoTextureCoordinate3_initClass()

class SoTextureCoordinateFunction(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateFunction_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateFunction_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateFunction_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateFunction_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateFunction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateFunction

# Register SoTextureCoordinateFunction in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateFunction_swigregister(SoTextureCoordinateFunction)

def SoTextureCoordinateFunction_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateFunction_getClassTypeId()

def SoTextureCoordinateFunction_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateFunction_initClass()

class SoTextureCoordinateDefault(SoTextureCoordinateFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateDefault_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateDefault_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateDefault_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateDefault_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateDefault())

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateDefault_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateDefault_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateDefault_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateDefault_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateDefault

# Register SoTextureCoordinateDefault in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateDefault_swigregister(SoTextureCoordinateDefault)

def SoTextureCoordinateDefault_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateDefault_getClassTypeId()

def SoTextureCoordinateDefault_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateDefault_initClass()

class SoTextureCoordinateEnvironment(SoTextureCoordinateFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateEnvironment_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateEnvironment())

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_pick(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateEnvironment_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateEnvironment

# Register SoTextureCoordinateEnvironment in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateEnvironment_swigregister(SoTextureCoordinateEnvironment)

def SoTextureCoordinateEnvironment_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateEnvironment_getClassTypeId()

def SoTextureCoordinateEnvironment_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateEnvironment_initClass()

class SoTextureCoordinatePlane(SoTextureCoordinateFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinatePlane_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinatePlane_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinatePlane_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinatePlane_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinatePlane())
    directionS = property(Coin_SWIG_Python.SoTextureCoordinatePlane_directionS_get, Coin_SWIG_Python.SoTextureCoordinatePlane_directionS_set)
    directionT = property(Coin_SWIG_Python.SoTextureCoordinatePlane_directionT_get, Coin_SWIG_Python.SoTextureCoordinatePlane_directionT_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinatePlane_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinatePlane_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinatePlane_pick(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinatePlane_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinatePlane

# Register SoTextureCoordinatePlane in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinatePlane_swigregister(SoTextureCoordinatePlane)

def SoTextureCoordinatePlane_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinatePlane_getClassTypeId()

def SoTextureCoordinatePlane_initClass():
    return Coin_SWIG_Python.SoTextureCoordinatePlane_initClass()

class SoTransformSeparator(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransformSeparator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransformSeparator_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransformSeparator_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoTransformSeparator_swiginit(self, Coin_SWIG_Python.new_SoTransformSeparator(*args))

    def doAction(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_getMatrix(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoTransformSeparator_audioRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformSeparator

# Register SoTransformSeparator in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransformSeparator_swigregister(SoTransformSeparator)

def SoTransformSeparator_getClassTypeId():
    return Coin_SWIG_Python.SoTransformSeparator_getClassTypeId()

def SoTransformSeparator_initClass():
    return Coin_SWIG_Python.SoTransformSeparator_initClass()

class SoTransparencyType(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTransparencyType_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTransparencyType_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTransparencyType_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTransparencyType_swiginit(self, Coin_SWIG_Python.new_SoTransparencyType())
    SCREEN_DOOR = Coin_SWIG_Python.SoTransparencyType_SCREEN_DOOR
    ADD = Coin_SWIG_Python.SoTransparencyType_ADD
    DELAYED_ADD = Coin_SWIG_Python.SoTransparencyType_DELAYED_ADD
    SORTED_OBJECT_ADD = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_ADD
    BLEND = Coin_SWIG_Python.SoTransparencyType_BLEND
    DELAYED_BLEND = Coin_SWIG_Python.SoTransparencyType_DELAYED_BLEND
    SORTED_OBJECT_BLEND = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_BLEND
    SORTED_OBJECT_SORTED_TRIANGLE_ADD = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_SORTED_TRIANGLE_ADD
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
    NONE = Coin_SWIG_Python.SoTransparencyType_NONE
    value = property(Coin_SWIG_Python.SoTransparencyType_value_get, Coin_SWIG_Python.SoTransparencyType_value_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTransparencyType_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTransparencyType_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTransparencyType_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransparencyType

# Register SoTransparencyType in Coin_SWIG_Python:
Coin_SWIG_Python.SoTransparencyType_swigregister(SoTransparencyType)

def SoTransparencyType_getClassTypeId():
    return Coin_SWIG_Python.SoTransparencyType_getClassTypeId()

def SoTransparencyType_initClass():
    return Coin_SWIG_Python.SoTransparencyType_initClass()

class SoTriangleStripSet(SoNonIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTriangleStripSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTriangleStripSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTriangleStripSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTriangleStripSet_swiginit(self, Coin_SWIG_Python.new_SoTriangleStripSet())
    numVertices = property(Coin_SWIG_Python.SoTriangleStripSet_numVertices_get, Coin_SWIG_Python.SoTriangleStripSet_numVertices_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTriangleStripSet_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoTriangleStripSet_getPrimitiveCount(self, action)

    def generateDefaultNormals(self, state, nb):
        return Coin_SWIG_Python.SoTriangleStripSet_generateDefaultNormals(self, state, nb)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTriangleStripSet

# Register SoTriangleStripSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoTriangleStripSet_swigregister(SoTriangleStripSet)

def SoTriangleStripSet_getClassTypeId():
    return Coin_SWIG_Python.SoTriangleStripSet_getClassTypeId()

def SoTriangleStripSet_initClass():
    return Coin_SWIG_Python.SoTriangleStripSet_initClass()

class SoWWWAnchor(SoLocateHighlight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoWWWAnchor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoWWWAnchor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoWWWAnchor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoWWWAnchor_swiginit(self, Coin_SWIG_Python.new_SoWWWAnchor())
    NONE = Coin_SWIG_Python.SoWWWAnchor_NONE
    POINT = Coin_SWIG_Python.SoWWWAnchor_POINT
    name = property(Coin_SWIG_Python.SoWWWAnchor_name_get, Coin_SWIG_Python.SoWWWAnchor_name_set)
    description = property(Coin_SWIG_Python.SoWWWAnchor_description_get, Coin_SWIG_Python.SoWWWAnchor_description_set)
    map = property(Coin_SWIG_Python.SoWWWAnchor_map_get, Coin_SWIG_Python.SoWWWAnchor_map_set)

    def setFullURLName(self, url):
        return Coin_SWIG_Python.SoWWWAnchor_setFullURLName(self, url)

    def getFullURLName(self):
        return Coin_SWIG_Python.SoWWWAnchor_getFullURLName(self)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoWWWAnchor_handleEvent(self, action)

    @staticmethod
    def setFetchURLCallBack(f, userData):
        return Coin_SWIG_Python.SoWWWAnchor_setFetchURLCallBack(f, userData)

    @staticmethod
    def setHighlightURLCallBack(f, userData):
        return Coin_SWIG_Python.SoWWWAnchor_setHighlightURLCallBack(f, userData)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWWWAnchor

# Register SoWWWAnchor in Coin_SWIG_Python:
Coin_SWIG_Python.SoWWWAnchor_swigregister(SoWWWAnchor)

def SoWWWAnchor_getClassTypeId():
    return Coin_SWIG_Python.SoWWWAnchor_getClassTypeId()

def SoWWWAnchor_initClass():
    return Coin_SWIG_Python.SoWWWAnchor_initClass()

def SoWWWAnchor_setFetchURLCallBack(f, userData):
    return Coin_SWIG_Python.SoWWWAnchor_setFetchURLCallBack(f, userData)

def SoWWWAnchor_setHighlightURLCallBack(f, userData):
    return Coin_SWIG_Python.SoWWWAnchor_setHighlightURLCallBack(f, userData)

class SoWWWInline(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoWWWInline_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoWWWInline_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoWWWInline_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoWWWInline_swiginit(self, Coin_SWIG_Python.new_SoWWWInline())
    name = property(Coin_SWIG_Python.SoWWWInline_name_get, Coin_SWIG_Python.SoWWWInline_name_set)
    bboxCenter = property(Coin_SWIG_Python.SoWWWInline_bboxCenter_get, Coin_SWIG_Python.SoWWWInline_bboxCenter_set)
    bboxSize = property(Coin_SWIG_Python.SoWWWInline_bboxSize_get, Coin_SWIG_Python.SoWWWInline_bboxSize_set)
    alternateRep = property(Coin_SWIG_Python.SoWWWInline_alternateRep_get, Coin_SWIG_Python.SoWWWInline_alternateRep_set)
    NEVER = Coin_SWIG_Python.SoWWWInline_NEVER
    UNTIL_LOADED = Coin_SWIG_Python.SoWWWInline_UNTIL_LOADED
    ALWAYS = Coin_SWIG_Python.SoWWWInline_ALWAYS

    def setFullURLName(self, url):
        return Coin_SWIG_Python.SoWWWInline_setFullURLName(self, url)

    def getFullURLName(self):
        return Coin_SWIG_Python.SoWWWInline_getFullURLName(self)

    def copyChildren(self):
        return Coin_SWIG_Python.SoWWWInline_copyChildren(self)

    def requestURLData(self):
        return Coin_SWIG_Python.SoWWWInline_requestURLData(self)

    def isURLDataRequested(self):
        return Coin_SWIG_Python.SoWWWInline_isURLDataRequested(self)

    def isURLDataHere(self):
        return Coin_SWIG_Python.SoWWWInline_isURLDataHere(self)

    def cancelURLDataRequest(self):
        return Coin_SWIG_Python.SoWWWInline_cancelURLDataRequest(self)

    def setChildData(self, urldata):
        return Coin_SWIG_Python.SoWWWInline_setChildData(self, urldata)

    def getChildData(self):
        return Coin_SWIG_Python.SoWWWInline_getChildData(self)

    def getChildren(self):
        return Coin_SWIG_Python.SoWWWInline_getChildren(self)

    @staticmethod
    def setFetchURLCallBack(f, userdata):
        return Coin_SWIG_Python.SoWWWInline_setFetchURLCallBack(f, userdata)

    @staticmethod
    def setBoundingBoxVisibility(b):
        return Coin_SWIG_Python.SoWWWInline_setBoundingBoxVisibility(b)

    @staticmethod
    def getBoundingBoxVisibility():
        return Coin_SWIG_Python.SoWWWInline_getBoundingBoxVisibility()

    @staticmethod
    def setBoundingBoxColor(c):
        return Coin_SWIG_Python.SoWWWInline_setBoundingBoxColor(c)

    @staticmethod
    def getBoundingBoxColor():
        return Coin_SWIG_Python.SoWWWInline_getBoundingBoxColor()

    @staticmethod
    def setReadAsSoFile(onoff):
        return Coin_SWIG_Python.SoWWWInline_setReadAsSoFile(onoff)

    @staticmethod
    def getReadAsSoFile():
        return Coin_SWIG_Python.SoWWWInline_getReadAsSoFile()

    def doAction(self, action):
        return Coin_SWIG_Python.SoWWWInline_doAction(self, action)

    def doActionOnKidsOrBox(self, action):
        return Coin_SWIG_Python.SoWWWInline_doActionOnKidsOrBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoWWWInline_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoWWWInline_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoWWWInline_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoWWWInline_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoWWWInline_handleEvent(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoWWWInline_search(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoWWWInline_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoWWWInline_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoWWWInline_audioRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWWWInline

# Register SoWWWInline in Coin_SWIG_Python:
Coin_SWIG_Python.SoWWWInline_swigregister(SoWWWInline)

def SoWWWInline_getClassTypeId():
    return Coin_SWIG_Python.SoWWWInline_getClassTypeId()

def SoWWWInline_initClass():
    return Coin_SWIG_Python.SoWWWInline_initClass()

def SoWWWInline_setFetchURLCallBack(f, userdata):
    return Coin_SWIG_Python.SoWWWInline_setFetchURLCallBack(f, userdata)

def SoWWWInline_setBoundingBoxVisibility(b):
    return Coin_SWIG_Python.SoWWWInline_setBoundingBoxVisibility(b)

def SoWWWInline_getBoundingBoxVisibility():
    return Coin_SWIG_Python.SoWWWInline_getBoundingBoxVisibility()

def SoWWWInline_setBoundingBoxColor(c):
    return Coin_SWIG_Python.SoWWWInline_setBoundingBoxColor(c)

def SoWWWInline_getBoundingBoxColor():
    return Coin_SWIG_Python.SoWWWInline_getBoundingBoxColor()

def SoWWWInline_setReadAsSoFile(onoff):
    return Coin_SWIG_Python.SoWWWInline_setReadAsSoFile(onoff)

def SoWWWInline_getReadAsSoFile():
    return Coin_SWIG_Python.SoWWWInline_getReadAsSoFile()

class SoTextureScalePolicy(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureScalePolicy_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureScalePolicy_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureScalePolicy_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureScalePolicy_swiginit(self, Coin_SWIG_Python.new_SoTextureScalePolicy())
    USE_TEXTURE_QUALITY = Coin_SWIG_Python.SoTextureScalePolicy_USE_TEXTURE_QUALITY
    SCALE_DOWN = Coin_SWIG_Python.SoTextureScalePolicy_SCALE_DOWN
    SCALE_UP = Coin_SWIG_Python.SoTextureScalePolicy_SCALE_UP
    FRACTURE = Coin_SWIG_Python.SoTextureScalePolicy_FRACTURE
    policy = property(Coin_SWIG_Python.SoTextureScalePolicy_policy_get, Coin_SWIG_Python.SoTextureScalePolicy_policy_set)
    quality = property(Coin_SWIG_Python.SoTextureScalePolicy_quality_get, Coin_SWIG_Python.SoTextureScalePolicy_quality_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureScalePolicy_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureScalePolicy

# Register SoTextureScalePolicy in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureScalePolicy_swigregister(SoTextureScalePolicy)

def SoTextureScalePolicy_getClassTypeId():
    return Coin_SWIG_Python.SoTextureScalePolicy_getClassTypeId()

def SoTextureScalePolicy_initClass():
    return Coin_SWIG_Python.SoTextureScalePolicy_initClass()

class SoTextureUnit(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureUnit_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureUnit_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureUnit_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureUnit_swiginit(self, Coin_SWIG_Python.new_SoTextureUnit())
    BUMP_MAPPING = Coin_SWIG_Python.SoTextureUnit_BUMP_MAPPING
    IMAGE_MAPPING = Coin_SWIG_Python.SoTextureUnit_IMAGE_MAPPING
    unit = property(Coin_SWIG_Python.SoTextureUnit_unit_get, Coin_SWIG_Python.SoTextureUnit_unit_set)
    mappingMethod = property(Coin_SWIG_Python.SoTextureUnit_mappingMethod_get, Coin_SWIG_Python.SoTextureUnit_mappingMethod_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureUnit_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureUnit_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureUnit_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureUnit_pick(self, action)

    @staticmethod
    def getMaxTextureUnit():
        return Coin_SWIG_Python.SoTextureUnit_getMaxTextureUnit()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureUnit

# Register SoTextureUnit in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureUnit_swigregister(SoTextureUnit)

def SoTextureUnit_getClassTypeId():
    return Coin_SWIG_Python.SoTextureUnit_getClassTypeId()

def SoTextureUnit_initClass():
    return Coin_SWIG_Python.SoTextureUnit_initClass()

def SoTextureUnit_getMaxTextureUnit():
    return Coin_SWIG_Python.SoTextureUnit_getMaxTextureUnit()

class SoSceneTexture2(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoSceneTexture2_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoSceneTexture2_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoSceneTexture2_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoSceneTexture2_swiginit(self, Coin_SWIG_Python.new_SoSceneTexture2())
    MODULATE = Coin_SWIG_Python.SoSceneTexture2_MODULATE
    DECAL = Coin_SWIG_Python.SoSceneTexture2_DECAL
    BLEND = Coin_SWIG_Python.SoSceneTexture2_BLEND
    REPLACE = Coin_SWIG_Python.SoSceneTexture2_REPLACE
    REPEAT = Coin_SWIG_Python.SoSceneTexture2_REPEAT
    CLAMP = Coin_SWIG_Python.SoSceneTexture2_CLAMP
    CLAMP_TO_BORDER = Coin_SWIG_Python.SoSceneTexture2_CLAMP_TO_BORDER
    NONE = Coin_SWIG_Python.SoSceneTexture2_NONE
    ALPHA_BLEND = Coin_SWIG_Python.SoSceneTexture2_ALPHA_BLEND
    ALPHA_TEST = Coin_SWIG_Python.SoSceneTexture2_ALPHA_TEST
    DEPTH = Coin_SWIG_Python.SoSceneTexture2_DEPTH
    RGBA8 = Coin_SWIG_Python.SoSceneTexture2_RGBA8
    RGBA32F = Coin_SWIG_Python.SoSceneTexture2_RGBA32F
    RGB32F = Coin_SWIG_Python.SoSceneTexture2_RGB32F
    RGBA16F = Coin_SWIG_Python.SoSceneTexture2_RGBA16F
    RGB16F = Coin_SWIG_Python.SoSceneTexture2_RGB16F
    R3_G3_B2 = Coin_SWIG_Python.SoSceneTexture2_R3_G3_B2
    RGB = Coin_SWIG_Python.SoSceneTexture2_RGB
    RGB4 = Coin_SWIG_Python.SoSceneTexture2_RGB4
    RGB5 = Coin_SWIG_Python.SoSceneTexture2_RGB5
    RGB8 = Coin_SWIG_Python.SoSceneTexture2_RGB8
    RGB10 = Coin_SWIG_Python.SoSceneTexture2_RGB10
    RGB12 = Coin_SWIG_Python.SoSceneTexture2_RGB12
    RGB16 = Coin_SWIG_Python.SoSceneTexture2_RGB16
    RGBA = Coin_SWIG_Python.SoSceneTexture2_RGBA
    RGBA2 = Coin_SWIG_Python.SoSceneTexture2_RGBA2
    RGBA4 = Coin_SWIG_Python.SoSceneTexture2_RGBA4
    RGB5_A1 = Coin_SWIG_Python.SoSceneTexture2_RGB5_A1
    RGB10_A2 = Coin_SWIG_Python.SoSceneTexture2_RGB10_A2
    RGBA12 = Coin_SWIG_Python.SoSceneTexture2_RGBA12
    RGBA16 = Coin_SWIG_Python.SoSceneTexture2_RGBA16
    wrapS = property(Coin_SWIG_Python.SoSceneTexture2_wrapS_get, Coin_SWIG_Python.SoSceneTexture2_wrapS_set)
    wrapT = property(Coin_SWIG_Python.SoSceneTexture2_wrapT_get, Coin_SWIG_Python.SoSceneTexture2_wrapT_set)
    model = property(Coin_SWIG_Python.SoSceneTexture2_model_get, Coin_SWIG_Python.SoSceneTexture2_model_set)
    blendColor = property(Coin_SWIG_Python.SoSceneTexture2_blendColor_get, Coin_SWIG_Python.SoSceneTexture2_blendColor_set)
    backgroundColor = property(Coin_SWIG_Python.SoSceneTexture2_backgroundColor_get, Coin_SWIG_Python.SoSceneTexture2_backgroundColor_set)
    size = property(Coin_SWIG_Python.SoSceneTexture2_size_get, Coin_SWIG_Python.SoSceneTexture2_size_set)
    scene = property(Coin_SWIG_Python.SoSceneTexture2_scene_get, Coin_SWIG_Python.SoSceneTexture2_scene_set)
    transparencyFunction = property(Coin_SWIG_Python.SoSceneTexture2_transparencyFunction_get, Coin_SWIG_Python.SoSceneTexture2_transparencyFunction_set)

    def notify(self, list):
        return Coin_SWIG_Python.SoSceneTexture2_notify(self, list)

    def write(self, action):
        return Coin_SWIG_Python.SoSceneTexture2_write(self, action)

    def doAction(self, action):
        return Coin_SWIG_Python.SoSceneTexture2_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoSceneTexture2_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoSceneTexture2_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoSceneTexture2_rayPick(self, action)

    def setType(self, type):
        return Coin_SWIG_Python.SoSceneTexture2_setType(self, type)

    def setSceneTransparencyType(self, node):
        return Coin_SWIG_Python.SoSceneTexture2_setSceneTransparencyType(self, node)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSceneTexture2

# Register SoSceneTexture2 in Coin_SWIG_Python:
Coin_SWIG_Python.SoSceneTexture2_swigregister(SoSceneTexture2)

def SoSceneTexture2_getClassTypeId():
    return Coin_SWIG_Python.SoSceneTexture2_getClassTypeId()

def SoSceneTexture2_initClass():
    return Coin_SWIG_Python.SoSceneTexture2_initClass()

class SoTextureCoordinateCube(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateCube_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateCube_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateCube_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateCube_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateCube())

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCube_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCube_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCube_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCube_pick(self, action)

# Register SoTextureCoordinateCube in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateCube_swigregister(SoTextureCoordinateCube)

def SoTextureCoordinateCube_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateCube_getClassTypeId()

def SoTextureCoordinateCube_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateCube_initClass()

class SoTextureCoordinateSphere(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateSphere_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateSphere_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateSphere_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateSphere_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateSphere())

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateSphere_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateSphere_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateSphere_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateSphere_pick(self, action)

# Register SoTextureCoordinateSphere in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateSphere_swigregister(SoTextureCoordinateSphere)

def SoTextureCoordinateSphere_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateSphere_getClassTypeId()

def SoTextureCoordinateSphere_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateSphere_initClass()

class SoTextureCoordinateCylinder(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCoordinateCylinder_swiginit(self, Coin_SWIG_Python.new_SoTextureCoordinateCylinder())

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCoordinateCylinder_pick(self, action)

# Register SoTextureCoordinateCylinder in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCoordinateCylinder_swigregister(SoTextureCoordinateCylinder)

def SoTextureCoordinateCylinder_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCoordinateCylinder_getClassTypeId()

def SoTextureCoordinateCylinder_initClass():
    return Coin_SWIG_Python.SoTextureCoordinateCylinder_initClass()

class SoTextureCombine(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCombine_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCombine_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCombine_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCombine_swiginit(self, Coin_SWIG_Python.new_SoTextureCombine())
    PRIMARY_COLOR = Coin_SWIG_Python.SoTextureCombine_PRIMARY_COLOR
    TEXTURE = Coin_SWIG_Python.SoTextureCombine_TEXTURE
    CONSTANT = Coin_SWIG_Python.SoTextureCombine_CONSTANT
    PREVIOUS = Coin_SWIG_Python.SoTextureCombine_PREVIOUS
    SRC_COLOR = Coin_SWIG_Python.SoTextureCombine_SRC_COLOR
    ONE_MINUS_SRC_COLOR = Coin_SWIG_Python.SoTextureCombine_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = Coin_SWIG_Python.SoTextureCombine_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = Coin_SWIG_Python.SoTextureCombine_ONE_MINUS_SRC_ALPHA
    REPLACE = Coin_SWIG_Python.SoTextureCombine_REPLACE
    MODULATE = Coin_SWIG_Python.SoTextureCombine_MODULATE
    ADD = Coin_SWIG_Python.SoTextureCombine_ADD
    ADD_SIGNED = Coin_SWIG_Python.SoTextureCombine_ADD_SIGNED
    SUBTRACT = Coin_SWIG_Python.SoTextureCombine_SUBTRACT
    INTERPOLATE = Coin_SWIG_Python.SoTextureCombine_INTERPOLATE
    DOT3_RGB = Coin_SWIG_Python.SoTextureCombine_DOT3_RGB
    DOT3_RGBA = Coin_SWIG_Python.SoTextureCombine_DOT3_RGBA
    rgbSource = property(Coin_SWIG_Python.SoTextureCombine_rgbSource_get, Coin_SWIG_Python.SoTextureCombine_rgbSource_set)
    alphaSource = property(Coin_SWIG_Python.SoTextureCombine_alphaSource_get, Coin_SWIG_Python.SoTextureCombine_alphaSource_set)
    rgbOperand = property(Coin_SWIG_Python.SoTextureCombine_rgbOperand_get, Coin_SWIG_Python.SoTextureCombine_rgbOperand_set)
    alphaOperand = property(Coin_SWIG_Python.SoTextureCombine_alphaOperand_get, Coin_SWIG_Python.SoTextureCombine_alphaOperand_set)
    rgbOperation = property(Coin_SWIG_Python.SoTextureCombine_rgbOperation_get, Coin_SWIG_Python.SoTextureCombine_rgbOperation_set)
    alphaOperation = property(Coin_SWIG_Python.SoTextureCombine_alphaOperation_get, Coin_SWIG_Python.SoTextureCombine_alphaOperation_set)
    rgbScale = property(Coin_SWIG_Python.SoTextureCombine_rgbScale_get, Coin_SWIG_Python.SoTextureCombine_rgbScale_set)
    alphaScale = property(Coin_SWIG_Python.SoTextureCombine_alphaScale_get, Coin_SWIG_Python.SoTextureCombine_alphaScale_set)
    constantColor = property(Coin_SWIG_Python.SoTextureCombine_constantColor_get, Coin_SWIG_Python.SoTextureCombine_constantColor_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCombine_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCombine_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCombine_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoTextureCombine_pick(self, action)

# Register SoTextureCombine in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCombine_swigregister(SoTextureCombine)

def SoTextureCombine_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCombine_getClassTypeId()

def SoTextureCombine_initClass():
    return Coin_SWIG_Python.SoTextureCombine_initClass()

class SoTextureCubeMap(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoTextureCubeMap_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoTextureCubeMap_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoTextureCubeMap_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoTextureCubeMap_swiginit(self, Coin_SWIG_Python.new_SoTextureCubeMap())
    MODULATE = Coin_SWIG_Python.SoTextureCubeMap_MODULATE
    DECAL = Coin_SWIG_Python.SoTextureCubeMap_DECAL
    BLEND = Coin_SWIG_Python.SoTextureCubeMap_BLEND
    REPLACE = Coin_SWIG_Python.SoTextureCubeMap_REPLACE
    REPEAT = Coin_SWIG_Python.SoTextureCubeMap_REPEAT
    CLAMP = Coin_SWIG_Python.SoTextureCubeMap_CLAMP
    filenames = property(Coin_SWIG_Python.SoTextureCubeMap_filenames_get, Coin_SWIG_Python.SoTextureCubeMap_filenames_set)
    imagePosX = property(Coin_SWIG_Python.SoTextureCubeMap_imagePosX_get, Coin_SWIG_Python.SoTextureCubeMap_imagePosX_set)
    imageNegX = property(Coin_SWIG_Python.SoTextureCubeMap_imageNegX_get, Coin_SWIG_Python.SoTextureCubeMap_imageNegX_set)
    imagePosY = property(Coin_SWIG_Python.SoTextureCubeMap_imagePosY_get, Coin_SWIG_Python.SoTextureCubeMap_imagePosY_set)
    imageNegY = property(Coin_SWIG_Python.SoTextureCubeMap_imageNegY_get, Coin_SWIG_Python.SoTextureCubeMap_imageNegY_set)
    imagePosZ = property(Coin_SWIG_Python.SoTextureCubeMap_imagePosZ_get, Coin_SWIG_Python.SoTextureCubeMap_imagePosZ_set)
    imageNegZ = property(Coin_SWIG_Python.SoTextureCubeMap_imageNegZ_get, Coin_SWIG_Python.SoTextureCubeMap_imageNegZ_set)
    wrapS = property(Coin_SWIG_Python.SoTextureCubeMap_wrapS_get, Coin_SWIG_Python.SoTextureCubeMap_wrapS_set)
    wrapT = property(Coin_SWIG_Python.SoTextureCubeMap_wrapT_get, Coin_SWIG_Python.SoTextureCubeMap_wrapT_set)
    model = property(Coin_SWIG_Python.SoTextureCubeMap_model_get, Coin_SWIG_Python.SoTextureCubeMap_model_set)
    blendColor = property(Coin_SWIG_Python.SoTextureCubeMap_blendColor_get, Coin_SWIG_Python.SoTextureCubeMap_blendColor_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoTextureCubeMap_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoTextureCubeMap_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoTextureCubeMap_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoTextureCubeMap_rayPick(self, action)

    @staticmethod
    def readImage(fname, w, h, nc, bytes):
        return Coin_SWIG_Python.SoTextureCubeMap_readImage(fname, w, h, nc, bytes)

# Register SoTextureCubeMap in Coin_SWIG_Python:
Coin_SWIG_Python.SoTextureCubeMap_swigregister(SoTextureCubeMap)

def SoTextureCubeMap_getClassTypeId():
    return Coin_SWIG_Python.SoTextureCubeMap_getClassTypeId()

def SoTextureCubeMap_initClass():
    return Coin_SWIG_Python.SoTextureCubeMap_initClass()

def SoTextureCubeMap_readImage(fname, w, h, nc, bytes):
    return Coin_SWIG_Python.SoTextureCubeMap_readImage(fname, w, h, nc, bytes)

class SoShaderObject(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderObject_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderObject_getTypeId(self)
    ARB_PROGRAM = Coin_SWIG_Python.SoShaderObject_ARB_PROGRAM
    CG_PROGRAM = Coin_SWIG_Python.SoShaderObject_CG_PROGRAM
    GLSL_PROGRAM = Coin_SWIG_Python.SoShaderObject_GLSL_PROGRAM
    FILENAME = Coin_SWIG_Python.SoShaderObject_FILENAME
    isActive = property(Coin_SWIG_Python.SoShaderObject_isActive_get, Coin_SWIG_Python.SoShaderObject_isActive_set)
    sourceType = property(Coin_SWIG_Python.SoShaderObject_sourceType_get, Coin_SWIG_Python.SoShaderObject_sourceType_set)
    sourceProgram = property(Coin_SWIG_Python.SoShaderObject_sourceProgram_get, Coin_SWIG_Python.SoShaderObject_sourceProgram_set)
    parameter = property(Coin_SWIG_Python.SoShaderObject_parameter_get, Coin_SWIG_Python.SoShaderObject_parameter_set)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderObject_initClass()

    def GLRender(self, action):
        return Coin_SWIG_Python.SoShaderObject_GLRender(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoShaderObject_search(self, action)

    def updateParameters(self, state):
        return Coin_SWIG_Python.SoShaderObject_updateParameters(self, state)

    def getSourceType(self):
        return Coin_SWIG_Python.SoShaderObject_getSourceType(self)

    def getSourceProgram(self):
        return Coin_SWIG_Python.SoShaderObject_getSourceProgram(self)

# Register SoShaderObject in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderObject_swigregister(SoShaderObject)

def SoShaderObject_getClassTypeId():
    return Coin_SWIG_Python.SoShaderObject_getClassTypeId()

def SoShaderObject_initClass():
    return Coin_SWIG_Python.SoShaderObject_initClass()

class SoShaderParameter(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter_getTypeId(self)
    name = property(Coin_SWIG_Python.SoShaderParameter_name_get, Coin_SWIG_Python.SoShaderParameter_name_set)
    identifier = property(Coin_SWIG_Python.SoShaderParameter_identifier_get, Coin_SWIG_Python.SoShaderParameter_identifier_set)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter_initClass()

# Register SoShaderParameter in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter_swigregister(SoShaderParameter)

def SoShaderParameter_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter_getClassTypeId()

def SoShaderParameter_initClass():
    return Coin_SWIG_Python.SoShaderParameter_initClass()

class SoUniformShaderParameter(SoShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoUniformShaderParameter_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoUniformShaderParameter_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoUniformShaderParameter_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoUniformShaderParameter_updateParameter(self, shaderObject)

    def isRegularBehavior(self):
        return Coin_SWIG_Python.SoUniformShaderParameter_isRegularBehavior(self)

# Register SoUniformShaderParameter in Coin_SWIG_Python:
Coin_SWIG_Python.SoUniformShaderParameter_swigregister(SoUniformShaderParameter)

def SoUniformShaderParameter_getClassTypeId():
    return Coin_SWIG_Python.SoUniformShaderParameter_getClassTypeId()

def SoUniformShaderParameter_initClass():
    return Coin_SWIG_Python.SoUniformShaderParameter_initClass()

class SoShaderParameter1f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter1f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter1f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter1f_value_get, Coin_SWIG_Python.SoShaderParameter1f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter1f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter1f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter1f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter1f_updateParameter(self, shaderObject)

# Register SoShaderParameter1f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter1f_swigregister(SoShaderParameter1f)

def SoShaderParameter1f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter1f_getClassTypeId()

def SoShaderParameter1f_initClass():
    return Coin_SWIG_Python.SoShaderParameter1f_initClass()

class SoShaderParameter1i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter1i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter1i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter1i_value_get, Coin_SWIG_Python.SoShaderParameter1i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter1i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter1i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter1i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter1i_updateParameter(self, shaderObject)

# Register SoShaderParameter1i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter1i_swigregister(SoShaderParameter1i)

def SoShaderParameter1i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter1i_getClassTypeId()

def SoShaderParameter1i_initClass():
    return Coin_SWIG_Python.SoShaderParameter1i_initClass()

class SoShaderParameter2f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter2f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter2f_value_get, Coin_SWIG_Python.SoShaderParameter2f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter2f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter2f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter2f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter2f_updateParameter(self, shaderObject)

# Register SoShaderParameter2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter2f_swigregister(SoShaderParameter2f)

def SoShaderParameter2f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter2f_getClassTypeId()

def SoShaderParameter2f_initClass():
    return Coin_SWIG_Python.SoShaderParameter2f_initClass()

class SoShaderParameter2i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter2i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter2i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter2i_value_get, Coin_SWIG_Python.SoShaderParameter2i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter2i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter2i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter2i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter2i_updateParameter(self, shaderObject)

# Register SoShaderParameter2i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter2i_swigregister(SoShaderParameter2i)

def SoShaderParameter2i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter2i_getClassTypeId()

def SoShaderParameter2i_initClass():
    return Coin_SWIG_Python.SoShaderParameter2i_initClass()

class SoShaderParameter3f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter3f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter3f_value_get, Coin_SWIG_Python.SoShaderParameter3f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter3f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter3f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter3f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter3f_updateParameter(self, shaderObject)

# Register SoShaderParameter3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter3f_swigregister(SoShaderParameter3f)

def SoShaderParameter3f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter3f_getClassTypeId()

def SoShaderParameter3f_initClass():
    return Coin_SWIG_Python.SoShaderParameter3f_initClass()

class SoShaderParameter3i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter3i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter3i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter3i_value_get, Coin_SWIG_Python.SoShaderParameter3i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter3i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter3i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter3i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter3i_updateParameter(self, shaderObject)

# Register SoShaderParameter3i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter3i_swigregister(SoShaderParameter3i)

def SoShaderParameter3i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter3i_getClassTypeId()

def SoShaderParameter3i_initClass():
    return Coin_SWIG_Python.SoShaderParameter3i_initClass()

class SoShaderParameter4f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter4f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter4f_value_get, Coin_SWIG_Python.SoShaderParameter4f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter4f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter4f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter4f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter4f_updateParameter(self, shaderObject)

# Register SoShaderParameter4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter4f_swigregister(SoShaderParameter4f)

def SoShaderParameter4f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter4f_getClassTypeId()

def SoShaderParameter4f_initClass():
    return Coin_SWIG_Python.SoShaderParameter4f_initClass()

class SoShaderParameter4i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameter4i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameter4i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameter4i_value_get, Coin_SWIG_Python.SoShaderParameter4i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameter4i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameter4i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameter4i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameter4i_updateParameter(self, shaderObject)

# Register SoShaderParameter4i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameter4i_swigregister(SoShaderParameter4i)

def SoShaderParameter4i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameter4i_getClassTypeId()

def SoShaderParameter4i_initClass():
    return Coin_SWIG_Python.SoShaderParameter4i_initClass()

class SoShaderParameterArray1f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray1f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray1f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray1f_value_get, Coin_SWIG_Python.SoShaderParameterArray1f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray1f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray1f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray1f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray1f_updateParameter(self, shaderObject)

# Register SoShaderParameterArray1f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray1f_swigregister(SoShaderParameterArray1f)

def SoShaderParameterArray1f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray1f_getClassTypeId()

def SoShaderParameterArray1f_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray1f_initClass()

class SoShaderParameterArray1i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray1i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray1i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray1i_value_get, Coin_SWIG_Python.SoShaderParameterArray1i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray1i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray1i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray1i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray1i_updateParameter(self, shaderObject)

# Register SoShaderParameterArray1i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray1i_swigregister(SoShaderParameterArray1i)

def SoShaderParameterArray1i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray1i_getClassTypeId()

def SoShaderParameterArray1i_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray1i_initClass()

class SoShaderParameterArray2f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray2f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray2f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray2f_value_get, Coin_SWIG_Python.SoShaderParameterArray2f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray2f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray2f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray2f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray2f_updateParameter(self, shaderObject)

# Register SoShaderParameterArray2f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray2f_swigregister(SoShaderParameterArray2f)

def SoShaderParameterArray2f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray2f_getClassTypeId()

def SoShaderParameterArray2f_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray2f_initClass()

class SoShaderParameterArray2i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray2i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray2i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray2i_value_get, Coin_SWIG_Python.SoShaderParameterArray2i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray2i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray2i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray2i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray2i_updateParameter(self, shaderObject)

# Register SoShaderParameterArray2i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray2i_swigregister(SoShaderParameterArray2i)

def SoShaderParameterArray2i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray2i_getClassTypeId()

def SoShaderParameterArray2i_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray2i_initClass()

class SoShaderParameterArray3f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray3f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray3f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray3f_value_get, Coin_SWIG_Python.SoShaderParameterArray3f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray3f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray3f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray3f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray3f_updateParameter(self, shaderObject)

# Register SoShaderParameterArray3f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray3f_swigregister(SoShaderParameterArray3f)

def SoShaderParameterArray3f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray3f_getClassTypeId()

def SoShaderParameterArray3f_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray3f_initClass()

class SoShaderParameterArray3i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray3i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray3i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray3i_value_get, Coin_SWIG_Python.SoShaderParameterArray3i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray3i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray3i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray3i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray3i_updateParameter(self, shaderObject)

# Register SoShaderParameterArray3i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray3i_swigregister(SoShaderParameterArray3i)

def SoShaderParameterArray3i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray3i_getClassTypeId()

def SoShaderParameterArray3i_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray3i_initClass()

class SoShaderParameterArray4f(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray4f_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray4f_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray4f_value_get, Coin_SWIG_Python.SoShaderParameterArray4f_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray4f_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray4f())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray4f_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray4f_updateParameter(self, shaderObject)

# Register SoShaderParameterArray4f in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray4f_swigregister(SoShaderParameterArray4f)

def SoShaderParameterArray4f_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray4f_getClassTypeId()

def SoShaderParameterArray4f_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray4f_initClass()

class SoShaderParameterArray4i(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterArray4i_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterArray4i_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterArray4i_value_get, Coin_SWIG_Python.SoShaderParameterArray4i_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterArray4i_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterArray4i())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterArray4i_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterArray4i_updateParameter(self, shaderObject)

# Register SoShaderParameterArray4i in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterArray4i_swigregister(SoShaderParameterArray4i)

def SoShaderParameterArray4i_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterArray4i_getClassTypeId()

def SoShaderParameterArray4i_initClass():
    return Coin_SWIG_Python.SoShaderParameterArray4i_initClass()

class SoShaderParameterMatrix(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterMatrix_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterMatrix_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterMatrix_value_get, Coin_SWIG_Python.SoShaderParameterMatrix_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterMatrix_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterMatrix())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterMatrix_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterMatrix_updateParameter(self, shaderObject)

# Register SoShaderParameterMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterMatrix_swigregister(SoShaderParameterMatrix)

def SoShaderParameterMatrix_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterMatrix_getClassTypeId()

def SoShaderParameterMatrix_initClass():
    return Coin_SWIG_Python.SoShaderParameterMatrix_initClass()

class SoShaderParameterMatrixArray(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderParameterMatrixArray_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderParameterMatrixArray_getTypeId(self)
    value = property(Coin_SWIG_Python.SoShaderParameterMatrixArray_value_get, Coin_SWIG_Python.SoShaderParameterMatrixArray_value_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderParameterMatrixArray_swiginit(self, Coin_SWIG_Python.new_SoShaderParameterMatrixArray())

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderParameterMatrixArray_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderParameterMatrixArray_updateParameter(self, shaderObject)

# Register SoShaderParameterMatrixArray in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderParameterMatrixArray_swigregister(SoShaderParameterMatrixArray)

def SoShaderParameterMatrixArray_getClassTypeId():
    return Coin_SWIG_Python.SoShaderParameterMatrixArray_getClassTypeId()

def SoShaderParameterMatrixArray_initClass():
    return Coin_SWIG_Python.SoShaderParameterMatrixArray_initClass()

class SoShaderStateMatrixParameter(SoUniformShaderParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoShaderStateMatrixParameter_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoShaderStateMatrixParameter_getTypeId(self)
    MODELVIEW = Coin_SWIG_Python.SoShaderStateMatrixParameter_MODELVIEW
    PROJECTION = Coin_SWIG_Python.SoShaderStateMatrixParameter_PROJECTION
    TEXTURE = Coin_SWIG_Python.SoShaderStateMatrixParameter_TEXTURE
    MODELVIEW_PROJECTION = Coin_SWIG_Python.SoShaderStateMatrixParameter_MODELVIEW_PROJECTION
    IDENTITY = Coin_SWIG_Python.SoShaderStateMatrixParameter_IDENTITY
    TRANSPOSE = Coin_SWIG_Python.SoShaderStateMatrixParameter_TRANSPOSE
    INVERSE = Coin_SWIG_Python.SoShaderStateMatrixParameter_INVERSE
    INVERSE_TRANSPOSE = Coin_SWIG_Python.SoShaderStateMatrixParameter_INVERSE_TRANSPOSE
    matrixType = property(Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixType_get, Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixType_set)
    matrixTransform = property(Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixTransform_get, Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixTransform_set)

    def __init__(self):
        Coin_SWIG_Python.SoShaderStateMatrixParameter_swiginit(self, Coin_SWIG_Python.new_SoShaderStateMatrixParameter())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShaderStateMatrixParameter

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoShaderStateMatrixParameter_initClass()

    def updateParameter(self, shaderObject):
        return Coin_SWIG_Python.SoShaderStateMatrixParameter_updateParameter(self, shaderObject)

# Register SoShaderStateMatrixParameter in Coin_SWIG_Python:
Coin_SWIG_Python.SoShaderStateMatrixParameter_swigregister(SoShaderStateMatrixParameter)

def SoShaderStateMatrixParameter_getClassTypeId():
    return Coin_SWIG_Python.SoShaderStateMatrixParameter_getClassTypeId()

def SoShaderStateMatrixParameter_initClass():
    return Coin_SWIG_Python.SoShaderStateMatrixParameter_initClass()

class SoVertexShader(SoShaderObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVertexShader_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVertexShader_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVertexShader_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVertexShader_swiginit(self, Coin_SWIG_Python.new_SoVertexShader())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVertexShader

    @staticmethod
    def isSupported(sourceType):
        return Coin_SWIG_Python.SoVertexShader_isSupported(sourceType)

# Register SoVertexShader in Coin_SWIG_Python:
Coin_SWIG_Python.SoVertexShader_swigregister(SoVertexShader)

def SoVertexShader_getClassTypeId():
    return Coin_SWIG_Python.SoVertexShader_getClassTypeId()

def SoVertexShader_initClass():
    return Coin_SWIG_Python.SoVertexShader_initClass()

def SoVertexShader_isSupported(sourceType):
    return Coin_SWIG_Python.SoVertexShader_isSupported(sourceType)

class SoFragmentShader(SoShaderObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFragmentShader_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFragmentShader_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFragmentShader_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoFragmentShader_swiginit(self, Coin_SWIG_Python.new_SoFragmentShader())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFragmentShader

    @staticmethod
    def isSupported(sourceType):
        return Coin_SWIG_Python.SoFragmentShader_isSupported(sourceType)

# Register SoFragmentShader in Coin_SWIG_Python:
Coin_SWIG_Python.SoFragmentShader_swigregister(SoFragmentShader)

def SoFragmentShader_getClassTypeId():
    return Coin_SWIG_Python.SoFragmentShader_getClassTypeId()

def SoFragmentShader_initClass():
    return Coin_SWIG_Python.SoFragmentShader_initClass()

def SoFragmentShader_isSupported(sourceType):
    return Coin_SWIG_Python.SoFragmentShader_isSupported(sourceType)

class SoFrustumCamera(SoCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoFrustumCamera_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoFrustumCamera_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoFrustumCamera_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoFrustumCamera_swiginit(self, Coin_SWIG_Python.new_SoFrustumCamera())
    left = property(Coin_SWIG_Python.SoFrustumCamera_left_get, Coin_SWIG_Python.SoFrustumCamera_left_set)
    right = property(Coin_SWIG_Python.SoFrustumCamera_right_get, Coin_SWIG_Python.SoFrustumCamera_right_set)
    top = property(Coin_SWIG_Python.SoFrustumCamera_top_get, Coin_SWIG_Python.SoFrustumCamera_top_set)
    bottom = property(Coin_SWIG_Python.SoFrustumCamera_bottom_get, Coin_SWIG_Python.SoFrustumCamera_bottom_set)

    def scaleHeight(self, scalefactor):
        return Coin_SWIG_Python.SoFrustumCamera_scaleHeight(self, scalefactor)

    def getViewVolume(self, useaspectratio=0.0):
        return Coin_SWIG_Python.SoFrustumCamera_getViewVolume(self, useaspectratio)

# Register SoFrustumCamera in Coin_SWIG_Python:
Coin_SWIG_Python.SoFrustumCamera_swigregister(SoFrustumCamera)

def SoFrustumCamera_getClassTypeId():
    return Coin_SWIG_Python.SoFrustumCamera_getClassTypeId()

def SoFrustumCamera_initClass():
    return Coin_SWIG_Python.SoFrustumCamera_initClass()

class SoGeometryShader(SoShaderObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoGeometryShader_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoGeometryShader_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoGeometryShader_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoGeometryShader_swiginit(self, Coin_SWIG_Python.new_SoGeometryShader())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGeometryShader
    POINTS_IN = Coin_SWIG_Python.SoGeometryShader_POINTS_IN
    LINES_IN = Coin_SWIG_Python.SoGeometryShader_LINES_IN
    TRIANGLES_IN = Coin_SWIG_Python.SoGeometryShader_TRIANGLES_IN
    POINTS_OUT = Coin_SWIG_Python.SoGeometryShader_POINTS_OUT
    LINE_STRIP_OUT = Coin_SWIG_Python.SoGeometryShader_LINE_STRIP_OUT
    TRIANGLE_STRIP_OUT = Coin_SWIG_Python.SoGeometryShader_TRIANGLE_STRIP_OUT
    inputType = property(Coin_SWIG_Python.SoGeometryShader_inputType_get, Coin_SWIG_Python.SoGeometryShader_inputType_set)
    outputType = property(Coin_SWIG_Python.SoGeometryShader_outputType_get, Coin_SWIG_Python.SoGeometryShader_outputType_set)
    maxEmit = property(Coin_SWIG_Python.SoGeometryShader_maxEmit_get, Coin_SWIG_Python.SoGeometryShader_maxEmit_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoGeometryShader_GLRender(self, action)

    @staticmethod
    def isSupported(sourceType):
        return Coin_SWIG_Python.SoGeometryShader_isSupported(sourceType)

# Register SoGeometryShader in Coin_SWIG_Python:
Coin_SWIG_Python.SoGeometryShader_swigregister(SoGeometryShader)

def SoGeometryShader_getClassTypeId():
    return Coin_SWIG_Python.SoGeometryShader_getClassTypeId()

def SoGeometryShader_initClass():
    return Coin_SWIG_Python.SoGeometryShader_initClass()

def SoGeometryShader_isSupported(sourceType):
    return Coin_SWIG_Python.SoGeometryShader_isSupported(sourceType)

class SbLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbLine_swiginit(self, Coin_SWIG_Python.new_SbLine(*args))

    def setValue(self, origin, point):
        return Coin_SWIG_Python.SbLine_setValue(self, origin, point)

    def getClosestPoints(self, line2, ptOnThis, ptOnLine2):
        return Coin_SWIG_Python.SbLine_getClosestPoints(self, line2, ptOnThis, ptOnLine2)

    def getClosestPoint(self, point):
        return Coin_SWIG_Python.SbLine_getClosestPoint(self, point)

    def getPosition(self):
        return Coin_SWIG_Python.SbLine_getPosition(self)

    def getDirection(self):
        return Coin_SWIG_Python.SbLine_getDirection(self)

    def output(self, file):
        return Coin_SWIG_Python.SbLine_output(self, file)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbLine

# Register SbLine in Coin_SWIG_Python:
Coin_SWIG_Python.SbLine_swigregister(SbLine)

class SbProjector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def project(self, point):
        return Coin_SWIG_Python.SbProjector_project(self, point)

    def setViewVolume(self, vol):
        return Coin_SWIG_Python.SbProjector_setViewVolume(self, vol)

    def getViewVolume(self):
        return Coin_SWIG_Python.SbProjector_getViewVolume(self)

    def setWorkingSpace(self, space):
        return Coin_SWIG_Python.SbProjector_setWorkingSpace(self, space)

    def getWorkingSpace(self):
        return Coin_SWIG_Python.SbProjector_getWorkingSpace(self)

    def copy(self):
        return Coin_SWIG_Python.SbProjector_copy(self)

# Register SbProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbProjector_swigregister(SbProjector)

class SbCylinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbCylinder_swiginit(self, Coin_SWIG_Python.new_SbCylinder(*args))

    def setValue(self, a, r):
        return Coin_SWIG_Python.SbCylinder_setValue(self, a, r)

    def setAxis(self, a):
        return Coin_SWIG_Python.SbCylinder_setAxis(self, a)

    def setRadius(self, r):
        return Coin_SWIG_Python.SbCylinder_setRadius(self, r)

    def getAxis(self):
        return Coin_SWIG_Python.SbCylinder_getAxis(self)

    def getRadius(self):
        return Coin_SWIG_Python.SbCylinder_getRadius(self)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbCylinder_intersect(self, *args)

    def output(self, file):
        return Coin_SWIG_Python.SbCylinder_output(self, file)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinder

# Register SbCylinder in Coin_SWIG_Python:
Coin_SWIG_Python.SbCylinder_swigregister(SbCylinder)

class SbCylinderProjector(SbProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def project(self, point):
        return Coin_SWIG_Python.SbCylinderProjector_project(self, point)

    def projectAndGetRotation(self, point, rot):
        return Coin_SWIG_Python.SbCylinderProjector_projectAndGetRotation(self, point, rot)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbCylinderProjector_getRotation(self, point1, point2)

    def setCylinder(self, cyl):
        return Coin_SWIG_Python.SbCylinderProjector_setCylinder(self, cyl)

    def getCylinder(self):
        return Coin_SWIG_Python.SbCylinderProjector_getCylinder(self)

    def setOrientToEye(self, orienttoeye):
        return Coin_SWIG_Python.SbCylinderProjector_setOrientToEye(self, orienttoeye)

    def isOrientToEye(self):
        return Coin_SWIG_Python.SbCylinderProjector_isOrientToEye(self)

    def setFront(self, infront):
        return Coin_SWIG_Python.SbCylinderProjector_setFront(self, infront)

    def isFront(self):
        return Coin_SWIG_Python.SbCylinderProjector_isFront(self)

    def isPointInFront(self, point):
        return Coin_SWIG_Python.SbCylinderProjector_isPointInFront(self, point)

    def setWorkingSpace(self, space):
        return Coin_SWIG_Python.SbCylinderProjector_setWorkingSpace(self, space)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderProjector

# Register SbCylinderProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbCylinderProjector_swigregister(SbCylinderProjector)

class SbCylinderSectionProjector(SbCylinderProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbCylinderSectionProjector_swiginit(self, Coin_SWIG_Python.new_SbCylinderSectionProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbCylinderSectionProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbCylinderSectionProjector_project(self, point)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbCylinderSectionProjector_getRotation(self, point1, point2)

    def setTolerance(self, edgetol):
        return Coin_SWIG_Python.SbCylinderSectionProjector_setTolerance(self, edgetol)

    def getTolerance(self):
        return Coin_SWIG_Python.SbCylinderSectionProjector_getTolerance(self)

    def isWithinTolerance(self, point):
        return Coin_SWIG_Python.SbCylinderSectionProjector_isWithinTolerance(self, point)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderSectionProjector

# Register SbCylinderSectionProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbCylinderSectionProjector_swigregister(SbCylinderSectionProjector)

class SbCylinderPlaneProjector(SbCylinderSectionProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbCylinderPlaneProjector_swiginit(self, Coin_SWIG_Python.new_SbCylinderPlaneProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbCylinderPlaneProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbCylinderPlaneProjector_project(self, point)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbCylinderPlaneProjector_getRotation(self, point1, point2)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderPlaneProjector

# Register SbCylinderPlaneProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbCylinderPlaneProjector_swigregister(SbCylinderPlaneProjector)

class SbCylinderSheetProjector(SbCylinderProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbCylinderSheetProjector_swiginit(self, Coin_SWIG_Python.new_SbCylinderSheetProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbCylinderSheetProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbCylinderSheetProjector_project(self, point)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbCylinderSheetProjector_getRotation(self, point1, point2)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderSheetProjector

# Register SbCylinderSheetProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbCylinderSheetProjector_swigregister(SbCylinderSheetProjector)

class SbLineProjector(SbProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SbLineProjector_swiginit(self, Coin_SWIG_Python.new_SbLineProjector())

    def copy(self):
        return Coin_SWIG_Python.SbLineProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbLineProjector_project(self, point)

    def setLine(self, line):
        return Coin_SWIG_Python.SbLineProjector_setLine(self, line)

    def getLine(self):
        return Coin_SWIG_Python.SbLineProjector_getLine(self)

    def getVector(self, *args):
        return Coin_SWIG_Python.SbLineProjector_getVector(self, *args)

    def setStartPosition(self, *args):
        return Coin_SWIG_Python.SbLineProjector_setStartPosition(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbLineProjector

# Register SbLineProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbLineProjector_swigregister(SbLineProjector)

class SbPlaneProjector(SbProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbPlaneProjector_swiginit(self, Coin_SWIG_Python.new_SbPlaneProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbPlaneProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbPlaneProjector_project(self, point)

    def setPlane(self, plane):
        return Coin_SWIG_Python.SbPlaneProjector_setPlane(self, plane)

    def getPlane(self):
        return Coin_SWIG_Python.SbPlaneProjector_getPlane(self)

    def setOrientToEye(self, orienttoeye):
        return Coin_SWIG_Python.SbPlaneProjector_setOrientToEye(self, orienttoeye)

    def isOrientToEye(self):
        return Coin_SWIG_Python.SbPlaneProjector_isOrientToEye(self)

    def getVector(self, *args):
        return Coin_SWIG_Python.SbPlaneProjector_getVector(self, *args)

    def setStartPosition(self, *args):
        return Coin_SWIG_Python.SbPlaneProjector_setStartPosition(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbPlaneProjector

# Register SbPlaneProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbPlaneProjector_swigregister(SbPlaneProjector)

class SbSphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbSphere_swiginit(self, Coin_SWIG_Python.new_SbSphere(*args))

    def setValue(self, center, radius):
        return Coin_SWIG_Python.SbSphere_setValue(self, center, radius)

    def setCenter(self, center):
        return Coin_SWIG_Python.SbSphere_setCenter(self, center)

    def setRadius(self, radius):
        return Coin_SWIG_Python.SbSphere_setRadius(self, radius)

    def getCenter(self):
        return Coin_SWIG_Python.SbSphere_getCenter(self)

    def getRadius(self):
        return Coin_SWIG_Python.SbSphere_getRadius(self)

    def circumscribe(self, box):
        return Coin_SWIG_Python.SbSphere_circumscribe(self, box)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbSphere_intersect(self, *args)

    def pointInside(self, p):
        return Coin_SWIG_Python.SbSphere_pointInside(self, p)

    def output(self, file):
        return Coin_SWIG_Python.SbSphere_output(self, file)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphere

# Register SbSphere in Coin_SWIG_Python:
Coin_SWIG_Python.SbSphere_swigregister(SbSphere)

class SbSphereProjector(SbProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def projectAndGetRotation(self, point, rot):
        return Coin_SWIG_Python.SbSphereProjector_projectAndGetRotation(self, point, rot)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbSphereProjector_getRotation(self, point1, point2)

    def setSphere(self, sph):
        return Coin_SWIG_Python.SbSphereProjector_setSphere(self, sph)

    def getSphere(self):
        return Coin_SWIG_Python.SbSphereProjector_getSphere(self)

    def setOrientToEye(self, orienttoeye):
        return Coin_SWIG_Python.SbSphereProjector_setOrientToEye(self, orienttoeye)

    def isOrientToEye(self):
        return Coin_SWIG_Python.SbSphereProjector_isOrientToEye(self)

    def setFront(self, infront):
        return Coin_SWIG_Python.SbSphereProjector_setFront(self, infront)

    def isFront(self):
        return Coin_SWIG_Python.SbSphereProjector_isFront(self)

    def isPointInFront(self, point):
        return Coin_SWIG_Python.SbSphereProjector_isPointInFront(self, point)

    def setWorkingSpace(self, space):
        return Coin_SWIG_Python.SbSphereProjector_setWorkingSpace(self, space)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphereProjector

# Register SbSphereProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbSphereProjector_swigregister(SbSphereProjector)

class SbSphereSheetProjector(SbSphereProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbSphereSheetProjector_swiginit(self, Coin_SWIG_Python.new_SbSphereSheetProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbSphereSheetProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbSphereSheetProjector_project(self, point)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbSphereSheetProjector_getRotation(self, point1, point2)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphereSheetProjector

# Register SbSphereSheetProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbSphereSheetProjector_swigregister(SbSphereSheetProjector)

class SbSphereSectionProjector(SbSphereProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbSphereSectionProjector_swiginit(self, Coin_SWIG_Python.new_SbSphereSectionProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbSphereSectionProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbSphereSectionProjector_project(self, point)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbSphereSectionProjector_getRotation(self, point1, point2)

    def setTolerance(self, edgetol):
        return Coin_SWIG_Python.SbSphereSectionProjector_setTolerance(self, edgetol)

    def getTolerance(self):
        return Coin_SWIG_Python.SbSphereSectionProjector_getTolerance(self)

    def setRadialFactor(self, rad=0.0):
        return Coin_SWIG_Python.SbSphereSectionProjector_setRadialFactor(self, rad)

    def getRadialFactor(self):
        return Coin_SWIG_Python.SbSphereSectionProjector_getRadialFactor(self)

    def isWithinTolerance(self, point):
        return Coin_SWIG_Python.SbSphereSectionProjector_isWithinTolerance(self, point)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphereSectionProjector

# Register SbSphereSectionProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbSphereSectionProjector_swigregister(SbSphereSectionProjector)

class SbSpherePlaneProjector(SbSphereSectionProjector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbSpherePlaneProjector_swiginit(self, Coin_SWIG_Python.new_SbSpherePlaneProjector(*args))

    def copy(self):
        return Coin_SWIG_Python.SbSpherePlaneProjector_copy(self)

    def project(self, point):
        return Coin_SWIG_Python.SbSpherePlaneProjector_project(self, point)

    def getRotation(self, point1, point2):
        return Coin_SWIG_Python.SbSpherePlaneProjector_getRotation(self, point1, point2)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSpherePlaneProjector

# Register SbSpherePlaneProjector in Coin_SWIG_Python:
Coin_SWIG_Python.SbSpherePlaneProjector_swigregister(SbSpherePlaneProjector)

class SbDPMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbDPMatrix_swiginit(self, Coin_SWIG_Python.new_SbDPMatrix(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPMatrix

    def makeIdentity(self):
        return Coin_SWIG_Python.SbDPMatrix_makeIdentity(self)

    def setRotate(self, q):
        return Coin_SWIG_Python.SbDPMatrix_setRotate(self, q)

    def inverse(self):
        return Coin_SWIG_Python.SbDPMatrix_inverse(self)

    def det3(self, *args):
        return Coin_SWIG_Python.SbDPMatrix_det3(self, *args)

    def det4(self):
        return Coin_SWIG_Python.SbDPMatrix_det4(self)

    def equals(self, m, tolerance):
        return Coin_SWIG_Python.SbDPMatrix_equals(self, m, tolerance)

    def __imul__(self, m):
        return Coin_SWIG_Python.SbDPMatrix___imul__(self, m)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbDPMatrix_getValue(self, *args)

    @staticmethod
    def identity():
        return Coin_SWIG_Python.SbDPMatrix_identity()

    def setScale(self, *args):
        return Coin_SWIG_Python.SbDPMatrix_setScale(self, *args)

    def setTranslate(self, t):
        return Coin_SWIG_Python.SbDPMatrix_setTranslate(self, t)

    def setTransform(self, *args):
        return Coin_SWIG_Python.SbDPMatrix_setTransform(self, *args)

    def getTransform(self, *args):
        return Coin_SWIG_Python.SbDPMatrix_getTransform(self, *args)

    def factor(self, r, s, u, t, proj):
        return Coin_SWIG_Python.SbDPMatrix_factor(self, r, s, u, t, proj)

    def LUDecomposition(self, index, d):
        return Coin_SWIG_Python.SbDPMatrix_LUDecomposition(self, index, d)

    def LUBackSubstitution(self, index, b):
        return Coin_SWIG_Python.SbDPMatrix_LUBackSubstitution(self, index, b)

    def transpose(self):
        return Coin_SWIG_Python.SbDPMatrix_transpose(self)

    def multRight(self, m):
        return Coin_SWIG_Python.SbDPMatrix_multRight(self, m)

    def multLeft(self, m):
        return Coin_SWIG_Python.SbDPMatrix_multLeft(self, m)

    def multMatrixVec(self, src, dst):
        return Coin_SWIG_Python.SbDPMatrix_multMatrixVec(self, src, dst)

    def multDirMatrix(self, src, dst):
        return Coin_SWIG_Python.SbDPMatrix_multDirMatrix(self, src, dst)

    def multLineMatrix(self, src, dst):
        return Coin_SWIG_Python.SbDPMatrix_multLineMatrix(self, src, dst)

    def multVecMatrix(self, *args):
        return Coin_SWIG_Python.SbDPMatrix_multVecMatrix(self, *args)

    def output(self, fp):
        return Coin_SWIG_Python.SbDPMatrix_output(self, fp)

    def __mul__(self, *args):
        return Coin_SWIG_Python.SbDPMatrix___mul__(self, *args)

    def __rmul__(self, u):
        return Coin_SWIG_Python.SbDPMatrix___rmul__(self, u)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbDPMatrix___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbDPMatrix___ne__(self, u)

# Register SbDPMatrix in Coin_SWIG_Python:
Coin_SWIG_Python.SbDPMatrix_swigregister(SbDPMatrix)

def SbDPMatrix_identity():
    return Coin_SWIG_Python.SbDPMatrix_identity()

class SbXfBox3d(SbBox3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbXfBox3d_swiginit(self, Coin_SWIG_Python.new_SbXfBox3d(*args))

    def setTransform(self, matrix):
        return Coin_SWIG_Python.SbXfBox3d_setTransform(self, matrix)

    def getTransform(self):
        return Coin_SWIG_Python.SbXfBox3d_getTransform(self)

    def getInverse(self):
        return Coin_SWIG_Python.SbXfBox3d_getInverse(self)

    def getCenter(self):
        return Coin_SWIG_Python.SbXfBox3d_getCenter(self)

    def extendBy(self, *args):
        return Coin_SWIG_Python.SbXfBox3d_extendBy(self, *args)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbXfBox3d_intersect(self, *args)

    def project(self):
        return Coin_SWIG_Python.SbXfBox3d_project(self)

    def getSpan(self, direction, dMin, dMax):
        return Coin_SWIG_Python.SbXfBox3d_getSpan(self, direction, dMin, dMax)

    def transform(self, matrix):
        return Coin_SWIG_Python.SbXfBox3d_transform(self, matrix)

    def getVolume(self):
        return Coin_SWIG_Python.SbXfBox3d_getVolume(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbXfBox3d

# Register SbXfBox3d in Coin_SWIG_Python:
Coin_SWIG_Python.SbXfBox3d_swigregister(SbXfBox3d)

class SbClip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback=None, userdata=None):
        Coin_SWIG_Python.SbClip_swiginit(self, Coin_SWIG_Python.new_SbClip(callback, userdata))

    def addVertex(self, v, vdata=None):
        return Coin_SWIG_Python.SbClip_addVertex(self, v, vdata)

    def reset(self):
        return Coin_SWIG_Python.SbClip_reset(self)

    def clip(self, plane):
        return Coin_SWIG_Python.SbClip_clip(self, plane)

    def getNumVertices(self):
        return Coin_SWIG_Python.SbClip_getNumVertices(self)

    def getVertex(self, idx, v, vdata=None):
        return Coin_SWIG_Python.SbClip_getVertex(self, idx, v, vdata)

    def getVertexData(self, idx):
        return Coin_SWIG_Python.SbClip_getVertexData(self, idx)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbClip

# Register SbClip in Coin_SWIG_Python:
Coin_SWIG_Python.SbClip_swigregister(SbClip)

class SbDPRotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbDPRotation_swiginit(self, Coin_SWIG_Python.new_SbDPRotation(*args))

    def getValue(self):
        return Coin_SWIG_Python.SbDPRotation_getValue(self)

    def getAxisAngle(self):
        return Coin_SWIG_Python.SbDPRotation_getAxisAngle(self)

    def getMatrix(self):
        return Coin_SWIG_Python.SbDPRotation_getMatrix(self)

    def invert(self):
        return Coin_SWIG_Python.SbDPRotation_invert(self)

    def inverse(self):
        return Coin_SWIG_Python.SbDPRotation_inverse(self)

    def setValue(self, *args):
        return Coin_SWIG_Python.SbDPRotation_setValue(self, *args)

    def __imul__(self, *args):
        return Coin_SWIG_Python.SbDPRotation___imul__(self, *args)

    def equals(self, r, tolerance):
        return Coin_SWIG_Python.SbDPRotation_equals(self, r, tolerance)

    def multVec(self, src, dst):
        return Coin_SWIG_Python.SbDPRotation_multVec(self, src, dst)

    def scaleAngle(self, scaleFactor):
        return Coin_SWIG_Python.SbDPRotation_scaleAngle(self, scaleFactor)

    @staticmethod
    def slerp(rot0, rot1, t):
        return Coin_SWIG_Python.SbDPRotation_slerp(rot0, rot1, t)

    @staticmethod
    def identity():
        return Coin_SWIG_Python.SbDPRotation_identity()

    def output(self, fp):
        return Coin_SWIG_Python.SbDPRotation_output(self, fp)

    def __mul__(self, *args):
        return Coin_SWIG_Python.SbDPRotation___mul__(self, *args)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbDPRotation___eq__(self, u)

    def __nq__(self, u):
        return Coin_SWIG_Python.SbDPRotation___nq__(self, u)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPRotation

# Register SbDPRotation in Coin_SWIG_Python:
Coin_SWIG_Python.SbDPRotation_swigregister(SbDPRotation)

def SbDPRotation_slerp(rot0, rot1, t):
    return Coin_SWIG_Python.SbDPRotation_slerp(rot0, rot1, t)

def SbDPRotation_identity():
    return Coin_SWIG_Python.SbDPRotation_identity()

class SbDPLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbDPLine_swiginit(self, Coin_SWIG_Python.new_SbDPLine(*args))

    def setValue(self, p0, p1):
        return Coin_SWIG_Python.SbDPLine_setValue(self, p0, p1)

    def getClosestPoints(self, line2, ptOnThis, ptOnLine2):
        return Coin_SWIG_Python.SbDPLine_getClosestPoints(self, line2, ptOnThis, ptOnLine2)

    def getClosestPoint(self, point):
        return Coin_SWIG_Python.SbDPLine_getClosestPoint(self, point)

    def getPosition(self):
        return Coin_SWIG_Python.SbDPLine_getPosition(self)

    def getDirection(self):
        return Coin_SWIG_Python.SbDPLine_getDirection(self)

    def output(self, file):
        return Coin_SWIG_Python.SbDPLine_output(self, file)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPLine

# Register SbDPLine in Coin_SWIG_Python:
Coin_SWIG_Python.SbDPLine_swigregister(SbDPLine)

class SbDPPlane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbDPPlane_swiginit(self, Coin_SWIG_Python.new_SbDPPlane(*args))

    def offset(self, d):
        return Coin_SWIG_Python.SbDPPlane_offset(self, d)

    def transform(self):
        return Coin_SWIG_Python.SbDPPlane_transform(self)

    def isInHalfSpace(self, point):
        return Coin_SWIG_Python.SbDPPlane_isInHalfSpace(self, point)

    def getDistance(self, point):
        return Coin_SWIG_Python.SbDPPlane_getDistance(self, point)

    def getNormal(self):
        return Coin_SWIG_Python.SbDPPlane_getNormal(self)

    def getDistanceFromOrigin(self):
        return Coin_SWIG_Python.SbDPPlane_getDistanceFromOrigin(self)

    def output(self, file):
        return Coin_SWIG_Python.SbDPPlane_output(self, file)

    def intersect(self, *args):
        return Coin_SWIG_Python.SbDPPlane_intersect(self, *args)

    def __eq__(self, u):
        return Coin_SWIG_Python.SbDPPlane___eq__(self, u)

    def __ne__(self, u):
        return Coin_SWIG_Python.SbDPPlane___ne__(self, u)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPPlane

# Register SbDPPlane in Coin_SWIG_Python:
Coin_SWIG_Python.SbDPPlane_swigregister(SbDPPlane)

class SbHeapFuncs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eval_func = property(Coin_SWIG_Python.SbHeapFuncs_eval_func_get, Coin_SWIG_Python.SbHeapFuncs_eval_func_set)
    get_index_func = property(Coin_SWIG_Python.SbHeapFuncs_get_index_func_get, Coin_SWIG_Python.SbHeapFuncs_get_index_func_set)
    set_index_func = property(Coin_SWIG_Python.SbHeapFuncs_set_index_func_get, Coin_SWIG_Python.SbHeapFuncs_set_index_func_set)

    def __init__(self):
        Coin_SWIG_Python.SbHeapFuncs_swiginit(self, Coin_SWIG_Python.new_SbHeapFuncs())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbHeapFuncs

# Register SbHeapFuncs in Coin_SWIG_Python:
Coin_SWIG_Python.SbHeapFuncs_swigregister(SbHeapFuncs)

class SbHeap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, SbHeapFuncs, initsize=1024):
        Coin_SWIG_Python.SbHeap_swiginit(self, Coin_SWIG_Python.new_SbHeap(SbHeapFuncs, initsize))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbHeap

    def emptyHeap(self):
        return Coin_SWIG_Python.SbHeap_emptyHeap(self)

    def size(self):
        return Coin_SWIG_Python.SbHeap_size(self)

    def add(self, obj):
        return Coin_SWIG_Python.SbHeap_add(self, obj)

    def remove(self, *args):
        return Coin_SWIG_Python.SbHeap_remove(self, *args)

    def extractMin(self):
        return Coin_SWIG_Python.SbHeap_extractMin(self)

    def getMin(self):
        return Coin_SWIG_Python.SbHeap_getMin(self)

    def newWeight(self, obj, hpos=-1):
        return Coin_SWIG_Python.SbHeap_newWeight(self, obj, hpos)

    def buildHeap(self, progresscb=None, data=None):
        return Coin_SWIG_Python.SbHeap_buildHeap(self, progresscb, data)

    def traverseHeap(self, func, userdata):
        return Coin_SWIG_Python.SbHeap_traverseHeap(self, func, userdata)

# Register SbHeap in Coin_SWIG_Python:
Coin_SWIG_Python.SbHeap_swigregister(SbHeap)

class SbImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbImage_swiginit(self, Coin_SWIG_Python.new_SbImage(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbImage

    def setValue(self, *args):
        return Coin_SWIG_Python.SbImage_setValue(self, *args)

    def setValuePtr(self, *args):
        return Coin_SWIG_Python.SbImage_setValuePtr(self, *args)

    def getSize(self):
        return Coin_SWIG_Python.SbImage_getSize(self)

    def readFile(self, filename, searchdirectories=None, numdirectories=0):
        return Coin_SWIG_Python.SbImage_readFile(self, filename, searchdirectories, numdirectories)

    def __eq__(self, image):
        return Coin_SWIG_Python.SbImage___eq__(self, image)

    def __ne__(self, image):
        return Coin_SWIG_Python.SbImage___ne__(self, image)

    @staticmethod
    def searchForFile(basename, dirlist, numdirs):
        return Coin_SWIG_Python.SbImage_searchForFile(basename, dirlist, numdirs)

    def hasData(self):
        return Coin_SWIG_Python.SbImage_hasData(self)

    def readLock(self):
        return Coin_SWIG_Python.SbImage_readLock(self)

    def readUnlock(self):
        return Coin_SWIG_Python.SbImage_readUnlock(self)

    def scheduleReadFile(self, cb, closure, filename, searchdirectories=None, numdirectories=0):
        return Coin_SWIG_Python.SbImage_scheduleReadFile(self, cb, closure, filename, searchdirectories, numdirectories)

    def getValue(self, *args):
        return Coin_SWIG_Python.SbImage_getValue(self, *args)

# Register SbImage in Coin_SWIG_Python:
Coin_SWIG_Python.SbImage_swigregister(SbImage)

def SbImage_searchForFile(basename, dirlist, numdirs):
    return Coin_SWIG_Python.SbImage_searchForFile(basename, dirlist, numdirs)

class SbOctTreeFuncs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bboxfunc = property(Coin_SWIG_Python.SbOctTreeFuncs_bboxfunc_get, Coin_SWIG_Python.SbOctTreeFuncs_bboxfunc_set)
    ptinsidefunc = property(Coin_SWIG_Python.SbOctTreeFuncs_ptinsidefunc_get, Coin_SWIG_Python.SbOctTreeFuncs_ptinsidefunc_set)
    insideboxfunc = property(Coin_SWIG_Python.SbOctTreeFuncs_insideboxfunc_get, Coin_SWIG_Python.SbOctTreeFuncs_insideboxfunc_set)
    insidespherefunc = property(Coin_SWIG_Python.SbOctTreeFuncs_insidespherefunc_get, Coin_SWIG_Python.SbOctTreeFuncs_insidespherefunc_set)
    insideplanesfunc = property(Coin_SWIG_Python.SbOctTreeFuncs_insideplanesfunc_get, Coin_SWIG_Python.SbOctTreeFuncs_insideplanesfunc_set)

    def __init__(self):
        Coin_SWIG_Python.SbOctTreeFuncs_swiginit(self, Coin_SWIG_Python.new_SbOctTreeFuncs())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbOctTreeFuncs

# Register SbOctTreeFuncs in Coin_SWIG_Python:
Coin_SWIG_Python.SbOctTreeFuncs_swigregister(SbOctTreeFuncs)

class SbOctTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bbox, itemfuncs, maxitemspernode=64):
        Coin_SWIG_Python.SbOctTree_swiginit(self, Coin_SWIG_Python.new_SbOctTree(bbox, itemfuncs, maxitemspernode))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbOctTree

    def addItem(self, item):
        return Coin_SWIG_Python.SbOctTree_addItem(self, item)

    def removeItem(self, item):
        return Coin_SWIG_Python.SbOctTree_removeItem(self, item)

    def findItems(self, *args):
        return Coin_SWIG_Python.SbOctTree_findItems(self, *args)

    def getBoundingBox(self):
        return Coin_SWIG_Python.SbOctTree_getBoundingBox(self)

    def clear(self):
        return Coin_SWIG_Python.SbOctTree_clear(self)

    def debugTree(self, fp):
        return Coin_SWIG_Python.SbOctTree_debugTree(self, fp)

# Register SbOctTree in Coin_SWIG_Python:
Coin_SWIG_Python.SbOctTree_swigregister(SbOctTree)

class SbTesselator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, func=None, data=None):
        Coin_SWIG_Python.SbTesselator_swiginit(self, Coin_SWIG_Python.new_SbTesselator(func, data))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbTesselator

    def beginPolygon(self, *args):
        return Coin_SWIG_Python.SbTesselator_beginPolygon(self, *args)

    def addVertex(self, v, data):
        return Coin_SWIG_Python.SbTesselator_addVertex(self, v, data)

    def endPolygon(self):
        return Coin_SWIG_Python.SbTesselator_endPolygon(self)

    def setCallback(self, func, data):
        return Coin_SWIG_Python.SbTesselator_setCallback(self, func, data)

# Register SbTesselator in Coin_SWIG_Python:
Coin_SWIG_Python.SbTesselator_swigregister(SbTesselator)

class SoTimerQueueSensor(SoSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoTimerQueueSensor_scb_v,args)
       else:
          self.this = apply(_coin.new_SoTimerQueueSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoTimerQueueSensor

    def getTriggerTime(self):
        return Coin_SWIG_Python.SoTimerQueueSensor_getTriggerTime(self)

    def schedule(self):
        return Coin_SWIG_Python.SoTimerQueueSensor_schedule(self)

    def unschedule(self):
        return Coin_SWIG_Python.SoTimerQueueSensor_unschedule(self)

    def isScheduled(self):
        return Coin_SWIG_Python.SoTimerQueueSensor_isScheduled(self)

    def trigger(self):
        return Coin_SWIG_Python.SoTimerQueueSensor_trigger(self)

# Register SoTimerQueueSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoTimerQueueSensor_swigregister(SoTimerQueueSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoTimerQueueSensor_scb_v,args)
   else:
      self.this = apply(_coin.new_SoTimerQueueSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoAlarmSensor(SoTimerQueueSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoAlarmSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoAlarmSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoAlarmSensor

    def setTime(self, abstime):
        return Coin_SWIG_Python.SoAlarmSensor_setTime(self, abstime)

    def setTimeFromNow(self, reltime):
        return Coin_SWIG_Python.SoAlarmSensor_setTimeFromNow(self, reltime)

    def getTime(self):
        return Coin_SWIG_Python.SoAlarmSensor_getTime(self)

    def schedule(self):
        return Coin_SWIG_Python.SoAlarmSensor_schedule(self)

# Register SoAlarmSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoAlarmSensor_swigregister(SoAlarmSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoAlarmSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoAlarmSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoIdleSensor(SoDelayQueueSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoIdleSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoIdleSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoIdleSensor

# Register SoIdleSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoIdleSensor_swigregister(SoIdleSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoIdleSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoIdleSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoNodeSensor(SoDataSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoNodeSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoNodeSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeSensor

    def attach(self, node):
        return Coin_SWIG_Python.SoNodeSensor_attach(self, node)

    def detach(self):
        return Coin_SWIG_Python.SoNodeSensor_detach(self)

    def getAttachedNode(self):
        return Coin_SWIG_Python.SoNodeSensor_getAttachedNode(self)

# Register SoNodeSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoNodeSensor_swigregister(SoNodeSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoNodeSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoNodeSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoOneShotSensor(SoDelayQueueSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoOneShotSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoOneShotSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoOneShotSensor

# Register SoOneShotSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoOneShotSensor_swigregister(SoOneShotSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoOneShotSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoOneShotSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoPathSensor(SoDataSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoPathSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoPathSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoPathSensor
    PATH = Coin_SWIG_Python.SoPathSensor_PATH
    NODES = Coin_SWIG_Python.SoPathSensor_NODES
    PATH_AND_NODES = Coin_SWIG_Python.SoPathSensor_PATH_AND_NODES

    def setTriggerFilter(self, type):
        return Coin_SWIG_Python.SoPathSensor_setTriggerFilter(self, type)

    def getTriggerFilter(self):
        return Coin_SWIG_Python.SoPathSensor_getTriggerFilter(self)

    def attach(self, path):
        return Coin_SWIG_Python.SoPathSensor_attach(self, path)

    def detach(self):
        return Coin_SWIG_Python.SoPathSensor_detach(self)

    def getAttachedPath(self):
        return Coin_SWIG_Python.SoPathSensor_getAttachedPath(self)

# Register SoPathSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoPathSensor_swigregister(SoPathSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoPathSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoPathSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoTimerSensor(SoTimerQueueSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoTimerSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoTimerSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoTimerSensor

    def setBaseTime(self, base):
        return Coin_SWIG_Python.SoTimerSensor_setBaseTime(self, base)

    def getBaseTime(self):
        return Coin_SWIG_Python.SoTimerSensor_getBaseTime(self)

    def setInterval(self, interval):
        return Coin_SWIG_Python.SoTimerSensor_setInterval(self, interval)

    def getInterval(self):
        return Coin_SWIG_Python.SoTimerSensor_getInterval(self)

    def schedule(self):
        return Coin_SWIG_Python.SoTimerSensor_schedule(self)

    def unschedule(self):
        return Coin_SWIG_Python.SoTimerSensor_unschedule(self)

    def reschedule(self, schedtime):
        return Coin_SWIG_Python.SoTimerSensor_reschedule(self, schedtime)

# Register SoTimerSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoTimerSensor_swigregister(SoTimerSensor)

def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoTimerSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoTimerSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoInteraction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def init():
        return Coin_SWIG_Python.SoInteraction_init()

    def __init__(self):
        Coin_SWIG_Python.SoInteraction_swiginit(self, Coin_SWIG_Python.new_SoInteraction())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInteraction

# Register SoInteraction in Coin_SWIG_Python:
Coin_SWIG_Python.SoInteraction_swigregister(SoInteraction)

def SoInteraction_init():
    return Coin_SWIG_Python.SoInteraction_init()

class SoOffscreenRenderer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LUMINANCE = Coin_SWIG_Python.SoOffscreenRenderer_LUMINANCE
    LUMINANCE_TRANSPARENCY = Coin_SWIG_Python.SoOffscreenRenderer_LUMINANCE_TRANSPARENCY
    RGB = Coin_SWIG_Python.SoOffscreenRenderer_RGB
    RGB_TRANSPARENCY = Coin_SWIG_Python.SoOffscreenRenderer_RGB_TRANSPARENCY

    def __init__(self, *args):
        Coin_SWIG_Python.SoOffscreenRenderer_swiginit(self, Coin_SWIG_Python.new_SoOffscreenRenderer(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOffscreenRenderer

    @staticmethod
    def getScreenPixelsPerInch():
        return Coin_SWIG_Python.SoOffscreenRenderer_getScreenPixelsPerInch()

    @staticmethod
    def getMaximumResolution():
        return Coin_SWIG_Python.SoOffscreenRenderer_getMaximumResolution()

    def setComponents(self, components):
        return Coin_SWIG_Python.SoOffscreenRenderer_setComponents(self, components)

    def getComponents(self):
        return Coin_SWIG_Python.SoOffscreenRenderer_getComponents(self)

    def setViewportRegion(self, region):
        return Coin_SWIG_Python.SoOffscreenRenderer_setViewportRegion(self, region)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoOffscreenRenderer_getViewportRegion(self)

    def setBackgroundColor(self, color):
        return Coin_SWIG_Python.SoOffscreenRenderer_setBackgroundColor(self, color)

    def getBackgroundColor(self):
        return Coin_SWIG_Python.SoOffscreenRenderer_getBackgroundColor(self)

    def setGLRenderAction(self, action):
        return Coin_SWIG_Python.SoOffscreenRenderer_setGLRenderAction(self, action)

    def getGLRenderAction(self):
        return Coin_SWIG_Python.SoOffscreenRenderer_getGLRenderAction(self)

    def render(self, *args):
        return Coin_SWIG_Python.SoOffscreenRenderer_render(self, *args)

    def writeToRGB(self, *args):
        return Coin_SWIG_Python.SoOffscreenRenderer_writeToRGB(self, *args)

    def writeToPostScript(self, *args):
        return Coin_SWIG_Python.SoOffscreenRenderer_writeToPostScript(self, *args)

    def isWriteSupported(self, filetypeextension):
        return Coin_SWIG_Python.SoOffscreenRenderer_isWriteSupported(self, filetypeextension)

    def getNumWriteFiletypes(self):
        return Coin_SWIG_Python.SoOffscreenRenderer_getNumWriteFiletypes(self)

    def writeToFile(self, filename, filetypeextension):
        return Coin_SWIG_Python.SoOffscreenRenderer_writeToFile(self, filename, filetypeextension)

    def getWriteFiletypeInfo(self, *args):
        return Coin_SWIG_Python.SoOffscreenRenderer_getWriteFiletypeInfo(self, *args)

    def getBuffer(self, *args):
        return Coin_SWIG_Python.SoOffscreenRenderer_getBuffer(self, *args)

# Register SoOffscreenRenderer in Coin_SWIG_Python:
Coin_SWIG_Python.SoOffscreenRenderer_swigregister(SoOffscreenRenderer)

def SoOffscreenRenderer_getScreenPixelsPerInch():
    return Coin_SWIG_Python.SoOffscreenRenderer_getScreenPixelsPerInch()

def SoOffscreenRenderer_getMaximumResolution():
    return Coin_SWIG_Python.SoOffscreenRenderer_getMaximumResolution()

class SoPickedPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoPickedPoint_swiginit(self, Coin_SWIG_Python.new_SoPickedPoint(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPickedPoint

    def copy(self):
        return Coin_SWIG_Python.SoPickedPoint_copy(self)

    def getPoint(self):
        return Coin_SWIG_Python.SoPickedPoint_getPoint(self)

    def getNormal(self):
        return Coin_SWIG_Python.SoPickedPoint_getNormal(self)

    def getTextureCoords(self):
        return Coin_SWIG_Python.SoPickedPoint_getTextureCoords(self)

    def getMaterialIndex(self):
        return Coin_SWIG_Python.SoPickedPoint_getMaterialIndex(self)

    def getPath(self):
        return Coin_SWIG_Python.SoPickedPoint_getPath(self)

    def isOnGeometry(self):
        return Coin_SWIG_Python.SoPickedPoint_isOnGeometry(self)

    def getDetail(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getDetail(self, node)

    def getObjectToWorld(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getObjectToWorld(self, node)

    def getWorldToObject(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getWorldToObject(self, node)

    def getObjectToImage(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getObjectToImage(self, node)

    def getImageToObject(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getImageToObject(self, node)

    def getObjectPoint(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getObjectPoint(self, node)

    def getObjectNormal(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getObjectNormal(self, node)

    def getObjectTextureCoords(self, node=None):
        return Coin_SWIG_Python.SoPickedPoint_getObjectTextureCoords(self, node)

    def setObjectNormal(self, normal):
        return Coin_SWIG_Python.SoPickedPoint_setObjectNormal(self, normal)

    def setObjectTextureCoords(self, texCoords):
        return Coin_SWIG_Python.SoPickedPoint_setObjectTextureCoords(self, texCoords)

    def setMaterialIndex(self, index):
        return Coin_SWIG_Python.SoPickedPoint_setMaterialIndex(self, index)

    def setDetail(self, detail, node):
        return Coin_SWIG_Python.SoPickedPoint_setDetail(self, detail, node)

# Register SoPickedPoint in Coin_SWIG_Python:
Coin_SWIG_Python.SoPickedPoint_swigregister(SoPickedPoint)

class SoPrimitiveVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SoPrimitiveVertex_swiginit(self, Coin_SWIG_Python.new_SoPrimitiveVertex(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPrimitiveVertex

    def getPoint(self):
        return Coin_SWIG_Python.SoPrimitiveVertex_getPoint(self)

    def getNormal(self):
        return Coin_SWIG_Python.SoPrimitiveVertex_getNormal(self)

    def getTextureCoords(self):
        return Coin_SWIG_Python.SoPrimitiveVertex_getTextureCoords(self)

    def getMaterialIndex(self):
        return Coin_SWIG_Python.SoPrimitiveVertex_getMaterialIndex(self)

    def getDetail(self):
        return Coin_SWIG_Python.SoPrimitiveVertex_getDetail(self)

    def setPoint(self, *args):
        return Coin_SWIG_Python.SoPrimitiveVertex_setPoint(self, *args)

    def setNormal(self, *args):
        return Coin_SWIG_Python.SoPrimitiveVertex_setNormal(self, *args)

    def setTextureCoords(self, *args):
        return Coin_SWIG_Python.SoPrimitiveVertex_setTextureCoords(self, *args)

    def setMaterialIndex(self, index):
        return Coin_SWIG_Python.SoPrimitiveVertex_setMaterialIndex(self, index)

    def setDetail(self, d):
        return Coin_SWIG_Python.SoPrimitiveVertex_setDetail(self, d)

# Register SoPrimitiveVertex in Coin_SWIG_Python:
Coin_SWIG_Python.SoPrimitiveVertex_swigregister(SoPrimitiveVertex)

class SoSceneManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SoSceneManager_swiginit(self, Coin_SWIG_Python.new_SoSceneManager())
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSceneManager

    def render(self, *args):
        return Coin_SWIG_Python.SoSceneManager_render(self, *args)

    def processEvent(self, event):
        return Coin_SWIG_Python.SoSceneManager_processEvent(self, event)

    def reinitialize(self):
        return Coin_SWIG_Python.SoSceneManager_reinitialize(self)

    def scheduleRedraw(self):
        return Coin_SWIG_Python.SoSceneManager_scheduleRedraw(self)

    def setSceneGraph(self, sceneroot):
        return Coin_SWIG_Python.SoSceneManager_setSceneGraph(self, sceneroot)

    def getSceneGraph(self):
        return Coin_SWIG_Python.SoSceneManager_getSceneGraph(self)

    def setWindowSize(self, newsize):
        return Coin_SWIG_Python.SoSceneManager_setWindowSize(self, newsize)

    def getWindowSize(self):
        return Coin_SWIG_Python.SoSceneManager_getWindowSize(self)

    def setSize(self, newsize):
        return Coin_SWIG_Python.SoSceneManager_setSize(self, newsize)

    def getSize(self):
        return Coin_SWIG_Python.SoSceneManager_getSize(self)

    def setOrigin(self, newOrigin):
        return Coin_SWIG_Python.SoSceneManager_setOrigin(self, newOrigin)

    def getOrigin(self):
        return Coin_SWIG_Python.SoSceneManager_getOrigin(self)

    def setViewportRegion(self, newRegion):
        return Coin_SWIG_Python.SoSceneManager_setViewportRegion(self, newRegion)

    def getViewportRegion(self):
        return Coin_SWIG_Python.SoSceneManager_getViewportRegion(self)

    def setBackgroundColor(self, color):
        return Coin_SWIG_Python.SoSceneManager_setBackgroundColor(self, color)

    def getBackgroundColor(self):
        return Coin_SWIG_Python.SoSceneManager_getBackgroundColor(self)

    def setBackgroundIndex(self, index):
        return Coin_SWIG_Python.SoSceneManager_setBackgroundIndex(self, index)

    def getBackgroundIndex(self):
        return Coin_SWIG_Python.SoSceneManager_getBackgroundIndex(self)

    def setRGBMode(self, onOrOff):
        return Coin_SWIG_Python.SoSceneManager_setRGBMode(self, onOrOff)

    def isRGBMode(self):
        return Coin_SWIG_Python.SoSceneManager_isRGBMode(self)

    def activate(self):
        return Coin_SWIG_Python.SoSceneManager_activate(self)

    def deactivate(self):
        return Coin_SWIG_Python.SoSceneManager_deactivate(self)

    def setRenderCallback(self, f, userData=None):
        return Coin_SWIG_Python.SoSceneManager_setRenderCallback(self, f, userData)

    def isAutoRedraw(self):
        return Coin_SWIG_Python.SoSceneManager_isAutoRedraw(self)

    def setRedrawPriority(self, priority):
        return Coin_SWIG_Python.SoSceneManager_setRedrawPriority(self, priority)

    def getRedrawPriority(self):
        return Coin_SWIG_Python.SoSceneManager_getRedrawPriority(self)

    def setAntialiasing(self, smoothing, numPasses):
        return Coin_SWIG_Python.SoSceneManager_setAntialiasing(self, smoothing, numPasses)

    def getAntialiasing(self, smoothing, numPasses):
        return Coin_SWIG_Python.SoSceneManager_getAntialiasing(self, smoothing, numPasses)

    def setGLRenderAction(self, action):
        return Coin_SWIG_Python.SoSceneManager_setGLRenderAction(self, action)

    def getGLRenderAction(self):
        return Coin_SWIG_Python.SoSceneManager_getGLRenderAction(self)

    def setAudioRenderAction(self, action):
        return Coin_SWIG_Python.SoSceneManager_setAudioRenderAction(self, action)

    def getAudioRenderAction(self):
        return Coin_SWIG_Python.SoSceneManager_getAudioRenderAction(self)

    def setHandleEventAction(self, hea):
        return Coin_SWIG_Python.SoSceneManager_setHandleEventAction(self, hea)

    def getHandleEventAction(self):
        return Coin_SWIG_Python.SoSceneManager_getHandleEventAction(self)

    @staticmethod
    def getDefaultRedrawPriority():
        return Coin_SWIG_Python.SoSceneManager_getDefaultRedrawPriority()

    @staticmethod
    def enableRealTimeUpdate(flag):
        return Coin_SWIG_Python.SoSceneManager_enableRealTimeUpdate(flag)

    @staticmethod
    def isRealTimeUpdateEnabled():
        return Coin_SWIG_Python.SoSceneManager_isRealTimeUpdateEnabled()

# Register SoSceneManager in Coin_SWIG_Python:
Coin_SWIG_Python.SoSceneManager_swigregister(SoSceneManager)

def SoSceneManager_getDefaultRedrawPriority():
    return Coin_SWIG_Python.SoSceneManager_getDefaultRedrawPriority()

def SoSceneManager_enableRealTimeUpdate(flag):
    return Coin_SWIG_Python.SoSceneManager_enableRealTimeUpdate(flag)

def SoSceneManager_isRealTimeUpdateEnabled():
    return Coin_SWIG_Python.SoSceneManager_isRealTimeUpdateEnabled()

GL_GLEXT_PROTOTYPES = Coin_SWIG_Python.GL_GLEXT_PROTOTYPES
GL_CLAMP_TO_EDGE = Coin_SWIG_Python.GL_CLAMP_TO_EDGE
GL_CLAMP_TO_BORDER = Coin_SWIG_Python.GL_CLAMP_TO_BORDER
GL_REPLACE = Coin_SWIG_Python.GL_REPLACE
GL_MAX_3D_TEXTURE_SIZE = Coin_SWIG_Python.GL_MAX_3D_TEXTURE_SIZE
GL_PACK_IMAGE_HEIGHT = Coin_SWIG_Python.GL_PACK_IMAGE_HEIGHT
GL_PACK_SKIP_IMAGES = Coin_SWIG_Python.GL_PACK_SKIP_IMAGES
GL_PROXY_TEXTURE_2D = Coin_SWIG_Python.GL_PROXY_TEXTURE_2D
GL_PROXY_TEXTURE_3D = Coin_SWIG_Python.GL_PROXY_TEXTURE_3D
GL_TEXTURE_3D = Coin_SWIG_Python.GL_TEXTURE_3D
GL_TEXTURE_DEPTH = Coin_SWIG_Python.GL_TEXTURE_DEPTH
GL_TEXTURE_WRAP_R = Coin_SWIG_Python.GL_TEXTURE_WRAP_R
GL_UNPACK_IMAGE_HEIGHT = Coin_SWIG_Python.GL_UNPACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = Coin_SWIG_Python.GL_UNPACK_SKIP_IMAGES
GL_COLOR_TABLE_WIDTH = Coin_SWIG_Python.GL_COLOR_TABLE_WIDTH
GL_TEXTURE0 = Coin_SWIG_Python.GL_TEXTURE0
GL_TEXTURE1 = Coin_SWIG_Python.GL_TEXTURE1
GL_TEXTURE2 = Coin_SWIG_Python.GL_TEXTURE2
GL_TEXTURE3 = Coin_SWIG_Python.GL_TEXTURE3
GL_TEXTURE4 = Coin_SWIG_Python.GL_TEXTURE4
GL_TEXTURE5 = Coin_SWIG_Python.GL_TEXTURE5
GL_TEXTURE6 = Coin_SWIG_Python.GL_TEXTURE6
GL_TEXTURE7 = Coin_SWIG_Python.GL_TEXTURE7
GL_TEXTURE8 = Coin_SWIG_Python.GL_TEXTURE8
GL_TEXTURE9 = Coin_SWIG_Python.GL_TEXTURE9
GL_TEXTURE10 = Coin_SWIG_Python.GL_TEXTURE10
GL_TEXTURE11 = Coin_SWIG_Python.GL_TEXTURE11
GL_TEXTURE12 = Coin_SWIG_Python.GL_TEXTURE12
GL_TEXTURE13 = Coin_SWIG_Python.GL_TEXTURE13
GL_TEXTURE14 = Coin_SWIG_Python.GL_TEXTURE14
GL_TEXTURE15 = Coin_SWIG_Python.GL_TEXTURE15
GL_MAX_TEXTURE_UNITS = Coin_SWIG_Python.GL_MAX_TEXTURE_UNITS
GL_ACTIVE_TEXTURE = Coin_SWIG_Python.GL_ACTIVE_TEXTURE
GL_CLIENT_ACTIVE_TEXTURE = Coin_SWIG_Python.GL_CLIENT_ACTIVE_TEXTURE
GL_POLYGON_OFFSET_EXT = Coin_SWIG_Python.GL_POLYGON_OFFSET_EXT
GL_COLOR_TABLE = Coin_SWIG_Python.GL_COLOR_TABLE
GL_COLOR_INDEX1_EXT = Coin_SWIG_Python.GL_COLOR_INDEX1_EXT
GL_COLOR_INDEX2_EXT = Coin_SWIG_Python.GL_COLOR_INDEX2_EXT
GL_COLOR_INDEX4_EXT = Coin_SWIG_Python.GL_COLOR_INDEX4_EXT
GL_COLOR_INDEX8_EXT = Coin_SWIG_Python.GL_COLOR_INDEX8_EXT
GL_COLOR_INDEX12_EXT = Coin_SWIG_Python.GL_COLOR_INDEX12_EXT
GL_COLOR_INDEX16_EXT = Coin_SWIG_Python.GL_COLOR_INDEX16_EXT
GL_COLOR_TABLE_FORMAT_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_FORMAT_EXT
GL_COLOR_TABLE_RED_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_RED_SIZE_EXT
GL_COLOR_TABLE_GREEN_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_GREEN_SIZE_EXT
GL_COLOR_TABLE_BLUE_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_BLUE_SIZE_EXT
GL_COLOR_TABLE_ALPHA_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_ALPHA_SIZE_EXT
GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
GL_COLOR_TABLE_INTENSITY_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_INTENSITY_SIZE_EXT
GL_TEXTURE_INDEX_SIZE_EXT = Coin_SWIG_Python.GL_TEXTURE_INDEX_SIZE_EXT
GL_COMPRESSED_ALPHA_ARB = Coin_SWIG_Python.GL_COMPRESSED_ALPHA_ARB
GL_COMPRESSED_LUMINANCE_ARB = Coin_SWIG_Python.GL_COMPRESSED_LUMINANCE_ARB
GL_COMPRESSED_LUMINANCE_ALPHA_ARB = Coin_SWIG_Python.GL_COMPRESSED_LUMINANCE_ALPHA_ARB
GL_COMPRESSED_INTENSITY_ARB = Coin_SWIG_Python.GL_COMPRESSED_INTENSITY_ARB
GL_COMPRESSED_RGB_ARB = Coin_SWIG_Python.GL_COMPRESSED_RGB_ARB
GL_COMPRESSED_RGBA_ARB = Coin_SWIG_Python.GL_COMPRESSED_RGBA_ARB
GL_TEXTURE_COMPRESSION_HINT_ARB = Coin_SWIG_Python.GL_TEXTURE_COMPRESSION_HINT_ARB
GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = Coin_SWIG_Python.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
GL_TEXTURE_COMPRESSED_ARB = Coin_SWIG_Python.GL_TEXTURE_COMPRESSED_ARB
GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = Coin_SWIG_Python.GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
GL_COMPRESSED_TEXTURE_FORMATS_ARB = Coin_SWIG_Python.GL_COMPRESSED_TEXTURE_FORMATS_ARB
GL_DEPTH_COMPONENT16 = Coin_SWIG_Python.GL_DEPTH_COMPONENT16
GL_DEPTH_COMPONENT24 = Coin_SWIG_Python.GL_DEPTH_COMPONENT24
GL_DEPTH_COMPONENT32 = Coin_SWIG_Python.GL_DEPTH_COMPONENT32
GL_TEXTURE_DEPTH_SIZE = Coin_SWIG_Python.GL_TEXTURE_DEPTH_SIZE
GL_DEPTH_TEXTURE_MODE = Coin_SWIG_Python.GL_DEPTH_TEXTURE_MODE
GL_R3_G3_B2 = Coin_SWIG_Python.GL_R3_G3_B2
GL_RGB4 = Coin_SWIG_Python.GL_RGB4
GL_RGB5 = Coin_SWIG_Python.GL_RGB5
GL_RGB8 = Coin_SWIG_Python.GL_RGB8
GL_RGB10 = Coin_SWIG_Python.GL_RGB10
GL_RGB12 = Coin_SWIG_Python.GL_RGB12
GL_RGB16 = Coin_SWIG_Python.GL_RGB16
GL_RGBA2 = Coin_SWIG_Python.GL_RGBA2
GL_RGBA4 = Coin_SWIG_Python.GL_RGBA4
GL_RGB5_A1 = Coin_SWIG_Python.GL_RGB5_A1
GL_RGBA8 = Coin_SWIG_Python.GL_RGBA8
GL_RGB10_A2 = Coin_SWIG_Python.GL_RGB10_A2
GL_RGBA12 = Coin_SWIG_Python.GL_RGBA12
GL_RGBA16 = Coin_SWIG_Python.GL_RGBA16
GL_RGBA32F_ARB = Coin_SWIG_Python.GL_RGBA32F_ARB
GL_RGB32F_ARB = Coin_SWIG_Python.GL_RGB32F_ARB
GL_ALPHA32F_ARB = Coin_SWIG_Python.GL_ALPHA32F_ARB
GL_INTENSITY32F_ARB = Coin_SWIG_Python.GL_INTENSITY32F_ARB
GL_LUMINANCE32F_ARB = Coin_SWIG_Python.GL_LUMINANCE32F_ARB
GL_LUMINANCE_ALPHA32F_ARB = Coin_SWIG_Python.GL_LUMINANCE_ALPHA32F_ARB
GL_RGBA16F_ARB = Coin_SWIG_Python.GL_RGBA16F_ARB
GL_RGB16F_ARB = Coin_SWIG_Python.GL_RGB16F_ARB
GL_ALPHA16F_ARB = Coin_SWIG_Python.GL_ALPHA16F_ARB
GL_INTENSITY16F_ARB = Coin_SWIG_Python.GL_INTENSITY16F_ARB
GL_LUMINANCE16F_ARB = Coin_SWIG_Python.GL_LUMINANCE16F_ARB
GL_LUMINANCE_ALPHA16F_ARB = Coin_SWIG_Python.GL_LUMINANCE_ALPHA16F_ARB
GL_RGBA16_EXT = Coin_SWIG_Python.GL_RGBA16_EXT
GL_TEXTURE_COMPARE_MODE = Coin_SWIG_Python.GL_TEXTURE_COMPARE_MODE
GL_TEXTURE_COMPARE_FUNC = Coin_SWIG_Python.GL_TEXTURE_COMPARE_FUNC
GL_COMPARE_R_TO_TEXTURE = Coin_SWIG_Python.GL_COMPARE_R_TO_TEXTURE
GL_MIN = Coin_SWIG_Python.GL_MIN
GL_MAX = Coin_SWIG_Python.GL_MAX
GL_FUNC_ADD = Coin_SWIG_Python.GL_FUNC_ADD
GL_FUNC_SUBTRACT = Coin_SWIG_Python.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = Coin_SWIG_Python.GL_FUNC_REVERSE_SUBTRACT
GL_VERTEX_ARRAY = Coin_SWIG_Python.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = Coin_SWIG_Python.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = Coin_SWIG_Python.GL_COLOR_ARRAY
GL_INDEX_ARRAY = Coin_SWIG_Python.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = Coin_SWIG_Python.GL_TEXTURE_COORD_ARRAY
GL_V3F = Coin_SWIG_Python.GL_V3F
GL_C4UB_V3F = Coin_SWIG_Python.GL_C4UB_V3F
GL_C3F_V3F = Coin_SWIG_Python.GL_C3F_V3F
GL_N3F_V3F = Coin_SWIG_Python.GL_N3F_V3F
GL_C4F_N3F_V3F = Coin_SWIG_Python.GL_C4F_N3F_V3F
GL_T2F_V3F = Coin_SWIG_Python.GL_T2F_V3F
GL_T2F_C4UB_V3F = Coin_SWIG_Python.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = Coin_SWIG_Python.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = Coin_SWIG_Python.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = Coin_SWIG_Python.GL_T2F_C4F_N3F_V3F
GL_VERTEX_ARRAY_RANGE_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_NV
GL_VERTEX_ARRAY_RANGE_LENGTH_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_LENGTH_NV
GL_VERTEX_ARRAY_RANGE_VALID_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_VALID_NV
GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = Coin_SWIG_Python.GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
GL_VERTEX_ARRAY_RANGE_POINTER_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_POINTER_NV
GL_ARRAY_BUFFER = Coin_SWIG_Python.GL_ARRAY_BUFFER
GL_ELEMENT_ARRAY_BUFFER = Coin_SWIG_Python.GL_ELEMENT_ARRAY_BUFFER
GL_READ_ONLY = Coin_SWIG_Python.GL_READ_ONLY
GL_WRITE_ONLY = Coin_SWIG_Python.GL_WRITE_ONLY
GL_READ_WRITE = Coin_SWIG_Python.GL_READ_WRITE
GL_BUFFER_ACCESS = Coin_SWIG_Python.GL_BUFFER_ACCESS
GL_BUFFER_MAPPED = Coin_SWIG_Python.GL_BUFFER_MAPPED
GL_BUFFER_MAP_POINTER = Coin_SWIG_Python.GL_BUFFER_MAP_POINTER
GL_STREAM_DRAW = Coin_SWIG_Python.GL_STREAM_DRAW
GL_STREAM_READ = Coin_SWIG_Python.GL_STREAM_READ
GL_STREAM_COPY = Coin_SWIG_Python.GL_STREAM_COPY
GL_STATIC_DRAW = Coin_SWIG_Python.GL_STATIC_DRAW
GL_STATIC_READ = Coin_SWIG_Python.GL_STATIC_READ
GL_STATIC_COPY = Coin_SWIG_Python.GL_STATIC_COPY
GL_DYNAMIC_DRAW = Coin_SWIG_Python.GL_DYNAMIC_DRAW
GL_DYNAMIC_READ = Coin_SWIG_Python.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = Coin_SWIG_Python.GL_DYNAMIC_COPY
GL_REGISTER_COMBINERS_NV = Coin_SWIG_Python.GL_REGISTER_COMBINERS_NV
GL_COMBINER0_NV = Coin_SWIG_Python.GL_COMBINER0_NV
GL_COMBINER1_NV = Coin_SWIG_Python.GL_COMBINER1_NV
GL_COMBINER2_NV = Coin_SWIG_Python.GL_COMBINER2_NV
GL_COMBINER3_NV = Coin_SWIG_Python.GL_COMBINER3_NV
GL_COMBINER4_NV = Coin_SWIG_Python.GL_COMBINER4_NV
GL_COMBINER5_NV = Coin_SWIG_Python.GL_COMBINER5_NV
GL_COMBINER6_NV = Coin_SWIG_Python.GL_COMBINER6_NV
GL_COMBINER7_NV = Coin_SWIG_Python.GL_COMBINER7_NV
GL_VARIABLE_A_NV = Coin_SWIG_Python.GL_VARIABLE_A_NV
GL_VARIABLE_B_NV = Coin_SWIG_Python.GL_VARIABLE_B_NV
GL_VARIABLE_C_NV = Coin_SWIG_Python.GL_VARIABLE_C_NV
GL_VARIABLE_D_NV = Coin_SWIG_Python.GL_VARIABLE_D_NV
GL_VARIABLE_E_NV = Coin_SWIG_Python.GL_VARIABLE_E_NV
GL_VARIABLE_F_NV = Coin_SWIG_Python.GL_VARIABLE_F_NV
GL_VARIABLE_G_NV = Coin_SWIG_Python.GL_VARIABLE_G_NV
GL_CONSTANT_COLOR0_NV = Coin_SWIG_Python.GL_CONSTANT_COLOR0_NV
GL_CONSTANT_COLOR1_NV = Coin_SWIG_Python.GL_CONSTANT_COLOR1_NV
GL_PRIMARY_COLOR_NV = Coin_SWIG_Python.GL_PRIMARY_COLOR_NV
GL_SECONDARY_COLOR_NV = Coin_SWIG_Python.GL_SECONDARY_COLOR_NV
GL_SPARE0_NV = Coin_SWIG_Python.GL_SPARE0_NV
GL_SPARE1_NV = Coin_SWIG_Python.GL_SPARE1_NV
GL_UNSIGNED_IDENTITY_NV = Coin_SWIG_Python.GL_UNSIGNED_IDENTITY_NV
GL_UNSIGNED_INVERT_NV = Coin_SWIG_Python.GL_UNSIGNED_INVERT_NV
GL_EXPAND_NORMAL_NV = Coin_SWIG_Python.GL_EXPAND_NORMAL_NV
GL_EXPAND_NEGATE_NV = Coin_SWIG_Python.GL_EXPAND_NEGATE_NV
GL_HALF_BIAS_NORMAL_NV = Coin_SWIG_Python.GL_HALF_BIAS_NORMAL_NV
GL_HALF_BIAS_NEGATE_NV = Coin_SWIG_Python.GL_HALF_BIAS_NEGATE_NV
GL_SIGNED_IDENTITY_NV = Coin_SWIG_Python.GL_SIGNED_IDENTITY_NV
GL_SIGNED_NEGATE_NV = Coin_SWIG_Python.GL_SIGNED_NEGATE_NV
GL_E_TIMES_F_NV = Coin_SWIG_Python.GL_E_TIMES_F_NV
GL_SPARE0_PLUS_SECONDARY_COLOR_NV = Coin_SWIG_Python.GL_SPARE0_PLUS_SECONDARY_COLOR_NV
GL_SCALE_BY_TWO_NV = Coin_SWIG_Python.GL_SCALE_BY_TWO_NV
GL_SCALE_BY_FOUR_NV = Coin_SWIG_Python.GL_SCALE_BY_FOUR_NV
GL_SCALE_BY_ONE_HALF_NV = Coin_SWIG_Python.GL_SCALE_BY_ONE_HALF_NV
GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = Coin_SWIG_Python.GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
GL_DISCARD_NV = Coin_SWIG_Python.GL_DISCARD_NV
GL_COMBINER_INPUT_NV = Coin_SWIG_Python.GL_COMBINER_INPUT_NV
GL_COMBINER_MAPPING_NV = Coin_SWIG_Python.GL_COMBINER_MAPPING_NV
GL_COMBINER_COMPONENT_USAGE_NV = Coin_SWIG_Python.GL_COMBINER_COMPONENT_USAGE_NV
GL_COMBINER_AB_DOT_PRODUCT_NV = Coin_SWIG_Python.GL_COMBINER_AB_DOT_PRODUCT_NV
GL_COMBINER_CD_DOT_PRODUCT_NV = Coin_SWIG_Python.GL_COMBINER_CD_DOT_PRODUCT_NV
GL_COMBINER_MUX_SUM_NV = Coin_SWIG_Python.GL_COMBINER_MUX_SUM_NV
GL_COMBINER_SCALE_NV = Coin_SWIG_Python.GL_COMBINER_SCALE_NV
GL_COMBINER_BIAS_NV = Coin_SWIG_Python.GL_COMBINER_BIAS_NV
GL_COMBINER_AB_OUTPUT_NV = Coin_SWIG_Python.GL_COMBINER_AB_OUTPUT_NV
GL_COMBINER_CD_OUTPUT_NV = Coin_SWIG_Python.GL_COMBINER_CD_OUTPUT_NV
GL_COMBINER_SUM_OUTPUT_NV = Coin_SWIG_Python.GL_COMBINER_SUM_OUTPUT_NV
GL_MAX_GENERAL_COMBINERS_NV = Coin_SWIG_Python.GL_MAX_GENERAL_COMBINERS_NV
GL_NUM_GENERAL_COMBINERS_NV = Coin_SWIG_Python.GL_NUM_GENERAL_COMBINERS_NV
GL_COLOR_SUM_CLAMP_NV = Coin_SWIG_Python.GL_COLOR_SUM_CLAMP_NV
GL_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_TEXTURE_RECTANGLE_NV
GL_TEXTURE_BINDING_RECTANGLE_NV = Coin_SWIG_Python.GL_TEXTURE_BINDING_RECTANGLE_NV
GL_PROXY_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_PROXY_TEXTURE_RECTANGLE_NV
GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = Coin_SWIG_Python.GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
GL_TEXTURE_RECTANGLE_EXT = Coin_SWIG_Python.GL_TEXTURE_RECTANGLE_EXT
GL_TEXTURE_BINDING_RECTANGLE_EXT = Coin_SWIG_Python.GL_TEXTURE_BINDING_RECTANGLE_EXT
GL_PROXY_TEXTURE_RECTANGLE_EXT = Coin_SWIG_Python.GL_PROXY_TEXTURE_RECTANGLE_EXT
GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = Coin_SWIG_Python.GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
GL_OFFSET_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_RECTANGLE_NV
GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = Coin_SWIG_Python.GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
GL_UNSIGNED_INT_S8_S8_8_8_NV = Coin_SWIG_Python.GL_UNSIGNED_INT_S8_S8_8_8_NV
GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = Coin_SWIG_Python.GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
GL_DSDT_MAG_INTENSITY_NV = Coin_SWIG_Python.GL_DSDT_MAG_INTENSITY_NV
GL_SHADER_CONSISTENT_NV = Coin_SWIG_Python.GL_SHADER_CONSISTENT_NV
GL_TEXTURE_SHADER_NV = Coin_SWIG_Python.GL_TEXTURE_SHADER_NV
GL_SHADER_OPERATION_NV = Coin_SWIG_Python.GL_SHADER_OPERATION_NV
GL_CULL_MODES_NV = Coin_SWIG_Python.GL_CULL_MODES_NV
GL_OFFSET_TEXTURE_MATRIX_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_MATRIX_NV
GL_OFFSET_TEXTURE_SCALE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_SCALE_NV
GL_OFFSET_TEXTURE_BIAS_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_BIAS_NV
GL_OFFSET_TEXTURE_2D_MATRIX_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_MATRIX_NV
GL_OFFSET_TEXTURE_2D_SCALE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_SCALE_NV
GL_OFFSET_TEXTURE_2D_BIAS_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_BIAS_NV
GL_PREVIOUS_TEXTURE_INPUT_NV = Coin_SWIG_Python.GL_PREVIOUS_TEXTURE_INPUT_NV
GL_CONST_EYE_NV = Coin_SWIG_Python.GL_CONST_EYE_NV
GL_PASS_THROUGH_NV = Coin_SWIG_Python.GL_PASS_THROUGH_NV
GL_CULL_FRAGMENT_NV = Coin_SWIG_Python.GL_CULL_FRAGMENT_NV
GL_OFFSET_TEXTURE_2D_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_NV
GL_DEPENDENT_AR_TEXTURE_2D_NV = Coin_SWIG_Python.GL_DEPENDENT_AR_TEXTURE_2D_NV
GL_DEPENDENT_GB_TEXTURE_2D_NV = Coin_SWIG_Python.GL_DEPENDENT_GB_TEXTURE_2D_NV
GL_DOT_PRODUCT_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_NV
GL_DOT_PRODUCT_DEPTH_REPLACE_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_DEPTH_REPLACE_NV
GL_DOT_PRODUCT_TEXTURE_2D_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_TEXTURE_2D_NV
GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
GL_HILO_NV = Coin_SWIG_Python.GL_HILO_NV
GL_DSDT_NV = Coin_SWIG_Python.GL_DSDT_NV
GL_DSDT_MAG_NV = Coin_SWIG_Python.GL_DSDT_MAG_NV
GL_DSDT_MAG_VIB_NV = Coin_SWIG_Python.GL_DSDT_MAG_VIB_NV
GL_HILO16_NV = Coin_SWIG_Python.GL_HILO16_NV
GL_SIGNED_HILO_NV = Coin_SWIG_Python.GL_SIGNED_HILO_NV
GL_SIGNED_HILO16_NV = Coin_SWIG_Python.GL_SIGNED_HILO16_NV
GL_SIGNED_RGBA_NV = Coin_SWIG_Python.GL_SIGNED_RGBA_NV
GL_SIGNED_RGBA8_NV = Coin_SWIG_Python.GL_SIGNED_RGBA8_NV
GL_SIGNED_RGB_NV = Coin_SWIG_Python.GL_SIGNED_RGB_NV
GL_SIGNED_RGB8_NV = Coin_SWIG_Python.GL_SIGNED_RGB8_NV
GL_SIGNED_LUMINANCE_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE_NV
GL_SIGNED_LUMINANCE8_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE8_NV
GL_SIGNED_LUMINANCE_ALPHA_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE_ALPHA_NV
GL_SIGNED_LUMINANCE8_ALPHA8_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE8_ALPHA8_NV
GL_SIGNED_ALPHA_NV = Coin_SWIG_Python.GL_SIGNED_ALPHA_NV
GL_SIGNED_ALPHA8_NV = Coin_SWIG_Python.GL_SIGNED_ALPHA8_NV
GL_SIGNED_INTENSITY_NV = Coin_SWIG_Python.GL_SIGNED_INTENSITY_NV
GL_SIGNED_INTENSITY8_NV = Coin_SWIG_Python.GL_SIGNED_INTENSITY8_NV
GL_DSDT8_NV = Coin_SWIG_Python.GL_DSDT8_NV
GL_DSDT8_MAG8_NV = Coin_SWIG_Python.GL_DSDT8_MAG8_NV
GL_DSDT8_MAG8_INTENSITY8_NV = Coin_SWIG_Python.GL_DSDT8_MAG8_INTENSITY8_NV
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = Coin_SWIG_Python.GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = Coin_SWIG_Python.GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
GL_HI_SCALE_NV = Coin_SWIG_Python.GL_HI_SCALE_NV
GL_LO_SCALE_NV = Coin_SWIG_Python.GL_LO_SCALE_NV
GL_DS_SCALE_NV = Coin_SWIG_Python.GL_DS_SCALE_NV
GL_DT_SCALE_NV = Coin_SWIG_Python.GL_DT_SCALE_NV
GL_MAGNITUDE_SCALE_NV = Coin_SWIG_Python.GL_MAGNITUDE_SCALE_NV
GL_VIBRANCE_SCALE_NV = Coin_SWIG_Python.GL_VIBRANCE_SCALE_NV
GL_HI_BIAS_NV = Coin_SWIG_Python.GL_HI_BIAS_NV
GL_LO_BIAS_NV = Coin_SWIG_Python.GL_LO_BIAS_NV
GL_DS_BIAS_NV = Coin_SWIG_Python.GL_DS_BIAS_NV
GL_DT_BIAS_NV = Coin_SWIG_Python.GL_DT_BIAS_NV
GL_MAGNITUDE_BIAS_NV = Coin_SWIG_Python.GL_MAGNITUDE_BIAS_NV
GL_VIBRANCE_BIAS_NV = Coin_SWIG_Python.GL_VIBRANCE_BIAS_NV
GL_TEXTURE_BORDER_VALUES_NV = Coin_SWIG_Python.GL_TEXTURE_BORDER_VALUES_NV
GL_TEXTURE_HI_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_HI_SIZE_NV
GL_TEXTURE_LO_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_LO_SIZE_NV
GL_TEXTURE_DS_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_DS_SIZE_NV
GL_TEXTURE_DT_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_DT_SIZE_NV
GL_TEXTURE_MAG_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_MAG_SIZE_NV
GL_NORMAL_MAP = Coin_SWIG_Python.GL_NORMAL_MAP
GL_REFLECTION_MAP = Coin_SWIG_Python.GL_REFLECTION_MAP
GL_TEXTURE_CUBE_MAP = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = Coin_SWIG_Python.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_MAX_CUBE_MAP_TEXTURE_SIZE = Coin_SWIG_Python.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_COMBINE = Coin_SWIG_Python.GL_COMBINE
GL_COMBINE_RGB = Coin_SWIG_Python.GL_COMBINE_RGB
GL_COMBINE_ALPHA = Coin_SWIG_Python.GL_COMBINE_ALPHA
GL_RGB_SCALE = Coin_SWIG_Python.GL_RGB_SCALE
GL_ADD_SIGNED = Coin_SWIG_Python.GL_ADD_SIGNED
GL_INTERPOLATE = Coin_SWIG_Python.GL_INTERPOLATE
GL_CONSTANT = Coin_SWIG_Python.GL_CONSTANT
GL_PRIMARY_COLOR = Coin_SWIG_Python.GL_PRIMARY_COLOR
GL_PREVIOUS = Coin_SWIG_Python.GL_PREVIOUS
GL_SOURCE0_RGB = Coin_SWIG_Python.GL_SOURCE0_RGB
GL_SOURCE1_RGB = Coin_SWIG_Python.GL_SOURCE1_RGB
GL_SOURCE2_RGB = Coin_SWIG_Python.GL_SOURCE2_RGB
GL_SOURCE0_ALPHA = Coin_SWIG_Python.GL_SOURCE0_ALPHA
GL_SOURCE1_ALPHA = Coin_SWIG_Python.GL_SOURCE1_ALPHA
GL_SOURCE2_ALPHA = Coin_SWIG_Python.GL_SOURCE2_ALPHA
GL_OPERAND0_RGB = Coin_SWIG_Python.GL_OPERAND0_RGB
GL_OPERAND1_RGB = Coin_SWIG_Python.GL_OPERAND1_RGB
GL_OPERAND2_RGB = Coin_SWIG_Python.GL_OPERAND2_RGB
GL_OPERAND0_ALPHA = Coin_SWIG_Python.GL_OPERAND0_ALPHA
GL_OPERAND1_ALPHA = Coin_SWIG_Python.GL_OPERAND1_ALPHA
GL_OPERAND2_ALPHA = Coin_SWIG_Python.GL_OPERAND2_ALPHA
GL_SUBTRACT = Coin_SWIG_Python.GL_SUBTRACT
GL_DOT3_RGB = Coin_SWIG_Python.GL_DOT3_RGB
GL_DOT3_RGBA = Coin_SWIG_Python.GL_DOT3_RGBA
GL_GENERATE_MIPMAP_SGIS = Coin_SWIG_Python.GL_GENERATE_MIPMAP_SGIS
GL_GENERATE_MIPMAP_HINT_SGIS = Coin_SWIG_Python.GL_GENERATE_MIPMAP_HINT_SGIS
GL_FRAGMENT_PROGRAM_ARB = Coin_SWIG_Python.GL_FRAGMENT_PROGRAM_ARB
GL_PROGRAM_FORMAT_ASCII_ARB = Coin_SWIG_Python.GL_PROGRAM_FORMAT_ASCII_ARB
GL_PROGRAM_LENGTH_ARB = Coin_SWIG_Python.GL_PROGRAM_LENGTH_ARB
GL_PROGRAM_FORMAT_ARB = Coin_SWIG_Python.GL_PROGRAM_FORMAT_ARB
GL_PROGRAM_BINDING_ARB = Coin_SWIG_Python.GL_PROGRAM_BINDING_ARB
GL_PROGRAM_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_PROGRAM_TEMPORARIES_ARB = Coin_SWIG_Python.GL_PROGRAM_TEMPORARIES_ARB
GL_MAX_PROGRAM_TEMPORARIES_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_TEMPORARIES_ARB
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_PROGRAM_PARAMETERS_ARB = Coin_SWIG_Python.GL_PROGRAM_PARAMETERS_ARB
GL_MAX_PROGRAM_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_PARAMETERS_ARB
GL_PROGRAM_NATIVE_PARAMETERS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_PARAMETERS_ARB
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
GL_PROGRAM_ATTRIBS_ARB = Coin_SWIG_Python.GL_PROGRAM_ATTRIBS_ARB
GL_MAX_PROGRAM_ATTRIBS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ATTRIBS_ARB
GL_PROGRAM_NATIVE_ATTRIBS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = Coin_SWIG_Python.GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
GL_PROGRAM_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_ALU_INSTRUCTIONS_ARB
GL_PROGRAM_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_TEX_INSTRUCTIONS_ARB
GL_PROGRAM_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_TEX_INDIRECTIONS_ARB
GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
GL_PROGRAM_STRING_ARB = Coin_SWIG_Python.GL_PROGRAM_STRING_ARB
GL_PROGRAM_ERROR_POSITION_ARB = Coin_SWIG_Python.GL_PROGRAM_ERROR_POSITION_ARB
GL_CURRENT_MATRIX_ARB = Coin_SWIG_Python.GL_CURRENT_MATRIX_ARB
GL_TRANSPOSE_CURRENT_MATRIX_ARB = Coin_SWIG_Python.GL_TRANSPOSE_CURRENT_MATRIX_ARB
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = Coin_SWIG_Python.GL_CURRENT_MATRIX_STACK_DEPTH_ARB
GL_MAX_PROGRAM_MATRICES_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_MATRICES_ARB
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
GL_MAX_TEXTURE_COORDS_ARB = Coin_SWIG_Python.GL_MAX_TEXTURE_COORDS_ARB
GL_MAX_TEXTURE_IMAGE_UNITS_ARB = Coin_SWIG_Python.GL_MAX_TEXTURE_IMAGE_UNITS_ARB
GL_PROGRAM_ERROR_STRING_ARB = Coin_SWIG_Python.GL_PROGRAM_ERROR_STRING_ARB
GL_MATRIX0_ARB = Coin_SWIG_Python.GL_MATRIX0_ARB
GL_MATRIX1_ARB = Coin_SWIG_Python.GL_MATRIX1_ARB
GL_MATRIX2_ARB = Coin_SWIG_Python.GL_MATRIX2_ARB
GL_MATRIX3_ARB = Coin_SWIG_Python.GL_MATRIX3_ARB
GL_MATRIX4_ARB = Coin_SWIG_Python.GL_MATRIX4_ARB
GL_MATRIX5_ARB = Coin_SWIG_Python.GL_MATRIX5_ARB
GL_MATRIX6_ARB = Coin_SWIG_Python.GL_MATRIX6_ARB
GL_MATRIX7_ARB = Coin_SWIG_Python.GL_MATRIX7_ARB
GL_MATRIX8_ARB = Coin_SWIG_Python.GL_MATRIX8_ARB
GL_MATRIX9_ARB = Coin_SWIG_Python.GL_MATRIX9_ARB
GL_MATRIX10_ARB = Coin_SWIG_Python.GL_MATRIX10_ARB
GL_MATRIX11_ARB = Coin_SWIG_Python.GL_MATRIX11_ARB
GL_MATRIX12_ARB = Coin_SWIG_Python.GL_MATRIX12_ARB
GL_MATRIX13_ARB = Coin_SWIG_Python.GL_MATRIX13_ARB
GL_MATRIX14_ARB = Coin_SWIG_Python.GL_MATRIX14_ARB
GL_MATRIX15_ARB = Coin_SWIG_Python.GL_MATRIX15_ARB
GL_MATRIX16_ARB = Coin_SWIG_Python.GL_MATRIX16_ARB
GL_MATRIX17_ARB = Coin_SWIG_Python.GL_MATRIX17_ARB
GL_MATRIX18_ARB = Coin_SWIG_Python.GL_MATRIX18_ARB
GL_MATRIX19_ARB = Coin_SWIG_Python.GL_MATRIX19_ARB
GL_MATRIX20_ARB = Coin_SWIG_Python.GL_MATRIX20_ARB
GL_MATRIX21_ARB = Coin_SWIG_Python.GL_MATRIX21_ARB
GL_MATRIX22_ARB = Coin_SWIG_Python.GL_MATRIX22_ARB
GL_MATRIX23_ARB = Coin_SWIG_Python.GL_MATRIX23_ARB
GL_MATRIX24_ARB = Coin_SWIG_Python.GL_MATRIX24_ARB
GL_MATRIX25_ARB = Coin_SWIG_Python.GL_MATRIX25_ARB
GL_MATRIX26_ARB = Coin_SWIG_Python.GL_MATRIX26_ARB
GL_MATRIX27_ARB = Coin_SWIG_Python.GL_MATRIX27_ARB
GL_MATRIX28_ARB = Coin_SWIG_Python.GL_MATRIX28_ARB
GL_MATRIX29_ARB = Coin_SWIG_Python.GL_MATRIX29_ARB
GL_MATRIX30_ARB = Coin_SWIG_Python.GL_MATRIX30_ARB
GL_MATRIX31_ARB = Coin_SWIG_Python.GL_MATRIX31_ARB
GL_VERTEX_PROGRAM_ARB = Coin_SWIG_Python.GL_VERTEX_PROGRAM_ARB
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = Coin_SWIG_Python.GL_VERTEX_PROGRAM_POINT_SIZE_ARB
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = Coin_SWIG_Python.GL_VERTEX_PROGRAM_TWO_SIDE_ARB
GL_COLOR_SUM_ARB = Coin_SWIG_Python.GL_COLOR_SUM_ARB
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
GL_CURRENT_VERTEX_ATTRIB_ARB = Coin_SWIG_Python.GL_CURRENT_VERTEX_ATTRIB_ARB
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
GL_PROGRAM_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_PROGRAM_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_VERTEX_ATTRIBS_ARB = Coin_SWIG_Python.GL_MAX_VERTEX_ATTRIBS_ARB
GL_VERTEX_SHADER_ARB = Coin_SWIG_Python.GL_VERTEX_SHADER_ARB
GL_FRAGMENT_SHADER_ARB = Coin_SWIG_Python.GL_FRAGMENT_SHADER_ARB
GL_OBJECT_ACTIVE_UNIFORMS_ARB = Coin_SWIG_Python.GL_OBJECT_ACTIVE_UNIFORMS_ARB
GL_GEOMETRY_SHADER_EXT = Coin_SWIG_Python.GL_GEOMETRY_SHADER_EXT
GL_GEOMETRY_VERTICES_OUT_EXT = Coin_SWIG_Python.GL_GEOMETRY_VERTICES_OUT_EXT
GL_GEOMETRY_INPUT_TYPE_EXT = Coin_SWIG_Python.GL_GEOMETRY_INPUT_TYPE_EXT
GL_GEOMETRY_OUTPUT_TYPE_EXT = Coin_SWIG_Python.GL_GEOMETRY_OUTPUT_TYPE_EXT
GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
GL_MAX_VARYING_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_VARYING_COMPONENTS_EXT
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
GL_INT_VEC2_ARB = Coin_SWIG_Python.GL_INT_VEC2_ARB
GL_INT_VEC3_ARB = Coin_SWIG_Python.GL_INT_VEC3_ARB
GL_INT_VEC4_ARB = Coin_SWIG_Python.GL_INT_VEC4_ARB
GL_FLOAT_VEC2_ARB = Coin_SWIG_Python.GL_FLOAT_VEC2_ARB
GL_FLOAT_VEC3_ARB = Coin_SWIG_Python.GL_FLOAT_VEC3_ARB
GL_FLOAT_VEC4_ARB = Coin_SWIG_Python.GL_FLOAT_VEC4_ARB
GL_FLOAT_MAT2_ARB = Coin_SWIG_Python.GL_FLOAT_MAT2_ARB
GL_FLOAT_MAT3_ARB = Coin_SWIG_Python.GL_FLOAT_MAT3_ARB
GL_FLOAT_MAT4_ARB = Coin_SWIG_Python.GL_FLOAT_MAT4_ARB
GL_SAMPLER_1D_ARB = Coin_SWIG_Python.GL_SAMPLER_1D_ARB
GL_SAMPLER_2D_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_ARB
GL_SAMPLER_3D_ARB = Coin_SWIG_Python.GL_SAMPLER_3D_ARB
GL_SAMPLER_CUBE_ARB = Coin_SWIG_Python.GL_SAMPLER_CUBE_ARB
GL_SAMPLER_1D_SHADOW_ARB = Coin_SWIG_Python.GL_SAMPLER_1D_SHADOW_ARB
GL_SAMPLER_2D_SHADOW_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_SHADOW_ARB
GL_SAMPLER_2D_RECT_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_RECT_ARB
GL_SAMPLER_2D_RECT_SHADOW_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_RECT_SHADOW_ARB
GL_OBJECT_COMPILE_STATUS_ARB = Coin_SWIG_Python.GL_OBJECT_COMPILE_STATUS_ARB
GL_OBJECT_INFO_LOG_LENGTH_ARB = Coin_SWIG_Python.GL_OBJECT_INFO_LOG_LENGTH_ARB
GL_OBJECT_LINK_STATUS_ARB = Coin_SWIG_Python.GL_OBJECT_LINK_STATUS_ARB
GL_TEXTURE_MAX_ANISOTROPY_EXT = Coin_SWIG_Python.GL_TEXTURE_MAX_ANISOTROPY_EXT
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = Coin_SWIG_Python.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
GL_SAMPLES_PASSED = Coin_SWIG_Python.GL_SAMPLES_PASSED
GL_QUERY_COUNTER_BITS = Coin_SWIG_Python.GL_QUERY_COUNTER_BITS
GL_CURRENT_QUERY = Coin_SWIG_Python.GL_CURRENT_QUERY
GL_QUERY_RESULT = Coin_SWIG_Python.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = Coin_SWIG_Python.GL_QUERY_RESULT_AVAILABLE
GL_CLIENT_PIXEL_STORE_BIT = Coin_SWIG_Python.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = Coin_SWIG_Python.GL_CLIENT_VERTEX_ARRAY_BIT
GL_CLIENT_ALL_ATTRIB_BITS = Coin_SWIG_Python.GL_CLIENT_ALL_ATTRIB_BITS
GL_ALL_CLIENT_ATTRIB_BITS = Coin_SWIG_Python.GL_ALL_CLIENT_ATTRIB_BITS
GL_INVALID_FRAMEBUFFER_OPERATION_EXT = Coin_SWIG_Python.GL_INVALID_FRAMEBUFFER_OPERATION_EXT
GL_MAX_RENDERBUFFER_SIZE_EXT = Coin_SWIG_Python.GL_MAX_RENDERBUFFER_SIZE_EXT
GL_FRAMEBUFFER_BINDING_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_BINDING_EXT
GL_RENDERBUFFER_BINDING_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_BINDING_EXT
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
GL_FRAMEBUFFER_COMPLETE_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_COMPLETE_EXT
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
GL_FRAMEBUFFER_UNSUPPORTED_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_UNSUPPORTED_EXT
GL_MAX_COLOR_ATTACHMENTS_EXT = Coin_SWIG_Python.GL_MAX_COLOR_ATTACHMENTS_EXT
GL_COLOR_ATTACHMENT0_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT0_EXT
GL_COLOR_ATTACHMENT1_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT1_EXT
GL_COLOR_ATTACHMENT2_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT2_EXT
GL_COLOR_ATTACHMENT3_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT3_EXT
GL_COLOR_ATTACHMENT4_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT4_EXT
GL_COLOR_ATTACHMENT5_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT5_EXT
GL_COLOR_ATTACHMENT6_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT6_EXT
GL_COLOR_ATTACHMENT7_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT7_EXT
GL_COLOR_ATTACHMENT8_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT8_EXT
GL_COLOR_ATTACHMENT9_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT9_EXT
GL_COLOR_ATTACHMENT10_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT10_EXT
GL_COLOR_ATTACHMENT11_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT11_EXT
GL_COLOR_ATTACHMENT12_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT12_EXT
GL_COLOR_ATTACHMENT13_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT13_EXT
GL_COLOR_ATTACHMENT14_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT14_EXT
GL_COLOR_ATTACHMENT15_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT15_EXT
GL_DEPTH_ATTACHMENT_EXT = Coin_SWIG_Python.GL_DEPTH_ATTACHMENT_EXT
GL_STENCIL_ATTACHMENT_EXT = Coin_SWIG_Python.GL_STENCIL_ATTACHMENT_EXT
GL_FRAMEBUFFER_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_EXT
GL_RENDERBUFFER_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_EXT
GL_RENDERBUFFER_WIDTH_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_WIDTH_EXT
GL_RENDERBUFFER_HEIGHT_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_HEIGHT_EXT
GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
GL_STENCIL_INDEX1_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX1_EXT
GL_STENCIL_INDEX4_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX4_EXT
GL_STENCIL_INDEX8_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX8_EXT
GL_STENCIL_INDEX16_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX16_EXT
GL_RENDERBUFFER_RED_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_RED_SIZE_EXT
GL_RENDERBUFFER_GREEN_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_GREEN_SIZE_EXT
GL_RENDERBUFFER_BLUE_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_BLUE_SIZE_EXT
GL_RENDERBUFFER_ALPHA_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_ALPHA_SIZE_EXT
GL_RENDERBUFFER_DEPTH_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_DEPTH_SIZE_EXT
GL_RENDERBUFFER_STENCIL_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_STENCIL_SIZE_EXT
GLX_PBUFFER_WIDTH = Coin_SWIG_Python.GLX_PBUFFER_WIDTH
GLX_PBUFFER_HEIGHT = Coin_SWIG_Python.GLX_PBUFFER_HEIGHT
GLX_DRAWABLE_TYPE = Coin_SWIG_Python.GLX_DRAWABLE_TYPE
GLX_RENDER_TYPE = Coin_SWIG_Python.GLX_RENDER_TYPE
GLX_RGBA_TYPE = Coin_SWIG_Python.GLX_RGBA_TYPE
GLX_RGBA_BIT = Coin_SWIG_Python.GLX_RGBA_BIT
GLX_PBUFFER_BIT = Coin_SWIG_Python.GLX_PBUFFER_BIT
GLX_MAX_PBUFFER_WIDTH = Coin_SWIG_Python.GLX_MAX_PBUFFER_WIDTH
GLX_MAX_PBUFFER_HEIGHT = Coin_SWIG_Python.GLX_MAX_PBUFFER_HEIGHT
GLX_MAX_PBUFFER_PIXELS = Coin_SWIG_Python.GLX_MAX_PBUFFER_PIXELS
GLU_VERSION = Coin_SWIG_Python.GLU_VERSION
GLU_EXTENSIONS = Coin_SWIG_Python.GLU_EXTENSIONS
GLU_OUTLINE_POLYGON = Coin_SWIG_Python.GLU_OUTLINE_POLYGON
GLU_OUTLINE_PATCH = Coin_SWIG_Python.GLU_OUTLINE_PATCH
GLU_NURBS_ERROR = Coin_SWIG_Python.GLU_NURBS_ERROR
GLU_ERROR = Coin_SWIG_Python.GLU_ERROR
GLU_NURBS_BEGIN = Coin_SWIG_Python.GLU_NURBS_BEGIN
GLU_NURBS_VERTEX = Coin_SWIG_Python.GLU_NURBS_VERTEX
GLU_NURBS_NORMAL = Coin_SWIG_Python.GLU_NURBS_NORMAL
GLU_NURBS_COLOR = Coin_SWIG_Python.GLU_NURBS_COLOR
GLU_NURBS_TEXTURE_COORD = Coin_SWIG_Python.GLU_NURBS_TEXTURE_COORD
GLU_NURBS_END = Coin_SWIG_Python.GLU_NURBS_END
GLU_NURBS_BEGIN_DATA = Coin_SWIG_Python.GLU_NURBS_BEGIN_DATA
GLU_NURBS_VERTEX_DATA = Coin_SWIG_Python.GLU_NURBS_VERTEX_DATA
GLU_NURBS_NORMAL_DATA = Coin_SWIG_Python.GLU_NURBS_NORMAL_DATA
GLU_NURBS_COLOR_DATA = Coin_SWIG_Python.GLU_NURBS_COLOR_DATA
GLU_NURBS_TEXTURE_COORD_DATA = Coin_SWIG_Python.GLU_NURBS_TEXTURE_COORD_DATA
GLU_NURBS_END_DATA = Coin_SWIG_Python.GLU_NURBS_END_DATA
GLU_AUTO_LOAD_MATRIX = Coin_SWIG_Python.GLU_AUTO_LOAD_MATRIX
GLU_CULLING = Coin_SWIG_Python.GLU_CULLING
GLU_SAMPLING_TOLERANCE = Coin_SWIG_Python.GLU_SAMPLING_TOLERANCE
GLU_DISPLAY_MODE = Coin_SWIG_Python.GLU_DISPLAY_MODE
GLU_PARAMETRIC_TOLERANCE = Coin_SWIG_Python.GLU_PARAMETRIC_TOLERANCE
GLU_SAMPLING_METHOD = Coin_SWIG_Python.GLU_SAMPLING_METHOD
GLU_U_STEP = Coin_SWIG_Python.GLU_U_STEP
GLU_V_STEP = Coin_SWIG_Python.GLU_V_STEP
GLU_NURBS_MODE = Coin_SWIG_Python.GLU_NURBS_MODE
GLU_NURBS_TESSELLATOR = Coin_SWIG_Python.GLU_NURBS_TESSELLATOR
GLU_NURBS_RENDERER = Coin_SWIG_Python.GLU_NURBS_RENDERER
GLU_OBJECT_PARAMETRIC_ERROR = Coin_SWIG_Python.GLU_OBJECT_PARAMETRIC_ERROR
GLU_OBJECT_PATH_LENGTH = Coin_SWIG_Python.GLU_OBJECT_PATH_LENGTH
GLU_PATH_LENGTH = Coin_SWIG_Python.GLU_PATH_LENGTH
GLU_PARAMETRIC_ERROR = Coin_SWIG_Python.GLU_PARAMETRIC_ERROR
GLU_DOMAIN_DISTANCE = Coin_SWIG_Python.GLU_DOMAIN_DISTANCE
GLU_MAP1_TRIM_2 = Coin_SWIG_Python.GLU_MAP1_TRIM_2
GLU_MAP1_TRIM_3 = Coin_SWIG_Python.GLU_MAP1_TRIM_3
GLU_POINT = Coin_SWIG_Python.GLU_POINT
GLU_LINE = Coin_SWIG_Python.GLU_LINE
GLU_FILL = Coin_SWIG_Python.GLU_FILL
GLU_SILHOUETTE = Coin_SWIG_Python.GLU_SILHOUETTE
GLU_TESS_BEGIN = Coin_SWIG_Python.GLU_TESS_BEGIN
GLU_TESS_VERTEX = Coin_SWIG_Python.GLU_TESS_VERTEX
GLU_TESS_END = Coin_SWIG_Python.GLU_TESS_END
GLU_TESS_ERROR = Coin_SWIG_Python.GLU_TESS_ERROR
GLU_TESS_COMBINE = Coin_SWIG_Python.GLU_TESS_COMBINE
GLU_TESS_BEGIN_DATA = Coin_SWIG_Python.GLU_TESS_BEGIN_DATA
GLU_TESS_VERTEX_DATA = Coin_SWIG_Python.GLU_TESS_VERTEX_DATA
GLU_TESS_END_DATA = Coin_SWIG_Python.GLU_TESS_END_DATA
GLU_TESS_ERROR_DATA = Coin_SWIG_Python.GLU_TESS_ERROR_DATA
GLU_TESS_MISSING_BEGIN_POLYGON = Coin_SWIG_Python.GLU_TESS_MISSING_BEGIN_POLYGON
GLU_TESS_MISSING_BEGIN_CONTOUR = Coin_SWIG_Python.GLU_TESS_MISSING_BEGIN_CONTOUR
GLU_TESS_MISSING_END_POLYGON = Coin_SWIG_Python.GLU_TESS_MISSING_END_POLYGON
GLU_TESS_MISSING_END_CONTOUR = Coin_SWIG_Python.GLU_TESS_MISSING_END_CONTOUR
GLU_TESS_NEED_COMBINE_CALLBACK = Coin_SWIG_Python.GLU_TESS_NEED_COMBINE_CALLBACK
WGL_COLOR_BITS_ARB = Coin_SWIG_Python.WGL_COLOR_BITS_ARB
WGL_ALPHA_BITS_ARB = Coin_SWIG_Python.WGL_ALPHA_BITS_ARB
WGL_DEPTH_BITS_ARB = Coin_SWIG_Python.WGL_DEPTH_BITS_ARB
WGL_STENCIL_BITS_ARB = Coin_SWIG_Python.WGL_STENCIL_BITS_ARB
WGL_DRAW_TO_PBUFFER_ARB = Coin_SWIG_Python.WGL_DRAW_TO_PBUFFER_ARB
WGL_PBUFFER_WIDTH_ARB = Coin_SWIG_Python.WGL_PBUFFER_WIDTH_ARB
WGL_PBUFFER_HEIGHT_ARB = Coin_SWIG_Python.WGL_PBUFFER_HEIGHT_ARB
WGL_BIND_TO_TEXTURE_RGB_ARB = Coin_SWIG_Python.WGL_BIND_TO_TEXTURE_RGB_ARB
WGL_BIND_TO_TEXTURE_RGBA_ARB = Coin_SWIG_Python.WGL_BIND_TO_TEXTURE_RGBA_ARB
WGL_TEXTURE_FORMAT_ARB = Coin_SWIG_Python.WGL_TEXTURE_FORMAT_ARB
WGL_TEXTURE_TARGET_ARB = Coin_SWIG_Python.WGL_TEXTURE_TARGET_ARB
WGL_MIPMAP_TEXTURE_ARB = Coin_SWIG_Python.WGL_MIPMAP_TEXTURE_ARB
WGL_TEXTURE_RGB_ARB = Coin_SWIG_Python.WGL_TEXTURE_RGB_ARB
WGL_TEXTURE_RGBA_ARB = Coin_SWIG_Python.WGL_TEXTURE_RGBA_ARB
WGL_NO_TEXTURE_ARB = Coin_SWIG_Python.WGL_NO_TEXTURE_ARB
WGL_TEXTURE_CUBE_MAP_ARB = Coin_SWIG_Python.WGL_TEXTURE_CUBE_MAP_ARB
WGL_TEXTURE_1D_ARB = Coin_SWIG_Python.WGL_TEXTURE_1D_ARB
WGL_TEXTURE_2D_ARB = Coin_SWIG_Python.WGL_TEXTURE_2D_ARB
WGL_MIPMAP_LEVEL_ARB = Coin_SWIG_Python.WGL_MIPMAP_LEVEL_ARB
WGL_FRONT_LEFT_ARB = Coin_SWIG_Python.WGL_FRONT_LEFT_ARB
WGL_FRONT_RIGHT_ARB = Coin_SWIG_Python.WGL_FRONT_RIGHT_ARB
WGL_BACK_LEFT_ARB = Coin_SWIG_Python.WGL_BACK_LEFT_ARB
WGL_BACK_RIGHT_ARB = Coin_SWIG_Python.WGL_BACK_RIGHT_ARB
WGL_MAX_PBUFFER_PIXELS_ARB = Coin_SWIG_Python.WGL_MAX_PBUFFER_PIXELS_ARB
WGL_MAX_PBUFFER_WIDTH_ARB = Coin_SWIG_Python.WGL_MAX_PBUFFER_WIDTH_ARB
WGL_MAX_PBUFFER_HEIGHT_ARB = Coin_SWIG_Python.WGL_MAX_PBUFFER_HEIGHT_ARB
class SbBarrier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, count):
        Coin_SWIG_Python.SbBarrier_swiginit(self, Coin_SWIG_Python.new_SbBarrier(count))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBarrier

    def enter(self):
        return Coin_SWIG_Python.SbBarrier_enter(self)

# Register SbBarrier in Coin_SWIG_Python:
Coin_SWIG_Python.SbBarrier_swigregister(SbBarrier)

class SbMutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SbMutex_swiginit(self, Coin_SWIG_Python.new_SbMutex())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbMutex

    def lock(self):
        return Coin_SWIG_Python.SbMutex_lock(self)

    def tryLock(self):
        return Coin_SWIG_Python.SbMutex_tryLock(self)

    def unlock(self):
        return Coin_SWIG_Python.SbMutex_unlock(self)

# Register SbMutex in Coin_SWIG_Python:
Coin_SWIG_Python.SbMutex_swigregister(SbMutex)

class SbThreadAutoLock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mutexptr):
        Coin_SWIG_Python.SbThreadAutoLock_swiginit(self, Coin_SWIG_Python.new_SbThreadAutoLock(mutexptr))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbThreadAutoLock

# Register SbThreadAutoLock in Coin_SWIG_Python:
Coin_SWIG_Python.SbThreadAutoLock_swigregister(SbThreadAutoLock)

class SbCondVar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SbCondVar_swiginit(self, Coin_SWIG_Python.new_SbCondVar())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCondVar

    def wait(self, mutex):
        return Coin_SWIG_Python.SbCondVar_wait(self, mutex)

    def timedWait(self, mutex, period):
        return Coin_SWIG_Python.SbCondVar_timedWait(self, mutex, period)

    def wakeOne(self):
        return Coin_SWIG_Python.SbCondVar_wakeOne(self)

    def wakeAll(self):
        return Coin_SWIG_Python.SbCondVar_wakeAll(self)

# Register SbCondVar in Coin_SWIG_Python:
Coin_SWIG_Python.SbCondVar_swigregister(SbCondVar)

class SbFifo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        Coin_SWIG_Python.SbFifo_swiginit(self, Coin_SWIG_Python.new_SbFifo())
    __swig_destroy__ = Coin_SWIG_Python.delete_SbFifo

    def assign(self, ptr, type):
        return Coin_SWIG_Python.SbFifo_assign(self, ptr, type)

    def retrieve(self, ptr, type):
        return Coin_SWIG_Python.SbFifo_retrieve(self, ptr, type)

    def tryRetrieve(self, ptr, type):
        return Coin_SWIG_Python.SbFifo_tryRetrieve(self, ptr, type)

    def size(self):
        return Coin_SWIG_Python.SbFifo_size(self)

    def lock(self):
        return Coin_SWIG_Python.SbFifo_lock(self)

    def unlock(self):
        return Coin_SWIG_Python.SbFifo_unlock(self)

    def peek(self, item, type):
        return Coin_SWIG_Python.SbFifo_peek(self, item, type)

    def contains(self, item):
        return Coin_SWIG_Python.SbFifo_contains(self, item)

    def reclaim(self, item):
        return Coin_SWIG_Python.SbFifo_reclaim(self, item)

# Register SbFifo in Coin_SWIG_Python:
Coin_SWIG_Python.SbFifo_swigregister(SbFifo)

class SbRWMutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    READ_PRECEDENCE = Coin_SWIG_Python.SbRWMutex_READ_PRECEDENCE
    WRITE_PRECEDENCE = Coin_SWIG_Python.SbRWMutex_WRITE_PRECEDENCE

    def __init__(self, policy):
        Coin_SWIG_Python.SbRWMutex_swiginit(self, Coin_SWIG_Python.new_SbRWMutex(policy))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbRWMutex

    def writeLock(self):
        return Coin_SWIG_Python.SbRWMutex_writeLock(self)

    def tryWriteLock(self):
        return Coin_SWIG_Python.SbRWMutex_tryWriteLock(self)

    def writeUnlock(self):
        return Coin_SWIG_Python.SbRWMutex_writeUnlock(self)

    def readLock(self):
        return Coin_SWIG_Python.SbRWMutex_readLock(self)

    def tryReadLock(self):
        return Coin_SWIG_Python.SbRWMutex_tryReadLock(self)

    def readUnlock(self):
        return Coin_SWIG_Python.SbRWMutex_readUnlock(self)

# Register SbRWMutex in Coin_SWIG_Python:
Coin_SWIG_Python.SbRWMutex_swigregister(SbRWMutex)

class SbStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        Coin_SWIG_Python.SbStorage_swiginit(self, Coin_SWIG_Python.new_SbStorage(*args))
    __swig_destroy__ = Coin_SWIG_Python.delete_SbStorage

    def get(self):
        return Coin_SWIG_Python.SbStorage_get(self)

    def applyToAll(self, func, closure):
        return Coin_SWIG_Python.SbStorage_applyToAll(self, func, closure)

# Register SbStorage in Coin_SWIG_Python:
Coin_SWIG_Python.SbStorage_swigregister(SbStorage)

class SbThread(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(func, closure):
        return Coin_SWIG_Python.SbThread_create(func, closure)

    @staticmethod
    def destroy(thread):
        return Coin_SWIG_Python.SbThread_destroy(thread)

    @staticmethod
    def join(*args):
        return Coin_SWIG_Python.SbThread_join(*args)

# Register SbThread in Coin_SWIG_Python:
Coin_SWIG_Python.SbThread_swigregister(SbThread)

def SbThread_create(func, closure):
    return Coin_SWIG_Python.SbThread_create(func, closure)

def SbThread_destroy(thread):
    return Coin_SWIG_Python.SbThread_destroy(thread)

def SbThread_join(*args):
    return Coin_SWIG_Python.SbThread_join(*args)

class SoVRMLParent(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLParent_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLParent_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLParent_initClass()
    children = property(Coin_SWIG_Python.SoVRMLParent_children_get, Coin_SWIG_Python.SoVRMLParent_children_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoVRMLParent_affectsState(self)

    def addChild(self, child):
        return Coin_SWIG_Python.SoVRMLParent_addChild(self, child)

    def insertChild(self, child, idx):
        return Coin_SWIG_Python.SoVRMLParent_insertChild(self, child, idx)

    def getChild(self, idx):
        return Coin_SWIG_Python.SoVRMLParent_getChild(self, idx)

    def findChild(self, child):
        return Coin_SWIG_Python.SoVRMLParent_findChild(self, child)

    def getNumChildren(self):
        return Coin_SWIG_Python.SoVRMLParent_getNumChildren(self)

    def removeChild(self, *args):
        return Coin_SWIG_Python.SoVRMLParent_removeChild(self, *args)

    def removeAllChildren(self):
        return Coin_SWIG_Python.SoVRMLParent_removeAllChildren(self)

    def replaceChild(self, *args):
        return Coin_SWIG_Python.SoVRMLParent_replaceChild(self, *args)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLParent_getChildren(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLParent_doAction(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLParent_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLParent_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLParent_getPrimitiveCount(self, action)

    @staticmethod
    def updateChildList(*args):
        return Coin_SWIG_Python.SoVRMLParent_updateChildList(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLParent

# Register SoVRMLParent in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLParent_swigregister(SoVRMLParent)

def SoVRMLParent_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLParent_getClassTypeId()

def SoVRMLParent_initClass():
    return Coin_SWIG_Python.SoVRMLParent_initClass()

def SoVRMLParent_updateChildList(*args):
    return Coin_SWIG_Python.SoVRMLParent_updateChildList(*args)

class SoVRMLAnchor(SoVRMLParent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLAnchor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLAnchor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLAnchor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLAnchor_swiginit(self, Coin_SWIG_Python.new_SoVRMLAnchor())
    url = property(Coin_SWIG_Python.SoVRMLAnchor_url_get, Coin_SWIG_Python.SoVRMLAnchor_url_set)
    description = property(Coin_SWIG_Python.SoVRMLAnchor_description_get, Coin_SWIG_Python.SoVRMLAnchor_description_set)
    parameter = property(Coin_SWIG_Python.SoVRMLAnchor_parameter_get, Coin_SWIG_Python.SoVRMLAnchor_parameter_set)
    bboxCenter = property(Coin_SWIG_Python.SoVRMLAnchor_bboxCenter_get, Coin_SWIG_Python.SoVRMLAnchor_bboxCenter_set)
    bboxSize = property(Coin_SWIG_Python.SoVRMLAnchor_bboxSize_get, Coin_SWIG_Python.SoVRMLAnchor_bboxSize_set)

    @staticmethod
    def setFetchURLCallBack(arg1, closure):
        return Coin_SWIG_Python.SoVRMLAnchor_setFetchURLCallBack(arg1, closure)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLAnchor_handleEvent(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLAnchor

# Register SoVRMLAnchor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLAnchor_swigregister(SoVRMLAnchor)

def SoVRMLAnchor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLAnchor_getClassTypeId()

def SoVRMLAnchor_initClass():
    return Coin_SWIG_Python.SoVRMLAnchor_initClass()

def SoVRMLAnchor_setFetchURLCallBack(arg1, closure):
    return Coin_SWIG_Python.SoVRMLAnchor_setFetchURLCallBack(arg1, closure)

class SoVRMLAppearance(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLAppearance_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLAppearance_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLAppearance_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLAppearance_swiginit(self, Coin_SWIG_Python.new_SoVRMLAppearance())
    material = property(Coin_SWIG_Python.SoVRMLAppearance_material_get, Coin_SWIG_Python.SoVRMLAppearance_material_set)
    texture = property(Coin_SWIG_Python.SoVRMLAppearance_texture_get, Coin_SWIG_Python.SoVRMLAppearance_texture_set)
    textureTransform = property(Coin_SWIG_Python.SoVRMLAppearance_textureTransform_get, Coin_SWIG_Python.SoVRMLAppearance_textureTransform_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLAppearance_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLAppearance_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLAppearance_GLRender(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLAppearance_search(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLAppearance_getChildren(self)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLAppearance_notify(self, list)

    def copyContents(self, srcFrom, copyConn):
        return Coin_SWIG_Python.SoVRMLAppearance_copyContents(self, srcFrom, copyConn)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLAppearance

# Register SoVRMLAppearance in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLAppearance_swigregister(SoVRMLAppearance)

def SoVRMLAppearance_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLAppearance_getClassTypeId()

def SoVRMLAppearance_initClass():
    return Coin_SWIG_Python.SoVRMLAppearance_initClass()

class SoVRMLAudioClip(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLAudioClip_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLAudioClip_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLAudioClip_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLAudioClip_swiginit(self, Coin_SWIG_Python.new_SoVRMLAudioClip())
    description = property(Coin_SWIG_Python.SoVRMLAudioClip_description_get, Coin_SWIG_Python.SoVRMLAudioClip_description_set)
    loop = property(Coin_SWIG_Python.SoVRMLAudioClip_loop_get, Coin_SWIG_Python.SoVRMLAudioClip_loop_set)
    pitch = property(Coin_SWIG_Python.SoVRMLAudioClip_pitch_get, Coin_SWIG_Python.SoVRMLAudioClip_pitch_set)
    startTime = property(Coin_SWIG_Python.SoVRMLAudioClip_startTime_get, Coin_SWIG_Python.SoVRMLAudioClip_startTime_set)
    stopTime = property(Coin_SWIG_Python.SoVRMLAudioClip_stopTime_get, Coin_SWIG_Python.SoVRMLAudioClip_stopTime_set)
    url = property(Coin_SWIG_Python.SoVRMLAudioClip_url_get, Coin_SWIG_Python.SoVRMLAudioClip_url_set)

    @staticmethod
    def setSubdirectories(subdirectories):
        return Coin_SWIG_Python.SoVRMLAudioClip_setSubdirectories(subdirectories)

    @staticmethod
    def getSubdirectories():
        return Coin_SWIG_Python.SoVRMLAudioClip_getSubdirectories()

    @staticmethod
    def setDefaultPauseBetweenTracks(pause):
        return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultPauseBetweenTracks(pause)

    @staticmethod
    def getDefaultPauseBetweenTracks():
        return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultPauseBetweenTracks()

    @staticmethod
    def setDefaultIntroPause(pause):
        return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultIntroPause(pause)

    @staticmethod
    def getDefaultIntroPause():
        return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultIntroPause()

    @staticmethod
    def setDefaultSampleRate(samplerate):
        return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultSampleRate(samplerate)

    @staticmethod
    def getDefaultSampleRate():
        return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultSampleRate()

    @staticmethod
    def setDefaultTimerInterval(interval):
        return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultTimerInterval(interval)

    @staticmethod
    def getDefaultTimerInterval():
        return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultTimerInterval()

    def getSampleRate(self):
        return Coin_SWIG_Python.SoVRMLAudioClip_getSampleRate(self)

    def open(self, url):
        return Coin_SWIG_Python.SoVRMLAudioClip_open(self, url)

    def read(self, datasource, buffer, numframes, channels):
        return Coin_SWIG_Python.SoVRMLAudioClip_read(self, datasource, buffer, numframes, channels)

    def seek(self, datasource, offset, whence):
        return Coin_SWIG_Python.SoVRMLAudioClip_seek(self, datasource, offset, whence)

    def tell(self, datasource):
        return Coin_SWIG_Python.SoVRMLAudioClip_tell(self, datasource)

    def close(self, datasource):
        return Coin_SWIG_Python.SoVRMLAudioClip_close(self, datasource)

    def setCallbacks(self, opencb, readcb, seekcb, tellcb, closecb, userdataptr):
        return Coin_SWIG_Python.SoVRMLAudioClip_setCallbacks(self, opencb, readcb, seekcb, tellcb, closecb, userdataptr)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLAudioClip

# Register SoVRMLAudioClip in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLAudioClip_swigregister(SoVRMLAudioClip)

def SoVRMLAudioClip_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLAudioClip_getClassTypeId()

def SoVRMLAudioClip_initClass():
    return Coin_SWIG_Python.SoVRMLAudioClip_initClass()

def SoVRMLAudioClip_setSubdirectories(subdirectories):
    return Coin_SWIG_Python.SoVRMLAudioClip_setSubdirectories(subdirectories)

def SoVRMLAudioClip_getSubdirectories():
    return Coin_SWIG_Python.SoVRMLAudioClip_getSubdirectories()

def SoVRMLAudioClip_setDefaultPauseBetweenTracks(pause):
    return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultPauseBetweenTracks(pause)

def SoVRMLAudioClip_getDefaultPauseBetweenTracks():
    return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultPauseBetweenTracks()

def SoVRMLAudioClip_setDefaultIntroPause(pause):
    return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultIntroPause(pause)

def SoVRMLAudioClip_getDefaultIntroPause():
    return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultIntroPause()

def SoVRMLAudioClip_setDefaultSampleRate(samplerate):
    return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultSampleRate(samplerate)

def SoVRMLAudioClip_getDefaultSampleRate():
    return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultSampleRate()

def SoVRMLAudioClip_setDefaultTimerInterval(interval):
    return Coin_SWIG_Python.SoVRMLAudioClip_setDefaultTimerInterval(interval)

def SoVRMLAudioClip_getDefaultTimerInterval():
    return Coin_SWIG_Python.SoVRMLAudioClip_getDefaultTimerInterval()

class SoVRMLBackground(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLBackground_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLBackground_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLBackground_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLBackground_swiginit(self, Coin_SWIG_Python.new_SoVRMLBackground())
    groundColor = property(Coin_SWIG_Python.SoVRMLBackground_groundColor_get, Coin_SWIG_Python.SoVRMLBackground_groundColor_set)
    groundAngle = property(Coin_SWIG_Python.SoVRMLBackground_groundAngle_get, Coin_SWIG_Python.SoVRMLBackground_groundAngle_set)
    skyColor = property(Coin_SWIG_Python.SoVRMLBackground_skyColor_get, Coin_SWIG_Python.SoVRMLBackground_skyColor_set)
    skyAngle = property(Coin_SWIG_Python.SoVRMLBackground_skyAngle_get, Coin_SWIG_Python.SoVRMLBackground_skyAngle_set)
    backUrl = property(Coin_SWIG_Python.SoVRMLBackground_backUrl_get, Coin_SWIG_Python.SoVRMLBackground_backUrl_set)
    bottomUrl = property(Coin_SWIG_Python.SoVRMLBackground_bottomUrl_get, Coin_SWIG_Python.SoVRMLBackground_bottomUrl_set)
    frontUrl = property(Coin_SWIG_Python.SoVRMLBackground_frontUrl_get, Coin_SWIG_Python.SoVRMLBackground_frontUrl_set)
    leftUrl = property(Coin_SWIG_Python.SoVRMLBackground_leftUrl_get, Coin_SWIG_Python.SoVRMLBackground_leftUrl_set)
    rightUrl = property(Coin_SWIG_Python.SoVRMLBackground_rightUrl_get, Coin_SWIG_Python.SoVRMLBackground_rightUrl_set)
    topUrl = property(Coin_SWIG_Python.SoVRMLBackground_topUrl_get, Coin_SWIG_Python.SoVRMLBackground_topUrl_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLBackground_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLBackground

# Register SoVRMLBackground in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLBackground_swigregister(SoVRMLBackground)

def SoVRMLBackground_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLBackground_getClassTypeId()

def SoVRMLBackground_initClass():
    return Coin_SWIG_Python.SoVRMLBackground_initClass()

class SoVRMLBillboard(SoVRMLParent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLBillboard_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLBillboard_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLBillboard_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoVRMLBillboard_swiginit(self, Coin_SWIG_Python.new_SoVRMLBillboard(*args))
    axisOfRotation = property(Coin_SWIG_Python.SoVRMLBillboard_axisOfRotation_get, Coin_SWIG_Python.SoVRMLBillboard_axisOfRotation_set)
    bboxCenter = property(Coin_SWIG_Python.SoVRMLBillboard_bboxCenter_get, Coin_SWIG_Python.SoVRMLBillboard_bboxCenter_set)
    bboxSize = property(Coin_SWIG_Python.SoVRMLBillboard_bboxSize_get, Coin_SWIG_Python.SoVRMLBillboard_bboxSize_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_pick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_search(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoVRMLBillboard_GLRenderOffPath(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLBillboard_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLBillboard

# Register SoVRMLBillboard in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLBillboard_swigregister(SoVRMLBillboard)

def SoVRMLBillboard_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLBillboard_getClassTypeId()

def SoVRMLBillboard_initClass():
    return Coin_SWIG_Python.SoVRMLBillboard_initClass()

class SoVRMLGeometry(SoShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLGeometry_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLGeometry_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLGeometry_initClass()

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLGeometry_search(self, action)

    def copyContents(self, srcFrom, copyConn):
        return Coin_SWIG_Python.SoVRMLGeometry_copyContents(self, srcFrom, copyConn)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLGeometry

# Register SoVRMLGeometry in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLGeometry_swigregister(SoVRMLGeometry)

def SoVRMLGeometry_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLGeometry_getClassTypeId()

def SoVRMLGeometry_initClass():
    return Coin_SWIG_Python.SoVRMLGeometry_initClass()

class SoVRMLBox(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLBox_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLBox_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLBox_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLBox_swiginit(self, Coin_SWIG_Python.new_SoVRMLBox())
    size = property(Coin_SWIG_Python.SoVRMLBox_size_get, Coin_SWIG_Python.SoVRMLBox_size_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLBox_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLBox_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLBox_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLBox

# Register SoVRMLBox in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLBox_swigregister(SoVRMLBox)

def SoVRMLBox_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLBox_getClassTypeId()

def SoVRMLBox_initClass():
    return Coin_SWIG_Python.SoVRMLBox_initClass()

class SoVRMLGroup(SoVRMLParent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLGroup_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLGroup_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLGroup_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoVRMLGroup_swiginit(self, Coin_SWIG_Python.new_SoVRMLGroup(*args))
    OFF = Coin_SWIG_Python.SoVRMLGroup_OFF
    ON = Coin_SWIG_Python.SoVRMLGroup_ON
    AUTO = Coin_SWIG_Python.SoVRMLGroup_AUTO
    renderCaching = property(Coin_SWIG_Python.SoVRMLGroup_renderCaching_get, Coin_SWIG_Python.SoVRMLGroup_renderCaching_set)
    boundingBoxCaching = property(Coin_SWIG_Python.SoVRMLGroup_boundingBoxCaching_get, Coin_SWIG_Python.SoVRMLGroup_boundingBoxCaching_set)
    renderCulling = property(Coin_SWIG_Python.SoVRMLGroup_renderCulling_get, Coin_SWIG_Python.SoVRMLGroup_renderCulling_set)
    pickCulling = property(Coin_SWIG_Python.SoVRMLGroup_pickCulling_get, Coin_SWIG_Python.SoVRMLGroup_pickCulling_set)
    bboxCenter = property(Coin_SWIG_Python.SoVRMLGroup_bboxCenter_get, Coin_SWIG_Python.SoVRMLGroup_bboxCenter_set)
    bboxSize = property(Coin_SWIG_Python.SoVRMLGroup_bboxSize_get, Coin_SWIG_Python.SoVRMLGroup_bboxSize_set)

    @staticmethod
    def setNumRenderCaches(num):
        return Coin_SWIG_Python.SoVRMLGroup_setNumRenderCaches(num)

    @staticmethod
    def getNumRenderCaches():
        return Coin_SWIG_Python.SoVRMLGroup_getNumRenderCaches()

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_getMatrix(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_rayPick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_audioRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoVRMLGroup_GLRenderOffPath(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLGroup_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLGroup

# Register SoVRMLGroup in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLGroup_swigregister(SoVRMLGroup)

def SoVRMLGroup_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLGroup_getClassTypeId()

def SoVRMLGroup_initClass():
    return Coin_SWIG_Python.SoVRMLGroup_initClass()

def SoVRMLGroup_setNumRenderCaches(num):
    return Coin_SWIG_Python.SoVRMLGroup_setNumRenderCaches(num)

def SoVRMLGroup_getNumRenderCaches():
    return Coin_SWIG_Python.SoVRMLGroup_getNumRenderCaches()

class SoVRMLCollision(SoVRMLGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLCollision_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLCollision_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLCollision_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoVRMLCollision_swiginit(self, Coin_SWIG_Python.new_SoVRMLCollision(*args))
    collide = property(Coin_SWIG_Python.SoVRMLCollision_collide_get, Coin_SWIG_Python.SoVRMLCollision_collide_set)
    proxy = property(Coin_SWIG_Python.SoVRMLCollision_proxy_get, Coin_SWIG_Python.SoVRMLCollision_proxy_set)
    collideTime = property(Coin_SWIG_Python.SoVRMLCollision_collideTime_get, Coin_SWIG_Python.SoVRMLCollision_collideTime_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLCollision_GLRender(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLCollision_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCollision

# Register SoVRMLCollision in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLCollision_swigregister(SoVRMLCollision)

def SoVRMLCollision_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLCollision_getClassTypeId()

def SoVRMLCollision_initClass():
    return Coin_SWIG_Python.SoVRMLCollision_initClass()

class SoVRMLColor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLColor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLColor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLColor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLColor_swiginit(self, Coin_SWIG_Python.new_SoVRMLColor())
    color = property(Coin_SWIG_Python.SoVRMLColor_color_get, Coin_SWIG_Python.SoVRMLColor_color_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLColor_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLColor_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLColor_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLColor

# Register SoVRMLColor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLColor_swigregister(SoVRMLColor)

def SoVRMLColor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLColor_getClassTypeId()

def SoVRMLColor_initClass():
    return Coin_SWIG_Python.SoVRMLColor_initClass()

class SoVRMLInterpolator(SoNodeEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLInterpolator_getOutputData(self)
    key = property(Coin_SWIG_Python.SoVRMLInterpolator_key_get, Coin_SWIG_Python.SoVRMLInterpolator_key_set)
    set_fraction = property(Coin_SWIG_Python.SoVRMLInterpolator_set_fraction_get, Coin_SWIG_Python.SoVRMLInterpolator_set_fraction_set)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLInterpolator_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLInterpolator

# Register SoVRMLInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLInterpolator_swigregister(SoVRMLInterpolator)

def SoVRMLInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLInterpolator_getClassTypeId()

def SoVRMLInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLInterpolator_initClass()

class SoVRMLColorInterpolator(SoVRMLInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLColorInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLColorInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLColorInterpolator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLColorInterpolator_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLColorInterpolator_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLColorInterpolator_swiginit(self, Coin_SWIG_Python.new_SoVRMLColorInterpolator())
    keyValue = property(Coin_SWIG_Python.SoVRMLColorInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLColorInterpolator_keyValue_set)
    value_changed = property(Coin_SWIG_Python.SoVRMLColorInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLColorInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLColorInterpolator

# Register SoVRMLColorInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLColorInterpolator_swigregister(SoVRMLColorInterpolator)

def SoVRMLColorInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLColorInterpolator_getClassTypeId()

def SoVRMLColorInterpolator_createInstance():
    return Coin_SWIG_Python.SoVRMLColorInterpolator_createInstance()

def SoVRMLColorInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLColorInterpolator_initClass()

class SoVRMLCone(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLCone_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLCone_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLCone_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLCone_swiginit(self, Coin_SWIG_Python.new_SoVRMLCone())
    bottomRadius = property(Coin_SWIG_Python.SoVRMLCone_bottomRadius_get, Coin_SWIG_Python.SoVRMLCone_bottomRadius_set)
    height = property(Coin_SWIG_Python.SoVRMLCone_height_get, Coin_SWIG_Python.SoVRMLCone_height_set)
    side = property(Coin_SWIG_Python.SoVRMLCone_side_get, Coin_SWIG_Python.SoVRMLCone_side_set)
    bottom = property(Coin_SWIG_Python.SoVRMLCone_bottom_get, Coin_SWIG_Python.SoVRMLCone_bottom_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLCone_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLCone_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLCone_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCone

# Register SoVRMLCone in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLCone_swigregister(SoVRMLCone)

def SoVRMLCone_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLCone_getClassTypeId()

def SoVRMLCone_initClass():
    return Coin_SWIG_Python.SoVRMLCone_initClass()

class SoVRMLCoordinate(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLCoordinate_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLCoordinate_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLCoordinate_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLCoordinate_swiginit(self, Coin_SWIG_Python.new_SoVRMLCoordinate())
    point = property(Coin_SWIG_Python.SoVRMLCoordinate_point_get, Coin_SWIG_Python.SoVRMLCoordinate_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLCoordinate_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLCoordinate_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLCoordinate_getBoundingBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLCoordinate_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLCoordinate_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCoordinate

# Register SoVRMLCoordinate in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLCoordinate_swigregister(SoVRMLCoordinate)

def SoVRMLCoordinate_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLCoordinate_getClassTypeId()

def SoVRMLCoordinate_initClass():
    return Coin_SWIG_Python.SoVRMLCoordinate_initClass()

class SoVRMLCoordinateInterpolator(SoVRMLInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLCoordinateInterpolator_swiginit(self, Coin_SWIG_Python.new_SoVRMLCoordinateInterpolator())
    keyValue = property(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLCoordinateInterpolator_keyValue_set)
    value_changed = property(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLCoordinateInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCoordinateInterpolator

# Register SoVRMLCoordinateInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLCoordinateInterpolator_swigregister(SoVRMLCoordinateInterpolator)

def SoVRMLCoordinateInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getClassTypeId()

def SoVRMLCoordinateInterpolator_createInstance():
    return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_createInstance()

def SoVRMLCoordinateInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_initClass()

class SoVRMLCylinder(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLCylinder_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLCylinder_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLCylinder_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLCylinder_swiginit(self, Coin_SWIG_Python.new_SoVRMLCylinder())
    radius = property(Coin_SWIG_Python.SoVRMLCylinder_radius_get, Coin_SWIG_Python.SoVRMLCylinder_radius_set)
    height = property(Coin_SWIG_Python.SoVRMLCylinder_height_get, Coin_SWIG_Python.SoVRMLCylinder_height_set)
    side = property(Coin_SWIG_Python.SoVRMLCylinder_side_get, Coin_SWIG_Python.SoVRMLCylinder_side_set)
    top = property(Coin_SWIG_Python.SoVRMLCylinder_top_get, Coin_SWIG_Python.SoVRMLCylinder_top_set)
    bottom = property(Coin_SWIG_Python.SoVRMLCylinder_bottom_get, Coin_SWIG_Python.SoVRMLCylinder_bottom_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLCylinder_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLCylinder_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLCylinder_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCylinder

# Register SoVRMLCylinder in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLCylinder_swigregister(SoVRMLCylinder)

def SoVRMLCylinder_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLCylinder_getClassTypeId()

def SoVRMLCylinder_initClass():
    return Coin_SWIG_Python.SoVRMLCylinder_initClass()

class SoVRMLSensor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLSensor_getTypeId(self)
    isActive = property(Coin_SWIG_Python.SoVRMLSensor_isActive_get, Coin_SWIG_Python.SoVRMLSensor_isActive_set)
    enabled = property(Coin_SWIG_Python.SoVRMLSensor_enabled_get, Coin_SWIG_Python.SoVRMLSensor_enabled_set)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLSensor_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSensor

# Register SoVRMLSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLSensor_swigregister(SoVRMLSensor)

def SoVRMLSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLSensor_getClassTypeId()

def SoVRMLSensor_initClass():
    return Coin_SWIG_Python.SoVRMLSensor_initClass()

class SoVRMLDragSensor(SoVRMLSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLDragSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLDragSensor_getTypeId(self)
    trackPoint_changed = property(Coin_SWIG_Python.SoVRMLDragSensor_trackPoint_changed_get, Coin_SWIG_Python.SoVRMLDragSensor_trackPoint_changed_set)
    autoOffset = property(Coin_SWIG_Python.SoVRMLDragSensor_autoOffset_get, Coin_SWIG_Python.SoVRMLDragSensor_autoOffset_set)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLDragSensor_handleEvent(self, action)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLDragSensor_initClass()
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLDragSensor

# Register SoVRMLDragSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLDragSensor_swigregister(SoVRMLDragSensor)

def SoVRMLDragSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLDragSensor_getClassTypeId()

def SoVRMLDragSensor_initClass():
    return Coin_SWIG_Python.SoVRMLDragSensor_initClass()

class SoVRMLCylinderSensor(SoVRMLDragSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLCylinderSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLCylinderSensor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLCylinderSensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLCylinderSensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLCylinderSensor())
    diskAngle = property(Coin_SWIG_Python.SoVRMLCylinderSensor_diskAngle_get, Coin_SWIG_Python.SoVRMLCylinderSensor_diskAngle_set)
    maxAngle = property(Coin_SWIG_Python.SoVRMLCylinderSensor_maxAngle_get, Coin_SWIG_Python.SoVRMLCylinderSensor_maxAngle_set)
    minAngle = property(Coin_SWIG_Python.SoVRMLCylinderSensor_minAngle_get, Coin_SWIG_Python.SoVRMLCylinderSensor_minAngle_set)
    offset = property(Coin_SWIG_Python.SoVRMLCylinderSensor_offset_get, Coin_SWIG_Python.SoVRMLCylinderSensor_offset_set)
    rotation_changed = property(Coin_SWIG_Python.SoVRMLCylinderSensor_rotation_changed_get, Coin_SWIG_Python.SoVRMLCylinderSensor_rotation_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCylinderSensor

# Register SoVRMLCylinderSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLCylinderSensor_swigregister(SoVRMLCylinderSensor)

def SoVRMLCylinderSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLCylinderSensor_getClassTypeId()

def SoVRMLCylinderSensor_initClass():
    return Coin_SWIG_Python.SoVRMLCylinderSensor_initClass()

class SoVRMLLight(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLLight_initClass()
    on = property(Coin_SWIG_Python.SoVRMLLight_on_get, Coin_SWIG_Python.SoVRMLLight_on_set)
    intensity = property(Coin_SWIG_Python.SoVRMLLight_intensity_get, Coin_SWIG_Python.SoVRMLLight_intensity_set)
    color = property(Coin_SWIG_Python.SoVRMLLight_color_get, Coin_SWIG_Python.SoVRMLLight_color_set)
    ambientIntensity = property(Coin_SWIG_Python.SoVRMLLight_ambientIntensity_get, Coin_SWIG_Python.SoVRMLLight_ambientIntensity_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLLight

# Register SoVRMLLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLLight_swigregister(SoVRMLLight)

def SoVRMLLight_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLLight_getClassTypeId()

def SoVRMLLight_initClass():
    return Coin_SWIG_Python.SoVRMLLight_initClass()

class SoVRMLDirectionalLight(SoVRMLLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLDirectionalLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLDirectionalLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLDirectionalLight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLDirectionalLight_swiginit(self, Coin_SWIG_Python.new_SoVRMLDirectionalLight())
    direction = property(Coin_SWIG_Python.SoVRMLDirectionalLight_direction_get, Coin_SWIG_Python.SoVRMLDirectionalLight_direction_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLDirectionalLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLDirectionalLight

# Register SoVRMLDirectionalLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLDirectionalLight_swigregister(SoVRMLDirectionalLight)

def SoVRMLDirectionalLight_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLDirectionalLight_getClassTypeId()

def SoVRMLDirectionalLight_initClass():
    return Coin_SWIG_Python.SoVRMLDirectionalLight_initClass()

class SoVRMLElevationGrid(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLElevationGrid_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLElevationGrid_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLElevationGrid_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLElevationGrid_swiginit(self, Coin_SWIG_Python.new_SoVRMLElevationGrid())
    ccw = property(Coin_SWIG_Python.SoVRMLElevationGrid_ccw_get, Coin_SWIG_Python.SoVRMLElevationGrid_ccw_set)
    solid = property(Coin_SWIG_Python.SoVRMLElevationGrid_solid_get, Coin_SWIG_Python.SoVRMLElevationGrid_solid_set)
    creaseAngle = property(Coin_SWIG_Python.SoVRMLElevationGrid_creaseAngle_get, Coin_SWIG_Python.SoVRMLElevationGrid_creaseAngle_set)
    zDimension = property(Coin_SWIG_Python.SoVRMLElevationGrid_zDimension_get, Coin_SWIG_Python.SoVRMLElevationGrid_zDimension_set)
    xDimension = property(Coin_SWIG_Python.SoVRMLElevationGrid_xDimension_get, Coin_SWIG_Python.SoVRMLElevationGrid_xDimension_set)
    zSpacing = property(Coin_SWIG_Python.SoVRMLElevationGrid_zSpacing_get, Coin_SWIG_Python.SoVRMLElevationGrid_zSpacing_set)
    xSpacing = property(Coin_SWIG_Python.SoVRMLElevationGrid_xSpacing_get, Coin_SWIG_Python.SoVRMLElevationGrid_xSpacing_set)
    height = property(Coin_SWIG_Python.SoVRMLElevationGrid_height_get, Coin_SWIG_Python.SoVRMLElevationGrid_height_set)
    texCoord = property(Coin_SWIG_Python.SoVRMLElevationGrid_texCoord_get, Coin_SWIG_Python.SoVRMLElevationGrid_texCoord_set)
    normal = property(Coin_SWIG_Python.SoVRMLElevationGrid_normal_get, Coin_SWIG_Python.SoVRMLElevationGrid_normal_set)
    color = property(Coin_SWIG_Python.SoVRMLElevationGrid_color_get, Coin_SWIG_Python.SoVRMLElevationGrid_color_set)
    colorPerVertex = property(Coin_SWIG_Python.SoVRMLElevationGrid_colorPerVertex_get, Coin_SWIG_Python.SoVRMLElevationGrid_colorPerVertex_set)
    normalPerVertex = property(Coin_SWIG_Python.SoVRMLElevationGrid_normalPerVertex_get, Coin_SWIG_Python.SoVRMLElevationGrid_normalPerVertex_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLElevationGrid_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLElevationGrid_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLElevationGrid_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLElevationGrid

# Register SoVRMLElevationGrid in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLElevationGrid_swigregister(SoVRMLElevationGrid)

def SoVRMLElevationGrid_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLElevationGrid_getClassTypeId()

def SoVRMLElevationGrid_initClass():
    return Coin_SWIG_Python.SoVRMLElevationGrid_initClass()

class SoVRMLExtrusion(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLExtrusion_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLExtrusion_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLExtrusion_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLExtrusion_swiginit(self, Coin_SWIG_Python.new_SoVRMLExtrusion())
    beginCap = property(Coin_SWIG_Python.SoVRMLExtrusion_beginCap_get, Coin_SWIG_Python.SoVRMLExtrusion_beginCap_set)
    ccw = property(Coin_SWIG_Python.SoVRMLExtrusion_ccw_get, Coin_SWIG_Python.SoVRMLExtrusion_ccw_set)
    convex = property(Coin_SWIG_Python.SoVRMLExtrusion_convex_get, Coin_SWIG_Python.SoVRMLExtrusion_convex_set)
    creaseAngle = property(Coin_SWIG_Python.SoVRMLExtrusion_creaseAngle_get, Coin_SWIG_Python.SoVRMLExtrusion_creaseAngle_set)
    crossSection = property(Coin_SWIG_Python.SoVRMLExtrusion_crossSection_get, Coin_SWIG_Python.SoVRMLExtrusion_crossSection_set)
    endCap = property(Coin_SWIG_Python.SoVRMLExtrusion_endCap_get, Coin_SWIG_Python.SoVRMLExtrusion_endCap_set)
    orientation = property(Coin_SWIG_Python.SoVRMLExtrusion_orientation_get, Coin_SWIG_Python.SoVRMLExtrusion_orientation_set)
    scale = property(Coin_SWIG_Python.SoVRMLExtrusion_scale_get, Coin_SWIG_Python.SoVRMLExtrusion_scale_set)
    solid = property(Coin_SWIG_Python.SoVRMLExtrusion_solid_get, Coin_SWIG_Python.SoVRMLExtrusion_solid_set)
    spine = property(Coin_SWIG_Python.SoVRMLExtrusion_spine_get, Coin_SWIG_Python.SoVRMLExtrusion_spine_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLExtrusion_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLExtrusion_getPrimitiveCount(self, action)

    def computeBBox(self, action, bbox, center):
        return Coin_SWIG_Python.SoVRMLExtrusion_computeBBox(self, action, bbox, center)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLExtrusion

# Register SoVRMLExtrusion in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLExtrusion_swigregister(SoVRMLExtrusion)

def SoVRMLExtrusion_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLExtrusion_getClassTypeId()

def SoVRMLExtrusion_initClass():
    return Coin_SWIG_Python.SoVRMLExtrusion_initClass()

class SoVRMLFog(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLFog_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLFog_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLFog_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLFog_swiginit(self, Coin_SWIG_Python.new_SoVRMLFog())
    fogType = property(Coin_SWIG_Python.SoVRMLFog_fogType_get, Coin_SWIG_Python.SoVRMLFog_fogType_set)
    visibilityRange = property(Coin_SWIG_Python.SoVRMLFog_visibilityRange_get, Coin_SWIG_Python.SoVRMLFog_visibilityRange_set)
    color = property(Coin_SWIG_Python.SoVRMLFog_color_get, Coin_SWIG_Python.SoVRMLFog_color_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLFog_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLFog

# Register SoVRMLFog in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLFog_swigregister(SoVRMLFog)

def SoVRMLFog_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLFog_getClassTypeId()

def SoVRMLFog_initClass():
    return Coin_SWIG_Python.SoVRMLFog_initClass()

class SoVRMLFontStyle(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLFontStyle_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLFontStyle_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLFontStyle_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLFontStyle_swiginit(self, Coin_SWIG_Python.new_SoVRMLFontStyle())
    SERIF = Coin_SWIG_Python.SoVRMLFontStyle_SERIF
    SANS = Coin_SWIG_Python.SoVRMLFontStyle_SANS
    TYPEWRITER = Coin_SWIG_Python.SoVRMLFontStyle_TYPEWRITER
    PLAIN = Coin_SWIG_Python.SoVRMLFontStyle_PLAIN
    BOLD = Coin_SWIG_Python.SoVRMLFontStyle_BOLD
    ITALIC = Coin_SWIG_Python.SoVRMLFontStyle_ITALIC
    BOLDITALIC = Coin_SWIG_Python.SoVRMLFontStyle_BOLDITALIC
    size = property(Coin_SWIG_Python.SoVRMLFontStyle_size_get, Coin_SWIG_Python.SoVRMLFontStyle_size_set)
    family = property(Coin_SWIG_Python.SoVRMLFontStyle_family_get, Coin_SWIG_Python.SoVRMLFontStyle_family_set)
    style = property(Coin_SWIG_Python.SoVRMLFontStyle_style_get, Coin_SWIG_Python.SoVRMLFontStyle_style_set)
    horizontal = property(Coin_SWIG_Python.SoVRMLFontStyle_horizontal_get, Coin_SWIG_Python.SoVRMLFontStyle_horizontal_set)
    leftToRight = property(Coin_SWIG_Python.SoVRMLFontStyle_leftToRight_get, Coin_SWIG_Python.SoVRMLFontStyle_leftToRight_set)
    topToBottom = property(Coin_SWIG_Python.SoVRMLFontStyle_topToBottom_get, Coin_SWIG_Python.SoVRMLFontStyle_topToBottom_set)
    language = property(Coin_SWIG_Python.SoVRMLFontStyle_language_get, Coin_SWIG_Python.SoVRMLFontStyle_language_set)
    justify = property(Coin_SWIG_Python.SoVRMLFontStyle_justify_get, Coin_SWIG_Python.SoVRMLFontStyle_justify_set)
    spacing = property(Coin_SWIG_Python.SoVRMLFontStyle_spacing_get, Coin_SWIG_Python.SoVRMLFontStyle_spacing_set)

    def getFontName(self):
        return Coin_SWIG_Python.SoVRMLFontStyle_getFontName(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLFontStyle_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLFontStyle_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLFontStyle_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLFontStyle_getBoundingBox(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLFontStyle_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLFontStyle_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLFontStyle

# Register SoVRMLFontStyle in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLFontStyle_swigregister(SoVRMLFontStyle)

def SoVRMLFontStyle_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLFontStyle_getClassTypeId()

def SoVRMLFontStyle_initClass():
    return Coin_SWIG_Python.SoVRMLFontStyle_initClass()


def so_vrml_init():
    return Coin_SWIG_Python.so_vrml_init()
class SoVRMLTexture(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLTexture_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLTexture_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLTexture_initClass()
    repeatS = property(Coin_SWIG_Python.SoVRMLTexture_repeatS_get, Coin_SWIG_Python.SoVRMLTexture_repeatS_set)
    repeatT = property(Coin_SWIG_Python.SoVRMLTexture_repeatT_get, Coin_SWIG_Python.SoVRMLTexture_repeatT_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLTexture_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTexture

# Register SoVRMLTexture in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLTexture_swigregister(SoVRMLTexture)

def SoVRMLTexture_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLTexture_getClassTypeId()

def SoVRMLTexture_initClass():
    return Coin_SWIG_Python.SoVRMLTexture_initClass()

class SoVRMLImageTexture(SoVRMLTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLImageTexture_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLImageTexture_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLImageTexture_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLImageTexture_swiginit(self, Coin_SWIG_Python.new_SoVRMLImageTexture())
    url = property(Coin_SWIG_Python.SoVRMLImageTexture_url_get, Coin_SWIG_Python.SoVRMLImageTexture_url_set)

    @staticmethod
    def setDelayFetchURL(onoff):
        return Coin_SWIG_Python.SoVRMLImageTexture_setDelayFetchURL(onoff)

    @staticmethod
    def setPrequalifyFileCallBack(cb, closure):
        return Coin_SWIG_Python.SoVRMLImageTexture_setPrequalifyFileCallBack(cb, closure)

    def allowPrequalifyFile(self, enable):
        return Coin_SWIG_Python.SoVRMLImageTexture_allowPrequalifyFile(self, enable)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLImageTexture_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLImageTexture_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLImageTexture_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLImageTexture_rayPick(self, action)

    def setImage(self, image):
        return Coin_SWIG_Python.SoVRMLImageTexture_setImage(self, image)

    def getImage(self):
        return Coin_SWIG_Python.SoVRMLImageTexture_getImage(self)

    @staticmethod
    def setImageDataMaxAge(maxage):
        return Coin_SWIG_Python.SoVRMLImageTexture_setImageDataMaxAge(maxage)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLImageTexture

# Register SoVRMLImageTexture in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLImageTexture_swigregister(SoVRMLImageTexture)

def SoVRMLImageTexture_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLImageTexture_getClassTypeId()

def SoVRMLImageTexture_initClass():
    return Coin_SWIG_Python.SoVRMLImageTexture_initClass()

def SoVRMLImageTexture_setDelayFetchURL(onoff):
    return Coin_SWIG_Python.SoVRMLImageTexture_setDelayFetchURL(onoff)

def SoVRMLImageTexture_setPrequalifyFileCallBack(cb, closure):
    return Coin_SWIG_Python.SoVRMLImageTexture_setPrequalifyFileCallBack(cb, closure)

def SoVRMLImageTexture_setImageDataMaxAge(maxage):
    return Coin_SWIG_Python.SoVRMLImageTexture_setImageDataMaxAge(maxage)

class SoVRMLVertexShape(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLVertexShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLVertexShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLVertexShape_initClass()
    coord = property(Coin_SWIG_Python.SoVRMLVertexShape_coord_get, Coin_SWIG_Python.SoVRMLVertexShape_coord_set)
    texCoord = property(Coin_SWIG_Python.SoVRMLVertexShape_texCoord_get, Coin_SWIG_Python.SoVRMLVertexShape_texCoord_set)
    normal = property(Coin_SWIG_Python.SoVRMLVertexShape_normal_get, Coin_SWIG_Python.SoVRMLVertexShape_normal_set)
    color = property(Coin_SWIG_Python.SoVRMLVertexShape_color_get, Coin_SWIG_Python.SoVRMLVertexShape_color_set)
    colorPerVertex = property(Coin_SWIG_Python.SoVRMLVertexShape_colorPerVertex_get, Coin_SWIG_Python.SoVRMLVertexShape_colorPerVertex_set)
    normalPerVertex = property(Coin_SWIG_Python.SoVRMLVertexShape_normalPerVertex_get, Coin_SWIG_Python.SoVRMLVertexShape_normalPerVertex_set)
    OVERALL = Coin_SWIG_Python.SoVRMLVertexShape_OVERALL
    PER_PART = Coin_SWIG_Python.SoVRMLVertexShape_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoVRMLVertexShape_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoVRMLVertexShape_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoVRMLVertexShape_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoVRMLVertexShape_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoVRMLVertexShape_PER_VERTEX_INDEXED

    def generateDefaultNormals(self, *args):
        return Coin_SWIG_Python.SoVRMLVertexShape_generateDefaultNormals(self, *args)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLVertexShape_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLVertexShape_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLVertexShape_getBoundingBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLVertexShape_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLVertexShape_pick(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLVertexShape_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVertexShape

# Register SoVRMLVertexShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLVertexShape_swigregister(SoVRMLVertexShape)

def SoVRMLVertexShape_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLVertexShape_getClassTypeId()

def SoVRMLVertexShape_initClass():
    return Coin_SWIG_Python.SoVRMLVertexShape_initClass()

class SoVRMLIndexedShape(SoVRMLVertexShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLIndexedShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLIndexedShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLIndexedShape_initClass()
    coordIndex = property(Coin_SWIG_Python.SoVRMLIndexedShape_coordIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_coordIndex_set)
    colorIndex = property(Coin_SWIG_Python.SoVRMLIndexedShape_colorIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_colorIndex_set)
    normalIndex = property(Coin_SWIG_Python.SoVRMLIndexedShape_normalIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_normalIndex_set)
    texCoordIndex = property(Coin_SWIG_Python.SoVRMLIndexedShape_texCoordIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_texCoordIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedShape

# Register SoVRMLIndexedShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLIndexedShape_swigregister(SoVRMLIndexedShape)

def SoVRMLIndexedShape_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLIndexedShape_getClassTypeId()

def SoVRMLIndexedShape_initClass():
    return Coin_SWIG_Python.SoVRMLIndexedShape_initClass()

class SoVRMLIndexedFaceSet(SoVRMLIndexedShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLIndexedFaceSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLIndexedFaceSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLIndexedFaceSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLIndexedFaceSet_swiginit(self, Coin_SWIG_Python.new_SoVRMLIndexedFaceSet())
    ccw = property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_ccw_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_ccw_set)
    solid = property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_solid_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_solid_set)
    convex = property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_convex_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_convex_set)
    creaseAngle = property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_creaseAngle_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_creaseAngle_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLIndexedFaceSet_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLIndexedFaceSet_getPrimitiveCount(self, action)

    def generateDefaultNormals(self, *args):
        return Coin_SWIG_Python.SoVRMLIndexedFaceSet_generateDefaultNormals(self, *args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedFaceSet

# Register SoVRMLIndexedFaceSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLIndexedFaceSet_swigregister(SoVRMLIndexedFaceSet)

def SoVRMLIndexedFaceSet_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLIndexedFaceSet_getClassTypeId()

def SoVRMLIndexedFaceSet_initClass():
    return Coin_SWIG_Python.SoVRMLIndexedFaceSet_initClass()

class SoVRMLVertexLine(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLVertexLine_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLVertexLine_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLVertexLine_initClass()
    coord = property(Coin_SWIG_Python.SoVRMLVertexLine_coord_get, Coin_SWIG_Python.SoVRMLVertexLine_coord_set)
    color = property(Coin_SWIG_Python.SoVRMLVertexLine_color_get, Coin_SWIG_Python.SoVRMLVertexLine_color_set)
    colorPerVertex = property(Coin_SWIG_Python.SoVRMLVertexLine_colorPerVertex_get, Coin_SWIG_Python.SoVRMLVertexLine_colorPerVertex_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLVertexLine_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLVertexLine_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLVertexLine_getBoundingBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLVertexLine_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLVertexLine_pick(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLVertexLine_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVertexLine

# Register SoVRMLVertexLine in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLVertexLine_swigregister(SoVRMLVertexLine)

def SoVRMLVertexLine_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLVertexLine_getClassTypeId()

def SoVRMLVertexLine_initClass():
    return Coin_SWIG_Python.SoVRMLVertexLine_initClass()

class SoVRMLIndexedLine(SoVRMLVertexLine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLIndexedLine_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLIndexedLine_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLIndexedLine_initClass()
    coordIndex = property(Coin_SWIG_Python.SoVRMLIndexedLine_coordIndex_get, Coin_SWIG_Python.SoVRMLIndexedLine_coordIndex_set)
    colorIndex = property(Coin_SWIG_Python.SoVRMLIndexedLine_colorIndex_get, Coin_SWIG_Python.SoVRMLIndexedLine_colorIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedLine

# Register SoVRMLIndexedLine in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLIndexedLine_swigregister(SoVRMLIndexedLine)

def SoVRMLIndexedLine_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLIndexedLine_getClassTypeId()

def SoVRMLIndexedLine_initClass():
    return Coin_SWIG_Python.SoVRMLIndexedLine_initClass()

class SoVRMLIndexedLineSet(SoVRMLIndexedLine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLIndexedLineSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLIndexedLineSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLIndexedLineSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLIndexedLineSet_swiginit(self, Coin_SWIG_Python.new_SoVRMLIndexedLineSet())

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLIndexedLineSet_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLIndexedLineSet_getPrimitiveCount(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLIndexedLineSet_getBoundingBox(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedLineSet

# Register SoVRMLIndexedLineSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLIndexedLineSet_swigregister(SoVRMLIndexedLineSet)

def SoVRMLIndexedLineSet_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLIndexedLineSet_getClassTypeId()

def SoVRMLIndexedLineSet_initClass():
    return Coin_SWIG_Python.SoVRMLIndexedLineSet_initClass()

class SoVRMLInline(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLInline_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLInline_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLInline_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLInline_swiginit(self, Coin_SWIG_Python.new_SoVRMLInline())
    NEVER = Coin_SWIG_Python.SoVRMLInline_NEVER
    UNTIL_LOADED = Coin_SWIG_Python.SoVRMLInline_UNTIL_LOADED
    ALWAYS = Coin_SWIG_Python.SoVRMLInline_ALWAYS
    bboxCenter = property(Coin_SWIG_Python.SoVRMLInline_bboxCenter_get, Coin_SWIG_Python.SoVRMLInline_bboxCenter_set)
    bboxSize = property(Coin_SWIG_Python.SoVRMLInline_bboxSize_get, Coin_SWIG_Python.SoVRMLInline_bboxSize_set)
    url = property(Coin_SWIG_Python.SoVRMLInline_url_get, Coin_SWIG_Python.SoVRMLInline_url_set)

    def setFullURLName(self, url):
        return Coin_SWIG_Python.SoVRMLInline_setFullURLName(self, url)

    def getFullURLName(self):
        return Coin_SWIG_Python.SoVRMLInline_getFullURLName(self)

    def copyChildren(self):
        return Coin_SWIG_Python.SoVRMLInline_copyChildren(self)

    def requestURLData(self):
        return Coin_SWIG_Python.SoVRMLInline_requestURLData(self)

    def isURLDataRequested(self):
        return Coin_SWIG_Python.SoVRMLInline_isURLDataRequested(self)

    def isURLDataHere(self):
        return Coin_SWIG_Python.SoVRMLInline_isURLDataHere(self)

    def cancelURLDataRequest(self):
        return Coin_SWIG_Python.SoVRMLInline_cancelURLDataRequest(self)

    def setChildData(self, urlData):
        return Coin_SWIG_Python.SoVRMLInline_setChildData(self, urlData)

    def getChildData(self):
        return Coin_SWIG_Python.SoVRMLInline_getChildData(self)

    @staticmethod
    def setFetchURLCallBack(f, closure):
        return Coin_SWIG_Python.SoVRMLInline_setFetchURLCallBack(f, closure)

    @staticmethod
    def setBoundingBoxVisibility(b):
        return Coin_SWIG_Python.SoVRMLInline_setBoundingBoxVisibility(b)

    @staticmethod
    def getBoundingBoxVisibility():
        return Coin_SWIG_Python.SoVRMLInline_getBoundingBoxVisibility()

    @staticmethod
    def setBoundingBoxColor(color):
        return Coin_SWIG_Python.SoVRMLInline_setBoundingBoxColor(color)

    @staticmethod
    def getBoundingBoxColor():
        return Coin_SWIG_Python.SoVRMLInline_getBoundingBoxColor()

    @staticmethod
    def setReadAsSoFile(enable):
        return Coin_SWIG_Python.SoVRMLInline_setReadAsSoFile(enable)

    @staticmethod
    def getReadAsSoFile():
        return Coin_SWIG_Python.SoVRMLInline_getReadAsSoFile()

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLInline_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLInline_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLInline_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLInline_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoVRMLInline_getMatrix(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLInline_handleEvent(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLInline_search(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLInline_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLInline_getPrimitiveCount(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLInline_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLInline

# Register SoVRMLInline in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLInline_swigregister(SoVRMLInline)

def SoVRMLInline_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLInline_getClassTypeId()

def SoVRMLInline_initClass():
    return Coin_SWIG_Python.SoVRMLInline_initClass()

def SoVRMLInline_setFetchURLCallBack(f, closure):
    return Coin_SWIG_Python.SoVRMLInline_setFetchURLCallBack(f, closure)

def SoVRMLInline_setBoundingBoxVisibility(b):
    return Coin_SWIG_Python.SoVRMLInline_setBoundingBoxVisibility(b)

def SoVRMLInline_getBoundingBoxVisibility():
    return Coin_SWIG_Python.SoVRMLInline_getBoundingBoxVisibility()

def SoVRMLInline_setBoundingBoxColor(color):
    return Coin_SWIG_Python.SoVRMLInline_setBoundingBoxColor(color)

def SoVRMLInline_getBoundingBoxColor():
    return Coin_SWIG_Python.SoVRMLInline_getBoundingBoxColor()

def SoVRMLInline_setReadAsSoFile(enable):
    return Coin_SWIG_Python.SoVRMLInline_setReadAsSoFile(enable)

def SoVRMLInline_getReadAsSoFile():
    return Coin_SWIG_Python.SoVRMLInline_getReadAsSoFile()

class SoVRMLLOD(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLLOD_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLLOD_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLLOD_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoVRMLLOD_swiginit(self, Coin_SWIG_Python.new_SoVRMLLOD(*args))
    range = property(Coin_SWIG_Python.SoVRMLLOD_range_get, Coin_SWIG_Python.SoVRMLLOD_range_set)
    center = property(Coin_SWIG_Python.SoVRMLLOD_center_get, Coin_SWIG_Python.SoVRMLLOD_center_set)
    level = property(Coin_SWIG_Python.SoVRMLLOD_level_get, Coin_SWIG_Python.SoVRMLLOD_level_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoVRMLLOD_affectsState(self)

    def addLevel(self, level):
        return Coin_SWIG_Python.SoVRMLLOD_addLevel(self, level)

    def insertLevel(self, level, idx):
        return Coin_SWIG_Python.SoVRMLLOD_insertLevel(self, level, idx)

    def getLevel(self, idx):
        return Coin_SWIG_Python.SoVRMLLOD_getLevel(self, idx)

    def findLevel(self, level):
        return Coin_SWIG_Python.SoVRMLLOD_findLevel(self, level)

    def getNumLevels(self):
        return Coin_SWIG_Python.SoVRMLLOD_getNumLevels(self)

    def removeLevel(self, *args):
        return Coin_SWIG_Python.SoVRMLLOD_removeLevel(self, *args)

    def removeAllLevels(self):
        return Coin_SWIG_Python.SoVRMLLOD_removeAllLevels(self)

    def replaceLevel(self, *args):
        return Coin_SWIG_Python.SoVRMLLOD_replaceLevel(self, *args)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_rayPick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_getBoundingBox(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_audioRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_GLRenderInPath(self, action)

    def GLRenderOffPath(self, action):
        return Coin_SWIG_Python.SoVRMLLOD_GLRenderOffPath(self, action)

    def addChild(self, child):
        return Coin_SWIG_Python.SoVRMLLOD_addChild(self, child)

    def insertChild(self, child, idx):
        return Coin_SWIG_Python.SoVRMLLOD_insertChild(self, child, idx)

    def getChild(self, idx):
        return Coin_SWIG_Python.SoVRMLLOD_getChild(self, idx)

    def findChild(self, child):
        return Coin_SWIG_Python.SoVRMLLOD_findChild(self, child)

    def getNumChildren(self):
        return Coin_SWIG_Python.SoVRMLLOD_getNumChildren(self)

    def removeChild(self, *args):
        return Coin_SWIG_Python.SoVRMLLOD_removeChild(self, *args)

    def removeAllChildren(self):
        return Coin_SWIG_Python.SoVRMLLOD_removeAllChildren(self)

    def replaceChild(self, *args):
        return Coin_SWIG_Python.SoVRMLLOD_replaceChild(self, *args)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLLOD_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLLOD

# Register SoVRMLLOD in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLLOD_swigregister(SoVRMLLOD)

def SoVRMLLOD_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLLOD_getClassTypeId()

def SoVRMLLOD_initClass():
    return Coin_SWIG_Python.SoVRMLLOD_initClass()

class SoVRMLMaterial(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLMaterial_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLMaterial_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLMaterial_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLMaterial_swiginit(self, Coin_SWIG_Python.new_SoVRMLMaterial())
    diffuseColor = property(Coin_SWIG_Python.SoVRMLMaterial_diffuseColor_get, Coin_SWIG_Python.SoVRMLMaterial_diffuseColor_set)
    ambientIntensity = property(Coin_SWIG_Python.SoVRMLMaterial_ambientIntensity_get, Coin_SWIG_Python.SoVRMLMaterial_ambientIntensity_set)
    specularColor = property(Coin_SWIG_Python.SoVRMLMaterial_specularColor_get, Coin_SWIG_Python.SoVRMLMaterial_specularColor_set)
    emissiveColor = property(Coin_SWIG_Python.SoVRMLMaterial_emissiveColor_get, Coin_SWIG_Python.SoVRMLMaterial_emissiveColor_set)
    shininess = property(Coin_SWIG_Python.SoVRMLMaterial_shininess_get, Coin_SWIG_Python.SoVRMLMaterial_shininess_set)
    transparency = property(Coin_SWIG_Python.SoVRMLMaterial_transparency_get, Coin_SWIG_Python.SoVRMLMaterial_transparency_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLMaterial_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLMaterial_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLMaterial_callback(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLMaterial

# Register SoVRMLMaterial in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLMaterial_swigregister(SoVRMLMaterial)

def SoVRMLMaterial_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLMaterial_getClassTypeId()

def SoVRMLMaterial_initClass():
    return Coin_SWIG_Python.SoVRMLMaterial_initClass()

class SoVRMLMovieTexture(SoVRMLTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLMovieTexture_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLMovieTexture_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLMovieTexture_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLMovieTexture_swiginit(self, Coin_SWIG_Python.new_SoVRMLMovieTexture())
    loop = property(Coin_SWIG_Python.SoVRMLMovieTexture_loop_get, Coin_SWIG_Python.SoVRMLMovieTexture_loop_set)
    speed = property(Coin_SWIG_Python.SoVRMLMovieTexture_speed_get, Coin_SWIG_Python.SoVRMLMovieTexture_speed_set)
    startTime = property(Coin_SWIG_Python.SoVRMLMovieTexture_startTime_get, Coin_SWIG_Python.SoVRMLMovieTexture_startTime_set)
    stopTime = property(Coin_SWIG_Python.SoVRMLMovieTexture_stopTime_get, Coin_SWIG_Python.SoVRMLMovieTexture_stopTime_set)
    url = property(Coin_SWIG_Python.SoVRMLMovieTexture_url_get, Coin_SWIG_Python.SoVRMLMovieTexture_url_set)
    duration_changed = property(Coin_SWIG_Python.SoVRMLMovieTexture_duration_changed_get, Coin_SWIG_Python.SoVRMLMovieTexture_duration_changed_set)
    isActive = property(Coin_SWIG_Python.SoVRMLMovieTexture_isActive_get, Coin_SWIG_Python.SoVRMLMovieTexture_isActive_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLMovieTexture_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLMovieTexture

# Register SoVRMLMovieTexture in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLMovieTexture_swigregister(SoVRMLMovieTexture)

def SoVRMLMovieTexture_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLMovieTexture_getClassTypeId()

def SoVRMLMovieTexture_initClass():
    return Coin_SWIG_Python.SoVRMLMovieTexture_initClass()

class SoVRMLNavigationInfo(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLNavigationInfo_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLNavigationInfo_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLNavigationInfo_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLNavigationInfo_swiginit(self, Coin_SWIG_Python.new_SoVRMLNavigationInfo())
    type = property(Coin_SWIG_Python.SoVRMLNavigationInfo_type_get, Coin_SWIG_Python.SoVRMLNavigationInfo_type_set)
    speed = property(Coin_SWIG_Python.SoVRMLNavigationInfo_speed_get, Coin_SWIG_Python.SoVRMLNavigationInfo_speed_set)
    avatarSize = property(Coin_SWIG_Python.SoVRMLNavigationInfo_avatarSize_get, Coin_SWIG_Python.SoVRMLNavigationInfo_avatarSize_set)
    visibilityLimit = property(Coin_SWIG_Python.SoVRMLNavigationInfo_visibilityLimit_get, Coin_SWIG_Python.SoVRMLNavigationInfo_visibilityLimit_set)
    headlight = property(Coin_SWIG_Python.SoVRMLNavigationInfo_headlight_get, Coin_SWIG_Python.SoVRMLNavigationInfo_headlight_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLNavigationInfo_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLNavigationInfo

# Register SoVRMLNavigationInfo in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLNavigationInfo_swigregister(SoVRMLNavigationInfo)

def SoVRMLNavigationInfo_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLNavigationInfo_getClassTypeId()

def SoVRMLNavigationInfo_initClass():
    return Coin_SWIG_Python.SoVRMLNavigationInfo_initClass()

class SoVRMLNormal(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLNormal_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLNormal_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLNormal_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLNormal_swiginit(self, Coin_SWIG_Python.new_SoVRMLNormal())
    vector = property(Coin_SWIG_Python.SoVRMLNormal_vector_get, Coin_SWIG_Python.SoVRMLNormal_vector_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLNormal_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLNormal_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLNormal_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLNormal_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLNormal_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLNormal

# Register SoVRMLNormal in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLNormal_swigregister(SoVRMLNormal)

def SoVRMLNormal_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLNormal_getClassTypeId()

def SoVRMLNormal_initClass():
    return Coin_SWIG_Python.SoVRMLNormal_initClass()

class SoVRMLNormalInterpolator(SoVRMLInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLNormalInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLNormalInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLNormalInterpolator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLNormalInterpolator_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLNormalInterpolator_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLNormalInterpolator_swiginit(self, Coin_SWIG_Python.new_SoVRMLNormalInterpolator())
    keyValue = property(Coin_SWIG_Python.SoVRMLNormalInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLNormalInterpolator_keyValue_set)
    value_changed = property(Coin_SWIG_Python.SoVRMLNormalInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLNormalInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLNormalInterpolator

# Register SoVRMLNormalInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLNormalInterpolator_swigregister(SoVRMLNormalInterpolator)

def SoVRMLNormalInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLNormalInterpolator_getClassTypeId()

def SoVRMLNormalInterpolator_createInstance():
    return Coin_SWIG_Python.SoVRMLNormalInterpolator_createInstance()

def SoVRMLNormalInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLNormalInterpolator_initClass()

class SoVRMLOrientationInterpolator(SoVRMLInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLOrientationInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLOrientationInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLOrientationInterpolator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLOrientationInterpolator_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLOrientationInterpolator_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLOrientationInterpolator_swiginit(self, Coin_SWIG_Python.new_SoVRMLOrientationInterpolator())
    keyValue = property(Coin_SWIG_Python.SoVRMLOrientationInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLOrientationInterpolator_keyValue_set)
    value_changed = property(Coin_SWIG_Python.SoVRMLOrientationInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLOrientationInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLOrientationInterpolator

# Register SoVRMLOrientationInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLOrientationInterpolator_swigregister(SoVRMLOrientationInterpolator)

def SoVRMLOrientationInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLOrientationInterpolator_getClassTypeId()

def SoVRMLOrientationInterpolator_createInstance():
    return Coin_SWIG_Python.SoVRMLOrientationInterpolator_createInstance()

def SoVRMLOrientationInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLOrientationInterpolator_initClass()

class SoVRMLPixelTexture(SoVRMLTexture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLPixelTexture_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLPixelTexture_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLPixelTexture_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLPixelTexture_swiginit(self, Coin_SWIG_Python.new_SoVRMLPixelTexture())
    image = property(Coin_SWIG_Python.SoVRMLPixelTexture_image_get, Coin_SWIG_Python.SoVRMLPixelTexture_image_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLPixelTexture_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLPixelTexture_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLPixelTexture_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLPixelTexture_rayPick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPixelTexture

# Register SoVRMLPixelTexture in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLPixelTexture_swigregister(SoVRMLPixelTexture)

def SoVRMLPixelTexture_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLPixelTexture_getClassTypeId()

def SoVRMLPixelTexture_initClass():
    return Coin_SWIG_Python.SoVRMLPixelTexture_initClass()

class SoVRMLPlaneSensor(SoVRMLDragSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLPlaneSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLPlaneSensor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLPlaneSensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLPlaneSensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLPlaneSensor())
    minPosition = property(Coin_SWIG_Python.SoVRMLPlaneSensor_minPosition_get, Coin_SWIG_Python.SoVRMLPlaneSensor_minPosition_set)
    maxPosition = property(Coin_SWIG_Python.SoVRMLPlaneSensor_maxPosition_get, Coin_SWIG_Python.SoVRMLPlaneSensor_maxPosition_set)
    offset = property(Coin_SWIG_Python.SoVRMLPlaneSensor_offset_get, Coin_SWIG_Python.SoVRMLPlaneSensor_offset_set)
    translation_changed = property(Coin_SWIG_Python.SoVRMLPlaneSensor_translation_changed_get, Coin_SWIG_Python.SoVRMLPlaneSensor_translation_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPlaneSensor

# Register SoVRMLPlaneSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLPlaneSensor_swigregister(SoVRMLPlaneSensor)

def SoVRMLPlaneSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLPlaneSensor_getClassTypeId()

def SoVRMLPlaneSensor_initClass():
    return Coin_SWIG_Python.SoVRMLPlaneSensor_initClass()

class SoVRMLPointLight(SoVRMLLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLPointLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLPointLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLPointLight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLPointLight_swiginit(self, Coin_SWIG_Python.new_SoVRMLPointLight())
    location = property(Coin_SWIG_Python.SoVRMLPointLight_location_get, Coin_SWIG_Python.SoVRMLPointLight_location_set)
    radius = property(Coin_SWIG_Python.SoVRMLPointLight_radius_get, Coin_SWIG_Python.SoVRMLPointLight_radius_set)
    attenuation = property(Coin_SWIG_Python.SoVRMLPointLight_attenuation_get, Coin_SWIG_Python.SoVRMLPointLight_attenuation_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLPointLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPointLight

# Register SoVRMLPointLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLPointLight_swigregister(SoVRMLPointLight)

def SoVRMLPointLight_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLPointLight_getClassTypeId()

def SoVRMLPointLight_initClass():
    return Coin_SWIG_Python.SoVRMLPointLight_initClass()

class SoVRMLVertexPoint(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLVertexPoint_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLVertexPoint_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLVertexPoint_initClass()
    coord = property(Coin_SWIG_Python.SoVRMLVertexPoint_coord_get, Coin_SWIG_Python.SoVRMLVertexPoint_coord_set)
    color = property(Coin_SWIG_Python.SoVRMLVertexPoint_color_get, Coin_SWIG_Python.SoVRMLVertexPoint_color_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLVertexPoint_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLVertexPoint_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLVertexPoint_getBoundingBox(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLVertexPoint_callback(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLVertexPoint_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLVertexPoint_getPrimitiveCount(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLVertexPoint_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVertexPoint

# Register SoVRMLVertexPoint in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLVertexPoint_swigregister(SoVRMLVertexPoint)

def SoVRMLVertexPoint_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLVertexPoint_getClassTypeId()

def SoVRMLVertexPoint_initClass():
    return Coin_SWIG_Python.SoVRMLVertexPoint_initClass()

class SoVRMLPointSet(SoVRMLVertexPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLPointSet_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLPointSet_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLPointSet_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLPointSet_swiginit(self, Coin_SWIG_Python.new_SoVRMLPointSet())

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLPointSet_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLPointSet_getBoundingBox(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPointSet

# Register SoVRMLPointSet in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLPointSet_swigregister(SoVRMLPointSet)

def SoVRMLPointSet_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLPointSet_getClassTypeId()

def SoVRMLPointSet_initClass():
    return Coin_SWIG_Python.SoVRMLPointSet_initClass()

class SoVRMLPositionInterpolator(SoVRMLInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLPositionInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLPositionInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLPositionInterpolator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLPositionInterpolator_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLPositionInterpolator_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLPositionInterpolator_swiginit(self, Coin_SWIG_Python.new_SoVRMLPositionInterpolator())
    keyValue = property(Coin_SWIG_Python.SoVRMLPositionInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLPositionInterpolator_keyValue_set)
    value_changed = property(Coin_SWIG_Python.SoVRMLPositionInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLPositionInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPositionInterpolator

# Register SoVRMLPositionInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLPositionInterpolator_swigregister(SoVRMLPositionInterpolator)

def SoVRMLPositionInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLPositionInterpolator_getClassTypeId()

def SoVRMLPositionInterpolator_createInstance():
    return Coin_SWIG_Python.SoVRMLPositionInterpolator_createInstance()

def SoVRMLPositionInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLPositionInterpolator_initClass()

class SoVRMLProximitySensor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLProximitySensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLProximitySensor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLProximitySensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLProximitySensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLProximitySensor())
    center = property(Coin_SWIG_Python.SoVRMLProximitySensor_center_get, Coin_SWIG_Python.SoVRMLProximitySensor_center_set)
    size = property(Coin_SWIG_Python.SoVRMLProximitySensor_size_get, Coin_SWIG_Python.SoVRMLProximitySensor_size_set)
    enabled = property(Coin_SWIG_Python.SoVRMLProximitySensor_enabled_get, Coin_SWIG_Python.SoVRMLProximitySensor_enabled_set)
    isActive = property(Coin_SWIG_Python.SoVRMLProximitySensor_isActive_get, Coin_SWIG_Python.SoVRMLProximitySensor_isActive_set)
    position_changed = property(Coin_SWIG_Python.SoVRMLProximitySensor_position_changed_get, Coin_SWIG_Python.SoVRMLProximitySensor_position_changed_set)
    orientation_changed = property(Coin_SWIG_Python.SoVRMLProximitySensor_orientation_changed_get, Coin_SWIG_Python.SoVRMLProximitySensor_orientation_changed_set)
    enterTime = property(Coin_SWIG_Python.SoVRMLProximitySensor_enterTime_get, Coin_SWIG_Python.SoVRMLProximitySensor_enterTime_set)
    exitTime = property(Coin_SWIG_Python.SoVRMLProximitySensor_exitTime_get, Coin_SWIG_Python.SoVRMLProximitySensor_exitTime_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoVRMLProximitySensor_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLProximitySensor_doAction(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLProximitySensor_GLRender(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLProximitySensor_callback(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLProximitySensor_rayPick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLProximitySensor_getBoundingBox(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLProximitySensor

# Register SoVRMLProximitySensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLProximitySensor_swigregister(SoVRMLProximitySensor)

def SoVRMLProximitySensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLProximitySensor_getClassTypeId()

def SoVRMLProximitySensor_initClass():
    return Coin_SWIG_Python.SoVRMLProximitySensor_initClass()

class SoVRMLScalarInterpolator(SoVRMLInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLScalarInterpolator_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLScalarInterpolator_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLScalarInterpolator_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLScalarInterpolator_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLScalarInterpolator_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLScalarInterpolator_swiginit(self, Coin_SWIG_Python.new_SoVRMLScalarInterpolator())
    keyValue = property(Coin_SWIG_Python.SoVRMLScalarInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLScalarInterpolator_keyValue_set)
    value_changed = property(Coin_SWIG_Python.SoVRMLScalarInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLScalarInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLScalarInterpolator

# Register SoVRMLScalarInterpolator in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLScalarInterpolator_swigregister(SoVRMLScalarInterpolator)

def SoVRMLScalarInterpolator_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLScalarInterpolator_getClassTypeId()

def SoVRMLScalarInterpolator_createInstance():
    return Coin_SWIG_Python.SoVRMLScalarInterpolator_createInstance()

def SoVRMLScalarInterpolator_initClass():
    return Coin_SWIG_Python.SoVRMLScalarInterpolator_initClass()

class SoVRMLScript(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLScript_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLScript_swiginit(self, Coin_SWIG_Python.new_SoVRMLScript())

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLScript_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLScript_getTypeId(self)
    url = property(Coin_SWIG_Python.SoVRMLScript_url_get, Coin_SWIG_Python.SoVRMLScript_url_set)
    directOutput = property(Coin_SWIG_Python.SoVRMLScript_directOutput_get, Coin_SWIG_Python.SoVRMLScript_directOutput_set)
    mustEvaluate = property(Coin_SWIG_Python.SoVRMLScript_mustEvaluate_get, Coin_SWIG_Python.SoVRMLScript_mustEvaluate_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLScript_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLScript_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLScript_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLScript_getBoundingBox(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLScript_pick(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLScript_handleEvent(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLScript_write(self, action)

    @staticmethod
    def setScriptEvaluateCB(cb, closure):
        return Coin_SWIG_Python.SoVRMLScript_setScriptEvaluateCB(cb, closure)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLScript

# Register SoVRMLScript in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLScript_swigregister(SoVRMLScript)

def SoVRMLScript_initClass():
    return Coin_SWIG_Python.SoVRMLScript_initClass()

def SoVRMLScript_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLScript_getClassTypeId()

def SoVRMLScript_setScriptEvaluateCB(cb, closure):
    return Coin_SWIG_Python.SoVRMLScript_setScriptEvaluateCB(cb, closure)

class SoVRMLShape(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLShape_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLShape_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLShape_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLShape_swiginit(self, Coin_SWIG_Python.new_SoVRMLShape())
    OFF = Coin_SWIG_Python.SoVRMLShape_OFF
    ON = Coin_SWIG_Python.SoVRMLShape_ON
    AUTO = Coin_SWIG_Python.SoVRMLShape_AUTO
    appearance = property(Coin_SWIG_Python.SoVRMLShape_appearance_get, Coin_SWIG_Python.SoVRMLShape_appearance_set)
    geometry = property(Coin_SWIG_Python.SoVRMLShape_geometry_get, Coin_SWIG_Python.SoVRMLShape_geometry_set)
    renderCaching = property(Coin_SWIG_Python.SoVRMLShape_renderCaching_get, Coin_SWIG_Python.SoVRMLShape_renderCaching_set)
    boundingBoxCaching = property(Coin_SWIG_Python.SoVRMLShape_boundingBoxCaching_get, Coin_SWIG_Python.SoVRMLShape_boundingBoxCaching_set)

    @staticmethod
    def setNumRenderCaches(num):
        return Coin_SWIG_Python.SoVRMLShape_setNumRenderCaches(num)

    @staticmethod
    def getNumRenderCaches():
        return Coin_SWIG_Python.SoVRMLShape_getNumRenderCaches()

    def affectsState(self):
        return Coin_SWIG_Python.SoVRMLShape_affectsState(self)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLShape_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLShape_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLShape_GLRender(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLShape_getBoundingBox(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLShape_rayPick(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLShape_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLShape_write(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLShape_getPrimitiveCount(self, action)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLShape_getChildren(self)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLShape_notify(self, list)

    def copyContents(self, srcFrom, copyConn):
        return Coin_SWIG_Python.SoVRMLShape_copyContents(self, srcFrom, copyConn)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLShape

# Register SoVRMLShape in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLShape_swigregister(SoVRMLShape)

def SoVRMLShape_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLShape_getClassTypeId()

def SoVRMLShape_initClass():
    return Coin_SWIG_Python.SoVRMLShape_initClass()

def SoVRMLShape_setNumRenderCaches(num):
    return Coin_SWIG_Python.SoVRMLShape_setNumRenderCaches(num)

def SoVRMLShape_getNumRenderCaches():
    return Coin_SWIG_Python.SoVRMLShape_getNumRenderCaches()

class SoVRMLSound(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLSound_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLSound_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLSound_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLSound_swiginit(self, Coin_SWIG_Python.new_SoVRMLSound())
    source = property(Coin_SWIG_Python.SoVRMLSound_source_get, Coin_SWIG_Python.SoVRMLSound_source_set)
    intensity = property(Coin_SWIG_Python.SoVRMLSound_intensity_get, Coin_SWIG_Python.SoVRMLSound_intensity_set)
    priority = property(Coin_SWIG_Python.SoVRMLSound_priority_get, Coin_SWIG_Python.SoVRMLSound_priority_set)
    location = property(Coin_SWIG_Python.SoVRMLSound_location_get, Coin_SWIG_Python.SoVRMLSound_location_set)
    direction = property(Coin_SWIG_Python.SoVRMLSound_direction_get, Coin_SWIG_Python.SoVRMLSound_direction_set)
    minFront = property(Coin_SWIG_Python.SoVRMLSound_minFront_get, Coin_SWIG_Python.SoVRMLSound_minFront_set)
    maxFront = property(Coin_SWIG_Python.SoVRMLSound_maxFront_get, Coin_SWIG_Python.SoVRMLSound_maxFront_set)
    minBack = property(Coin_SWIG_Python.SoVRMLSound_minBack_get, Coin_SWIG_Python.SoVRMLSound_minBack_set)
    maxBack = property(Coin_SWIG_Python.SoVRMLSound_maxBack_get, Coin_SWIG_Python.SoVRMLSound_maxBack_set)
    spatialize = property(Coin_SWIG_Python.SoVRMLSound_spatialize_get, Coin_SWIG_Python.SoVRMLSound_spatialize_set)

    def setDopplerVelocity(self, velocity):
        return Coin_SWIG_Python.SoVRMLSound_setDopplerVelocity(self, velocity)

    def getDopplerVelocity(self):
        return Coin_SWIG_Python.SoVRMLSound_getDopplerVelocity(self)

    def setDopplerFactor(self, factor):
        return Coin_SWIG_Python.SoVRMLSound_setDopplerFactor(self, factor)

    def getDopplerFactor(self):
        return Coin_SWIG_Python.SoVRMLSound_getDopplerFactor(self)

    def startPlaying(self, path, userdataptr):
        return Coin_SWIG_Python.SoVRMLSound_startPlaying(self, path, userdataptr)

    def stopPlaying(self, path, userdataptr):
        return Coin_SWIG_Python.SoVRMLSound_stopPlaying(self, path, userdataptr)

    @staticmethod
    def setDefaultBufferingProperties(bufferLength, numBuffers, sleepTime):
        return Coin_SWIG_Python.SoVRMLSound_setDefaultBufferingProperties(bufferLength, numBuffers, sleepTime)

    def setBufferingProperties(self, bufferLength, numBuffers, sleepTime):
        return Coin_SWIG_Python.SoVRMLSound_setBufferingProperties(self, bufferLength, numBuffers, sleepTime)

    def getBufferingProperties(self, bufferLength, numBuffers, sleepTime):
        return Coin_SWIG_Python.SoVRMLSound_getBufferingProperties(self, bufferLength, numBuffers, sleepTime)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoVRMLSound_audioRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSound

# Register SoVRMLSound in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLSound_swigregister(SoVRMLSound)

def SoVRMLSound_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLSound_getClassTypeId()

def SoVRMLSound_initClass():
    return Coin_SWIG_Python.SoVRMLSound_initClass()

def SoVRMLSound_setDefaultBufferingProperties(bufferLength, numBuffers, sleepTime):
    return Coin_SWIG_Python.SoVRMLSound_setDefaultBufferingProperties(bufferLength, numBuffers, sleepTime)

class SoVRMLSphere(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLSphere_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLSphere_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLSphere_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLSphere_swiginit(self, Coin_SWIG_Python.new_SoVRMLSphere())
    radius = property(Coin_SWIG_Python.SoVRMLSphere_radius_get, Coin_SWIG_Python.SoVRMLSphere_radius_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLSphere_GLRender(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLSphere_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLSphere_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSphere

# Register SoVRMLSphere in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLSphere_swigregister(SoVRMLSphere)

def SoVRMLSphere_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLSphere_getClassTypeId()

def SoVRMLSphere_initClass():
    return Coin_SWIG_Python.SoVRMLSphere_initClass()

class SoVRMLSphereSensor(SoVRMLDragSensor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLSphereSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLSphereSensor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLSphereSensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLSphereSensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLSphereSensor())
    offset = property(Coin_SWIG_Python.SoVRMLSphereSensor_offset_get, Coin_SWIG_Python.SoVRMLSphereSensor_offset_set)
    rotation_changed = property(Coin_SWIG_Python.SoVRMLSphereSensor_rotation_changed_get, Coin_SWIG_Python.SoVRMLSphereSensor_rotation_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSphereSensor

# Register SoVRMLSphereSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLSphereSensor_swigregister(SoVRMLSphereSensor)

def SoVRMLSphereSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLSphereSensor_getClassTypeId()

def SoVRMLSphereSensor_initClass():
    return Coin_SWIG_Python.SoVRMLSphereSensor_initClass()

class SoVRMLSpotLight(SoVRMLLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLSpotLight_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLSpotLight_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLSpotLight_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLSpotLight_swiginit(self, Coin_SWIG_Python.new_SoVRMLSpotLight())
    location = property(Coin_SWIG_Python.SoVRMLSpotLight_location_get, Coin_SWIG_Python.SoVRMLSpotLight_location_set)
    direction = property(Coin_SWIG_Python.SoVRMLSpotLight_direction_get, Coin_SWIG_Python.SoVRMLSpotLight_direction_set)
    beamWidth = property(Coin_SWIG_Python.SoVRMLSpotLight_beamWidth_get, Coin_SWIG_Python.SoVRMLSpotLight_beamWidth_set)
    cutOffAngle = property(Coin_SWIG_Python.SoVRMLSpotLight_cutOffAngle_get, Coin_SWIG_Python.SoVRMLSpotLight_cutOffAngle_set)
    radius = property(Coin_SWIG_Python.SoVRMLSpotLight_radius_get, Coin_SWIG_Python.SoVRMLSpotLight_radius_set)
    attenuation = property(Coin_SWIG_Python.SoVRMLSpotLight_attenuation_get, Coin_SWIG_Python.SoVRMLSpotLight_attenuation_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLSpotLight_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSpotLight

# Register SoVRMLSpotLight in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLSpotLight_swigregister(SoVRMLSpotLight)

def SoVRMLSpotLight_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLSpotLight_getClassTypeId()

def SoVRMLSpotLight_initClass():
    return Coin_SWIG_Python.SoVRMLSpotLight_initClass()

class SoVRMLSwitch(SoGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLSwitch_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLSwitch_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLSwitch_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoVRMLSwitch_swiginit(self, Coin_SWIG_Python.new_SoVRMLSwitch(*args))
    choice = property(Coin_SWIG_Python.SoVRMLSwitch_choice_get, Coin_SWIG_Python.SoVRMLSwitch_choice_set)
    whichChoice = property(Coin_SWIG_Python.SoVRMLSwitch_whichChoice_get, Coin_SWIG_Python.SoVRMLSwitch_whichChoice_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoVRMLSwitch_affectsState(self)

    def addChoice(self, choice):
        return Coin_SWIG_Python.SoVRMLSwitch_addChoice(self, choice)

    def insertChoice(self, choice, idx):
        return Coin_SWIG_Python.SoVRMLSwitch_insertChoice(self, choice, idx)

    def getChoice(self, idx):
        return Coin_SWIG_Python.SoVRMLSwitch_getChoice(self, idx)

    def findChoice(self, choice):
        return Coin_SWIG_Python.SoVRMLSwitch_findChoice(self, choice)

    def getNumChoices(self):
        return Coin_SWIG_Python.SoVRMLSwitch_getNumChoices(self)

    def removeChoice(self, *args):
        return Coin_SWIG_Python.SoVRMLSwitch_removeChoice(self, *args)

    def removeAllChoices(self):
        return Coin_SWIG_Python.SoVRMLSwitch_removeAllChoices(self)

    def replaceChoice(self, *args):
        return Coin_SWIG_Python.SoVRMLSwitch_replaceChoice(self, *args)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_pick(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_getBoundingBox(self, action)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_handleEvent(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_getMatrix(self, action)

    def search(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_search(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_write(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoVRMLSwitch_audioRender(self, action)

    def addChild(self, child):
        return Coin_SWIG_Python.SoVRMLSwitch_addChild(self, child)

    def insertChild(self, child, idx):
        return Coin_SWIG_Python.SoVRMLSwitch_insertChild(self, child, idx)

    def getChild(self, idx):
        return Coin_SWIG_Python.SoVRMLSwitch_getChild(self, idx)

    def findChild(self, child):
        return Coin_SWIG_Python.SoVRMLSwitch_findChild(self, child)

    def getNumChildren(self):
        return Coin_SWIG_Python.SoVRMLSwitch_getNumChildren(self)

    def removeChild(self, *args):
        return Coin_SWIG_Python.SoVRMLSwitch_removeChild(self, *args)

    def removeAllChildren(self):
        return Coin_SWIG_Python.SoVRMLSwitch_removeAllChildren(self)

    def replaceChild(self, *args):
        return Coin_SWIG_Python.SoVRMLSwitch_replaceChild(self, *args)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLSwitch_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSwitch

# Register SoVRMLSwitch in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLSwitch_swigregister(SoVRMLSwitch)

def SoVRMLSwitch_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLSwitch_getClassTypeId()

def SoVRMLSwitch_initClass():
    return Coin_SWIG_Python.SoVRMLSwitch_initClass()

class SoVRMLText(SoVRMLGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLText_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLText_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLText_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLText_swiginit(self, Coin_SWIG_Python.new_SoVRMLText())
    string = property(Coin_SWIG_Python.SoVRMLText_string_get, Coin_SWIG_Python.SoVRMLText_string_set)
    fontStyle = property(Coin_SWIG_Python.SoVRMLText_fontStyle_get, Coin_SWIG_Python.SoVRMLText_fontStyle_set)
    maxExtent = property(Coin_SWIG_Python.SoVRMLText_maxExtent_get, Coin_SWIG_Python.SoVRMLText_maxExtent_set)
    length = property(Coin_SWIG_Python.SoVRMLText_length_get, Coin_SWIG_Python.SoVRMLText_length_set)
    BEGIN = Coin_SWIG_Python.SoVRMLText_BEGIN
    END = Coin_SWIG_Python.SoVRMLText_END
    MIDDLE = Coin_SWIG_Python.SoVRMLText_MIDDLE

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLText_GLRender(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLText_getPrimitiveCount(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLText_notify(self, list)

    def getChildren(self):
        return Coin_SWIG_Python.SoVRMLText_getChildren(self)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLText

# Register SoVRMLText in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLText_swigregister(SoVRMLText)

def SoVRMLText_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLText_getClassTypeId()

def SoVRMLText_initClass():
    return Coin_SWIG_Python.SoVRMLText_initClass()

class SoVRMLTextureCoordinate(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLTextureCoordinate_swiginit(self, Coin_SWIG_Python.new_SoVRMLTextureCoordinate())
    point = property(Coin_SWIG_Python.SoVRMLTextureCoordinate_point_get, Coin_SWIG_Python.SoVRMLTextureCoordinate_point_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_GLRender(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_pick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLTextureCoordinate_getPrimitiveCount(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTextureCoordinate

# Register SoVRMLTextureCoordinate in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLTextureCoordinate_swigregister(SoVRMLTextureCoordinate)

def SoVRMLTextureCoordinate_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLTextureCoordinate_getClassTypeId()

def SoVRMLTextureCoordinate_initClass():
    return Coin_SWIG_Python.SoVRMLTextureCoordinate_initClass()

class SoVRMLTextureTransform(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLTextureTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLTextureTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLTextureTransform_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLTextureTransform_swiginit(self, Coin_SWIG_Python.new_SoVRMLTextureTransform())
    translation = property(Coin_SWIG_Python.SoVRMLTextureTransform_translation_get, Coin_SWIG_Python.SoVRMLTextureTransform_translation_set)
    rotation = property(Coin_SWIG_Python.SoVRMLTextureTransform_rotation_get, Coin_SWIG_Python.SoVRMLTextureTransform_rotation_set)
    scale = property(Coin_SWIG_Python.SoVRMLTextureTransform_scale_get, Coin_SWIG_Python.SoVRMLTextureTransform_scale_set)
    center = property(Coin_SWIG_Python.SoVRMLTextureTransform_center_get, Coin_SWIG_Python.SoVRMLTextureTransform_center_set)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLTextureTransform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLTextureTransform_callback(self, action)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLTextureTransform_GLRender(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoVRMLTextureTransform_getMatrix(self, action)

    def pick(self, action):
        return Coin_SWIG_Python.SoVRMLTextureTransform_pick(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTextureTransform

# Register SoVRMLTextureTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLTextureTransform_swigregister(SoVRMLTextureTransform)

def SoVRMLTextureTransform_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLTextureTransform_getClassTypeId()

def SoVRMLTextureTransform_initClass():
    return Coin_SWIG_Python.SoVRMLTextureTransform_initClass()

class SoVRMLTimeSensor(SoNodeEngine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLTimeSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLTimeSensor_getTypeId(self)

    def getOutputData(self):
        return Coin_SWIG_Python.SoVRMLTimeSensor_getOutputData(self)

    @staticmethod
    def createInstance():
        return Coin_SWIG_Python.SoVRMLTimeSensor_createInstance()

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLTimeSensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLTimeSensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLTimeSensor())
    cycleInterval = property(Coin_SWIG_Python.SoVRMLTimeSensor_cycleInterval_get, Coin_SWIG_Python.SoVRMLTimeSensor_cycleInterval_set)
    enabled = property(Coin_SWIG_Python.SoVRMLTimeSensor_enabled_get, Coin_SWIG_Python.SoVRMLTimeSensor_enabled_set)
    loop = property(Coin_SWIG_Python.SoVRMLTimeSensor_loop_get, Coin_SWIG_Python.SoVRMLTimeSensor_loop_set)
    startTime = property(Coin_SWIG_Python.SoVRMLTimeSensor_startTime_get, Coin_SWIG_Python.SoVRMLTimeSensor_startTime_set)
    stopTime = property(Coin_SWIG_Python.SoVRMLTimeSensor_stopTime_get, Coin_SWIG_Python.SoVRMLTimeSensor_stopTime_set)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLTimeSensor_notify(self, list)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLTimeSensor_handleEvent(self, action)

    def write(self, action):
        return Coin_SWIG_Python.SoVRMLTimeSensor_write(self, action)
    cycleTime = property(Coin_SWIG_Python.SoVRMLTimeSensor_cycleTime_get, Coin_SWIG_Python.SoVRMLTimeSensor_cycleTime_set)
    fraction_changed = property(Coin_SWIG_Python.SoVRMLTimeSensor_fraction_changed_get, Coin_SWIG_Python.SoVRMLTimeSensor_fraction_changed_set)
    isActive = property(Coin_SWIG_Python.SoVRMLTimeSensor_isActive_get, Coin_SWIG_Python.SoVRMLTimeSensor_isActive_set)
    time = property(Coin_SWIG_Python.SoVRMLTimeSensor_time_get, Coin_SWIG_Python.SoVRMLTimeSensor_time_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTimeSensor

# Register SoVRMLTimeSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLTimeSensor_swigregister(SoVRMLTimeSensor)

def SoVRMLTimeSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLTimeSensor_getClassTypeId()

def SoVRMLTimeSensor_createInstance():
    return Coin_SWIG_Python.SoVRMLTimeSensor_createInstance()

def SoVRMLTimeSensor_initClass():
    return Coin_SWIG_Python.SoVRMLTimeSensor_initClass()

class SoVRMLTouchSensor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLTouchSensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLTouchSensor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLTouchSensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLTouchSensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLTouchSensor())
    enabled = property(Coin_SWIG_Python.SoVRMLTouchSensor_enabled_get, Coin_SWIG_Python.SoVRMLTouchSensor_enabled_set)
    hitNormal_changed = property(Coin_SWIG_Python.SoVRMLTouchSensor_hitNormal_changed_get, Coin_SWIG_Python.SoVRMLTouchSensor_hitNormal_changed_set)
    hitPoint_changed = property(Coin_SWIG_Python.SoVRMLTouchSensor_hitPoint_changed_get, Coin_SWIG_Python.SoVRMLTouchSensor_hitPoint_changed_set)
    hitTexCoord_changed = property(Coin_SWIG_Python.SoVRMLTouchSensor_hitTexCoord_changed_get, Coin_SWIG_Python.SoVRMLTouchSensor_hitTexCoord_changed_set)
    isActive = property(Coin_SWIG_Python.SoVRMLTouchSensor_isActive_get, Coin_SWIG_Python.SoVRMLTouchSensor_isActive_set)
    isOver = property(Coin_SWIG_Python.SoVRMLTouchSensor_isOver_get, Coin_SWIG_Python.SoVRMLTouchSensor_isOver_set)
    touchTime = property(Coin_SWIG_Python.SoVRMLTouchSensor_touchTime_get, Coin_SWIG_Python.SoVRMLTouchSensor_touchTime_set)

    def affectsState(self):
        return Coin_SWIG_Python.SoVRMLTouchSensor_affectsState(self)

    def handleEvent(self, action):
        return Coin_SWIG_Python.SoVRMLTouchSensor_handleEvent(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTouchSensor

# Register SoVRMLTouchSensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLTouchSensor_swigregister(SoVRMLTouchSensor)

def SoVRMLTouchSensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLTouchSensor_getClassTypeId()

def SoVRMLTouchSensor_initClass():
    return Coin_SWIG_Python.SoVRMLTouchSensor_initClass()

class SoVRMLTransform(SoVRMLGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLTransform_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLTransform_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLTransform_initClass()

    def __init__(self, *args):
        Coin_SWIG_Python.SoVRMLTransform_swiginit(self, Coin_SWIG_Python.new_SoVRMLTransform(*args))
    translation = property(Coin_SWIG_Python.SoVRMLTransform_translation_get, Coin_SWIG_Python.SoVRMLTransform_translation_set)
    rotation = property(Coin_SWIG_Python.SoVRMLTransform_rotation_get, Coin_SWIG_Python.SoVRMLTransform_rotation_set)
    scale = property(Coin_SWIG_Python.SoVRMLTransform_scale_get, Coin_SWIG_Python.SoVRMLTransform_scale_set)
    scaleOrientation = property(Coin_SWIG_Python.SoVRMLTransform_scaleOrientation_get, Coin_SWIG_Python.SoVRMLTransform_scaleOrientation_set)
    center = property(Coin_SWIG_Python.SoVRMLTransform_center_get, Coin_SWIG_Python.SoVRMLTransform_center_set)

    def pointAt(self, srcFrom, destTo):
        return Coin_SWIG_Python.SoVRMLTransform_pointAt(self, srcFrom, destTo)

    def getScaleSpaceMatrix(self, inverse):
        return Coin_SWIG_Python.SoVRMLTransform_getScaleSpaceMatrix(self, inverse)

    def getRotationSpaceMatrix(self, inverse):
        return Coin_SWIG_Python.SoVRMLTransform_getRotationSpaceMatrix(self, inverse)

    def getTranslationSpaceMatrix(self, inverse):
        return Coin_SWIG_Python.SoVRMLTransform_getTranslationSpaceMatrix(self, inverse)

    def multLeft(self):
        return Coin_SWIG_Python.SoVRMLTransform_multLeft(self)

    def multRight(self):
        return Coin_SWIG_Python.SoVRMLTransform_multRight(self)

    def combineLeft(self, leftnode):
        return Coin_SWIG_Python.SoVRMLTransform_combineLeft(self, leftnode)

    def combineRight(self, rightnode):
        return Coin_SWIG_Python.SoVRMLTransform_combineRight(self, rightnode)

    def setMatrix(self):
        return Coin_SWIG_Python.SoVRMLTransform_setMatrix(self)

    def recenter(self, newcenter):
        return Coin_SWIG_Python.SoVRMLTransform_recenter(self, newcenter)

    def doAction(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_doAction(self, action)

    def callback(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_callback(self, action)

    def getBoundingBox(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_getBoundingBox(self, action)

    def getMatrix(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_getMatrix(self, action)

    def rayPick(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_rayPick(self, action)

    def getPrimitiveCount(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_getPrimitiveCount(self, action)

    def audioRender(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_audioRender(self, action)

    def GLRenderBelowPath(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_GLRenderBelowPath(self, action)

    def GLRenderInPath(self, action):
        return Coin_SWIG_Python.SoVRMLTransform_GLRenderInPath(self, action)

    def notify(self, list):
        return Coin_SWIG_Python.SoVRMLTransform_notify(self, list)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTransform

# Register SoVRMLTransform in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLTransform_swigregister(SoVRMLTransform)

def SoVRMLTransform_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLTransform_getClassTypeId()

def SoVRMLTransform_initClass():
    return Coin_SWIG_Python.SoVRMLTransform_initClass()

class SoVRMLViewpoint(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLViewpoint_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLViewpoint_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLViewpoint_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLViewpoint_swiginit(self, Coin_SWIG_Python.new_SoVRMLViewpoint())
    position = property(Coin_SWIG_Python.SoVRMLViewpoint_position_get, Coin_SWIG_Python.SoVRMLViewpoint_position_set)
    orientation = property(Coin_SWIG_Python.SoVRMLViewpoint_orientation_get, Coin_SWIG_Python.SoVRMLViewpoint_orientation_set)
    fieldOfView = property(Coin_SWIG_Python.SoVRMLViewpoint_fieldOfView_get, Coin_SWIG_Python.SoVRMLViewpoint_fieldOfView_set)
    description = property(Coin_SWIG_Python.SoVRMLViewpoint_description_get, Coin_SWIG_Python.SoVRMLViewpoint_description_set)
    jump = property(Coin_SWIG_Python.SoVRMLViewpoint_jump_get, Coin_SWIG_Python.SoVRMLViewpoint_jump_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLViewpoint_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLViewpoint

# Register SoVRMLViewpoint in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLViewpoint_swigregister(SoVRMLViewpoint)

def SoVRMLViewpoint_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLViewpoint_getClassTypeId()

def SoVRMLViewpoint_initClass():
    return Coin_SWIG_Python.SoVRMLViewpoint_initClass()

class SoVRMLVisibilitySensor(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLVisibilitySensor_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLVisibilitySensor_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLVisibilitySensor_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLVisibilitySensor_swiginit(self, Coin_SWIG_Python.new_SoVRMLVisibilitySensor())
    center = property(Coin_SWIG_Python.SoVRMLVisibilitySensor_center_get, Coin_SWIG_Python.SoVRMLVisibilitySensor_center_set)
    size = property(Coin_SWIG_Python.SoVRMLVisibilitySensor_size_get, Coin_SWIG_Python.SoVRMLVisibilitySensor_size_set)
    enabled = property(Coin_SWIG_Python.SoVRMLVisibilitySensor_enabled_get, Coin_SWIG_Python.SoVRMLVisibilitySensor_enabled_set)

    def GLRender(self, action):
        return Coin_SWIG_Python.SoVRMLVisibilitySensor_GLRender(self, action)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVisibilitySensor

# Register SoVRMLVisibilitySensor in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLVisibilitySensor_swigregister(SoVRMLVisibilitySensor)

def SoVRMLVisibilitySensor_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLVisibilitySensor_getClassTypeId()

def SoVRMLVisibilitySensor_initClass():
    return Coin_SWIG_Python.SoVRMLVisibilitySensor_initClass()

class SoVRMLWorldInfo(SoNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getClassTypeId():
        return Coin_SWIG_Python.SoVRMLWorldInfo_getClassTypeId()

    def getTypeId(self):
        return Coin_SWIG_Python.SoVRMLWorldInfo_getTypeId(self)

    @staticmethod
    def initClass():
        return Coin_SWIG_Python.SoVRMLWorldInfo_initClass()

    def __init__(self):
        Coin_SWIG_Python.SoVRMLWorldInfo_swiginit(self, Coin_SWIG_Python.new_SoVRMLWorldInfo())
    title = property(Coin_SWIG_Python.SoVRMLWorldInfo_title_get, Coin_SWIG_Python.SoVRMLWorldInfo_title_set)
    info = property(Coin_SWIG_Python.SoVRMLWorldInfo_info_get, Coin_SWIG_Python.SoVRMLWorldInfo_info_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLWorldInfo

# Register SoVRMLWorldInfo in Coin_SWIG_Python:
Coin_SWIG_Python.SoVRMLWorldInfo_swigregister(SoVRMLWorldInfo)

def SoVRMLWorldInfo_getClassTypeId():
    return Coin_SWIG_Python.SoVRMLWorldInfo_getClassTypeId()

def SoVRMLWorldInfo_initClass():
    return Coin_SWIG_Python.SoVRMLWorldInfo_initClass()


for x in locals().values():
  if isinstance(x, type) and issubclass(x, SoFieldContainer):
    for name, thing in x.__dict__.items():
      if isinstance(thing, property):
        delattr(x, name)



