# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import Coin_SWIG_Python
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import Coin_SWIG_Python as _coin

class charp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_charp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_charp
    __del__ = lambda self : None;
    def assign(*args): return Coin_SWIG_Python.charp_assign(*args)
    def value(*args): return Coin_SWIG_Python.charp_value(*args)
    def cast(*args): return Coin_SWIG_Python.charp_cast(*args)
    frompointer = staticmethod(Coin_SWIG_Python.charp_frompointer)
charp_swigregister = Coin_SWIG_Python.charp_swigregister
charp_swigregister(charp)
cast = Coin_SWIG_Python.cast
charp_frompointer = Coin_SWIG_Python.charp_frompointer

class intp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_intp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_intp
    __del__ = lambda self : None;
    def assign(*args): return Coin_SWIG_Python.intp_assign(*args)
    def value(*args): return Coin_SWIG_Python.intp_value(*args)
    def cast(*args): return Coin_SWIG_Python.intp_cast(*args)
    frompointer = staticmethod(Coin_SWIG_Python.intp_frompointer)
intp_swigregister = Coin_SWIG_Python.intp_swigregister
intp_swigregister(intp)
intp_frompointer = Coin_SWIG_Python.intp_frompointer

class longp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_longp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_longp
    __del__ = lambda self : None;
    def assign(*args): return Coin_SWIG_Python.longp_assign(*args)
    def value(*args): return Coin_SWIG_Python.longp_value(*args)
    def cast(*args): return Coin_SWIG_Python.longp_cast(*args)
    frompointer = staticmethod(Coin_SWIG_Python.longp_frompointer)
longp_swigregister = Coin_SWIG_Python.longp_swigregister
longp_swigregister(longp)
longp_frompointer = Coin_SWIG_Python.longp_frompointer

class floatp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_floatp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_floatp
    __del__ = lambda self : None;
    def assign(*args): return Coin_SWIG_Python.floatp_assign(*args)
    def value(*args): return Coin_SWIG_Python.floatp_value(*args)
    def cast(*args): return Coin_SWIG_Python.floatp_cast(*args)
    frompointer = staticmethod(Coin_SWIG_Python.floatp_frompointer)
floatp_swigregister = Coin_SWIG_Python.floatp_swigregister
floatp_swigregister(floatp)
floatp_frompointer = Coin_SWIG_Python.floatp_frompointer

class doublep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_doublep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_doublep
    __del__ = lambda self : None;
    def assign(*args): return Coin_SWIG_Python.doublep_assign(*args)
    def value(*args): return Coin_SWIG_Python.doublep_value(*args)
    def cast(*args): return Coin_SWIG_Python.doublep_cast(*args)
    frompointer = staticmethod(Coin_SWIG_Python.doublep_frompointer)
doublep_swigregister = Coin_SWIG_Python.doublep_swigregister
doublep_swigregister(doublep)
doublep_frompointer = Coin_SWIG_Python.doublep_frompointer

FALSE = Coin_SWIG_Python.FALSE
TRUE = Coin_SWIG_Python.TRUE
HAVE_INTTYPES_H = Coin_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = Coin_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = Coin_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = Coin_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = Coin_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = Coin_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = Coin_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = Coin_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = Coin_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = Coin_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = Coin_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = Coin_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = Coin_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = Coin_SWIG_Python.HAVE_UINTPTR_T
M_E = Coin_SWIG_Python.M_E
M_LOG2E = Coin_SWIG_Python.M_LOG2E
M_LOG10E = Coin_SWIG_Python.M_LOG10E
M_LN2 = Coin_SWIG_Python.M_LN2
M_LN10 = Coin_SWIG_Python.M_LN10
M_PI = Coin_SWIG_Python.M_PI
M_TWOPI = Coin_SWIG_Python.M_TWOPI
M_PI_2 = Coin_SWIG_Python.M_PI_2
M_PI_4 = Coin_SWIG_Python.M_PI_4
M_3PI_4 = Coin_SWIG_Python.M_3PI_4
M_SQRTPI = Coin_SWIG_Python.M_SQRTPI
M_1_PI = Coin_SWIG_Python.M_1_PI
M_2_PI = Coin_SWIG_Python.M_2_PI
M_2_SQRTPI = Coin_SWIG_Python.M_2_SQRTPI
M_SQRT2 = Coin_SWIG_Python.M_SQRT2
M_SQRT1_2 = Coin_SWIG_Python.M_SQRT1_2
M_LN2LO = Coin_SWIG_Python.M_LN2LO
M_LN2HI = Coin_SWIG_Python.M_LN2HI
M_SQRT3 = Coin_SWIG_Python.M_SQRT3
M_IVLN10 = Coin_SWIG_Python.M_IVLN10
M_LOG2_E = Coin_SWIG_Python.M_LOG2_E
M_INVLN2 = Coin_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = Coin_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = Coin_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = Coin_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = Coin_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = Coin_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = Coin_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbDict(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDict
    __del__ = lambda self : None;
    def applyToAll(*args): return Coin_SWIG_Python.SbDict_applyToAll(*args)
    def clear(*args): return Coin_SWIG_Python.SbDict_clear(*args)
    def enter(*args): return Coin_SWIG_Python.SbDict_enter(*args)
    def find(*args): return Coin_SWIG_Python.SbDict_find(*args)
    def makePList(*args): return Coin_SWIG_Python.SbDict_makePList(*args)
    def remove(*args): return Coin_SWIG_Python.SbDict_remove(*args)
    def setHashingFunction(*args): return Coin_SWIG_Python.SbDict_setHashingFunction(*args)
SbDict_swigregister = Coin_SWIG_Python.SbDict_swigregister
SbDict_swigregister(SbDict)

class SoType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fromName = staticmethod(Coin_SWIG_Python.SoType_fromName)
    def getName(*args): return Coin_SWIG_Python.SoType_getName(*args)
    def getParent(*args): return Coin_SWIG_Python.SoType_getParent(*args)
    def isDerivedFrom(*args): return Coin_SWIG_Python.SoType_isDerivedFrom(*args)
    getAllDerivedFrom = staticmethod(Coin_SWIG_Python.SoType_getAllDerivedFrom)
    def canCreateInstance(*args): return Coin_SWIG_Python.SoType_canCreateInstance(*args)
    def getData(*args): return Coin_SWIG_Python.SoType_getData(*args)
    def getKey(*args): return Coin_SWIG_Python.SoType_getKey(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoType___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoType___ne__(*args)
    def __lt__(*args): return Coin_SWIG_Python.SoType___lt__(*args)
    def __le__(*args): return Coin_SWIG_Python.SoType___le__(*args)
    def __ge__(*args): return Coin_SWIG_Python.SoType___ge__(*args)
    def __gt__(*args): return Coin_SWIG_Python.SoType___gt__(*args)
    init = staticmethod(Coin_SWIG_Python.SoType_init)
    fromKey = staticmethod(Coin_SWIG_Python.SoType_fromKey)
    badType = staticmethod(Coin_SWIG_Python.SoType_badType)
    def isBad(*args): return Coin_SWIG_Python.SoType_isBad(*args)
    def makeInternal(*args): return Coin_SWIG_Python.SoType_makeInternal(*args)
    def isInternal(*args): return Coin_SWIG_Python.SoType_isInternal(*args)
    getNumTypes = staticmethod(Coin_SWIG_Python.SoType_getNumTypes)
    def getInstantiationMethod(*args): return Coin_SWIG_Python.SoType_getInstantiationMethod(*args)
    def createInstance(*args): return Coin_SWIG_Python.SoType_createInstance(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoType(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoType
    __del__ = lambda self : None;
SoType_swigregister = Coin_SWIG_Python.SoType_swigregister
SoType_swigregister(SoType)
SoType_fromName = Coin_SWIG_Python.SoType_fromName
SoType_getAllDerivedFrom = Coin_SWIG_Python.SoType_getAllDerivedFrom
SoType_init = Coin_SWIG_Python.SoType_init
SoType_fromKey = Coin_SWIG_Python.SoType_fromKey
SoType_badType = Coin_SWIG_Python.SoType_badType
SoType_getNumTypes = Coin_SWIG_Python.SoType_getNumTypes

class SbVec2s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return Coin_SWIG_Python.SbVec2s_dot(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec2s_getValue(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec2s_negate(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec2s_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec2s___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec2s___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec2s___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec2s___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec2s___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec2s_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec2s___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec2s___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec2s___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec2s___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec2s___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec2s___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec2s___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec2s___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec2s___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2s
    __del__ = lambda self : None;
SbVec2s_swigregister = Coin_SWIG_Python.SbVec2s_swigregister
SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbPList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbPList
    __del__ = lambda self : None;
    def copy(*args): return Coin_SWIG_Python.SbPList_copy(*args)
    def fit(*args): return Coin_SWIG_Python.SbPList_fit(*args)
    def append(*args): return Coin_SWIG_Python.SbPList_append(*args)
    def find(*args): return Coin_SWIG_Python.SbPList_find(*args)
    def insert(*args): return Coin_SWIG_Python.SbPList_insert(*args)
    def removeItem(*args): return Coin_SWIG_Python.SbPList_removeItem(*args)
    def remove(*args): return Coin_SWIG_Python.SbPList_remove(*args)
    def removeFast(*args): return Coin_SWIG_Python.SbPList_removeFast(*args)
    def getLength(*args): return Coin_SWIG_Python.SbPList_getLength(*args)
    def truncate(*args): return Coin_SWIG_Python.SbPList_truncate(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SbPList_getArrayPtr(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbPList___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbPList___ne__(*args)
    def get(*args): return Coin_SWIG_Python.SbPList_get(*args)
    def set(*args): return Coin_SWIG_Python.SbPList_set(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbPList___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbPList___setitem__(*args)
    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]

SbPList_swigregister = Coin_SWIG_Python.SbPList_swigregister
SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbIntList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return Coin_SWIG_Python.SbIntList_append(*args)
    def find(*args): return Coin_SWIG_Python.SbIntList_find(*args)
    def insert(*args): return Coin_SWIG_Python.SbIntList_insert(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbIntList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbIntList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SbIntList_get(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbIntList
    __del__ = lambda self : None;
SbIntList_swigregister = Coin_SWIG_Python.SbIntList_swigregister
SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbString
    __del__ = lambda self : None;
    hash = staticmethod(Coin_SWIG_Python.SbString_hash)
    def getLength(*args): return Coin_SWIG_Python.SbString_getLength(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbString_makeEmpty(*args)
    def getString(*args): return Coin_SWIG_Python.SbString_getString(*args)
    def getSubString(*args): return Coin_SWIG_Python.SbString_getSubString(*args)
    def deleteSubString(*args): return Coin_SWIG_Python.SbString_deleteSubString(*args)
    def addIntString(*args): return Coin_SWIG_Python.SbString_addIntString(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbString___iadd__(*args)
    def compareSubString(*args): return Coin_SWIG_Python.SbString_compareSubString(*args)
    def sprintf(*args): return Coin_SWIG_Python.SbString_sprintf(*args)
    def apply(*args): return Coin_SWIG_Python.SbString_apply(*args)
    def find(*args): return Coin_SWIG_Python.SbString_find(*args)
    def findAll(*args): return Coin_SWIG_Python.SbString_findAll(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbString___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbString___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbString___getitem__(*args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(*args): return Coin_SWIG_Python.SbString___repr__(*args)
SbString_swigregister = Coin_SWIG_Python.SbString_swigregister
SbString_swigregister(SbString)
SbString_hash = Coin_SWIG_Python.SbString_hash

class SbName(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbName
    __del__ = lambda self : None;
    def getString(*args): return Coin_SWIG_Python.SbName_getString(*args)
    def getLength(*args): return Coin_SWIG_Python.SbName_getLength(*args)
    isIdentStartChar = staticmethod(Coin_SWIG_Python.SbName_isIdentStartChar)
    isIdentChar = staticmethod(Coin_SWIG_Python.SbName_isIdentChar)
    isBaseNameStartChar = staticmethod(Coin_SWIG_Python.SbName_isBaseNameStartChar)
    isBaseNameChar = staticmethod(Coin_SWIG_Python.SbName_isBaseNameChar)
    def __eq__(*args): return Coin_SWIG_Python.SbName___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbName___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbName___getitem__(*args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(*args): return Coin_SWIG_Python.SbName___repr__(*args)
SbName_swigregister = Coin_SWIG_Python.SbName_swigregister
SbName_swigregister(SbName)
SbName_isIdentStartChar = Coin_SWIG_Python.SbName_isIdentStartChar
SbName_isIdentChar = Coin_SWIG_Python.SbName_isIdentChar
SbName_isBaseNameStartChar = Coin_SWIG_Python.SbName_isBaseNameStartChar
SbName_isBaseNameChar = Coin_SWIG_Python.SbName_isBaseNameChar

class SbTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbTime(*args)
        try: self.this.append(this)
        except: self.this = this
    getTimeOfDay = staticmethod(Coin_SWIG_Python.SbTime_getTimeOfDay)
    def setToTimeOfDay(*args): return Coin_SWIG_Python.SbTime_setToTimeOfDay(*args)
    zero = staticmethod(Coin_SWIG_Python.SbTime_zero)
    max = staticmethod(Coin_SWIG_Python.SbTime_max)
    maxTime = staticmethod(Coin_SWIG_Python.SbTime_maxTime)
    def setValue(*args): return Coin_SWIG_Python.SbTime_setValue(*args)
    def setMsecValue(*args): return Coin_SWIG_Python.SbTime_setMsecValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbTime_getValue(*args)
    def getMsecValue(*args): return Coin_SWIG_Python.SbTime_getMsecValue(*args)
    def format(*args): return Coin_SWIG_Python.SbTime_format(*args)
    def formatDate(*args): return Coin_SWIG_Python.SbTime_formatDate(*args)
    def parsedate(*args): return Coin_SWIG_Python.SbTime_parsedate(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbTime___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbTime___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbTime___neg__(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbTime___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbTime___idiv__(*args)
    def __mod__(*args): return Coin_SWIG_Python.SbTime___mod__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbTime___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbTime___ne__(*args)
    def __lt__(*args): return Coin_SWIG_Python.SbTime___lt__(*args)
    def __gt__(*args): return Coin_SWIG_Python.SbTime___gt__(*args)
    def __le__(*args): return Coin_SWIG_Python.SbTime___le__(*args)
    def __ge__(*args): return Coin_SWIG_Python.SbTime___ge__(*args)
    def output(*args): return Coin_SWIG_Python.SbTime_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbTime___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbTime___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbTime___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbTime___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbTime___div__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbTime
    __del__ = lambda self : None;
SbTime_swigregister = Coin_SWIG_Python.SbTime_swigregister
SbTime_swigregister(SbTime)
SbTime_getTimeOfDay = Coin_SWIG_Python.SbTime_getTimeOfDay
SbTime_zero = Coin_SWIG_Python.SbTime_zero
SbTime_max = Coin_SWIG_Python.SbTime_max
SbTime_maxTime = Coin_SWIG_Python.SbTime_maxTime

class SoEvent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEvent
    __del__ = lambda self : None;
    def isOfType(*args): return Coin_SWIG_Python.SoEvent_isOfType(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoEvent_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoEvent_getTypeId(*args)
    def setTime(*args): return Coin_SWIG_Python.SoEvent_setTime(*args)
    def getTime(*args): return Coin_SWIG_Python.SoEvent_getTime(*args)
    def setPosition(*args): return Coin_SWIG_Python.SoEvent_setPosition(*args)
    def getPosition(*args): return Coin_SWIG_Python.SoEvent_getPosition(*args)
    def getNormalizedPosition(*args): return Coin_SWIG_Python.SoEvent_getNormalizedPosition(*args)
    def setShiftDown(*args): return Coin_SWIG_Python.SoEvent_setShiftDown(*args)
    def wasShiftDown(*args): return Coin_SWIG_Python.SoEvent_wasShiftDown(*args)
    def setCtrlDown(*args): return Coin_SWIG_Python.SoEvent_setCtrlDown(*args)
    def wasCtrlDown(*args): return Coin_SWIG_Python.SoEvent_wasCtrlDown(*args)
    def setAltDown(*args): return Coin_SWIG_Python.SoEvent_setAltDown(*args)
    def wasAltDown(*args): return Coin_SWIG_Python.SoEvent_wasAltDown(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoEvent_initClass)
SoEvent_swigregister = Coin_SWIG_Python.SoEvent_swigregister
SoEvent_swigregister(SoEvent)
SoEvent_getClassTypeId = Coin_SWIG_Python.SoEvent_getClassTypeId
SoEvent_initClass = Coin_SWIG_Python.SoEvent_initClass

class SoNotRec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONTAINER = Coin_SWIG_Python.SoNotRec_CONTAINER
    PARENT = Coin_SWIG_Python.SoNotRec_PARENT
    SENSOR = Coin_SWIG_Python.SoNotRec_SENSOR
    FIELD = Coin_SWIG_Python.SoNotRec_FIELD
    ENGINE = Coin_SWIG_Python.SoNotRec_ENGINE
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNotRec(*args)
        try: self.this.append(this)
        except: self.this = this
    def setType(*args): return Coin_SWIG_Python.SoNotRec_setType(*args)
    def getBase(*args): return Coin_SWIG_Python.SoNotRec_getBase(*args)
    def getType(*args): return Coin_SWIG_Python.SoNotRec_getType(*args)
    def getPrevious(*args): return Coin_SWIG_Python.SoNotRec_getPrevious(*args)
    def setPrevious(*args): return Coin_SWIG_Python.SoNotRec_setPrevious(*args)
    def output(*args): return Coin_SWIG_Python.SoNotRec_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNotRec
    __del__ = lambda self : None;
SoNotRec_swigregister = Coin_SWIG_Python.SoNotRec_swigregister
SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNotList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return Coin_SWIG_Python.SoNotList_append(*args)
    def setLastType(*args): return Coin_SWIG_Python.SoNotList_setLastType(*args)
    def getFirstRec(*args): return Coin_SWIG_Python.SoNotList_getFirstRec(*args)
    def getLastRec(*args): return Coin_SWIG_Python.SoNotList_getLastRec(*args)
    def getFirstRecAtNode(*args): return Coin_SWIG_Python.SoNotList_getFirstRecAtNode(*args)
    def getLastField(*args): return Coin_SWIG_Python.SoNotList_getLastField(*args)
    def getLastEngineOutput(*args): return Coin_SWIG_Python.SoNotList_getLastEngineOutput(*args)
    def getTimeStamp(*args): return Coin_SWIG_Python.SoNotList_getTimeStamp(*args)
    def output(*args): return Coin_SWIG_Python.SoNotList_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNotList
    __del__ = lambda self : None;
SoNotList_swigregister = Coin_SWIG_Python.SoNotList_swigregister
SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoField
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoField_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoField_initClasses)
    def setIgnored(*args): return Coin_SWIG_Python.SoField_setIgnored(*args)
    def isIgnored(*args): return Coin_SWIG_Python.SoField_isIgnored(*args)
    def setDefault(*args): return Coin_SWIG_Python.SoField_setDefault(*args)
    def isDefault(*args): return Coin_SWIG_Python.SoField_isDefault(*args)
    def getTypeId(*args): return Coin_SWIG_Python.SoField_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoField_getClassTypeId)
    def isOfType(*args): return Coin_SWIG_Python.SoField_isOfType(*args)
    def enableConnection(*args): return Coin_SWIG_Python.SoField_enableConnection(*args)
    def isConnectionEnabled(*args): return Coin_SWIG_Python.SoField_isConnectionEnabled(*args)
    def isConnectedFromEngine(*args): return Coin_SWIG_Python.SoField_isConnectedFromEngine(*args)
    def getConnectedEngine(*args): return Coin_SWIG_Python.SoField_getConnectedEngine(*args)
    def connectFrom(*args): return Coin_SWIG_Python.SoField_connectFrom(*args)
    def appendConnection(*args): return Coin_SWIG_Python.SoField_appendConnection(*args)
    def isConnectedFromField(*args): return Coin_SWIG_Python.SoField_isConnectedFromField(*args)
    def getConnectedField(*args): return Coin_SWIG_Python.SoField_getConnectedField(*args)
    def getNumConnections(*args): return Coin_SWIG_Python.SoField_getNumConnections(*args)
    def getForwardConnections(*args): return Coin_SWIG_Python.SoField_getForwardConnections(*args)
    def getConnections(*args): return Coin_SWIG_Python.SoField_getConnections(*args)
    def disconnect(*args): return Coin_SWIG_Python.SoField_disconnect(*args)
    def isConnected(*args): return Coin_SWIG_Python.SoField_isConnected(*args)
    def setContainer(*args): return Coin_SWIG_Python.SoField_setContainer(*args)
    def getContainer(*args): return Coin_SWIG_Python.SoField_getContainer(*args)
    def set(*args): return Coin_SWIG_Python.SoField_set(*args)
    def shouldWrite(*args): return Coin_SWIG_Python.SoField_shouldWrite(*args)
    def touch(*args): return Coin_SWIG_Python.SoField_touch(*args)
    def startNotify(*args): return Coin_SWIG_Python.SoField_startNotify(*args)
    def notify(*args): return Coin_SWIG_Python.SoField_notify(*args)
    def enableNotify(*args): return Coin_SWIG_Python.SoField_enableNotify(*args)
    def isNotifyEnabled(*args): return Coin_SWIG_Python.SoField_isNotifyEnabled(*args)
    def addAuditor(*args): return Coin_SWIG_Python.SoField_addAuditor(*args)
    def removeAuditor(*args): return Coin_SWIG_Python.SoField_removeAuditor(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoField___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoField___ne__(*args)
    def connectionStatusChanged(*args): return Coin_SWIG_Python.SoField_connectionStatusChanged(*args)
    def isReadOnly(*args): return Coin_SWIG_Python.SoField_isReadOnly(*args)
    def isSame(*args): return Coin_SWIG_Python.SoField_isSame(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoField_copyFrom(*args)
    def fixCopy(*args): return Coin_SWIG_Python.SoField_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoField_referencesCopy(*args)
    def copyConnection(*args): return Coin_SWIG_Python.SoField_copyConnection(*args)
    def read(*args): return Coin_SWIG_Python.SoField_read(*args)
    def write(*args): return Coin_SWIG_Python.SoField_write(*args)
    def countWriteRefs(*args): return Coin_SWIG_Python.SoField_countWriteRefs(*args)
    NORMAL_FIELD = Coin_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = Coin_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = Coin_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = Coin_SWIG_Python.SoField_EXPOSED_FIELD
    def setFieldType(*args): return Coin_SWIG_Python.SoField_setFieldType(*args)
    def getFieldType(*args): return Coin_SWIG_Python.SoField_getFieldType(*args)
    def getDirty(*args): return Coin_SWIG_Python.SoField_getDirty(*args)
    def setDirty(*args): return Coin_SWIG_Python.SoField_setDirty(*args)
    def evaluate(*args): return Coin_SWIG_Python.SoField_evaluate(*args)
    def get(*args): return Coin_SWIG_Python.SoField_get(*args)
SoField_swigregister = Coin_SWIG_Python.SoField_swigregister
SoField_swigregister(SoField)
SoField_initClass = Coin_SWIG_Python.SoField_initClass
SoField_initClasses = Coin_SWIG_Python.SoField_initClasses
SoField_getClassTypeId = Coin_SWIG_Python.SoField_getClassTypeId

class SoSField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSField
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoSField_initClass)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSField_getClassTypeId)
SoSField_swigregister = Coin_SWIG_Python.SoSField_swigregister
SoSField_swigregister(SoSField)
SoSField_initClass = Coin_SWIG_Python.SoSField_initClass
SoSField_getClassTypeId = Coin_SWIG_Python.SoSField_getClassTypeId

class SoMField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMField
    __del__ = lambda self : None;
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMField_getClassTypeId)
    def getNum(*args): return Coin_SWIG_Python.SoMField_getNum(*args)
    def setNum(*args): return Coin_SWIG_Python.SoMField_setNum(*args)
    def deleteValues(*args): return Coin_SWIG_Python.SoMField_deleteValues(*args)
    def insertSpace(*args): return Coin_SWIG_Python.SoMField_insertSpace(*args)
    def set1(*args): return Coin_SWIG_Python.SoMField_set1(*args)
    def get1(*args): return Coin_SWIG_Python.SoMField_get1(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMField_initClass)
    def enableDeleteValues(*args): return Coin_SWIG_Python.SoMField_enableDeleteValues(*args)
    def isDeleteValuesEnabled(*args): return Coin_SWIG_Python.SoMField_isDeleteValuesEnabled(*args)
    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1

    def __len__(*args): return Coin_SWIG_Python.SoMField___len__(*args)
SoMField_swigregister = Coin_SWIG_Python.SoMField_swigregister
SoMField_swigregister(SoMField)
SoMField_getClassTypeId = Coin_SWIG_Python.SoMField_getClassTypeId
SoMField_initClass = Coin_SWIG_Python.SoMField_initClass

class SoAuditorList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoAuditorList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAuditorList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoAuditorList_append(*args)
    def set(*args): return Coin_SWIG_Python.SoAuditorList_set(*args)
    def getObject(*args): return Coin_SWIG_Python.SoAuditorList_getObject(*args)
    def getType(*args): return Coin_SWIG_Python.SoAuditorList_getType(*args)
    def getLength(*args): return Coin_SWIG_Python.SoAuditorList_getLength(*args)
    def find(*args): return Coin_SWIG_Python.SoAuditorList_find(*args)
    def remove(*args): return Coin_SWIG_Python.SoAuditorList_remove(*args)
    def notify(*args): return Coin_SWIG_Python.SoAuditorList_notify(*args)
SoAuditorList_swigregister = Coin_SWIG_Python.SoAuditorList_swigregister
SoAuditorList_swigregister(SoAuditorList)

class SoBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoBase_initClass)
    def ref(*args): return Coin_SWIG_Python.SoBase_ref(*args)
    def unref(*args): return Coin_SWIG_Python.SoBase_unref(*args)
    def unrefNoDelete(*args): return Coin_SWIG_Python.SoBase_unrefNoDelete(*args)
    def getRefCount(*args): return Coin_SWIG_Python.SoBase_getRefCount(*args)
    def touch(*args): return Coin_SWIG_Python.SoBase_touch(*args)
    def getTypeId(*args): return Coin_SWIG_Python.SoBase_getTypeId(*args)
    def isOfType(*args): return Coin_SWIG_Python.SoBase_isOfType(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBase_getClassTypeId)
    def getName(*args): return Coin_SWIG_Python.SoBase_getName(*args)
    def setName(*args): return Coin_SWIG_Python.SoBase_setName(*args)
    addName = staticmethod(Coin_SWIG_Python.SoBase_addName)
    removeName = staticmethod(Coin_SWIG_Python.SoBase_removeName)
    def startNotify(*args): return Coin_SWIG_Python.SoBase_startNotify(*args)
    def notify(*args): return Coin_SWIG_Python.SoBase_notify(*args)
    def addAuditor(*args): return Coin_SWIG_Python.SoBase_addAuditor(*args)
    def removeAuditor(*args): return Coin_SWIG_Python.SoBase_removeAuditor(*args)
    def getAuditors(*args): return Coin_SWIG_Python.SoBase_getAuditors(*args)
    def addWriteReference(*args): return Coin_SWIG_Python.SoBase_addWriteReference(*args)
    def shouldWrite(*args): return Coin_SWIG_Python.SoBase_shouldWrite(*args)
    incrementCurrentWriteCounter = staticmethod(Coin_SWIG_Python.SoBase_incrementCurrentWriteCounter)
    decrementCurrentWriteCounter = staticmethod(Coin_SWIG_Python.SoBase_decrementCurrentWriteCounter)
    getNamedBase = staticmethod(Coin_SWIG_Python.SoBase_getNamedBase)
    getNamedBases = staticmethod(Coin_SWIG_Python.SoBase_getNamedBases)
    read = staticmethod(Coin_SWIG_Python.SoBase_read)
    setInstancePrefix = staticmethod(Coin_SWIG_Python.SoBase_setInstancePrefix)
    setTraceRefs = staticmethod(Coin_SWIG_Python.SoBase_setTraceRefs)
    getTraceRefs = staticmethod(Coin_SWIG_Python.SoBase_getTraceRefs)
    connectRoute = staticmethod(Coin_SWIG_Python.SoBase_connectRoute)
    def assertAlive(*args): return Coin_SWIG_Python.SoBase_assertAlive(*args)
    readRoute = staticmethod(Coin_SWIG_Python.SoBase_readRoute)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBase
    __del__ = lambda self : None;
    def __eq__(self,other):
      return other and (self.this == other.this) or False
    def __ne__(self,other):
      return other and (self.this != other.this) or True

    def __getattr__(self,name):
      try: return object.__getattr__(self, name)
      except AttributeError, e: raise e

SoBase_swigregister = Coin_SWIG_Python.SoBase_swigregister
SoBase_swigregister(SoBase)
SoBase_initClass = Coin_SWIG_Python.SoBase_initClass
SoBase_getClassTypeId = Coin_SWIG_Python.SoBase_getClassTypeId
SoBase_addName = Coin_SWIG_Python.SoBase_addName
SoBase_removeName = Coin_SWIG_Python.SoBase_removeName
SoBase_incrementCurrentWriteCounter = Coin_SWIG_Python.SoBase_incrementCurrentWriteCounter
SoBase_decrementCurrentWriteCounter = Coin_SWIG_Python.SoBase_decrementCurrentWriteCounter
SoBase_getNamedBase = Coin_SWIG_Python.SoBase_getNamedBase
SoBase_getNamedBases = Coin_SWIG_Python.SoBase_getNamedBases
SoBase_read = Coin_SWIG_Python.SoBase_read
SoBase_setInstancePrefix = Coin_SWIG_Python.SoBase_setInstancePrefix
SoBase_setTraceRefs = Coin_SWIG_Python.SoBase_setTraceRefs
SoBase_getTraceRefs = Coin_SWIG_Python.SoBase_getTraceRefs
SoBase_connectRoute = Coin_SWIG_Python.SoBase_connectRoute
SoBase_readRoute = Coin_SWIG_Python.SoBase_readRoute

class SoBaseList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBaseList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBaseList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoBaseList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SoBaseList_insert(*args)
    def remove(*args): return Coin_SWIG_Python.SoBaseList_remove(*args)
    def removeItem(*args): return Coin_SWIG_Python.SoBaseList_removeItem(*args)
    def truncate(*args): return Coin_SWIG_Python.SoBaseList_truncate(*args)
    def copy(*args): return Coin_SWIG_Python.SoBaseList_copy(*args)
    def set(*args): return Coin_SWIG_Python.SoBaseList_set(*args)
    def addReferences(*args): return Coin_SWIG_Python.SoBaseList_addReferences(*args)
    def isReferencing(*args): return Coin_SWIG_Python.SoBaseList_isReferencing(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoBaseList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoBaseList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoBaseList_get(*args)
SoBaseList_swigregister = Coin_SWIG_Python.SoBaseList_swigregister
SoBaseList_swigregister(SoBaseList)

class SoNodeList(SoBaseList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNodeList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoNodeList_append(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoNodeList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoNodeList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoNodeList_get(*args)
SoNodeList_swigregister = Coin_SWIG_Python.SoNodeList_swigregister
SoNodeList_swigregister(SoNodeList)

class SoDetailList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDetailList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDetailList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoDetailList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SoDetailList_insert(*args)
    def truncate(*args): return Coin_SWIG_Python.SoDetailList_truncate(*args)
    def copy(*args): return Coin_SWIG_Python.SoDetailList_copy(*args)
    def set(*args): return Coin_SWIG_Python.SoDetailList_set(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoDetailList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoDetailList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoDetailList_get(*args)
SoDetailList_swigregister = Coin_SWIG_Python.SoDetailList_swigregister
SoDetailList_swigregister(SoDetailList)

class SoTypeList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTypeList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return Coin_SWIG_Python.SoTypeList_append(*args)
    def find(*args): return Coin_SWIG_Python.SoTypeList_find(*args)
    def insert(*args): return Coin_SWIG_Python.SoTypeList_insert(*args)
    def set(*args): return Coin_SWIG_Python.SoTypeList_set(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoTypeList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoTypeList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoTypeList_get(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTypeList
    __del__ = lambda self : None;
SoTypeList_swigregister = Coin_SWIG_Python.SoTypeList_swigregister
SoTypeList_swigregister(SoTypeList)

class SoEnabledElementsList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEnabledElementsList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEnabledElementsList
    __del__ = lambda self : None;
    def getElements(*args): return Coin_SWIG_Python.SoEnabledElementsList_getElements(*args)
    def enable(*args): return Coin_SWIG_Python.SoEnabledElementsList_enable(*args)
    def merge(*args): return Coin_SWIG_Python.SoEnabledElementsList_merge(*args)
    getCounter = staticmethod(Coin_SWIG_Python.SoEnabledElementsList_getCounter)
SoEnabledElementsList_swigregister = Coin_SWIG_Python.SoEnabledElementsList_swigregister
SoEnabledElementsList_swigregister(SoEnabledElementsList)
SoEnabledElementsList_getCounter = Coin_SWIG_Python.SoEnabledElementsList_getCounter

class SoEngineOutputList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEngineOutputList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return Coin_SWIG_Python.SoEngineOutputList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SoEngineOutputList_insert(*args)
    def set(*args): return Coin_SWIG_Python.SoEngineOutputList_set(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoEngineOutputList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoEngineOutputList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoEngineOutputList_get(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineOutputList
    __del__ = lambda self : None;
SoEngineOutputList_swigregister = Coin_SWIG_Python.SoEngineOutputList_swigregister
SoEngineOutputList_swigregister(SoEngineOutputList)

class SoEngineList(SoBaseList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEngineList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoEngineList_append(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoEngineList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoEngineList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoEngineList_get(*args)
SoEngineList_swigregister = Coin_SWIG_Python.SoEngineList_swigregister
SoEngineList_swigregister(SoEngineList)

class SoFieldList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFieldList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return Coin_SWIG_Python.SoFieldList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SoFieldList_insert(*args)
    def set(*args): return Coin_SWIG_Python.SoFieldList_set(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoFieldList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoFieldList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoFieldList_get(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldList
    __del__ = lambda self : None;
SoFieldList_swigregister = Coin_SWIG_Python.SoFieldList_swigregister
SoFieldList_swigregister(SoFieldList)

class SoPathList(SoBaseList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPathList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPathList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoPathList_append(*args)
    def findPath(*args): return Coin_SWIG_Python.SoPathList_findPath(*args)
    def sort(*args): return Coin_SWIG_Python.SoPathList_sort(*args)
    def uniquify(*args): return Coin_SWIG_Python.SoPathList_uniquify(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoPathList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoPathList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoPathList_get(*args)
SoPathList_swigregister = Coin_SWIG_Python.SoPathList_swigregister
SoPathList_swigregister(SoPathList)

class SoPickedPointList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPickedPointList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPickedPointList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoPickedPointList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SoPickedPointList_insert(*args)
    def truncate(*args): return Coin_SWIG_Python.SoPickedPointList_truncate(*args)
    def set(*args): return Coin_SWIG_Python.SoPickedPointList_set(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoPickedPointList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoPickedPointList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoPickedPointList_get(*args)
SoPickedPointList_swigregister = Coin_SWIG_Python.SoPickedPointList_swigregister
SoPickedPointList_swigregister(SoPickedPointList)

class SoPath(SoBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoPath_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPath(*args)
        try: self.this.append(this)
        except: self.this = this
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPath_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPath_getTypeId(*args)
    def setHead(*args): return Coin_SWIG_Python.SoPath_setHead(*args)
    def getHead(*args): return Coin_SWIG_Python.SoPath_getHead(*args)
    def append(*args): return Coin_SWIG_Python.SoPath_append(*args)
    def push(*args): return Coin_SWIG_Python.SoPath_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoPath_pop(*args)
    def getTail(*args): return Coin_SWIG_Python.SoPath_getTail(*args)
    def getNode(*args): return Coin_SWIG_Python.SoPath_getNode(*args)
    def getNodeFromTail(*args): return Coin_SWIG_Python.SoPath_getNodeFromTail(*args)
    def getIndex(*args): return Coin_SWIG_Python.SoPath_getIndex(*args)
    def getIndexFromTail(*args): return Coin_SWIG_Python.SoPath_getIndexFromTail(*args)
    def getLength(*args): return Coin_SWIG_Python.SoPath_getLength(*args)
    def truncate(*args): return Coin_SWIG_Python.SoPath_truncate(*args)
    def findFork(*args): return Coin_SWIG_Python.SoPath_findFork(*args)
    def findNode(*args): return Coin_SWIG_Python.SoPath_findNode(*args)
    def containsNode(*args): return Coin_SWIG_Python.SoPath_containsNode(*args)
    def containsPath(*args): return Coin_SWIG_Python.SoPath_containsPath(*args)
    def copy(*args): return Coin_SWIG_Python.SoPath_copy(*args)
    getByName = staticmethod(Coin_SWIG_Python.SoPath_getByName)
    def insertIndex(*args): return Coin_SWIG_Python.SoPath_insertIndex(*args)
    def removeIndex(*args): return Coin_SWIG_Python.SoPath_removeIndex(*args)
    def replaceIndex(*args): return Coin_SWIG_Python.SoPath_replaceIndex(*args)
    def isRelevantNotification(*args): return Coin_SWIG_Python.SoPath_isRelevantNotification(*args)
    def write(*args): return Coin_SWIG_Python.SoPath_write(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoPath___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SoPath___nq__(*args)
SoPath_swigregister = Coin_SWIG_Python.SoPath_swigregister
SoPath_swigregister(SoPath)
SoPath_initClass = Coin_SWIG_Python.SoPath_initClass
SoPath_getClassTypeId = Coin_SWIG_Python.SoPath_getClassTypeId
SoPath_getByName = Coin_SWIG_Python.SoPath_getByName

class SoLightPath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLightPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLightPath
    __del__ = lambda self : None;
    def setHead(*args): return Coin_SWIG_Python.SoLightPath_setHead(*args)
    def append(*args): return Coin_SWIG_Python.SoLightPath_append(*args)
    def push(*args): return Coin_SWIG_Python.SoLightPath_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoLightPath_pop(*args)
    def setTail(*args): return Coin_SWIG_Python.SoLightPath_setTail(*args)
    def getTail(*args): return Coin_SWIG_Python.SoLightPath_getTail(*args)
    def getHead(*args): return Coin_SWIG_Python.SoLightPath_getHead(*args)
    def getNode(*args): return Coin_SWIG_Python.SoLightPath_getNode(*args)
    def getIndex(*args): return Coin_SWIG_Python.SoLightPath_getIndex(*args)
    def getFullLength(*args): return Coin_SWIG_Python.SoLightPath_getFullLength(*args)
    def truncate(*args): return Coin_SWIG_Python.SoLightPath_truncate(*args)
    def makeTempPath(*args): return Coin_SWIG_Python.SoLightPath_makeTempPath(*args)
SoLightPath_swigregister = Coin_SWIG_Python.SoLightPath_swigregister
SoLightPath_swigregister(SoLightPath)

class SoFullPath(SoPath):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def pop(*args): return Coin_SWIG_Python.SoFullPath_pop(*args)
    def getTail(*args): return Coin_SWIG_Python.SoFullPath_getTail(*args)
    def getNodeFromTail(*args): return Coin_SWIG_Python.SoFullPath_getNodeFromTail(*args)
    def getIndexFromTail(*args): return Coin_SWIG_Python.SoFullPath_getIndexFromTail(*args)
    def getLength(*args): return Coin_SWIG_Python.SoFullPath_getLength(*args)
SoFullPath_swigregister = Coin_SWIG_Python.SoFullPath_swigregister
SoFullPath_swigregister(SoFullPath)

class SoTempPath(SoFullPath):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTempPath(*args)
        try: self.this.append(this)
        except: self.this = this
    def simpleAppend(*args): return Coin_SWIG_Python.SoTempPath_simpleAppend(*args)
    def replaceTail(*args): return Coin_SWIG_Python.SoTempPath_replaceTail(*args)
SoTempPath_swigregister = Coin_SWIG_Python.SoTempPath_swigregister
SoTempPath_swigregister(SoTempPath)

class SoActionMethodList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoActionMethodList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoActionMethodList
    __del__ = lambda self : None;
    def addMethod(*args): return Coin_SWIG_Python.SoActionMethodList_addMethod(*args)
    def setUp(*args): return Coin_SWIG_Python.SoActionMethodList_setUp(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoActionMethodList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoActionMethodList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SoActionMethodList_get(*args)
SoActionMethodList_swigregister = Coin_SWIG_Python.SoActionMethodList_swigregister
SoActionMethodList_swigregister(SoActionMethodList)

class SoAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    NODE = Coin_SWIG_Python.SoAction_NODE
    PATH = Coin_SWIG_Python.SoAction_PATH
    PATH_LIST = Coin_SWIG_Python.SoAction_PATH_LIST
    NO_PATH = Coin_SWIG_Python.SoAction_NO_PATH
    IN_PATH = Coin_SWIG_Python.SoAction_IN_PATH
    BELOW_PATH = Coin_SWIG_Python.SoAction_BELOW_PATH
    OFF_PATH = Coin_SWIG_Python.SoAction_OFF_PATH
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoAction_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoAction_initClasses)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAction_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoAction_getTypeId(*args)
    def isOfType(*args): return Coin_SWIG_Python.SoAction_isOfType(*args)
    def apply(*args): return Coin_SWIG_Python.SoAction_apply(*args)
    def invalidateState(*args): return Coin_SWIG_Python.SoAction_invalidateState(*args)
    nullAction = staticmethod(Coin_SWIG_Python.SoAction_nullAction)
    def getWhatAppliedTo(*args): return Coin_SWIG_Python.SoAction_getWhatAppliedTo(*args)
    def getNodeAppliedTo(*args): return Coin_SWIG_Python.SoAction_getNodeAppliedTo(*args)
    def getPathAppliedTo(*args): return Coin_SWIG_Python.SoAction_getPathAppliedTo(*args)
    def getPathListAppliedTo(*args): return Coin_SWIG_Python.SoAction_getPathListAppliedTo(*args)
    def getOriginalPathListAppliedTo(*args): return Coin_SWIG_Python.SoAction_getOriginalPathListAppliedTo(*args)
    def isLastPathListAppliedTo(*args): return Coin_SWIG_Python.SoAction_isLastPathListAppliedTo(*args)
    def getPathCode(*args): return Coin_SWIG_Python.SoAction_getPathCode(*args)
    def traverse(*args): return Coin_SWIG_Python.SoAction_traverse(*args)
    def hasTerminated(*args): return Coin_SWIG_Python.SoAction_hasTerminated(*args)
    def getCurPath(*args): return Coin_SWIG_Python.SoAction_getCurPath(*args)
    def getState(*args): return Coin_SWIG_Python.SoAction_getState(*args)
    def getCurPathCode(*args): return Coin_SWIG_Python.SoAction_getCurPathCode(*args)
    def getCurPathTail(*args): return Coin_SWIG_Python.SoAction_getCurPathTail(*args)
    def usePathCode(*args): return Coin_SWIG_Python.SoAction_usePathCode(*args)
    def pushCurPath(*args): return Coin_SWIG_Python.SoAction_pushCurPath(*args)
    def popPushCurPath(*args): return Coin_SWIG_Python.SoAction_popPushCurPath(*args)
    def popCurPath(*args): return Coin_SWIG_Python.SoAction_popCurPath(*args)
    def switchToPathTraversal(*args): return Coin_SWIG_Python.SoAction_switchToPathTraversal(*args)
    def switchToNodeTraversal(*args): return Coin_SWIG_Python.SoAction_switchToNodeTraversal(*args)
SoAction_swigregister = Coin_SWIG_Python.SoAction_swigregister
SoAction_swigregister(SoAction)
SoAction_initClass = Coin_SWIG_Python.SoAction_initClass
SoAction_initClasses = Coin_SWIG_Python.SoAction_initClasses
SoAction_getClassTypeId = Coin_SWIG_Python.SoAction_getClassTypeId
SoAction_nullAction = Coin_SWIG_Python.SoAction_nullAction

class SoState(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoState
    __del__ = lambda self : None;
    def getAction(*args): return Coin_SWIG_Python.SoState_getAction(*args)
    def getElement(*args): return Coin_SWIG_Python.SoState_getElement(*args)
    def getConstElement(*args): return Coin_SWIG_Python.SoState_getConstElement(*args)
    def push(*args): return Coin_SWIG_Python.SoState_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoState_pop(*args)
    def output(*args): return Coin_SWIG_Python.SoState_output(*args)
    def isElementEnabled(*args): return Coin_SWIG_Python.SoState_isElementEnabled(*args)
    def getDepth(*args): return Coin_SWIG_Python.SoState_getDepth(*args)
    def setCacheOpen(*args): return Coin_SWIG_Python.SoState_setCacheOpen(*args)
    def isCacheOpen(*args): return Coin_SWIG_Python.SoState_isCacheOpen(*args)
    def getElementNoPush(*args): return Coin_SWIG_Python.SoState_getElementNoPush(*args)
SoState_swigregister = Coin_SWIG_Python.SoState_swigregister
SoState_swigregister(SoState)

class SoElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoElement_initClass)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoElement_getClassStackIndex)
    def getTypeId(*args): return Coin_SWIG_Python.SoElement_getTypeId(*args)
    def getStackIndex(*args): return Coin_SWIG_Python.SoElement_getStackIndex(*args)
    def init(*args): return Coin_SWIG_Python.SoElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoElement_pop(*args)
    def matches(*args): return Coin_SWIG_Python.SoElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoElement_copyMatchInfo(*args)
    initElements = staticmethod(Coin_SWIG_Python.SoElement_initElements)
    getNumStackIndices = staticmethod(Coin_SWIG_Python.SoElement_getNumStackIndices)
    getIdFromStackIndex = staticmethod(Coin_SWIG_Python.SoElement_getIdFromStackIndex)
    def setDepth(*args): return Coin_SWIG_Python.SoElement_setDepth(*args)
    def getDepth(*args): return Coin_SWIG_Python.SoElement_getDepth(*args)
    def output(*args): return Coin_SWIG_Python.SoElement_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoElement
    __del__ = lambda self : None;
SoElement_swigregister = Coin_SWIG_Python.SoElement_swigregister
SoElement_swigregister(SoElement)
SoElement_initClass = Coin_SWIG_Python.SoElement_initClass
SoElement_getClassTypeId = Coin_SWIG_Python.SoElement_getClassTypeId
SoElement_getClassStackIndex = Coin_SWIG_Python.SoElement_getClassStackIndex
SoElement_initElements = Coin_SWIG_Python.SoElement_initElements
SoElement_getNumStackIndices = Coin_SWIG_Python.SoElement_getNumStackIndices
SoElement_getIdFromStackIndex = Coin_SWIG_Python.SoElement_getIdFromStackIndex

class SoInt32Element(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInt32Element_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoInt32Element_getClassStackIndex)
    initClass = staticmethod(Coin_SWIG_Python.SoInt32Element_initClass)
    def init(*args): return Coin_SWIG_Python.SoInt32Element_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoInt32Element_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoInt32Element_copyMatchInfo(*args)
    def output(*args): return Coin_SWIG_Python.SoInt32Element_output(*args)
    set = staticmethod(Coin_SWIG_Python.SoInt32Element_set)
    get = staticmethod(Coin_SWIG_Python.SoInt32Element_get)
    def setElt(*args): return Coin_SWIG_Python.SoInt32Element_setElt(*args)
SoInt32Element_swigregister = Coin_SWIG_Python.SoInt32Element_swigregister
SoInt32Element_swigregister(SoInt32Element)
SoInt32Element_getClassTypeId = Coin_SWIG_Python.SoInt32Element_getClassTypeId
SoInt32Element_getClassStackIndex = Coin_SWIG_Python.SoInt32Element_getClassStackIndex
SoInt32Element_initClass = Coin_SWIG_Python.SoInt32Element_initClass
SoInt32Element_set = Coin_SWIG_Python.SoInt32Element_set
SoInt32Element_get = Coin_SWIG_Python.SoInt32Element_get

class SoDecimationTypeElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_initClass)
    AUTOMATIC = Coin_SWIG_Python.SoDecimationTypeElement_AUTOMATIC
    HIGHEST = Coin_SWIG_Python.SoDecimationTypeElement_HIGHEST
    LOWEST = Coin_SWIG_Python.SoDecimationTypeElement_LOWEST
    PERCENTAGE = Coin_SWIG_Python.SoDecimationTypeElement_PERCENTAGE
    def init(*args): return Coin_SWIG_Python.SoDecimationTypeElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_set)
    get = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoDecimationTypeElement_getDefault)
SoDecimationTypeElement_swigregister = Coin_SWIG_Python.SoDecimationTypeElement_swigregister
SoDecimationTypeElement_swigregister(SoDecimationTypeElement)
SoDecimationTypeElement_getClassTypeId = Coin_SWIG_Python.SoDecimationTypeElement_getClassTypeId
SoDecimationTypeElement_getClassStackIndex = Coin_SWIG_Python.SoDecimationTypeElement_getClassStackIndex
SoDecimationTypeElement_createInstance = Coin_SWIG_Python.SoDecimationTypeElement_createInstance
SoDecimationTypeElement_initClass = Coin_SWIG_Python.SoDecimationTypeElement_initClass
SoDecimationTypeElement_set = Coin_SWIG_Python.SoDecimationTypeElement_set
SoDecimationTypeElement_get = Coin_SWIG_Python.SoDecimationTypeElement_get
SoDecimationTypeElement_getDefault = Coin_SWIG_Python.SoDecimationTypeElement_getDefault

class SoFieldData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFieldData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldData
    __del__ = lambda self : None;
    def addField(*args): return Coin_SWIG_Python.SoFieldData_addField(*args)
    def overlay(*args): return Coin_SWIG_Python.SoFieldData_overlay(*args)
    def getNumFields(*args): return Coin_SWIG_Python.SoFieldData_getNumFields(*args)
    def getFieldName(*args): return Coin_SWIG_Python.SoFieldData_getFieldName(*args)
    def getField(*args): return Coin_SWIG_Python.SoFieldData_getField(*args)
    def getIndex(*args): return Coin_SWIG_Python.SoFieldData_getIndex(*args)
    def addEnumValue(*args): return Coin_SWIG_Python.SoFieldData_addEnumValue(*args)
    def getEnumData(*args): return Coin_SWIG_Python.SoFieldData_getEnumData(*args)
    def read(*args): return Coin_SWIG_Python.SoFieldData_read(*args)
    def write(*args): return Coin_SWIG_Python.SoFieldData_write(*args)
    def copy(*args): return Coin_SWIG_Python.SoFieldData_copy(*args)
    def isSame(*args): return Coin_SWIG_Python.SoFieldData_isSame(*args)
    def readFieldDescriptions(*args): return Coin_SWIG_Python.SoFieldData_readFieldDescriptions(*args)
    def writeFieldDescriptions(*args): return Coin_SWIG_Python.SoFieldData_writeFieldDescriptions(*args)
SoFieldData_swigregister = Coin_SWIG_Python.SoFieldData_swigregister
SoFieldData_swigregister(SoFieldData)

class SoFieldContainer(SoBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoFieldContainer_initClass)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFieldContainer_getClassTypeId)
    def setToDefaults(*args): return Coin_SWIG_Python.SoFieldContainer_setToDefaults(*args)
    def hasDefaultValues(*args): return Coin_SWIG_Python.SoFieldContainer_hasDefaultValues(*args)
    def fieldsAreEqual(*args): return Coin_SWIG_Python.SoFieldContainer_fieldsAreEqual(*args)
    def copyFieldValues(*args): return Coin_SWIG_Python.SoFieldContainer_copyFieldValues(*args)
    def getFields(*args): return Coin_SWIG_Python.SoFieldContainer_getFields(*args)
    def getAllFields(*args): return Coin_SWIG_Python.SoFieldContainer_getAllFields(*args)
    def getField(*args): return Coin_SWIG_Python.SoFieldContainer_getField(*args)
    def getEventIn(*args): return Coin_SWIG_Python.SoFieldContainer_getEventIn(*args)
    def getEventOut(*args): return Coin_SWIG_Python.SoFieldContainer_getEventOut(*args)
    def enableNotify(*args): return Coin_SWIG_Python.SoFieldContainer_enableNotify(*args)
    def isNotifyEnabled(*args): return Coin_SWIG_Python.SoFieldContainer_isNotifyEnabled(*args)
    def set(*args): return Coin_SWIG_Python.SoFieldContainer_set(*args)
    def get(*args): return Coin_SWIG_Python.SoFieldContainer_get(*args)
    def notify(*args): return Coin_SWIG_Python.SoFieldContainer_notify(*args)
    def validateNewFieldValue(*args): return Coin_SWIG_Python.SoFieldContainer_validateNewFieldValue(*args)
    def addWriteReference(*args): return Coin_SWIG_Python.SoFieldContainer_addWriteReference(*args)
    def writeInstance(*args): return Coin_SWIG_Python.SoFieldContainer_writeInstance(*args)
    def getIsBuiltIn(*args): return Coin_SWIG_Python.SoFieldContainer_getIsBuiltIn(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoFieldContainer_getFieldData(*args)
    def copyContents(*args): return Coin_SWIG_Python.SoFieldContainer_copyContents(*args)
    def copyThroughConnection(*args): return Coin_SWIG_Python.SoFieldContainer_copyThroughConnection(*args)
    initCopyDict = staticmethod(Coin_SWIG_Python.SoFieldContainer_initCopyDict)
    addCopy = staticmethod(Coin_SWIG_Python.SoFieldContainer_addCopy)
    checkCopy = staticmethod(Coin_SWIG_Python.SoFieldContainer_checkCopy)
    findCopy = staticmethod(Coin_SWIG_Python.SoFieldContainer_findCopy)
    copyDone = staticmethod(Coin_SWIG_Python.SoFieldContainer_copyDone)
    def setUserData(*args): return Coin_SWIG_Python.SoFieldContainer_setUserData(*args)
    def getUserData(*args): return Coin_SWIG_Python.SoFieldContainer_getUserData(*args)
    def getFieldName(*args): return Coin_SWIG_Python.SoFieldContainer_getFieldName(*args)
    def __getattr__(self,name):
        try:
            #G.Barrand : return SoBase.__getattribute__(self, name)
            return SoBase.__getattr__(self, name)  #G.Barrand
        except AttributeError, e:
            field = self.getField(SbName(name))
            if field is None:
                raise e
            return field
            
    def __setattr__(self,name,value):
        # I don't understand why we need this, but otherwise it does not work :/
        if name == 'this':
            return SoBase.__setattr__(self, name, value)
        field = self.getField(SbName(name))
        if field is None:
            return SoBase.__setattr__(self, name, value)
        field.setValue(value)
        return field

SoFieldContainer_swigregister = Coin_SWIG_Python.SoFieldContainer_swigregister
SoFieldContainer_swigregister(SoFieldContainer)
SoFieldContainer_initClass = Coin_SWIG_Python.SoFieldContainer_initClass
SoFieldContainer_getClassTypeId = Coin_SWIG_Python.SoFieldContainer_getClassTypeId
SoFieldContainer_initCopyDict = Coin_SWIG_Python.SoFieldContainer_initCopyDict
SoFieldContainer_addCopy = Coin_SWIG_Python.SoFieldContainer_addCopy
SoFieldContainer_checkCopy = Coin_SWIG_Python.SoFieldContainer_checkCopy
SoFieldContainer_findCopy = Coin_SWIG_Python.SoFieldContainer_findCopy
SoFieldContainer_copyDone = Coin_SWIG_Python.SoFieldContainer_copyDone

class SoNode(SoFieldContainer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    FIRST_INSTANCE = Coin_SWIG_Python.SoNode_FIRST_INSTANCE
    PROTO_INSTANCE = Coin_SWIG_Python.SoNode_PROTO_INSTANCE
    OTHER_INSTANCE = Coin_SWIG_Python.SoNode_OTHER_INSTANCE
    def setOverride(*args): return Coin_SWIG_Python.SoNode_setOverride(*args)
    def isOverride(*args): return Coin_SWIG_Python.SoNode_isOverride(*args)
    INVENTOR = Coin_SWIG_Python.SoNode_INVENTOR
    VRML1 = Coin_SWIG_Python.SoNode_VRML1
    VRML2 = Coin_SWIG_Python.SoNode_VRML2
    INVENTOR_1 = Coin_SWIG_Python.SoNode_INVENTOR_1
    INVENTOR_2_0 = Coin_SWIG_Python.SoNode_INVENTOR_2_0
    INVENTOR_2_1 = Coin_SWIG_Python.SoNode_INVENTOR_2_1
    INVENTOR_2_5 = Coin_SWIG_Python.SoNode_INVENTOR_2_5
    INVENTOR_2_6 = Coin_SWIG_Python.SoNode_INVENTOR_2_6
    COIN_1_0 = Coin_SWIG_Python.SoNode_COIN_1_0
    COIN_2_0 = Coin_SWIG_Python.SoNode_COIN_2_0
    EXTENSION = Coin_SWIG_Python.SoNode_EXTENSION
    COIN_2_2 = Coin_SWIG_Python.SoNode_COIN_2_2
    COIN_2_3 = Coin_SWIG_Python.SoNode_COIN_2_3
    COIN_2_4 = Coin_SWIG_Python.SoNode_COIN_2_4
    INVENTOR_5_0 = Coin_SWIG_Python.SoNode_INVENTOR_5_0
    COIN_2_5 = Coin_SWIG_Python.SoNode_COIN_2_5
    getCompatibilityTypes = staticmethod(Coin_SWIG_Python.SoNode_getCompatibilityTypes)
    def setNodeType(*args): return Coin_SWIG_Python.SoNode_setNodeType(*args)
    def getNodeType(*args): return Coin_SWIG_Python.SoNode_getNodeType(*args)
    def copy(*args): return Coin_SWIG_Python.SoNode_copy(*args)
    def affectsState(*args): return Coin_SWIG_Python.SoNode_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoNode_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoNode_GLRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoNode_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoNode_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoNode_GLRenderOffPath(*args)
    def callback(*args): return Coin_SWIG_Python.SoNode_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoNode_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoNode_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoNode_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoNode_pick(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoNode_rayPick(*args)
    def search(*args): return Coin_SWIG_Python.SoNode_search(*args)
    def write(*args): return Coin_SWIG_Python.SoNode_write(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoNode_audioRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoNode_getPrimitiveCount(*args)
    def grabEventsSetup(*args): return Coin_SWIG_Python.SoNode_grabEventsSetup(*args)
    def grabEventsCleanup(*args): return Coin_SWIG_Python.SoNode_grabEventsCleanup(*args)
    def startNotify(*args): return Coin_SWIG_Python.SoNode_startNotify(*args)
    def notify(*args): return Coin_SWIG_Python.SoNode_notify(*args)
    def getNodeId(*args): return Coin_SWIG_Python.SoNode_getNodeId(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoNode_getChildren(*args)
    def writeInstance(*args): return Coin_SWIG_Python.SoNode_writeInstance(*args)
    def addToCopyDict(*args): return Coin_SWIG_Python.SoNode_addToCopyDict(*args)
    def copyContents(*args): return Coin_SWIG_Python.SoNode_copyContents(*args)
    def copyThroughConnection(*args): return Coin_SWIG_Python.SoNode_copyThroughConnection(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNode_getClassTypeId)
    getByName = staticmethod(Coin_SWIG_Python.SoNode_getByName)
    initClass = staticmethod(Coin_SWIG_Python.SoNode_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoNode_initClasses)
    getNextNodeId = staticmethod(Coin_SWIG_Python.SoNode_getNextNodeId)
    getActionMethodIndex = staticmethod(Coin_SWIG_Python.SoNode_getActionMethodIndex)
    getBoundingBoxS = staticmethod(Coin_SWIG_Python.SoNode_getBoundingBoxS)
    GLRenderS = staticmethod(Coin_SWIG_Python.SoNode_GLRenderS)
    callbackS = staticmethod(Coin_SWIG_Python.SoNode_callbackS)
    getMatrixS = staticmethod(Coin_SWIG_Python.SoNode_getMatrixS)
    handleEventS = staticmethod(Coin_SWIG_Python.SoNode_handleEventS)
    pickS = staticmethod(Coin_SWIG_Python.SoNode_pickS)
    rayPickS = staticmethod(Coin_SWIG_Python.SoNode_rayPickS)
    searchS = staticmethod(Coin_SWIG_Python.SoNode_searchS)
    writeS = staticmethod(Coin_SWIG_Python.SoNode_writeS)
    audioRenderS = staticmethod(Coin_SWIG_Python.SoNode_audioRenderS)
    getPrimitiveCountS = staticmethod(Coin_SWIG_Python.SoNode_getPrimitiveCountS)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNode
    __del__ = lambda self : None;
SoNode_swigregister = Coin_SWIG_Python.SoNode_swigregister
SoNode_swigregister(SoNode)
SoNode_getCompatibilityTypes = Coin_SWIG_Python.SoNode_getCompatibilityTypes
SoNode_getClassTypeId = Coin_SWIG_Python.SoNode_getClassTypeId
SoNode_getByName = Coin_SWIG_Python.SoNode_getByName
SoNode_initClass = Coin_SWIG_Python.SoNode_initClass
SoNode_initClasses = Coin_SWIG_Python.SoNode_initClasses
SoNode_getNextNodeId = Coin_SWIG_Python.SoNode_getNextNodeId
SoNode_getActionMethodIndex = Coin_SWIG_Python.SoNode_getActionMethodIndex
SoNode_getBoundingBoxS = Coin_SWIG_Python.SoNode_getBoundingBoxS
SoNode_GLRenderS = Coin_SWIG_Python.SoNode_GLRenderS
SoNode_callbackS = Coin_SWIG_Python.SoNode_callbackS
SoNode_getMatrixS = Coin_SWIG_Python.SoNode_getMatrixS
SoNode_handleEventS = Coin_SWIG_Python.SoNode_handleEventS
SoNode_pickS = Coin_SWIG_Python.SoNode_pickS
SoNode_rayPickS = Coin_SWIG_Python.SoNode_rayPickS
SoNode_searchS = Coin_SWIG_Python.SoNode_searchS
SoNode_writeS = Coin_SWIG_Python.SoNode_writeS
SoNode_audioRenderS = Coin_SWIG_Python.SoNode_audioRenderS
SoNode_getPrimitiveCountS = Coin_SWIG_Python.SoNode_getPrimitiveCountS

class SoSensorManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSensorManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSensorManager
    __del__ = lambda self : None;
    def insertDelaySensor(*args): return Coin_SWIG_Python.SoSensorManager_insertDelaySensor(*args)
    def insertTimerSensor(*args): return Coin_SWIG_Python.SoSensorManager_insertTimerSensor(*args)
    def removeDelaySensor(*args): return Coin_SWIG_Python.SoSensorManager_removeDelaySensor(*args)
    def removeTimerSensor(*args): return Coin_SWIG_Python.SoSensorManager_removeTimerSensor(*args)
    def setChangedCallback(*args): return Coin_SWIG_Python.SoSensorManager_setChangedCallback(*args)
    def rescheduleTimer(*args): return Coin_SWIG_Python.SoSensorManager_rescheduleTimer(*args)
    def removeRescheduledTimer(*args): return Coin_SWIG_Python.SoSensorManager_removeRescheduledTimer(*args)
    def processDelayQueue(*args): return Coin_SWIG_Python.SoSensorManager_processDelayQueue(*args)
    def processImmediateQueue(*args): return Coin_SWIG_Python.SoSensorManager_processImmediateQueue(*args)
    def processTimerQueue(*args): return Coin_SWIG_Python.SoSensorManager_processTimerQueue(*args)
    def isDelaySensorPending(*args): return Coin_SWIG_Python.SoSensorManager_isDelaySensorPending(*args)
    def isTimerSensorPending(*args): return Coin_SWIG_Python.SoSensorManager_isTimerSensorPending(*args)
    def setDelaySensorTimeout(*args): return Coin_SWIG_Python.SoSensorManager_setDelaySensorTimeout(*args)
    def getDelaySensorTimeout(*args): return Coin_SWIG_Python.SoSensorManager_getDelaySensorTimeout(*args)
    def doSelect(*args): return Coin_SWIG_Python.SoSensorManager_doSelect(*args)
SoSensorManager_swigregister = Coin_SWIG_Python.SoSensorManager_swigregister
SoSensorManager_swigregister(SoSensorManager)

class SoDB(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    init = staticmethod(Coin_SWIG_Python.SoDB_init)
    finish = staticmethod(Coin_SWIG_Python.SoDB_finish)
    cleanup = staticmethod(Coin_SWIG_Python.SoDB_cleanup)
    getVersion = staticmethod(Coin_SWIG_Python.SoDB_getVersion)
    read = staticmethod(Coin_SWIG_Python.SoDB_read)
    readAll = staticmethod(Coin_SWIG_Python.SoDB_readAll)
    readAllVRML = staticmethod(Coin_SWIG_Python.SoDB_readAllVRML)
    isValidHeader = staticmethod(Coin_SWIG_Python.SoDB_isValidHeader)
    registerHeader = staticmethod(Coin_SWIG_Python.SoDB_registerHeader)
    getHeaderData = staticmethod(Coin_SWIG_Python.SoDB_getHeaderData)
    getNumHeaders = staticmethod(Coin_SWIG_Python.SoDB_getNumHeaders)
    getHeaderString = staticmethod(Coin_SWIG_Python.SoDB_getHeaderString)
    createGlobalField = staticmethod(Coin_SWIG_Python.SoDB_createGlobalField)
    getGlobalField = staticmethod(Coin_SWIG_Python.SoDB_getGlobalField)
    renameGlobalField = staticmethod(Coin_SWIG_Python.SoDB_renameGlobalField)
    setRealTimeInterval = staticmethod(Coin_SWIG_Python.SoDB_setRealTimeInterval)
    getRealTimeInterval = staticmethod(Coin_SWIG_Python.SoDB_getRealTimeInterval)
    enableRealTimeSensor = staticmethod(Coin_SWIG_Python.SoDB_enableRealTimeSensor)
    getSensorManager = staticmethod(Coin_SWIG_Python.SoDB_getSensorManager)
    setDelaySensorTimeout = staticmethod(Coin_SWIG_Python.SoDB_setDelaySensorTimeout)
    getDelaySensorTimeout = staticmethod(Coin_SWIG_Python.SoDB_getDelaySensorTimeout)
    doSelect = staticmethod(Coin_SWIG_Python.SoDB_doSelect)
    addConverter = staticmethod(Coin_SWIG_Python.SoDB_addConverter)
    getConverter = staticmethod(Coin_SWIG_Python.SoDB_getConverter)
    isInitialized = staticmethod(Coin_SWIG_Python.SoDB_isInitialized)
    startNotify = staticmethod(Coin_SWIG_Python.SoDB_startNotify)
    isNotifying = staticmethod(Coin_SWIG_Python.SoDB_isNotifying)
    endNotify = staticmethod(Coin_SWIG_Python.SoDB_endNotify)
    addProgressCallback = staticmethod(Coin_SWIG_Python.SoDB_addProgressCallback)
    removeProgressCallback = staticmethod(Coin_SWIG_Python.SoDB_removeProgressCallback)
    isMultiThread = staticmethod(Coin_SWIG_Python.SoDB_isMultiThread)
    readlock = staticmethod(Coin_SWIG_Python.SoDB_readlock)
    readunlock = staticmethod(Coin_SWIG_Python.SoDB_readunlock)
    writelock = staticmethod(Coin_SWIG_Python.SoDB_writelock)
    writeunlock = staticmethod(Coin_SWIG_Python.SoDB_writeunlock)
    createRoute = staticmethod(Coin_SWIG_Python.SoDB_createRoute)
    removeRoute = staticmethod(Coin_SWIG_Python.SoDB_removeRoute)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDB
    __del__ = lambda self : None;
SoDB_swigregister = Coin_SWIG_Python.SoDB_swigregister
SoDB_swigregister(SoDB)
SoDB_init = Coin_SWIG_Python.SoDB_init
SoDB_finish = Coin_SWIG_Python.SoDB_finish
SoDB_cleanup = Coin_SWIG_Python.SoDB_cleanup
SoDB_getVersion = Coin_SWIG_Python.SoDB_getVersion
SoDB_read = Coin_SWIG_Python.SoDB_read
SoDB_readAll = Coin_SWIG_Python.SoDB_readAll
SoDB_readAllVRML = Coin_SWIG_Python.SoDB_readAllVRML
SoDB_isValidHeader = Coin_SWIG_Python.SoDB_isValidHeader
SoDB_registerHeader = Coin_SWIG_Python.SoDB_registerHeader
SoDB_getHeaderData = Coin_SWIG_Python.SoDB_getHeaderData
SoDB_getNumHeaders = Coin_SWIG_Python.SoDB_getNumHeaders
SoDB_getHeaderString = Coin_SWIG_Python.SoDB_getHeaderString
SoDB_createGlobalField = Coin_SWIG_Python.SoDB_createGlobalField
SoDB_getGlobalField = Coin_SWIG_Python.SoDB_getGlobalField
SoDB_renameGlobalField = Coin_SWIG_Python.SoDB_renameGlobalField
SoDB_setRealTimeInterval = Coin_SWIG_Python.SoDB_setRealTimeInterval
SoDB_getRealTimeInterval = Coin_SWIG_Python.SoDB_getRealTimeInterval
SoDB_enableRealTimeSensor = Coin_SWIG_Python.SoDB_enableRealTimeSensor
SoDB_getSensorManager = Coin_SWIG_Python.SoDB_getSensorManager
SoDB_setDelaySensorTimeout = Coin_SWIG_Python.SoDB_setDelaySensorTimeout
SoDB_getDelaySensorTimeout = Coin_SWIG_Python.SoDB_getDelaySensorTimeout
SoDB_doSelect = Coin_SWIG_Python.SoDB_doSelect
SoDB_addConverter = Coin_SWIG_Python.SoDB_addConverter
SoDB_getConverter = Coin_SWIG_Python.SoDB_getConverter
SoDB_isInitialized = Coin_SWIG_Python.SoDB_isInitialized
SoDB_startNotify = Coin_SWIG_Python.SoDB_startNotify
SoDB_isNotifying = Coin_SWIG_Python.SoDB_isNotifying
SoDB_endNotify = Coin_SWIG_Python.SoDB_endNotify
SoDB_addProgressCallback = Coin_SWIG_Python.SoDB_addProgressCallback
SoDB_removeProgressCallback = Coin_SWIG_Python.SoDB_removeProgressCallback
SoDB_isMultiThread = Coin_SWIG_Python.SoDB_isMultiThread
SoDB_readlock = Coin_SWIG_Python.SoDB_readlock
SoDB_readunlock = Coin_SWIG_Python.SoDB_readunlock
SoDB_writelock = Coin_SWIG_Python.SoDB_writelock
SoDB_writeunlock = Coin_SWIG_Python.SoDB_writeunlock
SoDB_createRoute = Coin_SWIG_Python.SoDB_createRoute
SoDB_removeRoute = Coin_SWIG_Python.SoDB_removeRoute

class SoInput(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInput(*args)
        try: self.this.append(this)
        except: self.this = this
    def findProto(*args): return Coin_SWIG_Python.SoInput_findProto(*args)
    def addProto(*args): return Coin_SWIG_Python.SoInput_addProto(*args)
    def pushProto(*args): return Coin_SWIG_Python.SoInput_pushProto(*args)
    def getCurrentProto(*args): return Coin_SWIG_Python.SoInput_getCurrentProto(*args)
    def popProto(*args): return Coin_SWIG_Python.SoInput_popProto(*args)
    def addRoute(*args): return Coin_SWIG_Python.SoInput_addRoute(*args)
    def checkISReference(*args): return Coin_SWIG_Python.SoInput_checkISReference(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInput
    __del__ = lambda self : None;
    def setFilePointer(*args): return Coin_SWIG_Python.SoInput_setFilePointer(*args)
    def openFile(*args): return Coin_SWIG_Python.SoInput_openFile(*args)
    def pushFile(*args): return Coin_SWIG_Python.SoInput_pushFile(*args)
    def closeFile(*args): return Coin_SWIG_Python.SoInput_closeFile(*args)
    def isValidFile(*args): return Coin_SWIG_Python.SoInput_isValidFile(*args)
    def isValidBuffer(*args): return Coin_SWIG_Python.SoInput_isValidBuffer(*args)
    def getCurFile(*args): return Coin_SWIG_Python.SoInput_getCurFile(*args)
    def getCurFileName(*args): return Coin_SWIG_Python.SoInput_getCurFileName(*args)
    def setBuffer(*args): return Coin_SWIG_Python.SoInput_setBuffer(*args)
    def setStringArray(*args): return Coin_SWIG_Python.SoInput_setStringArray(*args)
    def getNumBytesRead(*args): return Coin_SWIG_Python.SoInput_getNumBytesRead(*args)
    def getHeader(*args): return Coin_SWIG_Python.SoInput_getHeader(*args)
    def getIVVersion(*args): return Coin_SWIG_Python.SoInput_getIVVersion(*args)
    def isBinary(*args): return Coin_SWIG_Python.SoInput_isBinary(*args)
    def get(*args): return Coin_SWIG_Python.SoInput_get(*args)
    def getASCIIBuffer(*args): return Coin_SWIG_Python.SoInput_getASCIIBuffer(*args)
    def getASCIIFile(*args): return Coin_SWIG_Python.SoInput_getASCIIFile(*args)
    def readHex(*args): return Coin_SWIG_Python.SoInput_readHex(*args)
    def read(*args): return Coin_SWIG_Python.SoInput_read(*args)
    def readBinaryArray(*args): return Coin_SWIG_Python.SoInput_readBinaryArray(*args)
    def eof(*args): return Coin_SWIG_Python.SoInput_eof(*args)
    def isFileVRML1(*args): return Coin_SWIG_Python.SoInput_isFileVRML1(*args)
    def isFileVRML2(*args): return Coin_SWIG_Python.SoInput_isFileVRML2(*args)
    def resetFilePointer(*args): return Coin_SWIG_Python.SoInput_resetFilePointer(*args)
    def getLocationString(*args): return Coin_SWIG_Python.SoInput_getLocationString(*args)
    def putBack(*args): return Coin_SWIG_Python.SoInput_putBack(*args)
    def addReference(*args): return Coin_SWIG_Python.SoInput_addReference(*args)
    def removeReference(*args): return Coin_SWIG_Python.SoInput_removeReference(*args)
    def findReference(*args): return Coin_SWIG_Python.SoInput_findReference(*args)
    addDirectoryFirst = staticmethod(Coin_SWIG_Python.SoInput_addDirectoryFirst)
    addDirectoryLast = staticmethod(Coin_SWIG_Python.SoInput_addDirectoryLast)
    addEnvDirectoriesFirst = staticmethod(Coin_SWIG_Python.SoInput_addEnvDirectoriesFirst)
    addEnvDirectoriesLast = staticmethod(Coin_SWIG_Python.SoInput_addEnvDirectoriesLast)
    removeDirectory = staticmethod(Coin_SWIG_Python.SoInput_removeDirectory)
    clearDirectories = staticmethod(Coin_SWIG_Python.SoInput_clearDirectories)
    getDirectories = staticmethod(Coin_SWIG_Python.SoInput_getDirectories)
    init = staticmethod(Coin_SWIG_Python.SoInput_init)
    getPathname = staticmethod(Coin_SWIG_Python.SoInput_getPathname)
    getBasename = staticmethod(Coin_SWIG_Python.SoInput_getBasename)
    searchForFile = staticmethod(Coin_SWIG_Python.SoInput_searchForFile)
SoInput_swigregister = Coin_SWIG_Python.SoInput_swigregister
SoInput_swigregister(SoInput)
SoInput_addDirectoryFirst = Coin_SWIG_Python.SoInput_addDirectoryFirst
SoInput_addDirectoryLast = Coin_SWIG_Python.SoInput_addDirectoryLast
SoInput_addEnvDirectoriesFirst = Coin_SWIG_Python.SoInput_addEnvDirectoriesFirst
SoInput_addEnvDirectoriesLast = Coin_SWIG_Python.SoInput_addEnvDirectoriesLast
SoInput_removeDirectory = Coin_SWIG_Python.SoInput_removeDirectory
SoInput_clearDirectories = Coin_SWIG_Python.SoInput_clearDirectories
SoInput_getDirectories = Coin_SWIG_Python.SoInput_getDirectories
SoInput_init = Coin_SWIG_Python.SoInput_init
SoInput_getPathname = Coin_SWIG_Python.SoInput_getPathname
SoInput_getBasename = Coin_SWIG_Python.SoInput_getBasename
SoInput_searchForFile = Coin_SWIG_Python.SoInput_searchForFile

class SoOutput(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    COUNT_REFS = Coin_SWIG_Python.SoOutput_COUNT_REFS
    WRITE = Coin_SWIG_Python.SoOutput_WRITE
    ADDRESSES = Coin_SWIG_Python.SoOutput_ADDRESSES
    REF_COUNTS = Coin_SWIG_Python.SoOutput_REF_COUNTS
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOutput
    __del__ = lambda self : None;
    def setFilePointer(*args): return Coin_SWIG_Python.SoOutput_setFilePointer(*args)
    def getFilePointer(*args): return Coin_SWIG_Python.SoOutput_getFilePointer(*args)
    def openFile(*args): return Coin_SWIG_Python.SoOutput_openFile(*args)
    def closeFile(*args): return Coin_SWIG_Python.SoOutput_closeFile(*args)
    def setCompression(*args): return Coin_SWIG_Python.SoOutput_setCompression(*args)
    getAvailableCompressionMethods = staticmethod(Coin_SWIG_Python.SoOutput_getAvailableCompressionMethods)
    def setBuffer(*args): return Coin_SWIG_Python.SoOutput_setBuffer(*args)
    def getBuffer(*args): return Coin_SWIG_Python.SoOutput_getBuffer(*args)
    def getBufferSize(*args): return Coin_SWIG_Python.SoOutput_getBufferSize(*args)
    def resetBuffer(*args): return Coin_SWIG_Python.SoOutput_resetBuffer(*args)
    def setBinary(*args): return Coin_SWIG_Python.SoOutput_setBinary(*args)
    def isBinary(*args): return Coin_SWIG_Python.SoOutput_isBinary(*args)
    def setHeaderString(*args): return Coin_SWIG_Python.SoOutput_setHeaderString(*args)
    def resetHeaderString(*args): return Coin_SWIG_Python.SoOutput_resetHeaderString(*args)
    def setFloatPrecision(*args): return Coin_SWIG_Python.SoOutput_setFloatPrecision(*args)
    def setStage(*args): return Coin_SWIG_Python.SoOutput_setStage(*args)
    def getStage(*args): return Coin_SWIG_Python.SoOutput_getStage(*args)
    def incrementIndent(*args): return Coin_SWIG_Python.SoOutput_incrementIndent(*args)
    def decrementIndent(*args): return Coin_SWIG_Python.SoOutput_decrementIndent(*args)
    def write(*args): return Coin_SWIG_Python.SoOutput_write(*args)
    def writeBinaryArray(*args): return Coin_SWIG_Python.SoOutput_writeBinaryArray(*args)
    def indent(*args): return Coin_SWIG_Python.SoOutput_indent(*args)
    def reset(*args): return Coin_SWIG_Python.SoOutput_reset(*args)
    def setCompact(*args): return Coin_SWIG_Python.SoOutput_setCompact(*args)
    def isCompact(*args): return Coin_SWIG_Python.SoOutput_isCompact(*args)
    def setAnnotation(*args): return Coin_SWIG_Python.SoOutput_setAnnotation(*args)
    def getAnnotation(*args): return Coin_SWIG_Python.SoOutput_getAnnotation(*args)
    getDefaultASCIIHeader = staticmethod(Coin_SWIG_Python.SoOutput_getDefaultASCIIHeader)
    getDefaultBinaryHeader = staticmethod(Coin_SWIG_Python.SoOutput_getDefaultBinaryHeader)
    def addReference(*args): return Coin_SWIG_Python.SoOutput_addReference(*args)
    def findReference(*args): return Coin_SWIG_Python.SoOutput_findReference(*args)
    def setReference(*args): return Coin_SWIG_Python.SoOutput_setReference(*args)
    def addDEFNode(*args): return Coin_SWIG_Python.SoOutput_addDEFNode(*args)
    def lookupDEFNode(*args): return Coin_SWIG_Python.SoOutput_lookupDEFNode(*args)
    def removeDEFNode(*args): return Coin_SWIG_Python.SoOutput_removeDEFNode(*args)
    def pushProto(*args): return Coin_SWIG_Python.SoOutput_pushProto(*args)
    def getCurrentProto(*args): return Coin_SWIG_Python.SoOutput_getCurrentProto(*args)
    def popProto(*args): return Coin_SWIG_Python.SoOutput_popProto(*args)
    def addRoute(*args): return Coin_SWIG_Python.SoOutput_addRoute(*args)
    def resolveRoutes(*args): return Coin_SWIG_Python.SoOutput_resolveRoutes(*args)
SoOutput_swigregister = Coin_SWIG_Python.SoOutput_swigregister
SoOutput_swigregister(SoOutput)
SoOutput_getAvailableCompressionMethods = Coin_SWIG_Python.SoOutput_getAvailableCompressionMethods
SoOutput_getDefaultASCIIHeader = Coin_SWIG_Python.SoOutput_getDefaultASCIIHeader
SoOutput_getDefaultBinaryHeader = Coin_SWIG_Python.SoOutput_getDefaultBinaryHeader

class SoSFEnum(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFEnum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFEnum
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFEnum_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFEnum_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFEnum_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFEnum_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFEnum_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFEnum_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFEnum___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFEnum___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFEnum_initClass)
    def setEnums(*args): return Coin_SWIG_Python.SoSFEnum_setEnums(*args)
    def getNumEnums(*args): return Coin_SWIG_Python.SoSFEnum_getNumEnums(*args)
    def getEnum(*args): return Coin_SWIG_Python.SoSFEnum_getEnum(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFEnum_setValue(*args)
SoSFEnum_swigregister = Coin_SWIG_Python.SoSFEnum_swigregister
SoSFEnum_swigregister(SoSFEnum)
SoSFEnum_createInstance = Coin_SWIG_Python.SoSFEnum_createInstance
SoSFEnum_getClassTypeId = Coin_SWIG_Python.SoSFEnum_getClassTypeId
SoSFEnum_initClass = Coin_SWIG_Python.SoSFEnum_initClass

class SoSFFloat(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFFloat
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFFloat_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFFloat_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFFloat_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFFloat_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFFloat_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFFloat_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFFloat___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFFloat___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFFloat_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFFloat_setValue(*args)
SoSFFloat_swigregister = Coin_SWIG_Python.SoSFFloat_swigregister
SoSFFloat_swigregister(SoSFFloat)
SoSFFloat_createInstance = Coin_SWIG_Python.SoSFFloat_createInstance
SoSFFloat_getClassTypeId = Coin_SWIG_Python.SoSFFloat_getClassTypeId
SoSFFloat_initClass = Coin_SWIG_Python.SoSFFloat_initClass

class SoComplexityTypeElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_initClass)
    OBJECT_SPACE = Coin_SWIG_Python.SoComplexityTypeElement_OBJECT_SPACE
    SCREEN_SPACE = Coin_SWIG_Python.SoComplexityTypeElement_SCREEN_SPACE
    BOUNDING_BOX = Coin_SWIG_Python.SoComplexityTypeElement_BOUNDING_BOX
    def init(*args): return Coin_SWIG_Python.SoComplexityTypeElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_set)
    get = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoComplexityTypeElement_getDefault)
SoComplexityTypeElement_swigregister = Coin_SWIG_Python.SoComplexityTypeElement_swigregister
SoComplexityTypeElement_swigregister(SoComplexityTypeElement)
SoComplexityTypeElement_getClassTypeId = Coin_SWIG_Python.SoComplexityTypeElement_getClassTypeId
SoComplexityTypeElement_getClassStackIndex = Coin_SWIG_Python.SoComplexityTypeElement_getClassStackIndex
SoComplexityTypeElement_createInstance = Coin_SWIG_Python.SoComplexityTypeElement_createInstance
SoComplexityTypeElement_initClass = Coin_SWIG_Python.SoComplexityTypeElement_initClass
SoComplexityTypeElement_set = Coin_SWIG_Python.SoComplexityTypeElement_set
SoComplexityTypeElement_get = Coin_SWIG_Python.SoComplexityTypeElement_get
SoComplexityTypeElement_getDefault = Coin_SWIG_Python.SoComplexityTypeElement_getDefault

class SoComplexity(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComplexity_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComplexity_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoComplexity_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComplexity(*args)
        try: self.this.append(this)
        except: self.this = this
    OBJECT_SPACE = Coin_SWIG_Python.SoComplexity_OBJECT_SPACE
    SCREEN_SPACE = Coin_SWIG_Python.SoComplexity_SCREEN_SPACE
    BOUNDING_BOX = Coin_SWIG_Python.SoComplexity_BOUNDING_BOX
    type = _swig_property(Coin_SWIG_Python.SoComplexity_type_get, Coin_SWIG_Python.SoComplexity_type_set)
    value = _swig_property(Coin_SWIG_Python.SoComplexity_value_get, Coin_SWIG_Python.SoComplexity_value_set)
    textureQuality = _swig_property(Coin_SWIG_Python.SoComplexity_textureQuality_get, Coin_SWIG_Python.SoComplexity_textureQuality_set)
    def doAction(*args): return Coin_SWIG_Python.SoComplexity_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoComplexity_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoComplexity_getBoundingBox(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoComplexity_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoComplexity_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoComplexity_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComplexity
    __del__ = lambda self : None;
SoComplexity_swigregister = Coin_SWIG_Python.SoComplexity_swigregister
SoComplexity_swigregister(SoComplexity)
SoComplexity_getClassTypeId = Coin_SWIG_Python.SoComplexity_getClassTypeId
SoComplexity_initClass = Coin_SWIG_Python.SoComplexity_initClass

class SoDrawStyleElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_initClass)
    FILLED = Coin_SWIG_Python.SoDrawStyleElement_FILLED
    LINES = Coin_SWIG_Python.SoDrawStyleElement_LINES
    POINTS = Coin_SWIG_Python.SoDrawStyleElement_POINTS
    INVISIBLE = Coin_SWIG_Python.SoDrawStyleElement_INVISIBLE
    def init(*args): return Coin_SWIG_Python.SoDrawStyleElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_set)
    get = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoDrawStyleElement_getDefault)
SoDrawStyleElement_swigregister = Coin_SWIG_Python.SoDrawStyleElement_swigregister
SoDrawStyleElement_swigregister(SoDrawStyleElement)
SoDrawStyleElement_getClassTypeId = Coin_SWIG_Python.SoDrawStyleElement_getClassTypeId
SoDrawStyleElement_getClassStackIndex = Coin_SWIG_Python.SoDrawStyleElement_getClassStackIndex
SoDrawStyleElement_createInstance = Coin_SWIG_Python.SoDrawStyleElement_createInstance
SoDrawStyleElement_initClass = Coin_SWIG_Python.SoDrawStyleElement_initClass
SoDrawStyleElement_set = Coin_SWIG_Python.SoDrawStyleElement_set
SoDrawStyleElement_get = Coin_SWIG_Python.SoDrawStyleElement_get
SoDrawStyleElement_getDefault = Coin_SWIG_Python.SoDrawStyleElement_getDefault

class SoSFUShort(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFUShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFUShort
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFUShort_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFUShort_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFUShort_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFUShort_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFUShort_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFUShort_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFUShort___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFUShort___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFUShort_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFUShort_setValue(*args)
SoSFUShort_swigregister = Coin_SWIG_Python.SoSFUShort_swigregister
SoSFUShort_swigregister(SoSFUShort)
SoSFUShort_createInstance = Coin_SWIG_Python.SoSFUShort_createInstance
SoSFUShort_getClassTypeId = Coin_SWIG_Python.SoSFUShort_getClassTypeId
SoSFUShort_initClass = Coin_SWIG_Python.SoSFUShort_initClass

class SoDrawStyle(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDrawStyle_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDrawStyle_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoDrawStyle_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDrawStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    FILLED = Coin_SWIG_Python.SoDrawStyle_FILLED
    LINES = Coin_SWIG_Python.SoDrawStyle_LINES
    POINTS = Coin_SWIG_Python.SoDrawStyle_POINTS
    INVISIBLE = Coin_SWIG_Python.SoDrawStyle_INVISIBLE
    style = _swig_property(Coin_SWIG_Python.SoDrawStyle_style_get, Coin_SWIG_Python.SoDrawStyle_style_set)
    pointSize = _swig_property(Coin_SWIG_Python.SoDrawStyle_pointSize_get, Coin_SWIG_Python.SoDrawStyle_pointSize_set)
    lineWidth = _swig_property(Coin_SWIG_Python.SoDrawStyle_lineWidth_get, Coin_SWIG_Python.SoDrawStyle_lineWidth_set)
    linePattern = _swig_property(Coin_SWIG_Python.SoDrawStyle_linePattern_get, Coin_SWIG_Python.SoDrawStyle_linePattern_set)
    def doAction(*args): return Coin_SWIG_Python.SoDrawStyle_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoDrawStyle_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoDrawStyle_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDrawStyle
    __del__ = lambda self : None;
SoDrawStyle_swigregister = Coin_SWIG_Python.SoDrawStyle_swigregister
SoDrawStyle_swigregister(SoDrawStyle)
SoDrawStyle_getClassTypeId = Coin_SWIG_Python.SoDrawStyle_getClassTypeId
SoDrawStyle_initClass = Coin_SWIG_Python.SoDrawStyle_initClass

class SbVec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def cross(*args): return Coin_SWIG_Python.SbVec3f_cross(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec3f_dot(*args)
    def equals(*args): return Coin_SWIG_Python.SbVec3f_equals(*args)
    def getClosestAxis(*args): return Coin_SWIG_Python.SbVec3f_getClosestAxis(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec3f_getValue(*args)
    def length(*args): return Coin_SWIG_Python.SbVec3f_length(*args)
    def sqrLength(*args): return Coin_SWIG_Python.SbVec3f_sqrLength(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec3f_negate(*args)
    def normalize(*args): return Coin_SWIG_Python.SbVec3f_normalize(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec3f_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec3f___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec3f___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec3f___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec3f___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec3f___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec3f_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec3f___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec3f___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec3f___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec3f___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec3f___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec3f___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec3f___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec3f___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec3f___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3f
    __del__ = lambda self : None;
SbVec3f_swigregister = Coin_SWIG_Python.SbVec3f_swigregister
SbVec3f_swigregister(SbVec3f)

class SbColor(SbVec3f):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def setHSVValue(*args): return Coin_SWIG_Python.SbColor_setHSVValue(*args)
    def getHSVValue(*args): return Coin_SWIG_Python.SbColor_getHSVValue(*args)
    def setPackedValue(*args): return Coin_SWIG_Python.SbColor_setPackedValue(*args)
    def getPackedValue(*args): return Coin_SWIG_Python.SbColor_getPackedValue(*args)
    def __add__(*args): return Coin_SWIG_Python.SbColor___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbColor___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbColor___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbColor___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbColor___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbColor___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbColor___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbColor___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbColor___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbColor
    __del__ = lambda self : None;
SbColor_swigregister = Coin_SWIG_Python.SbColor_swigregister
SbColor_swigregister(SbColor)

SO_LAZY_SHINY_THRESHOLD = Coin_SWIG_Python.SO_LAZY_SHINY_THRESHOLD
class SoLazyElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLazyElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLazyElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLazyElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLazyElement_initClass)
    LIGHT_MODEL_CASE = Coin_SWIG_Python.SoLazyElement_LIGHT_MODEL_CASE
    COLOR_MATERIAL_CASE = Coin_SWIG_Python.SoLazyElement_COLOR_MATERIAL_CASE
    DIFFUSE_CASE = Coin_SWIG_Python.SoLazyElement_DIFFUSE_CASE
    AMBIENT_CASE = Coin_SWIG_Python.SoLazyElement_AMBIENT_CASE
    EMISSIVE_CASE = Coin_SWIG_Python.SoLazyElement_EMISSIVE_CASE
    SPECULAR_CASE = Coin_SWIG_Python.SoLazyElement_SPECULAR_CASE
    SHININESS_CASE = Coin_SWIG_Python.SoLazyElement_SHININESS_CASE
    BLENDING_CASE = Coin_SWIG_Python.SoLazyElement_BLENDING_CASE
    TRANSPARENCY_CASE = Coin_SWIG_Python.SoLazyElement_TRANSPARENCY_CASE
    VERTEXORDERING_CASE = Coin_SWIG_Python.SoLazyElement_VERTEXORDERING_CASE
    TWOSIDE_CASE = Coin_SWIG_Python.SoLazyElement_TWOSIDE_CASE
    CULLING_CASE = Coin_SWIG_Python.SoLazyElement_CULLING_CASE
    SHADE_MODEL_CASE = Coin_SWIG_Python.SoLazyElement_SHADE_MODEL_CASE
    GLIMAGE_CASE = Coin_SWIG_Python.SoLazyElement_GLIMAGE_CASE
    ALPHATEST_CASE = Coin_SWIG_Python.SoLazyElement_ALPHATEST_CASE
    LAZYCASES_LAST = Coin_SWIG_Python.SoLazyElement_LAZYCASES_LAST
    LIGHT_MODEL_MASK = Coin_SWIG_Python.SoLazyElement_LIGHT_MODEL_MASK
    COLOR_MATERIAL_MASK = Coin_SWIG_Python.SoLazyElement_COLOR_MATERIAL_MASK
    DIFFUSE_MASK = Coin_SWIG_Python.SoLazyElement_DIFFUSE_MASK
    AMBIENT_MASK = Coin_SWIG_Python.SoLazyElement_AMBIENT_MASK
    EMISSIVE_MASK = Coin_SWIG_Python.SoLazyElement_EMISSIVE_MASK
    SPECULAR_MASK = Coin_SWIG_Python.SoLazyElement_SPECULAR_MASK
    SHININESS_MASK = Coin_SWIG_Python.SoLazyElement_SHININESS_MASK
    TRANSPARENCY_MASK = Coin_SWIG_Python.SoLazyElement_TRANSPARENCY_MASK
    BLENDING_MASK = Coin_SWIG_Python.SoLazyElement_BLENDING_MASK
    VERTEXORDERING_MASK = Coin_SWIG_Python.SoLazyElement_VERTEXORDERING_MASK
    TWOSIDE_MASK = Coin_SWIG_Python.SoLazyElement_TWOSIDE_MASK
    CULLING_MASK = Coin_SWIG_Python.SoLazyElement_CULLING_MASK
    SHADE_MODEL_MASK = Coin_SWIG_Python.SoLazyElement_SHADE_MODEL_MASK
    GLIMAGE_MASK = Coin_SWIG_Python.SoLazyElement_GLIMAGE_MASK
    ALPHATEST_MASK = Coin_SWIG_Python.SoLazyElement_ALPHATEST_MASK
    ALL_MASK = Coin_SWIG_Python.SoLazyElement_ALL_MASK
    OTHER_COLOR_MASK = Coin_SWIG_Python.SoLazyElement_OTHER_COLOR_MASK
    ALL_COLOR_MASK = Coin_SWIG_Python.SoLazyElement_ALL_COLOR_MASK
    NO_COLOR_MASK = Coin_SWIG_Python.SoLazyElement_NO_COLOR_MASK
    ALL_BUT_DIFFUSE_MASK = Coin_SWIG_Python.SoLazyElement_ALL_BUT_DIFFUSE_MASK
    DIFFUSE_ONLY_MASK = Coin_SWIG_Python.SoLazyElement_DIFFUSE_ONLY_MASK
    BASE_COLOR = Coin_SWIG_Python.SoLazyElement_BASE_COLOR
    PHONG = Coin_SWIG_Python.SoLazyElement_PHONG
    CW = Coin_SWIG_Python.SoLazyElement_CW
    CCW = Coin_SWIG_Python.SoLazyElement_CCW
    def init(*args): return Coin_SWIG_Python.SoLazyElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoLazyElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoLazyElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoLazyElement_copyMatchInfo(*args)
    setDiffuse = staticmethod(Coin_SWIG_Python.SoLazyElement_setDiffuse)
    setTransparency = staticmethod(Coin_SWIG_Python.SoLazyElement_setTransparency)
    setColorIndices = staticmethod(Coin_SWIG_Python.SoLazyElement_setColorIndices)
    setAmbient = staticmethod(Coin_SWIG_Python.SoLazyElement_setAmbient)
    setEmissive = staticmethod(Coin_SWIG_Python.SoLazyElement_setEmissive)
    setSpecular = staticmethod(Coin_SWIG_Python.SoLazyElement_setSpecular)
    setShininess = staticmethod(Coin_SWIG_Python.SoLazyElement_setShininess)
    setColorMaterial = staticmethod(Coin_SWIG_Python.SoLazyElement_setColorMaterial)
    enableBlending = staticmethod(Coin_SWIG_Python.SoLazyElement_enableBlending)
    disableBlending = staticmethod(Coin_SWIG_Python.SoLazyElement_disableBlending)
    setLightModel = staticmethod(Coin_SWIG_Python.SoLazyElement_setLightModel)
    setVertexOrdering = staticmethod(Coin_SWIG_Python.SoLazyElement_setVertexOrdering)
    setBackfaceCulling = staticmethod(Coin_SWIG_Python.SoLazyElement_setBackfaceCulling)
    setTwosideLighting = staticmethod(Coin_SWIG_Python.SoLazyElement_setTwosideLighting)
    setShadeModel = staticmethod(Coin_SWIG_Python.SoLazyElement_setShadeModel)
    setGLImageId = staticmethod(Coin_SWIG_Python.SoLazyElement_setGLImageId)
    setAlphaTest = staticmethod(Coin_SWIG_Python.SoLazyElement_setAlphaTest)
    getDiffuse = staticmethod(Coin_SWIG_Python.SoLazyElement_getDiffuse)
    getTransparency = staticmethod(Coin_SWIG_Python.SoLazyElement_getTransparency)
    getPackedColors = staticmethod(Coin_SWIG_Python.SoLazyElement_getPackedColors)
    getColorIndices = staticmethod(Coin_SWIG_Python.SoLazyElement_getColorIndices)
    getColorIndex = staticmethod(Coin_SWIG_Python.SoLazyElement_getColorIndex)
    getAmbient = staticmethod(Coin_SWIG_Python.SoLazyElement_getAmbient)
    getEmissive = staticmethod(Coin_SWIG_Python.SoLazyElement_getEmissive)
    getSpecular = staticmethod(Coin_SWIG_Python.SoLazyElement_getSpecular)
    getShininess = staticmethod(Coin_SWIG_Python.SoLazyElement_getShininess)
    getColorMaterial = staticmethod(Coin_SWIG_Python.SoLazyElement_getColorMaterial)
    getBlending = staticmethod(Coin_SWIG_Python.SoLazyElement_getBlending)
    getLightModel = staticmethod(Coin_SWIG_Python.SoLazyElement_getLightModel)
    getAlphaTest = staticmethod(Coin_SWIG_Python.SoLazyElement_getAlphaTest)
    def getNumDiffuse(*args): return Coin_SWIG_Python.SoLazyElement_getNumDiffuse(*args)
    def getNumTransparencies(*args): return Coin_SWIG_Python.SoLazyElement_getNumTransparencies(*args)
    def getNumColorIndices(*args): return Coin_SWIG_Python.SoLazyElement_getNumColorIndices(*args)
    def isPacked(*args): return Coin_SWIG_Python.SoLazyElement_isPacked(*args)
    def isTransparent(*args): return Coin_SWIG_Python.SoLazyElement_isTransparent(*args)
    getInstance = staticmethod(Coin_SWIG_Python.SoLazyElement_getInstance)
    getDefaultAmbientIntensity = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultAmbientIntensity)
    getDefaultDiffuse = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultDiffuse)
    getDefaultAmbient = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultAmbient)
    getDefaultSpecular = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultSpecular)
    getDefaultEmissive = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultEmissive)
    getDefaultShininess = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultShininess)
    getDefaultPacked = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultPacked)
    getDefaultTransparency = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultTransparency)
    getDefaultLightModel = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultLightModel)
    getDefaultColorIndex = staticmethod(Coin_SWIG_Python.SoLazyElement_getDefaultColorIndex)
    setMaterials = staticmethod(Coin_SWIG_Python.SoLazyElement_setMaterials)
    getWInstance = staticmethod(Coin_SWIG_Python.SoLazyElement_getWInstance)
    def getPackedPointer(*args): return Coin_SWIG_Python.SoLazyElement_getPackedPointer(*args)
    def getDiffusePointer(*args): return Coin_SWIG_Python.SoLazyElement_getDiffusePointer(*args)
    def getColorIndexPointer(*args): return Coin_SWIG_Python.SoLazyElement_getColorIndexPointer(*args)
    def getTransparencyPointer(*args): return Coin_SWIG_Python.SoLazyElement_getTransparencyPointer(*args)
    setTransparencyType = staticmethod(Coin_SWIG_Python.SoLazyElement_setTransparencyType)
SoLazyElement_swigregister = Coin_SWIG_Python.SoLazyElement_swigregister
SoLazyElement_swigregister(SoLazyElement)
SoLazyElement_getClassTypeId = Coin_SWIG_Python.SoLazyElement_getClassTypeId
SoLazyElement_getClassStackIndex = Coin_SWIG_Python.SoLazyElement_getClassStackIndex
SoLazyElement_createInstance = Coin_SWIG_Python.SoLazyElement_createInstance
SoLazyElement_initClass = Coin_SWIG_Python.SoLazyElement_initClass
SoLazyElement_setDiffuse = Coin_SWIG_Python.SoLazyElement_setDiffuse
SoLazyElement_setTransparency = Coin_SWIG_Python.SoLazyElement_setTransparency
SoLazyElement_setColorIndices = Coin_SWIG_Python.SoLazyElement_setColorIndices
SoLazyElement_setAmbient = Coin_SWIG_Python.SoLazyElement_setAmbient
SoLazyElement_setEmissive = Coin_SWIG_Python.SoLazyElement_setEmissive
SoLazyElement_setSpecular = Coin_SWIG_Python.SoLazyElement_setSpecular
SoLazyElement_setShininess = Coin_SWIG_Python.SoLazyElement_setShininess
SoLazyElement_setColorMaterial = Coin_SWIG_Python.SoLazyElement_setColorMaterial
SoLazyElement_enableBlending = Coin_SWIG_Python.SoLazyElement_enableBlending
SoLazyElement_disableBlending = Coin_SWIG_Python.SoLazyElement_disableBlending
SoLazyElement_setLightModel = Coin_SWIG_Python.SoLazyElement_setLightModel
SoLazyElement_setVertexOrdering = Coin_SWIG_Python.SoLazyElement_setVertexOrdering
SoLazyElement_setBackfaceCulling = Coin_SWIG_Python.SoLazyElement_setBackfaceCulling
SoLazyElement_setTwosideLighting = Coin_SWIG_Python.SoLazyElement_setTwosideLighting
SoLazyElement_setShadeModel = Coin_SWIG_Python.SoLazyElement_setShadeModel
SoLazyElement_setGLImageId = Coin_SWIG_Python.SoLazyElement_setGLImageId
SoLazyElement_setAlphaTest = Coin_SWIG_Python.SoLazyElement_setAlphaTest
SoLazyElement_getDiffuse = Coin_SWIG_Python.SoLazyElement_getDiffuse
SoLazyElement_getTransparency = Coin_SWIG_Python.SoLazyElement_getTransparency
SoLazyElement_getPackedColors = Coin_SWIG_Python.SoLazyElement_getPackedColors
SoLazyElement_getColorIndices = Coin_SWIG_Python.SoLazyElement_getColorIndices
SoLazyElement_getColorIndex = Coin_SWIG_Python.SoLazyElement_getColorIndex
SoLazyElement_getAmbient = Coin_SWIG_Python.SoLazyElement_getAmbient
SoLazyElement_getEmissive = Coin_SWIG_Python.SoLazyElement_getEmissive
SoLazyElement_getSpecular = Coin_SWIG_Python.SoLazyElement_getSpecular
SoLazyElement_getShininess = Coin_SWIG_Python.SoLazyElement_getShininess
SoLazyElement_getColorMaterial = Coin_SWIG_Python.SoLazyElement_getColorMaterial
SoLazyElement_getBlending = Coin_SWIG_Python.SoLazyElement_getBlending
SoLazyElement_getLightModel = Coin_SWIG_Python.SoLazyElement_getLightModel
SoLazyElement_getAlphaTest = Coin_SWIG_Python.SoLazyElement_getAlphaTest
SoLazyElement_getInstance = Coin_SWIG_Python.SoLazyElement_getInstance
SoLazyElement_getDefaultAmbientIntensity = Coin_SWIG_Python.SoLazyElement_getDefaultAmbientIntensity
SoLazyElement_getDefaultDiffuse = Coin_SWIG_Python.SoLazyElement_getDefaultDiffuse
SoLazyElement_getDefaultAmbient = Coin_SWIG_Python.SoLazyElement_getDefaultAmbient
SoLazyElement_getDefaultSpecular = Coin_SWIG_Python.SoLazyElement_getDefaultSpecular
SoLazyElement_getDefaultEmissive = Coin_SWIG_Python.SoLazyElement_getDefaultEmissive
SoLazyElement_getDefaultShininess = Coin_SWIG_Python.SoLazyElement_getDefaultShininess
SoLazyElement_getDefaultPacked = Coin_SWIG_Python.SoLazyElement_getDefaultPacked
SoLazyElement_getDefaultTransparency = Coin_SWIG_Python.SoLazyElement_getDefaultTransparency
SoLazyElement_getDefaultLightModel = Coin_SWIG_Python.SoLazyElement_getDefaultLightModel
SoLazyElement_getDefaultColorIndex = Coin_SWIG_Python.SoLazyElement_getDefaultColorIndex
SoLazyElement_setMaterials = Coin_SWIG_Python.SoLazyElement_setMaterials
SoLazyElement_getWInstance = Coin_SWIG_Python.SoLazyElement_getWInstance
SoLazyElement_setTransparencyType = Coin_SWIG_Python.SoLazyElement_setTransparencyType

class SoColorPacker(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoColorPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoColorPacker
    __del__ = lambda self : None;
    def getPackedColors(*args): return Coin_SWIG_Python.SoColorPacker_getPackedColors(*args)
    def diffuseMatch(*args): return Coin_SWIG_Python.SoColorPacker_diffuseMatch(*args)
    def transpMatch(*args): return Coin_SWIG_Python.SoColorPacker_transpMatch(*args)
    def setNodeIds(*args): return Coin_SWIG_Python.SoColorPacker_setNodeIds(*args)
    def getSize(*args): return Coin_SWIG_Python.SoColorPacker_getSize(*args)
    def reallocate(*args): return Coin_SWIG_Python.SoColorPacker_reallocate(*args)
SoColorPacker_swigregister = Coin_SWIG_Python.SoColorPacker_swigregister
SoColorPacker_swigregister(SoColorPacker)

class SoLightModel(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLightModel_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLightModel_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLightModel_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLightModel(*args)
        try: self.this.append(this)
        except: self.this = this
    BASE_COLOR = Coin_SWIG_Python.SoLightModel_BASE_COLOR
    PHONG = Coin_SWIG_Python.SoLightModel_PHONG
    model = _swig_property(Coin_SWIG_Python.SoLightModel_model_get, Coin_SWIG_Python.SoLightModel_model_set)
    def doAction(*args): return Coin_SWIG_Python.SoLightModel_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoLightModel_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoLightModel_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLightModel
    __del__ = lambda self : None;
SoLightModel_swigregister = Coin_SWIG_Python.SoLightModel_swigregister
SoLightModel_swigregister(SoLightModel)
SoLightModel_getClassTypeId = Coin_SWIG_Python.SoLightModel_getClassTypeId
SoLightModel_initClass = Coin_SWIG_Python.SoLightModel_initClass

class SoMaterialBindingElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_initClass)
    OVERALL = Coin_SWIG_Python.SoMaterialBindingElement_OVERALL
    PER_PART = Coin_SWIG_Python.SoMaterialBindingElement_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoMaterialBindingElement_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoMaterialBindingElement_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoMaterialBindingElement_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoMaterialBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoMaterialBindingElement_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoMaterialBindingElement_DEFAULT
    NONE = Coin_SWIG_Python.SoMaterialBindingElement_NONE
    def init(*args): return Coin_SWIG_Python.SoMaterialBindingElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_set)
    get = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoMaterialBindingElement_getDefault)
SoMaterialBindingElement_swigregister = Coin_SWIG_Python.SoMaterialBindingElement_swigregister
SoMaterialBindingElement_swigregister(SoMaterialBindingElement)
SoMaterialBindingElement_getClassTypeId = Coin_SWIG_Python.SoMaterialBindingElement_getClassTypeId
SoMaterialBindingElement_getClassStackIndex = Coin_SWIG_Python.SoMaterialBindingElement_getClassStackIndex
SoMaterialBindingElement_createInstance = Coin_SWIG_Python.SoMaterialBindingElement_createInstance
SoMaterialBindingElement_initClass = Coin_SWIG_Python.SoMaterialBindingElement_initClass
SoMaterialBindingElement_set = Coin_SWIG_Python.SoMaterialBindingElement_set
SoMaterialBindingElement_get = Coin_SWIG_Python.SoMaterialBindingElement_get
SoMaterialBindingElement_getDefault = Coin_SWIG_Python.SoMaterialBindingElement_getDefault

class SoMaterialBinding(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMaterialBinding_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMaterialBinding_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMaterialBinding_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMaterialBinding(*args)
        try: self.this.append(this)
        except: self.this = this
    OVERALL = Coin_SWIG_Python.SoMaterialBinding_OVERALL
    PER_PART = Coin_SWIG_Python.SoMaterialBinding_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoMaterialBinding_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoMaterialBinding_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoMaterialBinding_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoMaterialBinding_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoMaterialBinding_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoMaterialBinding_DEFAULT
    NONE = Coin_SWIG_Python.SoMaterialBinding_NONE
    value = _swig_property(Coin_SWIG_Python.SoMaterialBinding_value_get, Coin_SWIG_Python.SoMaterialBinding_value_set)
    def doAction(*args): return Coin_SWIG_Python.SoMaterialBinding_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoMaterialBinding_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoMaterialBinding_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoMaterialBinding_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoMaterialBinding_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMaterialBinding
    __del__ = lambda self : None;
SoMaterialBinding_swigregister = Coin_SWIG_Python.SoMaterialBinding_swigregister
SoMaterialBinding_swigregister(SoMaterialBinding)
SoMaterialBinding_getClassTypeId = Coin_SWIG_Python.SoMaterialBinding_getClassTypeId
SoMaterialBinding_initClass = Coin_SWIG_Python.SoMaterialBinding_initClass

class SoNormalBindingElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_initClass)
    OVERALL = Coin_SWIG_Python.SoNormalBindingElement_OVERALL
    PER_PART = Coin_SWIG_Python.SoNormalBindingElement_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoNormalBindingElement_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoNormalBindingElement_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoNormalBindingElement_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoNormalBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoNormalBindingElement_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoNormalBindingElement_DEFAULT
    NONE = Coin_SWIG_Python.SoNormalBindingElement_NONE
    def init(*args): return Coin_SWIG_Python.SoNormalBindingElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_set)
    get = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoNormalBindingElement_getDefault)
SoNormalBindingElement_swigregister = Coin_SWIG_Python.SoNormalBindingElement_swigregister
SoNormalBindingElement_swigregister(SoNormalBindingElement)
SoNormalBindingElement_getClassTypeId = Coin_SWIG_Python.SoNormalBindingElement_getClassTypeId
SoNormalBindingElement_getClassStackIndex = Coin_SWIG_Python.SoNormalBindingElement_getClassStackIndex
SoNormalBindingElement_createInstance = Coin_SWIG_Python.SoNormalBindingElement_createInstance
SoNormalBindingElement_initClass = Coin_SWIG_Python.SoNormalBindingElement_initClass
SoNormalBindingElement_set = Coin_SWIG_Python.SoNormalBindingElement_set
SoNormalBindingElement_get = Coin_SWIG_Python.SoNormalBindingElement_get
SoNormalBindingElement_getDefault = Coin_SWIG_Python.SoNormalBindingElement_getDefault

class SoNormalBinding(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNormalBinding_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNormalBinding_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNormalBinding_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNormalBinding(*args)
        try: self.this.append(this)
        except: self.this = this
    OVERALL = Coin_SWIG_Python.SoNormalBinding_OVERALL
    PER_PART = Coin_SWIG_Python.SoNormalBinding_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoNormalBinding_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoNormalBinding_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoNormalBinding_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoNormalBinding_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoNormalBinding_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoNormalBinding_DEFAULT
    NONE = Coin_SWIG_Python.SoNormalBinding_NONE
    value = _swig_property(Coin_SWIG_Python.SoNormalBinding_value_get, Coin_SWIG_Python.SoNormalBinding_value_set)
    def doAction(*args): return Coin_SWIG_Python.SoNormalBinding_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoNormalBinding_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoNormalBinding_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoNormalBinding_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoNormalBinding_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalBinding
    __del__ = lambda self : None;
SoNormalBinding_swigregister = Coin_SWIG_Python.SoNormalBinding_swigregister
SoNormalBinding_swigregister(SoNormalBinding)
SoNormalBinding_getClassTypeId = Coin_SWIG_Python.SoNormalBinding_getClassTypeId
SoNormalBinding_initClass = Coin_SWIG_Python.SoNormalBinding_initClass

class SoPickStyleElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPickStyleElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoPickStyleElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoPickStyleElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoPickStyleElement_initClass)
    SHAPE = Coin_SWIG_Python.SoPickStyleElement_SHAPE
    BOUNDING_BOX = Coin_SWIG_Python.SoPickStyleElement_BOUNDING_BOX
    UNPICKABLE = Coin_SWIG_Python.SoPickStyleElement_UNPICKABLE
    def init(*args): return Coin_SWIG_Python.SoPickStyleElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoPickStyleElement_set)
    get = staticmethod(Coin_SWIG_Python.SoPickStyleElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoPickStyleElement_getDefault)
SoPickStyleElement_swigregister = Coin_SWIG_Python.SoPickStyleElement_swigregister
SoPickStyleElement_swigregister(SoPickStyleElement)
SoPickStyleElement_getClassTypeId = Coin_SWIG_Python.SoPickStyleElement_getClassTypeId
SoPickStyleElement_getClassStackIndex = Coin_SWIG_Python.SoPickStyleElement_getClassStackIndex
SoPickStyleElement_createInstance = Coin_SWIG_Python.SoPickStyleElement_createInstance
SoPickStyleElement_initClass = Coin_SWIG_Python.SoPickStyleElement_initClass
SoPickStyleElement_set = Coin_SWIG_Python.SoPickStyleElement_set
SoPickStyleElement_get = Coin_SWIG_Python.SoPickStyleElement_get
SoPickStyleElement_getDefault = Coin_SWIG_Python.SoPickStyleElement_getDefault

class SoPickStyle(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPickStyle_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPickStyle_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPickStyle_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPickStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    SHAPE = Coin_SWIG_Python.SoPickStyle_SHAPE
    BOUNDING_BOX = Coin_SWIG_Python.SoPickStyle_BOUNDING_BOX
    UNPICKABLE = Coin_SWIG_Python.SoPickStyle_UNPICKABLE
    style = _swig_property(Coin_SWIG_Python.SoPickStyle_style_get, Coin_SWIG_Python.SoPickStyle_style_set)
    def doAction(*args): return Coin_SWIG_Python.SoPickStyle_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoPickStyle_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoPickStyle_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPickStyle
    __del__ = lambda self : None;
SoPickStyle_swigregister = Coin_SWIG_Python.SoPickStyle_swigregister
SoPickStyle_swigregister(SoPickStyle)
SoPickStyle_getClassTypeId = Coin_SWIG_Python.SoPickStyle_getClassTypeId
SoPickStyle_initClass = Coin_SWIG_Python.SoPickStyle_initClass

class SoShapeHintsElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_initClass)
    UNKNOWN_ORDERING = Coin_SWIG_Python.SoShapeHintsElement_UNKNOWN_ORDERING
    CLOCKWISE = Coin_SWIG_Python.SoShapeHintsElement_CLOCKWISE
    COUNTERCLOCKWISE = Coin_SWIG_Python.SoShapeHintsElement_COUNTERCLOCKWISE
    ORDERING_AS_IS = Coin_SWIG_Python.SoShapeHintsElement_ORDERING_AS_IS
    UNKNOWN_SHAPE_TYPE = Coin_SWIG_Python.SoShapeHintsElement_UNKNOWN_SHAPE_TYPE
    SOLID = Coin_SWIG_Python.SoShapeHintsElement_SOLID
    SHAPE_TYPE_AS_IS = Coin_SWIG_Python.SoShapeHintsElement_SHAPE_TYPE_AS_IS
    UNKNOWN_FACE_TYPE = Coin_SWIG_Python.SoShapeHintsElement_UNKNOWN_FACE_TYPE
    CONVEX = Coin_SWIG_Python.SoShapeHintsElement_CONVEX
    FACE_TYPE_AS_IS = Coin_SWIG_Python.SoShapeHintsElement_FACE_TYPE_AS_IS
    def init(*args): return Coin_SWIG_Python.SoShapeHintsElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoShapeHintsElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoShapeHintsElement_pop(*args)
    def matches(*args): return Coin_SWIG_Python.SoShapeHintsElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoShapeHintsElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_set)
    get = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_get)
    getVertexOrdering = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getVertexOrdering)
    getShapeType = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getShapeType)
    getFaceType = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getFaceType)
    getDefaultVertexOrdering = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getDefaultVertexOrdering)
    getDefaultShapeType = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getDefaultShapeType)
    getDefaultFaceType = staticmethod(Coin_SWIG_Python.SoShapeHintsElement_getDefaultFaceType)
    def output(*args): return Coin_SWIG_Python.SoShapeHintsElement_output(*args)
SoShapeHintsElement_swigregister = Coin_SWIG_Python.SoShapeHintsElement_swigregister
SoShapeHintsElement_swigregister(SoShapeHintsElement)
SoShapeHintsElement_getClassTypeId = Coin_SWIG_Python.SoShapeHintsElement_getClassTypeId
SoShapeHintsElement_getClassStackIndex = Coin_SWIG_Python.SoShapeHintsElement_getClassStackIndex
SoShapeHintsElement_createInstance = Coin_SWIG_Python.SoShapeHintsElement_createInstance
SoShapeHintsElement_initClass = Coin_SWIG_Python.SoShapeHintsElement_initClass
SoShapeHintsElement_set = Coin_SWIG_Python.SoShapeHintsElement_set
SoShapeHintsElement_get = Coin_SWIG_Python.SoShapeHintsElement_get
SoShapeHintsElement_getVertexOrdering = Coin_SWIG_Python.SoShapeHintsElement_getVertexOrdering
SoShapeHintsElement_getShapeType = Coin_SWIG_Python.SoShapeHintsElement_getShapeType
SoShapeHintsElement_getFaceType = Coin_SWIG_Python.SoShapeHintsElement_getFaceType
SoShapeHintsElement_getDefaultVertexOrdering = Coin_SWIG_Python.SoShapeHintsElement_getDefaultVertexOrdering
SoShapeHintsElement_getDefaultShapeType = Coin_SWIG_Python.SoShapeHintsElement_getDefaultShapeType
SoShapeHintsElement_getDefaultFaceType = Coin_SWIG_Python.SoShapeHintsElement_getDefaultFaceType

class SoShapeHints(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShapeHints_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShapeHints_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoShapeHints_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShapeHints(*args)
        try: self.this.append(this)
        except: self.this = this
    UNKNOWN_ORDERING = Coin_SWIG_Python.SoShapeHints_UNKNOWN_ORDERING
    CLOCKWISE = Coin_SWIG_Python.SoShapeHints_CLOCKWISE
    COUNTERCLOCKWISE = Coin_SWIG_Python.SoShapeHints_COUNTERCLOCKWISE
    UNKNOWN_SHAPE_TYPE = Coin_SWIG_Python.SoShapeHints_UNKNOWN_SHAPE_TYPE
    SOLID = Coin_SWIG_Python.SoShapeHints_SOLID
    UNKNOWN_FACE_TYPE = Coin_SWIG_Python.SoShapeHints_UNKNOWN_FACE_TYPE
    CONVEX = Coin_SWIG_Python.SoShapeHints_CONVEX
    vertexOrdering = _swig_property(Coin_SWIG_Python.SoShapeHints_vertexOrdering_get, Coin_SWIG_Python.SoShapeHints_vertexOrdering_set)
    shapeType = _swig_property(Coin_SWIG_Python.SoShapeHints_shapeType_get, Coin_SWIG_Python.SoShapeHints_shapeType_set)
    faceType = _swig_property(Coin_SWIG_Python.SoShapeHints_faceType_get, Coin_SWIG_Python.SoShapeHints_faceType_set)
    creaseAngle = _swig_property(Coin_SWIG_Python.SoShapeHints_creaseAngle_get, Coin_SWIG_Python.SoShapeHints_creaseAngle_set)
    def doAction(*args): return Coin_SWIG_Python.SoShapeHints_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoShapeHints_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoShapeHints_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoShapeHints_getBoundingBox(*args)
    def pick(*args): return Coin_SWIG_Python.SoShapeHints_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShapeHints
    __del__ = lambda self : None;
SoShapeHints_swigregister = Coin_SWIG_Python.SoShapeHints_swigregister
SoShapeHints_swigregister(SoShapeHints)
SoShapeHints_getClassTypeId = Coin_SWIG_Python.SoShapeHints_getClassTypeId
SoShapeHints_initClass = Coin_SWIG_Python.SoShapeHints_initClass

class SoSFImage(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFImage
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFImage_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFImage_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFImage_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFImage_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFImage_isSame(*args)
    COPY = Coin_SWIG_Python.SoSFImage_COPY
    NO_COPY = Coin_SWIG_Python.SoSFImage_NO_COPY
    NO_COPY_AND_DELETE = Coin_SWIG_Python.SoSFImage_NO_COPY_AND_DELETE
    NO_COPY_AND_FREE = Coin_SWIG_Python.SoSFImage_NO_COPY_AND_FREE
    initClass = staticmethod(Coin_SWIG_Python.SoSFImage_initClass)
    def getValue(*args): return Coin_SWIG_Python.SoSFImage_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFImage___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFImage___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoSFImage_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoSFImage_finishEditing(*args)
    def setSubValue(*args): return Coin_SWIG_Python.SoSFImage_setSubValue(*args)
    def setSubValues(*args): return Coin_SWIG_Python.SoSFImage_setSubValues(*args)
    def getSubTexture(*args): return Coin_SWIG_Python.SoSFImage_getSubTexture(*args)
    def hasSubTextures(*args): return Coin_SWIG_Python.SoSFImage_hasSubTextures(*args)
    def setNeverWrite(*args): return Coin_SWIG_Python.SoSFImage_setNeverWrite(*args)
    def isNeverWrite(*args): return Coin_SWIG_Python.SoSFImage_isNeverWrite(*args)
    def hasTransparency(*args): return Coin_SWIG_Python.SoSFImage_hasTransparency(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFImage_setValue(*args)
SoSFImage_swigregister = Coin_SWIG_Python.SoSFImage_swigregister
SoSFImage_swigregister(SoSFImage)
SoSFImage_createInstance = Coin_SWIG_Python.SoSFImage_createInstance
SoSFImage_getClassTypeId = Coin_SWIG_Python.SoSFImage_getClassTypeId
SoSFImage_initClass = Coin_SWIG_Python.SoSFImage_initClass

class SoSFString(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFString
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFString_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFString_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFString_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFString_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFString_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFString_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFString___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFString___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFString_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFString_setValue(*args)
SoSFString_swigregister = Coin_SWIG_Python.SoSFString_swigregister
SoSFString_swigregister(SoSFString)
SoSFString_createInstance = Coin_SWIG_Python.SoSFString_createInstance
SoSFString_getClassTypeId = Coin_SWIG_Python.SoSFString_getClassTypeId
SoSFString_initClass = Coin_SWIG_Python.SoSFString_initClass

class SoSFColor(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFColor
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFColor_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFColor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFColor_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFColor_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFColor_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFColor_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFColor___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFColor___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFColor_initClass)
    def setHSVValue(*args): return Coin_SWIG_Python.SoSFColor_setHSVValue(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFColor_setValue(*args)
SoSFColor_swigregister = Coin_SWIG_Python.SoSFColor_swigregister
SoSFColor_swigregister(SoSFColor)
SoSFColor_createInstance = Coin_SWIG_Python.SoSFColor_createInstance
SoSFColor_getClassTypeId = Coin_SWIG_Python.SoSFColor_getClassTypeId
SoSFColor_initClass = Coin_SWIG_Python.SoSFColor_initClass

class SoReplacedElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoReplacedElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoReplacedElement_getClassStackIndex)
    initClass = staticmethod(Coin_SWIG_Python.SoReplacedElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoReplacedElement_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoReplacedElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoReplacedElement_copyMatchInfo(*args)
    def getNodeId(*args): return Coin_SWIG_Python.SoReplacedElement_getNodeId(*args)
    def output(*args): return Coin_SWIG_Python.SoReplacedElement_output(*args)
SoReplacedElement_swigregister = Coin_SWIG_Python.SoReplacedElement_swigregister
SoReplacedElement_swigregister(SoReplacedElement)
SoReplacedElement_getClassTypeId = Coin_SWIG_Python.SoReplacedElement_getClassTypeId
SoReplacedElement_getClassStackIndex = Coin_SWIG_Python.SoReplacedElement_getClassStackIndex
SoReplacedElement_initClass = Coin_SWIG_Python.SoReplacedElement_initClass

class SbVec3s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec3s(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return Coin_SWIG_Python.SbVec3s_dot(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec3s_getValue(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec3s_negate(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec3s_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec3s___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec3s___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec3s___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec3s___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec3s___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec3s_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec3s___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec3s___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec3s___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec3s___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec3s___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec3s___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec3s___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec3s___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec3s___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3s
    __del__ = lambda self : None;
SbVec3s_swigregister = Coin_SWIG_Python.SbVec3s_swigregister
SbVec3s_swigregister(SbVec3s)

class SoTextureImageElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureImageElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureImageElement_initClass)
    BLEND = Coin_SWIG_Python.SoTextureImageElement_BLEND
    MODULATE = Coin_SWIG_Python.SoTextureImageElement_MODULATE
    DECAL = Coin_SWIG_Python.SoTextureImageElement_DECAL
    REPLACE = Coin_SWIG_Python.SoTextureImageElement_REPLACE
    CLAMP = Coin_SWIG_Python.SoTextureImageElement_CLAMP
    REPEAT = Coin_SWIG_Python.SoTextureImageElement_REPEAT
    CLAMP_TO_BORDER = Coin_SWIG_Python.SoTextureImageElement_CLAMP_TO_BORDER
    def init(*args): return Coin_SWIG_Python.SoTextureImageElement_init(*args)
    setDefault = staticmethod(Coin_SWIG_Python.SoTextureImageElement_setDefault)
    set = staticmethod(Coin_SWIG_Python.SoTextureImageElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTextureImageElement_get)
    getBlendColor = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getBlendColor)
    getImage = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getImage)
    getModel = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getModel)
    getWrapS = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getWrapS)
    getWrapT = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getWrapT)
    getWrapR = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getWrapR)
    containsTransparency = staticmethod(Coin_SWIG_Python.SoTextureImageElement_containsTransparency)
    getDefault = staticmethod(Coin_SWIG_Python.SoTextureImageElement_getDefault)
SoTextureImageElement_swigregister = Coin_SWIG_Python.SoTextureImageElement_swigregister
SoTextureImageElement_swigregister(SoTextureImageElement)
SoTextureImageElement_getClassTypeId = Coin_SWIG_Python.SoTextureImageElement_getClassTypeId
SoTextureImageElement_getClassStackIndex = Coin_SWIG_Python.SoTextureImageElement_getClassStackIndex
SoTextureImageElement_createInstance = Coin_SWIG_Python.SoTextureImageElement_createInstance
SoTextureImageElement_initClass = Coin_SWIG_Python.SoTextureImageElement_initClass
SoTextureImageElement_setDefault = Coin_SWIG_Python.SoTextureImageElement_setDefault
SoTextureImageElement_set = Coin_SWIG_Python.SoTextureImageElement_set
SoTextureImageElement_get = Coin_SWIG_Python.SoTextureImageElement_get
SoTextureImageElement_getBlendColor = Coin_SWIG_Python.SoTextureImageElement_getBlendColor
SoTextureImageElement_getImage = Coin_SWIG_Python.SoTextureImageElement_getImage
SoTextureImageElement_getModel = Coin_SWIG_Python.SoTextureImageElement_getModel
SoTextureImageElement_getWrapS = Coin_SWIG_Python.SoTextureImageElement_getWrapS
SoTextureImageElement_getWrapT = Coin_SWIG_Python.SoTextureImageElement_getWrapT
SoTextureImageElement_getWrapR = Coin_SWIG_Python.SoTextureImageElement_getWrapR
SoTextureImageElement_containsTransparency = Coin_SWIG_Python.SoTextureImageElement_containsTransparency
SoTextureImageElement_getDefault = Coin_SWIG_Python.SoTextureImageElement_getDefault

class SoTexture2(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTexture2_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTexture2_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTexture2_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTexture2(*args)
        try: self.this.append(this)
        except: self.this = this
    MODULATE = Coin_SWIG_Python.SoTexture2_MODULATE
    DECAL = Coin_SWIG_Python.SoTexture2_DECAL
    BLEND = Coin_SWIG_Python.SoTexture2_BLEND
    REPLACE = Coin_SWIG_Python.SoTexture2_REPLACE
    REPEAT = Coin_SWIG_Python.SoTexture2_REPEAT
    CLAMP = Coin_SWIG_Python.SoTexture2_CLAMP
    filename = _swig_property(Coin_SWIG_Python.SoTexture2_filename_get, Coin_SWIG_Python.SoTexture2_filename_set)
    image = _swig_property(Coin_SWIG_Python.SoTexture2_image_get, Coin_SWIG_Python.SoTexture2_image_set)
    wrapS = _swig_property(Coin_SWIG_Python.SoTexture2_wrapS_get, Coin_SWIG_Python.SoTexture2_wrapS_set)
    wrapT = _swig_property(Coin_SWIG_Python.SoTexture2_wrapT_get, Coin_SWIG_Python.SoTexture2_wrapT_set)
    model = _swig_property(Coin_SWIG_Python.SoTexture2_model_get, Coin_SWIG_Python.SoTexture2_model_set)
    blendColor = _swig_property(Coin_SWIG_Python.SoTexture2_blendColor_get, Coin_SWIG_Python.SoTexture2_blendColor_set)
    def doAction(*args): return Coin_SWIG_Python.SoTexture2_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTexture2_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTexture2_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoTexture2_rayPick(*args)
    readImage = staticmethod(Coin_SWIG_Python.SoTexture2_readImage)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture2
    __del__ = lambda self : None;
SoTexture2_swigregister = Coin_SWIG_Python.SoTexture2_swigregister
SoTexture2_swigregister(SoTexture2)
SoTexture2_getClassTypeId = Coin_SWIG_Python.SoTexture2_getClassTypeId
SoTexture2_initClass = Coin_SWIG_Python.SoTexture2_initClass
SoTexture2_readImage = Coin_SWIG_Python.SoTexture2_readImage

class SoTextureCoordinateBindingElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_initClass)
    PER_VERTEX = Coin_SWIG_Python.SoTextureCoordinateBindingElement_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoTextureCoordinateBindingElement_PER_VERTEX_INDEXED
    def init(*args): return Coin_SWIG_Python.SoTextureCoordinateBindingElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBindingElement_getDefault)
SoTextureCoordinateBindingElement_swigregister = Coin_SWIG_Python.SoTextureCoordinateBindingElement_swigregister
SoTextureCoordinateBindingElement_swigregister(SoTextureCoordinateBindingElement)
SoTextureCoordinateBindingElement_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassTypeId
SoTextureCoordinateBindingElement_getClassStackIndex = Coin_SWIG_Python.SoTextureCoordinateBindingElement_getClassStackIndex
SoTextureCoordinateBindingElement_createInstance = Coin_SWIG_Python.SoTextureCoordinateBindingElement_createInstance
SoTextureCoordinateBindingElement_initClass = Coin_SWIG_Python.SoTextureCoordinateBindingElement_initClass
SoTextureCoordinateBindingElement_set = Coin_SWIG_Python.SoTextureCoordinateBindingElement_set
SoTextureCoordinateBindingElement_get = Coin_SWIG_Python.SoTextureCoordinateBindingElement_get
SoTextureCoordinateBindingElement_getDefault = Coin_SWIG_Python.SoTextureCoordinateBindingElement_getDefault

class SoTextureCoordinateBinding(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBinding_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateBinding_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateBinding_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateBinding(*args)
        try: self.this.append(this)
        except: self.this = this
    PER_VERTEX = Coin_SWIG_Python.SoTextureCoordinateBinding_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoTextureCoordinateBinding_PER_VERTEX_INDEXED
    DEFAULT = Coin_SWIG_Python.SoTextureCoordinateBinding_DEFAULT
    value = _swig_property(Coin_SWIG_Python.SoTextureCoordinateBinding_value_get, Coin_SWIG_Python.SoTextureCoordinateBinding_value_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinateBinding_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinateBinding_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinateBinding_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinateBinding_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateBinding
    __del__ = lambda self : None;
SoTextureCoordinateBinding_swigregister = Coin_SWIG_Python.SoTextureCoordinateBinding_swigregister
SoTextureCoordinateBinding_swigregister(SoTextureCoordinateBinding)
SoTextureCoordinateBinding_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateBinding_getClassTypeId
SoTextureCoordinateBinding_initClass = Coin_SWIG_Python.SoTextureCoordinateBinding_initClass

class SoTransformation(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformation_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformation_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformation
    __del__ = lambda self : None;
SoTransformation_swigregister = Coin_SWIG_Python.SoTransformation_swigregister
SoTransformation_swigregister(SoTransformation)
SoTransformation_getClassTypeId = Coin_SWIG_Python.SoTransformation_getClassTypeId
SoTransformation_initClass = Coin_SWIG_Python.SoTransformation_initClass

class SoUnits(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoUnits_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoUnits_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoUnits_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoUnits(*args)
        try: self.this.append(this)
        except: self.this = this
    METERS = Coin_SWIG_Python.SoUnits_METERS
    CENTIMETERS = Coin_SWIG_Python.SoUnits_CENTIMETERS
    MILLIMETERS = Coin_SWIG_Python.SoUnits_MILLIMETERS
    MICROMETERS = Coin_SWIG_Python.SoUnits_MICROMETERS
    MICRONS = Coin_SWIG_Python.SoUnits_MICRONS
    NANOMETERS = Coin_SWIG_Python.SoUnits_NANOMETERS
    ANGSTROMS = Coin_SWIG_Python.SoUnits_ANGSTROMS
    KILOMETERS = Coin_SWIG_Python.SoUnits_KILOMETERS
    FEET = Coin_SWIG_Python.SoUnits_FEET
    INCHES = Coin_SWIG_Python.SoUnits_INCHES
    POINTS = Coin_SWIG_Python.SoUnits_POINTS
    YARDS = Coin_SWIG_Python.SoUnits_YARDS
    MILES = Coin_SWIG_Python.SoUnits_MILES
    NAUTICAL_MILES = Coin_SWIG_Python.SoUnits_NAUTICAL_MILES
    units = _swig_property(Coin_SWIG_Python.SoUnits_units_get, Coin_SWIG_Python.SoUnits_units_set)
    def doAction(*args): return Coin_SWIG_Python.SoUnits_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoUnits_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoUnits_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoUnits_getMatrix(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoUnits_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoUnits_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoUnits_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoUnits
    __del__ = lambda self : None;
SoUnits_swigregister = Coin_SWIG_Python.SoUnits_swigregister
SoUnits_swigregister(SoUnits)
SoUnits_getClassTypeId = Coin_SWIG_Python.SoUnits_getClassTypeId
SoUnits_initClass = Coin_SWIG_Python.SoUnits_initClass

class SoCallbackAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoCallbackAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCallbackAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoCallbackAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoCallbackAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCallbackAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCallbackAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoCallbackAction_initClass)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoCallbackAction_setViewportRegion(*args)
    CONTINUE = Coin_SWIG_Python.SoCallbackAction_CONTINUE
    ABORT = Coin_SWIG_Python.SoCallbackAction_ABORT
    PRUNE = Coin_SWIG_Python.SoCallbackAction_PRUNE
    def getDecimationType(*args): return Coin_SWIG_Python.SoCallbackAction_getDecimationType(*args)
    def getDecimationPercentage(*args): return Coin_SWIG_Python.SoCallbackAction_getDecimationPercentage(*args)
    def getComplexity(*args): return Coin_SWIG_Python.SoCallbackAction_getComplexity(*args)
    def getComplexityType(*args): return Coin_SWIG_Python.SoCallbackAction_getComplexityType(*args)
    def getNumCoordinates(*args): return Coin_SWIG_Python.SoCallbackAction_getNumCoordinates(*args)
    def getCoordinate3(*args): return Coin_SWIG_Python.SoCallbackAction_getCoordinate3(*args)
    def getCoordinate4(*args): return Coin_SWIG_Python.SoCallbackAction_getCoordinate4(*args)
    def getDrawStyle(*args): return Coin_SWIG_Python.SoCallbackAction_getDrawStyle(*args)
    def getLinePattern(*args): return Coin_SWIG_Python.SoCallbackAction_getLinePattern(*args)
    def getLineWidth(*args): return Coin_SWIG_Python.SoCallbackAction_getLineWidth(*args)
    def getPointSize(*args): return Coin_SWIG_Python.SoCallbackAction_getPointSize(*args)
    def getFontName(*args): return Coin_SWIG_Python.SoCallbackAction_getFontName(*args)
    def getFontSize(*args): return Coin_SWIG_Python.SoCallbackAction_getFontSize(*args)
    def getLightModel(*args): return Coin_SWIG_Python.SoCallbackAction_getLightModel(*args)
    def getLightAttenuation(*args): return Coin_SWIG_Python.SoCallbackAction_getLightAttenuation(*args)
    def getMaterial(*args): return Coin_SWIG_Python.SoCallbackAction_getMaterial(*args)
    def getMaterialBinding(*args): return Coin_SWIG_Python.SoCallbackAction_getMaterialBinding(*args)
    def getNumNormals(*args): return Coin_SWIG_Python.SoCallbackAction_getNumNormals(*args)
    def getNormal(*args): return Coin_SWIG_Python.SoCallbackAction_getNormal(*args)
    def getNormalBinding(*args): return Coin_SWIG_Python.SoCallbackAction_getNormalBinding(*args)
    def getNumProfileCoordinates(*args): return Coin_SWIG_Python.SoCallbackAction_getNumProfileCoordinates(*args)
    def getProfileCoordinate2(*args): return Coin_SWIG_Python.SoCallbackAction_getProfileCoordinate2(*args)
    def getProfileCoordinate3(*args): return Coin_SWIG_Python.SoCallbackAction_getProfileCoordinate3(*args)
    def getProfile(*args): return Coin_SWIG_Python.SoCallbackAction_getProfile(*args)
    def getVertexOrdering(*args): return Coin_SWIG_Python.SoCallbackAction_getVertexOrdering(*args)
    def getShapeType(*args): return Coin_SWIG_Python.SoCallbackAction_getShapeType(*args)
    def getFaceType(*args): return Coin_SWIG_Python.SoCallbackAction_getFaceType(*args)
    def getCreaseAngle(*args): return Coin_SWIG_Python.SoCallbackAction_getCreaseAngle(*args)
    def getNumTextureCoordinates(*args): return Coin_SWIG_Python.SoCallbackAction_getNumTextureCoordinates(*args)
    def getTextureCoordinate2(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinate2(*args)
    def getTextureCoordinate3(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinate3(*args)
    def getTextureCoordinate4(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinate4(*args)
    def getTextureCoordinateBinding(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureCoordinateBinding(*args)
    def getTextureBlendColor(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureBlendColor(*args)
    def getTextureImage(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureImage(*args)
    def getTextureMatrix(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureMatrix(*args)
    def getTextureModel(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureModel(*args)
    def getTextureWrapS(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureWrapS(*args)
    def getTextureWrapT(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureWrapT(*args)
    def getTextureWrapR(*args): return Coin_SWIG_Python.SoCallbackAction_getTextureWrapR(*args)
    def getModelMatrix(*args): return Coin_SWIG_Python.SoCallbackAction_getModelMatrix(*args)
    def getUnits(*args): return Coin_SWIG_Python.SoCallbackAction_getUnits(*args)
    def getFocalDistance(*args): return Coin_SWIG_Python.SoCallbackAction_getFocalDistance(*args)
    def getProjectionMatrix(*args): return Coin_SWIG_Python.SoCallbackAction_getProjectionMatrix(*args)
    def getViewingMatrix(*args): return Coin_SWIG_Python.SoCallbackAction_getViewingMatrix(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoCallbackAction_getViewVolume(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoCallbackAction_getViewportRegion(*args)
    def getPickStyle(*args): return Coin_SWIG_Python.SoCallbackAction_getPickStyle(*args)
    def getSwitch(*args): return Coin_SWIG_Python.SoCallbackAction_getSwitch(*args)
    def getCurrentResponse(*args): return Coin_SWIG_Python.SoCallbackAction_getCurrentResponse(*args)
    def invokePreCallbacks(*args): return Coin_SWIG_Python.SoCallbackAction_invokePreCallbacks(*args)
    def invokePostCallbacks(*args): return Coin_SWIG_Python.SoCallbackAction_invokePostCallbacks(*args)
    def invokeTriangleCallbacks(*args): return Coin_SWIG_Python.SoCallbackAction_invokeTriangleCallbacks(*args)
    def invokeLineSegmentCallbacks(*args): return Coin_SWIG_Python.SoCallbackAction_invokeLineSegmentCallbacks(*args)
    def invokePointCallbacks(*args): return Coin_SWIG_Python.SoCallbackAction_invokePointCallbacks(*args)
    def shouldGeneratePrimitives(*args): return Coin_SWIG_Python.SoCallbackAction_shouldGeneratePrimitives(*args)
    def getCurPathTail(*args): return Coin_SWIG_Python.SoCallbackAction_getCurPathTail(*args)
    def setCurrentNode(*args): return Coin_SWIG_Python.SoCallbackAction_setCurrentNode(*args)
    def addPreCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addPreCallback(*args)
    def addPostCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addPostCallback(*args)
    def addPreTailCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addPreTailCallback(*args)
    def addPostTailCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addPostTailCallback(*args)
    def addTriangleCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addTriangleCallback(*args)
    def addLineSegmentCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addLineSegmentCallback(*args)
    def addPointCallback(*args): return Coin_SWIG_Python.SoCallbackAction_addPointCallback(*args)
SoCallbackAction_swigregister = Coin_SWIG_Python.SoCallbackAction_swigregister
SoCallbackAction_swigregister(SoCallbackAction)
SoCallbackAction_getClassTypeId = Coin_SWIG_Python.SoCallbackAction_getClassTypeId
SoCallbackAction_addMethod = Coin_SWIG_Python.SoCallbackAction_addMethod
SoCallbackAction_enableElement = Coin_SWIG_Python.SoCallbackAction_enableElement
SoCallbackAction_initClass = Coin_SWIG_Python.SoCallbackAction_initClass

class SbVec2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return Coin_SWIG_Python.SbVec2f_dot(*args)
    def equals(*args): return Coin_SWIG_Python.SbVec2f_equals(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec2f_getValue(*args)
    def length(*args): return Coin_SWIG_Python.SbVec2f_length(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec2f_negate(*args)
    def normalize(*args): return Coin_SWIG_Python.SbVec2f_normalize(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec2f_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec2f___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec2f___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec2f___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec2f___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec2f___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec2f_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec2f___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec2f___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec2f___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec2f___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec2f___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec2f___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec2f___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec2f___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec2f___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2f
    __del__ = lambda self : None;
SbVec2f_swigregister = Coin_SWIG_Python.SbVec2f_swigregister
SbVec2f_swigregister(SbVec2f)

class SbViewportRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbViewportRegion(*args)
        try: self.this.append(this)
        except: self.this = this
    def setWindowSize(*args): return Coin_SWIG_Python.SbViewportRegion_setWindowSize(*args)
    def setViewport(*args): return Coin_SWIG_Python.SbViewportRegion_setViewport(*args)
    def setViewportPixels(*args): return Coin_SWIG_Python.SbViewportRegion_setViewportPixels(*args)
    def getWindowSize(*args): return Coin_SWIG_Python.SbViewportRegion_getWindowSize(*args)
    def getViewportOrigin(*args): return Coin_SWIG_Python.SbViewportRegion_getViewportOrigin(*args)
    def getViewportOriginPixels(*args): return Coin_SWIG_Python.SbViewportRegion_getViewportOriginPixels(*args)
    def getViewportSize(*args): return Coin_SWIG_Python.SbViewportRegion_getViewportSize(*args)
    def getViewportSizePixels(*args): return Coin_SWIG_Python.SbViewportRegion_getViewportSizePixels(*args)
    def getViewportAspectRatio(*args): return Coin_SWIG_Python.SbViewportRegion_getViewportAspectRatio(*args)
    def scaleWidth(*args): return Coin_SWIG_Python.SbViewportRegion_scaleWidth(*args)
    def scaleHeight(*args): return Coin_SWIG_Python.SbViewportRegion_scaleHeight(*args)
    def setPixelsPerInch(*args): return Coin_SWIG_Python.SbViewportRegion_setPixelsPerInch(*args)
    def getPixelsPerInch(*args): return Coin_SWIG_Python.SbViewportRegion_getPixelsPerInch(*args)
    def getPixelsPerPoint(*args): return Coin_SWIG_Python.SbViewportRegion_getPixelsPerPoint(*args)
    def output(*args): return Coin_SWIG_Python.SbViewportRegion_output(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbViewportRegion___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbViewportRegion___ne__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbViewportRegion
    __del__ = lambda self : None;
SbViewportRegion_swigregister = Coin_SWIG_Python.SbViewportRegion_swigregister
SbViewportRegion_swigregister(SbViewportRegion)

class SoGLRenderAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoGLRenderAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLRenderAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoGLRenderAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoGLRenderAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLRenderAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLRenderAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoGLRenderAction_initClass)
    SCREEN_DOOR = Coin_SWIG_Python.SoGLRenderAction_SCREEN_DOOR
    ADD = Coin_SWIG_Python.SoGLRenderAction_ADD
    DELAYED_ADD = Coin_SWIG_Python.SoGLRenderAction_DELAYED_ADD
    SORTED_OBJECT_ADD = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_ADD
    BLEND = Coin_SWIG_Python.SoGLRenderAction_BLEND
    DELAYED_BLEND = Coin_SWIG_Python.SoGLRenderAction_DELAYED_BLEND
    SORTED_OBJECT_BLEND = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_BLEND
    SORTED_OBJECT_SORTED_TRIANGLE_ADD = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_SORTED_TRIANGLE_ADD
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND = Coin_SWIG_Python.SoGLRenderAction_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
    NONE = Coin_SWIG_Python.SoGLRenderAction_NONE
    SORTED_LAYERS_BLEND = Coin_SWIG_Python.SoGLRenderAction_SORTED_LAYERS_BLEND
    CONTINUE = Coin_SWIG_Python.SoGLRenderAction_CONTINUE
    ABORT = Coin_SWIG_Python.SoGLRenderAction_ABORT
    PRUNE = Coin_SWIG_Python.SoGLRenderAction_PRUNE
    DELAY = Coin_SWIG_Python.SoGLRenderAction_DELAY
    def setViewportRegion(*args): return Coin_SWIG_Python.SoGLRenderAction_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoGLRenderAction_getViewportRegion(*args)
    def setUpdateArea(*args): return Coin_SWIG_Python.SoGLRenderAction_setUpdateArea(*args)
    def getUpdateArea(*args): return Coin_SWIG_Python.SoGLRenderAction_getUpdateArea(*args)
    def setTransparencyType(*args): return Coin_SWIG_Python.SoGLRenderAction_setTransparencyType(*args)
    def getTransparencyType(*args): return Coin_SWIG_Python.SoGLRenderAction_getTransparencyType(*args)
    def setSmoothing(*args): return Coin_SWIG_Python.SoGLRenderAction_setSmoothing(*args)
    def isSmoothing(*args): return Coin_SWIG_Python.SoGLRenderAction_isSmoothing(*args)
    def setNumPasses(*args): return Coin_SWIG_Python.SoGLRenderAction_setNumPasses(*args)
    def getNumPasses(*args): return Coin_SWIG_Python.SoGLRenderAction_getNumPasses(*args)
    def setPassUpdate(*args): return Coin_SWIG_Python.SoGLRenderAction_setPassUpdate(*args)
    def isPassUpdate(*args): return Coin_SWIG_Python.SoGLRenderAction_isPassUpdate(*args)
    def setCacheContext(*args): return Coin_SWIG_Python.SoGLRenderAction_setCacheContext(*args)
    def getCacheContext(*args): return Coin_SWIG_Python.SoGLRenderAction_getCacheContext(*args)
    def addDelayedPath(*args): return Coin_SWIG_Python.SoGLRenderAction_addDelayedPath(*args)
    def isRenderingDelayedPaths(*args): return Coin_SWIG_Python.SoGLRenderAction_isRenderingDelayedPaths(*args)
    def handleTransparency(*args): return Coin_SWIG_Python.SoGLRenderAction_handleTransparency(*args)
    def getCurPass(*args): return Coin_SWIG_Python.SoGLRenderAction_getCurPass(*args)
    def abortNow(*args): return Coin_SWIG_Python.SoGLRenderAction_abortNow(*args)
    def setRenderingIsRemote(*args): return Coin_SWIG_Python.SoGLRenderAction_setRenderingIsRemote(*args)
    def getRenderingIsRemote(*args): return Coin_SWIG_Python.SoGLRenderAction_getRenderingIsRemote(*args)
    def invalidateState(*args): return Coin_SWIG_Python.SoGLRenderAction_invalidateState(*args)
    def setSortedLayersNumPasses(*args): return Coin_SWIG_Python.SoGLRenderAction_setSortedLayersNumPasses(*args)
    def getSortedLayersNumPasses(*args): return Coin_SWIG_Python.SoGLRenderAction_getSortedLayersNumPasses(*args)
    def setPassCallback(*args): return Coin_SWIG_Python.SoGLRenderAction_setPassCallback(*args)
    def setAbortCallback(*args): return Coin_SWIG_Python.SoGLRenderAction_setAbortCallback(*args)
    def addPreRenderCallback(*args): return Coin_SWIG_Python.SoGLRenderAction_addPreRenderCallback(*args)
    def removePreRenderCallback(*args): return Coin_SWIG_Python.SoGLRenderAction_removePreRenderCallback(*args)
SoGLRenderAction_swigregister = Coin_SWIG_Python.SoGLRenderAction_swigregister
SoGLRenderAction_swigregister(SoGLRenderAction)
SoGLRenderAction_getClassTypeId = Coin_SWIG_Python.SoGLRenderAction_getClassTypeId
SoGLRenderAction_addMethod = Coin_SWIG_Python.SoGLRenderAction_addMethod
SoGLRenderAction_enableElement = Coin_SWIG_Python.SoGLRenderAction_enableElement
SoGLRenderAction_initClass = Coin_SWIG_Python.SoGLRenderAction_initClass

class SoBoxHighlightRenderAction(SoGLRenderAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBoxHighlightRenderAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoBoxHighlightRenderAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoBoxHighlightRenderAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBoxHighlightRenderAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBoxHighlightRenderAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoBoxHighlightRenderAction_initClass)
    def apply(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_apply(*args)
    def setVisible(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_setVisible(*args)
    def isVisible(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_isVisible(*args)
    def setColor(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_setColor(*args)
    def getColor(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_getColor(*args)
    def setLinePattern(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_setLinePattern(*args)
    def getLinePattern(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_getLinePattern(*args)
    def setLineWidth(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_setLineWidth(*args)
    def getLineWidth(*args): return Coin_SWIG_Python.SoBoxHighlightRenderAction_getLineWidth(*args)
SoBoxHighlightRenderAction_swigregister = Coin_SWIG_Python.SoBoxHighlightRenderAction_swigregister
SoBoxHighlightRenderAction_swigregister(SoBoxHighlightRenderAction)
SoBoxHighlightRenderAction_getClassTypeId = Coin_SWIG_Python.SoBoxHighlightRenderAction_getClassTypeId
SoBoxHighlightRenderAction_addMethod = Coin_SWIG_Python.SoBoxHighlightRenderAction_addMethod
SoBoxHighlightRenderAction_enableElement = Coin_SWIG_Python.SoBoxHighlightRenderAction_enableElement
SoBoxHighlightRenderAction_initClass = Coin_SWIG_Python.SoBoxHighlightRenderAction_initClass

class SoLineHighlightRenderAction(SoGLRenderAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLineHighlightRenderAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoLineHighlightRenderAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoLineHighlightRenderAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLineHighlightRenderAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLineHighlightRenderAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoLineHighlightRenderAction_initClass)
    def apply(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_apply(*args)
    def setVisible(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_setVisible(*args)
    def isVisible(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_isVisible(*args)
    def setColor(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_setColor(*args)
    def getColor(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_getColor(*args)
    def setLinePattern(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_setLinePattern(*args)
    def getLinePattern(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_getLinePattern(*args)
    def setLineWidth(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_setLineWidth(*args)
    def getLineWidth(*args): return Coin_SWIG_Python.SoLineHighlightRenderAction_getLineWidth(*args)
SoLineHighlightRenderAction_swigregister = Coin_SWIG_Python.SoLineHighlightRenderAction_swigregister
SoLineHighlightRenderAction_swigregister(SoLineHighlightRenderAction)
SoLineHighlightRenderAction_getClassTypeId = Coin_SWIG_Python.SoLineHighlightRenderAction_getClassTypeId
SoLineHighlightRenderAction_addMethod = Coin_SWIG_Python.SoLineHighlightRenderAction_addMethod
SoLineHighlightRenderAction_enableElement = Coin_SWIG_Python.SoLineHighlightRenderAction_enableElement
SoLineHighlightRenderAction_initClass = Coin_SWIG_Python.SoLineHighlightRenderAction_initClass

class SbBox3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3f
    __del__ = lambda self : None;
    def getMin(*args): return Coin_SWIG_Python.SbBox3f_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox3f_getMax(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbBox3f_getCenter(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox3f_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox3f_intersect(*args)
    def setBounds(*args): return Coin_SWIG_Python.SbBox3f_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox3f_getBounds(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox3f_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox3f_getSize(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox3f_makeEmpty(*args)
    def isEmpty(*args): return Coin_SWIG_Python.SbBox3f_isEmpty(*args)
    def hasVolume(*args): return Coin_SWIG_Python.SbBox3f_hasVolume(*args)
    def getSpan(*args): return Coin_SWIG_Python.SbBox3f_getSpan(*args)
    def transform(*args): return Coin_SWIG_Python.SbBox3f_transform(*args)
    def getVolume(*args): return Coin_SWIG_Python.SbBox3f_getVolume(*args)
    def outside(*args): return Coin_SWIG_Python.SbBox3f_outside(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbBox3f_getClosestPoint(*args)
    def output(*args): return Coin_SWIG_Python.SbBox3f_output(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbBox3f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbBox3f___ne__(*args)
SbBox3f_swigregister = Coin_SWIG_Python.SbBox3f_swigregister
SbBox3f_swigregister(SbBox3f)

class SbMatrix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbMatrix
    __del__ = lambda self : None;
    def makeIdentity(*args): return Coin_SWIG_Python.SbMatrix_makeIdentity(*args)
    def setRotate(*args): return Coin_SWIG_Python.SbMatrix_setRotate(*args)
    def inverse(*args): return Coin_SWIG_Python.SbMatrix_inverse(*args)
    def det3(*args): return Coin_SWIG_Python.SbMatrix_det3(*args)
    def det4(*args): return Coin_SWIG_Python.SbMatrix_det4(*args)
    def equals(*args): return Coin_SWIG_Python.SbMatrix_equals(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbMatrix___imul__(*args)
    def getValue(*args): return Coin_SWIG_Python.SbMatrix_getValue(*args)
    identity = staticmethod(Coin_SWIG_Python.SbMatrix_identity)
    def setScale(*args): return Coin_SWIG_Python.SbMatrix_setScale(*args)
    def setTranslate(*args): return Coin_SWIG_Python.SbMatrix_setTranslate(*args)
    def setTransform(*args): return Coin_SWIG_Python.SbMatrix_setTransform(*args)
    def factor(*args): return Coin_SWIG_Python.SbMatrix_factor(*args)
    def LUDecomposition(*args): return Coin_SWIG_Python.SbMatrix_LUDecomposition(*args)
    def LUBackSubstitution(*args): return Coin_SWIG_Python.SbMatrix_LUBackSubstitution(*args)
    def transpose(*args): return Coin_SWIG_Python.SbMatrix_transpose(*args)
    def multRight(*args): return Coin_SWIG_Python.SbMatrix_multRight(*args)
    def multLeft(*args): return Coin_SWIG_Python.SbMatrix_multLeft(*args)
    def multMatrixVec(*args): return Coin_SWIG_Python.SbMatrix_multMatrixVec(*args)
    def multDirMatrix(*args): return Coin_SWIG_Python.SbMatrix_multDirMatrix(*args)
    def multLineMatrix(*args): return Coin_SWIG_Python.SbMatrix_multLineMatrix(*args)
    def multVecMatrix(*args): return Coin_SWIG_Python.SbMatrix_multVecMatrix(*args)
    def output(*args): return Coin_SWIG_Python.SbMatrix_output(*args)
    def getTransform(*args): return Coin_SWIG_Python.SbMatrix_getTransform(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbMatrix___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbMatrix___rmul__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbMatrix___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbMatrix___ne__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbMatrix___getitem__(*args)
SbMatrix_swigregister = Coin_SWIG_Python.SbMatrix_swigregister
SbMatrix_swigregister(SbMatrix)
SbMatrix_identity = Coin_SWIG_Python.SbMatrix_identity

class SbXfBox3f(SbBox3f):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbXfBox3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbXfBox3f
    __del__ = lambda self : None;
    def setTransform(*args): return Coin_SWIG_Python.SbXfBox3f_setTransform(*args)
    def getTransform(*args): return Coin_SWIG_Python.SbXfBox3f_getTransform(*args)
    def getInverse(*args): return Coin_SWIG_Python.SbXfBox3f_getInverse(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbXfBox3f_getCenter(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbXfBox3f_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbXfBox3f_intersect(*args)
    def getSpan(*args): return Coin_SWIG_Python.SbXfBox3f_getSpan(*args)
    def project(*args): return Coin_SWIG_Python.SbXfBox3f_project(*args)
    def transform(*args): return Coin_SWIG_Python.SbXfBox3f_transform(*args)
    def getVolume(*args): return Coin_SWIG_Python.SbXfBox3f_getVolume(*args)
    def output(*args): return Coin_SWIG_Python.SbXfBox3f_output(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbXfBox3f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbXfBox3f___ne__(*args)
SbXfBox3f_swigregister = Coin_SWIG_Python.SbXfBox3f_swigregister
SbXfBox3f_swigregister(SbXfBox3f)

class SoGetBoundingBoxAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGetBoundingBoxAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoGetBoundingBoxAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoGetBoundingBoxAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGetBoundingBoxAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGetBoundingBoxAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoGetBoundingBoxAction_initClass)
    TRANSFORM = Coin_SWIG_Python.SoGetBoundingBoxAction_TRANSFORM
    BBOX = Coin_SWIG_Python.SoGetBoundingBoxAction_BBOX
    ALL = Coin_SWIG_Python.SoGetBoundingBoxAction_ALL
    def setViewportRegion(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getViewportRegion(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getBoundingBox(*args)
    def getXfBoundingBox(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getXfBoundingBox(*args)
    def getCenter(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getCenter(*args)
    def setInCameraSpace(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_setInCameraSpace(*args)
    def isInCameraSpace(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_isInCameraSpace(*args)
    def setResetPath(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_setResetPath(*args)
    def getResetPath(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getResetPath(*args)
    def isResetPath(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_isResetPath(*args)
    def isResetBefore(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_isResetBefore(*args)
    def getWhatReset(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_getWhatReset(*args)
    def checkResetBefore(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_checkResetBefore(*args)
    def checkResetAfter(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_checkResetAfter(*args)
    def extendBy(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_extendBy(*args)
    def setCenter(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_setCenter(*args)
    def isCenterSet(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_isCenterSet(*args)
    def resetCenter(*args): return Coin_SWIG_Python.SoGetBoundingBoxAction_resetCenter(*args)
SoGetBoundingBoxAction_swigregister = Coin_SWIG_Python.SoGetBoundingBoxAction_swigregister
SoGetBoundingBoxAction_swigregister(SoGetBoundingBoxAction)
SoGetBoundingBoxAction_getClassTypeId = Coin_SWIG_Python.SoGetBoundingBoxAction_getClassTypeId
SoGetBoundingBoxAction_addMethod = Coin_SWIG_Python.SoGetBoundingBoxAction_addMethod
SoGetBoundingBoxAction_enableElement = Coin_SWIG_Python.SoGetBoundingBoxAction_enableElement
SoGetBoundingBoxAction_initClass = Coin_SWIG_Python.SoGetBoundingBoxAction_initClass

class SbVec4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return Coin_SWIG_Python.SbVec4f_dot(*args)
    def equals(*args): return Coin_SWIG_Python.SbVec4f_equals(*args)
    def getReal(*args): return Coin_SWIG_Python.SbVec4f_getReal(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4f_getValue(*args)
    def length(*args): return Coin_SWIG_Python.SbVec4f_length(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4f_negate(*args)
    def normalize(*args): return Coin_SWIG_Python.SbVec4f_normalize(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec4f_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4f___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4f___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4f___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4f___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4f___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec4f_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec4f___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec4f___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec4f___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec4f___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec4f___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec4f___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec4f___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec4f___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec4f___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4f
    __del__ = lambda self : None;
SbVec4f_swigregister = Coin_SWIG_Python.SbVec4f_swigregister
SbVec4f_swigregister(SbVec4f)

class SbRotation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def getValue(*args): return Coin_SWIG_Python.SbRotation_getValue(*args)
    def getAxisAngle(*args): return Coin_SWIG_Python.SbRotation_getAxisAngle(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SbRotation_getMatrix(*args)
    def invert(*args): return Coin_SWIG_Python.SbRotation_invert(*args)
    def inverse(*args): return Coin_SWIG_Python.SbRotation_inverse(*args)
    def setValue(*args): return Coin_SWIG_Python.SbRotation_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbRotation___imul__(*args)
    def equals(*args): return Coin_SWIG_Python.SbRotation_equals(*args)
    def multVec(*args): return Coin_SWIG_Python.SbRotation_multVec(*args)
    def scaleAngle(*args): return Coin_SWIG_Python.SbRotation_scaleAngle(*args)
    slerp = staticmethod(Coin_SWIG_Python.SbRotation_slerp)
    identity = staticmethod(Coin_SWIG_Python.SbRotation_identity)
    def output(*args): return Coin_SWIG_Python.SbRotation_output(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbRotation___mul__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbRotation___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbRotation___nq__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbRotation
    __del__ = lambda self : None;
SbRotation_swigregister = Coin_SWIG_Python.SbRotation_swigregister
SbRotation_swigregister(SbRotation)
SbRotation_slerp = Coin_SWIG_Python.SbRotation_slerp
SbRotation_identity = Coin_SWIG_Python.SbRotation_identity

class SoGetMatrixAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoGetMatrixAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGetMatrixAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoGetMatrixAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoGetMatrixAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGetMatrixAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGetMatrixAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoGetMatrixAction_initClass)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoGetMatrixAction_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoGetMatrixAction_getViewportRegion(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoGetMatrixAction_getMatrix(*args)
    def getInverse(*args): return Coin_SWIG_Python.SoGetMatrixAction_getInverse(*args)
    def getTextureMatrix(*args): return Coin_SWIG_Python.SoGetMatrixAction_getTextureMatrix(*args)
    def getTextureInverse(*args): return Coin_SWIG_Python.SoGetMatrixAction_getTextureInverse(*args)
SoGetMatrixAction_swigregister = Coin_SWIG_Python.SoGetMatrixAction_swigregister
SoGetMatrixAction_swigregister(SoGetMatrixAction)
SoGetMatrixAction_getClassTypeId = Coin_SWIG_Python.SoGetMatrixAction_getClassTypeId
SoGetMatrixAction_addMethod = Coin_SWIG_Python.SoGetMatrixAction_addMethod
SoGetMatrixAction_enableElement = Coin_SWIG_Python.SoGetMatrixAction_enableElement
SoGetMatrixAction_initClass = Coin_SWIG_Python.SoGetMatrixAction_initClass

class SoGetPrimitiveCountAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGetPrimitiveCountAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoGetPrimitiveCountAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoGetPrimitiveCountAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGetPrimitiveCountAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGetPrimitiveCountAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoGetPrimitiveCountAction_initClass)
    def getTriangleCount(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getTriangleCount(*args)
    def getLineCount(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getLineCount(*args)
    def getPointCount(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getPointCount(*args)
    def getTextCount(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getTextCount(*args)
    def getImageCount(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getImageCount(*args)
    def containsNoPrimitives(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_containsNoPrimitives(*args)
    def containsNonTriangleShapes(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_containsNonTriangleShapes(*args)
    def is3DTextCountedAsTriangles(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_is3DTextCountedAsTriangles(*args)
    def setCount3DTextAsTriangles(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_setCount3DTextAsTriangles(*args)
    def canApproximateCount(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_canApproximateCount(*args)
    def setCanApproximate(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_setCanApproximate(*args)
    def setDecimationValue(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_setDecimationValue(*args)
    def getDecimationType(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getDecimationType(*args)
    def getDecimationPercentage(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_getDecimationPercentage(*args)
    def addNumTriangles(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumTriangles(*args)
    def addNumLines(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumLines(*args)
    def addNumPoints(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumPoints(*args)
    def addNumText(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumText(*args)
    def addNumImage(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_addNumImage(*args)
    def incNumTriangles(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumTriangles(*args)
    def incNumLines(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumLines(*args)
    def incNumPoints(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumPoints(*args)
    def incNumText(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumText(*args)
    def incNumImage(*args): return Coin_SWIG_Python.SoGetPrimitiveCountAction_incNumImage(*args)
SoGetPrimitiveCountAction_swigregister = Coin_SWIG_Python.SoGetPrimitiveCountAction_swigregister
SoGetPrimitiveCountAction_swigregister(SoGetPrimitiveCountAction)
SoGetPrimitiveCountAction_getClassTypeId = Coin_SWIG_Python.SoGetPrimitiveCountAction_getClassTypeId
SoGetPrimitiveCountAction_addMethod = Coin_SWIG_Python.SoGetPrimitiveCountAction_addMethod
SoGetPrimitiveCountAction_enableElement = Coin_SWIG_Python.SoGetPrimitiveCountAction_enableElement
SoGetPrimitiveCountAction_initClass = Coin_SWIG_Python.SoGetPrimitiveCountAction_initClass

class SoHandleEventAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoHandleEventAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoHandleEventAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoHandleEventAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoHandleEventAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoHandleEventAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHandleEventAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoHandleEventAction_initClass)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoHandleEventAction_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoHandleEventAction_getViewportRegion(*args)
    def setEvent(*args): return Coin_SWIG_Python.SoHandleEventAction_setEvent(*args)
    def getEvent(*args): return Coin_SWIG_Python.SoHandleEventAction_getEvent(*args)
    def setHandled(*args): return Coin_SWIG_Python.SoHandleEventAction_setHandled(*args)
    def isHandled(*args): return Coin_SWIG_Python.SoHandleEventAction_isHandled(*args)
    def setGrabber(*args): return Coin_SWIG_Python.SoHandleEventAction_setGrabber(*args)
    def releaseGrabber(*args): return Coin_SWIG_Python.SoHandleEventAction_releaseGrabber(*args)
    def getGrabber(*args): return Coin_SWIG_Python.SoHandleEventAction_getGrabber(*args)
    def setPickRoot(*args): return Coin_SWIG_Python.SoHandleEventAction_setPickRoot(*args)
    def getPickRoot(*args): return Coin_SWIG_Python.SoHandleEventAction_getPickRoot(*args)
    def setPickRadius(*args): return Coin_SWIG_Python.SoHandleEventAction_setPickRadius(*args)
    def getPickedPoint(*args): return Coin_SWIG_Python.SoHandleEventAction_getPickedPoint(*args)
    def getPickedPointList(*args): return Coin_SWIG_Python.SoHandleEventAction_getPickedPointList(*args)
SoHandleEventAction_swigregister = Coin_SWIG_Python.SoHandleEventAction_swigregister
SoHandleEventAction_swigregister(SoHandleEventAction)
SoHandleEventAction_getClassTypeId = Coin_SWIG_Python.SoHandleEventAction_getClassTypeId
SoHandleEventAction_addMethod = Coin_SWIG_Python.SoHandleEventAction_addMethod
SoHandleEventAction_enableElement = Coin_SWIG_Python.SoHandleEventAction_enableElement
SoHandleEventAction_initClass = Coin_SWIG_Python.SoHandleEventAction_initClass

class SoPickAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoPickAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPickAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoPickAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoPickAction_enableElement)
    initClass = staticmethod(Coin_SWIG_Python.SoPickAction_initClass)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoPickAction_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoPickAction_getViewportRegion(*args)
    def enableCulling(*args): return Coin_SWIG_Python.SoPickAction_enableCulling(*args)
    def isCullingEnabled(*args): return Coin_SWIG_Python.SoPickAction_isCullingEnabled(*args)
SoPickAction_swigregister = Coin_SWIG_Python.SoPickAction_swigregister
SoPickAction_swigregister(SoPickAction)
SoPickAction_getClassTypeId = Coin_SWIG_Python.SoPickAction_getClassTypeId
SoPickAction_addMethod = Coin_SWIG_Python.SoPickAction_addMethod
SoPickAction_enableElement = Coin_SWIG_Python.SoPickAction_enableElement
SoPickAction_initClass = Coin_SWIG_Python.SoPickAction_initClass

class SoRayPickAction(SoPickAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoRayPickAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRayPickAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoRayPickAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoRayPickAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRayPickAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRayPickAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoRayPickAction_initClass)
    def setPoint(*args): return Coin_SWIG_Python.SoRayPickAction_setPoint(*args)
    def setNormalizedPoint(*args): return Coin_SWIG_Python.SoRayPickAction_setNormalizedPoint(*args)
    def setRadius(*args): return Coin_SWIG_Python.SoRayPickAction_setRadius(*args)
    def setRay(*args): return Coin_SWIG_Python.SoRayPickAction_setRay(*args)
    def setPickAll(*args): return Coin_SWIG_Python.SoRayPickAction_setPickAll(*args)
    def isPickAll(*args): return Coin_SWIG_Python.SoRayPickAction_isPickAll(*args)
    def getPickedPointList(*args): return Coin_SWIG_Python.SoRayPickAction_getPickedPointList(*args)
    def getPickedPoint(*args): return Coin_SWIG_Python.SoRayPickAction_getPickedPoint(*args)
    def computeWorldSpaceRay(*args): return Coin_SWIG_Python.SoRayPickAction_computeWorldSpaceRay(*args)
    def hasWorldSpaceRay(*args): return Coin_SWIG_Python.SoRayPickAction_hasWorldSpaceRay(*args)
    def setObjectSpace(*args): return Coin_SWIG_Python.SoRayPickAction_setObjectSpace(*args)
    def intersect(*args): return Coin_SWIG_Python.SoRayPickAction_intersect(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoRayPickAction_getViewVolume(*args)
    def getLine(*args): return Coin_SWIG_Python.SoRayPickAction_getLine(*args)
    def isBetweenPlanes(*args): return Coin_SWIG_Python.SoRayPickAction_isBetweenPlanes(*args)
    def addIntersection(*args): return Coin_SWIG_Python.SoRayPickAction_addIntersection(*args)
    def reset(*args): return Coin_SWIG_Python.SoRayPickAction_reset(*args)
SoRayPickAction_swigregister = Coin_SWIG_Python.SoRayPickAction_swigregister
SoRayPickAction_swigregister(SoRayPickAction)
SoRayPickAction_getClassTypeId = Coin_SWIG_Python.SoRayPickAction_getClassTypeId
SoRayPickAction_addMethod = Coin_SWIG_Python.SoRayPickAction_addMethod
SoRayPickAction_enableElement = Coin_SWIG_Python.SoRayPickAction_enableElement
SoRayPickAction_initClass = Coin_SWIG_Python.SoRayPickAction_initClass

class SoSearchAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoSearchAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSearchAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoSearchAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoSearchAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSearchAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSearchAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoSearchAction_initClass)
    NODE = Coin_SWIG_Python.SoSearchAction_NODE
    TYPE = Coin_SWIG_Python.SoSearchAction_TYPE
    NAME = Coin_SWIG_Python.SoSearchAction_NAME
    FIRST = Coin_SWIG_Python.SoSearchAction_FIRST
    LAST = Coin_SWIG_Python.SoSearchAction_LAST
    ALL = Coin_SWIG_Python.SoSearchAction_ALL
    def setNode(*args): return Coin_SWIG_Python.SoSearchAction_setNode(*args)
    def getNode(*args): return Coin_SWIG_Python.SoSearchAction_getNode(*args)
    def setType(*args): return Coin_SWIG_Python.SoSearchAction_setType(*args)
    def getType(*args): return Coin_SWIG_Python.SoSearchAction_getType(*args)
    def setName(*args): return Coin_SWIG_Python.SoSearchAction_setName(*args)
    def getName(*args): return Coin_SWIG_Python.SoSearchAction_getName(*args)
    def setFind(*args): return Coin_SWIG_Python.SoSearchAction_setFind(*args)
    def getFind(*args): return Coin_SWIG_Python.SoSearchAction_getFind(*args)
    def setInterest(*args): return Coin_SWIG_Python.SoSearchAction_setInterest(*args)
    def getInterest(*args): return Coin_SWIG_Python.SoSearchAction_getInterest(*args)
    def setSearchingAll(*args): return Coin_SWIG_Python.SoSearchAction_setSearchingAll(*args)
    def isSearchingAll(*args): return Coin_SWIG_Python.SoSearchAction_isSearchingAll(*args)
    def getPath(*args): return Coin_SWIG_Python.SoSearchAction_getPath(*args)
    def getPaths(*args): return Coin_SWIG_Python.SoSearchAction_getPaths(*args)
    def reset(*args): return Coin_SWIG_Python.SoSearchAction_reset(*args)
    def setFound(*args): return Coin_SWIG_Python.SoSearchAction_setFound(*args)
    def isFound(*args): return Coin_SWIG_Python.SoSearchAction_isFound(*args)
    def addPath(*args): return Coin_SWIG_Python.SoSearchAction_addPath(*args)
    duringSearchAll = _swig_property(Coin_SWIG_Python.SoSearchAction_duringSearchAll_get, Coin_SWIG_Python.SoSearchAction_duringSearchAll_set)
SoSearchAction_swigregister = Coin_SWIG_Python.SoSearchAction_swigregister
SoSearchAction_swigregister(SoSearchAction)
SoSearchAction_getClassTypeId = Coin_SWIG_Python.SoSearchAction_getClassTypeId
SoSearchAction_addMethod = Coin_SWIG_Python.SoSearchAction_addMethod
SoSearchAction_enableElement = Coin_SWIG_Python.SoSearchAction_enableElement
SoSearchAction_initClass = Coin_SWIG_Python.SoSearchAction_initClass
cvar = Coin_SWIG_Python.cvar

class SoWriteAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoWriteAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoWriteAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoWriteAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoWriteAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoWriteAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWriteAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoWriteAction_initClass)
    def getOutput(*args): return Coin_SWIG_Python.SoWriteAction_getOutput(*args)
    def continueToApply(*args): return Coin_SWIG_Python.SoWriteAction_continueToApply(*args)
SoWriteAction_swigregister = Coin_SWIG_Python.SoWriteAction_swigregister
SoWriteAction_swigregister(SoWriteAction)
SoWriteAction_getClassTypeId = Coin_SWIG_Python.SoWriteAction_getClassTypeId
SoWriteAction_addMethod = Coin_SWIG_Python.SoWriteAction_addMethod
SoWriteAction_enableElement = Coin_SWIG_Python.SoWriteAction_enableElement
SoWriteAction_initClass = Coin_SWIG_Python.SoWriteAction_initClass

class SoAudioRenderAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoAudioRenderAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAudioRenderAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoAudioRenderAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoAudioRenderAction_enableElement)
    initClass = staticmethod(Coin_SWIG_Python.SoAudioRenderAction_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoAudioRenderAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAudioRenderAction
    __del__ = lambda self : None;
    callDoAction = staticmethod(Coin_SWIG_Python.SoAudioRenderAction_callDoAction)
    callAudioRender = staticmethod(Coin_SWIG_Python.SoAudioRenderAction_callAudioRender)
SoAudioRenderAction_swigregister = Coin_SWIG_Python.SoAudioRenderAction_swigregister
SoAudioRenderAction_swigregister(SoAudioRenderAction)
SoAudioRenderAction_getClassTypeId = Coin_SWIG_Python.SoAudioRenderAction_getClassTypeId
SoAudioRenderAction_addMethod = Coin_SWIG_Python.SoAudioRenderAction_addMethod
SoAudioRenderAction_enableElement = Coin_SWIG_Python.SoAudioRenderAction_enableElement
SoAudioRenderAction_initClass = Coin_SWIG_Python.SoAudioRenderAction_initClass
SoAudioRenderAction_callDoAction = Coin_SWIG_Python.SoAudioRenderAction_callDoAction
SoAudioRenderAction_callAudioRender = Coin_SWIG_Python.SoAudioRenderAction_callAudioRender

class SoIntersectingPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    path = _swig_property(Coin_SWIG_Python.SoIntersectingPrimitive_path_get, Coin_SWIG_Python.SoIntersectingPrimitive_path_set)
    SEGMENT = Coin_SWIG_Python.SoIntersectingPrimitive_SEGMENT
    LINE_SEGMENT = Coin_SWIG_Python.SoIntersectingPrimitive_LINE_SEGMENT
    TRIANGLE = Coin_SWIG_Python.SoIntersectingPrimitive_TRIANGLE
    type = _swig_property(Coin_SWIG_Python.SoIntersectingPrimitive_type_get, Coin_SWIG_Python.SoIntersectingPrimitive_type_set)
    vertex = _swig_property(Coin_SWIG_Python.SoIntersectingPrimitive_vertex_get, Coin_SWIG_Python.SoIntersectingPrimitive_vertex_set)
    xf_vertex = _swig_property(Coin_SWIG_Python.SoIntersectingPrimitive_xf_vertex_get, Coin_SWIG_Python.SoIntersectingPrimitive_xf_vertex_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIntersectingPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIntersectingPrimitive
    __del__ = lambda self : None;
SoIntersectingPrimitive_swigregister = Coin_SWIG_Python.SoIntersectingPrimitive_swigregister
SoIntersectingPrimitive_swigregister(SoIntersectingPrimitive)

class SoIntersectionDetectionAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIntersectionDetectionAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoIntersectionDetectionAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoIntersectionDetectionAction_enableElement)
    initClass = staticmethod(Coin_SWIG_Python.SoIntersectionDetectionAction_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIntersectionDetectionAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIntersectionDetectionAction
    __del__ = lambda self : None;
    NEXT_PRIMITIVE = Coin_SWIG_Python.SoIntersectionDetectionAction_NEXT_PRIMITIVE
    NEXT_SHAPE = Coin_SWIG_Python.SoIntersectionDetectionAction_NEXT_SHAPE
    ABORT = Coin_SWIG_Python.SoIntersectionDetectionAction_ABORT
    def setIntersectionDetectionEpsilon(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_setIntersectionDetectionEpsilon(*args)
    def getIntersectionDetectionEpsilon(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_getIntersectionDetectionEpsilon(*args)
    setIntersectionEpsilon = staticmethod(Coin_SWIG_Python.SoIntersectionDetectionAction_setIntersectionEpsilon)
    getIntersectionEpsilon = staticmethod(Coin_SWIG_Python.SoIntersectionDetectionAction_getIntersectionEpsilon)
    def setTypeEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_setTypeEnabled(*args)
    def isTypeEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_isTypeEnabled(*args)
    def setManipsEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_setManipsEnabled(*args)
    def isManipsEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_isManipsEnabled(*args)
    def setDraggersEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_setDraggersEnabled(*args)
    def isDraggersEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_isDraggersEnabled(*args)
    def setShapeInternalsEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_setShapeInternalsEnabled(*args)
    def isShapeInternalsEnabled(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_isShapeInternalsEnabled(*args)
    def apply(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_apply(*args)
    def addVisitationCallback(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_addVisitationCallback(*args)
    def removeVisitationCallback(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_removeVisitationCallback(*args)
    def setFilterCallback(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_setFilterCallback(*args)
    def addIntersectionCallback(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_addIntersectionCallback(*args)
    def removeIntersectionCallback(*args): return Coin_SWIG_Python.SoIntersectionDetectionAction_removeIntersectionCallback(*args)
SoIntersectionDetectionAction_swigregister = Coin_SWIG_Python.SoIntersectionDetectionAction_swigregister
SoIntersectionDetectionAction_swigregister(SoIntersectionDetectionAction)
SoIntersectionDetectionAction_getClassTypeId = Coin_SWIG_Python.SoIntersectionDetectionAction_getClassTypeId
SoIntersectionDetectionAction_addMethod = Coin_SWIG_Python.SoIntersectionDetectionAction_addMethod
SoIntersectionDetectionAction_enableElement = Coin_SWIG_Python.SoIntersectionDetectionAction_enableElement
SoIntersectionDetectionAction_initClass = Coin_SWIG_Python.SoIntersectionDetectionAction_initClass
SoIntersectionDetectionAction_setIntersectionEpsilon = Coin_SWIG_Python.SoIntersectionDetectionAction_setIntersectionEpsilon
SoIntersectionDetectionAction_getIntersectionEpsilon = Coin_SWIG_Python.SoIntersectionDetectionAction_getIntersectionEpsilon

class SoSimplifyAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoSimplifyAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSimplifyAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoSimplifyAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoSimplifyAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSimplifyAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSimplifyAction
    __del__ = lambda self : None;
    def apply(*args): return Coin_SWIG_Python.SoSimplifyAction_apply(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSimplifyAction_initClass)
SoSimplifyAction_swigregister = Coin_SWIG_Python.SoSimplifyAction_swigregister
SoSimplifyAction_swigregister(SoSimplifyAction)
SoSimplifyAction_getClassTypeId = Coin_SWIG_Python.SoSimplifyAction_getClassTypeId
SoSimplifyAction_addMethod = Coin_SWIG_Python.SoSimplifyAction_addMethod
SoSimplifyAction_enableElement = Coin_SWIG_Python.SoSimplifyAction_enableElement
SoSimplifyAction_initClass = Coin_SWIG_Python.SoSimplifyAction_initClass

class SoReorganizeAction(SoSimplifyAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoReorganizeAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoReorganizeAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoReorganizeAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoReorganizeAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoReorganizeAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoReorganizeAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoReorganizeAction_initClass)
    def getSimplifiedSceneGraph(*args): return Coin_SWIG_Python.SoReorganizeAction_getSimplifiedSceneGraph(*args)
    def generateNormals(*args): return Coin_SWIG_Python.SoReorganizeAction_generateNormals(*args)
    def areNormalGenerated(*args): return Coin_SWIG_Python.SoReorganizeAction_areNormalGenerated(*args)
    def generateTriangleStrips(*args): return Coin_SWIG_Python.SoReorganizeAction_generateTriangleStrips(*args)
    def areTriangleStripGenerated(*args): return Coin_SWIG_Python.SoReorganizeAction_areTriangleStripGenerated(*args)
    def generateTexCoords(*args): return Coin_SWIG_Python.SoReorganizeAction_generateTexCoords(*args)
    def areTexCoordsGenerated(*args): return Coin_SWIG_Python.SoReorganizeAction_areTexCoordsGenerated(*args)
    def generateVPNodes(*args): return Coin_SWIG_Python.SoReorganizeAction_generateVPNodes(*args)
    def areVPNodesGenerated(*args): return Coin_SWIG_Python.SoReorganizeAction_areVPNodesGenerated(*args)
    def matchIndexArrays(*args): return Coin_SWIG_Python.SoReorganizeAction_matchIndexArrays(*args)
    def areIndexArraysMatched(*args): return Coin_SWIG_Python.SoReorganizeAction_areIndexArraysMatched(*args)
    def getSimplifier(*args): return Coin_SWIG_Python.SoReorganizeAction_getSimplifier(*args)
    def apply(*args): return Coin_SWIG_Python.SoReorganizeAction_apply(*args)
    startReport = staticmethod(Coin_SWIG_Python.SoReorganizeAction_startReport)
    finishReport = staticmethod(Coin_SWIG_Python.SoReorganizeAction_finishReport)
SoReorganizeAction_swigregister = Coin_SWIG_Python.SoReorganizeAction_swigregister
SoReorganizeAction_swigregister(SoReorganizeAction)
SoReorganizeAction_getClassTypeId = Coin_SWIG_Python.SoReorganizeAction_getClassTypeId
SoReorganizeAction_addMethod = Coin_SWIG_Python.SoReorganizeAction_addMethod
SoReorganizeAction_enableElement = Coin_SWIG_Python.SoReorganizeAction_enableElement
SoReorganizeAction_initClass = Coin_SWIG_Python.SoReorganizeAction_initClass
SoReorganizeAction_startReport = Coin_SWIG_Python.SoReorganizeAction_startReport
SoReorganizeAction_finishReport = Coin_SWIG_Python.SoReorganizeAction_finishReport

class SoToVRMLAction(SoAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoToVRMLAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoToVRMLAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoToVRMLAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoToVRMLAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoToVRMLAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoToVRMLAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoToVRMLAction_initClass)
    def apply(*args): return Coin_SWIG_Python.SoToVRMLAction_apply(*args)
    def getVRMLSceneGraph(*args): return Coin_SWIG_Python.SoToVRMLAction_getVRMLSceneGraph(*args)
    def expandSoFile(*args): return Coin_SWIG_Python.SoToVRMLAction_expandSoFile(*args)
    def areSoFileExpanded(*args): return Coin_SWIG_Python.SoToVRMLAction_areSoFileExpanded(*args)
    def setUrlName(*args): return Coin_SWIG_Python.SoToVRMLAction_setUrlName(*args)
    def getUrlName(*args): return Coin_SWIG_Python.SoToVRMLAction_getUrlName(*args)
    def writeTexCoords(*args): return Coin_SWIG_Python.SoToVRMLAction_writeTexCoords(*args)
    def areTexCoordWritten(*args): return Coin_SWIG_Python.SoToVRMLAction_areTexCoordWritten(*args)
    def expandTexture2Node(*args): return Coin_SWIG_Python.SoToVRMLAction_expandTexture2Node(*args)
    def areTexture2NodeExpanded(*args): return Coin_SWIG_Python.SoToVRMLAction_areTexture2NodeExpanded(*args)
    def keepUnknownNodes(*args): return Coin_SWIG_Python.SoToVRMLAction_keepUnknownNodes(*args)
    def areUnknownNodeKept(*args): return Coin_SWIG_Python.SoToVRMLAction_areUnknownNodeKept(*args)
    def convertInlineNodes(*args): return Coin_SWIG_Python.SoToVRMLAction_convertInlineNodes(*args)
    def doConvertInlineNodes(*args): return Coin_SWIG_Python.SoToVRMLAction_doConvertInlineNodes(*args)
    def conditionalConversion(*args): return Coin_SWIG_Python.SoToVRMLAction_conditionalConversion(*args)
    def doConditionalConversion(*args): return Coin_SWIG_Python.SoToVRMLAction_doConditionalConversion(*args)
    def setVerbosity(*args): return Coin_SWIG_Python.SoToVRMLAction_setVerbosity(*args)
    def isVerbose(*args): return Coin_SWIG_Python.SoToVRMLAction_isVerbose(*args)
SoToVRMLAction_swigregister = Coin_SWIG_Python.SoToVRMLAction_swigregister
SoToVRMLAction_swigregister(SoToVRMLAction)
SoToVRMLAction_getClassTypeId = Coin_SWIG_Python.SoToVRMLAction_getClassTypeId
SoToVRMLAction_addMethod = Coin_SWIG_Python.SoToVRMLAction_addMethod
SoToVRMLAction_enableElement = Coin_SWIG_Python.SoToVRMLAction_enableElement
SoToVRMLAction_initClass = Coin_SWIG_Python.SoToVRMLAction_initClass

class SoToVRML2Action(SoToVRMLAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoToVRML2Action_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoToVRML2Action_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoToVRML2Action_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoToVRML2Action_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoToVRML2Action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoToVRML2Action
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoToVRML2Action_initClass)
    def apply(*args): return Coin_SWIG_Python.SoToVRML2Action_apply(*args)
    def getVRML2SceneGraph(*args): return Coin_SWIG_Python.SoToVRML2Action_getVRML2SceneGraph(*args)
    def reuseAppearanceNodes(*args): return Coin_SWIG_Python.SoToVRML2Action_reuseAppearanceNodes(*args)
    def doReuseAppearanceNodes(*args): return Coin_SWIG_Python.SoToVRML2Action_doReuseAppearanceNodes(*args)
    def reusePropertyNodes(*args): return Coin_SWIG_Python.SoToVRML2Action_reusePropertyNodes(*args)
    def doReusePropertyNodes(*args): return Coin_SWIG_Python.SoToVRML2Action_doReusePropertyNodes(*args)
    def reuseGeometryNodes(*args): return Coin_SWIG_Python.SoToVRML2Action_reuseGeometryNodes(*args)
    def doReuseGeometryNodes(*args): return Coin_SWIG_Python.SoToVRML2Action_doReuseGeometryNodes(*args)
SoToVRML2Action_swigregister = Coin_SWIG_Python.SoToVRML2Action_swigregister
SoToVRML2Action_swigregister(SoToVRML2Action)
SoToVRML2Action_getClassTypeId = Coin_SWIG_Python.SoToVRML2Action_getClassTypeId
SoToVRML2Action_addMethod = Coin_SWIG_Python.SoToVRML2Action_addMethod
SoToVRML2Action_enableElement = Coin_SWIG_Python.SoToVRML2Action_enableElement
SoToVRML2Action_initClass = Coin_SWIG_Python.SoToVRML2Action_initClass

class SoHardCopy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    init = staticmethod(Coin_SWIG_Python.SoHardCopy_init)
    getProductName = staticmethod(Coin_SWIG_Python.SoHardCopy_getProductName)
    getVersion = staticmethod(Coin_SWIG_Python.SoHardCopy_getVersion)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoHardCopy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHardCopy
    __del__ = lambda self : None;
SoHardCopy_swigregister = Coin_SWIG_Python.SoHardCopy_swigregister
SoHardCopy_swigregister(SoHardCopy)
SoHardCopy_init = Coin_SWIG_Python.SoHardCopy_init
SoHardCopy_getProductName = Coin_SWIG_Python.SoHardCopy_getProductName
SoHardCopy_getVersion = Coin_SWIG_Python.SoHardCopy_getVersion

class SoVectorOutput(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVectorOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVectorOutput
    __del__ = lambda self : None;
    def openFile(*args): return Coin_SWIG_Python.SoVectorOutput_openFile(*args)
    def closeFile(*args): return Coin_SWIG_Python.SoVectorOutput_closeFile(*args)
    def getFilePointer(*args): return Coin_SWIG_Python.SoVectorOutput_getFilePointer(*args)
SoVectorOutput_swigregister = Coin_SWIG_Python.SoVectorOutput_swigregister
SoVectorOutput_swigregister(SoVectorOutput)

class SoPSVectorOutput(SoVectorOutput):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPSVectorOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPSVectorOutput
    __del__ = lambda self : None;
    def setColored(*args): return Coin_SWIG_Python.SoPSVectorOutput_setColored(*args)
    def getColored(*args): return Coin_SWIG_Python.SoPSVectorOutput_getColored(*args)
SoPSVectorOutput_swigregister = Coin_SWIG_Python.SoPSVectorOutput_swigregister
SoPSVectorOutput_swigregister(SoPSVectorOutput)

class SoVectorizeAction(SoCallbackAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoVectorizeAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVectorizeAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoVectorizeAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoVectorizeAction_enableElement)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVectorizeAction
    __del__ = lambda self : None;
    def getOutput(*args): return Coin_SWIG_Python.SoVectorizeAction_getOutput(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVectorizeAction_initClass)
    INCH = Coin_SWIG_Python.SoVectorizeAction_INCH
    MM = Coin_SWIG_Python.SoVectorizeAction_MM
    METER = Coin_SWIG_Python.SoVectorizeAction_METER
    PORTRAIT = Coin_SWIG_Python.SoVectorizeAction_PORTRAIT
    LANDSCAPE = Coin_SWIG_Python.SoVectorizeAction_LANDSCAPE
    A0 = Coin_SWIG_Python.SoVectorizeAction_A0
    A1 = Coin_SWIG_Python.SoVectorizeAction_A1
    A2 = Coin_SWIG_Python.SoVectorizeAction_A2
    A3 = Coin_SWIG_Python.SoVectorizeAction_A3
    A4 = Coin_SWIG_Python.SoVectorizeAction_A4
    A5 = Coin_SWIG_Python.SoVectorizeAction_A5
    A6 = Coin_SWIG_Python.SoVectorizeAction_A6
    A7 = Coin_SWIG_Python.SoVectorizeAction_A7
    A8 = Coin_SWIG_Python.SoVectorizeAction_A8
    A9 = Coin_SWIG_Python.SoVectorizeAction_A9
    A10 = Coin_SWIG_Python.SoVectorizeAction_A10
    def apply(*args): return Coin_SWIG_Python.SoVectorizeAction_apply(*args)
    def beginStandardPage(*args): return Coin_SWIG_Python.SoVectorizeAction_beginStandardPage(*args)
    def beginPage(*args): return Coin_SWIG_Python.SoVectorizeAction_beginPage(*args)
    def endPage(*args): return Coin_SWIG_Python.SoVectorizeAction_endPage(*args)
    def calibrate(*args): return Coin_SWIG_Python.SoVectorizeAction_calibrate(*args)
    def beginViewport(*args): return Coin_SWIG_Python.SoVectorizeAction_beginViewport(*args)
    def endViewport(*args): return Coin_SWIG_Python.SoVectorizeAction_endViewport(*args)
    def setOrientation(*args): return Coin_SWIG_Python.SoVectorizeAction_setOrientation(*args)
    def getOrientation(*args): return Coin_SWIG_Python.SoVectorizeAction_getOrientation(*args)
    def setBackgroundColor(*args): return Coin_SWIG_Python.SoVectorizeAction_setBackgroundColor(*args)
    def getBackgroundColor(*args): return Coin_SWIG_Python.SoVectorizeAction_getBackgroundColor(*args)
    def setNominalWidth(*args): return Coin_SWIG_Python.SoVectorizeAction_setNominalWidth(*args)
    def getNominalWidth(*args): return Coin_SWIG_Python.SoVectorizeAction_getNominalWidth(*args)
    def setPixelImageSize(*args): return Coin_SWIG_Python.SoVectorizeAction_setPixelImageSize(*args)
    def getPixelImageSize(*args): return Coin_SWIG_Python.SoVectorizeAction_getPixelImageSize(*args)
    CIRCLE = Coin_SWIG_Python.SoVectorizeAction_CIRCLE
    SQUARE = Coin_SWIG_Python.SoVectorizeAction_SQUARE
    def setPointStyle(*args): return Coin_SWIG_Python.SoVectorizeAction_setPointStyle(*args)
    def getPointStyle(*args): return Coin_SWIG_Python.SoVectorizeAction_getPointStyle(*args)
    def getPageStartpos(*args): return Coin_SWIG_Python.SoVectorizeAction_getPageStartpos(*args)
    def getPageSize(*args): return Coin_SWIG_Python.SoVectorizeAction_getPageSize(*args)
    REVERSE_ONLY_BLACK_AND_WHITE = Coin_SWIG_Python.SoVectorizeAction_REVERSE_ONLY_BLACK_AND_WHITE
    AS_IS = Coin_SWIG_Python.SoVectorizeAction_AS_IS
    REVERSE = Coin_SWIG_Python.SoVectorizeAction_REVERSE
    NO_JOIN = Coin_SWIG_Python.SoVectorizeAction_NO_JOIN
    MITERED_JOIN = Coin_SWIG_Python.SoVectorizeAction_MITERED_JOIN
    MITERED_BEVELED_JOIN = Coin_SWIG_Python.SoVectorizeAction_MITERED_BEVELED_JOIN
    BEVELED_JOIN = Coin_SWIG_Python.SoVectorizeAction_BEVELED_JOIN
    TRIANGULAR_JOIN = Coin_SWIG_Python.SoVectorizeAction_TRIANGULAR_JOIN
    ROUNDED_JOIN = Coin_SWIG_Python.SoVectorizeAction_ROUNDED_JOIN
    BUTT_END = Coin_SWIG_Python.SoVectorizeAction_BUTT_END
    SQUARE_END = Coin_SWIG_Python.SoVectorizeAction_SQUARE_END
    TRIANGULAR_END = Coin_SWIG_Python.SoVectorizeAction_TRIANGULAR_END
    ROUND_END = Coin_SWIG_Python.SoVectorizeAction_ROUND_END
    NO_HLHSR = Coin_SWIG_Python.SoVectorizeAction_NO_HLHSR
    HLHSR_SIMPLE_PAINTER = Coin_SWIG_Python.SoVectorizeAction_HLHSR_SIMPLE_PAINTER
    HLHSR_PAINTER = Coin_SWIG_Python.SoVectorizeAction_HLHSR_PAINTER
    HLHSR_PAINTER_SURFACE_REMOVAL = Coin_SWIG_Python.SoVectorizeAction_HLHSR_PAINTER_SURFACE_REMOVAL
    HIDDEN_LINES_REMOVAL = Coin_SWIG_Python.SoVectorizeAction_HIDDEN_LINES_REMOVAL
    def setDrawingDimensions(*args): return Coin_SWIG_Python.SoVectorizeAction_setDrawingDimensions(*args)
    def getDrawingDimensions(*args): return Coin_SWIG_Python.SoVectorizeAction_getDrawingDimensions(*args)
    def setStartPosition(*args): return Coin_SWIG_Python.SoVectorizeAction_setStartPosition(*args)
    def getStartPosition(*args): return Coin_SWIG_Python.SoVectorizeAction_getStartPosition(*args)
    def setColorTranslationMethod(*args): return Coin_SWIG_Python.SoVectorizeAction_setColorTranslationMethod(*args)
    def getColorTranslationMethod(*args): return Coin_SWIG_Python.SoVectorizeAction_getColorTranslationMethod(*args)
    def setLineEndStyle(*args): return Coin_SWIG_Python.SoVectorizeAction_setLineEndStyle(*args)
    def getLineEndStyle(*args): return Coin_SWIG_Python.SoVectorizeAction_getLineEndStyle(*args)
    def setLineJoinsStyle(*args): return Coin_SWIG_Python.SoVectorizeAction_setLineJoinsStyle(*args)
    def getLineJoinsStyle(*args): return Coin_SWIG_Python.SoVectorizeAction_getLineJoinsStyle(*args)
    def setHLHSRMode(*args): return Coin_SWIG_Python.SoVectorizeAction_setHLHSRMode(*args)
    def getHLHSRMode(*args): return Coin_SWIG_Python.SoVectorizeAction_getHLHSRMode(*args)
    def setBorder(*args): return Coin_SWIG_Python.SoVectorizeAction_setBorder(*args)
    def setMiterLimit(*args): return Coin_SWIG_Python.SoVectorizeAction_setMiterLimit(*args)
    def getMiterLimit(*args): return Coin_SWIG_Python.SoVectorizeAction_getMiterLimit(*args)
    def setPenDescription(*args): return Coin_SWIG_Python.SoVectorizeAction_setPenDescription(*args)
    def getPenDescription(*args): return Coin_SWIG_Python.SoVectorizeAction_getPenDescription(*args)
    def getPenNum(*args): return Coin_SWIG_Python.SoVectorizeAction_getPenNum(*args)
    def setColorPriority(*args): return Coin_SWIG_Python.SoVectorizeAction_setColorPriority(*args)
    def getColorPriority(*args): return Coin_SWIG_Python.SoVectorizeAction_getColorPriority(*args)
    def enableLighting(*args): return Coin_SWIG_Python.SoVectorizeAction_enableLighting(*args)
    def isLightingEnabled(*args): return Coin_SWIG_Python.SoVectorizeAction_isLightingEnabled(*args)
SoVectorizeAction_swigregister = Coin_SWIG_Python.SoVectorizeAction_swigregister
SoVectorizeAction_swigregister(SoVectorizeAction)
SoVectorizeAction_getClassTypeId = Coin_SWIG_Python.SoVectorizeAction_getClassTypeId
SoVectorizeAction_addMethod = Coin_SWIG_Python.SoVectorizeAction_addMethod
SoVectorizeAction_enableElement = Coin_SWIG_Python.SoVectorizeAction_enableElement
SoVectorizeAction_initClass = Coin_SWIG_Python.SoVectorizeAction_initClass

class SoShape(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoShape_initClass)
    TRIANGLE_STRIP = Coin_SWIG_Python.SoShape_TRIANGLE_STRIP
    TRIANGLE_FAN = Coin_SWIG_Python.SoShape_TRIANGLE_FAN
    TRIANGLES = Coin_SWIG_Python.SoShape_TRIANGLES
    POLYGON = Coin_SWIG_Python.SoShape_POLYGON
    QUADS = Coin_SWIG_Python.SoShape_QUADS
    QUAD_STRIP = Coin_SWIG_Python.SoShape_QUAD_STRIP
    POINTS = Coin_SWIG_Python.SoShape_POINTS
    LINES = Coin_SWIG_Python.SoShape_LINES
    LINE_STRIP = Coin_SWIG_Python.SoShape_LINE_STRIP
    def affectsState(*args): return Coin_SWIG_Python.SoShape_affectsState(*args)
    def notify(*args): return Coin_SWIG_Python.SoShape_notify(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoShape_getBoundingBox(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoShape_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoShape_rayPick(*args)
    def callback(*args): return Coin_SWIG_Python.SoShape_callback(*args)
    def computeBBox(*args): return Coin_SWIG_Python.SoShape_computeBBox(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoShape_getPrimitiveCount(*args)
    getScreenSize = staticmethod(Coin_SWIG_Python.SoShape_getScreenSize)
    getDecimatedComplexity = staticmethod(Coin_SWIG_Python.SoShape_getDecimatedComplexity)
    def getBoundingBoxCache(*args): return Coin_SWIG_Python.SoShape_getBoundingBoxCache(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShape
    __del__ = lambda self : None;
SoShape_swigregister = Coin_SWIG_Python.SoShape_swigregister
SoShape_swigregister(SoShape)
SoShape_getClassTypeId = Coin_SWIG_Python.SoShape_getClassTypeId
SoShape_initClass = Coin_SWIG_Python.SoShape_initClass
SoShape_getScreenSize = Coin_SWIG_Python.SoShape_getScreenSize
SoShape_getDecimatedComplexity = Coin_SWIG_Python.SoShape_getDecimatedComplexity

class SoSFInt32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFInt32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFInt32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFInt32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFInt32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFInt32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFInt32_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFInt32_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFInt32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFInt32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFInt32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFInt32_setValue(*args)
SoSFInt32_swigregister = Coin_SWIG_Python.SoSFInt32_swigregister
SoSFInt32_swigregister(SoSFInt32)
SoSFInt32_createInstance = Coin_SWIG_Python.SoSFInt32_createInstance
SoSFInt32_getClassTypeId = Coin_SWIG_Python.SoSFInt32_getClassTypeId
SoSFInt32_initClass = Coin_SWIG_Python.SoSFInt32_initClass

class SoImage(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoImage_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoImage_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoImage_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoImage(*args)
        try: self.this.append(this)
        except: self.this = this
    BOTTOM = Coin_SWIG_Python.SoImage_BOTTOM
    HALF = Coin_SWIG_Python.SoImage_HALF
    TOP = Coin_SWIG_Python.SoImage_TOP
    LEFT = Coin_SWIG_Python.SoImage_LEFT
    CENTER = Coin_SWIG_Python.SoImage_CENTER
    RIGHT = Coin_SWIG_Python.SoImage_RIGHT
    width = _swig_property(Coin_SWIG_Python.SoImage_width_get, Coin_SWIG_Python.SoImage_width_set)
    height = _swig_property(Coin_SWIG_Python.SoImage_height_get, Coin_SWIG_Python.SoImage_height_set)
    vertAlignment = _swig_property(Coin_SWIG_Python.SoImage_vertAlignment_get, Coin_SWIG_Python.SoImage_vertAlignment_set)
    horAlignment = _swig_property(Coin_SWIG_Python.SoImage_horAlignment_get, Coin_SWIG_Python.SoImage_horAlignment_set)
    image = _swig_property(Coin_SWIG_Python.SoImage_image_get, Coin_SWIG_Python.SoImage_image_set)
    filename = _swig_property(Coin_SWIG_Python.SoImage_filename_get, Coin_SWIG_Python.SoImage_filename_set)
    def GLRender(*args): return Coin_SWIG_Python.SoImage_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoImage_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoImage_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoImage
    __del__ = lambda self : None;
SoImage_swigregister = Coin_SWIG_Python.SoImage_swigregister
SoImage_swigregister(SoImage)
SoImage_getClassTypeId = Coin_SWIG_Python.SoImage_getClassTypeId
SoImage_initClass = Coin_SWIG_Python.SoImage_initClass

class SoVectorizePSAction(SoVectorizeAction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoVectorizePSAction_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVectorizePSAction_getClassTypeId)
    addMethod = staticmethod(Coin_SWIG_Python.SoVectorizePSAction_addMethod)
    enableElement = staticmethod(Coin_SWIG_Python.SoVectorizePSAction_enableElement)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVectorizePSAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVectorizePSAction
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoVectorizePSAction_initClass)
    def setDefault2DFont(*args): return Coin_SWIG_Python.SoVectorizePSAction_setDefault2DFont(*args)
    def getDefault2DFont(*args): return Coin_SWIG_Python.SoVectorizePSAction_getDefault2DFont(*args)
    def setGouraudThreshold(*args): return Coin_SWIG_Python.SoVectorizePSAction_setGouraudThreshold(*args)
    def getOutput(*args): return Coin_SWIG_Python.SoVectorizePSAction_getOutput(*args)
    def getPSOutput(*args): return Coin_SWIG_Python.SoVectorizePSAction_getPSOutput(*args)
SoVectorizePSAction_swigregister = Coin_SWIG_Python.SoVectorizePSAction_swigregister
SoVectorizePSAction_swigregister(SoVectorizePSAction)
SoVectorizePSAction_getClassTypeId = Coin_SWIG_Python.SoVectorizePSAction_getClassTypeId
SoVectorizePSAction_addMethod = Coin_SWIG_Python.SoVectorizePSAction_addMethod
SoVectorizePSAction_enableElement = Coin_SWIG_Python.SoVectorizePSAction_enableElement
SoVectorizePSAction_initClass = Coin_SWIG_Python.SoVectorizePSAction_initClass

class SoBundle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
SoBundle_swigregister = Coin_SWIG_Python.SoBundle_swigregister
SoBundle_swigregister(SoBundle)

class SoMaterialBundle(SoBundle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMaterialBundle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMaterialBundle
    __del__ = lambda self : None;
    def setUpMultiple(*args): return Coin_SWIG_Python.SoMaterialBundle_setUpMultiple(*args)
    def sendFirst(*args): return Coin_SWIG_Python.SoMaterialBundle_sendFirst(*args)
    def forceSend(*args): return Coin_SWIG_Python.SoMaterialBundle_forceSend(*args)
    def isColorOnly(*args): return Coin_SWIG_Python.SoMaterialBundle_isColorOnly(*args)
    def send(*args): return Coin_SWIG_Python.SoMaterialBundle_send(*args)
SoMaterialBundle_swigregister = Coin_SWIG_Python.SoMaterialBundle_swigregister
SoMaterialBundle_swigregister(SoMaterialBundle)

class SbBSPTree(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBSPTree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBSPTree
    __del__ = lambda self : None;
    def numPoints(*args): return Coin_SWIG_Python.SbBSPTree_numPoints(*args)
    def getPoint(*args): return Coin_SWIG_Python.SbBSPTree_getPoint(*args)
    def getUserData(*args): return Coin_SWIG_Python.SbBSPTree_getUserData(*args)
    def setUserData(*args): return Coin_SWIG_Python.SbBSPTree_setUserData(*args)
    def addPoint(*args): return Coin_SWIG_Python.SbBSPTree_addPoint(*args)
    def removePoint(*args): return Coin_SWIG_Python.SbBSPTree_removePoint(*args)
    def findPoint(*args): return Coin_SWIG_Python.SbBSPTree_findPoint(*args)
    def clear(*args): return Coin_SWIG_Python.SbBSPTree_clear(*args)
    def getBBox(*args): return Coin_SWIG_Python.SbBSPTree_getBBox(*args)
    def getPointsArrayPtr(*args): return Coin_SWIG_Python.SbBSPTree_getPointsArrayPtr(*args)
    def findPoints(*args): return Coin_SWIG_Python.SbBSPTree_findPoints(*args)
    def findClosest(*args): return Coin_SWIG_Python.SbBSPTree_findClosest(*args)
SbBSPTree_swigregister = Coin_SWIG_Python.SbBSPTree_swigregister
SbBSPTree_swigregister(SbBSPTree)

class SoNormalGenerator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNormalGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalGenerator
    __del__ = lambda self : None;
    def reset(*args): return Coin_SWIG_Python.SoNormalGenerator_reset(*args)
    def beginPolygon(*args): return Coin_SWIG_Python.SoNormalGenerator_beginPolygon(*args)
    def polygonVertex(*args): return Coin_SWIG_Python.SoNormalGenerator_polygonVertex(*args)
    def endPolygon(*args): return Coin_SWIG_Python.SoNormalGenerator_endPolygon(*args)
    def triangle(*args): return Coin_SWIG_Python.SoNormalGenerator_triangle(*args)
    def quad(*args): return Coin_SWIG_Python.SoNormalGenerator_quad(*args)
    def generate(*args): return Coin_SWIG_Python.SoNormalGenerator_generate(*args)
    def generatePerStrip(*args): return Coin_SWIG_Python.SoNormalGenerator_generatePerStrip(*args)
    def generatePerFace(*args): return Coin_SWIG_Python.SoNormalGenerator_generatePerFace(*args)
    def generateOverall(*args): return Coin_SWIG_Python.SoNormalGenerator_generateOverall(*args)
    def getNumNormals(*args): return Coin_SWIG_Python.SoNormalGenerator_getNumNormals(*args)
    def setNumNormals(*args): return Coin_SWIG_Python.SoNormalGenerator_setNumNormals(*args)
    def getNormals(*args): return Coin_SWIG_Python.SoNormalGenerator_getNormals(*args)
    def getNormal(*args): return Coin_SWIG_Python.SoNormalGenerator_getNormal(*args)
    def setNormal(*args): return Coin_SWIG_Python.SoNormalGenerator_setNormal(*args)
SoNormalGenerator_swigregister = Coin_SWIG_Python.SoNormalGenerator_swigregister
SoNormalGenerator_swigregister(SoNormalGenerator)

class SoNormalElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNormalElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoNormalElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoNormalElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoNormalElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoNormalElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoNormalElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoNormalElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoNormalElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoNormalElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoNormalElement_getArrayPtr(*args)
    def areNormalsUnitLength(*args): return Coin_SWIG_Python.SoNormalElement_areNormalsUnitLength(*args)
SoNormalElement_swigregister = Coin_SWIG_Python.SoNormalElement_swigregister
SoNormalElement_swigregister(SoNormalElement)
SoNormalElement_getClassTypeId = Coin_SWIG_Python.SoNormalElement_getClassTypeId
SoNormalElement_getClassStackIndex = Coin_SWIG_Python.SoNormalElement_getClassStackIndex
SoNormalElement_createInstance = Coin_SWIG_Python.SoNormalElement_createInstance
SoNormalElement_initClass = Coin_SWIG_Python.SoNormalElement_initClass
SoNormalElement_set = Coin_SWIG_Python.SoNormalElement_set
SoNormalElement_getInstance = Coin_SWIG_Python.SoNormalElement_getInstance

class SoGLNormalElement(SoNormalElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLNormalElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLNormalElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLNormalElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLNormalElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLNormalElement_init(*args)
    def send(*args): return Coin_SWIG_Python.SoGLNormalElement_send(*args)
SoGLNormalElement_swigregister = Coin_SWIG_Python.SoGLNormalElement_swigregister
SoGLNormalElement_swigregister(SoGLNormalElement)
SoGLNormalElement_getClassTypeId = Coin_SWIG_Python.SoGLNormalElement_getClassTypeId
SoGLNormalElement_getClassStackIndex = Coin_SWIG_Python.SoGLNormalElement_getClassStackIndex
SoGLNormalElement_createInstance = Coin_SWIG_Python.SoGLNormalElement_createInstance
SoGLNormalElement_initClass = Coin_SWIG_Python.SoGLNormalElement_initClass

class SoNormalBundle(SoBundle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNormalBundle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalBundle
    __del__ = lambda self : None;
    def shouldGenerate(*args): return Coin_SWIG_Python.SoNormalBundle_shouldGenerate(*args)
    def initGenerator(*args): return Coin_SWIG_Python.SoNormalBundle_initGenerator(*args)
    def beginPolygon(*args): return Coin_SWIG_Python.SoNormalBundle_beginPolygon(*args)
    def polygonVertex(*args): return Coin_SWIG_Python.SoNormalBundle_polygonVertex(*args)
    def endPolygon(*args): return Coin_SWIG_Python.SoNormalBundle_endPolygon(*args)
    def triangle(*args): return Coin_SWIG_Python.SoNormalBundle_triangle(*args)
    def generate(*args): return Coin_SWIG_Python.SoNormalBundle_generate(*args)
    def getGeneratedNormals(*args): return Coin_SWIG_Python.SoNormalBundle_getGeneratedNormals(*args)
    def getNumGeneratedNormals(*args): return Coin_SWIG_Python.SoNormalBundle_getNumGeneratedNormals(*args)
    def set(*args): return Coin_SWIG_Python.SoNormalBundle_set(*args)
    def get(*args): return Coin_SWIG_Python.SoNormalBundle_get(*args)
    def send(*args): return Coin_SWIG_Python.SoNormalBundle_send(*args)
    generator = _swig_property(Coin_SWIG_Python.SoNormalBundle_generator_get, Coin_SWIG_Python.SoNormalBundle_generator_set)
SoNormalBundle_swigregister = Coin_SWIG_Python.SoNormalBundle_swigregister
SoNormalBundle_swigregister(SoNormalBundle)

class SoTextureCoordinateElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_initClass)
    NONE = Coin_SWIG_Python.SoTextureCoordinateElement_NONE
    TEXGEN = Coin_SWIG_Python.SoTextureCoordinateElement_TEXGEN
    EXPLICIT = Coin_SWIG_Python.SoTextureCoordinateElement_EXPLICIT
    FUNCTION = Coin_SWIG_Python.SoTextureCoordinateElement_FUNCTION
    DEFAULT = Coin_SWIG_Python.SoTextureCoordinateElement_DEFAULT
    def init(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_init(*args)
    setDefault = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_setDefault)
    setFunction = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_setFunction)
    set2 = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_set2)
    set3 = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_set3)
    set4 = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_set4)
    def getType(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_getType(*args)
    getInstance = staticmethod(Coin_SWIG_Python.SoTextureCoordinateElement_getInstance)
    def get(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_get(*args)
    def getNum(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_getNum(*args)
    def is2D(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_is2D(*args)
    def getDimension(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_getDimension(*args)
    def get2(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_get2(*args)
    def get3(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_get3(*args)
    def get4(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_get4(*args)
    def getArrayPtr2(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_getArrayPtr2(*args)
    def getArrayPtr3(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_getArrayPtr3(*args)
    def getArrayPtr4(*args): return Coin_SWIG_Python.SoTextureCoordinateElement_getArrayPtr4(*args)
SoTextureCoordinateElement_swigregister = Coin_SWIG_Python.SoTextureCoordinateElement_swigregister
SoTextureCoordinateElement_swigregister(SoTextureCoordinateElement)
SoTextureCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateElement_getClassTypeId
SoTextureCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoTextureCoordinateElement_getClassStackIndex
SoTextureCoordinateElement_createInstance = Coin_SWIG_Python.SoTextureCoordinateElement_createInstance
SoTextureCoordinateElement_initClass = Coin_SWIG_Python.SoTextureCoordinateElement_initClass
SoTextureCoordinateElement_setDefault = Coin_SWIG_Python.SoTextureCoordinateElement_setDefault
SoTextureCoordinateElement_setFunction = Coin_SWIG_Python.SoTextureCoordinateElement_setFunction
SoTextureCoordinateElement_set2 = Coin_SWIG_Python.SoTextureCoordinateElement_set2
SoTextureCoordinateElement_set3 = Coin_SWIG_Python.SoTextureCoordinateElement_set3
SoTextureCoordinateElement_set4 = Coin_SWIG_Python.SoTextureCoordinateElement_set4
SoTextureCoordinateElement_getInstance = Coin_SWIG_Python.SoTextureCoordinateElement_getInstance

class SoGLTextureCoordinateElement(SoTextureCoordinateElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLTextureCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLTextureCoordinateElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLTextureCoordinateElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLTextureCoordinateElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLTextureCoordinateElement_pop(*args)
    setTexGen = staticmethod(Coin_SWIG_Python.SoGLTextureCoordinateElement_setTexGen)
    def getType(*args): return Coin_SWIG_Python.SoGLTextureCoordinateElement_getType(*args)
    getInstance = staticmethod(Coin_SWIG_Python.SoGLTextureCoordinateElement_getInstance)
    def send(*args): return Coin_SWIG_Python.SoGLTextureCoordinateElement_send(*args)
    def initMulti(*args): return Coin_SWIG_Python.SoGLTextureCoordinateElement_initMulti(*args)
SoGLTextureCoordinateElement_swigregister = Coin_SWIG_Python.SoGLTextureCoordinateElement_swigregister
SoGLTextureCoordinateElement_swigregister(SoGLTextureCoordinateElement)
SoGLTextureCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassTypeId
SoGLTextureCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoGLTextureCoordinateElement_getClassStackIndex
SoGLTextureCoordinateElement_createInstance = Coin_SWIG_Python.SoGLTextureCoordinateElement_createInstance
SoGLTextureCoordinateElement_initClass = Coin_SWIG_Python.SoGLTextureCoordinateElement_initClass
SoGLTextureCoordinateElement_setTexGen = Coin_SWIG_Python.SoGLTextureCoordinateElement_setTexGen
SoGLTextureCoordinateElement_getInstance = Coin_SWIG_Python.SoGLTextureCoordinateElement_getInstance

class SoTextureCoordinateBundle(SoBundle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateBundle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateBundle
    __del__ = lambda self : None;
    def needCoordinates(*args): return Coin_SWIG_Python.SoTextureCoordinateBundle_needCoordinates(*args)
    def isFunction(*args): return Coin_SWIG_Python.SoTextureCoordinateBundle_isFunction(*args)
    def get(*args): return Coin_SWIG_Python.SoTextureCoordinateBundle_get(*args)
    def send(*args): return Coin_SWIG_Python.SoTextureCoordinateBundle_send(*args)
    def needIndices(*args): return Coin_SWIG_Python.SoTextureCoordinateBundle_needIndices(*args)
SoTextureCoordinateBundle_swigregister = Coin_SWIG_Python.SoTextureCoordinateBundle_swigregister
SoTextureCoordinateBundle_swigregister(SoTextureCoordinateBundle)

class SoCache(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCache(*args)
        try: self.this.append(this)
        except: self.this = this
    def ref(*args): return Coin_SWIG_Python.SoCache_ref(*args)
    def unref(*args): return Coin_SWIG_Python.SoCache_unref(*args)
    def addElement(*args): return Coin_SWIG_Python.SoCache_addElement(*args)
    def addCacheDependency(*args): return Coin_SWIG_Python.SoCache_addCacheDependency(*args)
    def isValid(*args): return Coin_SWIG_Python.SoCache_isValid(*args)
    def getInvalidElement(*args): return Coin_SWIG_Python.SoCache_getInvalidElement(*args)
    def invalidate(*args): return Coin_SWIG_Python.SoCache_invalidate(*args)
SoCache_swigregister = Coin_SWIG_Python.SoCache_swigregister
SoCache_swigregister(SoCache)

class SoBoundingBoxCache(SoCache):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBoundingBoxCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBoundingBoxCache
    __del__ = lambda self : None;
    def set(*args): return Coin_SWIG_Python.SoBoundingBoxCache_set(*args)
    def getBox(*args): return Coin_SWIG_Python.SoBoundingBoxCache_getBox(*args)
    def getProjectedBox(*args): return Coin_SWIG_Python.SoBoundingBoxCache_getProjectedBox(*args)
    def isCenterSet(*args): return Coin_SWIG_Python.SoBoundingBoxCache_isCenterSet(*args)
    def getCenter(*args): return Coin_SWIG_Python.SoBoundingBoxCache_getCenter(*args)
    setHasLinesOrPoints = staticmethod(Coin_SWIG_Python.SoBoundingBoxCache_setHasLinesOrPoints)
    def hasLinesOrPoints(*args): return Coin_SWIG_Python.SoBoundingBoxCache_hasLinesOrPoints(*args)
SoBoundingBoxCache_swigregister = Coin_SWIG_Python.SoBoundingBoxCache_swigregister
SoBoundingBoxCache_swigregister(SoBoundingBoxCache)
SoBoundingBoxCache_setHasLinesOrPoints = Coin_SWIG_Python.SoBoundingBoxCache_setHasLinesOrPoints

class SoConvexDataCache(SoCache):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoConvexDataCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoConvexDataCache
    __del__ = lambda self : None;
    NONE = Coin_SWIG_Python.SoConvexDataCache_NONE
    PER_FACE = Coin_SWIG_Python.SoConvexDataCache_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoConvexDataCache_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoConvexDataCache_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoConvexDataCache_PER_VERTEX_INDEXED
    def generate(*args): return Coin_SWIG_Python.SoConvexDataCache_generate(*args)
    def getCoordIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getCoordIndices(*args)
    def getNumCoordIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getNumCoordIndices(*args)
    def getMaterialIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getMaterialIndices(*args)
    def getNumMaterialIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getNumMaterialIndices(*args)
    def getNormalIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getNormalIndices(*args)
    def getNumNormalIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getNumNormalIndices(*args)
    def getTexIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getTexIndices(*args)
    def getNumTexIndices(*args): return Coin_SWIG_Python.SoConvexDataCache_getNumTexIndices(*args)
SoConvexDataCache_swigregister = Coin_SWIG_Python.SoConvexDataCache_swigregister
SoConvexDataCache_swigregister(SoConvexDataCache)

class SoGLCacheList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLCacheList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLCacheList
    __del__ = lambda self : None;
    def call(*args): return Coin_SWIG_Python.SoGLCacheList_call(*args)
    def open(*args): return Coin_SWIG_Python.SoGLCacheList_open(*args)
    def close(*args): return Coin_SWIG_Python.SoGLCacheList_close(*args)
    def invalidateAll(*args): return Coin_SWIG_Python.SoGLCacheList_invalidateAll(*args)
SoGLCacheList_swigregister = Coin_SWIG_Python.SoGLCacheList_swigregister
SoGLCacheList_swigregister(SoGLCacheList)

class SoGLLazyElement(SoLazyElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLLazyElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLLazyElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLLazyElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLLazyElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLLazyElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLLazyElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLLazyElement_pop(*args)
    sendAllMaterial = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendAllMaterial)
    sendNoMaterial = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendNoMaterial)
    sendOnlyDiffuseColor = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendOnlyDiffuseColor)
    sendLightModel = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendLightModel)
    sendPackedDiffuse = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendPackedDiffuse)
    sendFlatshading = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendFlatshading)
    sendVertexOrdering = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendVertexOrdering)
    sendTwosideLighting = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendTwosideLighting)
    sendBackfaceCulling = staticmethod(Coin_SWIG_Python.SoGLLazyElement_sendBackfaceCulling)
    def sendDiffuseByIndex(*args): return Coin_SWIG_Python.SoGLLazyElement_sendDiffuseByIndex(*args)
    isColorIndex = staticmethod(Coin_SWIG_Python.SoGLLazyElement_isColorIndex)
    getInstance = staticmethod(Coin_SWIG_Python.SoGLLazyElement_getInstance)
    def send(*args): return Coin_SWIG_Python.SoGLLazyElement_send(*args)
    def sendVPPacked(*args): return Coin_SWIG_Python.SoGLLazyElement_sendVPPacked(*args)
    def reset(*args): return Coin_SWIG_Python.SoGLLazyElement_reset(*args)
    didsetbitmask = _swig_property(Coin_SWIG_Python.SoGLLazyElement_didsetbitmask_get, Coin_SWIG_Python.SoGLLazyElement_didsetbitmask_set)
    didntsetbitmask = _swig_property(Coin_SWIG_Python.SoGLLazyElement_didntsetbitmask_get, Coin_SWIG_Python.SoGLLazyElement_didntsetbitmask_set)
    cachebitmask = _swig_property(Coin_SWIG_Python.SoGLLazyElement_cachebitmask_get, Coin_SWIG_Python.SoGLLazyElement_cachebitmask_set)
    forcediffuse = _swig_property(Coin_SWIG_Python.SoGLLazyElement_forcediffuse_get, Coin_SWIG_Python.SoGLLazyElement_forcediffuse_set)
    glstate = _swig_property(Coin_SWIG_Python.SoGLLazyElement_glstate_get, Coin_SWIG_Python.SoGLLazyElement_glstate_set)
    postcachestate = _swig_property(Coin_SWIG_Python.SoGLLazyElement_postcachestate_get, Coin_SWIG_Python.SoGLLazyElement_postcachestate_set)
    precachestate = _swig_property(Coin_SWIG_Python.SoGLLazyElement_precachestate_get, Coin_SWIG_Python.SoGLLazyElement_precachestate_set)
    colorindex = _swig_property(Coin_SWIG_Python.SoGLLazyElement_colorindex_get, Coin_SWIG_Python.SoGLLazyElement_colorindex_set)
    colorpacker = _swig_property(Coin_SWIG_Python.SoGLLazyElement_colorpacker_get, Coin_SWIG_Python.SoGLLazyElement_colorpacker_set)
    packedpointer = _swig_property(Coin_SWIG_Python.SoGLLazyElement_packedpointer_get, Coin_SWIG_Python.SoGLLazyElement_packedpointer_set)
    transpmask = _swig_property(Coin_SWIG_Python.SoGLLazyElement_transpmask_get, Coin_SWIG_Python.SoGLLazyElement_transpmask_set)
    state = _swig_property(Coin_SWIG_Python.SoGLLazyElement_state_get, Coin_SWIG_Python.SoGLLazyElement_state_set)
    def setDiffuseElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setDiffuseElt(*args)
    def setPackedElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setPackedElt(*args)
    def setColorIndexElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setColorIndexElt(*args)
    def setTranspElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setTranspElt(*args)
    def setTranspTypeElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setTranspTypeElt(*args)
    def setAmbientElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setAmbientElt(*args)
    def setEmissiveElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setEmissiveElt(*args)
    def setSpecularElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setSpecularElt(*args)
    def setShininessElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setShininessElt(*args)
    def setColorMaterialElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setColorMaterialElt(*args)
    def enableBlendingElt(*args): return Coin_SWIG_Python.SoGLLazyElement_enableBlendingElt(*args)
    def disableBlendingElt(*args): return Coin_SWIG_Python.SoGLLazyElement_disableBlendingElt(*args)
    def setLightModelElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setLightModelElt(*args)
    def setMaterialElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setMaterialElt(*args)
    def setVertexOrderingElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setVertexOrderingElt(*args)
    def setBackfaceCullingElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setBackfaceCullingElt(*args)
    def setTwosideLightingElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setTwosideLightingElt(*args)
    def setShadeModelElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setShadeModelElt(*args)
    def setGLImageIdElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setGLImageIdElt(*args)
    def setAlphaTestElt(*args): return Coin_SWIG_Python.SoGLLazyElement_setAlphaTestElt(*args)
    beginCaching = staticmethod(Coin_SWIG_Python.SoGLLazyElement_beginCaching)
    endCaching = staticmethod(Coin_SWIG_Python.SoGLLazyElement_endCaching)
    preCacheCall = staticmethod(Coin_SWIG_Python.SoGLLazyElement_preCacheCall)
    postCacheCall = staticmethod(Coin_SWIG_Python.SoGLLazyElement_postCacheCall)
    def updateColorVBO(*args): return Coin_SWIG_Python.SoGLLazyElement_updateColorVBO(*args)
SoGLLazyElement_swigregister = Coin_SWIG_Python.SoGLLazyElement_swigregister
SoGLLazyElement_swigregister(SoGLLazyElement)
SoGLLazyElement_getClassTypeId = Coin_SWIG_Python.SoGLLazyElement_getClassTypeId
SoGLLazyElement_getClassStackIndex = Coin_SWIG_Python.SoGLLazyElement_getClassStackIndex
SoGLLazyElement_createInstance = Coin_SWIG_Python.SoGLLazyElement_createInstance
SoGLLazyElement_initClass = Coin_SWIG_Python.SoGLLazyElement_initClass
SoGLLazyElement_sendAllMaterial = Coin_SWIG_Python.SoGLLazyElement_sendAllMaterial
SoGLLazyElement_sendNoMaterial = Coin_SWIG_Python.SoGLLazyElement_sendNoMaterial
SoGLLazyElement_sendOnlyDiffuseColor = Coin_SWIG_Python.SoGLLazyElement_sendOnlyDiffuseColor
SoGLLazyElement_sendLightModel = Coin_SWIG_Python.SoGLLazyElement_sendLightModel
SoGLLazyElement_sendPackedDiffuse = Coin_SWIG_Python.SoGLLazyElement_sendPackedDiffuse
SoGLLazyElement_sendFlatshading = Coin_SWIG_Python.SoGLLazyElement_sendFlatshading
SoGLLazyElement_sendVertexOrdering = Coin_SWIG_Python.SoGLLazyElement_sendVertexOrdering
SoGLLazyElement_sendTwosideLighting = Coin_SWIG_Python.SoGLLazyElement_sendTwosideLighting
SoGLLazyElement_sendBackfaceCulling = Coin_SWIG_Python.SoGLLazyElement_sendBackfaceCulling
SoGLLazyElement_isColorIndex = Coin_SWIG_Python.SoGLLazyElement_isColorIndex
SoGLLazyElement_getInstance = Coin_SWIG_Python.SoGLLazyElement_getInstance
SoGLLazyElement_beginCaching = Coin_SWIG_Python.SoGLLazyElement_beginCaching
SoGLLazyElement_endCaching = Coin_SWIG_Python.SoGLLazyElement_endCaching
SoGLLazyElement_preCacheCall = Coin_SWIG_Python.SoGLLazyElement_preCacheCall
SoGLLazyElement_postCacheCall = Coin_SWIG_Python.SoGLLazyElement_postCacheCall

class SoGLLazyElement_GLState(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cachebitmask = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_cachebitmask_get, Coin_SWIG_Python.SoGLLazyElement_GLState_cachebitmask_set)
    diffuse = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_diffuse_get, Coin_SWIG_Python.SoGLLazyElement_GLState_diffuse_set)
    ambient = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_ambient_get, Coin_SWIG_Python.SoGLLazyElement_GLState_ambient_set)
    emissive = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_emissive_get, Coin_SWIG_Python.SoGLLazyElement_GLState_emissive_set)
    specular = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_specular_get, Coin_SWIG_Python.SoGLLazyElement_GLState_specular_set)
    shininess = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_shininess_get, Coin_SWIG_Python.SoGLLazyElement_GLState_shininess_set)
    lightmodel = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_lightmodel_get, Coin_SWIG_Python.SoGLLazyElement_GLState_lightmodel_set)
    blending = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_blending_get, Coin_SWIG_Python.SoGLLazyElement_GLState_blending_set)
    blend_sfactor = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_blend_sfactor_get, Coin_SWIG_Python.SoGLLazyElement_GLState_blend_sfactor_set)
    blend_dfactor = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_blend_dfactor_get, Coin_SWIG_Python.SoGLLazyElement_GLState_blend_dfactor_set)
    stipplenum = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_stipplenum_get, Coin_SWIG_Python.SoGLLazyElement_GLState_stipplenum_set)
    vertexordering = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_vertexordering_get, Coin_SWIG_Python.SoGLLazyElement_GLState_vertexordering_set)
    culling = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_culling_get, Coin_SWIG_Python.SoGLLazyElement_GLState_culling_set)
    twoside = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_twoside_get, Coin_SWIG_Python.SoGLLazyElement_GLState_twoside_set)
    flatshading = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_flatshading_get, Coin_SWIG_Python.SoGLLazyElement_GLState_flatshading_set)
    glimageid = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_glimageid_get, Coin_SWIG_Python.SoGLLazyElement_GLState_glimageid_set)
    alphatest = _swig_property(Coin_SWIG_Python.SoGLLazyElement_GLState_alphatest_get, Coin_SWIG_Python.SoGLLazyElement_GLState_alphatest_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLLazyElement_GLState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLLazyElement_GLState
    __del__ = lambda self : None;
SoGLLazyElement_GLState_swigregister = Coin_SWIG_Python.SoGLLazyElement_GLState_swigregister
SoGLLazyElement_GLState_swigregister(SoGLLazyElement_GLState)

class SoGLRenderCache(SoCache):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLRenderCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGLRenderCache
    __del__ = lambda self : None;
    def open(*args): return Coin_SWIG_Python.SoGLRenderCache_open(*args)
    def close(*args): return Coin_SWIG_Python.SoGLRenderCache_close(*args)
    def call(*args): return Coin_SWIG_Python.SoGLRenderCache_call(*args)
    def getCacheContext(*args): return Coin_SWIG_Python.SoGLRenderCache_getCacheContext(*args)
    def isValid(*args): return Coin_SWIG_Python.SoGLRenderCache_isValid(*args)
    def addNestedCache(*args): return Coin_SWIG_Python.SoGLRenderCache_addNestedCache(*args)
    def getPreLazyState(*args): return Coin_SWIG_Python.SoGLRenderCache_getPreLazyState(*args)
    def getPostLazyState(*args): return Coin_SWIG_Python.SoGLRenderCache_getPostLazyState(*args)
SoGLRenderCache_swigregister = Coin_SWIG_Python.SoGLRenderCache_swigregister
SoGLRenderCache_swigregister(SoGLRenderCache)

class SoNormalCache(SoCache):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNormalCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormalCache
    __del__ = lambda self : None;
    def set(*args): return Coin_SWIG_Python.SoNormalCache_set(*args)
    def generatePerVertex(*args): return Coin_SWIG_Python.SoNormalCache_generatePerVertex(*args)
    def generatePerFace(*args): return Coin_SWIG_Python.SoNormalCache_generatePerFace(*args)
    def generatePerFaceStrip(*args): return Coin_SWIG_Python.SoNormalCache_generatePerFaceStrip(*args)
    def generatePerStrip(*args): return Coin_SWIG_Python.SoNormalCache_generatePerStrip(*args)
    def generatePerVertexQuad(*args): return Coin_SWIG_Python.SoNormalCache_generatePerVertexQuad(*args)
    def generatePerFaceQuad(*args): return Coin_SWIG_Python.SoNormalCache_generatePerFaceQuad(*args)
    def generatePerRowQuad(*args): return Coin_SWIG_Python.SoNormalCache_generatePerRowQuad(*args)
    def getNum(*args): return Coin_SWIG_Python.SoNormalCache_getNum(*args)
    def getNormals(*args): return Coin_SWIG_Python.SoNormalCache_getNormals(*args)
    def getNumIndices(*args): return Coin_SWIG_Python.SoNormalCache_getNumIndices(*args)
    def getIndices(*args): return Coin_SWIG_Python.SoNormalCache_getIndices(*args)
SoNormalCache_swigregister = Coin_SWIG_Python.SoNormalCache_swigregister
SoNormalCache_swigregister(SoNormalCache)

class SoTextureCoordinateCache(SoCache):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateCache
    __del__ = lambda self : None;
    def generate(*args): return Coin_SWIG_Python.SoTextureCoordinateCache_generate(*args)
    def get(*args): return Coin_SWIG_Python.SoTextureCoordinateCache_get(*args)
    def getNum(*args): return Coin_SWIG_Python.SoTextureCoordinateCache_getNum(*args)
SoTextureCoordinateCache_swigregister = Coin_SWIG_Python.SoTextureCoordinateCache_swigregister
SoTextureCoordinateCache_swigregister(SoTextureCoordinateCache)

class SoDetail(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoDetail_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoDetail_initClasses)
    def copy(*args): return Coin_SWIG_Python.SoDetail_copy(*args)
    def getTypeId(*args): return Coin_SWIG_Python.SoDetail_getTypeId(*args)
    def isOfType(*args): return Coin_SWIG_Python.SoDetail_isOfType(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDetail_getClassTypeId)
SoDetail_swigregister = Coin_SWIG_Python.SoDetail_swigregister
SoDetail_swigregister(SoDetail)
SoDetail_initClass = Coin_SWIG_Python.SoDetail_initClass
SoDetail_initClasses = Coin_SWIG_Python.SoDetail_initClasses
SoDetail_getClassTypeId = Coin_SWIG_Python.SoDetail_getClassTypeId

class SoConeDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoConeDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoConeDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoConeDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoConeDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoConeDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoConeDetail_copy(*args)
    def setPart(*args): return Coin_SWIG_Python.SoConeDetail_setPart(*args)
    def getPart(*args): return Coin_SWIG_Python.SoConeDetail_getPart(*args)
SoConeDetail_swigregister = Coin_SWIG_Python.SoConeDetail_swigregister
SoConeDetail_swigregister(SoConeDetail)
SoConeDetail_getClassTypeId = Coin_SWIG_Python.SoConeDetail_getClassTypeId
SoConeDetail_initClass = Coin_SWIG_Python.SoConeDetail_initClass

class SoCubeDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoCubeDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCubeDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCubeDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCubeDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoCubeDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoCubeDetail_copy(*args)
    def setPart(*args): return Coin_SWIG_Python.SoCubeDetail_setPart(*args)
    def getPart(*args): return Coin_SWIG_Python.SoCubeDetail_getPart(*args)
SoCubeDetail_swigregister = Coin_SWIG_Python.SoCubeDetail_swigregister
SoCubeDetail_swigregister(SoCubeDetail)
SoCubeDetail_getClassTypeId = Coin_SWIG_Python.SoCubeDetail_getClassTypeId
SoCubeDetail_initClass = Coin_SWIG_Python.SoCubeDetail_initClass

class SoCylinderDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoCylinderDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCylinderDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCylinderDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCylinderDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoCylinderDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoCylinderDetail_copy(*args)
    def setPart(*args): return Coin_SWIG_Python.SoCylinderDetail_setPart(*args)
    def getPart(*args): return Coin_SWIG_Python.SoCylinderDetail_getPart(*args)
SoCylinderDetail_swigregister = Coin_SWIG_Python.SoCylinderDetail_swigregister
SoCylinderDetail_swigregister(SoCylinderDetail)
SoCylinderDetail_getClassTypeId = Coin_SWIG_Python.SoCylinderDetail_getClassTypeId
SoCylinderDetail_initClass = Coin_SWIG_Python.SoCylinderDetail_initClass

class SoPointDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoPointDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPointDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPointDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoPointDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoPointDetail_copy(*args)
    def getCoordinateIndex(*args): return Coin_SWIG_Python.SoPointDetail_getCoordinateIndex(*args)
    def getMaterialIndex(*args): return Coin_SWIG_Python.SoPointDetail_getMaterialIndex(*args)
    def getNormalIndex(*args): return Coin_SWIG_Python.SoPointDetail_getNormalIndex(*args)
    def getTextureCoordIndex(*args): return Coin_SWIG_Python.SoPointDetail_getTextureCoordIndex(*args)
    def setCoordinateIndex(*args): return Coin_SWIG_Python.SoPointDetail_setCoordinateIndex(*args)
    def setMaterialIndex(*args): return Coin_SWIG_Python.SoPointDetail_setMaterialIndex(*args)
    def setNormalIndex(*args): return Coin_SWIG_Python.SoPointDetail_setNormalIndex(*args)
    def setTextureCoordIndex(*args): return Coin_SWIG_Python.SoPointDetail_setTextureCoordIndex(*args)
SoPointDetail_swigregister = Coin_SWIG_Python.SoPointDetail_swigregister
SoPointDetail_swigregister(SoPointDetail)
SoPointDetail_getClassTypeId = Coin_SWIG_Python.SoPointDetail_getClassTypeId
SoPointDetail_initClass = Coin_SWIG_Python.SoPointDetail_initClass

class SoFaceDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoFaceDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFaceDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFaceDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFaceDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoFaceDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoFaceDetail_copy(*args)
    def getNumPoints(*args): return Coin_SWIG_Python.SoFaceDetail_getNumPoints(*args)
    def getPoint(*args): return Coin_SWIG_Python.SoFaceDetail_getPoint(*args)
    def getPoints(*args): return Coin_SWIG_Python.SoFaceDetail_getPoints(*args)
    def getFaceIndex(*args): return Coin_SWIG_Python.SoFaceDetail_getFaceIndex(*args)
    def getPartIndex(*args): return Coin_SWIG_Python.SoFaceDetail_getPartIndex(*args)
    def setNumPoints(*args): return Coin_SWIG_Python.SoFaceDetail_setNumPoints(*args)
    def setPoint(*args): return Coin_SWIG_Python.SoFaceDetail_setPoint(*args)
    def setFaceIndex(*args): return Coin_SWIG_Python.SoFaceDetail_setFaceIndex(*args)
    def setPartIndex(*args): return Coin_SWIG_Python.SoFaceDetail_setPartIndex(*args)
    def incFaceIndex(*args): return Coin_SWIG_Python.SoFaceDetail_incFaceIndex(*args)
    def incPartIndex(*args): return Coin_SWIG_Python.SoFaceDetail_incPartIndex(*args)
SoFaceDetail_swigregister = Coin_SWIG_Python.SoFaceDetail_swigregister
SoFaceDetail_swigregister(SoFaceDetail)
SoFaceDetail_getClassTypeId = Coin_SWIG_Python.SoFaceDetail_getClassTypeId
SoFaceDetail_initClass = Coin_SWIG_Python.SoFaceDetail_initClass

class SoLineDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoLineDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLineDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLineDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLineDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoLineDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoLineDetail_copy(*args)
    def getPoint0(*args): return Coin_SWIG_Python.SoLineDetail_getPoint0(*args)
    def getPoint1(*args): return Coin_SWIG_Python.SoLineDetail_getPoint1(*args)
    def getLineIndex(*args): return Coin_SWIG_Python.SoLineDetail_getLineIndex(*args)
    def getPartIndex(*args): return Coin_SWIG_Python.SoLineDetail_getPartIndex(*args)
    def setPoint0(*args): return Coin_SWIG_Python.SoLineDetail_setPoint0(*args)
    def setPoint1(*args): return Coin_SWIG_Python.SoLineDetail_setPoint1(*args)
    def setLineIndex(*args): return Coin_SWIG_Python.SoLineDetail_setLineIndex(*args)
    def setPartIndex(*args): return Coin_SWIG_Python.SoLineDetail_setPartIndex(*args)
    def incLineIndex(*args): return Coin_SWIG_Python.SoLineDetail_incLineIndex(*args)
    def incPartIndex(*args): return Coin_SWIG_Python.SoLineDetail_incPartIndex(*args)
SoLineDetail_swigregister = Coin_SWIG_Python.SoLineDetail_swigregister
SoLineDetail_swigregister(SoLineDetail)
SoLineDetail_getClassTypeId = Coin_SWIG_Python.SoLineDetail_getClassTypeId
SoLineDetail_initClass = Coin_SWIG_Python.SoLineDetail_initClass

class SoNodeKitDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoNodeKitDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNodeKitDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNodeKitDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeKitDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoNodeKitDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoNodeKitDetail_copy(*args)
    def setNodeKit(*args): return Coin_SWIG_Python.SoNodeKitDetail_setNodeKit(*args)
    def getNodeKit(*args): return Coin_SWIG_Python.SoNodeKitDetail_getNodeKit(*args)
    def setPart(*args): return Coin_SWIG_Python.SoNodeKitDetail_setPart(*args)
    def getPart(*args): return Coin_SWIG_Python.SoNodeKitDetail_getPart(*args)
    def setPartName(*args): return Coin_SWIG_Python.SoNodeKitDetail_setPartName(*args)
    def getPartName(*args): return Coin_SWIG_Python.SoNodeKitDetail_getPartName(*args)
SoNodeKitDetail_swigregister = Coin_SWIG_Python.SoNodeKitDetail_swigregister
SoNodeKitDetail_swigregister(SoNodeKitDetail)
SoNodeKitDetail_getClassTypeId = Coin_SWIG_Python.SoNodeKitDetail_getClassTypeId
SoNodeKitDetail_initClass = Coin_SWIG_Python.SoNodeKitDetail_initClass

class SoTextDetail(SoDetail):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(*args): return Coin_SWIG_Python.SoTextDetail_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextDetail_getClassTypeId)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextDetail
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoTextDetail_initClass)
    def copy(*args): return Coin_SWIG_Python.SoTextDetail_copy(*args)
    def getStringIndex(*args): return Coin_SWIG_Python.SoTextDetail_getStringIndex(*args)
    def getCharacterIndex(*args): return Coin_SWIG_Python.SoTextDetail_getCharacterIndex(*args)
    def getPart(*args): return Coin_SWIG_Python.SoTextDetail_getPart(*args)
    def setStringIndex(*args): return Coin_SWIG_Python.SoTextDetail_setStringIndex(*args)
    def setCharacterIndex(*args): return Coin_SWIG_Python.SoTextDetail_setCharacterIndex(*args)
    def setPart(*args): return Coin_SWIG_Python.SoTextDetail_setPart(*args)
SoTextDetail_swigregister = Coin_SWIG_Python.SoTextDetail_swigregister
SoTextDetail_swigregister(SoTextDetail)
SoTextDetail_getClassTypeId = Coin_SWIG_Python.SoTextDetail_getClassTypeId
SoTextDetail_initClass = Coin_SWIG_Python.SoTextDetail_initClass

class SoSFNode(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFNode
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFNode_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFNode_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFNode_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFNode_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFNode_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFNode_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFNode___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFNode___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFNode_initClass)
    def fixCopy(*args): return Coin_SWIG_Python.SoSFNode_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoSFNode_referencesCopy(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFNode_setValue(*args)
SoSFNode_swigregister = Coin_SWIG_Python.SoSFNode_swigregister
SoSFNode_swigregister(SoSFNode)
SoSFNode_createInstance = Coin_SWIG_Python.SoSFNode_createInstance
SoSFNode_getClassTypeId = Coin_SWIG_Python.SoSFNode_getClassTypeId
SoSFNode_initClass = Coin_SWIG_Python.SoSFNode_initClass

SO_CATALOG_NAME_NOT_FOUND = Coin_SWIG_Python.SO_CATALOG_NAME_NOT_FOUND
class SoNodekitCatalog(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoNodekitCatalog_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNodekitCatalog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodekitCatalog
    __del__ = lambda self : None;
    def getNumEntries(*args): return Coin_SWIG_Python.SoNodekitCatalog_getNumEntries(*args)
    def getPartNumber(*args): return Coin_SWIG_Python.SoNodekitCatalog_getPartNumber(*args)
    def getName(*args): return Coin_SWIG_Python.SoNodekitCatalog_getName(*args)
    def getType(*args): return Coin_SWIG_Python.SoNodekitCatalog_getType(*args)
    def getDefaultType(*args): return Coin_SWIG_Python.SoNodekitCatalog_getDefaultType(*args)
    def isNullByDefault(*args): return Coin_SWIG_Python.SoNodekitCatalog_isNullByDefault(*args)
    def isLeaf(*args): return Coin_SWIG_Python.SoNodekitCatalog_isLeaf(*args)
    def getParentName(*args): return Coin_SWIG_Python.SoNodekitCatalog_getParentName(*args)
    def getParentPartNumber(*args): return Coin_SWIG_Python.SoNodekitCatalog_getParentPartNumber(*args)
    def getRightSiblingName(*args): return Coin_SWIG_Python.SoNodekitCatalog_getRightSiblingName(*args)
    def getRightSiblingPartNumber(*args): return Coin_SWIG_Python.SoNodekitCatalog_getRightSiblingPartNumber(*args)
    def isList(*args): return Coin_SWIG_Python.SoNodekitCatalog_isList(*args)
    def getListContainerType(*args): return Coin_SWIG_Python.SoNodekitCatalog_getListContainerType(*args)
    def getListItemTypes(*args): return Coin_SWIG_Python.SoNodekitCatalog_getListItemTypes(*args)
    def isPublic(*args): return Coin_SWIG_Python.SoNodekitCatalog_isPublic(*args)
    def clone(*args): return Coin_SWIG_Python.SoNodekitCatalog_clone(*args)
    def addEntry(*args): return Coin_SWIG_Python.SoNodekitCatalog_addEntry(*args)
    def addListItemType(*args): return Coin_SWIG_Python.SoNodekitCatalog_addListItemType(*args)
    def narrowTypes(*args): return Coin_SWIG_Python.SoNodekitCatalog_narrowTypes(*args)
    def setNullByDefault(*args): return Coin_SWIG_Python.SoNodekitCatalog_setNullByDefault(*args)
    def recursiveSearch(*args): return Coin_SWIG_Python.SoNodekitCatalog_recursiveSearch(*args)
    def printCheck(*args): return Coin_SWIG_Python.SoNodekitCatalog_printCheck(*args)
SoNodekitCatalog_swigregister = Coin_SWIG_Python.SoNodekitCatalog_swigregister
SoNodekitCatalog_swigregister(SoNodekitCatalog)
SoNodekitCatalog_initClass = Coin_SWIG_Python.SoNodekitCatalog_initClass

class SoSFName(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFName
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFName_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFName_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFName_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFName_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFName_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFName_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFName___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFName___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFName_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFName_setValue(*args)
SoSFName_swigregister = Coin_SWIG_Python.SoSFName_swigregister
SoSFName_swigregister(SoSFName)
SoSFName_createInstance = Coin_SWIG_Python.SoSFName_createInstance
SoSFName_getClassTypeId = Coin_SWIG_Python.SoSFName_getClassTypeId
SoSFName_initClass = Coin_SWIG_Python.SoSFName_initClass

class SoMFName(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFName
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFName_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFName_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFName_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFName_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFName_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFName_find(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFName_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFName___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFName___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFName_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFName_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFName_initClass)
    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFName_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFName_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFName_setValues,args)


    def __getitem__(*args): return Coin_SWIG_Python.SoMFName___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFName___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFName_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFName_getValues(*args)
SoMFName_swigregister = Coin_SWIG_Python.SoMFName_swigregister
SoMFName_swigregister(SoMFName)
SoMFName_createInstance = Coin_SWIG_Python.SoMFName_createInstance
SoMFName_getClassTypeId = Coin_SWIG_Python.SoMFName_getClassTypeId
SoMFName_initClass = Coin_SWIG_Python.SoMFName_initClass

class SoNodeKitListPart(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNodeKitListPart_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNodeKitListPart_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNodeKitListPart_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNodeKitListPart(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContainerType(*args): return Coin_SWIG_Python.SoNodeKitListPart_getContainerType(*args)
    def setContainerType(*args): return Coin_SWIG_Python.SoNodeKitListPart_setContainerType(*args)
    def getChildTypes(*args): return Coin_SWIG_Python.SoNodeKitListPart_getChildTypes(*args)
    def addChildType(*args): return Coin_SWIG_Python.SoNodeKitListPart_addChildType(*args)
    def isTypePermitted(*args): return Coin_SWIG_Python.SoNodeKitListPart_isTypePermitted(*args)
    def isChildPermitted(*args): return Coin_SWIG_Python.SoNodeKitListPart_isChildPermitted(*args)
    def containerSet(*args): return Coin_SWIG_Python.SoNodeKitListPart_containerSet(*args)
    def lockTypes(*args): return Coin_SWIG_Python.SoNodeKitListPart_lockTypes(*args)
    def isTypeLocked(*args): return Coin_SWIG_Python.SoNodeKitListPart_isTypeLocked(*args)
    def addChild(*args): return Coin_SWIG_Python.SoNodeKitListPart_addChild(*args)
    def insertChild(*args): return Coin_SWIG_Python.SoNodeKitListPart_insertChild(*args)
    def getChild(*args): return Coin_SWIG_Python.SoNodeKitListPart_getChild(*args)
    def findChild(*args): return Coin_SWIG_Python.SoNodeKitListPart_findChild(*args)
    def getNumChildren(*args): return Coin_SWIG_Python.SoNodeKitListPart_getNumChildren(*args)
    def removeChild(*args): return Coin_SWIG_Python.SoNodeKitListPart_removeChild(*args)
    def replaceChild(*args): return Coin_SWIG_Python.SoNodeKitListPart_replaceChild(*args)
    def affectsState(*args): return Coin_SWIG_Python.SoNodeKitListPart_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoNodeKitListPart_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoNodeKitListPart_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoNodeKitListPart_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoNodeKitListPart_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoNodeKitListPart_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoNodeKitListPart_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoNodeKitListPart_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoNodeKitListPart_search(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoNodeKitListPart_getPrimitiveCount(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoNodeKitListPart_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeKitListPart
    __del__ = lambda self : None;
SoNodeKitListPart_swigregister = Coin_SWIG_Python.SoNodeKitListPart_swigregister
SoNodeKitListPart_swigregister(SoNodeKitListPart)
SoNodeKitListPart_getClassTypeId = Coin_SWIG_Python.SoNodeKitListPart_getClassTypeId
SoNodeKitListPart_initClass = Coin_SWIG_Python.SoNodeKitListPart_initClass

class SoNodeKitPath(SoPath):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getLength(*args): return Coin_SWIG_Python.SoNodeKitPath_getLength(*args)
    def getTail(*args): return Coin_SWIG_Python.SoNodeKitPath_getTail(*args)
    def getNode(*args): return Coin_SWIG_Python.SoNodeKitPath_getNode(*args)
    def getNodeFromTail(*args): return Coin_SWIG_Python.SoNodeKitPath_getNodeFromTail(*args)
    def truncate(*args): return Coin_SWIG_Python.SoNodeKitPath_truncate(*args)
    def pop(*args): return Coin_SWIG_Python.SoNodeKitPath_pop(*args)
    def append(*args): return Coin_SWIG_Python.SoNodeKitPath_append(*args)
    def containsNode(*args): return Coin_SWIG_Python.SoNodeKitPath_containsNode(*args)
    def findFork(*args): return Coin_SWIG_Python.SoNodeKitPath_findFork(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoNodeKitPath___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SoNodeKitPath___nq__(*args)
SoNodeKitPath_swigregister = Coin_SWIG_Python.SoNodeKitPath_swigregister
SoNodeKitPath_swigregister(SoNodeKitPath)

class SoChildList(SoNodeList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoChildList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoChildList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SoChildList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SoChildList_insert(*args)
    def remove(*args): return Coin_SWIG_Python.SoChildList_remove(*args)
    def truncate(*args): return Coin_SWIG_Python.SoChildList_truncate(*args)
    def copy(*args): return Coin_SWIG_Python.SoChildList_copy(*args)
    def set(*args): return Coin_SWIG_Python.SoChildList_set(*args)
    def traverseInPath(*args): return Coin_SWIG_Python.SoChildList_traverseInPath(*args)
    def traverse(*args): return Coin_SWIG_Python.SoChildList_traverse(*args)
    def addPathAuditor(*args): return Coin_SWIG_Python.SoChildList_addPathAuditor(*args)
    def removePathAuditor(*args): return Coin_SWIG_Python.SoChildList_removePathAuditor(*args)
SoChildList_swigregister = Coin_SWIG_Python.SoChildList_swigregister
SoChildList_swigregister(SoChildList)

class SoBaseKit(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBaseKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBaseKit_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoBaseKit_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBaseKit(*args)
        try: self.this.append(this)
        except: self.this = this
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoBaseKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoBaseKit_getNodekitCatalog(*args)
    def getPart(*args): return Coin_SWIG_Python.SoBaseKit_getPart(*args)
    def getPartString(*args): return Coin_SWIG_Python.SoBaseKit_getPartString(*args)
    def createPathToPart(*args): return Coin_SWIG_Python.SoBaseKit_createPathToPart(*args)
    def setPart(*args): return Coin_SWIG_Python.SoBaseKit_setPart(*args)
    def set(*args): return Coin_SWIG_Python.SoBaseKit_set(*args)
    def doAction(*args): return Coin_SWIG_Python.SoBaseKit_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoBaseKit_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoBaseKit_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoBaseKit_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoBaseKit_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoBaseKit_handleEvent(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoBaseKit_rayPick(*args)
    def search(*args): return Coin_SWIG_Python.SoBaseKit_search(*args)
    def write(*args): return Coin_SWIG_Python.SoBaseKit_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoBaseKit_getPrimitiveCount(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoBaseKit_getChildren(*args)
    def printDiagram(*args): return Coin_SWIG_Python.SoBaseKit_printDiagram(*args)
    def printSubDiagram(*args): return Coin_SWIG_Python.SoBaseKit_printSubDiagram(*args)
    def printTable(*args): return Coin_SWIG_Python.SoBaseKit_printTable(*args)
    def addWriteReference(*args): return Coin_SWIG_Python.SoBaseKit_addWriteReference(*args)
    def forceChildDrivenWriteRefs(*args): return Coin_SWIG_Python.SoBaseKit_forceChildDrivenWriteRefs(*args)
    isSearchingChildren = staticmethod(Coin_SWIG_Python.SoBaseKit_isSearchingChildren)
    setSearchingChildren = staticmethod(Coin_SWIG_Python.SoBaseKit_setSearchingChildren)
    typeCheck = staticmethod(Coin_SWIG_Python.SoBaseKit_typeCheck)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBaseKit
    __del__ = lambda self : None;
    def __getattr__(self,name):
        try:
            return SoNode.__getattr__(self, name)
        except AttributeError, e:
            c = _coin.SoBaseKit_getNodekitCatalog(self)
            if c.getPartNumber(name) >= 0:
                part = self.getPart(name,1)
                return part
            raise e

    def __setattr__(self,name,value):
       if name == 'this':
          return SoNode.__setattr__(self,name,value)
       c = _coin.SoBaseKit_getNodekitCatalog(self)
       if c.getPartNumber(name) >= 0:
          return self.setPart(name, value)
       return SoNode.__setattr__(self,name,value)       

SoBaseKit_swigregister = Coin_SWIG_Python.SoBaseKit_swigregister
SoBaseKit_swigregister(SoBaseKit)
SoBaseKit_getClassTypeId = Coin_SWIG_Python.SoBaseKit_getClassTypeId
SoBaseKit_initClass = Coin_SWIG_Python.SoBaseKit_initClass
SoBaseKit_getClassNodekitCatalog = Coin_SWIG_Python.SoBaseKit_getClassNodekitCatalog
SoBaseKit_isSearchingChildren = Coin_SWIG_Python.SoBaseKit_isSearchingChildren
SoBaseKit_setSearchingChildren = Coin_SWIG_Python.SoBaseKit_setSearchingChildren
SoBaseKit_typeCheck = Coin_SWIG_Python.SoBaseKit_typeCheck

class SoSensor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSensor
    __del__ = lambda self : None;
    def setFunction(*args): return Coin_SWIG_Python.SoSensor_setFunction(*args)
    def getFunction(*args): return Coin_SWIG_Python.SoSensor_getFunction(*args)
    def setData(*args): return Coin_SWIG_Python.SoSensor_setData(*args)
    def getData(*args): return Coin_SWIG_Python.SoSensor_getData(*args)
    def schedule(*args): return Coin_SWIG_Python.SoSensor_schedule(*args)
    def unschedule(*args): return Coin_SWIG_Python.SoSensor_unschedule(*args)
    def isScheduled(*args): return Coin_SWIG_Python.SoSensor_isScheduled(*args)
    def trigger(*args): return Coin_SWIG_Python.SoSensor_trigger(*args)
    def isBefore(*args): return Coin_SWIG_Python.SoSensor_isBefore(*args)
    def setNextInQueue(*args): return Coin_SWIG_Python.SoSensor_setNextInQueue(*args)
    def getNextInQueue(*args): return Coin_SWIG_Python.SoSensor_getNextInQueue(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSensor_initClass)
SoSensor_swigregister = Coin_SWIG_Python.SoSensor_swigregister
SoSensor_swigregister(SoSensor)
SoSensor_initClass = Coin_SWIG_Python.SoSensor_initClass

class SoDelayQueueSensor(SoSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoDelayQueueSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoDelayQueueSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoDelayQueueSensor
    __del__ = lambda self : None;
    def setPriority(*args): return Coin_SWIG_Python.SoDelayQueueSensor_setPriority(*args)
    def getPriority(*args): return Coin_SWIG_Python.SoDelayQueueSensor_getPriority(*args)
    getDefaultPriority = staticmethod(Coin_SWIG_Python.SoDelayQueueSensor_getDefaultPriority)
    def schedule(*args): return Coin_SWIG_Python.SoDelayQueueSensor_schedule(*args)
    def unschedule(*args): return Coin_SWIG_Python.SoDelayQueueSensor_unschedule(*args)
    def isScheduled(*args): return Coin_SWIG_Python.SoDelayQueueSensor_isScheduled(*args)
    def isIdleOnly(*args): return Coin_SWIG_Python.SoDelayQueueSensor_isIdleOnly(*args)
    def trigger(*args): return Coin_SWIG_Python.SoDelayQueueSensor_trigger(*args)
SoDelayQueueSensor_swigregister = Coin_SWIG_Python.SoDelayQueueSensor_swigregister
SoDelayQueueSensor_swigregister(SoDelayQueueSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoDelayQueueSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoDelayQueueSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown


SoDelayQueueSensor_getDefaultPriority = Coin_SWIG_Python.SoDelayQueueSensor_getDefaultPriority

class SoDataSensor(SoDelayQueueSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDataSensor
    __del__ = lambda self : None;
    def setDeleteCallback(*args): return Coin_SWIG_Python.SoDataSensor_setDeleteCallback(*args)
    def getTriggerNode(*args): return Coin_SWIG_Python.SoDataSensor_getTriggerNode(*args)
    def getTriggerField(*args): return Coin_SWIG_Python.SoDataSensor_getTriggerField(*args)
    def getTriggerPath(*args): return Coin_SWIG_Python.SoDataSensor_getTriggerPath(*args)
    def setTriggerPathFlag(*args): return Coin_SWIG_Python.SoDataSensor_setTriggerPathFlag(*args)
    def getTriggerPathFlag(*args): return Coin_SWIG_Python.SoDataSensor_getTriggerPathFlag(*args)
    def trigger(*args): return Coin_SWIG_Python.SoDataSensor_trigger(*args)
    def notify(*args): return Coin_SWIG_Python.SoDataSensor_notify(*args)
    def dyingReference(*args): return Coin_SWIG_Python.SoDataSensor_dyingReference(*args)
SoDataSensor_swigregister = Coin_SWIG_Python.SoDataSensor_swigregister
SoDataSensor_swigregister(SoDataSensor)

class SoFieldSensor(SoDataSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoFieldSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoFieldSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldSensor
    __del__ = lambda self : None;
    def attach(*args): return Coin_SWIG_Python.SoFieldSensor_attach(*args)
    def detach(*args): return Coin_SWIG_Python.SoFieldSensor_detach(*args)
    def getAttachedField(*args): return Coin_SWIG_Python.SoFieldSensor_getAttachedField(*args)
    def trigger(*args): return Coin_SWIG_Python.SoFieldSensor_trigger(*args)
SoFieldSensor_swigregister = Coin_SWIG_Python.SoFieldSensor_swigregister
SoFieldSensor_swigregister(SoFieldSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoFieldSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoFieldSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoInteractionKit(SoBaseKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInteractionKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInteractionKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoInteractionKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoInteractionKit_getNodekitCatalog(*args)
    renderCaching = _swig_property(Coin_SWIG_Python.SoInteractionKit_renderCaching_get, Coin_SWIG_Python.SoInteractionKit_renderCaching_set)
    boundingBoxCaching = _swig_property(Coin_SWIG_Python.SoInteractionKit_boundingBoxCaching_get, Coin_SWIG_Python.SoInteractionKit_boundingBoxCaching_set)
    renderCulling = _swig_property(Coin_SWIG_Python.SoInteractionKit_renderCulling_get, Coin_SWIG_Python.SoInteractionKit_renderCulling_set)
    pickCulling = _swig_property(Coin_SWIG_Python.SoInteractionKit_pickCulling_get, Coin_SWIG_Python.SoInteractionKit_pickCulling_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInteractionKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoInteractionKit_initClass)
    OFF = Coin_SWIG_Python.SoInteractionKit_OFF
    ON = Coin_SWIG_Python.SoInteractionKit_ON
    AUTO = Coin_SWIG_Python.SoInteractionKit_AUTO
    def setPartAsPath(*args): return Coin_SWIG_Python.SoInteractionKit_setPartAsPath(*args)
    def setPartAsDefault(*args): return Coin_SWIG_Python.SoInteractionKit_setPartAsDefault(*args)
    def isPathSurrogateInMySubgraph(*args): return Coin_SWIG_Python.SoInteractionKit_isPathSurrogateInMySubgraph(*args)
    setSwitchValue = staticmethod(Coin_SWIG_Python.SoInteractionKit_setSwitchValue)
    def setPart(*args): return Coin_SWIG_Python.SoInteractionKit_setPart(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInteractionKit
    __del__ = lambda self : None;
SoInteractionKit_swigregister = Coin_SWIG_Python.SoInteractionKit_swigregister
SoInteractionKit_swigregister(SoInteractionKit)
SoInteractionKit_getClassTypeId = Coin_SWIG_Python.SoInteractionKit_getClassTypeId
SoInteractionKit_getClassNodekitCatalog = Coin_SWIG_Python.SoInteractionKit_getClassNodekitCatalog
SoInteractionKit_initClass = Coin_SWIG_Python.SoInteractionKit_initClass
SoInteractionKit_setSwitchValue = Coin_SWIG_Python.SoInteractionKit_setSwitchValue

class SoSFBool(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBool
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBool_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBool_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBool_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBool_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBool_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBool_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBool___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBool___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBool_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBool_setValue(*args)
SoSFBool_swigregister = Coin_SWIG_Python.SoSFBool_swigregister
SoSFBool_swigregister(SoSFBool)
SoSFBool_createInstance = Coin_SWIG_Python.SoSFBool_createInstance
SoSFBool_getClassTypeId = Coin_SWIG_Python.SoSFBool_getClassTypeId
SoSFBool_initClass = Coin_SWIG_Python.SoSFBool_initClass

class SoCallbackList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCallbackList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCallbackList
    __del__ = lambda self : None;
    def addCallback(*args): return Coin_SWIG_Python.SoCallbackList_addCallback(*args)
    def removeCallback(*args): return Coin_SWIG_Python.SoCallbackList_removeCallback(*args)
    def clearCallbacks(*args): return Coin_SWIG_Python.SoCallbackList_clearCallbacks(*args)
    def getNumCallbacks(*args): return Coin_SWIG_Python.SoCallbackList_getNumCallbacks(*args)
    def invokeCallbacks(*args): return Coin_SWIG_Python.SoCallbackList_invokeCallbacks(*args)
SoCallbackList_swigregister = Coin_SWIG_Python.SoCallbackList_swigregister
SoCallbackList_swigregister(SoCallbackList)

class SbVec3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def cross(*args): return Coin_SWIG_Python.SbVec3d_cross(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec3d_dot(*args)
    def equals(*args): return Coin_SWIG_Python.SbVec3d_equals(*args)
    def getClosestAxis(*args): return Coin_SWIG_Python.SbVec3d_getClosestAxis(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec3d_getValue(*args)
    def length(*args): return Coin_SWIG_Python.SbVec3d_length(*args)
    def sqrLength(*args): return Coin_SWIG_Python.SbVec3d_sqrLength(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec3d_negate(*args)
    def normalize(*args): return Coin_SWIG_Python.SbVec3d_normalize(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec3d_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec3d___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec3d___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec3d___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec3d___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec3d___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec3d_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec3d___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec3d___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec3d___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec3d___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec3d___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec3d___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec3d___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec3d___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec3d___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3d
    __del__ = lambda self : None;
SbVec3d_swigregister = Coin_SWIG_Python.SbVec3d_swigregister
SbVec3d_swigregister(SbVec3d)

class SbDPViewVolume(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ORTHOGRAPHIC = Coin_SWIG_Python.SbDPViewVolume_ORTHOGRAPHIC
    PERSPECTIVE = Coin_SWIG_Python.SbDPViewVolume_PERSPECTIVE
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbDPViewVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPViewVolume
    __del__ = lambda self : None;
    def getMatrices(*args): return Coin_SWIG_Python.SbDPViewVolume_getMatrices(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SbDPViewVolume_getMatrix(*args)
    def getCameraSpaceMatrix(*args): return Coin_SWIG_Python.SbDPViewVolume_getCameraSpaceMatrix(*args)
    def projectPointToLine(*args): return Coin_SWIG_Python.SbDPViewVolume_projectPointToLine(*args)
    def projectToScreen(*args): return Coin_SWIG_Python.SbDPViewVolume_projectToScreen(*args)
    def getPlane(*args): return Coin_SWIG_Python.SbDPViewVolume_getPlane(*args)
    def getSightPoint(*args): return Coin_SWIG_Python.SbDPViewVolume_getSightPoint(*args)
    def getPlanePoint(*args): return Coin_SWIG_Python.SbDPViewVolume_getPlanePoint(*args)
    def getAlignRotation(*args): return Coin_SWIG_Python.SbDPViewVolume_getAlignRotation(*args)
    def getWorldToScreenScale(*args): return Coin_SWIG_Python.SbDPViewVolume_getWorldToScreenScale(*args)
    def projectBox(*args): return Coin_SWIG_Python.SbDPViewVolume_projectBox(*args)
    def narrow(*args): return Coin_SWIG_Python.SbDPViewVolume_narrow(*args)
    def ortho(*args): return Coin_SWIG_Python.SbDPViewVolume_ortho(*args)
    def perspective(*args): return Coin_SWIG_Python.SbDPViewVolume_perspective(*args)
    def frustum(*args): return Coin_SWIG_Python.SbDPViewVolume_frustum(*args)
    def rotateCamera(*args): return Coin_SWIG_Python.SbDPViewVolume_rotateCamera(*args)
    def translateCamera(*args): return Coin_SWIG_Python.SbDPViewVolume_translateCamera(*args)
    def zVector(*args): return Coin_SWIG_Python.SbDPViewVolume_zVector(*args)
    def zNarrow(*args): return Coin_SWIG_Python.SbDPViewVolume_zNarrow(*args)
    def scale(*args): return Coin_SWIG_Python.SbDPViewVolume_scale(*args)
    def scaleWidth(*args): return Coin_SWIG_Python.SbDPViewVolume_scaleWidth(*args)
    def scaleHeight(*args): return Coin_SWIG_Python.SbDPViewVolume_scaleHeight(*args)
    def getProjectionType(*args): return Coin_SWIG_Python.SbDPViewVolume_getProjectionType(*args)
    def getProjectionPoint(*args): return Coin_SWIG_Python.SbDPViewVolume_getProjectionPoint(*args)
    def getProjectionDirection(*args): return Coin_SWIG_Python.SbDPViewVolume_getProjectionDirection(*args)
    def getNearDist(*args): return Coin_SWIG_Python.SbDPViewVolume_getNearDist(*args)
    def getWidth(*args): return Coin_SWIG_Python.SbDPViewVolume_getWidth(*args)
    def getHeight(*args): return Coin_SWIG_Python.SbDPViewVolume_getHeight(*args)
    def getDepth(*args): return Coin_SWIG_Python.SbDPViewVolume_getDepth(*args)
    def output(*args): return Coin_SWIG_Python.SbDPViewVolume_output(*args)
    def getViewVolumePlanes(*args): return Coin_SWIG_Python.SbDPViewVolume_getViewVolumePlanes(*args)
    def transform(*args): return Coin_SWIG_Python.SbDPViewVolume_transform(*args)
    def getViewUp(*args): return Coin_SWIG_Python.SbDPViewVolume_getViewUp(*args)
    def copyValues(*args): return Coin_SWIG_Python.SbDPViewVolume_copyValues(*args)
SbDPViewVolume_swigregister = Coin_SWIG_Python.SbDPViewVolume_swigregister
SbDPViewVolume_swigregister(SbDPViewVolume)

class SbViewVolume(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ORTHOGRAPHIC = Coin_SWIG_Python.SbViewVolume_ORTHOGRAPHIC
    PERSPECTIVE = Coin_SWIG_Python.SbViewVolume_PERSPECTIVE
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbViewVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbViewVolume
    __del__ = lambda self : None;
    def getMatrices(*args): return Coin_SWIG_Python.SbViewVolume_getMatrices(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SbViewVolume_getMatrix(*args)
    def getCameraSpaceMatrix(*args): return Coin_SWIG_Python.SbViewVolume_getCameraSpaceMatrix(*args)
    def projectPointToLine(*args): return Coin_SWIG_Python.SbViewVolume_projectPointToLine(*args)
    def projectToScreen(*args): return Coin_SWIG_Python.SbViewVolume_projectToScreen(*args)
    def getPlane(*args): return Coin_SWIG_Python.SbViewVolume_getPlane(*args)
    def getSightPoint(*args): return Coin_SWIG_Python.SbViewVolume_getSightPoint(*args)
    def getPlanePoint(*args): return Coin_SWIG_Python.SbViewVolume_getPlanePoint(*args)
    def getAlignRotation(*args): return Coin_SWIG_Python.SbViewVolume_getAlignRotation(*args)
    def getWorldToScreenScale(*args): return Coin_SWIG_Python.SbViewVolume_getWorldToScreenScale(*args)
    def projectBox(*args): return Coin_SWIG_Python.SbViewVolume_projectBox(*args)
    def narrow(*args): return Coin_SWIG_Python.SbViewVolume_narrow(*args)
    def ortho(*args): return Coin_SWIG_Python.SbViewVolume_ortho(*args)
    def perspective(*args): return Coin_SWIG_Python.SbViewVolume_perspective(*args)
    def frustum(*args): return Coin_SWIG_Python.SbViewVolume_frustum(*args)
    def rotateCamera(*args): return Coin_SWIG_Python.SbViewVolume_rotateCamera(*args)
    def translateCamera(*args): return Coin_SWIG_Python.SbViewVolume_translateCamera(*args)
    def zVector(*args): return Coin_SWIG_Python.SbViewVolume_zVector(*args)
    def zNarrow(*args): return Coin_SWIG_Python.SbViewVolume_zNarrow(*args)
    def scale(*args): return Coin_SWIG_Python.SbViewVolume_scale(*args)
    def scaleWidth(*args): return Coin_SWIG_Python.SbViewVolume_scaleWidth(*args)
    def scaleHeight(*args): return Coin_SWIG_Python.SbViewVolume_scaleHeight(*args)
    def getProjectionType(*args): return Coin_SWIG_Python.SbViewVolume_getProjectionType(*args)
    def getProjectionPoint(*args): return Coin_SWIG_Python.SbViewVolume_getProjectionPoint(*args)
    def getProjectionDirection(*args): return Coin_SWIG_Python.SbViewVolume_getProjectionDirection(*args)
    def getNearDist(*args): return Coin_SWIG_Python.SbViewVolume_getNearDist(*args)
    def getWidth(*args): return Coin_SWIG_Python.SbViewVolume_getWidth(*args)
    def getHeight(*args): return Coin_SWIG_Python.SbViewVolume_getHeight(*args)
    def getDepth(*args): return Coin_SWIG_Python.SbViewVolume_getDepth(*args)
    def output(*args): return Coin_SWIG_Python.SbViewVolume_output(*args)
    def getViewVolumePlanes(*args): return Coin_SWIG_Python.SbViewVolume_getViewVolumePlanes(*args)
    def transform(*args): return Coin_SWIG_Python.SbViewVolume_transform(*args)
    def getViewUp(*args): return Coin_SWIG_Python.SbViewVolume_getViewUp(*args)
    def intersect(*args): return Coin_SWIG_Python.SbViewVolume_intersect(*args)
    def outsideTest(*args): return Coin_SWIG_Python.SbViewVolume_outsideTest(*args)
    type = _swig_property(Coin_SWIG_Python.SbViewVolume_type_get, Coin_SWIG_Python.SbViewVolume_type_set)
    projPoint = _swig_property(Coin_SWIG_Python.SbViewVolume_projPoint_get, Coin_SWIG_Python.SbViewVolume_projPoint_set)
    projDir = _swig_property(Coin_SWIG_Python.SbViewVolume_projDir_get, Coin_SWIG_Python.SbViewVolume_projDir_set)
    nearDist = _swig_property(Coin_SWIG_Python.SbViewVolume_nearDist_get, Coin_SWIG_Python.SbViewVolume_nearDist_set)
    nearToFar = _swig_property(Coin_SWIG_Python.SbViewVolume_nearToFar_get, Coin_SWIG_Python.SbViewVolume_nearToFar_set)
    llf = _swig_property(Coin_SWIG_Python.SbViewVolume_llf_get, Coin_SWIG_Python.SbViewVolume_llf_set)
    lrf = _swig_property(Coin_SWIG_Python.SbViewVolume_lrf_get, Coin_SWIG_Python.SbViewVolume_lrf_set)
    ulf = _swig_property(Coin_SWIG_Python.SbViewVolume_ulf_get, Coin_SWIG_Python.SbViewVolume_ulf_set)
SbViewVolume_swigregister = Coin_SWIG_Python.SbViewVolume_swigregister
SbViewVolume_swigregister(SbViewVolume)

class SoSFVec3f(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec3f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec3f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec3f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec3f_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec3f_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec3f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec3f___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec3f_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec3f_setValue(*args)
SoSFVec3f_swigregister = Coin_SWIG_Python.SoSFVec3f_swigregister
SoSFVec3f_swigregister(SoSFVec3f)
SoSFVec3f_createInstance = Coin_SWIG_Python.SoSFVec3f_createInstance
SoSFVec3f_getClassTypeId = Coin_SWIG_Python.SoSFVec3f_getClassTypeId
SoSFVec3f_initClass = Coin_SWIG_Python.SoSFVec3f_initClass

class SoScale(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoScale_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoScale_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoScale_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoScale(*args)
        try: self.this.append(this)
        except: self.this = this
    scaleFactor = _swig_property(Coin_SWIG_Python.SoScale_scaleFactor_get, Coin_SWIG_Python.SoScale_scaleFactor_set)
    def doAction(*args): return Coin_SWIG_Python.SoScale_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoScale_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoScale_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoScale_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoScale_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoScale_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoScale_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale
    __del__ = lambda self : None;
SoScale_swigregister = Coin_SWIG_Python.SoScale_swigregister
SoScale_swigregister(SoScale)
SoScale_getClassTypeId = Coin_SWIG_Python.SoScale_getClassTypeId
SoScale_initClass = Coin_SWIG_Python.SoScale_initClass

class SoDragger(SoInteractionKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoDragger_getNodekitCatalog(*args)
    isActive = _swig_property(Coin_SWIG_Python.SoDragger_isActive_get, Coin_SWIG_Python.SoDragger_isActive_set)
    FRONT = Coin_SWIG_Python.SoDragger_FRONT
    BACK = Coin_SWIG_Python.SoDragger_BACK
    USE_PICK = Coin_SWIG_Python.SoDragger_USE_PICK
    def callback(*args): return Coin_SWIG_Python.SoDragger_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoDragger_GLRender(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoDragger_getMatrix(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoDragger_rayPick(*args)
    def search(*args): return Coin_SWIG_Python.SoDragger_search(*args)
    def write(*args): return Coin_SWIG_Python.SoDragger_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoDragger_getPrimitiveCount(*args)
    def setMinGesture(*args): return Coin_SWIG_Python.SoDragger_setMinGesture(*args)
    def getMinGesture(*args): return Coin_SWIG_Python.SoDragger_getMinGesture(*args)
    def enableValueChangedCallbacks(*args): return Coin_SWIG_Python.SoDragger_enableValueChangedCallbacks(*args)
    def getMotionMatrix(*args): return Coin_SWIG_Python.SoDragger_getMotionMatrix(*args)
    def registerChildDragger(*args): return Coin_SWIG_Python.SoDragger_registerChildDragger(*args)
    def unregisterChildDragger(*args): return Coin_SWIG_Python.SoDragger_unregisterChildDragger(*args)
    def registerChildDraggerMovingIndependently(*args): return Coin_SWIG_Python.SoDragger_registerChildDraggerMovingIndependently(*args)
    def unregisterChildDraggerMovingIndependently(*args): return Coin_SWIG_Python.SoDragger_unregisterChildDraggerMovingIndependently(*args)
    def getLocalToWorldMatrix(*args): return Coin_SWIG_Python.SoDragger_getLocalToWorldMatrix(*args)
    def getWorldToLocalMatrix(*args): return Coin_SWIG_Python.SoDragger_getWorldToLocalMatrix(*args)
    def getLocalStartingPoint(*args): return Coin_SWIG_Python.SoDragger_getLocalStartingPoint(*args)
    def getWorldStartingPoint(*args): return Coin_SWIG_Python.SoDragger_getWorldStartingPoint(*args)
    def getPartToLocalMatrix(*args): return Coin_SWIG_Python.SoDragger_getPartToLocalMatrix(*args)
    def transformMatrixLocalToWorld(*args): return Coin_SWIG_Python.SoDragger_transformMatrixLocalToWorld(*args)
    def transformMatrixWorldToLocal(*args): return Coin_SWIG_Python.SoDragger_transformMatrixWorldToLocal(*args)
    def transformMatrixToLocalSpace(*args): return Coin_SWIG_Python.SoDragger_transformMatrixToLocalSpace(*args)
    def setMotionMatrix(*args): return Coin_SWIG_Python.SoDragger_setMotionMatrix(*args)
    def valueChanged(*args): return Coin_SWIG_Python.SoDragger_valueChanged(*args)
    def getStartMotionMatrix(*args): return Coin_SWIG_Python.SoDragger_getStartMotionMatrix(*args)
    def saveStartParameters(*args): return Coin_SWIG_Python.SoDragger_saveStartParameters(*args)
    def getPickPath(*args): return Coin_SWIG_Python.SoDragger_getPickPath(*args)
    def getEvent(*args): return Coin_SWIG_Python.SoDragger_getEvent(*args)
    def createPathToThis(*args): return Coin_SWIG_Python.SoDragger_createPathToThis(*args)
    def getSurrogatePartPickedOwner(*args): return Coin_SWIG_Python.SoDragger_getSurrogatePartPickedOwner(*args)
    def getSurrogatePartPickedName(*args): return Coin_SWIG_Python.SoDragger_getSurrogatePartPickedName(*args)
    def getSurrogatePartPickedPath(*args): return Coin_SWIG_Python.SoDragger_getSurrogatePartPickedPath(*args)
    def setStartingPoint(*args): return Coin_SWIG_Python.SoDragger_setStartingPoint(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoDragger_getViewVolume(*args)
    def setViewVolume(*args): return Coin_SWIG_Python.SoDragger_setViewVolume(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoDragger_getViewportRegion(*args)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoDragger_setViewportRegion(*args)
    def getHandleEventAction(*args): return Coin_SWIG_Python.SoDragger_getHandleEventAction(*args)
    def setHandleEventAction(*args): return Coin_SWIG_Python.SoDragger_setHandleEventAction(*args)
    def setTempPathToThis(*args): return Coin_SWIG_Python.SoDragger_setTempPathToThis(*args)
    def grabEventsSetup(*args): return Coin_SWIG_Python.SoDragger_grabEventsSetup(*args)
    def grabEventsCleanup(*args): return Coin_SWIG_Python.SoDragger_grabEventsCleanup(*args)
    def workFieldsIntoTransform(*args): return Coin_SWIG_Python.SoDragger_workFieldsIntoTransform(*args)
    def setFrontOnProjector(*args): return Coin_SWIG_Python.SoDragger_setFrontOnProjector(*args)
    def getFrontOnProjector(*args): return Coin_SWIG_Python.SoDragger_getFrontOnProjector(*args)
    setMinScale = staticmethod(Coin_SWIG_Python.SoDragger_setMinScale)
    getMinScale = staticmethod(Coin_SWIG_Python.SoDragger_getMinScale)
    workValuesIntoTransform = staticmethod(Coin_SWIG_Python.SoDragger_workValuesIntoTransform)
    getTransformFast = staticmethod(Coin_SWIG_Python.SoDragger_getTransformFast)
    appendTranslation = staticmethod(Coin_SWIG_Python.SoDragger_appendTranslation)
    appendScale = staticmethod(Coin_SWIG_Python.SoDragger_appendScale)
    appendRotation = staticmethod(Coin_SWIG_Python.SoDragger_appendRotation)
    initClass = staticmethod(Coin_SWIG_Python.SoDragger_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoDragger_initClasses)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDragger
    __del__ = lambda self : None;
    def addStartCallback(*args): return Coin_SWIG_Python.SoDragger_addStartCallback(*args)
    def removeStartCallback(*args): return Coin_SWIG_Python.SoDragger_removeStartCallback(*args)
    def addMotionCallback(*args): return Coin_SWIG_Python.SoDragger_addMotionCallback(*args)
    def removeMotionCallback(*args): return Coin_SWIG_Python.SoDragger_removeMotionCallback(*args)
    def addFinishCallback(*args): return Coin_SWIG_Python.SoDragger_addFinishCallback(*args)
    def removeFinishCallback(*args): return Coin_SWIG_Python.SoDragger_removeFinishCallback(*args)
    def addValueChangedCallback(*args): return Coin_SWIG_Python.SoDragger_addValueChangedCallback(*args)
    def removeValueChangedCallback(*args): return Coin_SWIG_Python.SoDragger_removeValueChangedCallback(*args)
    def addOtherEventCallback(*args): return Coin_SWIG_Python.SoDragger_addOtherEventCallback(*args)
    def removeOtherEventCallback(*args): return Coin_SWIG_Python.SoDragger_removeOtherEventCallback(*args)
SoDragger_swigregister = Coin_SWIG_Python.SoDragger_swigregister
SoDragger_swigregister(SoDragger)
SoDragger_getClassTypeId = Coin_SWIG_Python.SoDragger_getClassTypeId
SoDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoDragger_getClassNodekitCatalog
SoDragger_setMinScale = Coin_SWIG_Python.SoDragger_setMinScale
SoDragger_getMinScale = Coin_SWIG_Python.SoDragger_getMinScale
SoDragger_workValuesIntoTransform = Coin_SWIG_Python.SoDragger_workValuesIntoTransform
SoDragger_getTransformFast = Coin_SWIG_Python.SoDragger_getTransformFast
SoDragger_appendTranslation = Coin_SWIG_Python.SoDragger_appendTranslation
SoDragger_appendScale = Coin_SWIG_Python.SoDragger_appendScale
SoDragger_appendRotation = Coin_SWIG_Python.SoDragger_appendRotation
SoDragger_initClass = Coin_SWIG_Python.SoDragger_initClass
SoDragger_initClasses = Coin_SWIG_Python.SoDragger_initClasses

class SoSFRotation(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFRotation
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFRotation_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFRotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFRotation_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFRotation_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFRotation_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFRotation___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFRotation___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFRotation_initClass)
    def getValue(*args): return Coin_SWIG_Python.SoSFRotation_getValue(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFRotation_setValue(*args)
SoSFRotation_swigregister = Coin_SWIG_Python.SoSFRotation_swigregister
SoSFRotation_swigregister(SoSFRotation)
SoSFRotation_createInstance = Coin_SWIG_Python.SoSFRotation_createInstance
SoSFRotation_getClassTypeId = Coin_SWIG_Python.SoSFRotation_getClassTypeId
SoSFRotation_initClass = Coin_SWIG_Python.SoSFRotation_initClass

class SoCenterballDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCenterballDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCenterballDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoCenterballDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoCenterballDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCenterballDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCenterballDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def saveStartParameters(*args): return Coin_SWIG_Python.SoCenterballDragger_saveStartParameters(*args)
    rotation = _swig_property(Coin_SWIG_Python.SoCenterballDragger_rotation_get, Coin_SWIG_Python.SoCenterballDragger_rotation_set)
    center = _swig_property(Coin_SWIG_Python.SoCenterballDragger_center_get, Coin_SWIG_Python.SoCenterballDragger_center_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCenterballDragger
    __del__ = lambda self : None;
SoCenterballDragger_swigregister = Coin_SWIG_Python.SoCenterballDragger_swigregister
SoCenterballDragger_swigregister(SoCenterballDragger)
SoCenterballDragger_getClassTypeId = Coin_SWIG_Python.SoCenterballDragger_getClassTypeId
SoCenterballDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoCenterballDragger_getClassNodekitCatalog
SoCenterballDragger_initClass = Coin_SWIG_Python.SoCenterballDragger_initClass

class SoDirectionalLightDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDirectionalLightDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDirectionalLightDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoDirectionalLightDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoDirectionalLightDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoDirectionalLightDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDirectionalLightDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoDirectionalLightDragger_rotation_get, Coin_SWIG_Python.SoDirectionalLightDragger_rotation_set)
    translation = _swig_property(Coin_SWIG_Python.SoDirectionalLightDragger_translation_get, Coin_SWIG_Python.SoDirectionalLightDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDirectionalLightDragger
    __del__ = lambda self : None;
SoDirectionalLightDragger_swigregister = Coin_SWIG_Python.SoDirectionalLightDragger_swigregister
SoDirectionalLightDragger_swigregister(SoDirectionalLightDragger)
SoDirectionalLightDragger_getClassTypeId = Coin_SWIG_Python.SoDirectionalLightDragger_getClassTypeId
SoDirectionalLightDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoDirectionalLightDragger_getClassNodekitCatalog
SoDirectionalLightDragger_initClass = Coin_SWIG_Python.SoDirectionalLightDragger_initClass

class SoDragPointDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDragPointDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDragPointDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoDragPointDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoDragPointDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoDragPointDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDragPointDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    def setJumpLimit(*args): return Coin_SWIG_Python.SoDragPointDragger_setJumpLimit(*args)
    def getJumpLimit(*args): return Coin_SWIG_Python.SoDragPointDragger_getJumpLimit(*args)
    def showNextDraggerSet(*args): return Coin_SWIG_Python.SoDragPointDragger_showNextDraggerSet(*args)
    translation = _swig_property(Coin_SWIG_Python.SoDragPointDragger_translation_get, Coin_SWIG_Python.SoDragPointDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDragPointDragger
    __del__ = lambda self : None;
SoDragPointDragger_swigregister = Coin_SWIG_Python.SoDragPointDragger_swigregister
SoDragPointDragger_swigregister(SoDragPointDragger)
SoDragPointDragger_getClassTypeId = Coin_SWIG_Python.SoDragPointDragger_getClassTypeId
SoDragPointDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoDragPointDragger_getClassNodekitCatalog
SoDragPointDragger_initClass = Coin_SWIG_Python.SoDragPointDragger_initClass

class SoHandleBoxDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoHandleBoxDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoHandleBoxDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoHandleBoxDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoHandleBoxDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoHandleBoxDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoHandleBoxDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    scaleFactor = _swig_property(Coin_SWIG_Python.SoHandleBoxDragger_scaleFactor_get, Coin_SWIG_Python.SoHandleBoxDragger_scaleFactor_set)
    translation = _swig_property(Coin_SWIG_Python.SoHandleBoxDragger_translation_get, Coin_SWIG_Python.SoHandleBoxDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHandleBoxDragger
    __del__ = lambda self : None;
SoHandleBoxDragger_swigregister = Coin_SWIG_Python.SoHandleBoxDragger_swigregister
SoHandleBoxDragger_swigregister(SoHandleBoxDragger)
SoHandleBoxDragger_getClassTypeId = Coin_SWIG_Python.SoHandleBoxDragger_getClassTypeId
SoHandleBoxDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoHandleBoxDragger_getClassNodekitCatalog
SoHandleBoxDragger_initClass = Coin_SWIG_Python.SoHandleBoxDragger_initClass

class SoJackDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoJackDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoJackDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoJackDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoJackDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoJackDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoJackDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoJackDragger_rotation_get, Coin_SWIG_Python.SoJackDragger_rotation_set)
    translation = _swig_property(Coin_SWIG_Python.SoJackDragger_translation_get, Coin_SWIG_Python.SoJackDragger_translation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoJackDragger_scaleFactor_get, Coin_SWIG_Python.SoJackDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoJackDragger
    __del__ = lambda self : None;
SoJackDragger_swigregister = Coin_SWIG_Python.SoJackDragger_swigregister
SoJackDragger_swigregister(SoJackDragger)
SoJackDragger_getClassTypeId = Coin_SWIG_Python.SoJackDragger_getClassTypeId
SoJackDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoJackDragger_getClassNodekitCatalog
SoJackDragger_initClass = Coin_SWIG_Python.SoJackDragger_initClass

class SoPointLightDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPointLightDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPointLightDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoPointLightDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoPointLightDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPointLightDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPointLightDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoPointLightDragger_translation_get, Coin_SWIG_Python.SoPointLightDragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointLightDragger
    __del__ = lambda self : None;
SoPointLightDragger_swigregister = Coin_SWIG_Python.SoPointLightDragger_swigregister
SoPointLightDragger_swigregister(SoPointLightDragger)
SoPointLightDragger_getClassTypeId = Coin_SWIG_Python.SoPointLightDragger_getClassTypeId
SoPointLightDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoPointLightDragger_getClassNodekitCatalog
SoPointLightDragger_initClass = Coin_SWIG_Python.SoPointLightDragger_initClass

class SoRotateCylindricalDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRotateCylindricalDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoRotateCylindricalDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoRotateCylindricalDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoRotateCylindricalDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoRotateCylindricalDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRotateCylindricalDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoRotateCylindricalDragger_rotation_get, Coin_SWIG_Python.SoRotateCylindricalDragger_rotation_set)
    def setProjector(*args): return Coin_SWIG_Python.SoRotateCylindricalDragger_setProjector(*args)
    def getProjector(*args): return Coin_SWIG_Python.SoRotateCylindricalDragger_getProjector(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotateCylindricalDragger
    __del__ = lambda self : None;
SoRotateCylindricalDragger_swigregister = Coin_SWIG_Python.SoRotateCylindricalDragger_swigregister
SoRotateCylindricalDragger_swigregister(SoRotateCylindricalDragger)
SoRotateCylindricalDragger_getClassTypeId = Coin_SWIG_Python.SoRotateCylindricalDragger_getClassTypeId
SoRotateCylindricalDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoRotateCylindricalDragger_getClassNodekitCatalog
SoRotateCylindricalDragger_initClass = Coin_SWIG_Python.SoRotateCylindricalDragger_initClass

class SoRotateDiscDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRotateDiscDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoRotateDiscDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoRotateDiscDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoRotateDiscDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoRotateDiscDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRotateDiscDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoRotateDiscDragger_rotation_get, Coin_SWIG_Python.SoRotateDiscDragger_rotation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotateDiscDragger
    __del__ = lambda self : None;
SoRotateDiscDragger_swigregister = Coin_SWIG_Python.SoRotateDiscDragger_swigregister
SoRotateDiscDragger_swigregister(SoRotateDiscDragger)
SoRotateDiscDragger_getClassTypeId = Coin_SWIG_Python.SoRotateDiscDragger_getClassTypeId
SoRotateDiscDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoRotateDiscDragger_getClassNodekitCatalog
SoRotateDiscDragger_initClass = Coin_SWIG_Python.SoRotateDiscDragger_initClass

class SoRotateSphericalDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRotateSphericalDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoRotateSphericalDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoRotateSphericalDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoRotateSphericalDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoRotateSphericalDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRotateSphericalDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoRotateSphericalDragger_rotation_get, Coin_SWIG_Python.SoRotateSphericalDragger_rotation_set)
    def setProjector(*args): return Coin_SWIG_Python.SoRotateSphericalDragger_setProjector(*args)
    def getProjector(*args): return Coin_SWIG_Python.SoRotateSphericalDragger_getProjector(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotateSphericalDragger
    __del__ = lambda self : None;
SoRotateSphericalDragger_swigregister = Coin_SWIG_Python.SoRotateSphericalDragger_swigregister
SoRotateSphericalDragger_swigregister(SoRotateSphericalDragger)
SoRotateSphericalDragger_getClassTypeId = Coin_SWIG_Python.SoRotateSphericalDragger_getClassTypeId
SoRotateSphericalDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoRotateSphericalDragger_getClassNodekitCatalog
SoRotateSphericalDragger_initClass = Coin_SWIG_Python.SoRotateSphericalDragger_initClass

class SoScale1Dragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoScale1Dragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoScale1Dragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoScale1Dragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoScale1Dragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoScale1Dragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoScale1Dragger(*args)
        try: self.this.append(this)
        except: self.this = this
    scaleFactor = _swig_property(Coin_SWIG_Python.SoScale1Dragger_scaleFactor_get, Coin_SWIG_Python.SoScale1Dragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale1Dragger
    __del__ = lambda self : None;
SoScale1Dragger_swigregister = Coin_SWIG_Python.SoScale1Dragger_swigregister
SoScale1Dragger_swigregister(SoScale1Dragger)
SoScale1Dragger_getClassTypeId = Coin_SWIG_Python.SoScale1Dragger_getClassTypeId
SoScale1Dragger_getClassNodekitCatalog = Coin_SWIG_Python.SoScale1Dragger_getClassNodekitCatalog
SoScale1Dragger_initClass = Coin_SWIG_Python.SoScale1Dragger_initClass

class SoScale2Dragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoScale2Dragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoScale2Dragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoScale2Dragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoScale2Dragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoScale2Dragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoScale2Dragger(*args)
        try: self.this.append(this)
        except: self.this = this
    scaleFactor = _swig_property(Coin_SWIG_Python.SoScale2Dragger_scaleFactor_get, Coin_SWIG_Python.SoScale2Dragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale2Dragger
    __del__ = lambda self : None;
SoScale2Dragger_swigregister = Coin_SWIG_Python.SoScale2Dragger_swigregister
SoScale2Dragger_swigregister(SoScale2Dragger)
SoScale2Dragger_getClassTypeId = Coin_SWIG_Python.SoScale2Dragger_getClassTypeId
SoScale2Dragger_getClassNodekitCatalog = Coin_SWIG_Python.SoScale2Dragger_getClassNodekitCatalog
SoScale2Dragger_initClass = Coin_SWIG_Python.SoScale2Dragger_initClass

class SoScale2UniformDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoScale2UniformDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoScale2UniformDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoScale2UniformDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoScale2UniformDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoScale2UniformDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoScale2UniformDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    scaleFactor = _swig_property(Coin_SWIG_Python.SoScale2UniformDragger_scaleFactor_get, Coin_SWIG_Python.SoScale2UniformDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScale2UniformDragger
    __del__ = lambda self : None;
SoScale2UniformDragger_swigregister = Coin_SWIG_Python.SoScale2UniformDragger_swigregister
SoScale2UniformDragger_swigregister(SoScale2UniformDragger)
SoScale2UniformDragger_getClassTypeId = Coin_SWIG_Python.SoScale2UniformDragger_getClassTypeId
SoScale2UniformDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoScale2UniformDragger_getClassNodekitCatalog
SoScale2UniformDragger_initClass = Coin_SWIG_Python.SoScale2UniformDragger_initClass

class SoScaleUniformDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoScaleUniformDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoScaleUniformDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoScaleUniformDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoScaleUniformDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoScaleUniformDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoScaleUniformDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    scaleFactor = _swig_property(Coin_SWIG_Python.SoScaleUniformDragger_scaleFactor_get, Coin_SWIG_Python.SoScaleUniformDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoScaleUniformDragger
    __del__ = lambda self : None;
SoScaleUniformDragger_swigregister = Coin_SWIG_Python.SoScaleUniformDragger_swigregister
SoScaleUniformDragger_swigregister(SoScaleUniformDragger)
SoScaleUniformDragger_getClassTypeId = Coin_SWIG_Python.SoScaleUniformDragger_getClassTypeId
SoScaleUniformDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoScaleUniformDragger_getClassNodekitCatalog
SoScaleUniformDragger_initClass = Coin_SWIG_Python.SoScaleUniformDragger_initClass

class SoSpotLightDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSpotLightDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSpotLightDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoSpotLightDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoSpotLightDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSpotLightDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSpotLightDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoSpotLightDragger_rotation_get, Coin_SWIG_Python.SoSpotLightDragger_rotation_set)
    translation = _swig_property(Coin_SWIG_Python.SoSpotLightDragger_translation_get, Coin_SWIG_Python.SoSpotLightDragger_translation_set)
    angle = _swig_property(Coin_SWIG_Python.SoSpotLightDragger_angle_get, Coin_SWIG_Python.SoSpotLightDragger_angle_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpotLightDragger
    __del__ = lambda self : None;
SoSpotLightDragger_swigregister = Coin_SWIG_Python.SoSpotLightDragger_swigregister
SoSpotLightDragger_swigregister(SoSpotLightDragger)
SoSpotLightDragger_getClassTypeId = Coin_SWIG_Python.SoSpotLightDragger_getClassTypeId
SoSpotLightDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoSpotLightDragger_getClassNodekitCatalog
SoSpotLightDragger_initClass = Coin_SWIG_Python.SoSpotLightDragger_initClass

class SoTabBoxDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTabBoxDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTabBoxDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTabBoxDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTabBoxDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTabBoxDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTabBoxDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTabBoxDragger_translation_get, Coin_SWIG_Python.SoTabBoxDragger_translation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTabBoxDragger_scaleFactor_get, Coin_SWIG_Python.SoTabBoxDragger_scaleFactor_set)
    def adjustScaleTabSize(*args): return Coin_SWIG_Python.SoTabBoxDragger_adjustScaleTabSize(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTabBoxDragger
    __del__ = lambda self : None;
SoTabBoxDragger_swigregister = Coin_SWIG_Python.SoTabBoxDragger_swigregister
SoTabBoxDragger_swigregister(SoTabBoxDragger)
SoTabBoxDragger_getClassTypeId = Coin_SWIG_Python.SoTabBoxDragger_getClassTypeId
SoTabBoxDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTabBoxDragger_getClassNodekitCatalog
SoTabBoxDragger_initClass = Coin_SWIG_Python.SoTabBoxDragger_initClass

class SoTabPlaneDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTabPlaneDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTabPlaneDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTabPlaneDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTabPlaneDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTabPlaneDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTabPlaneDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTabPlaneDragger_translation_get, Coin_SWIG_Python.SoTabPlaneDragger_translation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTabPlaneDragger_scaleFactor_get, Coin_SWIG_Python.SoTabPlaneDragger_scaleFactor_set)
    def adjustScaleTabSize(*args): return Coin_SWIG_Python.SoTabPlaneDragger_adjustScaleTabSize(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTabPlaneDragger
    __del__ = lambda self : None;
SoTabPlaneDragger_swigregister = Coin_SWIG_Python.SoTabPlaneDragger_swigregister
SoTabPlaneDragger_swigregister(SoTabPlaneDragger)
SoTabPlaneDragger_getClassTypeId = Coin_SWIG_Python.SoTabPlaneDragger_getClassTypeId
SoTabPlaneDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTabPlaneDragger_getClassNodekitCatalog
SoTabPlaneDragger_initClass = Coin_SWIG_Python.SoTabPlaneDragger_initClass

class SoTrackballDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTrackballDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTrackballDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTrackballDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTrackballDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTrackballDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTrackballDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoTrackballDragger_rotation_get, Coin_SWIG_Python.SoTrackballDragger_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTrackballDragger_scaleFactor_get, Coin_SWIG_Python.SoTrackballDragger_scaleFactor_set)
    def isAnimationEnabled(*args): return Coin_SWIG_Python.SoTrackballDragger_isAnimationEnabled(*args)
    def setAnimationEnabled(*args): return Coin_SWIG_Python.SoTrackballDragger_setAnimationEnabled(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTrackballDragger
    __del__ = lambda self : None;
SoTrackballDragger_swigregister = Coin_SWIG_Python.SoTrackballDragger_swigregister
SoTrackballDragger_swigregister(SoTrackballDragger)
SoTrackballDragger_getClassTypeId = Coin_SWIG_Python.SoTrackballDragger_getClassTypeId
SoTrackballDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTrackballDragger_getClassNodekitCatalog
SoTrackballDragger_initClass = Coin_SWIG_Python.SoTrackballDragger_initClass

class SoTransformBoxDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformBoxDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformBoxDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTransformBoxDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTransformBoxDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformBoxDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformBoxDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoTransformBoxDragger_rotation_get, Coin_SWIG_Python.SoTransformBoxDragger_rotation_set)
    translation = _swig_property(Coin_SWIG_Python.SoTransformBoxDragger_translation_get, Coin_SWIG_Python.SoTransformBoxDragger_translation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTransformBoxDragger_scaleFactor_get, Coin_SWIG_Python.SoTransformBoxDragger_scaleFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformBoxDragger
    __del__ = lambda self : None;
SoTransformBoxDragger_swigregister = Coin_SWIG_Python.SoTransformBoxDragger_swigregister
SoTransformBoxDragger_swigregister(SoTransformBoxDragger)
SoTransformBoxDragger_getClassTypeId = Coin_SWIG_Python.SoTransformBoxDragger_getClassTypeId
SoTransformBoxDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTransformBoxDragger_getClassNodekitCatalog
SoTransformBoxDragger_initClass = Coin_SWIG_Python.SoTransformBoxDragger_initClass

class SoTransformerDragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformerDragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformerDragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTransformerDragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTransformerDragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformerDragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformerDragger(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoTransformerDragger_rotation_get, Coin_SWIG_Python.SoTransformerDragger_rotation_set)
    translation = _swig_property(Coin_SWIG_Python.SoTransformerDragger_translation_get, Coin_SWIG_Python.SoTransformerDragger_translation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTransformerDragger_scaleFactor_get, Coin_SWIG_Python.SoTransformerDragger_scaleFactor_set)
    minDiscRotDot = _swig_property(Coin_SWIG_Python.SoTransformerDragger_minDiscRotDot_get, Coin_SWIG_Python.SoTransformerDragger_minDiscRotDot_set)
    INACTIVE = Coin_SWIG_Python.SoTransformerDragger_INACTIVE
    RIT_X_ROTATE = Coin_SWIG_Python.SoTransformerDragger_RIT_X_ROTATE
    TOP_Y_ROTATE = Coin_SWIG_Python.SoTransformerDragger_TOP_Y_ROTATE
    FNT_Z_ROTATE = Coin_SWIG_Python.SoTransformerDragger_FNT_Z_ROTATE
    LFT_X_ROTATE = Coin_SWIG_Python.SoTransformerDragger_LFT_X_ROTATE
    BOT_Y_ROTATE = Coin_SWIG_Python.SoTransformerDragger_BOT_Y_ROTATE
    BAK_Z_ROTATE = Coin_SWIG_Python.SoTransformerDragger_BAK_Z_ROTATE
    PX_PY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_PY_PZ_3D_SCALE
    PX_PY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_PY_NZ_3D_SCALE
    PX_NY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_NY_PZ_3D_SCALE
    PX_NY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_PX_NY_NZ_3D_SCALE
    NX_PY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_PY_PZ_3D_SCALE
    NX_PY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_PY_NZ_3D_SCALE
    NX_NY_PZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_NY_PZ_3D_SCALE
    NX_NY_NZ_3D_SCALE = Coin_SWIG_Python.SoTransformerDragger_NX_NY_NZ_3D_SCALE
    RIT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_RIT_TRANSLATE
    TOP_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_TOP_TRANSLATE
    FNT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_FNT_TRANSLATE
    LFT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_LFT_TRANSLATE
    BOT_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_BOT_TRANSLATE
    BAK_TRANSLATE = Coin_SWIG_Python.SoTransformerDragger_BAK_TRANSLATE
    def getCurrentState(*args): return Coin_SWIG_Python.SoTransformerDragger_getCurrentState(*args)
    def unsquishKnobs(*args): return Coin_SWIG_Python.SoTransformerDragger_unsquishKnobs(*args)
    def isLocateHighlighting(*args): return Coin_SWIG_Python.SoTransformerDragger_isLocateHighlighting(*args)
    def setLocateHighlighting(*args): return Coin_SWIG_Python.SoTransformerDragger_setLocateHighlighting(*args)
    setColinearThreshold = staticmethod(Coin_SWIG_Python.SoTransformerDragger_setColinearThreshold)
    getColinearThreshold = staticmethod(Coin_SWIG_Python.SoTransformerDragger_getColinearThreshold)
    def getBoxPointInWorldSpace(*args): return Coin_SWIG_Python.SoTransformerDragger_getBoxPointInWorldSpace(*args)
    def getBoxDirInWorldSpace(*args): return Coin_SWIG_Python.SoTransformerDragger_getBoxDirInWorldSpace(*args)
    def getWorldPointInBoxSpace(*args): return Coin_SWIG_Python.SoTransformerDragger_getWorldPointInBoxSpace(*args)
    def getWorldPointInPixelSpace(*args): return Coin_SWIG_Python.SoTransformerDragger_getWorldPointInPixelSpace(*args)
    def getInteractiveCenterInBoxSpace(*args): return Coin_SWIG_Python.SoTransformerDragger_getInteractiveCenterInBoxSpace(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformerDragger
    __del__ = lambda self : None;
SoTransformerDragger_swigregister = Coin_SWIG_Python.SoTransformerDragger_swigregister
SoTransformerDragger_swigregister(SoTransformerDragger)
SoTransformerDragger_getClassTypeId = Coin_SWIG_Python.SoTransformerDragger_getClassTypeId
SoTransformerDragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTransformerDragger_getClassNodekitCatalog
SoTransformerDragger_initClass = Coin_SWIG_Python.SoTransformerDragger_initClass
SoTransformerDragger_setColinearThreshold = Coin_SWIG_Python.SoTransformerDragger_setColinearThreshold
SoTransformerDragger_getColinearThreshold = Coin_SWIG_Python.SoTransformerDragger_getColinearThreshold

class SoTranslate1Dragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTranslate1Dragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTranslate1Dragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTranslate1Dragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTranslate1Dragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTranslate1Dragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTranslate1Dragger(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTranslate1Dragger_translation_get, Coin_SWIG_Python.SoTranslate1Dragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranslate1Dragger
    __del__ = lambda self : None;
SoTranslate1Dragger_swigregister = Coin_SWIG_Python.SoTranslate1Dragger_swigregister
SoTranslate1Dragger_swigregister(SoTranslate1Dragger)
SoTranslate1Dragger_getClassTypeId = Coin_SWIG_Python.SoTranslate1Dragger_getClassTypeId
SoTranslate1Dragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTranslate1Dragger_getClassNodekitCatalog
SoTranslate1Dragger_initClass = Coin_SWIG_Python.SoTranslate1Dragger_initClass

class SoTranslate2Dragger(SoDragger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTranslate2Dragger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTranslate2Dragger_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoTranslate2Dragger_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoTranslate2Dragger_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTranslate2Dragger_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTranslate2Dragger(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTranslate2Dragger_translation_get, Coin_SWIG_Python.SoTranslate2Dragger_translation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranslate2Dragger
    __del__ = lambda self : None;
SoTranslate2Dragger_swigregister = Coin_SWIG_Python.SoTranslate2Dragger_swigregister
SoTranslate2Dragger_swigregister(SoTranslate2Dragger)
SoTranslate2Dragger_getClassTypeId = Coin_SWIG_Python.SoTranslate2Dragger_getClassTypeId
SoTranslate2Dragger_getClassNodekitCatalog = Coin_SWIG_Python.SoTranslate2Dragger_getClassNodekitCatalog
SoTranslate2Dragger_initClass = Coin_SWIG_Python.SoTranslate2Dragger_initClass

class SoAccumulatedElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAccumulatedElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoAccumulatedElement_getClassStackIndex)
    initClass = staticmethod(Coin_SWIG_Python.SoAccumulatedElement_initClass)
    def matches(*args): return Coin_SWIG_Python.SoAccumulatedElement_matches(*args)
SoAccumulatedElement_swigregister = Coin_SWIG_Python.SoAccumulatedElement_swigregister
SoAccumulatedElement_swigregister(SoAccumulatedElement)
SoAccumulatedElement_getClassTypeId = Coin_SWIG_Python.SoAccumulatedElement_getClassTypeId
SoAccumulatedElement_getClassStackIndex = Coin_SWIG_Python.SoAccumulatedElement_getClassStackIndex
SoAccumulatedElement_initClass = Coin_SWIG_Python.SoAccumulatedElement_initClass

class SoAmbientColorElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAmbientColorElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoAmbientColorElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoAmbientColorElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoAmbientColorElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoAmbientColorElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoAmbientColorElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoAmbientColorElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoAmbientColorElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoAmbientColorElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoAmbientColorElement_getArrayPtr(*args)
SoAmbientColorElement_swigregister = Coin_SWIG_Python.SoAmbientColorElement_swigregister
SoAmbientColorElement_swigregister(SoAmbientColorElement)
SoAmbientColorElement_getClassTypeId = Coin_SWIG_Python.SoAmbientColorElement_getClassTypeId
SoAmbientColorElement_getClassStackIndex = Coin_SWIG_Python.SoAmbientColorElement_getClassStackIndex
SoAmbientColorElement_createInstance = Coin_SWIG_Python.SoAmbientColorElement_createInstance
SoAmbientColorElement_initClass = Coin_SWIG_Python.SoAmbientColorElement_initClass
SoAmbientColorElement_set = Coin_SWIG_Python.SoAmbientColorElement_set
SoAmbientColorElement_getInstance = Coin_SWIG_Python.SoAmbientColorElement_getInstance

class SoAnnoText3CharOrientElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoAnnoText3CharOrientElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_set)
    get = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoAnnoText3CharOrientElement_getDefault)
SoAnnoText3CharOrientElement_swigregister = Coin_SWIG_Python.SoAnnoText3CharOrientElement_swigregister
SoAnnoText3CharOrientElement_swigregister(SoAnnoText3CharOrientElement)
SoAnnoText3CharOrientElement_getClassTypeId = Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassTypeId
SoAnnoText3CharOrientElement_getClassStackIndex = Coin_SWIG_Python.SoAnnoText3CharOrientElement_getClassStackIndex
SoAnnoText3CharOrientElement_createInstance = Coin_SWIG_Python.SoAnnoText3CharOrientElement_createInstance
SoAnnoText3CharOrientElement_initClass = Coin_SWIG_Python.SoAnnoText3CharOrientElement_initClass
SoAnnoText3CharOrientElement_set = Coin_SWIG_Python.SoAnnoText3CharOrientElement_set
SoAnnoText3CharOrientElement_get = Coin_SWIG_Python.SoAnnoText3CharOrientElement_get
SoAnnoText3CharOrientElement_getDefault = Coin_SWIG_Python.SoAnnoText3CharOrientElement_getDefault

class SoAnnoText3FontSizeHintElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_initClass)
    ANNOTATION = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_ANNOTATION
    FIT_TEXT_VECTOR = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_FIT_TEXT_VECTOR
    def init(*args): return Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_init(*args)
    get = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getDefault)
    set = staticmethod(Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_set)
SoAnnoText3FontSizeHintElement_swigregister = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_swigregister
SoAnnoText3FontSizeHintElement_swigregister(SoAnnoText3FontSizeHintElement)
SoAnnoText3FontSizeHintElement_getClassTypeId = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassTypeId
SoAnnoText3FontSizeHintElement_getClassStackIndex = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getClassStackIndex
SoAnnoText3FontSizeHintElement_createInstance = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_createInstance
SoAnnoText3FontSizeHintElement_initClass = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_initClass
SoAnnoText3FontSizeHintElement_get = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_get
SoAnnoText3FontSizeHintElement_getDefault = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_getDefault
SoAnnoText3FontSizeHintElement_set = Coin_SWIG_Python.SoAnnoText3FontSizeHintElement_set

class SoAnnoText3RenderPrintElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_initClass)
    RENDER3D_PRINT_VECTOR = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_RENDER3D_PRINT_VECTOR
    RENDER3D_PRINT_RASTER = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_RENDER3D_PRINT_RASTER
    RENDER2D_PRINT_RASTER = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_RENDER2D_PRINT_RASTER
    def init(*args): return Coin_SWIG_Python.SoAnnoText3RenderPrintElement_init(*args)
    get = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getDefault)
    set = staticmethod(Coin_SWIG_Python.SoAnnoText3RenderPrintElement_set)
SoAnnoText3RenderPrintElement_swigregister = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_swigregister
SoAnnoText3RenderPrintElement_swigregister(SoAnnoText3RenderPrintElement)
SoAnnoText3RenderPrintElement_getClassTypeId = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassTypeId
SoAnnoText3RenderPrintElement_getClassStackIndex = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getClassStackIndex
SoAnnoText3RenderPrintElement_createInstance = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_createInstance
SoAnnoText3RenderPrintElement_initClass = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_initClass
SoAnnoText3RenderPrintElement_get = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_get
SoAnnoText3RenderPrintElement_getDefault = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_getDefault
SoAnnoText3RenderPrintElement_set = Coin_SWIG_Python.SoAnnoText3RenderPrintElement_set

class SoModelMatrixElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoModelMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoModelMatrixElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoModelMatrixElement_matches(*args)
    makeIdentity = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_makeIdentity)
    set = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_set)
    setCullMatrix = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_setCullMatrix)
    mult = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_mult)
    translateBy = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_translateBy)
    rotateBy = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_rotateBy)
    scaleBy = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_scaleBy)
    pushMatrix = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_pushMatrix)
    popMatrix = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_popMatrix)
    getCombinedCullMatrix = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_getCombinedCullMatrix)
    get = staticmethod(Coin_SWIG_Python.SoModelMatrixElement_get)
    def getModelMatrix(*args): return Coin_SWIG_Python.SoModelMatrixElement_getModelMatrix(*args)
SoModelMatrixElement_swigregister = Coin_SWIG_Python.SoModelMatrixElement_swigregister
SoModelMatrixElement_swigregister(SoModelMatrixElement)
SoModelMatrixElement_getClassTypeId = Coin_SWIG_Python.SoModelMatrixElement_getClassTypeId
SoModelMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoModelMatrixElement_getClassStackIndex
SoModelMatrixElement_createInstance = Coin_SWIG_Python.SoModelMatrixElement_createInstance
SoModelMatrixElement_initClass = Coin_SWIG_Python.SoModelMatrixElement_initClass
SoModelMatrixElement_makeIdentity = Coin_SWIG_Python.SoModelMatrixElement_makeIdentity
SoModelMatrixElement_set = Coin_SWIG_Python.SoModelMatrixElement_set
SoModelMatrixElement_setCullMatrix = Coin_SWIG_Python.SoModelMatrixElement_setCullMatrix
SoModelMatrixElement_mult = Coin_SWIG_Python.SoModelMatrixElement_mult
SoModelMatrixElement_translateBy = Coin_SWIG_Python.SoModelMatrixElement_translateBy
SoModelMatrixElement_rotateBy = Coin_SWIG_Python.SoModelMatrixElement_rotateBy
SoModelMatrixElement_scaleBy = Coin_SWIG_Python.SoModelMatrixElement_scaleBy
SoModelMatrixElement_pushMatrix = Coin_SWIG_Python.SoModelMatrixElement_pushMatrix
SoModelMatrixElement_popMatrix = Coin_SWIG_Python.SoModelMatrixElement_popMatrix
SoModelMatrixElement_getCombinedCullMatrix = Coin_SWIG_Python.SoModelMatrixElement_getCombinedCullMatrix
SoModelMatrixElement_get = Coin_SWIG_Python.SoModelMatrixElement_get

class SoBBoxModelMatrixElement(SoModelMatrixElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoBBoxModelMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoBBoxModelMatrixElement_push(*args)
    reset = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_reset)
    pushMatrix = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_pushMatrix)
    popMatrix = staticmethod(Coin_SWIG_Python.SoBBoxModelMatrixElement_popMatrix)
SoBBoxModelMatrixElement_swigregister = Coin_SWIG_Python.SoBBoxModelMatrixElement_swigregister
SoBBoxModelMatrixElement_swigregister(SoBBoxModelMatrixElement)
SoBBoxModelMatrixElement_getClassTypeId = Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassTypeId
SoBBoxModelMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoBBoxModelMatrixElement_getClassStackIndex
SoBBoxModelMatrixElement_createInstance = Coin_SWIG_Python.SoBBoxModelMatrixElement_createInstance
SoBBoxModelMatrixElement_initClass = Coin_SWIG_Python.SoBBoxModelMatrixElement_initClass
SoBBoxModelMatrixElement_reset = Coin_SWIG_Python.SoBBoxModelMatrixElement_reset
SoBBoxModelMatrixElement_pushMatrix = Coin_SWIG_Python.SoBBoxModelMatrixElement_pushMatrix
SoBBoxModelMatrixElement_popMatrix = Coin_SWIG_Python.SoBBoxModelMatrixElement_popMatrix

class SoBumpMapCoordinateElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinateElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoBumpMapCoordinateElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinateElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinateElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoBumpMapCoordinateElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoBumpMapCoordinateElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoBumpMapCoordinateElement_getArrayPtr(*args)
SoBumpMapCoordinateElement_swigregister = Coin_SWIG_Python.SoBumpMapCoordinateElement_swigregister
SoBumpMapCoordinateElement_swigregister(SoBumpMapCoordinateElement)
SoBumpMapCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassTypeId
SoBumpMapCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoBumpMapCoordinateElement_getClassStackIndex
SoBumpMapCoordinateElement_createInstance = Coin_SWIG_Python.SoBumpMapCoordinateElement_createInstance
SoBumpMapCoordinateElement_initClass = Coin_SWIG_Python.SoBumpMapCoordinateElement_initClass
SoBumpMapCoordinateElement_set = Coin_SWIG_Python.SoBumpMapCoordinateElement_set
SoBumpMapCoordinateElement_getInstance = Coin_SWIG_Python.SoBumpMapCoordinateElement_getInstance

class SoBumpMapElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBumpMapElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoBumpMapElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoBumpMapElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoBumpMapElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoBumpMapElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoBumpMapElement_set)
    get = staticmethod(Coin_SWIG_Python.SoBumpMapElement_get)
SoBumpMapElement_swigregister = Coin_SWIG_Python.SoBumpMapElement_swigregister
SoBumpMapElement_swigregister(SoBumpMapElement)
SoBumpMapElement_getClassTypeId = Coin_SWIG_Python.SoBumpMapElement_getClassTypeId
SoBumpMapElement_getClassStackIndex = Coin_SWIG_Python.SoBumpMapElement_getClassStackIndex
SoBumpMapElement_createInstance = Coin_SWIG_Python.SoBumpMapElement_createInstance
SoBumpMapElement_initClass = Coin_SWIG_Python.SoBumpMapElement_initClass
SoBumpMapElement_set = Coin_SWIG_Python.SoBumpMapElement_set
SoBumpMapElement_get = Coin_SWIG_Python.SoBumpMapElement_get

class SoBumpMapMatrixElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoBumpMapMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoBumpMapMatrixElement_push(*args)
    makeIdentity = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_makeIdentity)
    set = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_set)
    mult = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_mult)
    translateBy = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_translateBy)
    rotateBy = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_rotateBy)
    scaleBy = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_scaleBy)
    get = staticmethod(Coin_SWIG_Python.SoBumpMapMatrixElement_get)
SoBumpMapMatrixElement_swigregister = Coin_SWIG_Python.SoBumpMapMatrixElement_swigregister
SoBumpMapMatrixElement_swigregister(SoBumpMapMatrixElement)
SoBumpMapMatrixElement_getClassTypeId = Coin_SWIG_Python.SoBumpMapMatrixElement_getClassTypeId
SoBumpMapMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoBumpMapMatrixElement_getClassStackIndex
SoBumpMapMatrixElement_createInstance = Coin_SWIG_Python.SoBumpMapMatrixElement_createInstance
SoBumpMapMatrixElement_initClass = Coin_SWIG_Python.SoBumpMapMatrixElement_initClass
SoBumpMapMatrixElement_makeIdentity = Coin_SWIG_Python.SoBumpMapMatrixElement_makeIdentity
SoBumpMapMatrixElement_set = Coin_SWIG_Python.SoBumpMapMatrixElement_set
SoBumpMapMatrixElement_mult = Coin_SWIG_Python.SoBumpMapMatrixElement_mult
SoBumpMapMatrixElement_translateBy = Coin_SWIG_Python.SoBumpMapMatrixElement_translateBy
SoBumpMapMatrixElement_rotateBy = Coin_SWIG_Python.SoBumpMapMatrixElement_rotateBy
SoBumpMapMatrixElement_scaleBy = Coin_SWIG_Python.SoBumpMapMatrixElement_scaleBy
SoBumpMapMatrixElement_get = Coin_SWIG_Python.SoBumpMapMatrixElement_get

class SoCacheElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCacheElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoCacheElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoCacheElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoCacheElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoCacheElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoCacheElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoCacheElement_pop(*args)
    set = staticmethod(Coin_SWIG_Python.SoCacheElement_set)
    def getCache(*args): return Coin_SWIG_Python.SoCacheElement_getCache(*args)
    anyOpen = staticmethod(Coin_SWIG_Python.SoCacheElement_anyOpen)
    invalidate = staticmethod(Coin_SWIG_Python.SoCacheElement_invalidate)
    def matches(*args): return Coin_SWIG_Python.SoCacheElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoCacheElement_copyMatchInfo(*args)
    def getNextCacheElement(*args): return Coin_SWIG_Python.SoCacheElement_getNextCacheElement(*args)
    addElement = staticmethod(Coin_SWIG_Python.SoCacheElement_addElement)
    addCacheDependency = staticmethod(Coin_SWIG_Python.SoCacheElement_addCacheDependency)
    setInvalid = staticmethod(Coin_SWIG_Python.SoCacheElement_setInvalid)
    getCurrentCache = staticmethod(Coin_SWIG_Python.SoCacheElement_getCurrentCache)
SoCacheElement_swigregister = Coin_SWIG_Python.SoCacheElement_swigregister
SoCacheElement_swigregister(SoCacheElement)
SoCacheElement_getClassTypeId = Coin_SWIG_Python.SoCacheElement_getClassTypeId
SoCacheElement_getClassStackIndex = Coin_SWIG_Python.SoCacheElement_getClassStackIndex
SoCacheElement_createInstance = Coin_SWIG_Python.SoCacheElement_createInstance
SoCacheElement_initClass = Coin_SWIG_Python.SoCacheElement_initClass
SoCacheElement_set = Coin_SWIG_Python.SoCacheElement_set
SoCacheElement_anyOpen = Coin_SWIG_Python.SoCacheElement_anyOpen
SoCacheElement_invalidate = Coin_SWIG_Python.SoCacheElement_invalidate
SoCacheElement_addElement = Coin_SWIG_Python.SoCacheElement_addElement
SoCacheElement_addCacheDependency = Coin_SWIG_Python.SoCacheElement_addCacheDependency
SoCacheElement_setInvalid = Coin_SWIG_Python.SoCacheElement_setInvalid
SoCacheElement_getCurrentCache = Coin_SWIG_Python.SoCacheElement_getCurrentCache

class SbPlane(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    def offset(*args): return Coin_SWIG_Python.SbPlane_offset(*args)
    def transform(*args): return Coin_SWIG_Python.SbPlane_transform(*args)
    def isInHalfSpace(*args): return Coin_SWIG_Python.SbPlane_isInHalfSpace(*args)
    def getDistance(*args): return Coin_SWIG_Python.SbPlane_getDistance(*args)
    def getNormal(*args): return Coin_SWIG_Python.SbPlane_getNormal(*args)
    def getDistanceFromOrigin(*args): return Coin_SWIG_Python.SbPlane_getDistanceFromOrigin(*args)
    def output(*args): return Coin_SWIG_Python.SbPlane_output(*args)
    def intersect(*args): return Coin_SWIG_Python.SbPlane_intersect(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbPlane___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbPlane___ne__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbPlane
    __del__ = lambda self : None;
SbPlane_swigregister = Coin_SWIG_Python.SbPlane_swigregister
SbPlane_swigregister(SbPlane)

class SoClipPlaneElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoClipPlaneElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoClipPlaneElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoClipPlaneElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoClipPlaneElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoClipPlaneElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoClipPlaneElement_push(*args)
    add = staticmethod(Coin_SWIG_Python.SoClipPlaneElement_add)
    getInstance = staticmethod(Coin_SWIG_Python.SoClipPlaneElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoClipPlaneElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoClipPlaneElement_get(*args)
SoClipPlaneElement_swigregister = Coin_SWIG_Python.SoClipPlaneElement_swigregister
SoClipPlaneElement_swigregister(SoClipPlaneElement)
SoClipPlaneElement_getClassTypeId = Coin_SWIG_Python.SoClipPlaneElement_getClassTypeId
SoClipPlaneElement_getClassStackIndex = Coin_SWIG_Python.SoClipPlaneElement_getClassStackIndex
SoClipPlaneElement_createInstance = Coin_SWIG_Python.SoClipPlaneElement_createInstance
SoClipPlaneElement_initClass = Coin_SWIG_Python.SoClipPlaneElement_initClass
SoClipPlaneElement_add = Coin_SWIG_Python.SoClipPlaneElement_add
SoClipPlaneElement_getInstance = Coin_SWIG_Python.SoClipPlaneElement_getInstance

class SoFloatElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFloatElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoFloatElement_getClassStackIndex)
    initClass = staticmethod(Coin_SWIG_Python.SoFloatElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoFloatElement_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoFloatElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoFloatElement_copyMatchInfo(*args)
    def output(*args): return Coin_SWIG_Python.SoFloatElement_output(*args)
    set = staticmethod(Coin_SWIG_Python.SoFloatElement_set)
    get = staticmethod(Coin_SWIG_Python.SoFloatElement_get)
    def setElt(*args): return Coin_SWIG_Python.SoFloatElement_setElt(*args)
SoFloatElement_swigregister = Coin_SWIG_Python.SoFloatElement_swigregister
SoFloatElement_swigregister(SoFloatElement)
SoFloatElement_getClassTypeId = Coin_SWIG_Python.SoFloatElement_getClassTypeId
SoFloatElement_getClassStackIndex = Coin_SWIG_Python.SoFloatElement_getClassStackIndex
SoFloatElement_initClass = Coin_SWIG_Python.SoFloatElement_initClass
SoFloatElement_set = Coin_SWIG_Python.SoFloatElement_set
SoFloatElement_get = Coin_SWIG_Python.SoFloatElement_get

class SoComplexityElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComplexityElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoComplexityElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoComplexityElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoComplexityElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoComplexityElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoComplexityElement_set)
    get = staticmethod(Coin_SWIG_Python.SoComplexityElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoComplexityElement_getDefault)
SoComplexityElement_swigregister = Coin_SWIG_Python.SoComplexityElement_swigregister
SoComplexityElement_swigregister(SoComplexityElement)
SoComplexityElement_getClassTypeId = Coin_SWIG_Python.SoComplexityElement_getClassTypeId
SoComplexityElement_getClassStackIndex = Coin_SWIG_Python.SoComplexityElement_getClassStackIndex
SoComplexityElement_createInstance = Coin_SWIG_Python.SoComplexityElement_createInstance
SoComplexityElement_initClass = Coin_SWIG_Python.SoComplexityElement_initClass
SoComplexityElement_set = Coin_SWIG_Python.SoComplexityElement_set
SoComplexityElement_get = Coin_SWIG_Python.SoComplexityElement_get
SoComplexityElement_getDefault = Coin_SWIG_Python.SoComplexityElement_getDefault

class SoCoordinateElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoCoordinateElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoCoordinateElement_init(*args)
    set3 = staticmethod(Coin_SWIG_Python.SoCoordinateElement_set3)
    set4 = staticmethod(Coin_SWIG_Python.SoCoordinateElement_set4)
    getInstance = staticmethod(Coin_SWIG_Python.SoCoordinateElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoCoordinateElement_getNum(*args)
    def is3D(*args): return Coin_SWIG_Python.SoCoordinateElement_is3D(*args)
    def get3(*args): return Coin_SWIG_Python.SoCoordinateElement_get3(*args)
    def get4(*args): return Coin_SWIG_Python.SoCoordinateElement_get4(*args)
    def getArrayPtr3(*args): return Coin_SWIG_Python.SoCoordinateElement_getArrayPtr3(*args)
    def getArrayPtr4(*args): return Coin_SWIG_Python.SoCoordinateElement_getArrayPtr4(*args)
    getDefault3 = staticmethod(Coin_SWIG_Python.SoCoordinateElement_getDefault3)
    getDefault4 = staticmethod(Coin_SWIG_Python.SoCoordinateElement_getDefault4)
    def output(*args): return Coin_SWIG_Python.SoCoordinateElement_output(*args)
SoCoordinateElement_swigregister = Coin_SWIG_Python.SoCoordinateElement_swigregister
SoCoordinateElement_swigregister(SoCoordinateElement)
SoCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoCoordinateElement_getClassTypeId
SoCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoCoordinateElement_getClassStackIndex
SoCoordinateElement_createInstance = Coin_SWIG_Python.SoCoordinateElement_createInstance
SoCoordinateElement_initClass = Coin_SWIG_Python.SoCoordinateElement_initClass
SoCoordinateElement_set3 = Coin_SWIG_Python.SoCoordinateElement_set3
SoCoordinateElement_set4 = Coin_SWIG_Python.SoCoordinateElement_set4
SoCoordinateElement_getInstance = Coin_SWIG_Python.SoCoordinateElement_getInstance
SoCoordinateElement_getDefault3 = Coin_SWIG_Python.SoCoordinateElement_getDefault3
SoCoordinateElement_getDefault4 = Coin_SWIG_Python.SoCoordinateElement_getDefault4

class SoCreaseAngleElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoCreaseAngleElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_set)
    get = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoCreaseAngleElement_getDefault)
SoCreaseAngleElement_swigregister = Coin_SWIG_Python.SoCreaseAngleElement_swigregister
SoCreaseAngleElement_swigregister(SoCreaseAngleElement)
SoCreaseAngleElement_getClassTypeId = Coin_SWIG_Python.SoCreaseAngleElement_getClassTypeId
SoCreaseAngleElement_getClassStackIndex = Coin_SWIG_Python.SoCreaseAngleElement_getClassStackIndex
SoCreaseAngleElement_createInstance = Coin_SWIG_Python.SoCreaseAngleElement_createInstance
SoCreaseAngleElement_initClass = Coin_SWIG_Python.SoCreaseAngleElement_initClass
SoCreaseAngleElement_set = Coin_SWIG_Python.SoCreaseAngleElement_set
SoCreaseAngleElement_get = Coin_SWIG_Python.SoCreaseAngleElement_get
SoCreaseAngleElement_getDefault = Coin_SWIG_Python.SoCreaseAngleElement_getDefault

class SoCullElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCullElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoCullElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoCullElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoCullElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoCullElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoCullElement_push(*args)
    setViewVolume = staticmethod(Coin_SWIG_Python.SoCullElement_setViewVolume)
    addPlane = staticmethod(Coin_SWIG_Python.SoCullElement_addPlane)
    cullBox = staticmethod(Coin_SWIG_Python.SoCullElement_cullBox)
    cullTest = staticmethod(Coin_SWIG_Python.SoCullElement_cullTest)
    completelyInside = staticmethod(Coin_SWIG_Python.SoCullElement_completelyInside)
    def matches(*args): return Coin_SWIG_Python.SoCullElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoCullElement_copyMatchInfo(*args)
SoCullElement_swigregister = Coin_SWIG_Python.SoCullElement_swigregister
SoCullElement_swigregister(SoCullElement)
SoCullElement_getClassTypeId = Coin_SWIG_Python.SoCullElement_getClassTypeId
SoCullElement_getClassStackIndex = Coin_SWIG_Python.SoCullElement_getClassStackIndex
SoCullElement_createInstance = Coin_SWIG_Python.SoCullElement_createInstance
SoCullElement_initClass = Coin_SWIG_Python.SoCullElement_initClass
SoCullElement_setViewVolume = Coin_SWIG_Python.SoCullElement_setViewVolume
SoCullElement_addPlane = Coin_SWIG_Python.SoCullElement_addPlane
SoCullElement_cullBox = Coin_SWIG_Python.SoCullElement_cullBox
SoCullElement_cullTest = Coin_SWIG_Python.SoCullElement_cullTest
SoCullElement_completelyInside = Coin_SWIG_Python.SoCullElement_completelyInside

class SoDecimationPercentageElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoDecimationPercentageElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_set)
    get = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoDecimationPercentageElement_getDefault)
SoDecimationPercentageElement_swigregister = Coin_SWIG_Python.SoDecimationPercentageElement_swigregister
SoDecimationPercentageElement_swigregister(SoDecimationPercentageElement)
SoDecimationPercentageElement_getClassTypeId = Coin_SWIG_Python.SoDecimationPercentageElement_getClassTypeId
SoDecimationPercentageElement_getClassStackIndex = Coin_SWIG_Python.SoDecimationPercentageElement_getClassStackIndex
SoDecimationPercentageElement_createInstance = Coin_SWIG_Python.SoDecimationPercentageElement_createInstance
SoDecimationPercentageElement_initClass = Coin_SWIG_Python.SoDecimationPercentageElement_initClass
SoDecimationPercentageElement_set = Coin_SWIG_Python.SoDecimationPercentageElement_set
SoDecimationPercentageElement_get = Coin_SWIG_Python.SoDecimationPercentageElement_get
SoDecimationPercentageElement_getDefault = Coin_SWIG_Python.SoDecimationPercentageElement_getDefault

class SoDiffuseColorElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDiffuseColorElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoDiffuseColorElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoDiffuseColorElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoDiffuseColorElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoDiffuseColorElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoDiffuseColorElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoDiffuseColorElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoDiffuseColorElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoDiffuseColorElement_get(*args)
    def isPacked(*args): return Coin_SWIG_Python.SoDiffuseColorElement_isPacked(*args)
    def hasPackedTransparency(*args): return Coin_SWIG_Python.SoDiffuseColorElement_hasPackedTransparency(*args)
    def getColorArrayPtr(*args): return Coin_SWIG_Python.SoDiffuseColorElement_getColorArrayPtr(*args)
    def getPackedArrayPtr(*args): return Coin_SWIG_Python.SoDiffuseColorElement_getPackedArrayPtr(*args)
SoDiffuseColorElement_swigregister = Coin_SWIG_Python.SoDiffuseColorElement_swigregister
SoDiffuseColorElement_swigregister(SoDiffuseColorElement)
SoDiffuseColorElement_getClassTypeId = Coin_SWIG_Python.SoDiffuseColorElement_getClassTypeId
SoDiffuseColorElement_getClassStackIndex = Coin_SWIG_Python.SoDiffuseColorElement_getClassStackIndex
SoDiffuseColorElement_createInstance = Coin_SWIG_Python.SoDiffuseColorElement_createInstance
SoDiffuseColorElement_initClass = Coin_SWIG_Python.SoDiffuseColorElement_initClass
SoDiffuseColorElement_set = Coin_SWIG_Python.SoDiffuseColorElement_set
SoDiffuseColorElement_getInstance = Coin_SWIG_Python.SoDiffuseColorElement_getInstance

class SoGLClipPlaneElement(SoClipPlaneElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLClipPlaneElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLClipPlaneElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLClipPlaneElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLClipPlaneElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLClipPlaneElement_init(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLClipPlaneElement_pop(*args)
    getMaxGLPlanes = staticmethod(Coin_SWIG_Python.SoGLClipPlaneElement_getMaxGLPlanes)
SoGLClipPlaneElement_swigregister = Coin_SWIG_Python.SoGLClipPlaneElement_swigregister
SoGLClipPlaneElement_swigregister(SoGLClipPlaneElement)
SoGLClipPlaneElement_getClassTypeId = Coin_SWIG_Python.SoGLClipPlaneElement_getClassTypeId
SoGLClipPlaneElement_getClassStackIndex = Coin_SWIG_Python.SoGLClipPlaneElement_getClassStackIndex
SoGLClipPlaneElement_createInstance = Coin_SWIG_Python.SoGLClipPlaneElement_createInstance
SoGLClipPlaneElement_initClass = Coin_SWIG_Python.SoGLClipPlaneElement_initClass
SoGLClipPlaneElement_getMaxGLPlanes = Coin_SWIG_Python.SoGLClipPlaneElement_getMaxGLPlanes

class SoLightElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLightElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLightElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLightElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLightElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoLightElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoLightElement_push(*args)
    add = staticmethod(Coin_SWIG_Python.SoLightElement_add)
    getLights = staticmethod(Coin_SWIG_Python.SoLightElement_getLights)
    getMatrix = staticmethod(Coin_SWIG_Python.SoLightElement_getMatrix)
SoLightElement_swigregister = Coin_SWIG_Python.SoLightElement_swigregister
SoLightElement_swigregister(SoLightElement)
SoLightElement_getClassTypeId = Coin_SWIG_Python.SoLightElement_getClassTypeId
SoLightElement_getClassStackIndex = Coin_SWIG_Python.SoLightElement_getClassStackIndex
SoLightElement_createInstance = Coin_SWIG_Python.SoLightElement_createInstance
SoLightElement_initClass = Coin_SWIG_Python.SoLightElement_initClass
SoLightElement_add = Coin_SWIG_Python.SoLightElement_add
SoLightElement_getLights = Coin_SWIG_Python.SoLightElement_getLights
SoLightElement_getMatrix = Coin_SWIG_Python.SoLightElement_getMatrix

class SoGLModelMatrixElement(SoModelMatrixElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLModelMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLModelMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLModelMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLModelMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLModelMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLModelMatrixElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLModelMatrixElement_pop(*args)
SoGLModelMatrixElement_swigregister = Coin_SWIG_Python.SoGLModelMatrixElement_swigregister
SoGLModelMatrixElement_swigregister(SoGLModelMatrixElement)
SoGLModelMatrixElement_getClassTypeId = Coin_SWIG_Python.SoGLModelMatrixElement_getClassTypeId
SoGLModelMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoGLModelMatrixElement_getClassStackIndex
SoGLModelMatrixElement_createInstance = Coin_SWIG_Python.SoGLModelMatrixElement_createInstance
SoGLModelMatrixElement_initClass = Coin_SWIG_Python.SoGLModelMatrixElement_initClass

class SoProfileElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProfileElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoProfileElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoProfileElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoProfileElement_initClass)
    START_FIRST = Coin_SWIG_Python.SoProfileElement_START_FIRST
    START_NEW = Coin_SWIG_Python.SoProfileElement_START_NEW
    ADD_TO_CURRENT = Coin_SWIG_Python.SoProfileElement_ADD_TO_CURRENT
    def init(*args): return Coin_SWIG_Python.SoProfileElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoProfileElement_push(*args)
    add = staticmethod(Coin_SWIG_Python.SoProfileElement_add)
    get = staticmethod(Coin_SWIG_Python.SoProfileElement_get)
SoProfileElement_swigregister = Coin_SWIG_Python.SoProfileElement_swigregister
SoProfileElement_swigregister(SoProfileElement)
SoProfileElement_getClassTypeId = Coin_SWIG_Python.SoProfileElement_getClassTypeId
SoProfileElement_getClassStackIndex = Coin_SWIG_Python.SoProfileElement_getClassStackIndex
SoProfileElement_createInstance = Coin_SWIG_Python.SoProfileElement_createInstance
SoProfileElement_initClass = Coin_SWIG_Python.SoProfileElement_initClass
SoProfileElement_add = Coin_SWIG_Python.SoProfileElement_add
SoProfileElement_get = Coin_SWIG_Python.SoProfileElement_get

class SoTextureMatrixElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTextureMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoTextureMatrixElement_push(*args)
    makeIdentity = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_makeIdentity)
    set = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_set)
    mult = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_mult)
    translateBy = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_translateBy)
    rotateBy = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_rotateBy)
    scaleBy = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_scaleBy)
    get = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_get)
    emptyMatrix = staticmethod(Coin_SWIG_Python.SoTextureMatrixElement_emptyMatrix)
SoTextureMatrixElement_swigregister = Coin_SWIG_Python.SoTextureMatrixElement_swigregister
SoTextureMatrixElement_swigregister(SoTextureMatrixElement)
SoTextureMatrixElement_getClassTypeId = Coin_SWIG_Python.SoTextureMatrixElement_getClassTypeId
SoTextureMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoTextureMatrixElement_getClassStackIndex
SoTextureMatrixElement_createInstance = Coin_SWIG_Python.SoTextureMatrixElement_createInstance
SoTextureMatrixElement_initClass = Coin_SWIG_Python.SoTextureMatrixElement_initClass
SoTextureMatrixElement_makeIdentity = Coin_SWIG_Python.SoTextureMatrixElement_makeIdentity
SoTextureMatrixElement_set = Coin_SWIG_Python.SoTextureMatrixElement_set
SoTextureMatrixElement_mult = Coin_SWIG_Python.SoTextureMatrixElement_mult
SoTextureMatrixElement_translateBy = Coin_SWIG_Python.SoTextureMatrixElement_translateBy
SoTextureMatrixElement_rotateBy = Coin_SWIG_Python.SoTextureMatrixElement_rotateBy
SoTextureMatrixElement_scaleBy = Coin_SWIG_Python.SoTextureMatrixElement_scaleBy
SoTextureMatrixElement_get = Coin_SWIG_Python.SoTextureMatrixElement_get
SoTextureMatrixElement_emptyMatrix = Coin_SWIG_Python.SoTextureMatrixElement_emptyMatrix

class SoGLTextureMatrixElement(SoTextureMatrixElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLTextureMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLTextureMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLTextureMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLTextureMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_init(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_pop(*args)
    setEltIdentity = staticmethod(Coin_SWIG_Python.SoGLTextureMatrixElement_setEltIdentity)
    def setElt(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_setElt(*args)
    def makeEltIdentity(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_makeEltIdentity(*args)
    def multElt(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_multElt(*args)
    def translateEltBy(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_translateEltBy(*args)
    def rotateEltBy(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_rotateEltBy(*args)
    def scaleEltBy(*args): return Coin_SWIG_Python.SoGLTextureMatrixElement_scaleEltBy(*args)
SoGLTextureMatrixElement_swigregister = Coin_SWIG_Python.SoGLTextureMatrixElement_swigregister
SoGLTextureMatrixElement_swigregister(SoGLTextureMatrixElement)
SoGLTextureMatrixElement_getClassTypeId = Coin_SWIG_Python.SoGLTextureMatrixElement_getClassTypeId
SoGLTextureMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoGLTextureMatrixElement_getClassStackIndex
SoGLTextureMatrixElement_createInstance = Coin_SWIG_Python.SoGLTextureMatrixElement_createInstance
SoGLTextureMatrixElement_initClass = Coin_SWIG_Python.SoGLTextureMatrixElement_initClass
SoGLTextureMatrixElement_setEltIdentity = Coin_SWIG_Python.SoGLTextureMatrixElement_setEltIdentity

class SoGLDrawStyleElement(SoDrawStyleElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLDrawStyleElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLDrawStyleElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLDrawStyleElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLDrawStyleElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLDrawStyleElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLDrawStyleElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLDrawStyleElement_pop(*args)
SoGLDrawStyleElement_swigregister = Coin_SWIG_Python.SoGLDrawStyleElement_swigregister
SoGLDrawStyleElement_swigregister(SoGLDrawStyleElement)
SoGLDrawStyleElement_getClassTypeId = Coin_SWIG_Python.SoGLDrawStyleElement_getClassTypeId
SoGLDrawStyleElement_getClassStackIndex = Coin_SWIG_Python.SoGLDrawStyleElement_getClassStackIndex
SoGLDrawStyleElement_createInstance = Coin_SWIG_Python.SoGLDrawStyleElement_createInstance
SoGLDrawStyleElement_initClass = Coin_SWIG_Python.SoGLDrawStyleElement_initClass

class SoGLLightIdElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLLightIdElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLLightIdElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLLightIdElement_pop(*args)
    increment = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_increment)
    get = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_getDefault)
    getMaxGLSources = staticmethod(Coin_SWIG_Python.SoGLLightIdElement_getMaxGLSources)
SoGLLightIdElement_swigregister = Coin_SWIG_Python.SoGLLightIdElement_swigregister
SoGLLightIdElement_swigregister(SoGLLightIdElement)
SoGLLightIdElement_getClassTypeId = Coin_SWIG_Python.SoGLLightIdElement_getClassTypeId
SoGLLightIdElement_getClassStackIndex = Coin_SWIG_Python.SoGLLightIdElement_getClassStackIndex
SoGLLightIdElement_createInstance = Coin_SWIG_Python.SoGLLightIdElement_createInstance
SoGLLightIdElement_initClass = Coin_SWIG_Python.SoGLLightIdElement_initClass
SoGLLightIdElement_increment = Coin_SWIG_Python.SoGLLightIdElement_increment
SoGLLightIdElement_get = Coin_SWIG_Python.SoGLLightIdElement_get
SoGLLightIdElement_getDefault = Coin_SWIG_Python.SoGLLightIdElement_getDefault
SoGLLightIdElement_getMaxGLSources = Coin_SWIG_Python.SoGLLightIdElement_getMaxGLSources

class SoTextureEnabledElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTextureEnabledElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoTextureEnabledElement_getDefault)
    def setElt(*args): return Coin_SWIG_Python.SoTextureEnabledElement_setElt(*args)
SoTextureEnabledElement_swigregister = Coin_SWIG_Python.SoTextureEnabledElement_swigregister
SoTextureEnabledElement_swigregister(SoTextureEnabledElement)
SoTextureEnabledElement_getClassTypeId = Coin_SWIG_Python.SoTextureEnabledElement_getClassTypeId
SoTextureEnabledElement_getClassStackIndex = Coin_SWIG_Python.SoTextureEnabledElement_getClassStackIndex
SoTextureEnabledElement_createInstance = Coin_SWIG_Python.SoTextureEnabledElement_createInstance
SoTextureEnabledElement_initClass = Coin_SWIG_Python.SoTextureEnabledElement_initClass
SoTextureEnabledElement_set = Coin_SWIG_Python.SoTextureEnabledElement_set
SoTextureEnabledElement_get = Coin_SWIG_Python.SoTextureEnabledElement_get
SoTextureEnabledElement_getDefault = Coin_SWIG_Python.SoTextureEnabledElement_getDefault

class SoGLTextureEnabledElement(SoTextureEnabledElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_initClass)
    DISABLED = Coin_SWIG_Python.SoGLTextureEnabledElement_DISABLED
    TEXTURE2D = Coin_SWIG_Python.SoGLTextureEnabledElement_TEXTURE2D
    RECTANGLE = Coin_SWIG_Python.SoGLTextureEnabledElement_RECTANGLE
    CUBEMAP = Coin_SWIG_Python.SoGLTextureEnabledElement_CUBEMAP
    def init(*args): return Coin_SWIG_Python.SoGLTextureEnabledElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLTextureEnabledElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLTextureEnabledElement_pop(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_set)
    get = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_getDefault)
    def setElt(*args): return Coin_SWIG_Python.SoGLTextureEnabledElement_setElt(*args)
    enableRectangle = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_enableRectangle)
    enableCubeMap = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_enableCubeMap)
    getMode = staticmethod(Coin_SWIG_Python.SoGLTextureEnabledElement_getMode)
SoGLTextureEnabledElement_swigregister = Coin_SWIG_Python.SoGLTextureEnabledElement_swigregister
SoGLTextureEnabledElement_swigregister(SoGLTextureEnabledElement)
SoGLTextureEnabledElement_getClassTypeId = Coin_SWIG_Python.SoGLTextureEnabledElement_getClassTypeId
SoGLTextureEnabledElement_getClassStackIndex = Coin_SWIG_Python.SoGLTextureEnabledElement_getClassStackIndex
SoGLTextureEnabledElement_createInstance = Coin_SWIG_Python.SoGLTextureEnabledElement_createInstance
SoGLTextureEnabledElement_initClass = Coin_SWIG_Python.SoGLTextureEnabledElement_initClass
SoGLTextureEnabledElement_set = Coin_SWIG_Python.SoGLTextureEnabledElement_set
SoGLTextureEnabledElement_get = Coin_SWIG_Python.SoGLTextureEnabledElement_get
SoGLTextureEnabledElement_getDefault = Coin_SWIG_Python.SoGLTextureEnabledElement_getDefault
SoGLTextureEnabledElement_enableRectangle = Coin_SWIG_Python.SoGLTextureEnabledElement_enableRectangle
SoGLTextureEnabledElement_enableCubeMap = Coin_SWIG_Python.SoGLTextureEnabledElement_enableCubeMap
SoGLTextureEnabledElement_getMode = Coin_SWIG_Python.SoGLTextureEnabledElement_getMode

class SoTexture3EnabledElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTexture3EnabledElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoTexture3EnabledElement_getDefault)
    def setElt(*args): return Coin_SWIG_Python.SoTexture3EnabledElement_setElt(*args)
SoTexture3EnabledElement_swigregister = Coin_SWIG_Python.SoTexture3EnabledElement_swigregister
SoTexture3EnabledElement_swigregister(SoTexture3EnabledElement)
SoTexture3EnabledElement_getClassTypeId = Coin_SWIG_Python.SoTexture3EnabledElement_getClassTypeId
SoTexture3EnabledElement_getClassStackIndex = Coin_SWIG_Python.SoTexture3EnabledElement_getClassStackIndex
SoTexture3EnabledElement_createInstance = Coin_SWIG_Python.SoTexture3EnabledElement_createInstance
SoTexture3EnabledElement_initClass = Coin_SWIG_Python.SoTexture3EnabledElement_initClass
SoTexture3EnabledElement_set = Coin_SWIG_Python.SoTexture3EnabledElement_set
SoTexture3EnabledElement_get = Coin_SWIG_Python.SoTexture3EnabledElement_get
SoTexture3EnabledElement_getDefault = Coin_SWIG_Python.SoTexture3EnabledElement_getDefault

class SoGLTexture3EnabledElement(SoTexture3EnabledElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLTexture3EnabledElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLTexture3EnabledElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLTexture3EnabledElement_pop(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_set)
    get = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoGLTexture3EnabledElement_getDefault)
    def setElt(*args): return Coin_SWIG_Python.SoGLTexture3EnabledElement_setElt(*args)
SoGLTexture3EnabledElement_swigregister = Coin_SWIG_Python.SoGLTexture3EnabledElement_swigregister
SoGLTexture3EnabledElement_swigregister(SoGLTexture3EnabledElement)
SoGLTexture3EnabledElement_getClassTypeId = Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassTypeId
SoGLTexture3EnabledElement_getClassStackIndex = Coin_SWIG_Python.SoGLTexture3EnabledElement_getClassStackIndex
SoGLTexture3EnabledElement_createInstance = Coin_SWIG_Python.SoGLTexture3EnabledElement_createInstance
SoGLTexture3EnabledElement_initClass = Coin_SWIG_Python.SoGLTexture3EnabledElement_initClass
SoGLTexture3EnabledElement_set = Coin_SWIG_Python.SoGLTexture3EnabledElement_set
SoGLTexture3EnabledElement_get = Coin_SWIG_Python.SoGLTexture3EnabledElement_get
SoGLTexture3EnabledElement_getDefault = Coin_SWIG_Python.SoGLTexture3EnabledElement_getDefault

class SoLinePatternElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLinePatternElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLinePatternElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLinePatternElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLinePatternElement_initClass)
    CONTINUOUS = Coin_SWIG_Python.SoLinePatternElement_CONTINUOUS
    def init(*args): return Coin_SWIG_Python.SoLinePatternElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoLinePatternElement_set)
    get = staticmethod(Coin_SWIG_Python.SoLinePatternElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoLinePatternElement_getDefault)
SoLinePatternElement_swigregister = Coin_SWIG_Python.SoLinePatternElement_swigregister
SoLinePatternElement_swigregister(SoLinePatternElement)
SoLinePatternElement_getClassTypeId = Coin_SWIG_Python.SoLinePatternElement_getClassTypeId
SoLinePatternElement_getClassStackIndex = Coin_SWIG_Python.SoLinePatternElement_getClassStackIndex
SoLinePatternElement_createInstance = Coin_SWIG_Python.SoLinePatternElement_createInstance
SoLinePatternElement_initClass = Coin_SWIG_Python.SoLinePatternElement_initClass
SoLinePatternElement_set = Coin_SWIG_Python.SoLinePatternElement_set
SoLinePatternElement_get = Coin_SWIG_Python.SoLinePatternElement_get
SoLinePatternElement_getDefault = Coin_SWIG_Python.SoLinePatternElement_getDefault

class SoGLLinePatternElement(SoLinePatternElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLLinePatternElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLLinePatternElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLLinePatternElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLLinePatternElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLLinePatternElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLLinePatternElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLLinePatternElement_pop(*args)
SoGLLinePatternElement_swigregister = Coin_SWIG_Python.SoGLLinePatternElement_swigregister
SoGLLinePatternElement_swigregister(SoGLLinePatternElement)
SoGLLinePatternElement_getClassTypeId = Coin_SWIG_Python.SoGLLinePatternElement_getClassTypeId
SoGLLinePatternElement_getClassStackIndex = Coin_SWIG_Python.SoGLLinePatternElement_getClassStackIndex
SoGLLinePatternElement_createInstance = Coin_SWIG_Python.SoGLLinePatternElement_createInstance
SoGLLinePatternElement_initClass = Coin_SWIG_Python.SoGLLinePatternElement_initClass

class SoSwitchElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSwitchElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoSwitchElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoSwitchElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoSwitchElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoSwitchElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoSwitchElement_set)
    get = staticmethod(Coin_SWIG_Python.SoSwitchElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoSwitchElement_getDefault)
SoSwitchElement_swigregister = Coin_SWIG_Python.SoSwitchElement_swigregister
SoSwitchElement_swigregister(SoSwitchElement)
SoSwitchElement_getClassTypeId = Coin_SWIG_Python.SoSwitchElement_getClassTypeId
SoSwitchElement_getClassStackIndex = Coin_SWIG_Python.SoSwitchElement_getClassStackIndex
SoSwitchElement_createInstance = Coin_SWIG_Python.SoSwitchElement_createInstance
SoSwitchElement_initClass = Coin_SWIG_Python.SoSwitchElement_initClass
SoSwitchElement_set = Coin_SWIG_Python.SoSwitchElement_set
SoSwitchElement_get = Coin_SWIG_Python.SoSwitchElement_get
SoSwitchElement_getDefault = Coin_SWIG_Python.SoSwitchElement_getDefault

class SoTextOutlineEnabledElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTextOutlineEnabledElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoTextOutlineEnabledElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoTextOutlineEnabledElement_pop(*args)
    set = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoTextOutlineEnabledElement_getDefault)
SoTextOutlineEnabledElement_swigregister = Coin_SWIG_Python.SoTextOutlineEnabledElement_swigregister
SoTextOutlineEnabledElement_swigregister(SoTextOutlineEnabledElement)
SoTextOutlineEnabledElement_getClassTypeId = Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassTypeId
SoTextOutlineEnabledElement_getClassStackIndex = Coin_SWIG_Python.SoTextOutlineEnabledElement_getClassStackIndex
SoTextOutlineEnabledElement_createInstance = Coin_SWIG_Python.SoTextOutlineEnabledElement_createInstance
SoTextOutlineEnabledElement_initClass = Coin_SWIG_Python.SoTextOutlineEnabledElement_initClass
SoTextOutlineEnabledElement_set = Coin_SWIG_Python.SoTextOutlineEnabledElement_set
SoTextOutlineEnabledElement_get = Coin_SWIG_Python.SoTextOutlineEnabledElement_get
SoTextOutlineEnabledElement_getDefault = Coin_SWIG_Python.SoTextOutlineEnabledElement_getDefault

class SoUnitsElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoUnitsElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoUnitsElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoUnitsElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoUnitsElement_initClass)
    METERS = Coin_SWIG_Python.SoUnitsElement_METERS
    CENTIMETERS = Coin_SWIG_Python.SoUnitsElement_CENTIMETERS
    MILLIMETERS = Coin_SWIG_Python.SoUnitsElement_MILLIMETERS
    MICROMETERS = Coin_SWIG_Python.SoUnitsElement_MICROMETERS
    MICRONS = Coin_SWIG_Python.SoUnitsElement_MICRONS
    NANOMETERS = Coin_SWIG_Python.SoUnitsElement_NANOMETERS
    ANGSTROMS = Coin_SWIG_Python.SoUnitsElement_ANGSTROMS
    KILOMETERS = Coin_SWIG_Python.SoUnitsElement_KILOMETERS
    FEET = Coin_SWIG_Python.SoUnitsElement_FEET
    INCHES = Coin_SWIG_Python.SoUnitsElement_INCHES
    POINTS = Coin_SWIG_Python.SoUnitsElement_POINTS
    YARDS = Coin_SWIG_Python.SoUnitsElement_YARDS
    MILES = Coin_SWIG_Python.SoUnitsElement_MILES
    NAUTICAL_MILES = Coin_SWIG_Python.SoUnitsElement_NAUTICAL_MILES
    def init(*args): return Coin_SWIG_Python.SoUnitsElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoUnitsElement_set)
    get = staticmethod(Coin_SWIG_Python.SoUnitsElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoUnitsElement_getDefault)
SoUnitsElement_swigregister = Coin_SWIG_Python.SoUnitsElement_swigregister
SoUnitsElement_swigregister(SoUnitsElement)
SoUnitsElement_getClassTypeId = Coin_SWIG_Python.SoUnitsElement_getClassTypeId
SoUnitsElement_getClassStackIndex = Coin_SWIG_Python.SoUnitsElement_getClassStackIndex
SoUnitsElement_createInstance = Coin_SWIG_Python.SoUnitsElement_createInstance
SoUnitsElement_initClass = Coin_SWIG_Python.SoUnitsElement_initClass
SoUnitsElement_set = Coin_SWIG_Python.SoUnitsElement_set
SoUnitsElement_get = Coin_SWIG_Python.SoUnitsElement_get
SoUnitsElement_getDefault = Coin_SWIG_Python.SoUnitsElement_getDefault

class SoFocalDistanceElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoFocalDistanceElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_set)
    get = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoFocalDistanceElement_getDefault)
SoFocalDistanceElement_swigregister = Coin_SWIG_Python.SoFocalDistanceElement_swigregister
SoFocalDistanceElement_swigregister(SoFocalDistanceElement)
SoFocalDistanceElement_getClassTypeId = Coin_SWIG_Python.SoFocalDistanceElement_getClassTypeId
SoFocalDistanceElement_getClassStackIndex = Coin_SWIG_Python.SoFocalDistanceElement_getClassStackIndex
SoFocalDistanceElement_createInstance = Coin_SWIG_Python.SoFocalDistanceElement_createInstance
SoFocalDistanceElement_initClass = Coin_SWIG_Python.SoFocalDistanceElement_initClass
SoFocalDistanceElement_set = Coin_SWIG_Python.SoFocalDistanceElement_set
SoFocalDistanceElement_get = Coin_SWIG_Python.SoFocalDistanceElement_get
SoFocalDistanceElement_getDefault = Coin_SWIG_Python.SoFocalDistanceElement_getDefault

class SoFontSizeElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFontSizeElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoFontSizeElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoFontSizeElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoFontSizeElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoFontSizeElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoFontSizeElement_set)
    get = staticmethod(Coin_SWIG_Python.SoFontSizeElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoFontSizeElement_getDefault)
SoFontSizeElement_swigregister = Coin_SWIG_Python.SoFontSizeElement_swigregister
SoFontSizeElement_swigregister(SoFontSizeElement)
SoFontSizeElement_getClassTypeId = Coin_SWIG_Python.SoFontSizeElement_getClassTypeId
SoFontSizeElement_getClassStackIndex = Coin_SWIG_Python.SoFontSizeElement_getClassStackIndex
SoFontSizeElement_createInstance = Coin_SWIG_Python.SoFontSizeElement_createInstance
SoFontSizeElement_initClass = Coin_SWIG_Python.SoFontSizeElement_initClass
SoFontSizeElement_set = Coin_SWIG_Python.SoFontSizeElement_set
SoFontSizeElement_get = Coin_SWIG_Python.SoFontSizeElement_get
SoFontSizeElement_getDefault = Coin_SWIG_Python.SoFontSizeElement_getDefault

class SoLineWidthElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLineWidthElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLineWidthElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLineWidthElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLineWidthElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoLineWidthElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoLineWidthElement_set)
    get = staticmethod(Coin_SWIG_Python.SoLineWidthElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoLineWidthElement_getDefault)
SoLineWidthElement_swigregister = Coin_SWIG_Python.SoLineWidthElement_swigregister
SoLineWidthElement_swigregister(SoLineWidthElement)
SoLineWidthElement_getClassTypeId = Coin_SWIG_Python.SoLineWidthElement_getClassTypeId
SoLineWidthElement_getClassStackIndex = Coin_SWIG_Python.SoLineWidthElement_getClassStackIndex
SoLineWidthElement_createInstance = Coin_SWIG_Python.SoLineWidthElement_createInstance
SoLineWidthElement_initClass = Coin_SWIG_Python.SoLineWidthElement_initClass
SoLineWidthElement_set = Coin_SWIG_Python.SoLineWidthElement_set
SoLineWidthElement_get = Coin_SWIG_Python.SoLineWidthElement_get
SoLineWidthElement_getDefault = Coin_SWIG_Python.SoLineWidthElement_getDefault

class SoGLLineWidthElement(SoLineWidthElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLLineWidthElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLLineWidthElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLLineWidthElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLLineWidthElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLLineWidthElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLLineWidthElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLLineWidthElement_pop(*args)
SoGLLineWidthElement_swigregister = Coin_SWIG_Python.SoGLLineWidthElement_swigregister
SoGLLineWidthElement_swigregister(SoGLLineWidthElement)
SoGLLineWidthElement_getClassTypeId = Coin_SWIG_Python.SoGLLineWidthElement_getClassTypeId
SoGLLineWidthElement_getClassStackIndex = Coin_SWIG_Python.SoGLLineWidthElement_getClassStackIndex
SoGLLineWidthElement_createInstance = Coin_SWIG_Python.SoGLLineWidthElement_createInstance
SoGLLineWidthElement_initClass = Coin_SWIG_Python.SoGLLineWidthElement_initClass

class SoPointSizeElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPointSizeElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoPointSizeElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoPointSizeElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoPointSizeElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoPointSizeElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoPointSizeElement_set)
    get = staticmethod(Coin_SWIG_Python.SoPointSizeElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoPointSizeElement_getDefault)
SoPointSizeElement_swigregister = Coin_SWIG_Python.SoPointSizeElement_swigregister
SoPointSizeElement_swigregister(SoPointSizeElement)
SoPointSizeElement_getClassTypeId = Coin_SWIG_Python.SoPointSizeElement_getClassTypeId
SoPointSizeElement_getClassStackIndex = Coin_SWIG_Python.SoPointSizeElement_getClassStackIndex
SoPointSizeElement_createInstance = Coin_SWIG_Python.SoPointSizeElement_createInstance
SoPointSizeElement_initClass = Coin_SWIG_Python.SoPointSizeElement_initClass
SoPointSizeElement_set = Coin_SWIG_Python.SoPointSizeElement_set
SoPointSizeElement_get = Coin_SWIG_Python.SoPointSizeElement_get
SoPointSizeElement_getDefault = Coin_SWIG_Python.SoPointSizeElement_getDefault

class SoGLPointSizeElement(SoPointSizeElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLPointSizeElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLPointSizeElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLPointSizeElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLPointSizeElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLPointSizeElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLPointSizeElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLPointSizeElement_pop(*args)
SoGLPointSizeElement_swigregister = Coin_SWIG_Python.SoGLPointSizeElement_swigregister
SoGLPointSizeElement_swigregister(SoGLPointSizeElement)
SoGLPointSizeElement_getClassTypeId = Coin_SWIG_Python.SoGLPointSizeElement_getClassTypeId
SoGLPointSizeElement_getClassStackIndex = Coin_SWIG_Python.SoGLPointSizeElement_getClassStackIndex
SoGLPointSizeElement_createInstance = Coin_SWIG_Python.SoGLPointSizeElement_createInstance
SoGLPointSizeElement_initClass = Coin_SWIG_Python.SoGLPointSizeElement_initClass

class SoTextureQualityElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTextureQualityElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoTextureQualityElement_getDefault)
SoTextureQualityElement_swigregister = Coin_SWIG_Python.SoTextureQualityElement_swigregister
SoTextureQualityElement_swigregister(SoTextureQualityElement)
SoTextureQualityElement_getClassTypeId = Coin_SWIG_Python.SoTextureQualityElement_getClassTypeId
SoTextureQualityElement_getClassStackIndex = Coin_SWIG_Python.SoTextureQualityElement_getClassStackIndex
SoTextureQualityElement_createInstance = Coin_SWIG_Python.SoTextureQualityElement_createInstance
SoTextureQualityElement_initClass = Coin_SWIG_Python.SoTextureQualityElement_initClass
SoTextureQualityElement_set = Coin_SWIG_Python.SoTextureQualityElement_set
SoTextureQualityElement_get = Coin_SWIG_Python.SoTextureQualityElement_get
SoTextureQualityElement_getDefault = Coin_SWIG_Python.SoTextureQualityElement_getDefault

class SoTextureOverrideElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_initClass)
    def matches(*args): return Coin_SWIG_Python.SoTextureOverrideElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoTextureOverrideElement_copyMatchInfo(*args)
    def init(*args): return Coin_SWIG_Python.SoTextureOverrideElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoTextureOverrideElement_push(*args)
    getQualityOverride = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_getQualityOverride)
    getImageOverride = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_getImageOverride)
    getBumpMapOverride = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_getBumpMapOverride)
    setQualityOverride = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_setQualityOverride)
    setImageOverride = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_setImageOverride)
    setBumpMapOverride = staticmethod(Coin_SWIG_Python.SoTextureOverrideElement_setBumpMapOverride)
    def output(*args): return Coin_SWIG_Python.SoTextureOverrideElement_output(*args)
SoTextureOverrideElement_swigregister = Coin_SWIG_Python.SoTextureOverrideElement_swigregister
SoTextureOverrideElement_swigregister(SoTextureOverrideElement)
SoTextureOverrideElement_getClassTypeId = Coin_SWIG_Python.SoTextureOverrideElement_getClassTypeId
SoTextureOverrideElement_getClassStackIndex = Coin_SWIG_Python.SoTextureOverrideElement_getClassStackIndex
SoTextureOverrideElement_createInstance = Coin_SWIG_Python.SoTextureOverrideElement_createInstance
SoTextureOverrideElement_initClass = Coin_SWIG_Python.SoTextureOverrideElement_initClass
SoTextureOverrideElement_getQualityOverride = Coin_SWIG_Python.SoTextureOverrideElement_getQualityOverride
SoTextureOverrideElement_getImageOverride = Coin_SWIG_Python.SoTextureOverrideElement_getImageOverride
SoTextureOverrideElement_getBumpMapOverride = Coin_SWIG_Python.SoTextureOverrideElement_getBumpMapOverride
SoTextureOverrideElement_setQualityOverride = Coin_SWIG_Python.SoTextureOverrideElement_setQualityOverride
SoTextureOverrideElement_setImageOverride = Coin_SWIG_Python.SoTextureOverrideElement_setImageOverride
SoTextureOverrideElement_setBumpMapOverride = Coin_SWIG_Python.SoTextureOverrideElement_setBumpMapOverride

class SoGLRenderPassElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLRenderPassElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLRenderPassElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLRenderPassElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLRenderPassElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLRenderPassElement_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoGLRenderPassElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoGLRenderPassElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLRenderPassElement_set)
    get = staticmethod(Coin_SWIG_Python.SoGLRenderPassElement_get)
SoGLRenderPassElement_swigregister = Coin_SWIG_Python.SoGLRenderPassElement_swigregister
SoGLRenderPassElement_swigregister(SoGLRenderPassElement)
SoGLRenderPassElement_getClassTypeId = Coin_SWIG_Python.SoGLRenderPassElement_getClassTypeId
SoGLRenderPassElement_getClassStackIndex = Coin_SWIG_Python.SoGLRenderPassElement_getClassStackIndex
SoGLRenderPassElement_createInstance = Coin_SWIG_Python.SoGLRenderPassElement_createInstance
SoGLRenderPassElement_initClass = Coin_SWIG_Python.SoGLRenderPassElement_initClass
SoGLRenderPassElement_set = Coin_SWIG_Python.SoGLRenderPassElement_set
SoGLRenderPassElement_get = Coin_SWIG_Python.SoGLRenderPassElement_get

class SoGLUpdateAreaElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLUpdateAreaElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLUpdateAreaElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLUpdateAreaElement_pop(*args)
    def matches(*args): return Coin_SWIG_Python.SoGLUpdateAreaElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoGLUpdateAreaElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_set)
    get = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_get)
    getDefaultOrigin = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultOrigin)
    getDefaultSize = staticmethod(Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultSize)
SoGLUpdateAreaElement_swigregister = Coin_SWIG_Python.SoGLUpdateAreaElement_swigregister
SoGLUpdateAreaElement_swigregister(SoGLUpdateAreaElement)
SoGLUpdateAreaElement_getClassTypeId = Coin_SWIG_Python.SoGLUpdateAreaElement_getClassTypeId
SoGLUpdateAreaElement_getClassStackIndex = Coin_SWIG_Python.SoGLUpdateAreaElement_getClassStackIndex
SoGLUpdateAreaElement_createInstance = Coin_SWIG_Python.SoGLUpdateAreaElement_createInstance
SoGLUpdateAreaElement_initClass = Coin_SWIG_Python.SoGLUpdateAreaElement_initClass
SoGLUpdateAreaElement_set = Coin_SWIG_Python.SoGLUpdateAreaElement_set
SoGLUpdateAreaElement_get = Coin_SWIG_Python.SoGLUpdateAreaElement_get
SoGLUpdateAreaElement_getDefaultOrigin = Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultOrigin
SoGLUpdateAreaElement_getDefaultSize = Coin_SWIG_Python.SoGLUpdateAreaElement_getDefaultSize

class SoLocalBBoxMatrixElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoLocalBBoxMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoLocalBBoxMatrixElement_push(*args)
    makeIdentity = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_makeIdentity)
    set = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_set)
    mult = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_mult)
    translateBy = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_translateBy)
    rotateBy = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_rotateBy)
    scaleBy = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_scaleBy)
    pushMatrix = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_pushMatrix)
    popMatrix = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_popMatrix)
    resetAll = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_resetAll)
    get = staticmethod(Coin_SWIG_Python.SoLocalBBoxMatrixElement_get)
    def matches(*args): return Coin_SWIG_Python.SoLocalBBoxMatrixElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoLocalBBoxMatrixElement_copyMatchInfo(*args)
SoLocalBBoxMatrixElement_swigregister = Coin_SWIG_Python.SoLocalBBoxMatrixElement_swigregister
SoLocalBBoxMatrixElement_swigregister(SoLocalBBoxMatrixElement)
SoLocalBBoxMatrixElement_getClassTypeId = Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassTypeId
SoLocalBBoxMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoLocalBBoxMatrixElement_getClassStackIndex
SoLocalBBoxMatrixElement_createInstance = Coin_SWIG_Python.SoLocalBBoxMatrixElement_createInstance
SoLocalBBoxMatrixElement_initClass = Coin_SWIG_Python.SoLocalBBoxMatrixElement_initClass
SoLocalBBoxMatrixElement_makeIdentity = Coin_SWIG_Python.SoLocalBBoxMatrixElement_makeIdentity
SoLocalBBoxMatrixElement_set = Coin_SWIG_Python.SoLocalBBoxMatrixElement_set
SoLocalBBoxMatrixElement_mult = Coin_SWIG_Python.SoLocalBBoxMatrixElement_mult
SoLocalBBoxMatrixElement_translateBy = Coin_SWIG_Python.SoLocalBBoxMatrixElement_translateBy
SoLocalBBoxMatrixElement_rotateBy = Coin_SWIG_Python.SoLocalBBoxMatrixElement_rotateBy
SoLocalBBoxMatrixElement_scaleBy = Coin_SWIG_Python.SoLocalBBoxMatrixElement_scaleBy
SoLocalBBoxMatrixElement_pushMatrix = Coin_SWIG_Python.SoLocalBBoxMatrixElement_pushMatrix
SoLocalBBoxMatrixElement_popMatrix = Coin_SWIG_Python.SoLocalBBoxMatrixElement_popMatrix
SoLocalBBoxMatrixElement_resetAll = Coin_SWIG_Python.SoLocalBBoxMatrixElement_resetAll
SoLocalBBoxMatrixElement_get = Coin_SWIG_Python.SoLocalBBoxMatrixElement_get

class SoOverrideElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoOverrideElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoOverrideElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoOverrideElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoOverrideElement_initClass)
    AMBIENT_COLOR = Coin_SWIG_Python.SoOverrideElement_AMBIENT_COLOR
    COLOR_INDEX = Coin_SWIG_Python.SoOverrideElement_COLOR_INDEX
    COMPLEXITY = Coin_SWIG_Python.SoOverrideElement_COMPLEXITY
    COMPLEXITY_TYPE = Coin_SWIG_Python.SoOverrideElement_COMPLEXITY_TYPE
    CREASE_ANGLE = Coin_SWIG_Python.SoOverrideElement_CREASE_ANGLE
    DIFFUSE_COLOR = Coin_SWIG_Python.SoOverrideElement_DIFFUSE_COLOR
    DRAW_STYLE = Coin_SWIG_Python.SoOverrideElement_DRAW_STYLE
    EMISSIVE_COLOR = Coin_SWIG_Python.SoOverrideElement_EMISSIVE_COLOR
    FONT_NAME = Coin_SWIG_Python.SoOverrideElement_FONT_NAME
    FONT_SIZE = Coin_SWIG_Python.SoOverrideElement_FONT_SIZE
    LIGHT_MODEL = Coin_SWIG_Python.SoOverrideElement_LIGHT_MODEL
    LINE_PATTERN = Coin_SWIG_Python.SoOverrideElement_LINE_PATTERN
    LINE_WIDTH = Coin_SWIG_Python.SoOverrideElement_LINE_WIDTH
    MATERIAL_BINDING = Coin_SWIG_Python.SoOverrideElement_MATERIAL_BINDING
    POINT_SIZE = Coin_SWIG_Python.SoOverrideElement_POINT_SIZE
    PICK_STYLE = Coin_SWIG_Python.SoOverrideElement_PICK_STYLE
    SHAPE_HINTS = Coin_SWIG_Python.SoOverrideElement_SHAPE_HINTS
    SHININESS = Coin_SWIG_Python.SoOverrideElement_SHININESS
    SPECULAR_COLOR = Coin_SWIG_Python.SoOverrideElement_SPECULAR_COLOR
    POLYGON_OFFSET = Coin_SWIG_Python.SoOverrideElement_POLYGON_OFFSET
    TRANSPARENCY = Coin_SWIG_Python.SoOverrideElement_TRANSPARENCY
    TRANSPARENCY_TYPE = Coin_SWIG_Python.SoOverrideElement_TRANSPARENCY_TYPE
    NORMAL_VECTOR = Coin_SWIG_Python.SoOverrideElement_NORMAL_VECTOR
    NORMAL_BINDING = Coin_SWIG_Python.SoOverrideElement_NORMAL_BINDING
    def init(*args): return Coin_SWIG_Python.SoOverrideElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoOverrideElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoOverrideElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoOverrideElement_copyMatchInfo(*args)
    getFlags = staticmethod(Coin_SWIG_Python.SoOverrideElement_getFlags)
    getAmbientColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getAmbientColorOverride)
    getColorIndexOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getColorIndexOverride)
    getComplexityOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getComplexityOverride)
    getComplexityTypeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getComplexityTypeOverride)
    getCreaseAngleOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getCreaseAngleOverride)
    getDiffuseColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getDiffuseColorOverride)
    getDrawStyleOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getDrawStyleOverride)
    getEmissiveColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getEmissiveColorOverride)
    getFontNameOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getFontNameOverride)
    getFontSizeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getFontSizeOverride)
    getLightModelOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getLightModelOverride)
    getLinePatternOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getLinePatternOverride)
    getLineWidthOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getLineWidthOverride)
    getMaterialBindingOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getMaterialBindingOverride)
    getPickStyleOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getPickStyleOverride)
    getPointSizeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getPointSizeOverride)
    getPolygonOffsetOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getPolygonOffsetOverride)
    getShapeHintsOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getShapeHintsOverride)
    getShininessOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getShininessOverride)
    getSpecularColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getSpecularColorOverride)
    getTransparencyOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getTransparencyOverride)
    getTransparencyTypeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getTransparencyTypeOverride)
    getNormalVectorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getNormalVectorOverride)
    getNormalBindingOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_getNormalBindingOverride)
    setAmbientColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setAmbientColorOverride)
    setColorIndexOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setColorIndexOverride)
    setComplexityOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setComplexityOverride)
    setComplexityTypeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setComplexityTypeOverride)
    setCreaseAngleOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setCreaseAngleOverride)
    setDiffuseColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setDiffuseColorOverride)
    setDrawStyleOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setDrawStyleOverride)
    setEmissiveColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setEmissiveColorOverride)
    setFontNameOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setFontNameOverride)
    setFontSizeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setFontSizeOverride)
    setLightModelOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setLightModelOverride)
    setLinePatternOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setLinePatternOverride)
    setLineWidthOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setLineWidthOverride)
    setMaterialBindingOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setMaterialBindingOverride)
    setPickStyleOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setPickStyleOverride)
    setPointSizeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setPointSizeOverride)
    setPolygonOffsetOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setPolygonOffsetOverride)
    setShapeHintsOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setShapeHintsOverride)
    setShininessOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setShininessOverride)
    setSpecularColorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setSpecularColorOverride)
    setTransparencyOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setTransparencyOverride)
    setTransparencyTypeOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setTransparencyTypeOverride)
    setNormalVectorOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setNormalVectorOverride)
    setNormalBindingOverride = staticmethod(Coin_SWIG_Python.SoOverrideElement_setNormalBindingOverride)
    def output(*args): return Coin_SWIG_Python.SoOverrideElement_output(*args)
SoOverrideElement_swigregister = Coin_SWIG_Python.SoOverrideElement_swigregister
SoOverrideElement_swigregister(SoOverrideElement)
SoOverrideElement_getClassTypeId = Coin_SWIG_Python.SoOverrideElement_getClassTypeId
SoOverrideElement_getClassStackIndex = Coin_SWIG_Python.SoOverrideElement_getClassStackIndex
SoOverrideElement_createInstance = Coin_SWIG_Python.SoOverrideElement_createInstance
SoOverrideElement_initClass = Coin_SWIG_Python.SoOverrideElement_initClass
SoOverrideElement_getFlags = Coin_SWIG_Python.SoOverrideElement_getFlags
SoOverrideElement_getAmbientColorOverride = Coin_SWIG_Python.SoOverrideElement_getAmbientColorOverride
SoOverrideElement_getColorIndexOverride = Coin_SWIG_Python.SoOverrideElement_getColorIndexOverride
SoOverrideElement_getComplexityOverride = Coin_SWIG_Python.SoOverrideElement_getComplexityOverride
SoOverrideElement_getComplexityTypeOverride = Coin_SWIG_Python.SoOverrideElement_getComplexityTypeOverride
SoOverrideElement_getCreaseAngleOverride = Coin_SWIG_Python.SoOverrideElement_getCreaseAngleOverride
SoOverrideElement_getDiffuseColorOverride = Coin_SWIG_Python.SoOverrideElement_getDiffuseColorOverride
SoOverrideElement_getDrawStyleOverride = Coin_SWIG_Python.SoOverrideElement_getDrawStyleOverride
SoOverrideElement_getEmissiveColorOverride = Coin_SWIG_Python.SoOverrideElement_getEmissiveColorOverride
SoOverrideElement_getFontNameOverride = Coin_SWIG_Python.SoOverrideElement_getFontNameOverride
SoOverrideElement_getFontSizeOverride = Coin_SWIG_Python.SoOverrideElement_getFontSizeOverride
SoOverrideElement_getLightModelOverride = Coin_SWIG_Python.SoOverrideElement_getLightModelOverride
SoOverrideElement_getLinePatternOverride = Coin_SWIG_Python.SoOverrideElement_getLinePatternOverride
SoOverrideElement_getLineWidthOverride = Coin_SWIG_Python.SoOverrideElement_getLineWidthOverride
SoOverrideElement_getMaterialBindingOverride = Coin_SWIG_Python.SoOverrideElement_getMaterialBindingOverride
SoOverrideElement_getPickStyleOverride = Coin_SWIG_Python.SoOverrideElement_getPickStyleOverride
SoOverrideElement_getPointSizeOverride = Coin_SWIG_Python.SoOverrideElement_getPointSizeOverride
SoOverrideElement_getPolygonOffsetOverride = Coin_SWIG_Python.SoOverrideElement_getPolygonOffsetOverride
SoOverrideElement_getShapeHintsOverride = Coin_SWIG_Python.SoOverrideElement_getShapeHintsOverride
SoOverrideElement_getShininessOverride = Coin_SWIG_Python.SoOverrideElement_getShininessOverride
SoOverrideElement_getSpecularColorOverride = Coin_SWIG_Python.SoOverrideElement_getSpecularColorOverride
SoOverrideElement_getTransparencyOverride = Coin_SWIG_Python.SoOverrideElement_getTransparencyOverride
SoOverrideElement_getTransparencyTypeOverride = Coin_SWIG_Python.SoOverrideElement_getTransparencyTypeOverride
SoOverrideElement_getNormalVectorOverride = Coin_SWIG_Python.SoOverrideElement_getNormalVectorOverride
SoOverrideElement_getNormalBindingOverride = Coin_SWIG_Python.SoOverrideElement_getNormalBindingOverride
SoOverrideElement_setAmbientColorOverride = Coin_SWIG_Python.SoOverrideElement_setAmbientColorOverride
SoOverrideElement_setColorIndexOverride = Coin_SWIG_Python.SoOverrideElement_setColorIndexOverride
SoOverrideElement_setComplexityOverride = Coin_SWIG_Python.SoOverrideElement_setComplexityOverride
SoOverrideElement_setComplexityTypeOverride = Coin_SWIG_Python.SoOverrideElement_setComplexityTypeOverride
SoOverrideElement_setCreaseAngleOverride = Coin_SWIG_Python.SoOverrideElement_setCreaseAngleOverride
SoOverrideElement_setDiffuseColorOverride = Coin_SWIG_Python.SoOverrideElement_setDiffuseColorOverride
SoOverrideElement_setDrawStyleOverride = Coin_SWIG_Python.SoOverrideElement_setDrawStyleOverride
SoOverrideElement_setEmissiveColorOverride = Coin_SWIG_Python.SoOverrideElement_setEmissiveColorOverride
SoOverrideElement_setFontNameOverride = Coin_SWIG_Python.SoOverrideElement_setFontNameOverride
SoOverrideElement_setFontSizeOverride = Coin_SWIG_Python.SoOverrideElement_setFontSizeOverride
SoOverrideElement_setLightModelOverride = Coin_SWIG_Python.SoOverrideElement_setLightModelOverride
SoOverrideElement_setLinePatternOverride = Coin_SWIG_Python.SoOverrideElement_setLinePatternOverride
SoOverrideElement_setLineWidthOverride = Coin_SWIG_Python.SoOverrideElement_setLineWidthOverride
SoOverrideElement_setMaterialBindingOverride = Coin_SWIG_Python.SoOverrideElement_setMaterialBindingOverride
SoOverrideElement_setPickStyleOverride = Coin_SWIG_Python.SoOverrideElement_setPickStyleOverride
SoOverrideElement_setPointSizeOverride = Coin_SWIG_Python.SoOverrideElement_setPointSizeOverride
SoOverrideElement_setPolygonOffsetOverride = Coin_SWIG_Python.SoOverrideElement_setPolygonOffsetOverride
SoOverrideElement_setShapeHintsOverride = Coin_SWIG_Python.SoOverrideElement_setShapeHintsOverride
SoOverrideElement_setShininessOverride = Coin_SWIG_Python.SoOverrideElement_setShininessOverride
SoOverrideElement_setSpecularColorOverride = Coin_SWIG_Python.SoOverrideElement_setSpecularColorOverride
SoOverrideElement_setTransparencyOverride = Coin_SWIG_Python.SoOverrideElement_setTransparencyOverride
SoOverrideElement_setTransparencyTypeOverride = Coin_SWIG_Python.SoOverrideElement_setTransparencyTypeOverride
SoOverrideElement_setNormalVectorOverride = Coin_SWIG_Python.SoOverrideElement_setNormalVectorOverride
SoOverrideElement_setNormalBindingOverride = Coin_SWIG_Python.SoOverrideElement_setNormalBindingOverride

class SoPickRayElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPickRayElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoPickRayElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoPickRayElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoPickRayElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoPickRayElement_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoPickRayElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoPickRayElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoPickRayElement_set)
    get = staticmethod(Coin_SWIG_Python.SoPickRayElement_get)
SoPickRayElement_swigregister = Coin_SWIG_Python.SoPickRayElement_swigregister
SoPickRayElement_swigregister(SoPickRayElement)
SoPickRayElement_getClassTypeId = Coin_SWIG_Python.SoPickRayElement_getClassTypeId
SoPickRayElement_getClassStackIndex = Coin_SWIG_Python.SoPickRayElement_getClassStackIndex
SoPickRayElement_createInstance = Coin_SWIG_Python.SoPickRayElement_createInstance
SoPickRayElement_initClass = Coin_SWIG_Python.SoPickRayElement_initClass
SoPickRayElement_set = Coin_SWIG_Python.SoPickRayElement_set
SoPickRayElement_get = Coin_SWIG_Python.SoPickRayElement_get

class SoGLCoordinateElement(SoCoordinateElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLCoordinateElement_initClass)
    def getPtr3(*args): return Coin_SWIG_Python.SoGLCoordinateElement_getPtr3(*args)
    def getPtr4(*args): return Coin_SWIG_Python.SoGLCoordinateElement_getPtr4(*args)
    def send(*args): return Coin_SWIG_Python.SoGLCoordinateElement_send(*args)
SoGLCoordinateElement_swigregister = Coin_SWIG_Python.SoGLCoordinateElement_swigregister
SoGLCoordinateElement_swigregister(SoGLCoordinateElement)
SoGLCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoGLCoordinateElement_getClassTypeId
SoGLCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoGLCoordinateElement_getClassStackIndex
SoGLCoordinateElement_createInstance = Coin_SWIG_Python.SoGLCoordinateElement_createInstance
SoGLCoordinateElement_initClass = Coin_SWIG_Python.SoGLCoordinateElement_initClass

class SoEnvironmentElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_initClass)
    NONE = Coin_SWIG_Python.SoEnvironmentElement_NONE
    HAZE = Coin_SWIG_Python.SoEnvironmentElement_HAZE
    FOG = Coin_SWIG_Python.SoEnvironmentElement_FOG
    SMOKE = Coin_SWIG_Python.SoEnvironmentElement_SMOKE
    def init(*args): return Coin_SWIG_Python.SoEnvironmentElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_set)
    get = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_get)
    getAmbientIntensity = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getAmbientIntensity)
    getFogVisibility = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getFogVisibility)
    getLightAttenuation = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getLightAttenuation)
    getAmbientColor = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getAmbientColor)
    getFogColor = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getFogColor)
    getFogType = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getFogType)
    getDefault = staticmethod(Coin_SWIG_Python.SoEnvironmentElement_getDefault)
    def output(*args): return Coin_SWIG_Python.SoEnvironmentElement_output(*args)
SoEnvironmentElement_swigregister = Coin_SWIG_Python.SoEnvironmentElement_swigregister
SoEnvironmentElement_swigregister(SoEnvironmentElement)
SoEnvironmentElement_getClassTypeId = Coin_SWIG_Python.SoEnvironmentElement_getClassTypeId
SoEnvironmentElement_getClassStackIndex = Coin_SWIG_Python.SoEnvironmentElement_getClassStackIndex
SoEnvironmentElement_createInstance = Coin_SWIG_Python.SoEnvironmentElement_createInstance
SoEnvironmentElement_initClass = Coin_SWIG_Python.SoEnvironmentElement_initClass
SoEnvironmentElement_set = Coin_SWIG_Python.SoEnvironmentElement_set
SoEnvironmentElement_get = Coin_SWIG_Python.SoEnvironmentElement_get
SoEnvironmentElement_getAmbientIntensity = Coin_SWIG_Python.SoEnvironmentElement_getAmbientIntensity
SoEnvironmentElement_getFogVisibility = Coin_SWIG_Python.SoEnvironmentElement_getFogVisibility
SoEnvironmentElement_getLightAttenuation = Coin_SWIG_Python.SoEnvironmentElement_getLightAttenuation
SoEnvironmentElement_getAmbientColor = Coin_SWIG_Python.SoEnvironmentElement_getAmbientColor
SoEnvironmentElement_getFogColor = Coin_SWIG_Python.SoEnvironmentElement_getFogColor
SoEnvironmentElement_getFogType = Coin_SWIG_Python.SoEnvironmentElement_getFogType
SoEnvironmentElement_getDefault = Coin_SWIG_Python.SoEnvironmentElement_getDefault

class SoGLEnvironmentElement(SoEnvironmentElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLEnvironmentElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLEnvironmentElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLEnvironmentElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLEnvironmentElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLEnvironmentElement_init(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLEnvironmentElement_pop(*args)
SoGLEnvironmentElement_swigregister = Coin_SWIG_Python.SoGLEnvironmentElement_swigregister
SoGLEnvironmentElement_swigregister(SoGLEnvironmentElement)
SoGLEnvironmentElement_getClassTypeId = Coin_SWIG_Python.SoGLEnvironmentElement_getClassTypeId
SoGLEnvironmentElement_getClassStackIndex = Coin_SWIG_Python.SoGLEnvironmentElement_getClassStackIndex
SoGLEnvironmentElement_createInstance = Coin_SWIG_Python.SoGLEnvironmentElement_createInstance
SoGLEnvironmentElement_initClass = Coin_SWIG_Python.SoGLEnvironmentElement_initClass

class SoFontNameElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFontNameElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoFontNameElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoFontNameElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoFontNameElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoFontNameElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoFontNameElement_set)
    get = staticmethod(Coin_SWIG_Python.SoFontNameElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoFontNameElement_getDefault)
    def matches(*args): return Coin_SWIG_Python.SoFontNameElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoFontNameElement_copyMatchInfo(*args)
    def output(*args): return Coin_SWIG_Python.SoFontNameElement_output(*args)
SoFontNameElement_swigregister = Coin_SWIG_Python.SoFontNameElement_swigregister
SoFontNameElement_swigregister(SoFontNameElement)
SoFontNameElement_getClassTypeId = Coin_SWIG_Python.SoFontNameElement_getClassTypeId
SoFontNameElement_getClassStackIndex = Coin_SWIG_Python.SoFontNameElement_getClassStackIndex
SoFontNameElement_createInstance = Coin_SWIG_Python.SoFontNameElement_createInstance
SoFontNameElement_initClass = Coin_SWIG_Python.SoFontNameElement_initClass
SoFontNameElement_set = Coin_SWIG_Python.SoFontNameElement_set
SoFontNameElement_get = Coin_SWIG_Python.SoFontNameElement_get
SoFontNameElement_getDefault = Coin_SWIG_Python.SoFontNameElement_getDefault

class SoLightAttenuationElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoLightAttenuationElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_set)
    get = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoLightAttenuationElement_getDefault)
    def matches(*args): return Coin_SWIG_Python.SoLightAttenuationElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoLightAttenuationElement_copyMatchInfo(*args)
    def output(*args): return Coin_SWIG_Python.SoLightAttenuationElement_output(*args)
SoLightAttenuationElement_swigregister = Coin_SWIG_Python.SoLightAttenuationElement_swigregister
SoLightAttenuationElement_swigregister(SoLightAttenuationElement)
SoLightAttenuationElement_getClassTypeId = Coin_SWIG_Python.SoLightAttenuationElement_getClassTypeId
SoLightAttenuationElement_getClassStackIndex = Coin_SWIG_Python.SoLightAttenuationElement_getClassStackIndex
SoLightAttenuationElement_createInstance = Coin_SWIG_Python.SoLightAttenuationElement_createInstance
SoLightAttenuationElement_initClass = Coin_SWIG_Python.SoLightAttenuationElement_initClass
SoLightAttenuationElement_set = Coin_SWIG_Python.SoLightAttenuationElement_set
SoLightAttenuationElement_get = Coin_SWIG_Python.SoLightAttenuationElement_get
SoLightAttenuationElement_getDefault = Coin_SWIG_Python.SoLightAttenuationElement_getDefault

class SoPolygonOffsetElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_initClass)
    FILLED = Coin_SWIG_Python.SoPolygonOffsetElement_FILLED
    LINES = Coin_SWIG_Python.SoPolygonOffsetElement_LINES
    POINTS = Coin_SWIG_Python.SoPolygonOffsetElement_POINTS
    def init(*args): return Coin_SWIG_Python.SoPolygonOffsetElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_set)
    get = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoPolygonOffsetElement_getDefault)
SoPolygonOffsetElement_swigregister = Coin_SWIG_Python.SoPolygonOffsetElement_swigregister
SoPolygonOffsetElement_swigregister(SoPolygonOffsetElement)
SoPolygonOffsetElement_getClassTypeId = Coin_SWIG_Python.SoPolygonOffsetElement_getClassTypeId
SoPolygonOffsetElement_getClassStackIndex = Coin_SWIG_Python.SoPolygonOffsetElement_getClassStackIndex
SoPolygonOffsetElement_createInstance = Coin_SWIG_Python.SoPolygonOffsetElement_createInstance
SoPolygonOffsetElement_initClass = Coin_SWIG_Python.SoPolygonOffsetElement_initClass
SoPolygonOffsetElement_set = Coin_SWIG_Python.SoPolygonOffsetElement_set
SoPolygonOffsetElement_get = Coin_SWIG_Python.SoPolygonOffsetElement_get
SoPolygonOffsetElement_getDefault = Coin_SWIG_Python.SoPolygonOffsetElement_getDefault

class SoGLPolygonOffsetElement(SoPolygonOffsetElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLPolygonOffsetElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLPolygonOffsetElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLPolygonOffsetElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLPolygonOffsetElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLPolygonOffsetElement_pop(*args)
SoGLPolygonOffsetElement_swigregister = Coin_SWIG_Python.SoGLPolygonOffsetElement_swigregister
SoGLPolygonOffsetElement_swigregister(SoGLPolygonOffsetElement)
SoGLPolygonOffsetElement_getClassTypeId = Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassTypeId
SoGLPolygonOffsetElement_getClassStackIndex = Coin_SWIG_Python.SoGLPolygonOffsetElement_getClassStackIndex
SoGLPolygonOffsetElement_createInstance = Coin_SWIG_Python.SoGLPolygonOffsetElement_createInstance
SoGLPolygonOffsetElement_initClass = Coin_SWIG_Python.SoGLPolygonOffsetElement_initClass

class SoProjectionMatrixElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProjectionMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoProjectionMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoProjectionMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoProjectionMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoProjectionMatrixElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoProjectionMatrixElement_set)
    get = staticmethod(Coin_SWIG_Python.SoProjectionMatrixElement_get)
SoProjectionMatrixElement_swigregister = Coin_SWIG_Python.SoProjectionMatrixElement_swigregister
SoProjectionMatrixElement_swigregister(SoProjectionMatrixElement)
SoProjectionMatrixElement_getClassTypeId = Coin_SWIG_Python.SoProjectionMatrixElement_getClassTypeId
SoProjectionMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoProjectionMatrixElement_getClassStackIndex
SoProjectionMatrixElement_createInstance = Coin_SWIG_Python.SoProjectionMatrixElement_createInstance
SoProjectionMatrixElement_initClass = Coin_SWIG_Python.SoProjectionMatrixElement_initClass
SoProjectionMatrixElement_set = Coin_SWIG_Python.SoProjectionMatrixElement_set
SoProjectionMatrixElement_get = Coin_SWIG_Python.SoProjectionMatrixElement_get

class SoGLProjectionMatrixElement(SoProjectionMatrixElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLProjectionMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLProjectionMatrixElement_initClass)
    def pop(*args): return Coin_SWIG_Python.SoGLProjectionMatrixElement_pop(*args)
SoGLProjectionMatrixElement_swigregister = Coin_SWIG_Python.SoGLProjectionMatrixElement_swigregister
SoGLProjectionMatrixElement_swigregister(SoGLProjectionMatrixElement)
SoGLProjectionMatrixElement_getClassTypeId = Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassTypeId
SoGLProjectionMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoGLProjectionMatrixElement_getClassStackIndex
SoGLProjectionMatrixElement_createInstance = Coin_SWIG_Python.SoGLProjectionMatrixElement_createInstance
SoGLProjectionMatrixElement_initClass = Coin_SWIG_Python.SoGLProjectionMatrixElement_initClass

class SoProfileCoordinateElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_init(*args)
    set2 = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_set2)
    set3 = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_set3)
    getInstance = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_getNum(*args)
    def get2(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_get2(*args)
    def get3(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_get3(*args)
    def is2D(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_is2D(*args)
    getDefault2 = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_getDefault2)
    getDefault3 = staticmethod(Coin_SWIG_Python.SoProfileCoordinateElement_getDefault3)
    def getArrayPtr2(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_getArrayPtr2(*args)
    def getArrayPtr3(*args): return Coin_SWIG_Python.SoProfileCoordinateElement_getArrayPtr3(*args)
SoProfileCoordinateElement_swigregister = Coin_SWIG_Python.SoProfileCoordinateElement_swigregister
SoProfileCoordinateElement_swigregister(SoProfileCoordinateElement)
SoProfileCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoProfileCoordinateElement_getClassTypeId
SoProfileCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoProfileCoordinateElement_getClassStackIndex
SoProfileCoordinateElement_createInstance = Coin_SWIG_Python.SoProfileCoordinateElement_createInstance
SoProfileCoordinateElement_initClass = Coin_SWIG_Python.SoProfileCoordinateElement_initClass
SoProfileCoordinateElement_set2 = Coin_SWIG_Python.SoProfileCoordinateElement_set2
SoProfileCoordinateElement_set3 = Coin_SWIG_Python.SoProfileCoordinateElement_set3
SoProfileCoordinateElement_getInstance = Coin_SWIG_Python.SoProfileCoordinateElement_getInstance
SoProfileCoordinateElement_getDefault2 = Coin_SWIG_Python.SoProfileCoordinateElement_getDefault2
SoProfileCoordinateElement_getDefault3 = Coin_SWIG_Python.SoProfileCoordinateElement_getDefault3

class SoGLTextureImageElement(SoTextureImageElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLTextureImageElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLTextureImageElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLTextureImageElement_pop(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_set)
    get = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_get)
    getMaxGLTextureSize = staticmethod(Coin_SWIG_Python.SoGLTextureImageElement_getMaxGLTextureSize)
    def isTextureSizeLegal(*args): return Coin_SWIG_Python.SoGLTextureImageElement_isTextureSizeLegal(*args)
SoGLTextureImageElement_swigregister = Coin_SWIG_Python.SoGLTextureImageElement_swigregister
SoGLTextureImageElement_swigregister(SoGLTextureImageElement)
SoGLTextureImageElement_getClassTypeId = Coin_SWIG_Python.SoGLTextureImageElement_getClassTypeId
SoGLTextureImageElement_getClassStackIndex = Coin_SWIG_Python.SoGLTextureImageElement_getClassStackIndex
SoGLTextureImageElement_createInstance = Coin_SWIG_Python.SoGLTextureImageElement_createInstance
SoGLTextureImageElement_initClass = Coin_SWIG_Python.SoGLTextureImageElement_initClass
SoGLTextureImageElement_set = Coin_SWIG_Python.SoGLTextureImageElement_set
SoGLTextureImageElement_get = Coin_SWIG_Python.SoGLTextureImageElement_get
SoGLTextureImageElement_getMaxGLTextureSize = Coin_SWIG_Python.SoGLTextureImageElement_getMaxGLTextureSize

class SoViewingMatrixElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoViewingMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoViewingMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoViewingMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoViewingMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoViewingMatrixElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoViewingMatrixElement_set)
    get = staticmethod(Coin_SWIG_Python.SoViewingMatrixElement_get)
SoViewingMatrixElement_swigregister = Coin_SWIG_Python.SoViewingMatrixElement_swigregister
SoViewingMatrixElement_swigregister(SoViewingMatrixElement)
SoViewingMatrixElement_getClassTypeId = Coin_SWIG_Python.SoViewingMatrixElement_getClassTypeId
SoViewingMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoViewingMatrixElement_getClassStackIndex
SoViewingMatrixElement_createInstance = Coin_SWIG_Python.SoViewingMatrixElement_createInstance
SoViewingMatrixElement_initClass = Coin_SWIG_Python.SoViewingMatrixElement_initClass
SoViewingMatrixElement_set = Coin_SWIG_Python.SoViewingMatrixElement_set
SoViewingMatrixElement_get = Coin_SWIG_Python.SoViewingMatrixElement_get

class SoGLViewingMatrixElement(SoViewingMatrixElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLViewingMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLViewingMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLViewingMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLViewingMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLViewingMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLViewingMatrixElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLViewingMatrixElement_pop(*args)
    getNodeId = staticmethod(Coin_SWIG_Python.SoGLViewingMatrixElement_getNodeId)
    getResetMatrix = staticmethod(Coin_SWIG_Python.SoGLViewingMatrixElement_getResetMatrix)
SoGLViewingMatrixElement_swigregister = Coin_SWIG_Python.SoGLViewingMatrixElement_swigregister
SoGLViewingMatrixElement_swigregister(SoGLViewingMatrixElement)
SoGLViewingMatrixElement_getClassTypeId = Coin_SWIG_Python.SoGLViewingMatrixElement_getClassTypeId
SoGLViewingMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoGLViewingMatrixElement_getClassStackIndex
SoGLViewingMatrixElement_createInstance = Coin_SWIG_Python.SoGLViewingMatrixElement_createInstance
SoGLViewingMatrixElement_initClass = Coin_SWIG_Python.SoGLViewingMatrixElement_initClass
SoGLViewingMatrixElement_getNodeId = Coin_SWIG_Python.SoGLViewingMatrixElement_getNodeId
SoGLViewingMatrixElement_getResetMatrix = Coin_SWIG_Python.SoGLViewingMatrixElement_getResetMatrix

class SoResetMatrixElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoResetMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoResetMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoResetMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoResetMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoResetMatrixElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoResetMatrixElement_set)
    get = staticmethod(Coin_SWIG_Python.SoResetMatrixElement_get)
SoResetMatrixElement_swigregister = Coin_SWIG_Python.SoResetMatrixElement_swigregister
SoResetMatrixElement_swigregister(SoResetMatrixElement)
SoResetMatrixElement_getClassTypeId = Coin_SWIG_Python.SoResetMatrixElement_getClassTypeId
SoResetMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoResetMatrixElement_getClassStackIndex
SoResetMatrixElement_createInstance = Coin_SWIG_Python.SoResetMatrixElement_createInstance
SoResetMatrixElement_initClass = Coin_SWIG_Python.SoResetMatrixElement_initClass
SoResetMatrixElement_set = Coin_SWIG_Python.SoResetMatrixElement_set
SoResetMatrixElement_get = Coin_SWIG_Python.SoResetMatrixElement_get

class SoViewVolumeElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoViewVolumeElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoViewVolumeElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoViewVolumeElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoViewVolumeElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoViewVolumeElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoViewVolumeElement_set)
    get = staticmethod(Coin_SWIG_Python.SoViewVolumeElement_get)
SoViewVolumeElement_swigregister = Coin_SWIG_Python.SoViewVolumeElement_swigregister
SoViewVolumeElement_swigregister(SoViewVolumeElement)
SoViewVolumeElement_getClassTypeId = Coin_SWIG_Python.SoViewVolumeElement_getClassTypeId
SoViewVolumeElement_getClassStackIndex = Coin_SWIG_Python.SoViewVolumeElement_getClassStackIndex
SoViewVolumeElement_createInstance = Coin_SWIG_Python.SoViewVolumeElement_createInstance
SoViewVolumeElement_initClass = Coin_SWIG_Python.SoViewVolumeElement_initClass
SoViewVolumeElement_set = Coin_SWIG_Python.SoViewVolumeElement_set
SoViewVolumeElement_get = Coin_SWIG_Python.SoViewVolumeElement_get

class SoGLShapeHintsElement(SoShapeHintsElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLShapeHintsElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLShapeHintsElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLShapeHintsElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLShapeHintsElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLShapeHintsElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLShapeHintsElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLShapeHintsElement_pop(*args)
    forceSend = staticmethod(Coin_SWIG_Python.SoGLShapeHintsElement_forceSend)
SoGLShapeHintsElement_swigregister = Coin_SWIG_Python.SoGLShapeHintsElement_swigregister
SoGLShapeHintsElement_swigregister(SoGLShapeHintsElement)
SoGLShapeHintsElement_getClassTypeId = Coin_SWIG_Python.SoGLShapeHintsElement_getClassTypeId
SoGLShapeHintsElement_getClassStackIndex = Coin_SWIG_Python.SoGLShapeHintsElement_getClassStackIndex
SoGLShapeHintsElement_createInstance = Coin_SWIG_Python.SoGLShapeHintsElement_createInstance
SoGLShapeHintsElement_initClass = Coin_SWIG_Python.SoGLShapeHintsElement_initClass
SoGLShapeHintsElement_forceSend = Coin_SWIG_Python.SoGLShapeHintsElement_forceSend

class SoShapeStyleElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_initClass)
    LIGHTING = Coin_SWIG_Python.SoShapeStyleElement_LIGHTING
    TEXENABLED = Coin_SWIG_Python.SoShapeStyleElement_TEXENABLED
    TEXFUNC = Coin_SWIG_Python.SoShapeStyleElement_TEXFUNC
    BBOXCMPLX = Coin_SWIG_Python.SoShapeStyleElement_BBOXCMPLX
    INVISIBLE = Coin_SWIG_Python.SoShapeStyleElement_INVISIBLE
    ABORTCB = Coin_SWIG_Python.SoShapeStyleElement_ABORTCB
    OVERRIDE = Coin_SWIG_Python.SoShapeStyleElement_OVERRIDE
    TEX3ENABLED = Coin_SWIG_Python.SoShapeStyleElement_TEX3ENABLED
    BIGIMAGE = Coin_SWIG_Python.SoShapeStyleElement_BIGIMAGE
    BUMPMAP = Coin_SWIG_Python.SoShapeStyleElement_BUMPMAP
    VERTEXARRAY = Coin_SWIG_Python.SoShapeStyleElement_VERTEXARRAY
    TRANSP_TEXTURE = Coin_SWIG_Python.SoShapeStyleElement_TRANSP_TEXTURE
    TRANSP_MATERIAL = Coin_SWIG_Python.SoShapeStyleElement_TRANSP_MATERIAL
    TRANSP_SORTED_TRIANGLES = Coin_SWIG_Python.SoShapeStyleElement_TRANSP_SORTED_TRIANGLES
    SHADOWMAP = Coin_SWIG_Python.SoShapeStyleElement_SHADOWMAP
    SHADOWS = Coin_SWIG_Python.SoShapeStyleElement_SHADOWS
    def init(*args): return Coin_SWIG_Python.SoShapeStyleElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoShapeStyleElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoShapeStyleElement_pop(*args)
    def matches(*args): return Coin_SWIG_Python.SoShapeStyleElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoShapeStyleElement_copyMatchInfo(*args)
    get = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_get)
    def getFlags(*args): return Coin_SWIG_Python.SoShapeStyleElement_getFlags(*args)
    def mightNotRender(*args): return Coin_SWIG_Python.SoShapeStyleElement_mightNotRender(*args)
    def needNormals(*args): return Coin_SWIG_Python.SoShapeStyleElement_needNormals(*args)
    def needTexCoords(*args): return Coin_SWIG_Python.SoShapeStyleElement_needTexCoords(*args)
    def getRenderCaseMask(*args): return Coin_SWIG_Python.SoShapeStyleElement_getRenderCaseMask(*args)
    setDrawStyle = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setDrawStyle)
    setComplexityType = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setComplexityType)
    setTransparencyType = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setTransparencyType)
    setTextureEnabled = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setTextureEnabled)
    setTexture3Enabled = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setTexture3Enabled)
    setTextureFunction = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setTextureFunction)
    setLightModel = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setLightModel)
    setOverrides = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setOverrides)
    isScreenDoor = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_isScreenDoor)
    getTransparencyType = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_getTransparencyType)
    def isTextureFunction(*args): return Coin_SWIG_Python.SoShapeStyleElement_isTextureFunction(*args)
    setBumpmapEnabled = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setBumpmapEnabled)
    setBigImageEnabled = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setBigImageEnabled)
    setVertexArrayRendering = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setVertexArrayRendering)
    setTransparentMaterial = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setTransparentMaterial)
    setTransparentTexture = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setTransparentTexture)
    setShadowMapRendering = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setShadowMapRendering)
    setShadowsRendering = staticmethod(Coin_SWIG_Python.SoShapeStyleElement_setShadowsRendering)
SoShapeStyleElement_swigregister = Coin_SWIG_Python.SoShapeStyleElement_swigregister
SoShapeStyleElement_swigregister(SoShapeStyleElement)
SoShapeStyleElement_getClassTypeId = Coin_SWIG_Python.SoShapeStyleElement_getClassTypeId
SoShapeStyleElement_getClassStackIndex = Coin_SWIG_Python.SoShapeStyleElement_getClassStackIndex
SoShapeStyleElement_createInstance = Coin_SWIG_Python.SoShapeStyleElement_createInstance
SoShapeStyleElement_initClass = Coin_SWIG_Python.SoShapeStyleElement_initClass
SoShapeStyleElement_get = Coin_SWIG_Python.SoShapeStyleElement_get
SoShapeStyleElement_setDrawStyle = Coin_SWIG_Python.SoShapeStyleElement_setDrawStyle
SoShapeStyleElement_setComplexityType = Coin_SWIG_Python.SoShapeStyleElement_setComplexityType
SoShapeStyleElement_setTransparencyType = Coin_SWIG_Python.SoShapeStyleElement_setTransparencyType
SoShapeStyleElement_setTextureEnabled = Coin_SWIG_Python.SoShapeStyleElement_setTextureEnabled
SoShapeStyleElement_setTexture3Enabled = Coin_SWIG_Python.SoShapeStyleElement_setTexture3Enabled
SoShapeStyleElement_setTextureFunction = Coin_SWIG_Python.SoShapeStyleElement_setTextureFunction
SoShapeStyleElement_setLightModel = Coin_SWIG_Python.SoShapeStyleElement_setLightModel
SoShapeStyleElement_setOverrides = Coin_SWIG_Python.SoShapeStyleElement_setOverrides
SoShapeStyleElement_isScreenDoor = Coin_SWIG_Python.SoShapeStyleElement_isScreenDoor
SoShapeStyleElement_getTransparencyType = Coin_SWIG_Python.SoShapeStyleElement_getTransparencyType
SoShapeStyleElement_setBumpmapEnabled = Coin_SWIG_Python.SoShapeStyleElement_setBumpmapEnabled
SoShapeStyleElement_setBigImageEnabled = Coin_SWIG_Python.SoShapeStyleElement_setBigImageEnabled
SoShapeStyleElement_setVertexArrayRendering = Coin_SWIG_Python.SoShapeStyleElement_setVertexArrayRendering
SoShapeStyleElement_setTransparentMaterial = Coin_SWIG_Python.SoShapeStyleElement_setTransparentMaterial
SoShapeStyleElement_setTransparentTexture = Coin_SWIG_Python.SoShapeStyleElement_setTransparentTexture
SoShapeStyleElement_setShadowMapRendering = Coin_SWIG_Python.SoShapeStyleElement_setShadowMapRendering
SoShapeStyleElement_setShadowsRendering = Coin_SWIG_Python.SoShapeStyleElement_setShadowsRendering

class SoViewportRegionElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoViewportRegionElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoViewportRegionElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoViewportRegionElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoViewportRegionElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoViewportRegionElement_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoViewportRegionElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoViewportRegionElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoViewportRegionElement_set)
    get = staticmethod(Coin_SWIG_Python.SoViewportRegionElement_get)
    def output(*args): return Coin_SWIG_Python.SoViewportRegionElement_output(*args)
SoViewportRegionElement_swigregister = Coin_SWIG_Python.SoViewportRegionElement_swigregister
SoViewportRegionElement_swigregister(SoViewportRegionElement)
SoViewportRegionElement_getClassTypeId = Coin_SWIG_Python.SoViewportRegionElement_getClassTypeId
SoViewportRegionElement_getClassStackIndex = Coin_SWIG_Python.SoViewportRegionElement_getClassStackIndex
SoViewportRegionElement_createInstance = Coin_SWIG_Python.SoViewportRegionElement_createInstance
SoViewportRegionElement_initClass = Coin_SWIG_Python.SoViewportRegionElement_initClass
SoViewportRegionElement_set = Coin_SWIG_Python.SoViewportRegionElement_set
SoViewportRegionElement_get = Coin_SWIG_Python.SoViewportRegionElement_get

class SoGLViewportRegionElement(SoViewportRegionElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLViewportRegionElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLViewportRegionElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLViewportRegionElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLViewportRegionElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLViewportRegionElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLViewportRegionElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLViewportRegionElement_pop(*args)
SoGLViewportRegionElement_swigregister = Coin_SWIG_Python.SoGLViewportRegionElement_swigregister
SoGLViewportRegionElement_swigregister(SoGLViewportRegionElement)
SoGLViewportRegionElement_getClassTypeId = Coin_SWIG_Python.SoGLViewportRegionElement_getClassTypeId
SoGLViewportRegionElement_getClassStackIndex = Coin_SWIG_Python.SoGLViewportRegionElement_getClassStackIndex
SoGLViewportRegionElement_createInstance = Coin_SWIG_Python.SoGLViewportRegionElement_createInstance
SoGLViewportRegionElement_initClass = Coin_SWIG_Python.SoGLViewportRegionElement_initClass

class SoWindowElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoWindowElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoWindowElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoWindowElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoWindowElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoWindowElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoWindowElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoWindowElement_pop(*args)
    def matches(*args): return Coin_SWIG_Python.SoWindowElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoWindowElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoWindowElement_set)
    get = staticmethod(Coin_SWIG_Python.SoWindowElement_get)
SoWindowElement_swigregister = Coin_SWIG_Python.SoWindowElement_swigregister
SoWindowElement_swigregister(SoWindowElement)
SoWindowElement_getClassTypeId = Coin_SWIG_Python.SoWindowElement_getClassTypeId
SoWindowElement_getClassStackIndex = Coin_SWIG_Python.SoWindowElement_getClassStackIndex
SoWindowElement_createInstance = Coin_SWIG_Python.SoWindowElement_createInstance
SoWindowElement_initClass = Coin_SWIG_Python.SoWindowElement_initClass
SoWindowElement_set = Coin_SWIG_Python.SoWindowElement_set
SoWindowElement_get = Coin_SWIG_Python.SoWindowElement_get

class SoGLCacheContextElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLCacheContextElement_init(*args)
    def matches(*args): return Coin_SWIG_Python.SoGLCacheContextElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoGLCacheContextElement_copyMatchInfo(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_set)
    get = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_get)
    getExtID = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_getExtID)
    getOpenGLVersion = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_getOpenGLVersion)
    extSupported = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_extSupported)
    areMipMapsFast = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_areMipMapsFast)
    DO_AUTO_CACHE = Coin_SWIG_Python.SoGLCacheContextElement_DO_AUTO_CACHE
    DONT_AUTO_CACHE = Coin_SWIG_Python.SoGLCacheContextElement_DONT_AUTO_CACHE
    shouldAutoCache = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_shouldAutoCache)
    setAutoCacheBits = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_setAutoCacheBits)
    resetAutoCacheBits = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_resetAutoCacheBits)
    getIsRemoteRendering = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_getIsRemoteRendering)
    getUniqueCacheContext = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_getUniqueCacheContext)
    scheduleDeleteCallback = staticmethod(Coin_SWIG_Python.SoGLCacheContextElement_scheduleDeleteCallback)
SoGLCacheContextElement_swigregister = Coin_SWIG_Python.SoGLCacheContextElement_swigregister
SoGLCacheContextElement_swigregister(SoGLCacheContextElement)
SoGLCacheContextElement_getClassTypeId = Coin_SWIG_Python.SoGLCacheContextElement_getClassTypeId
SoGLCacheContextElement_getClassStackIndex = Coin_SWIG_Python.SoGLCacheContextElement_getClassStackIndex
SoGLCacheContextElement_createInstance = Coin_SWIG_Python.SoGLCacheContextElement_createInstance
SoGLCacheContextElement_initClass = Coin_SWIG_Python.SoGLCacheContextElement_initClass
SoGLCacheContextElement_set = Coin_SWIG_Python.SoGLCacheContextElement_set
SoGLCacheContextElement_get = Coin_SWIG_Python.SoGLCacheContextElement_get
SoGLCacheContextElement_getExtID = Coin_SWIG_Python.SoGLCacheContextElement_getExtID
SoGLCacheContextElement_getOpenGLVersion = Coin_SWIG_Python.SoGLCacheContextElement_getOpenGLVersion
SoGLCacheContextElement_extSupported = Coin_SWIG_Python.SoGLCacheContextElement_extSupported
SoGLCacheContextElement_areMipMapsFast = Coin_SWIG_Python.SoGLCacheContextElement_areMipMapsFast
SoGLCacheContextElement_shouldAutoCache = Coin_SWIG_Python.SoGLCacheContextElement_shouldAutoCache
SoGLCacheContextElement_setAutoCacheBits = Coin_SWIG_Python.SoGLCacheContextElement_setAutoCacheBits
SoGLCacheContextElement_resetAutoCacheBits = Coin_SWIG_Python.SoGLCacheContextElement_resetAutoCacheBits
SoGLCacheContextElement_getIsRemoteRendering = Coin_SWIG_Python.SoGLCacheContextElement_getIsRemoteRendering
SoGLCacheContextElement_getUniqueCacheContext = Coin_SWIG_Python.SoGLCacheContextElement_getUniqueCacheContext
SoGLCacheContextElement_scheduleDeleteCallback = Coin_SWIG_Python.SoGLCacheContextElement_scheduleDeleteCallback

class SoGLDisplayList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DISPLAY_LIST = Coin_SWIG_Python.SoGLDisplayList_DISPLAY_LIST
    TEXTURE_OBJECT = Coin_SWIG_Python.SoGLDisplayList_TEXTURE_OBJECT
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLDisplayList(*args)
        try: self.this.append(this)
        except: self.this = this
    def ref(*args): return Coin_SWIG_Python.SoGLDisplayList_ref(*args)
    def unref(*args): return Coin_SWIG_Python.SoGLDisplayList_unref(*args)
    def open(*args): return Coin_SWIG_Python.SoGLDisplayList_open(*args)
    def close(*args): return Coin_SWIG_Python.SoGLDisplayList_close(*args)
    def call(*args): return Coin_SWIG_Python.SoGLDisplayList_call(*args)
    def addDependency(*args): return Coin_SWIG_Python.SoGLDisplayList_addDependency(*args)
    def isMipMapTextureObject(*args): return Coin_SWIG_Python.SoGLDisplayList_isMipMapTextureObject(*args)
    def getType(*args): return Coin_SWIG_Python.SoGLDisplayList_getType(*args)
    def getNumAllocated(*args): return Coin_SWIG_Python.SoGLDisplayList_getNumAllocated(*args)
    def getFirstIndex(*args): return Coin_SWIG_Python.SoGLDisplayList_getFirstIndex(*args)
    def getContext(*args): return Coin_SWIG_Python.SoGLDisplayList_getContext(*args)
    def setTextureTarget(*args): return Coin_SWIG_Python.SoGLDisplayList_setTextureTarget(*args)
    def getTextureTarget(*args): return Coin_SWIG_Python.SoGLDisplayList_getTextureTarget(*args)
SoGLDisplayList_swigregister = Coin_SWIG_Python.SoGLDisplayList_swigregister
SoGLDisplayList_swigregister(SoGLDisplayList)

class SoGLColorIndexElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_initClass)
    isColorIndexMode = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_isColorIndexMode)
    def init(*args): return Coin_SWIG_Python.SoGLColorIndexElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoGLColorIndexElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoGLColorIndexElement_get(*args)
    getDefault = staticmethod(Coin_SWIG_Python.SoGLColorIndexElement_getDefault)
SoGLColorIndexElement_swigregister = Coin_SWIG_Python.SoGLColorIndexElement_swigregister
SoGLColorIndexElement_swigregister(SoGLColorIndexElement)
SoGLColorIndexElement_getClassTypeId = Coin_SWIG_Python.SoGLColorIndexElement_getClassTypeId
SoGLColorIndexElement_getClassStackIndex = Coin_SWIG_Python.SoGLColorIndexElement_getClassStackIndex
SoGLColorIndexElement_createInstance = Coin_SWIG_Python.SoGLColorIndexElement_createInstance
SoGLColorIndexElement_initClass = Coin_SWIG_Python.SoGLColorIndexElement_initClass
SoGLColorIndexElement_isColorIndexMode = Coin_SWIG_Python.SoGLColorIndexElement_isColorIndexMode
SoGLColorIndexElement_set = Coin_SWIG_Python.SoGLColorIndexElement_set
SoGLColorIndexElement_getInstance = Coin_SWIG_Python.SoGLColorIndexElement_getInstance
SoGLColorIndexElement_getDefault = Coin_SWIG_Python.SoGLColorIndexElement_getDefault

class SoListenerPositionElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoListenerPositionElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_set)
    get = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_get)
    isSetByListener = staticmethod(Coin_SWIG_Python.SoListenerPositionElement_isSetByListener)
    def output(*args): return Coin_SWIG_Python.SoListenerPositionElement_output(*args)
SoListenerPositionElement_swigregister = Coin_SWIG_Python.SoListenerPositionElement_swigregister
SoListenerPositionElement_swigregister(SoListenerPositionElement)
SoListenerPositionElement_getClassTypeId = Coin_SWIG_Python.SoListenerPositionElement_getClassTypeId
SoListenerPositionElement_getClassStackIndex = Coin_SWIG_Python.SoListenerPositionElement_getClassStackIndex
SoListenerPositionElement_createInstance = Coin_SWIG_Python.SoListenerPositionElement_createInstance
SoListenerPositionElement_initClass = Coin_SWIG_Python.SoListenerPositionElement_initClass
SoListenerPositionElement_set = Coin_SWIG_Python.SoListenerPositionElement_set
SoListenerPositionElement_get = Coin_SWIG_Python.SoListenerPositionElement_get
SoListenerPositionElement_isSetByListener = Coin_SWIG_Python.SoListenerPositionElement_isSetByListener

class SoListenerOrientationElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoListenerOrientationElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_set)
    get = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_get)
    isSetByListener = staticmethod(Coin_SWIG_Python.SoListenerOrientationElement_isSetByListener)
    def output(*args): return Coin_SWIG_Python.SoListenerOrientationElement_output(*args)
SoListenerOrientationElement_swigregister = Coin_SWIG_Python.SoListenerOrientationElement_swigregister
SoListenerOrientationElement_swigregister(SoListenerOrientationElement)
SoListenerOrientationElement_getClassTypeId = Coin_SWIG_Python.SoListenerOrientationElement_getClassTypeId
SoListenerOrientationElement_getClassStackIndex = Coin_SWIG_Python.SoListenerOrientationElement_getClassStackIndex
SoListenerOrientationElement_createInstance = Coin_SWIG_Python.SoListenerOrientationElement_createInstance
SoListenerOrientationElement_initClass = Coin_SWIG_Python.SoListenerOrientationElement_initClass
SoListenerOrientationElement_set = Coin_SWIG_Python.SoListenerOrientationElement_set
SoListenerOrientationElement_get = Coin_SWIG_Python.SoListenerOrientationElement_get
SoListenerOrientationElement_isSetByListener = Coin_SWIG_Python.SoListenerOrientationElement_isSetByListener

class SoListenerDopplerElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoListenerDopplerElement_init(*args)
    setDopplerVelocity = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_setDopplerVelocity)
    setDopplerFactor = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_setDopplerFactor)
    getDopplerVelocity = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_getDopplerVelocity)
    getDopplerFactor = staticmethod(Coin_SWIG_Python.SoListenerDopplerElement_getDopplerFactor)
    def output(*args): return Coin_SWIG_Python.SoListenerDopplerElement_output(*args)
SoListenerDopplerElement_swigregister = Coin_SWIG_Python.SoListenerDopplerElement_swigregister
SoListenerDopplerElement_swigregister(SoListenerDopplerElement)
SoListenerDopplerElement_getClassTypeId = Coin_SWIG_Python.SoListenerDopplerElement_getClassTypeId
SoListenerDopplerElement_getClassStackIndex = Coin_SWIG_Python.SoListenerDopplerElement_getClassStackIndex
SoListenerDopplerElement_createInstance = Coin_SWIG_Python.SoListenerDopplerElement_createInstance
SoListenerDopplerElement_initClass = Coin_SWIG_Python.SoListenerDopplerElement_initClass
SoListenerDopplerElement_setDopplerVelocity = Coin_SWIG_Python.SoListenerDopplerElement_setDopplerVelocity
SoListenerDopplerElement_setDopplerFactor = Coin_SWIG_Python.SoListenerDopplerElement_setDopplerFactor
SoListenerDopplerElement_getDopplerVelocity = Coin_SWIG_Python.SoListenerDopplerElement_getDopplerVelocity
SoListenerDopplerElement_getDopplerFactor = Coin_SWIG_Python.SoListenerDopplerElement_getDopplerFactor

class SoListenerGainElement(SoFloatElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoListenerGainElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoListenerGainElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoListenerGainElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoListenerGainElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoListenerGainElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoListenerGainElement_set)
    get = staticmethod(Coin_SWIG_Python.SoListenerGainElement_get)
SoListenerGainElement_swigregister = Coin_SWIG_Python.SoListenerGainElement_swigregister
SoListenerGainElement_swigregister(SoListenerGainElement)
SoListenerGainElement_getClassTypeId = Coin_SWIG_Python.SoListenerGainElement_getClassTypeId
SoListenerGainElement_getClassStackIndex = Coin_SWIG_Python.SoListenerGainElement_getClassStackIndex
SoListenerGainElement_createInstance = Coin_SWIG_Python.SoListenerGainElement_createInstance
SoListenerGainElement_initClass = Coin_SWIG_Python.SoListenerGainElement_initClass
SoListenerGainElement_set = Coin_SWIG_Python.SoListenerGainElement_set
SoListenerGainElement_get = Coin_SWIG_Python.SoListenerGainElement_get

class SoSoundElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSoundElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoSoundElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoSoundElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoSoundElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoSoundElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoSoundElement_set)
    setSceneGraphHasSoundNode = staticmethod(Coin_SWIG_Python.SoSoundElement_setSceneGraphHasSoundNode)
    sceneGraphHasSoundNode = staticmethod(Coin_SWIG_Python.SoSoundElement_sceneGraphHasSoundNode)
    setSoundNodeIsPlaying = staticmethod(Coin_SWIG_Python.SoSoundElement_setSoundNodeIsPlaying)
    soundNodeIsPlaying = staticmethod(Coin_SWIG_Python.SoSoundElement_soundNodeIsPlaying)
    setIsPartOfActiveSceneGraph = staticmethod(Coin_SWIG_Python.SoSoundElement_setIsPartOfActiveSceneGraph)
    isPartOfActiveSceneGraph = staticmethod(Coin_SWIG_Python.SoSoundElement_isPartOfActiveSceneGraph)
    def push(*args): return Coin_SWIG_Python.SoSoundElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoSoundElement_pop(*args)
    def output(*args): return Coin_SWIG_Python.SoSoundElement_output(*args)
SoSoundElement_swigregister = Coin_SWIG_Python.SoSoundElement_swigregister
SoSoundElement_swigregister(SoSoundElement)
SoSoundElement_getClassTypeId = Coin_SWIG_Python.SoSoundElement_getClassTypeId
SoSoundElement_getClassStackIndex = Coin_SWIG_Python.SoSoundElement_getClassStackIndex
SoSoundElement_createInstance = Coin_SWIG_Python.SoSoundElement_createInstance
SoSoundElement_initClass = Coin_SWIG_Python.SoSoundElement_initClass
SoSoundElement_set = Coin_SWIG_Python.SoSoundElement_set
SoSoundElement_setSceneGraphHasSoundNode = Coin_SWIG_Python.SoSoundElement_setSceneGraphHasSoundNode
SoSoundElement_sceneGraphHasSoundNode = Coin_SWIG_Python.SoSoundElement_sceneGraphHasSoundNode
SoSoundElement_setSoundNodeIsPlaying = Coin_SWIG_Python.SoSoundElement_setSoundNodeIsPlaying
SoSoundElement_soundNodeIsPlaying = Coin_SWIG_Python.SoSoundElement_soundNodeIsPlaying
SoSoundElement_setIsPartOfActiveSceneGraph = Coin_SWIG_Python.SoSoundElement_setIsPartOfActiveSceneGraph
SoSoundElement_isPartOfActiveSceneGraph = Coin_SWIG_Python.SoSoundElement_isPartOfActiveSceneGraph

class SoGLVBOElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLVBOElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLVBOElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLVBOElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLVBOElement_initClass)
    shouldCreateVBO = staticmethod(Coin_SWIG_Python.SoGLVBOElement_shouldCreateVBO)
    setVertexVBO = staticmethod(Coin_SWIG_Python.SoGLVBOElement_setVertexVBO)
    setNormalVBO = staticmethod(Coin_SWIG_Python.SoGLVBOElement_setNormalVBO)
    setColorVBO = staticmethod(Coin_SWIG_Python.SoGLVBOElement_setColorVBO)
    setTexCoordVBO = staticmethod(Coin_SWIG_Python.SoGLVBOElement_setTexCoordVBO)
    getInstance = staticmethod(Coin_SWIG_Python.SoGLVBOElement_getInstance)
    def init(*args): return Coin_SWIG_Python.SoGLVBOElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLVBOElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLVBOElement_pop(*args)
    def matches(*args): return Coin_SWIG_Python.SoGLVBOElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoGLVBOElement_copyMatchInfo(*args)
    def getVertexVBO(*args): return Coin_SWIG_Python.SoGLVBOElement_getVertexVBO(*args)
    def getNormalVBO(*args): return Coin_SWIG_Python.SoGLVBOElement_getNormalVBO(*args)
    def getColorVBO(*args): return Coin_SWIG_Python.SoGLVBOElement_getColorVBO(*args)
    def getNumTexCoordVBO(*args): return Coin_SWIG_Python.SoGLVBOElement_getNumTexCoordVBO(*args)
    def getTexCoordVBO(*args): return Coin_SWIG_Python.SoGLVBOElement_getTexCoordVBO(*args)
SoGLVBOElement_swigregister = Coin_SWIG_Python.SoGLVBOElement_swigregister
SoGLVBOElement_swigregister(SoGLVBOElement)
SoGLVBOElement_getClassTypeId = Coin_SWIG_Python.SoGLVBOElement_getClassTypeId
SoGLVBOElement_getClassStackIndex = Coin_SWIG_Python.SoGLVBOElement_getClassStackIndex
SoGLVBOElement_createInstance = Coin_SWIG_Python.SoGLVBOElement_createInstance
SoGLVBOElement_initClass = Coin_SWIG_Python.SoGLVBOElement_initClass
SoGLVBOElement_shouldCreateVBO = Coin_SWIG_Python.SoGLVBOElement_shouldCreateVBO
SoGLVBOElement_setVertexVBO = Coin_SWIG_Python.SoGLVBOElement_setVertexVBO
SoGLVBOElement_setNormalVBO = Coin_SWIG_Python.SoGLVBOElement_setNormalVBO
SoGLVBOElement_setColorVBO = Coin_SWIG_Python.SoGLVBOElement_setColorVBO
SoGLVBOElement_setTexCoordVBO = Coin_SWIG_Python.SoGLVBOElement_setTexCoordVBO
SoGLVBOElement_getInstance = Coin_SWIG_Python.SoGLVBOElement_getInstance

class SoSpecularColorElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSpecularColorElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoSpecularColorElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoSpecularColorElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoSpecularColorElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoSpecularColorElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoSpecularColorElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoSpecularColorElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoSpecularColorElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoSpecularColorElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoSpecularColorElement_getArrayPtr(*args)
SoSpecularColorElement_swigregister = Coin_SWIG_Python.SoSpecularColorElement_swigregister
SoSpecularColorElement_swigregister(SoSpecularColorElement)
SoSpecularColorElement_getClassTypeId = Coin_SWIG_Python.SoSpecularColorElement_getClassTypeId
SoSpecularColorElement_getClassStackIndex = Coin_SWIG_Python.SoSpecularColorElement_getClassStackIndex
SoSpecularColorElement_createInstance = Coin_SWIG_Python.SoSpecularColorElement_createInstance
SoSpecularColorElement_initClass = Coin_SWIG_Python.SoSpecularColorElement_initClass
SoSpecularColorElement_set = Coin_SWIG_Python.SoSpecularColorElement_set
SoSpecularColorElement_getInstance = Coin_SWIG_Python.SoSpecularColorElement_getInstance

class SoEmissiveColorElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoEmissiveColorElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoEmissiveColorElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoEmissiveColorElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoEmissiveColorElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoEmissiveColorElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoEmissiveColorElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoEmissiveColorElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoEmissiveColorElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoEmissiveColorElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoEmissiveColorElement_getArrayPtr(*args)
SoEmissiveColorElement_swigregister = Coin_SWIG_Python.SoEmissiveColorElement_swigregister
SoEmissiveColorElement_swigregister(SoEmissiveColorElement)
SoEmissiveColorElement_getClassTypeId = Coin_SWIG_Python.SoEmissiveColorElement_getClassTypeId
SoEmissiveColorElement_getClassStackIndex = Coin_SWIG_Python.SoEmissiveColorElement_getClassStackIndex
SoEmissiveColorElement_createInstance = Coin_SWIG_Python.SoEmissiveColorElement_createInstance
SoEmissiveColorElement_initClass = Coin_SWIG_Python.SoEmissiveColorElement_initClass
SoEmissiveColorElement_set = Coin_SWIG_Python.SoEmissiveColorElement_set
SoEmissiveColorElement_getInstance = Coin_SWIG_Python.SoEmissiveColorElement_getInstance

class SoShininessElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShininessElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoShininessElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoShininessElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoShininessElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoShininessElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoShininessElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoShininessElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoShininessElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoShininessElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoShininessElement_getArrayPtr(*args)
SoShininessElement_swigregister = Coin_SWIG_Python.SoShininessElement_swigregister
SoShininessElement_swigregister(SoShininessElement)
SoShininessElement_getClassTypeId = Coin_SWIG_Python.SoShininessElement_getClassTypeId
SoShininessElement_getClassStackIndex = Coin_SWIG_Python.SoShininessElement_getClassStackIndex
SoShininessElement_createInstance = Coin_SWIG_Python.SoShininessElement_createInstance
SoShininessElement_initClass = Coin_SWIG_Python.SoShininessElement_initClass
SoShininessElement_set = Coin_SWIG_Python.SoShininessElement_set
SoShininessElement_getInstance = Coin_SWIG_Python.SoShininessElement_getInstance

class SoTransparencyElement(SoReplacedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransparencyElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTransparencyElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTransparencyElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTransparencyElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTransparencyElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTransparencyElement_set)
    getInstance = staticmethod(Coin_SWIG_Python.SoTransparencyElement_getInstance)
    def getNum(*args): return Coin_SWIG_Python.SoTransparencyElement_getNum(*args)
    def get(*args): return Coin_SWIG_Python.SoTransparencyElement_get(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SoTransparencyElement_getArrayPtr(*args)
SoTransparencyElement_swigregister = Coin_SWIG_Python.SoTransparencyElement_swigregister
SoTransparencyElement_swigregister(SoTransparencyElement)
SoTransparencyElement_getClassTypeId = Coin_SWIG_Python.SoTransparencyElement_getClassTypeId
SoTransparencyElement_getClassStackIndex = Coin_SWIG_Python.SoTransparencyElement_getClassStackIndex
SoTransparencyElement_createInstance = Coin_SWIG_Python.SoTransparencyElement_createInstance
SoTransparencyElement_initClass = Coin_SWIG_Python.SoTransparencyElement_initClass
SoTransparencyElement_set = Coin_SWIG_Python.SoTransparencyElement_set
SoTransparencyElement_getInstance = Coin_SWIG_Python.SoTransparencyElement_getInstance

class SoLightModelElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLightModelElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoLightModelElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoLightModelElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoLightModelElement_initClass)
    BASE_COLOR = Coin_SWIG_Python.SoLightModelElement_BASE_COLOR
    PHONG = Coin_SWIG_Python.SoLightModelElement_PHONG
    def init(*args): return Coin_SWIG_Python.SoLightModelElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoLightModelElement_set)
    get = staticmethod(Coin_SWIG_Python.SoLightModelElement_get)
    getDefault = staticmethod(Coin_SWIG_Python.SoLightModelElement_getDefault)
    getInstance = staticmethod(Coin_SWIG_Python.SoLightModelElement_getInstance)
SoLightModelElement_swigregister = Coin_SWIG_Python.SoLightModelElement_swigregister
SoLightModelElement_swigregister(SoLightModelElement)
SoLightModelElement_getClassTypeId = Coin_SWIG_Python.SoLightModelElement_getClassTypeId
SoLightModelElement_getClassStackIndex = Coin_SWIG_Python.SoLightModelElement_getClassStackIndex
SoLightModelElement_createInstance = Coin_SWIG_Python.SoLightModelElement_createInstance
SoLightModelElement_initClass = Coin_SWIG_Python.SoLightModelElement_initClass
SoLightModelElement_set = Coin_SWIG_Python.SoLightModelElement_set
SoLightModelElement_get = Coin_SWIG_Python.SoLightModelElement_get
SoLightModelElement_getDefault = Coin_SWIG_Python.SoLightModelElement_getDefault
SoLightModelElement_getInstance = Coin_SWIG_Python.SoLightModelElement_getInstance

class SoMultiTextureCoordinateElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_init(*args)
    setDefault = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_setDefault)
    setFunction = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_setFunction)
    set2 = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_set2)
    set3 = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_set3)
    set4 = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_set4)
    def getType(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getType(*args)
    getInstance = staticmethod(Coin_SWIG_Python.SoMultiTextureCoordinateElement_getInstance)
    def get(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get(*args)
    def getNum(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getNum(*args)
    def is2D(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_is2D(*args)
    def getDimension(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getDimension(*args)
    def get2(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get2(*args)
    def get3(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get3(*args)
    def get4(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_get4(*args)
    def getArrayPtr2(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getArrayPtr2(*args)
    def getArrayPtr3(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getArrayPtr3(*args)
    def getArrayPtr4(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_getArrayPtr4(*args)
    def push(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoMultiTextureCoordinateElement_copyMatchInfo(*args)
SoMultiTextureCoordinateElement_swigregister = Coin_SWIG_Python.SoMultiTextureCoordinateElement_swigregister
SoMultiTextureCoordinateElement_swigregister(SoMultiTextureCoordinateElement)
SoMultiTextureCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassTypeId
SoMultiTextureCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoMultiTextureCoordinateElement_getClassStackIndex
SoMultiTextureCoordinateElement_createInstance = Coin_SWIG_Python.SoMultiTextureCoordinateElement_createInstance
SoMultiTextureCoordinateElement_initClass = Coin_SWIG_Python.SoMultiTextureCoordinateElement_initClass
SoMultiTextureCoordinateElement_setDefault = Coin_SWIG_Python.SoMultiTextureCoordinateElement_setDefault
SoMultiTextureCoordinateElement_setFunction = Coin_SWIG_Python.SoMultiTextureCoordinateElement_setFunction
SoMultiTextureCoordinateElement_set2 = Coin_SWIG_Python.SoMultiTextureCoordinateElement_set2
SoMultiTextureCoordinateElement_set3 = Coin_SWIG_Python.SoMultiTextureCoordinateElement_set3
SoMultiTextureCoordinateElement_set4 = Coin_SWIG_Python.SoMultiTextureCoordinateElement_set4
SoMultiTextureCoordinateElement_getInstance = Coin_SWIG_Python.SoMultiTextureCoordinateElement_getInstance

class SoGLMultiTextureCoordinateElement(SoMultiTextureCoordinateElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_pop(*args)
    setTexGen = staticmethod(Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_setTexGen)
    def getType(*args): return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getType(*args)
    getInstance = staticmethod(Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getInstance)
    def send(*args): return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_send(*args)
    def initRender(*args): return Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_initRender(*args)
SoGLMultiTextureCoordinateElement_swigregister = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_swigregister
SoGLMultiTextureCoordinateElement_swigregister(SoGLMultiTextureCoordinateElement)
SoGLMultiTextureCoordinateElement_getClassTypeId = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassTypeId
SoGLMultiTextureCoordinateElement_getClassStackIndex = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getClassStackIndex
SoGLMultiTextureCoordinateElement_createInstance = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_createInstance
SoGLMultiTextureCoordinateElement_initClass = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_initClass
SoGLMultiTextureCoordinateElement_setTexGen = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_setTexGen
SoGLMultiTextureCoordinateElement_getInstance = Coin_SWIG_Python.SoGLMultiTextureCoordinateElement_getInstance

class SoMultiTextureEnabledElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_initClass)
    DISABLED = Coin_SWIG_Python.SoMultiTextureEnabledElement_DISABLED
    TEXTURE2D = Coin_SWIG_Python.SoMultiTextureEnabledElement_TEXTURE2D
    RECTANGLE = Coin_SWIG_Python.SoMultiTextureEnabledElement_RECTANGLE
    CUBEMAP = Coin_SWIG_Python.SoMultiTextureEnabledElement_CUBEMAP
    TEXTURE3D = Coin_SWIG_Python.SoMultiTextureEnabledElement_TEXTURE3D
    def init(*args): return Coin_SWIG_Python.SoMultiTextureEnabledElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_set)
    get = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_get)
    def setElt(*args): return Coin_SWIG_Python.SoMultiTextureEnabledElement_setElt(*args)
    def push(*args): return Coin_SWIG_Python.SoMultiTextureEnabledElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoMultiTextureEnabledElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoMultiTextureEnabledElement_copyMatchInfo(*args)
    getEnabledUnits = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_getEnabledUnits)
    getActiveUnits = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_getActiveUnits)
    enableRectangle = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_enableRectangle)
    enableCubeMap = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_enableCubeMap)
    getMode = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_getMode)
    disableAll = staticmethod(Coin_SWIG_Python.SoMultiTextureEnabledElement_disableAll)
SoMultiTextureEnabledElement_swigregister = Coin_SWIG_Python.SoMultiTextureEnabledElement_swigregister
SoMultiTextureEnabledElement_swigregister(SoMultiTextureEnabledElement)
SoMultiTextureEnabledElement_getClassTypeId = Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassTypeId
SoMultiTextureEnabledElement_getClassStackIndex = Coin_SWIG_Python.SoMultiTextureEnabledElement_getClassStackIndex
SoMultiTextureEnabledElement_createInstance = Coin_SWIG_Python.SoMultiTextureEnabledElement_createInstance
SoMultiTextureEnabledElement_initClass = Coin_SWIG_Python.SoMultiTextureEnabledElement_initClass
SoMultiTextureEnabledElement_set = Coin_SWIG_Python.SoMultiTextureEnabledElement_set
SoMultiTextureEnabledElement_get = Coin_SWIG_Python.SoMultiTextureEnabledElement_get
SoMultiTextureEnabledElement_getEnabledUnits = Coin_SWIG_Python.SoMultiTextureEnabledElement_getEnabledUnits
SoMultiTextureEnabledElement_getActiveUnits = Coin_SWIG_Python.SoMultiTextureEnabledElement_getActiveUnits
SoMultiTextureEnabledElement_enableRectangle = Coin_SWIG_Python.SoMultiTextureEnabledElement_enableRectangle
SoMultiTextureEnabledElement_enableCubeMap = Coin_SWIG_Python.SoMultiTextureEnabledElement_enableCubeMap
SoMultiTextureEnabledElement_getMode = Coin_SWIG_Python.SoMultiTextureEnabledElement_getMode
SoMultiTextureEnabledElement_disableAll = Coin_SWIG_Python.SoMultiTextureEnabledElement_disableAll

class SoGLMultiTextureEnabledElement(SoMultiTextureEnabledElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLMultiTextureEnabledElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLMultiTextureEnabledElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_pop(*args)
    def setElt(*args): return Coin_SWIG_Python.SoGLMultiTextureEnabledElement_setElt(*args)
SoGLMultiTextureEnabledElement_swigregister = Coin_SWIG_Python.SoGLMultiTextureEnabledElement_swigregister
SoGLMultiTextureEnabledElement_swigregister(SoGLMultiTextureEnabledElement)
SoGLMultiTextureEnabledElement_getClassTypeId = Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassTypeId
SoGLMultiTextureEnabledElement_getClassStackIndex = Coin_SWIG_Python.SoGLMultiTextureEnabledElement_getClassStackIndex
SoGLMultiTextureEnabledElement_createInstance = Coin_SWIG_Python.SoGLMultiTextureEnabledElement_createInstance
SoGLMultiTextureEnabledElement_initClass = Coin_SWIG_Python.SoGLMultiTextureEnabledElement_initClass

class SoMultiTextureImageElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoMultiTextureImageElement_init(*args)
    setDefault = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_setDefault)
    set = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_set)
    get = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_get)
    getImage = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getImage)
    getBlendColor = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getBlendColor)
    getModel = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getModel)
    getWrapS = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getWrapS)
    getWrapT = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getWrapT)
    getWrapR = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getWrapR)
    containsTransparency = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_containsTransparency)
    getDefault = staticmethod(Coin_SWIG_Python.SoMultiTextureImageElement_getDefault)
    def push(*args): return Coin_SWIG_Python.SoMultiTextureImageElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoMultiTextureImageElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoMultiTextureImageElement_copyMatchInfo(*args)
    def setElt(*args): return Coin_SWIG_Python.SoMultiTextureImageElement_setElt(*args)
    def hasTransparency(*args): return Coin_SWIG_Python.SoMultiTextureImageElement_hasTransparency(*args)
SoMultiTextureImageElement_swigregister = Coin_SWIG_Python.SoMultiTextureImageElement_swigregister
SoMultiTextureImageElement_swigregister(SoMultiTextureImageElement)
SoMultiTextureImageElement_getClassTypeId = Coin_SWIG_Python.SoMultiTextureImageElement_getClassTypeId
SoMultiTextureImageElement_getClassStackIndex = Coin_SWIG_Python.SoMultiTextureImageElement_getClassStackIndex
SoMultiTextureImageElement_createInstance = Coin_SWIG_Python.SoMultiTextureImageElement_createInstance
SoMultiTextureImageElement_initClass = Coin_SWIG_Python.SoMultiTextureImageElement_initClass
SoMultiTextureImageElement_setDefault = Coin_SWIG_Python.SoMultiTextureImageElement_setDefault
SoMultiTextureImageElement_set = Coin_SWIG_Python.SoMultiTextureImageElement_set
SoMultiTextureImageElement_get = Coin_SWIG_Python.SoMultiTextureImageElement_get
SoMultiTextureImageElement_getImage = Coin_SWIG_Python.SoMultiTextureImageElement_getImage
SoMultiTextureImageElement_getBlendColor = Coin_SWIG_Python.SoMultiTextureImageElement_getBlendColor
SoMultiTextureImageElement_getModel = Coin_SWIG_Python.SoMultiTextureImageElement_getModel
SoMultiTextureImageElement_getWrapS = Coin_SWIG_Python.SoMultiTextureImageElement_getWrapS
SoMultiTextureImageElement_getWrapT = Coin_SWIG_Python.SoMultiTextureImageElement_getWrapT
SoMultiTextureImageElement_getWrapR = Coin_SWIG_Python.SoMultiTextureImageElement_getWrapR
SoMultiTextureImageElement_containsTransparency = Coin_SWIG_Python.SoMultiTextureImageElement_containsTransparency
SoMultiTextureImageElement_getDefault = Coin_SWIG_Python.SoMultiTextureImageElement_getDefault

class SoGLMultiTextureImageElement(SoMultiTextureImageElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLMultiTextureImageElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLMultiTextureImageElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLMultiTextureImageElement_pop(*args)
    set = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_set)
    restore = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_restore)
    get = staticmethod(Coin_SWIG_Python.SoGLMultiTextureImageElement_get)
SoGLMultiTextureImageElement_swigregister = Coin_SWIG_Python.SoGLMultiTextureImageElement_swigregister
SoGLMultiTextureImageElement_swigregister(SoGLMultiTextureImageElement)
SoGLMultiTextureImageElement_getClassTypeId = Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassTypeId
SoGLMultiTextureImageElement_getClassStackIndex = Coin_SWIG_Python.SoGLMultiTextureImageElement_getClassStackIndex
SoGLMultiTextureImageElement_createInstance = Coin_SWIG_Python.SoGLMultiTextureImageElement_createInstance
SoGLMultiTextureImageElement_initClass = Coin_SWIG_Python.SoGLMultiTextureImageElement_initClass
SoGLMultiTextureImageElement_set = Coin_SWIG_Python.SoGLMultiTextureImageElement_set
SoGLMultiTextureImageElement_restore = Coin_SWIG_Python.SoGLMultiTextureImageElement_restore
SoGLMultiTextureImageElement_get = Coin_SWIG_Python.SoGLMultiTextureImageElement_get

class SoMultiTextureMatrixElement(SoAccumulatedElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoMultiTextureMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoMultiTextureMatrixElement_push(*args)
    set = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_set)
    mult = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_mult)
    get = staticmethod(Coin_SWIG_Python.SoMultiTextureMatrixElement_get)
SoMultiTextureMatrixElement_swigregister = Coin_SWIG_Python.SoMultiTextureMatrixElement_swigregister
SoMultiTextureMatrixElement_swigregister(SoMultiTextureMatrixElement)
SoMultiTextureMatrixElement_getClassTypeId = Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassTypeId
SoMultiTextureMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoMultiTextureMatrixElement_getClassStackIndex
SoMultiTextureMatrixElement_createInstance = Coin_SWIG_Python.SoMultiTextureMatrixElement_createInstance
SoMultiTextureMatrixElement_initClass = Coin_SWIG_Python.SoMultiTextureMatrixElement_initClass
SoMultiTextureMatrixElement_set = Coin_SWIG_Python.SoMultiTextureMatrixElement_set
SoMultiTextureMatrixElement_mult = Coin_SWIG_Python.SoMultiTextureMatrixElement_mult
SoMultiTextureMatrixElement_get = Coin_SWIG_Python.SoMultiTextureMatrixElement_get

class SoGLMultiTextureMatrixElement(SoMultiTextureMatrixElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoGLMultiTextureMatrixElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGLMultiTextureMatrixElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_init(*args)
    def push(*args): return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_push(*args)
    def pop(*args): return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_pop(*args)
    def multElt(*args): return Coin_SWIG_Python.SoGLMultiTextureMatrixElement_multElt(*args)
SoGLMultiTextureMatrixElement_swigregister = Coin_SWIG_Python.SoGLMultiTextureMatrixElement_swigregister
SoGLMultiTextureMatrixElement_swigregister(SoGLMultiTextureMatrixElement)
SoGLMultiTextureMatrixElement_getClassTypeId = Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassTypeId
SoGLMultiTextureMatrixElement_getClassStackIndex = Coin_SWIG_Python.SoGLMultiTextureMatrixElement_getClassStackIndex
SoGLMultiTextureMatrixElement_createInstance = Coin_SWIG_Python.SoGLMultiTextureMatrixElement_createInstance
SoGLMultiTextureMatrixElement_initClass = Coin_SWIG_Python.SoGLMultiTextureMatrixElement_initClass

class SbColor4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbColor4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbColor4f_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbColor4f_getValue(*args)
    def setRGB(*args): return Coin_SWIG_Python.SbColor4f_setRGB(*args)
    def getRGB(*args): return Coin_SWIG_Python.SbColor4f_getRGB(*args)
    def setHSVValue(*args): return Coin_SWIG_Python.SbColor4f_setHSVValue(*args)
    def getHSVValue(*args): return Coin_SWIG_Python.SbColor4f_getHSVValue(*args)
    def setPackedValue(*args): return Coin_SWIG_Python.SbColor4f_setPackedValue(*args)
    def getPackedValue(*args): return Coin_SWIG_Python.SbColor4f_getPackedValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbColor4f___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbColor4f___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbColor4f___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbColor4f___isub__(*args)
    def __add__(*args): return Coin_SWIG_Python.SbColor4f___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbColor4f___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbColor4f___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbColor4f___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbColor4f___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbColor4f___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbColor4f___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbColor4f___getitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbColor4f
    __del__ = lambda self : None;
SbColor4f_swigregister = Coin_SWIG_Python.SbColor4f_swigregister
SbColor4f_swigregister(SbColor4f)

class SoTextureCombineElement(SoElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_initClass)
    PRIMARY_COLOR = Coin_SWIG_Python.SoTextureCombineElement_PRIMARY_COLOR
    TEXTURE = Coin_SWIG_Python.SoTextureCombineElement_TEXTURE
    CONSTANT = Coin_SWIG_Python.SoTextureCombineElement_CONSTANT
    PREVIOUS = Coin_SWIG_Python.SoTextureCombineElement_PREVIOUS
    SRC_COLOR = Coin_SWIG_Python.SoTextureCombineElement_SRC_COLOR
    ONE_MINUS_SRC_COLOR = Coin_SWIG_Python.SoTextureCombineElement_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = Coin_SWIG_Python.SoTextureCombineElement_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = Coin_SWIG_Python.SoTextureCombineElement_ONE_MINUS_SRC_ALPHA
    REPLACE = Coin_SWIG_Python.SoTextureCombineElement_REPLACE
    MODULATE = Coin_SWIG_Python.SoTextureCombineElement_MODULATE
    ADD = Coin_SWIG_Python.SoTextureCombineElement_ADD
    ADD_SIGNED = Coin_SWIG_Python.SoTextureCombineElement_ADD_SIGNED
    SUBTRACT = Coin_SWIG_Python.SoTextureCombineElement_SUBTRACT
    INTERPOLATE = Coin_SWIG_Python.SoTextureCombineElement_INTERPOLATE
    DOT3_RGB = Coin_SWIG_Python.SoTextureCombineElement_DOT3_RGB
    DOT3_RGBA = Coin_SWIG_Python.SoTextureCombineElement_DOT3_RGBA
    def init(*args): return Coin_SWIG_Python.SoTextureCombineElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_set)
    isDefault = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_isDefault)
    get = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_get)
    def push(*args): return Coin_SWIG_Python.SoTextureCombineElement_push(*args)
    def matches(*args): return Coin_SWIG_Python.SoTextureCombineElement_matches(*args)
    def copyMatchInfo(*args): return Coin_SWIG_Python.SoTextureCombineElement_copyMatchInfo(*args)
    def setElt(*args): return Coin_SWIG_Python.SoTextureCombineElement_setElt(*args)
    apply = staticmethod(Coin_SWIG_Python.SoTextureCombineElement_apply)
SoTextureCombineElement_swigregister = Coin_SWIG_Python.SoTextureCombineElement_swigregister
SoTextureCombineElement_swigregister(SoTextureCombineElement)
SoTextureCombineElement_getClassTypeId = Coin_SWIG_Python.SoTextureCombineElement_getClassTypeId
SoTextureCombineElement_getClassStackIndex = Coin_SWIG_Python.SoTextureCombineElement_getClassStackIndex
SoTextureCombineElement_createInstance = Coin_SWIG_Python.SoTextureCombineElement_createInstance
SoTextureCombineElement_initClass = Coin_SWIG_Python.SoTextureCombineElement_initClass
SoTextureCombineElement_set = Coin_SWIG_Python.SoTextureCombineElement_set
SoTextureCombineElement_isDefault = Coin_SWIG_Python.SoTextureCombineElement_isDefault
SoTextureCombineElement_get = Coin_SWIG_Python.SoTextureCombineElement_get
SoTextureCombineElement_apply = Coin_SWIG_Python.SoTextureCombineElement_apply

class SoTextureUnitElement(SoInt32Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureUnitElement_getClassTypeId)
    getClassStackIndex = staticmethod(Coin_SWIG_Python.SoTextureUnitElement_getClassStackIndex)
    createInstance = staticmethod(Coin_SWIG_Python.SoTextureUnitElement_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureUnitElement_initClass)
    def init(*args): return Coin_SWIG_Python.SoTextureUnitElement_init(*args)
    set = staticmethod(Coin_SWIG_Python.SoTextureUnitElement_set)
    get = staticmethod(Coin_SWIG_Python.SoTextureUnitElement_get)
SoTextureUnitElement_swigregister = Coin_SWIG_Python.SoTextureUnitElement_swigregister
SoTextureUnitElement_swigregister(SoTextureUnitElement)
SoTextureUnitElement_getClassTypeId = Coin_SWIG_Python.SoTextureUnitElement_getClassTypeId
SoTextureUnitElement_getClassStackIndex = Coin_SWIG_Python.SoTextureUnitElement_getClassStackIndex
SoTextureUnitElement_createInstance = Coin_SWIG_Python.SoTextureUnitElement_createInstance
SoTextureUnitElement_initClass = Coin_SWIG_Python.SoTextureUnitElement_initClass
SoTextureUnitElement_set = Coin_SWIG_Python.SoTextureUnitElement_set
SoTextureUnitElement_get = Coin_SWIG_Python.SoTextureUnitElement_get

class SoEngine(SoFieldContainer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoEngine_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoEngine_initClasses)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoEngine_getClassTypeId)
    def evaluateWrapper(*args): return Coin_SWIG_Python.SoEngine_evaluateWrapper(*args)
    def getOutputs(*args): return Coin_SWIG_Python.SoEngine_getOutputs(*args)
    def getOutput(*args): return Coin_SWIG_Python.SoEngine_getOutput(*args)
    def getOutputName(*args): return Coin_SWIG_Python.SoEngine_getOutputName(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoEngine_getOutputData(*args)
    getByName = staticmethod(Coin_SWIG_Python.SoEngine_getByName)
    def isNotifying(*args): return Coin_SWIG_Python.SoEngine_isNotifying(*args)
    def notify(*args): return Coin_SWIG_Python.SoEngine_notify(*args)
    def copy(*args): return Coin_SWIG_Python.SoEngine_copy(*args)
    def copyThroughConnection(*args): return Coin_SWIG_Python.SoEngine_copyThroughConnection(*args)
    def shouldCopy(*args): return Coin_SWIG_Python.SoEngine_shouldCopy(*args)
    def writeInstance(*args): return Coin_SWIG_Python.SoEngine_writeInstance(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngine
    __del__ = lambda self : None;
    def __getattr__(self, name):
        try:
            return SoFieldContainer.__getattr__(self, name)
        except AttributeError, e:
            out = self.getOutput(SbName(name))
            if out is None:
                raise e
            return out

    def __setattr__(self,name,value):
        if name == 'this':
            return SoFieldContainer.__setattr__(self, name, value)
        out = self.getOutput(SbName(name))
        if out is None:
            return SoFieldContainer.__setattr__(self, name, value)
        raise AttributeError('Cannot set output %s on engine %s' %(name,self.__class__.__name__))
        

SoEngine_swigregister = Coin_SWIG_Python.SoEngine_swigregister
SoEngine_swigregister(SoEngine)
SoEngine_initClass = Coin_SWIG_Python.SoEngine_initClass
SoEngine_initClasses = Coin_SWIG_Python.SoEngine_initClasses
SoEngine_getClassTypeId = Coin_SWIG_Python.SoEngine_getClassTypeId
SoEngine_getByName = Coin_SWIG_Python.SoEngine_getByName

class SoEngineOutput(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEngineOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineOutput
    __del__ = lambda self : None;
    def getConnectionType(*args): return Coin_SWIG_Python.SoEngineOutput_getConnectionType(*args)
    def getForwardConnections(*args): return Coin_SWIG_Python.SoEngineOutput_getForwardConnections(*args)
    def enable(*args): return Coin_SWIG_Python.SoEngineOutput_enable(*args)
    def isEnabled(*args): return Coin_SWIG_Python.SoEngineOutput_isEnabled(*args)
    def getContainer(*args): return Coin_SWIG_Python.SoEngineOutput_getContainer(*args)
    def getNodeContainer(*args): return Coin_SWIG_Python.SoEngineOutput_getNodeContainer(*args)
    def isNodeEngineOutput(*args): return Coin_SWIG_Python.SoEngineOutput_isNodeEngineOutput(*args)
    def setContainer(*args): return Coin_SWIG_Python.SoEngineOutput_setContainer(*args)
    def setNodeContainer(*args): return Coin_SWIG_Python.SoEngineOutput_setNodeContainer(*args)
    def addConnection(*args): return Coin_SWIG_Python.SoEngineOutput_addConnection(*args)
    def removeConnection(*args): return Coin_SWIG_Python.SoEngineOutput_removeConnection(*args)
    def getNumConnections(*args): return Coin_SWIG_Python.SoEngineOutput_getNumConnections(*args)
    def prepareToWrite(*args): return Coin_SWIG_Python.SoEngineOutput_prepareToWrite(*args)
    def doneWriting(*args): return Coin_SWIG_Python.SoEngineOutput_doneWriting(*args)
    def touchSlaves(*args): return Coin_SWIG_Python.SoEngineOutput_touchSlaves(*args)
    def getFieldContainer(*args): return Coin_SWIG_Python.SoEngineOutput_getFieldContainer(*args)
SoEngineOutput_swigregister = Coin_SWIG_Python.SoEngineOutput_swigregister
SoEngineOutput_swigregister(SoEngineOutput)

class SoEngineOutputData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEngineOutputData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEngineOutputData
    __del__ = lambda self : None;
    def addOutput(*args): return Coin_SWIG_Python.SoEngineOutputData_addOutput(*args)
    def getNumOutputs(*args): return Coin_SWIG_Python.SoEngineOutputData_getNumOutputs(*args)
    def getOutputName(*args): return Coin_SWIG_Python.SoEngineOutputData_getOutputName(*args)
    def getOutput(*args): return Coin_SWIG_Python.SoEngineOutputData_getOutput(*args)
    def getIndex(*args): return Coin_SWIG_Python.SoEngineOutputData_getIndex(*args)
    def getType(*args): return Coin_SWIG_Python.SoEngineOutputData_getType(*args)
    def readDescriptions(*args): return Coin_SWIG_Python.SoEngineOutputData_readDescriptions(*args)
    def writeDescriptions(*args): return Coin_SWIG_Python.SoEngineOutputData_writeDescriptions(*args)
SoEngineOutputData_swigregister = Coin_SWIG_Python.SoEngineOutputData_swigregister
SoEngineOutputData_swigregister(SoEngineOutputData)

class SoMFBool(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFBool
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFBool_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFBool_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFBool_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFBool_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFBool_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFBool_find(*args)
    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFBool):
             val = args[1].getValues()
             return _coin.SoMFBool_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFBool_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFBool):
             val = args[2].getValues()
             return _coin.SoMFBool_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFBool_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFBool_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFBool_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFBool___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFBool___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFBool_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFBool_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFBool_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFBool_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoMFBool_setValue(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFBool___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFBool___setitem__(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFBool_getValues(*args)
SoMFBool_swigregister = Coin_SWIG_Python.SoMFBool_swigregister
SoMFBool_swigregister(SoMFBool)
SoMFBool_createInstance = Coin_SWIG_Python.SoMFBool_createInstance
SoMFBool_getClassTypeId = Coin_SWIG_Python.SoMFBool_getClassTypeId
SoMFBool_initClass = Coin_SWIG_Python.SoMFBool_initClass

class SoMFEnum(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFEnum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFEnum
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFEnum_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFEnum_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFEnum_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFEnum_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFEnum_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFEnum_find(*args)
    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFEnum):
             val = args[1].getValues()
             return _coin.SoMFEnum_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFEnum_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFEnum):
             val = args[2].getValues()
             return _coin.SoMFEnum_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFEnum_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFEnum_setValues(*args)


    def __eq__(*args): return Coin_SWIG_Python.SoMFEnum___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFEnum___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFEnum_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFEnum_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFEnum_initClass)
    def set1Value(*args): return Coin_SWIG_Python.SoMFEnum_set1Value(*args)
    def setEnums(*args): return Coin_SWIG_Python.SoMFEnum_setEnums(*args)
    def getNumEnums(*args): return Coin_SWIG_Python.SoMFEnum_getNumEnums(*args)
    def getEnum(*args): return Coin_SWIG_Python.SoMFEnum_getEnum(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFEnum___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFEnum___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFEnum_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFEnum_getValues(*args)
SoMFEnum_swigregister = Coin_SWIG_Python.SoMFEnum_swigregister
SoMFEnum_swigregister(SoMFEnum)
SoMFEnum_createInstance = Coin_SWIG_Python.SoMFEnum_createInstance
SoMFEnum_getClassTypeId = Coin_SWIG_Python.SoMFEnum_getClassTypeId
SoMFEnum_initClass = Coin_SWIG_Python.SoMFEnum_initClass

class SoBoolOperation(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBoolOperation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBoolOperation_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoBoolOperation_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoBoolOperation_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoBoolOperation_createInstance)
    CLEAR = Coin_SWIG_Python.SoBoolOperation_CLEAR
    SET = Coin_SWIG_Python.SoBoolOperation_SET
    A = Coin_SWIG_Python.SoBoolOperation_A
    NOT_A = Coin_SWIG_Python.SoBoolOperation_NOT_A
    B = Coin_SWIG_Python.SoBoolOperation_B
    NOT_B = Coin_SWIG_Python.SoBoolOperation_NOT_B
    A_OR_B = Coin_SWIG_Python.SoBoolOperation_A_OR_B
    NOT_A_OR_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_OR_B
    A_OR_NOT_B = Coin_SWIG_Python.SoBoolOperation_A_OR_NOT_B
    NOT_A_OR_NOT_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_OR_NOT_B
    A_AND_B = Coin_SWIG_Python.SoBoolOperation_A_AND_B
    NOT_A_AND_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_AND_B
    A_AND_NOT_B = Coin_SWIG_Python.SoBoolOperation_A_AND_NOT_B
    NOT_A_AND_NOT_B = Coin_SWIG_Python.SoBoolOperation_NOT_A_AND_NOT_B
    A_EQUALS_B = Coin_SWIG_Python.SoBoolOperation_A_EQUALS_B
    A_NOT_EQUALS_B = Coin_SWIG_Python.SoBoolOperation_A_NOT_EQUALS_B
    a = _swig_property(Coin_SWIG_Python.SoBoolOperation_a_get, Coin_SWIG_Python.SoBoolOperation_a_set)
    b = _swig_property(Coin_SWIG_Python.SoBoolOperation_b_get, Coin_SWIG_Python.SoBoolOperation_b_set)
    operation = _swig_property(Coin_SWIG_Python.SoBoolOperation_operation_get, Coin_SWIG_Python.SoBoolOperation_operation_set)
    output = _swig_property(Coin_SWIG_Python.SoBoolOperation_output_get, Coin_SWIG_Python.SoBoolOperation_output_set)
    inverse = _swig_property(Coin_SWIG_Python.SoBoolOperation_inverse_get, Coin_SWIG_Python.SoBoolOperation_inverse_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBoolOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoBoolOperation_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBoolOperation
    __del__ = lambda self : None;
SoBoolOperation_swigregister = Coin_SWIG_Python.SoBoolOperation_swigregister
SoBoolOperation_swigregister(SoBoolOperation)
SoBoolOperation_getClassTypeId = Coin_SWIG_Python.SoBoolOperation_getClassTypeId
SoBoolOperation_createInstance = Coin_SWIG_Python.SoBoolOperation_createInstance
SoBoolOperation_initClass = Coin_SWIG_Python.SoBoolOperation_initClass

class SoMFFloat(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFFloat
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFFloat_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFFloat_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFFloat_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFFloat_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFFloat_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFFloat_find(*args)
    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFFloat):
             val = args[1].getValues()
             return _coin.SoMFFloat_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFFloat_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFFloat):
             val = args[2].getValues()
             return _coin.SoMFFloat_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFFloat_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFFloat_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFFloat_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFFloat___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFFloat___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFFloat_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFFloat_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFFloat_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFFloat_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFFloat___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFFloat___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFFloat_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFFloat_getValues(*args)
SoMFFloat_swigregister = Coin_SWIG_Python.SoMFFloat_swigregister
SoMFFloat_swigregister(SoMFFloat)
SoMFFloat_createInstance = Coin_SWIG_Python.SoMFFloat_createInstance
SoMFFloat_getClassTypeId = Coin_SWIG_Python.SoMFFloat_getClassTypeId
SoMFFloat_initClass = Coin_SWIG_Python.SoMFFloat_initClass

class SoMFVec3f(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec3f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec3f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec3f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec3f_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec3f_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec3f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec3f___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec3f_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec3f_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec3f_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec3f_initClass)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec3f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec3f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec3f_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFVec3f_set1Value(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFVec3f___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFVec3f___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec3f_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec3f_getValues(*args)
SoMFVec3f_swigregister = Coin_SWIG_Python.SoMFVec3f_swigregister
SoMFVec3f_swigregister(SoMFVec3f)
SoMFVec3f_createInstance = Coin_SWIG_Python.SoMFVec3f_createInstance
SoMFVec3f_getClassTypeId = Coin_SWIG_Python.SoMFVec3f_getClassTypeId
SoMFVec3f_initClass = Coin_SWIG_Python.SoMFVec3f_initClass

class SoMFString(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFString
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFString_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFString_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFString_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFString_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFString_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFString_find(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFString_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFString___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFString___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFString_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFString_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFString_initClass)
    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFString_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFString_setValues(args[0], args[1], len(args[2]), args[2])
       return _coin.SoMFString_setValues(*args)


    def deleteText(*args): return Coin_SWIG_Python.SoMFString_deleteText(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFString___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFString___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFString_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFString_getValues(*args)
SoMFString_swigregister = Coin_SWIG_Python.SoMFString_swigregister
SoMFString_swigregister(SoMFString)
SoMFString_createInstance = Coin_SWIG_Python.SoMFString_createInstance
SoMFString_getClassTypeId = Coin_SWIG_Python.SoMFString_getClassTypeId
SoMFString_initClass = Coin_SWIG_Python.SoMFString_initClass

class SoCalculator(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCalculator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCalculator_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoCalculator_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoCalculator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoCalculator_createInstance)
    a = _swig_property(Coin_SWIG_Python.SoCalculator_a_get, Coin_SWIG_Python.SoCalculator_a_set)
    b = _swig_property(Coin_SWIG_Python.SoCalculator_b_get, Coin_SWIG_Python.SoCalculator_b_set)
    c = _swig_property(Coin_SWIG_Python.SoCalculator_c_get, Coin_SWIG_Python.SoCalculator_c_set)
    d = _swig_property(Coin_SWIG_Python.SoCalculator_d_get, Coin_SWIG_Python.SoCalculator_d_set)
    e = _swig_property(Coin_SWIG_Python.SoCalculator_e_get, Coin_SWIG_Python.SoCalculator_e_set)
    f = _swig_property(Coin_SWIG_Python.SoCalculator_f_get, Coin_SWIG_Python.SoCalculator_f_set)
    g = _swig_property(Coin_SWIG_Python.SoCalculator_g_get, Coin_SWIG_Python.SoCalculator_g_set)
    h = _swig_property(Coin_SWIG_Python.SoCalculator_h_get, Coin_SWIG_Python.SoCalculator_h_set)
    A = _swig_property(Coin_SWIG_Python.SoCalculator_A_get, Coin_SWIG_Python.SoCalculator_A_set)
    B = _swig_property(Coin_SWIG_Python.SoCalculator_B_get, Coin_SWIG_Python.SoCalculator_B_set)
    C = _swig_property(Coin_SWIG_Python.SoCalculator_C_get, Coin_SWIG_Python.SoCalculator_C_set)
    D = _swig_property(Coin_SWIG_Python.SoCalculator_D_get, Coin_SWIG_Python.SoCalculator_D_set)
    E = _swig_property(Coin_SWIG_Python.SoCalculator_E_get, Coin_SWIG_Python.SoCalculator_E_set)
    F = _swig_property(Coin_SWIG_Python.SoCalculator_F_get, Coin_SWIG_Python.SoCalculator_F_set)
    G = _swig_property(Coin_SWIG_Python.SoCalculator_G_get, Coin_SWIG_Python.SoCalculator_G_set)
    H = _swig_property(Coin_SWIG_Python.SoCalculator_H_get, Coin_SWIG_Python.SoCalculator_H_set)
    expression = _swig_property(Coin_SWIG_Python.SoCalculator_expression_get, Coin_SWIG_Python.SoCalculator_expression_set)
    oa = _swig_property(Coin_SWIG_Python.SoCalculator_oa_get, Coin_SWIG_Python.SoCalculator_oa_set)
    ob = _swig_property(Coin_SWIG_Python.SoCalculator_ob_get, Coin_SWIG_Python.SoCalculator_ob_set)
    oc = _swig_property(Coin_SWIG_Python.SoCalculator_oc_get, Coin_SWIG_Python.SoCalculator_oc_set)
    od = _swig_property(Coin_SWIG_Python.SoCalculator_od_get, Coin_SWIG_Python.SoCalculator_od_set)
    oA = _swig_property(Coin_SWIG_Python.SoCalculator_oA_get, Coin_SWIG_Python.SoCalculator_oA_set)
    oB = _swig_property(Coin_SWIG_Python.SoCalculator_oB_get, Coin_SWIG_Python.SoCalculator_oB_set)
    oC = _swig_property(Coin_SWIG_Python.SoCalculator_oC_get, Coin_SWIG_Python.SoCalculator_oC_set)
    oD = _swig_property(Coin_SWIG_Python.SoCalculator_oD_get, Coin_SWIG_Python.SoCalculator_oD_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCalculator(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoCalculator_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCalculator
    __del__ = lambda self : None;
SoCalculator_swigregister = Coin_SWIG_Python.SoCalculator_swigregister
SoCalculator_swigregister(SoCalculator)
SoCalculator_getClassTypeId = Coin_SWIG_Python.SoCalculator_getClassTypeId
SoCalculator_createInstance = Coin_SWIG_Python.SoCalculator_createInstance
SoCalculator_initClass = Coin_SWIG_Python.SoCalculator_initClass

class SoMFVec2f(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec2f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec2f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec2f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec2f_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec2f_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec2f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec2f___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec2f_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec2f_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec2f_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec2f_initClass)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec2f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec2f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec2f_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFVec2f_set1Value(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFVec2f___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFVec2f___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec2f_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec2f_getValues(*args)
SoMFVec2f_swigregister = Coin_SWIG_Python.SoMFVec2f_swigregister
SoMFVec2f_swigregister(SoMFVec2f)
SoMFVec2f_createInstance = Coin_SWIG_Python.SoMFVec2f_createInstance
SoMFVec2f_getClassTypeId = Coin_SWIG_Python.SoMFVec2f_getClassTypeId
SoMFVec2f_initClass = Coin_SWIG_Python.SoMFVec2f_initClass

class SoComposeVec2f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComposeVec2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComposeVec2f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComposeVec2f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComposeVec2f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComposeVec2f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComposeVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComposeVec2f_initClass)
    x = _swig_property(Coin_SWIG_Python.SoComposeVec2f_x_get, Coin_SWIG_Python.SoComposeVec2f_x_set)
    y = _swig_property(Coin_SWIG_Python.SoComposeVec2f_y_get, Coin_SWIG_Python.SoComposeVec2f_y_set)
    vector = _swig_property(Coin_SWIG_Python.SoComposeVec2f_vector_get, Coin_SWIG_Python.SoComposeVec2f_vector_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeVec2f
    __del__ = lambda self : None;
SoComposeVec2f_swigregister = Coin_SWIG_Python.SoComposeVec2f_swigregister
SoComposeVec2f_swigregister(SoComposeVec2f)
SoComposeVec2f_getClassTypeId = Coin_SWIG_Python.SoComposeVec2f_getClassTypeId
SoComposeVec2f_createInstance = Coin_SWIG_Python.SoComposeVec2f_createInstance
SoComposeVec2f_initClass = Coin_SWIG_Python.SoComposeVec2f_initClass

class SoComposeVec3f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComposeVec3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComposeVec3f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComposeVec3f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComposeVec3f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComposeVec3f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComposeVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComposeVec3f_initClass)
    x = _swig_property(Coin_SWIG_Python.SoComposeVec3f_x_get, Coin_SWIG_Python.SoComposeVec3f_x_set)
    y = _swig_property(Coin_SWIG_Python.SoComposeVec3f_y_get, Coin_SWIG_Python.SoComposeVec3f_y_set)
    z = _swig_property(Coin_SWIG_Python.SoComposeVec3f_z_get, Coin_SWIG_Python.SoComposeVec3f_z_set)
    vector = _swig_property(Coin_SWIG_Python.SoComposeVec3f_vector_get, Coin_SWIG_Python.SoComposeVec3f_vector_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeVec3f
    __del__ = lambda self : None;
SoComposeVec3f_swigregister = Coin_SWIG_Python.SoComposeVec3f_swigregister
SoComposeVec3f_swigregister(SoComposeVec3f)
SoComposeVec3f_getClassTypeId = Coin_SWIG_Python.SoComposeVec3f_getClassTypeId
SoComposeVec3f_createInstance = Coin_SWIG_Python.SoComposeVec3f_createInstance
SoComposeVec3f_initClass = Coin_SWIG_Python.SoComposeVec3f_initClass

class SoMFVec4f(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4f_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4f_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4f___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4f_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4f_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4f_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4f_initClass)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFVec4f_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFVec4f_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFVec4f_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4f_set1Value(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFVec4f___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFVec4f___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4f_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4f_getValues(*args)
SoMFVec4f_swigregister = Coin_SWIG_Python.SoMFVec4f_swigregister
SoMFVec4f_swigregister(SoMFVec4f)
SoMFVec4f_createInstance = Coin_SWIG_Python.SoMFVec4f_createInstance
SoMFVec4f_getClassTypeId = Coin_SWIG_Python.SoMFVec4f_getClassTypeId
SoMFVec4f_initClass = Coin_SWIG_Python.SoMFVec4f_initClass

class SoComposeVec4f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComposeVec4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComposeVec4f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComposeVec4f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComposeVec4f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComposeVec4f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComposeVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComposeVec4f_initClass)
    x = _swig_property(Coin_SWIG_Python.SoComposeVec4f_x_get, Coin_SWIG_Python.SoComposeVec4f_x_set)
    y = _swig_property(Coin_SWIG_Python.SoComposeVec4f_y_get, Coin_SWIG_Python.SoComposeVec4f_y_set)
    z = _swig_property(Coin_SWIG_Python.SoComposeVec4f_z_get, Coin_SWIG_Python.SoComposeVec4f_z_set)
    w = _swig_property(Coin_SWIG_Python.SoComposeVec4f_w_get, Coin_SWIG_Python.SoComposeVec4f_w_set)
    vector = _swig_property(Coin_SWIG_Python.SoComposeVec4f_vector_get, Coin_SWIG_Python.SoComposeVec4f_vector_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeVec4f
    __del__ = lambda self : None;
SoComposeVec4f_swigregister = Coin_SWIG_Python.SoComposeVec4f_swigregister
SoComposeVec4f_swigregister(SoComposeVec4f)
SoComposeVec4f_getClassTypeId = Coin_SWIG_Python.SoComposeVec4f_getClassTypeId
SoComposeVec4f_createInstance = Coin_SWIG_Python.SoComposeVec4f_createInstance
SoComposeVec4f_initClass = Coin_SWIG_Python.SoComposeVec4f_initClass

class SoDecomposeVec2f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecomposeVec2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDecomposeVec2f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoDecomposeVec2f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoDecomposeVec2f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecomposeVec2f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDecomposeVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoDecomposeVec2f_initClass)
    vector = _swig_property(Coin_SWIG_Python.SoDecomposeVec2f_vector_get, Coin_SWIG_Python.SoDecomposeVec2f_vector_set)
    x = _swig_property(Coin_SWIG_Python.SoDecomposeVec2f_x_get, Coin_SWIG_Python.SoDecomposeVec2f_x_set)
    y = _swig_property(Coin_SWIG_Python.SoDecomposeVec2f_y_get, Coin_SWIG_Python.SoDecomposeVec2f_y_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeVec2f
    __del__ = lambda self : None;
SoDecomposeVec2f_swigregister = Coin_SWIG_Python.SoDecomposeVec2f_swigregister
SoDecomposeVec2f_swigregister(SoDecomposeVec2f)
SoDecomposeVec2f_getClassTypeId = Coin_SWIG_Python.SoDecomposeVec2f_getClassTypeId
SoDecomposeVec2f_createInstance = Coin_SWIG_Python.SoDecomposeVec2f_createInstance
SoDecomposeVec2f_initClass = Coin_SWIG_Python.SoDecomposeVec2f_initClass

class SoDecomposeVec3f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecomposeVec3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDecomposeVec3f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoDecomposeVec3f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoDecomposeVec3f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecomposeVec3f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDecomposeVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoDecomposeVec3f_initClass)
    vector = _swig_property(Coin_SWIG_Python.SoDecomposeVec3f_vector_get, Coin_SWIG_Python.SoDecomposeVec3f_vector_set)
    x = _swig_property(Coin_SWIG_Python.SoDecomposeVec3f_x_get, Coin_SWIG_Python.SoDecomposeVec3f_x_set)
    y = _swig_property(Coin_SWIG_Python.SoDecomposeVec3f_y_get, Coin_SWIG_Python.SoDecomposeVec3f_y_set)
    z = _swig_property(Coin_SWIG_Python.SoDecomposeVec3f_z_get, Coin_SWIG_Python.SoDecomposeVec3f_z_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeVec3f
    __del__ = lambda self : None;
SoDecomposeVec3f_swigregister = Coin_SWIG_Python.SoDecomposeVec3f_swigregister
SoDecomposeVec3f_swigregister(SoDecomposeVec3f)
SoDecomposeVec3f_getClassTypeId = Coin_SWIG_Python.SoDecomposeVec3f_getClassTypeId
SoDecomposeVec3f_createInstance = Coin_SWIG_Python.SoDecomposeVec3f_createInstance
SoDecomposeVec3f_initClass = Coin_SWIG_Python.SoDecomposeVec3f_initClass

class SoDecomposeVec4f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecomposeVec4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDecomposeVec4f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoDecomposeVec4f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoDecomposeVec4f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecomposeVec4f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDecomposeVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoDecomposeVec4f_initClass)
    vector = _swig_property(Coin_SWIG_Python.SoDecomposeVec4f_vector_get, Coin_SWIG_Python.SoDecomposeVec4f_vector_set)
    x = _swig_property(Coin_SWIG_Python.SoDecomposeVec4f_x_get, Coin_SWIG_Python.SoDecomposeVec4f_x_set)
    y = _swig_property(Coin_SWIG_Python.SoDecomposeVec4f_y_get, Coin_SWIG_Python.SoDecomposeVec4f_y_set)
    z = _swig_property(Coin_SWIG_Python.SoDecomposeVec4f_z_get, Coin_SWIG_Python.SoDecomposeVec4f_z_set)
    w = _swig_property(Coin_SWIG_Python.SoDecomposeVec4f_w_get, Coin_SWIG_Python.SoDecomposeVec4f_w_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeVec4f
    __del__ = lambda self : None;
SoDecomposeVec4f_swigregister = Coin_SWIG_Python.SoDecomposeVec4f_swigregister
SoDecomposeVec4f_swigregister(SoDecomposeVec4f)
SoDecomposeVec4f_getClassTypeId = Coin_SWIG_Python.SoDecomposeVec4f_getClassTypeId
SoDecomposeVec4f_createInstance = Coin_SWIG_Python.SoDecomposeVec4f_createInstance
SoDecomposeVec4f_initClass = Coin_SWIG_Python.SoDecomposeVec4f_initClass

class SoComposeRotation(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComposeRotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComposeRotation_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComposeRotation_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComposeRotation_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComposeRotation_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComposeRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComposeRotation_initClass)
    axis = _swig_property(Coin_SWIG_Python.SoComposeRotation_axis_get, Coin_SWIG_Python.SoComposeRotation_axis_set)
    angle = _swig_property(Coin_SWIG_Python.SoComposeRotation_angle_get, Coin_SWIG_Python.SoComposeRotation_angle_set)
    rotation = _swig_property(Coin_SWIG_Python.SoComposeRotation_rotation_get, Coin_SWIG_Python.SoComposeRotation_rotation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeRotation
    __del__ = lambda self : None;
SoComposeRotation_swigregister = Coin_SWIG_Python.SoComposeRotation_swigregister
SoComposeRotation_swigregister(SoComposeRotation)
SoComposeRotation_getClassTypeId = Coin_SWIG_Python.SoComposeRotation_getClassTypeId
SoComposeRotation_createInstance = Coin_SWIG_Python.SoComposeRotation_createInstance
SoComposeRotation_initClass = Coin_SWIG_Python.SoComposeRotation_initClass

class SoMFRotation(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFRotation
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFRotation_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFRotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFRotation_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFRotation_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFRotation_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFRotation_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFRotation___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFRotation___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFRotation_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFRotation_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFRotation_initClass)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFRotation_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFRotation_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFRotation_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFRotation_set1Value(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFRotation___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFRotation___setitem__(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFRotation_getValues(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFRotation_setValue(*args)
SoMFRotation_swigregister = Coin_SWIG_Python.SoMFRotation_swigregister
SoMFRotation_swigregister(SoMFRotation)
SoMFRotation_createInstance = Coin_SWIG_Python.SoMFRotation_createInstance
SoMFRotation_getClassTypeId = Coin_SWIG_Python.SoMFRotation_getClassTypeId
SoMFRotation_initClass = Coin_SWIG_Python.SoMFRotation_initClass

class SoDecomposeRotation(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecomposeRotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDecomposeRotation_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoDecomposeRotation_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoDecomposeRotation_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecomposeRotation_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDecomposeRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoDecomposeRotation_initClass)
    rotation = _swig_property(Coin_SWIG_Python.SoDecomposeRotation_rotation_get, Coin_SWIG_Python.SoDecomposeRotation_rotation_set)
    axis = _swig_property(Coin_SWIG_Python.SoDecomposeRotation_axis_get, Coin_SWIG_Python.SoDecomposeRotation_axis_set)
    angle = _swig_property(Coin_SWIG_Python.SoDecomposeRotation_angle_get, Coin_SWIG_Python.SoDecomposeRotation_angle_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeRotation
    __del__ = lambda self : None;
SoDecomposeRotation_swigregister = Coin_SWIG_Python.SoDecomposeRotation_swigregister
SoDecomposeRotation_swigregister(SoDecomposeRotation)
SoDecomposeRotation_getClassTypeId = Coin_SWIG_Python.SoDecomposeRotation_getClassTypeId
SoDecomposeRotation_createInstance = Coin_SWIG_Python.SoDecomposeRotation_createInstance
SoDecomposeRotation_initClass = Coin_SWIG_Python.SoDecomposeRotation_initClass

class SoComposeMatrix(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComposeMatrix_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComposeMatrix_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComposeMatrix_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComposeMatrix_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComposeMatrix_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComposeMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComposeMatrix_initClass)
    translation = _swig_property(Coin_SWIG_Python.SoComposeMatrix_translation_get, Coin_SWIG_Python.SoComposeMatrix_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoComposeMatrix_rotation_get, Coin_SWIG_Python.SoComposeMatrix_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoComposeMatrix_scaleFactor_get, Coin_SWIG_Python.SoComposeMatrix_scaleFactor_set)
    scaleOrientation = _swig_property(Coin_SWIG_Python.SoComposeMatrix_scaleOrientation_get, Coin_SWIG_Python.SoComposeMatrix_scaleOrientation_set)
    center = _swig_property(Coin_SWIG_Python.SoComposeMatrix_center_get, Coin_SWIG_Python.SoComposeMatrix_center_set)
    matrix = _swig_property(Coin_SWIG_Python.SoComposeMatrix_matrix_get, Coin_SWIG_Python.SoComposeMatrix_matrix_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeMatrix
    __del__ = lambda self : None;
SoComposeMatrix_swigregister = Coin_SWIG_Python.SoComposeMatrix_swigregister
SoComposeMatrix_swigregister(SoComposeMatrix)
SoComposeMatrix_getClassTypeId = Coin_SWIG_Python.SoComposeMatrix_getClassTypeId
SoComposeMatrix_createInstance = Coin_SWIG_Python.SoComposeMatrix_createInstance
SoComposeMatrix_initClass = Coin_SWIG_Python.SoComposeMatrix_initClass

class SoMFMatrix(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFMatrix
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFMatrix_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFMatrix_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFMatrix_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFMatrix_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFMatrix_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFMatrix_find(*args)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFMatrix_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFMatrix_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFMatrix_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFMatrix_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFMatrix___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFMatrix___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFMatrix_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFMatrix_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFMatrix_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFMatrix___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFMatrix___setitem__(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFMatrix_getValues(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFMatrix_setValue(*args)
SoMFMatrix_swigregister = Coin_SWIG_Python.SoMFMatrix_swigregister
SoMFMatrix_swigregister(SoMFMatrix)
SoMFMatrix_createInstance = Coin_SWIG_Python.SoMFMatrix_createInstance
SoMFMatrix_getClassTypeId = Coin_SWIG_Python.SoMFMatrix_getClassTypeId
SoMFMatrix_initClass = Coin_SWIG_Python.SoMFMatrix_initClass

class SoDecomposeMatrix(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDecomposeMatrix_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDecomposeMatrix_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoDecomposeMatrix_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoDecomposeMatrix_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoDecomposeMatrix_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDecomposeMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoDecomposeMatrix_initClass)
    matrix = _swig_property(Coin_SWIG_Python.SoDecomposeMatrix_matrix_get, Coin_SWIG_Python.SoDecomposeMatrix_matrix_set)
    center = _swig_property(Coin_SWIG_Python.SoDecomposeMatrix_center_get, Coin_SWIG_Python.SoDecomposeMatrix_center_set)
    translation = _swig_property(Coin_SWIG_Python.SoDecomposeMatrix_translation_get, Coin_SWIG_Python.SoDecomposeMatrix_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoDecomposeMatrix_rotation_get, Coin_SWIG_Python.SoDecomposeMatrix_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoDecomposeMatrix_scaleFactor_get, Coin_SWIG_Python.SoDecomposeMatrix_scaleFactor_set)
    scaleOrientation = _swig_property(Coin_SWIG_Python.SoDecomposeMatrix_scaleOrientation_get, Coin_SWIG_Python.SoDecomposeMatrix_scaleOrientation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDecomposeMatrix
    __del__ = lambda self : None;
SoDecomposeMatrix_swigregister = Coin_SWIG_Python.SoDecomposeMatrix_swigregister
SoDecomposeMatrix_swigregister(SoDecomposeMatrix)
SoDecomposeMatrix_getClassTypeId = Coin_SWIG_Python.SoDecomposeMatrix_getClassTypeId
SoDecomposeMatrix_createInstance = Coin_SWIG_Python.SoDecomposeMatrix_createInstance
SoDecomposeMatrix_initClass = Coin_SWIG_Python.SoDecomposeMatrix_initClass

class SoComposeRotationFromTo(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComposeRotationFromTo_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComposeRotationFromTo_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComposeRotationFromTo_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComposeRotationFromTo_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComposeRotationFromTo_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComposeRotationFromTo(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComposeRotationFromTo_initClass)
    srcFrom = _swig_property(Coin_SWIG_Python.SoComposeRotationFromTo_srcFrom_get, Coin_SWIG_Python.SoComposeRotationFromTo_srcFrom_set)
    destTo = _swig_property(Coin_SWIG_Python.SoComposeRotationFromTo_destTo_get, Coin_SWIG_Python.SoComposeRotationFromTo_destTo_set)
    rotation = _swig_property(Coin_SWIG_Python.SoComposeRotationFromTo_rotation_get, Coin_SWIG_Python.SoComposeRotationFromTo_rotation_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComposeRotationFromTo
    __del__ = lambda self : None;
SoComposeRotationFromTo_swigregister = Coin_SWIG_Python.SoComposeRotationFromTo_swigregister
SoComposeRotationFromTo_swigregister(SoComposeRotationFromTo)
SoComposeRotationFromTo_getClassTypeId = Coin_SWIG_Python.SoComposeRotationFromTo_getClassTypeId
SoComposeRotationFromTo_createInstance = Coin_SWIG_Python.SoComposeRotationFromTo_createInstance
SoComposeRotationFromTo_initClass = Coin_SWIG_Python.SoComposeRotationFromTo_initClass

class SoSFPath(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFPath
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFPath_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFPath_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFPath_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFPath_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFPath_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFPath_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFPath___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFPath___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFPath_initClass)
    def notify(*args): return Coin_SWIG_Python.SoSFPath_notify(*args)
    def fixCopy(*args): return Coin_SWIG_Python.SoSFPath_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoSFPath_referencesCopy(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFPath_setValue(*args)
SoSFPath_swigregister = Coin_SWIG_Python.SoSFPath_swigregister
SoSFPath_swigregister(SoSFPath)
SoSFPath_createInstance = Coin_SWIG_Python.SoSFPath_createInstance
SoSFPath_getClassTypeId = Coin_SWIG_Python.SoSFPath_getClassTypeId
SoSFPath_initClass = Coin_SWIG_Python.SoSFPath_initClass

class SoComputeBoundingBox(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoComputeBoundingBox_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoComputeBoundingBox_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoComputeBoundingBox_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoComputeBoundingBox_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoComputeBoundingBox_createInstance)
    node = _swig_property(Coin_SWIG_Python.SoComputeBoundingBox_node_get, Coin_SWIG_Python.SoComputeBoundingBox_node_set)
    path = _swig_property(Coin_SWIG_Python.SoComputeBoundingBox_path_get, Coin_SWIG_Python.SoComputeBoundingBox_path_set)
    min = _swig_property(Coin_SWIG_Python.SoComputeBoundingBox_min_get, Coin_SWIG_Python.SoComputeBoundingBox_min_set)
    max = _swig_property(Coin_SWIG_Python.SoComputeBoundingBox_max_get, Coin_SWIG_Python.SoComputeBoundingBox_max_set)
    boxCenter = _swig_property(Coin_SWIG_Python.SoComputeBoundingBox_boxCenter_get, Coin_SWIG_Python.SoComputeBoundingBox_boxCenter_set)
    objectCenter = _swig_property(Coin_SWIG_Python.SoComputeBoundingBox_objectCenter_get, Coin_SWIG_Python.SoComputeBoundingBox_objectCenter_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoComputeBoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoComputeBoundingBox_initClass)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoComputeBoundingBox_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoComputeBoundingBox_getViewportRegion(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoComputeBoundingBox
    __del__ = lambda self : None;
SoComputeBoundingBox_swigregister = Coin_SWIG_Python.SoComputeBoundingBox_swigregister
SoComputeBoundingBox_swigregister(SoComputeBoundingBox)
SoComputeBoundingBox_getClassTypeId = Coin_SWIG_Python.SoComputeBoundingBox_getClassTypeId
SoComputeBoundingBox_createInstance = Coin_SWIG_Python.SoComputeBoundingBox_createInstance
SoComputeBoundingBox_initClass = Coin_SWIG_Python.SoComputeBoundingBox_initClass

class SoConcatenate(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoConcatenate_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoConcatenate_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoConcatenate_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoConcatenate_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoConcatenate_createInstance)
    NUMINPUTS = Coin_SWIG_Python.SoConcatenate_NUMINPUTS
    initClass = staticmethod(Coin_SWIG_Python.SoConcatenate_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoConcatenate(*args)
        try: self.this.append(this)
        except: self.this = this
    input = _swig_property(Coin_SWIG_Python.SoConcatenate_input_get, Coin_SWIG_Python.SoConcatenate_input_set)
    output = _swig_property(Coin_SWIG_Python.SoConcatenate_output_get, Coin_SWIG_Python.SoConcatenate_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoConcatenate
    __del__ = lambda self : None;
SoConcatenate_swigregister = Coin_SWIG_Python.SoConcatenate_swigregister
SoConcatenate_swigregister(SoConcatenate)
SoConcatenate_getClassTypeId = Coin_SWIG_Python.SoConcatenate_getClassTypeId
SoConcatenate_createInstance = Coin_SWIG_Python.SoConcatenate_createInstance
SoConcatenate_initClass = Coin_SWIG_Python.SoConcatenate_initClass

class SoSFTrigger(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFTrigger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFTrigger
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFTrigger_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFTrigger_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFTrigger_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFTrigger_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFTrigger_isSame(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFTrigger_initClass)
    def getValue(*args): return Coin_SWIG_Python.SoSFTrigger_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFTrigger___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFTrigger___ne__(*args)
    def startNotify(*args): return Coin_SWIG_Python.SoSFTrigger_startNotify(*args)
    def notify(*args): return Coin_SWIG_Python.SoSFTrigger_notify(*args)
    def touch(*args): return Coin_SWIG_Python.SoSFTrigger_touch(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFTrigger_setValue(*args)
SoSFTrigger_swigregister = Coin_SWIG_Python.SoSFTrigger_swigregister
SoSFTrigger_swigregister(SoSFTrigger)
SoSFTrigger_createInstance = Coin_SWIG_Python.SoSFTrigger_createInstance
SoSFTrigger_getClassTypeId = Coin_SWIG_Python.SoSFTrigger_getClassTypeId
SoSFTrigger_initClass = Coin_SWIG_Python.SoSFTrigger_initClass

class SoSFShort(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFShort
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFShort_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFShort_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFShort_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFShort_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFShort_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFShort_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFShort___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFShort___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFShort_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFShort_setValue(*args)
SoSFShort_swigregister = Coin_SWIG_Python.SoSFShort_swigregister
SoSFShort_swigregister(SoSFShort)
SoSFShort_createInstance = Coin_SWIG_Python.SoSFShort_createInstance
SoSFShort_getClassTypeId = Coin_SWIG_Python.SoSFShort_getClassTypeId
SoSFShort_initClass = Coin_SWIG_Python.SoSFShort_initClass

class SoCounter(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCounter_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCounter_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoCounter_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoCounter_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoCounter_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoCounter_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    min = _swig_property(Coin_SWIG_Python.SoCounter_min_get, Coin_SWIG_Python.SoCounter_min_set)
    max = _swig_property(Coin_SWIG_Python.SoCounter_max_get, Coin_SWIG_Python.SoCounter_max_set)
    step = _swig_property(Coin_SWIG_Python.SoCounter_step_get, Coin_SWIG_Python.SoCounter_step_set)
    trigger = _swig_property(Coin_SWIG_Python.SoCounter_trigger_get, Coin_SWIG_Python.SoCounter_trigger_set)
    reset = _swig_property(Coin_SWIG_Python.SoCounter_reset_get, Coin_SWIG_Python.SoCounter_reset_set)
    output = _swig_property(Coin_SWIG_Python.SoCounter_output_get, Coin_SWIG_Python.SoCounter_output_set)
    syncOut = _swig_property(Coin_SWIG_Python.SoCounter_syncOut_get, Coin_SWIG_Python.SoCounter_syncOut_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCounter
    __del__ = lambda self : None;
SoCounter_swigregister = Coin_SWIG_Python.SoCounter_swigregister
SoCounter_swigregister(SoCounter)
SoCounter_getClassTypeId = Coin_SWIG_Python.SoCounter_getClassTypeId
SoCounter_createInstance = Coin_SWIG_Python.SoCounter_createInstance
SoCounter_initClass = Coin_SWIG_Python.SoCounter_initClass

class SoSFTime(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFTime
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFTime_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFTime_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFTime_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFTime_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFTime_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFTime_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFTime___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFTime___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFTime_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFTime_setValue(*args)
SoSFTime_swigregister = Coin_SWIG_Python.SoSFTime_swigregister
SoSFTime_swigregister(SoSFTime)
SoSFTime_createInstance = Coin_SWIG_Python.SoSFTime_createInstance
SoSFTime_getClassTypeId = Coin_SWIG_Python.SoSFTime_getClassTypeId
SoSFTime_initClass = Coin_SWIG_Python.SoSFTime_initClass

class SoElapsedTime(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoElapsedTime_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoElapsedTime_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoElapsedTime_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoElapsedTime_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoElapsedTime_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoElapsedTime_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoElapsedTime(*args)
        try: self.this.append(this)
        except: self.this = this
    timeIn = _swig_property(Coin_SWIG_Python.SoElapsedTime_timeIn_get, Coin_SWIG_Python.SoElapsedTime_timeIn_set)
    speed = _swig_property(Coin_SWIG_Python.SoElapsedTime_speed_get, Coin_SWIG_Python.SoElapsedTime_speed_set)
    on = _swig_property(Coin_SWIG_Python.SoElapsedTime_on_get, Coin_SWIG_Python.SoElapsedTime_on_set)
    pause = _swig_property(Coin_SWIG_Python.SoElapsedTime_pause_get, Coin_SWIG_Python.SoElapsedTime_pause_set)
    reset = _swig_property(Coin_SWIG_Python.SoElapsedTime_reset_get, Coin_SWIG_Python.SoElapsedTime_reset_set)
    timeOut = _swig_property(Coin_SWIG_Python.SoElapsedTime_timeOut_get, Coin_SWIG_Python.SoElapsedTime_timeOut_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoElapsedTime
    __del__ = lambda self : None;
SoElapsedTime_swigregister = Coin_SWIG_Python.SoElapsedTime_swigregister
SoElapsedTime_swigregister(SoElapsedTime)
SoElapsedTime_getClassTypeId = Coin_SWIG_Python.SoElapsedTime_getClassTypeId
SoElapsedTime_createInstance = Coin_SWIG_Python.SoElapsedTime_createInstance
SoElapsedTime_initClass = Coin_SWIG_Python.SoElapsedTime_initClass

class SoFieldConverter(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFieldConverter_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFieldConverter_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoFieldConverter_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoFieldConverter_getOutputData(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFieldConverter_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoFieldConverter_initClasses)
    def getInput(*args): return Coin_SWIG_Python.SoFieldConverter_getInput(*args)
    def getOutput(*args): return Coin_SWIG_Python.SoFieldConverter_getOutput(*args)
    def getConnectedInput(*args): return Coin_SWIG_Python.SoFieldConverter_getConnectedInput(*args)
    def getForwardConnections(*args): return Coin_SWIG_Python.SoFieldConverter_getForwardConnections(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFieldConverter
    __del__ = lambda self : None;
SoFieldConverter_swigregister = Coin_SWIG_Python.SoFieldConverter_swigregister
SoFieldConverter_swigregister(SoFieldConverter)
SoFieldConverter_getClassTypeId = Coin_SWIG_Python.SoFieldConverter_getClassTypeId
SoFieldConverter_initClass = Coin_SWIG_Python.SoFieldConverter_initClass
SoFieldConverter_initClasses = Coin_SWIG_Python.SoFieldConverter_initClasses

class SoGate(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGate_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoGate_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoGate_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoGate_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoGate_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoGate_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGate(*args)
        try: self.this.append(this)
        except: self.this = this
    enable = _swig_property(Coin_SWIG_Python.SoGate_enable_get, Coin_SWIG_Python.SoGate_enable_set)
    trigger = _swig_property(Coin_SWIG_Python.SoGate_trigger_get, Coin_SWIG_Python.SoGate_trigger_set)
    input = _swig_property(Coin_SWIG_Python.SoGate_input_get, Coin_SWIG_Python.SoGate_input_set)
    output = _swig_property(Coin_SWIG_Python.SoGate_output_get, Coin_SWIG_Python.SoGate_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGate
    __del__ = lambda self : None;
SoGate_swigregister = Coin_SWIG_Python.SoGate_swigregister
SoGate_swigregister(SoGate)
SoGate_getClassTypeId = Coin_SWIG_Python.SoGate_getClassTypeId
SoGate_createInstance = Coin_SWIG_Python.SoGate_createInstance
SoGate_initClass = Coin_SWIG_Python.SoGate_initClass

class SoInterpolate(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInterpolate_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInterpolate_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoInterpolate_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoInterpolate_getOutputData(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoInterpolate_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoInterpolate_initClasses)
    alpha = _swig_property(Coin_SWIG_Python.SoInterpolate_alpha_get, Coin_SWIG_Python.SoInterpolate_alpha_set)
    output = _swig_property(Coin_SWIG_Python.SoInterpolate_output_get, Coin_SWIG_Python.SoInterpolate_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolate
    __del__ = lambda self : None;
SoInterpolate_swigregister = Coin_SWIG_Python.SoInterpolate_swigregister
SoInterpolate_swigregister(SoInterpolate)
SoInterpolate_getClassTypeId = Coin_SWIG_Python.SoInterpolate_getClassTypeId
SoInterpolate_initClass = Coin_SWIG_Python.SoInterpolate_initClass
SoInterpolate_initClasses = Coin_SWIG_Python.SoInterpolate_initClasses

class SoInterpolateFloat(SoInterpolate):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInterpolateFloat_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInterpolateFloat_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoInterpolateFloat_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoInterpolateFloat_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoInterpolateFloat_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInterpolateFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoInterpolateFloat_initClass)
    input0 = _swig_property(Coin_SWIG_Python.SoInterpolateFloat_input0_get, Coin_SWIG_Python.SoInterpolateFloat_input0_set)
    input1 = _swig_property(Coin_SWIG_Python.SoInterpolateFloat_input1_get, Coin_SWIG_Python.SoInterpolateFloat_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateFloat
    __del__ = lambda self : None;
SoInterpolateFloat_swigregister = Coin_SWIG_Python.SoInterpolateFloat_swigregister
SoInterpolateFloat_swigregister(SoInterpolateFloat)
SoInterpolateFloat_getClassTypeId = Coin_SWIG_Python.SoInterpolateFloat_getClassTypeId
SoInterpolateFloat_createInstance = Coin_SWIG_Python.SoInterpolateFloat_createInstance
SoInterpolateFloat_initClass = Coin_SWIG_Python.SoInterpolateFloat_initClass

class SoInterpolateVec2f(SoInterpolate):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInterpolateVec2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInterpolateVec2f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoInterpolateVec2f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoInterpolateVec2f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoInterpolateVec2f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInterpolateVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoInterpolateVec2f_initClass)
    input0 = _swig_property(Coin_SWIG_Python.SoInterpolateVec2f_input0_get, Coin_SWIG_Python.SoInterpolateVec2f_input0_set)
    input1 = _swig_property(Coin_SWIG_Python.SoInterpolateVec2f_input1_get, Coin_SWIG_Python.SoInterpolateVec2f_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateVec2f
    __del__ = lambda self : None;
SoInterpolateVec2f_swigregister = Coin_SWIG_Python.SoInterpolateVec2f_swigregister
SoInterpolateVec2f_swigregister(SoInterpolateVec2f)
SoInterpolateVec2f_getClassTypeId = Coin_SWIG_Python.SoInterpolateVec2f_getClassTypeId
SoInterpolateVec2f_createInstance = Coin_SWIG_Python.SoInterpolateVec2f_createInstance
SoInterpolateVec2f_initClass = Coin_SWIG_Python.SoInterpolateVec2f_initClass

class SoInterpolateVec3f(SoInterpolate):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInterpolateVec3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInterpolateVec3f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoInterpolateVec3f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoInterpolateVec3f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoInterpolateVec3f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInterpolateVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoInterpolateVec3f_initClass)
    input0 = _swig_property(Coin_SWIG_Python.SoInterpolateVec3f_input0_get, Coin_SWIG_Python.SoInterpolateVec3f_input0_set)
    input1 = _swig_property(Coin_SWIG_Python.SoInterpolateVec3f_input1_get, Coin_SWIG_Python.SoInterpolateVec3f_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateVec3f
    __del__ = lambda self : None;
SoInterpolateVec3f_swigregister = Coin_SWIG_Python.SoInterpolateVec3f_swigregister
SoInterpolateVec3f_swigregister(SoInterpolateVec3f)
SoInterpolateVec3f_getClassTypeId = Coin_SWIG_Python.SoInterpolateVec3f_getClassTypeId
SoInterpolateVec3f_createInstance = Coin_SWIG_Python.SoInterpolateVec3f_createInstance
SoInterpolateVec3f_initClass = Coin_SWIG_Python.SoInterpolateVec3f_initClass

class SoInterpolateVec4f(SoInterpolate):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInterpolateVec4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInterpolateVec4f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoInterpolateVec4f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoInterpolateVec4f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoInterpolateVec4f_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInterpolateVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoInterpolateVec4f_initClass)
    input0 = _swig_property(Coin_SWIG_Python.SoInterpolateVec4f_input0_get, Coin_SWIG_Python.SoInterpolateVec4f_input0_set)
    input1 = _swig_property(Coin_SWIG_Python.SoInterpolateVec4f_input1_get, Coin_SWIG_Python.SoInterpolateVec4f_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateVec4f
    __del__ = lambda self : None;
SoInterpolateVec4f_swigregister = Coin_SWIG_Python.SoInterpolateVec4f_swigregister
SoInterpolateVec4f_swigregister(SoInterpolateVec4f)
SoInterpolateVec4f_getClassTypeId = Coin_SWIG_Python.SoInterpolateVec4f_getClassTypeId
SoInterpolateVec4f_createInstance = Coin_SWIG_Python.SoInterpolateVec4f_createInstance
SoInterpolateVec4f_initClass = Coin_SWIG_Python.SoInterpolateVec4f_initClass

class SoInterpolateRotation(SoInterpolate):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInterpolateRotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInterpolateRotation_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoInterpolateRotation_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoInterpolateRotation_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoInterpolateRotation_createInstance)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInterpolateRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoInterpolateRotation_initClass)
    input0 = _swig_property(Coin_SWIG_Python.SoInterpolateRotation_input0_get, Coin_SWIG_Python.SoInterpolateRotation_input0_set)
    input1 = _swig_property(Coin_SWIG_Python.SoInterpolateRotation_input1_get, Coin_SWIG_Python.SoInterpolateRotation_input1_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInterpolateRotation
    __del__ = lambda self : None;
SoInterpolateRotation_swigregister = Coin_SWIG_Python.SoInterpolateRotation_swigregister
SoInterpolateRotation_swigregister(SoInterpolateRotation)
SoInterpolateRotation_getClassTypeId = Coin_SWIG_Python.SoInterpolateRotation_getClassTypeId
SoInterpolateRotation_createInstance = Coin_SWIG_Python.SoInterpolateRotation_createInstance
SoInterpolateRotation_initClass = Coin_SWIG_Python.SoInterpolateRotation_initClass

class SoOnOff(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoOnOff_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoOnOff_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoOnOff_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoOnOff_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoOnOff_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoOnOff_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoOnOff(*args)
        try: self.this.append(this)
        except: self.this = this
    on = _swig_property(Coin_SWIG_Python.SoOnOff_on_get, Coin_SWIG_Python.SoOnOff_on_set)
    off = _swig_property(Coin_SWIG_Python.SoOnOff_off_get, Coin_SWIG_Python.SoOnOff_off_set)
    toggle = _swig_property(Coin_SWIG_Python.SoOnOff_toggle_get, Coin_SWIG_Python.SoOnOff_toggle_set)
    isOn = _swig_property(Coin_SWIG_Python.SoOnOff_isOn_get, Coin_SWIG_Python.SoOnOff_isOn_set)
    isOff = _swig_property(Coin_SWIG_Python.SoOnOff_isOff_get, Coin_SWIG_Python.SoOnOff_isOff_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOnOff
    __del__ = lambda self : None;
SoOnOff_swigregister = Coin_SWIG_Python.SoOnOff_swigregister
SoOnOff_swigregister(SoOnOff)
SoOnOff_getClassTypeId = Coin_SWIG_Python.SoOnOff_getClassTypeId
SoOnOff_createInstance = Coin_SWIG_Python.SoOnOff_createInstance
SoOnOff_initClass = Coin_SWIG_Python.SoOnOff_initClass

class SoSFBitMask(SoSFEnum):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBitMask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBitMask
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBitMask_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBitMask_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBitMask_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBitMask_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBitMask_isSame(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBitMask_initClass)
SoSFBitMask_swigregister = Coin_SWIG_Python.SoSFBitMask_swigregister
SoSFBitMask_swigregister(SoSFBitMask)
SoSFBitMask_createInstance = Coin_SWIG_Python.SoSFBitMask_createInstance
SoSFBitMask_getClassTypeId = Coin_SWIG_Python.SoSFBitMask_getClassTypeId
SoSFBitMask_initClass = Coin_SWIG_Python.SoSFBitMask_initClass

class SoOneShot(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoOneShot_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoOneShot_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoOneShot_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoOneShot_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoOneShot_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoOneShot_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoOneShot(*args)
        try: self.this.append(this)
        except: self.this = this
    RETRIGGERABLE = Coin_SWIG_Python.SoOneShot_RETRIGGERABLE
    HOLD_FINAL = Coin_SWIG_Python.SoOneShot_HOLD_FINAL
    timeIn = _swig_property(Coin_SWIG_Python.SoOneShot_timeIn_get, Coin_SWIG_Python.SoOneShot_timeIn_set)
    duration = _swig_property(Coin_SWIG_Python.SoOneShot_duration_get, Coin_SWIG_Python.SoOneShot_duration_set)
    trigger = _swig_property(Coin_SWIG_Python.SoOneShot_trigger_get, Coin_SWIG_Python.SoOneShot_trigger_set)
    flags = _swig_property(Coin_SWIG_Python.SoOneShot_flags_get, Coin_SWIG_Python.SoOneShot_flags_set)
    disable = _swig_property(Coin_SWIG_Python.SoOneShot_disable_get, Coin_SWIG_Python.SoOneShot_disable_set)
    timeOut = _swig_property(Coin_SWIG_Python.SoOneShot_timeOut_get, Coin_SWIG_Python.SoOneShot_timeOut_set)
    isActive = _swig_property(Coin_SWIG_Python.SoOneShot_isActive_get, Coin_SWIG_Python.SoOneShot_isActive_set)
    ramp = _swig_property(Coin_SWIG_Python.SoOneShot_ramp_get, Coin_SWIG_Python.SoOneShot_ramp_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOneShot
    __del__ = lambda self : None;
SoOneShot_swigregister = Coin_SWIG_Python.SoOneShot_swigregister
SoOneShot_swigregister(SoOneShot)
SoOneShot_getClassTypeId = Coin_SWIG_Python.SoOneShot_getClassTypeId
SoOneShot_createInstance = Coin_SWIG_Python.SoOneShot_createInstance
SoOneShot_initClass = Coin_SWIG_Python.SoOneShot_initClass

class SoSelectOne(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSelectOne_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSelectOne_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoSelectOne_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoSelectOne_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoSelectOne_createInstance)
    index = _swig_property(Coin_SWIG_Python.SoSelectOne_index_get, Coin_SWIG_Python.SoSelectOne_index_set)
    input = _swig_property(Coin_SWIG_Python.SoSelectOne_input_get, Coin_SWIG_Python.SoSelectOne_input_set)
    output = _swig_property(Coin_SWIG_Python.SoSelectOne_output_get, Coin_SWIG_Python.SoSelectOne_output_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSelectOne(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoSelectOne_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSelectOne
    __del__ = lambda self : None;
SoSelectOne_swigregister = Coin_SWIG_Python.SoSelectOne_swigregister
SoSelectOne_swigregister(SoSelectOne)
SoSelectOne_getClassTypeId = Coin_SWIG_Python.SoSelectOne_getClassTypeId
SoSelectOne_createInstance = Coin_SWIG_Python.SoSelectOne_createInstance
SoSelectOne_initClass = Coin_SWIG_Python.SoSelectOne_initClass

class SoTimeCounter(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTimeCounter_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTimeCounter_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoTimeCounter_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoTimeCounter_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoTimeCounter_createInstance)
    timeIn = _swig_property(Coin_SWIG_Python.SoTimeCounter_timeIn_get, Coin_SWIG_Python.SoTimeCounter_timeIn_set)
    min = _swig_property(Coin_SWIG_Python.SoTimeCounter_min_get, Coin_SWIG_Python.SoTimeCounter_min_set)
    max = _swig_property(Coin_SWIG_Python.SoTimeCounter_max_get, Coin_SWIG_Python.SoTimeCounter_max_set)
    step = _swig_property(Coin_SWIG_Python.SoTimeCounter_step_get, Coin_SWIG_Python.SoTimeCounter_step_set)
    on = _swig_property(Coin_SWIG_Python.SoTimeCounter_on_get, Coin_SWIG_Python.SoTimeCounter_on_set)
    frequency = _swig_property(Coin_SWIG_Python.SoTimeCounter_frequency_get, Coin_SWIG_Python.SoTimeCounter_frequency_set)
    duty = _swig_property(Coin_SWIG_Python.SoTimeCounter_duty_get, Coin_SWIG_Python.SoTimeCounter_duty_set)
    reset = _swig_property(Coin_SWIG_Python.SoTimeCounter_reset_get, Coin_SWIG_Python.SoTimeCounter_reset_set)
    syncIn = _swig_property(Coin_SWIG_Python.SoTimeCounter_syncIn_get, Coin_SWIG_Python.SoTimeCounter_syncIn_set)
    output = _swig_property(Coin_SWIG_Python.SoTimeCounter_output_get, Coin_SWIG_Python.SoTimeCounter_output_set)
    syncOut = _swig_property(Coin_SWIG_Python.SoTimeCounter_syncOut_get, Coin_SWIG_Python.SoTimeCounter_syncOut_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTimeCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoTimeCounter_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTimeCounter
    __del__ = lambda self : None;
SoTimeCounter_swigregister = Coin_SWIG_Python.SoTimeCounter_swigregister
SoTimeCounter_swigregister(SoTimeCounter)
SoTimeCounter_getClassTypeId = Coin_SWIG_Python.SoTimeCounter_getClassTypeId
SoTimeCounter_createInstance = Coin_SWIG_Python.SoTimeCounter_createInstance
SoTimeCounter_initClass = Coin_SWIG_Python.SoTimeCounter_initClass

class SoTransformVec3f(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformVec3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformVec3f_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoTransformVec3f_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoTransformVec3f_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoTransformVec3f_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformVec3f_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    vector = _swig_property(Coin_SWIG_Python.SoTransformVec3f_vector_get, Coin_SWIG_Python.SoTransformVec3f_vector_set)
    matrix = _swig_property(Coin_SWIG_Python.SoTransformVec3f_matrix_get, Coin_SWIG_Python.SoTransformVec3f_matrix_set)
    point = _swig_property(Coin_SWIG_Python.SoTransformVec3f_point_get, Coin_SWIG_Python.SoTransformVec3f_point_set)
    direction = _swig_property(Coin_SWIG_Python.SoTransformVec3f_direction_get, Coin_SWIG_Python.SoTransformVec3f_direction_set)
    normalDirection = _swig_property(Coin_SWIG_Python.SoTransformVec3f_normalDirection_get, Coin_SWIG_Python.SoTransformVec3f_normalDirection_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformVec3f
    __del__ = lambda self : None;
SoTransformVec3f_swigregister = Coin_SWIG_Python.SoTransformVec3f_swigregister
SoTransformVec3f_swigregister(SoTransformVec3f)
SoTransformVec3f_getClassTypeId = Coin_SWIG_Python.SoTransformVec3f_getClassTypeId
SoTransformVec3f_createInstance = Coin_SWIG_Python.SoTransformVec3f_createInstance
SoTransformVec3f_initClass = Coin_SWIG_Python.SoTransformVec3f_initClass

class SoTriggerAny(SoEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTriggerAny_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTriggerAny_getTypeId(*args)
    def getFieldData(*args): return Coin_SWIG_Python.SoTriggerAny_getFieldData(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoTriggerAny_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoTriggerAny_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoTriggerAny_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTriggerAny(*args)
        try: self.this.append(this)
        except: self.this = this
    input0 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input0_get, Coin_SWIG_Python.SoTriggerAny_input0_set)
    input1 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input1_get, Coin_SWIG_Python.SoTriggerAny_input1_set)
    input2 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input2_get, Coin_SWIG_Python.SoTriggerAny_input2_set)
    input3 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input3_get, Coin_SWIG_Python.SoTriggerAny_input3_set)
    input4 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input4_get, Coin_SWIG_Python.SoTriggerAny_input4_set)
    input5 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input5_get, Coin_SWIG_Python.SoTriggerAny_input5_set)
    input6 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input6_get, Coin_SWIG_Python.SoTriggerAny_input6_set)
    input7 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input7_get, Coin_SWIG_Python.SoTriggerAny_input7_set)
    input8 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input8_get, Coin_SWIG_Python.SoTriggerAny_input8_set)
    input9 = _swig_property(Coin_SWIG_Python.SoTriggerAny_input9_get, Coin_SWIG_Python.SoTriggerAny_input9_set)
    output = _swig_property(Coin_SWIG_Python.SoTriggerAny_output_get, Coin_SWIG_Python.SoTriggerAny_output_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTriggerAny
    __del__ = lambda self : None;
SoTriggerAny_swigregister = Coin_SWIG_Python.SoTriggerAny_swigregister
SoTriggerAny_swigregister(SoTriggerAny)
SoTriggerAny_getClassTypeId = Coin_SWIG_Python.SoTriggerAny_getClassTypeId
SoTriggerAny_createInstance = Coin_SWIG_Python.SoTriggerAny_createInstance
SoTriggerAny_initClass = Coin_SWIG_Python.SoTriggerAny_initClass

class SoNodeEngine(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoNodeEngine_initClass)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNodeEngine_getClassTypeId)
    def evaluateWrapper(*args): return Coin_SWIG_Python.SoNodeEngine_evaluateWrapper(*args)
    def getOutputs(*args): return Coin_SWIG_Python.SoNodeEngine_getOutputs(*args)
    def getOutput(*args): return Coin_SWIG_Python.SoNodeEngine_getOutput(*args)
    def getOutputName(*args): return Coin_SWIG_Python.SoNodeEngine_getOutputName(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoNodeEngine_getOutputData(*args)
    def isNotifying(*args): return Coin_SWIG_Python.SoNodeEngine_isNotifying(*args)
    def notify(*args): return Coin_SWIG_Python.SoNodeEngine_notify(*args)
    def writeInstance(*args): return Coin_SWIG_Python.SoNodeEngine_writeInstance(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeEngine
    __del__ = lambda self : None;
SoNodeEngine_swigregister = Coin_SWIG_Python.SoNodeEngine_swigregister
SoNodeEngine_swigregister(SoNodeEngine)
SoNodeEngine_initClass = Coin_SWIG_Python.SoNodeEngine_initClass
SoNodeEngine_getClassTypeId = Coin_SWIG_Python.SoNodeEngine_getClassTypeId

class SoError(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoError
    __del__ = lambda self : None;
    setHandlerCallback = staticmethod(Coin_SWIG_Python.SoError_setHandlerCallback)
    getHandlerCallback = staticmethod(Coin_SWIG_Python.SoError_getHandlerCallback)
    getHandlerData = staticmethod(Coin_SWIG_Python.SoError_getHandlerData)
    def getDebugString(*args): return Coin_SWIG_Python.SoError_getDebugString(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoError_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoError_getTypeId(*args)
    def isOfType(*args): return Coin_SWIG_Python.SoError_isOfType(*args)
    post = staticmethod(Coin_SWIG_Python.SoError_post)
    getString = staticmethod(Coin_SWIG_Python.SoError_getString)
    initClass = staticmethod(Coin_SWIG_Python.SoError_initClass)
    initClasses = staticmethod(Coin_SWIG_Python.SoError_initClasses)
SoError_swigregister = Coin_SWIG_Python.SoError_swigregister
SoError_swigregister(SoError)
SoError_setHandlerCallback = Coin_SWIG_Python.SoError_setHandlerCallback
SoError_getHandlerCallback = Coin_SWIG_Python.SoError_getHandlerCallback
SoError_getHandlerData = Coin_SWIG_Python.SoError_getHandlerData
SoError_getClassTypeId = Coin_SWIG_Python.SoError_getClassTypeId
SoError_post = Coin_SWIG_Python.SoError_post
SoError_getString = Coin_SWIG_Python.SoError_getString
SoError_initClass = Coin_SWIG_Python.SoError_initClass
SoError_initClasses = Coin_SWIG_Python.SoError_initClasses

class SoDebugError(SoError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ERROR = Coin_SWIG_Python.SoDebugError_ERROR
    WARNING = Coin_SWIG_Python.SoDebugError_WARNING
    INFO = Coin_SWIG_Python.SoDebugError_INFO
    setHandlerCallback = staticmethod(Coin_SWIG_Python.SoDebugError_setHandlerCallback)
    getHandlerCallback = staticmethod(Coin_SWIG_Python.SoDebugError_getHandlerCallback)
    getHandlerData = staticmethod(Coin_SWIG_Python.SoDebugError_getHandlerData)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDebugError_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDebugError_getTypeId(*args)
    def getSeverity(*args): return Coin_SWIG_Python.SoDebugError_getSeverity(*args)
    post = staticmethod(Coin_SWIG_Python.SoDebugError_post)
    postWarning = staticmethod(Coin_SWIG_Python.SoDebugError_postWarning)
    postInfo = staticmethod(Coin_SWIG_Python.SoDebugError_postInfo)
    initClass = staticmethod(Coin_SWIG_Python.SoDebugError_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDebugError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDebugError
    __del__ = lambda self : None;
SoDebugError_swigregister = Coin_SWIG_Python.SoDebugError_swigregister
SoDebugError_swigregister(SoDebugError)
SoDebugError_setHandlerCallback = Coin_SWIG_Python.SoDebugError_setHandlerCallback
SoDebugError_getHandlerCallback = Coin_SWIG_Python.SoDebugError_getHandlerCallback
SoDebugError_getHandlerData = Coin_SWIG_Python.SoDebugError_getHandlerData
SoDebugError_getClassTypeId = Coin_SWIG_Python.SoDebugError_getClassTypeId
SoDebugError_post = Coin_SWIG_Python.SoDebugError_post
SoDebugError_postWarning = Coin_SWIG_Python.SoDebugError_postWarning
SoDebugError_postInfo = Coin_SWIG_Python.SoDebugError_postInfo
SoDebugError_initClass = Coin_SWIG_Python.SoDebugError_initClass

class SoMemoryError(SoError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    setHandlerCallback = staticmethod(Coin_SWIG_Python.SoMemoryError_setHandlerCallback)
    getHandlerCallback = staticmethod(Coin_SWIG_Python.SoMemoryError_getHandlerCallback)
    getHandlerData = staticmethod(Coin_SWIG_Python.SoMemoryError_getHandlerData)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMemoryError_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMemoryError_getTypeId(*args)
    post = staticmethod(Coin_SWIG_Python.SoMemoryError_post)
    initClass = staticmethod(Coin_SWIG_Python.SoMemoryError_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMemoryError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMemoryError
    __del__ = lambda self : None;
SoMemoryError_swigregister = Coin_SWIG_Python.SoMemoryError_swigregister
SoMemoryError_swigregister(SoMemoryError)
SoMemoryError_setHandlerCallback = Coin_SWIG_Python.SoMemoryError_setHandlerCallback
SoMemoryError_getHandlerCallback = Coin_SWIG_Python.SoMemoryError_getHandlerCallback
SoMemoryError_getHandlerData = Coin_SWIG_Python.SoMemoryError_getHandlerData
SoMemoryError_getClassTypeId = Coin_SWIG_Python.SoMemoryError_getClassTypeId
SoMemoryError_post = Coin_SWIG_Python.SoMemoryError_post
SoMemoryError_initClass = Coin_SWIG_Python.SoMemoryError_initClass

class SoReadError(SoError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    setHandlerCallback = staticmethod(Coin_SWIG_Python.SoReadError_setHandlerCallback)
    getHandlerCallback = staticmethod(Coin_SWIG_Python.SoReadError_getHandlerCallback)
    getHandlerData = staticmethod(Coin_SWIG_Python.SoReadError_getHandlerData)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoReadError_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoReadError_getTypeId(*args)
    post = staticmethod(Coin_SWIG_Python.SoReadError_post)
    initClass = staticmethod(Coin_SWIG_Python.SoReadError_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoReadError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoReadError
    __del__ = lambda self : None;
SoReadError_swigregister = Coin_SWIG_Python.SoReadError_swigregister
SoReadError_swigregister(SoReadError)
SoReadError_setHandlerCallback = Coin_SWIG_Python.SoReadError_setHandlerCallback
SoReadError_getHandlerCallback = Coin_SWIG_Python.SoReadError_getHandlerCallback
SoReadError_getHandlerData = Coin_SWIG_Python.SoReadError_getHandlerData
SoReadError_getClassTypeId = Coin_SWIG_Python.SoReadError_getClassTypeId
SoReadError_post = Coin_SWIG_Python.SoReadError_post
SoReadError_initClass = Coin_SWIG_Python.SoReadError_initClass

class SoButtonEvent(SoEvent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoButtonEvent_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoButtonEvent_getTypeId(*args)
    UP = Coin_SWIG_Python.SoButtonEvent_UP
    DOWN = Coin_SWIG_Python.SoButtonEvent_DOWN
    UNKNOWN = Coin_SWIG_Python.SoButtonEvent_UNKNOWN
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoButtonEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoButtonEvent
    __del__ = lambda self : None;
    def setState(*args): return Coin_SWIG_Python.SoButtonEvent_setState(*args)
    def getState(*args): return Coin_SWIG_Python.SoButtonEvent_getState(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoButtonEvent_initClass)
SoButtonEvent_swigregister = Coin_SWIG_Python.SoButtonEvent_swigregister
SoButtonEvent_swigregister(SoButtonEvent)
SoButtonEvent_getClassTypeId = Coin_SWIG_Python.SoButtonEvent_getClassTypeId
SoButtonEvent_initClass = Coin_SWIG_Python.SoButtonEvent_initClass

class SoLocation2Event(SoEvent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLocation2Event_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLocation2Event_getTypeId(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLocation2Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLocation2Event
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoLocation2Event_initClass)
SoLocation2Event_swigregister = Coin_SWIG_Python.SoLocation2Event_swigregister
SoLocation2Event_swigregister(SoLocation2Event)
SoLocation2Event_getClassTypeId = Coin_SWIG_Python.SoLocation2Event_getClassTypeId
SoLocation2Event_initClass = Coin_SWIG_Python.SoLocation2Event_initClass

class SoMotion3Event(SoEvent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMotion3Event_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMotion3Event_getTypeId(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMotion3Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMotion3Event
    __del__ = lambda self : None;
    def setTranslation(*args): return Coin_SWIG_Python.SoMotion3Event_setTranslation(*args)
    def getTranslation(*args): return Coin_SWIG_Python.SoMotion3Event_getTranslation(*args)
    def setRotation(*args): return Coin_SWIG_Python.SoMotion3Event_setRotation(*args)
    def getRotation(*args): return Coin_SWIG_Python.SoMotion3Event_getRotation(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMotion3Event_initClass)
SoMotion3Event_swigregister = Coin_SWIG_Python.SoMotion3Event_swigregister
SoMotion3Event_swigregister(SoMotion3Event)
SoMotion3Event_getClassTypeId = Coin_SWIG_Python.SoMotion3Event_getClassTypeId
SoMotion3Event_initClass = Coin_SWIG_Python.SoMotion3Event_initClass

class SoKeyboardEvent(SoButtonEvent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoKeyboardEvent_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoKeyboardEvent_getTypeId(*args)
    ANY = Coin_SWIG_Python.SoKeyboardEvent_ANY
    UNDEFINED = Coin_SWIG_Python.SoKeyboardEvent_UNDEFINED
    LEFT_SHIFT = Coin_SWIG_Python.SoKeyboardEvent_LEFT_SHIFT
    RIGHT_SHIFT = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_SHIFT
    LEFT_CONTROL = Coin_SWIG_Python.SoKeyboardEvent_LEFT_CONTROL
    RIGHT_CONTROL = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_CONTROL
    LEFT_ALT = Coin_SWIG_Python.SoKeyboardEvent_LEFT_ALT
    RIGHT_ALT = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_ALT
    NUMBER_0 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_0
    NUMBER_1 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_1
    NUMBER_2 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_2
    NUMBER_3 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_3
    NUMBER_4 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_4
    NUMBER_5 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_5
    NUMBER_6 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_6
    NUMBER_7 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_7
    NUMBER_8 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_8
    NUMBER_9 = Coin_SWIG_Python.SoKeyboardEvent_NUMBER_9
    A = Coin_SWIG_Python.SoKeyboardEvent_A
    B = Coin_SWIG_Python.SoKeyboardEvent_B
    C = Coin_SWIG_Python.SoKeyboardEvent_C
    D = Coin_SWIG_Python.SoKeyboardEvent_D
    E = Coin_SWIG_Python.SoKeyboardEvent_E
    F = Coin_SWIG_Python.SoKeyboardEvent_F
    G = Coin_SWIG_Python.SoKeyboardEvent_G
    H = Coin_SWIG_Python.SoKeyboardEvent_H
    I = Coin_SWIG_Python.SoKeyboardEvent_I
    J = Coin_SWIG_Python.SoKeyboardEvent_J
    K = Coin_SWIG_Python.SoKeyboardEvent_K
    L = Coin_SWIG_Python.SoKeyboardEvent_L
    M = Coin_SWIG_Python.SoKeyboardEvent_M
    N = Coin_SWIG_Python.SoKeyboardEvent_N
    O = Coin_SWIG_Python.SoKeyboardEvent_O
    P = Coin_SWIG_Python.SoKeyboardEvent_P
    Q = Coin_SWIG_Python.SoKeyboardEvent_Q
    R = Coin_SWIG_Python.SoKeyboardEvent_R
    S = Coin_SWIG_Python.SoKeyboardEvent_S
    T = Coin_SWIG_Python.SoKeyboardEvent_T
    U = Coin_SWIG_Python.SoKeyboardEvent_U
    V = Coin_SWIG_Python.SoKeyboardEvent_V
    W = Coin_SWIG_Python.SoKeyboardEvent_W
    X = Coin_SWIG_Python.SoKeyboardEvent_X
    Y = Coin_SWIG_Python.SoKeyboardEvent_Y
    Z = Coin_SWIG_Python.SoKeyboardEvent_Z
    HOME = Coin_SWIG_Python.SoKeyboardEvent_HOME
    LEFT_ARROW = Coin_SWIG_Python.SoKeyboardEvent_LEFT_ARROW
    UP_ARROW = Coin_SWIG_Python.SoKeyboardEvent_UP_ARROW
    RIGHT_ARROW = Coin_SWIG_Python.SoKeyboardEvent_RIGHT_ARROW
    DOWN_ARROW = Coin_SWIG_Python.SoKeyboardEvent_DOWN_ARROW
    PAGE_UP = Coin_SWIG_Python.SoKeyboardEvent_PAGE_UP
    PAGE_DOWN = Coin_SWIG_Python.SoKeyboardEvent_PAGE_DOWN
    END = Coin_SWIG_Python.SoKeyboardEvent_END
    PRIOR = Coin_SWIG_Python.SoKeyboardEvent_PRIOR
    NEXT = Coin_SWIG_Python.SoKeyboardEvent_NEXT
    PAD_ENTER = Coin_SWIG_Python.SoKeyboardEvent_PAD_ENTER
    PAD_F1 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F1
    PAD_F2 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F2
    PAD_F3 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F3
    PAD_F4 = Coin_SWIG_Python.SoKeyboardEvent_PAD_F4
    PAD_0 = Coin_SWIG_Python.SoKeyboardEvent_PAD_0
    PAD_1 = Coin_SWIG_Python.SoKeyboardEvent_PAD_1
    PAD_2 = Coin_SWIG_Python.SoKeyboardEvent_PAD_2
    PAD_3 = Coin_SWIG_Python.SoKeyboardEvent_PAD_3
    PAD_4 = Coin_SWIG_Python.SoKeyboardEvent_PAD_4
    PAD_5 = Coin_SWIG_Python.SoKeyboardEvent_PAD_5
    PAD_6 = Coin_SWIG_Python.SoKeyboardEvent_PAD_6
    PAD_7 = Coin_SWIG_Python.SoKeyboardEvent_PAD_7
    PAD_8 = Coin_SWIG_Python.SoKeyboardEvent_PAD_8
    PAD_9 = Coin_SWIG_Python.SoKeyboardEvent_PAD_9
    PAD_ADD = Coin_SWIG_Python.SoKeyboardEvent_PAD_ADD
    PAD_SUBTRACT = Coin_SWIG_Python.SoKeyboardEvent_PAD_SUBTRACT
    PAD_MULTIPLY = Coin_SWIG_Python.SoKeyboardEvent_PAD_MULTIPLY
    PAD_DIVIDE = Coin_SWIG_Python.SoKeyboardEvent_PAD_DIVIDE
    PAD_SPACE = Coin_SWIG_Python.SoKeyboardEvent_PAD_SPACE
    PAD_TAB = Coin_SWIG_Python.SoKeyboardEvent_PAD_TAB
    PAD_INSERT = Coin_SWIG_Python.SoKeyboardEvent_PAD_INSERT
    PAD_DELETE = Coin_SWIG_Python.SoKeyboardEvent_PAD_DELETE
    PAD_PERIOD = Coin_SWIG_Python.SoKeyboardEvent_PAD_PERIOD
    F1 = Coin_SWIG_Python.SoKeyboardEvent_F1
    F2 = Coin_SWIG_Python.SoKeyboardEvent_F2
    F3 = Coin_SWIG_Python.SoKeyboardEvent_F3
    F4 = Coin_SWIG_Python.SoKeyboardEvent_F4
    F5 = Coin_SWIG_Python.SoKeyboardEvent_F5
    F6 = Coin_SWIG_Python.SoKeyboardEvent_F6
    F7 = Coin_SWIG_Python.SoKeyboardEvent_F7
    F8 = Coin_SWIG_Python.SoKeyboardEvent_F8
    F9 = Coin_SWIG_Python.SoKeyboardEvent_F9
    F10 = Coin_SWIG_Python.SoKeyboardEvent_F10
    F11 = Coin_SWIG_Python.SoKeyboardEvent_F11
    F12 = Coin_SWIG_Python.SoKeyboardEvent_F12
    BACKSPACE = Coin_SWIG_Python.SoKeyboardEvent_BACKSPACE
    TAB = Coin_SWIG_Python.SoKeyboardEvent_TAB
    RETURN = Coin_SWIG_Python.SoKeyboardEvent_RETURN
    ENTER = Coin_SWIG_Python.SoKeyboardEvent_ENTER
    PAUSE = Coin_SWIG_Python.SoKeyboardEvent_PAUSE
    SCROLL_LOCK = Coin_SWIG_Python.SoKeyboardEvent_SCROLL_LOCK
    ESCAPE = Coin_SWIG_Python.SoKeyboardEvent_ESCAPE
    DELETE = Coin_SWIG_Python.SoKeyboardEvent_DELETE
    KEY_DELETE = Coin_SWIG_Python.SoKeyboardEvent_KEY_DELETE
    PRINT = Coin_SWIG_Python.SoKeyboardEvent_PRINT
    INSERT = Coin_SWIG_Python.SoKeyboardEvent_INSERT
    NUM_LOCK = Coin_SWIG_Python.SoKeyboardEvent_NUM_LOCK
    CAPS_LOCK = Coin_SWIG_Python.SoKeyboardEvent_CAPS_LOCK
    SHIFT_LOCK = Coin_SWIG_Python.SoKeyboardEvent_SHIFT_LOCK
    SPACE = Coin_SWIG_Python.SoKeyboardEvent_SPACE
    APOSTROPHE = Coin_SWIG_Python.SoKeyboardEvent_APOSTROPHE
    COMMA = Coin_SWIG_Python.SoKeyboardEvent_COMMA
    MINUS = Coin_SWIG_Python.SoKeyboardEvent_MINUS
    PERIOD = Coin_SWIG_Python.SoKeyboardEvent_PERIOD
    SLASH = Coin_SWIG_Python.SoKeyboardEvent_SLASH
    SEMICOLON = Coin_SWIG_Python.SoKeyboardEvent_SEMICOLON
    EQUAL = Coin_SWIG_Python.SoKeyboardEvent_EQUAL
    BRACKETLEFT = Coin_SWIG_Python.SoKeyboardEvent_BRACKETLEFT
    BACKSLASH = Coin_SWIG_Python.SoKeyboardEvent_BACKSLASH
    BRACKETRIGHT = Coin_SWIG_Python.SoKeyboardEvent_BRACKETRIGHT
    GRAVE = Coin_SWIG_Python.SoKeyboardEvent_GRAVE
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoKeyboardEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoKeyboardEvent
    __del__ = lambda self : None;
    def setKey(*args): return Coin_SWIG_Python.SoKeyboardEvent_setKey(*args)
    def getKey(*args): return Coin_SWIG_Python.SoKeyboardEvent_getKey(*args)
    def setPrintableCharacter(*args): return Coin_SWIG_Python.SoKeyboardEvent_setPrintableCharacter(*args)
    def getPrintableCharacter(*args): return Coin_SWIG_Python.SoKeyboardEvent_getPrintableCharacter(*args)
    isKeyPressEvent = staticmethod(Coin_SWIG_Python.SoKeyboardEvent_isKeyPressEvent)
    isKeyReleaseEvent = staticmethod(Coin_SWIG_Python.SoKeyboardEvent_isKeyReleaseEvent)
    initClass = staticmethod(Coin_SWIG_Python.SoKeyboardEvent_initClass)
SoKeyboardEvent_swigregister = Coin_SWIG_Python.SoKeyboardEvent_swigregister
SoKeyboardEvent_swigregister(SoKeyboardEvent)
SoKeyboardEvent_getClassTypeId = Coin_SWIG_Python.SoKeyboardEvent_getClassTypeId
SoKeyboardEvent_isKeyPressEvent = Coin_SWIG_Python.SoKeyboardEvent_isKeyPressEvent
SoKeyboardEvent_isKeyReleaseEvent = Coin_SWIG_Python.SoKeyboardEvent_isKeyReleaseEvent
SoKeyboardEvent_initClass = Coin_SWIG_Python.SoKeyboardEvent_initClass

class SoMouseButtonEvent(SoButtonEvent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMouseButtonEvent_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMouseButtonEvent_getTypeId(*args)
    ANY = Coin_SWIG_Python.SoMouseButtonEvent_ANY
    BUTTON1 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON1
    BUTTON2 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON2
    BUTTON3 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON3
    BUTTON4 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON4
    BUTTON5 = Coin_SWIG_Python.SoMouseButtonEvent_BUTTON5
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMouseButtonEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMouseButtonEvent
    __del__ = lambda self : None;
    def setButton(*args): return Coin_SWIG_Python.SoMouseButtonEvent_setButton(*args)
    def getButton(*args): return Coin_SWIG_Python.SoMouseButtonEvent_getButton(*args)
    isButtonPressEvent = staticmethod(Coin_SWIG_Python.SoMouseButtonEvent_isButtonPressEvent)
    isButtonReleaseEvent = staticmethod(Coin_SWIG_Python.SoMouseButtonEvent_isButtonReleaseEvent)
    initClass = staticmethod(Coin_SWIG_Python.SoMouseButtonEvent_initClass)
SoMouseButtonEvent_swigregister = Coin_SWIG_Python.SoMouseButtonEvent_swigregister
SoMouseButtonEvent_swigregister(SoMouseButtonEvent)
SoMouseButtonEvent_getClassTypeId = Coin_SWIG_Python.SoMouseButtonEvent_getClassTypeId
SoMouseButtonEvent_isButtonPressEvent = Coin_SWIG_Python.SoMouseButtonEvent_isButtonPressEvent
SoMouseButtonEvent_isButtonReleaseEvent = Coin_SWIG_Python.SoMouseButtonEvent_isButtonReleaseEvent
SoMouseButtonEvent_initClass = Coin_SWIG_Python.SoMouseButtonEvent_initClass

class SoSpaceballButtonEvent(SoButtonEvent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSpaceballButtonEvent_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSpaceballButtonEvent_getTypeId(*args)
    ANY = Coin_SWIG_Python.SoSpaceballButtonEvent_ANY
    BUTTON1 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON1
    BUTTON2 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON2
    BUTTON3 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON3
    BUTTON4 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON4
    BUTTON5 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON5
    BUTTON6 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON6
    BUTTON7 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON7
    BUTTON8 = Coin_SWIG_Python.SoSpaceballButtonEvent_BUTTON8
    PICK = Coin_SWIG_Python.SoSpaceballButtonEvent_PICK
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSpaceballButtonEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpaceballButtonEvent
    __del__ = lambda self : None;
    def setButton(*args): return Coin_SWIG_Python.SoSpaceballButtonEvent_setButton(*args)
    def getButton(*args): return Coin_SWIG_Python.SoSpaceballButtonEvent_getButton(*args)
    isButtonPressEvent = staticmethod(Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonPressEvent)
    isButtonReleaseEvent = staticmethod(Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonReleaseEvent)
    initClass = staticmethod(Coin_SWIG_Python.SoSpaceballButtonEvent_initClass)
SoSpaceballButtonEvent_swigregister = Coin_SWIG_Python.SoSpaceballButtonEvent_swigregister
SoSpaceballButtonEvent_swigregister(SoSpaceballButtonEvent)
SoSpaceballButtonEvent_getClassTypeId = Coin_SWIG_Python.SoSpaceballButtonEvent_getClassTypeId
SoSpaceballButtonEvent_isButtonPressEvent = Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonPressEvent
SoSpaceballButtonEvent_isButtonReleaseEvent = Coin_SWIG_Python.SoSpaceballButtonEvent_isButtonReleaseEvent
SoSpaceballButtonEvent_initClass = Coin_SWIG_Python.SoSpaceballButtonEvent_initClass

class SbBox2s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox2s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2s
    __del__ = lambda self : None;
    def getMin(*args): return Coin_SWIG_Python.SbBox2s_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox2s_getMax(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox2s_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox2s_intersect(*args)
    def setBounds(*args): return Coin_SWIG_Python.SbBox2s_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox2s_getBounds(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox2s_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox2s_getSize(*args)
    def getAspectRatio(*args): return Coin_SWIG_Python.SbBox2s_getAspectRatio(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox2s_makeEmpty(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbBox2s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbBox2s___ne__(*args)
SbBox2s_swigregister = Coin_SWIG_Python.SbBox2s_swigregister
SbBox2s_swigregister(SbBox2s)

class SoSFBox2s(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox2s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox2s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox2s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox2s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox2s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox2s_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox2s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox2s___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox2s_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox2s_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox2s_getValue(*args)
SoSFBox2s_swigregister = Coin_SWIG_Python.SoSFBox2s_swigregister
SoSFBox2s_swigregister(SoSFBox2s)
SoSFBox2s_createInstance = Coin_SWIG_Python.SoSFBox2s_createInstance
SoSFBox2s_getClassTypeId = Coin_SWIG_Python.SoSFBox2s_getClassTypeId
SoSFBox2s_initClass = Coin_SWIG_Python.SoSFBox2s_initClass

class SbVec2i32(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec2i32(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec2i32_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec2i32_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec2i32_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec2i32_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec2i32___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec2i32___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec2i32___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec2i32___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec2i32___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2i32
    __del__ = lambda self : None;
SbVec2i32_swigregister = Coin_SWIG_Python.SbVec2i32_swigregister
SbVec2i32_swigregister(SbVec2i32)

class SbBox2i32(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox2i32(*args)
        try: self.this.append(this)
        except: self.this = this
    def setBounds(*args): return Coin_SWIG_Python.SbBox2i32_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox2i32_getBounds(*args)
    def getMin(*args): return Coin_SWIG_Python.SbBox2i32_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox2i32_getMax(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox2i32_extendBy(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox2i32_makeEmpty(*args)
    def isEmpty(*args): return Coin_SWIG_Python.SbBox2i32_isEmpty(*args)
    def hasArea(*args): return Coin_SWIG_Python.SbBox2i32_hasArea(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox2i32_intersect(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbBox2i32_getCenter(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox2i32_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox2i32_getSize(*args)
    def getAspectRatio(*args): return Coin_SWIG_Python.SbBox2i32_getAspectRatio(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2i32
    __del__ = lambda self : None;
SbBox2i32_swigregister = Coin_SWIG_Python.SbBox2i32_swigregister
SbBox2i32_swigregister(SbBox2i32)

class SoSFBox2i32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox2i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox2i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox2i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox2i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox2i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox2i32_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox2i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox2i32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox2i32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox2i32_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox2i32_getValue(*args)
SoSFBox2i32_swigregister = Coin_SWIG_Python.SoSFBox2i32_swigregister
SoSFBox2i32_swigregister(SoSFBox2i32)
SoSFBox2i32_createInstance = Coin_SWIG_Python.SoSFBox2i32_createInstance
SoSFBox2i32_getClassTypeId = Coin_SWIG_Python.SoSFBox2i32_getClassTypeId
SoSFBox2i32_initClass = Coin_SWIG_Python.SoSFBox2i32_initClass

class SbBox2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2f
    __del__ = lambda self : None;
    def getMin(*args): return Coin_SWIG_Python.SbBox2f_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox2f_getMax(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbBox2f_getCenter(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox2f_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox2f_intersect(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbBox2f_getClosestPoint(*args)
    def setBounds(*args): return Coin_SWIG_Python.SbBox2f_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox2f_getBounds(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox2f_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox2f_getSize(*args)
    def getAspectRatio(*args): return Coin_SWIG_Python.SbBox2f_getAspectRatio(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox2f_makeEmpty(*args)
    def isEmpty(*args): return Coin_SWIG_Python.SbBox2f_isEmpty(*args)
    def hasArea(*args): return Coin_SWIG_Python.SbBox2f_hasArea(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbBox2f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbBox2f___ne__(*args)
SbBox2f_swigregister = Coin_SWIG_Python.SbBox2f_swigregister
SbBox2f_swigregister(SbBox2f)

class SoSFBox2f(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox2f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox2f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox2f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox2f_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox2f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox2f___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox2f_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox2f_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox2f_getValue(*args)
SoSFBox2f_swigregister = Coin_SWIG_Python.SoSFBox2f_swigregister
SoSFBox2f_swigregister(SoSFBox2f)
SoSFBox2f_createInstance = Coin_SWIG_Python.SoSFBox2f_createInstance
SoSFBox2f_getClassTypeId = Coin_SWIG_Python.SoSFBox2f_getClassTypeId
SoSFBox2f_initClass = Coin_SWIG_Python.SoSFBox2f_initClass

class SbVec2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return Coin_SWIG_Python.SbVec2d_dot(*args)
    def equals(*args): return Coin_SWIG_Python.SbVec2d_equals(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec2d_getValue(*args)
    def length(*args): return Coin_SWIG_Python.SbVec2d_length(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec2d_negate(*args)
    def normalize(*args): return Coin_SWIG_Python.SbVec2d_normalize(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec2d_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec2d___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec2d___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec2d___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec2d___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec2d___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec2d_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec2d___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec2d___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec2d___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec2d___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec2d___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec2d___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec2d___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec2d___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec2d___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2d
    __del__ = lambda self : None;
SbVec2d_swigregister = Coin_SWIG_Python.SbVec2d_swigregister
SbVec2d_swigregister(SbVec2d)

class SbBox2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox2d
    __del__ = lambda self : None;
    def getMin(*args): return Coin_SWIG_Python.SbBox2d_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox2d_getMax(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbBox2d_getCenter(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox2d_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox2d_intersect(*args)
    def findIntersection(*args): return Coin_SWIG_Python.SbBox2d_findIntersection(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbBox2d_getClosestPoint(*args)
    def setBounds(*args): return Coin_SWIG_Python.SbBox2d_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox2d_getBounds(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox2d_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox2d_getSize(*args)
    def getAspectRatio(*args): return Coin_SWIG_Python.SbBox2d_getAspectRatio(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox2d_makeEmpty(*args)
    def isEmpty(*args): return Coin_SWIG_Python.SbBox2d_isEmpty(*args)
    def hasArea(*args): return Coin_SWIG_Python.SbBox2d_hasArea(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbBox2d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbBox2d___ne__(*args)
    def setValue(*args): return Coin_SWIG_Python.SbBox2d_setValue(*args)
SbBox2d_swigregister = Coin_SWIG_Python.SbBox2d_swigregister
SbBox2d_swigregister(SbBox2d)

class SoSFBox2d(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox2d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox2d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox2d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox2d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox2d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox2d_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox2d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox2d___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox2d_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox2d_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox2d_getValue(*args)
SoSFBox2d_swigregister = Coin_SWIG_Python.SoSFBox2d_swigregister
SoSFBox2d_swigregister(SoSFBox2d)
SoSFBox2d_createInstance = Coin_SWIG_Python.SoSFBox2d_createInstance
SoSFBox2d_getClassTypeId = Coin_SWIG_Python.SoSFBox2d_getClassTypeId
SoSFBox2d_initClass = Coin_SWIG_Python.SoSFBox2d_initClass

class SbBox3s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox3s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3s
    __del__ = lambda self : None;
    def getMin(*args): return Coin_SWIG_Python.SbBox3s_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox3s_getMax(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox3s_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox3s_intersect(*args)
    def setBounds(*args): return Coin_SWIG_Python.SbBox3s_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox3s_getBounds(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox3s_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox3s_getSize(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox3s_makeEmpty(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbBox3s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbBox3s___ne__(*args)
SbBox3s_swigregister = Coin_SWIG_Python.SbBox3s_swigregister
SbBox3s_swigregister(SbBox3s)

class SoSFBox3s(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox3s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox3s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox3s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox3s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox3s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox3s_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox3s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox3s___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox3s_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox3s_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox3s_getValue(*args)
SoSFBox3s_swigregister = Coin_SWIG_Python.SoSFBox3s_swigregister
SoSFBox3s_swigregister(SoSFBox3s)
SoSFBox3s_createInstance = Coin_SWIG_Python.SoSFBox3s_createInstance
SoSFBox3s_getClassTypeId = Coin_SWIG_Python.SoSFBox3s_getClassTypeId
SoSFBox3s_initClass = Coin_SWIG_Python.SoSFBox3s_initClass

class SbVec3i32(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec3i32(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec3i32_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec3i32_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec3i32_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec3i32_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec3i32___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec3i32___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec3i32___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec3i32___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec3i32___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3i32
    __del__ = lambda self : None;
SbVec3i32_swigregister = Coin_SWIG_Python.SbVec3i32_swigregister
SbVec3i32_swigregister(SbVec3i32)

class SbBox3i32(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox3i32(*args)
        try: self.this.append(this)
        except: self.this = this
    def setBounds(*args): return Coin_SWIG_Python.SbBox3i32_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox3i32_getBounds(*args)
    def getMin(*args): return Coin_SWIG_Python.SbBox3i32_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox3i32_getMax(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox3i32_extendBy(*args)
    def transform(*args): return Coin_SWIG_Python.SbBox3i32_transform(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox3i32_makeEmpty(*args)
    def isEmpty(*args): return Coin_SWIG_Python.SbBox3i32_isEmpty(*args)
    def hasVolume(*args): return Coin_SWIG_Python.SbBox3i32_hasVolume(*args)
    def getVolume(*args): return Coin_SWIG_Python.SbBox3i32_getVolume(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox3i32_intersect(*args)
    def outside(*args): return Coin_SWIG_Python.SbBox3i32_outside(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbBox3i32_getClosestPoint(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbBox3i32_getCenter(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox3i32_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox3i32_getSize(*args)
    def getSpan(*args): return Coin_SWIG_Python.SbBox3i32_getSpan(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3i32
    __del__ = lambda self : None;
SbBox3i32_swigregister = Coin_SWIG_Python.SbBox3i32_swigregister
SbBox3i32_swigregister(SbBox3i32)

class SoSFBox3i32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox3i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox3i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox3i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox3i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox3i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox3i32_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox3i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox3i32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox3i32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox3i32_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox3i32_getValue(*args)
SoSFBox3i32_swigregister = Coin_SWIG_Python.SoSFBox3i32_swigregister
SoSFBox3i32_swigregister(SoSFBox3i32)
SoSFBox3i32_createInstance = Coin_SWIG_Python.SoSFBox3i32_createInstance
SoSFBox3i32_getClassTypeId = Coin_SWIG_Python.SoSFBox3i32_getClassTypeId
SoSFBox3i32_initClass = Coin_SWIG_Python.SoSFBox3i32_initClass

class SoSFBox3f(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox3f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox3f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox3f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox3f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox3f_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox3f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox3f___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox3f_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox3f_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox3f_getValue(*args)
SoSFBox3f_swigregister = Coin_SWIG_Python.SoSFBox3f_swigregister
SoSFBox3f_swigregister(SoSFBox3f)
SoSFBox3f_createInstance = Coin_SWIG_Python.SoSFBox3f_createInstance
SoSFBox3f_getClassTypeId = Coin_SWIG_Python.SoSFBox3f_getClassTypeId
SoSFBox3f_initClass = Coin_SWIG_Python.SoSFBox3f_initClass

class SbBox3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBox3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def setBounds(*args): return Coin_SWIG_Python.SbBox3d_setBounds(*args)
    def getBounds(*args): return Coin_SWIG_Python.SbBox3d_getBounds(*args)
    def getMin(*args): return Coin_SWIG_Python.SbBox3d_getMin(*args)
    def getMax(*args): return Coin_SWIG_Python.SbBox3d_getMax(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbBox3d_extendBy(*args)
    def transform(*args): return Coin_SWIG_Python.SbBox3d_transform(*args)
    def makeEmpty(*args): return Coin_SWIG_Python.SbBox3d_makeEmpty(*args)
    def isEmpty(*args): return Coin_SWIG_Python.SbBox3d_isEmpty(*args)
    def hasVolume(*args): return Coin_SWIG_Python.SbBox3d_hasVolume(*args)
    def getVolume(*args): return Coin_SWIG_Python.SbBox3d_getVolume(*args)
    def intersect(*args): return Coin_SWIG_Python.SbBox3d_intersect(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbBox3d_getClosestPoint(*args)
    def outside(*args): return Coin_SWIG_Python.SbBox3d_outside(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbBox3d_getCenter(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SbBox3d_getOrigin(*args)
    def getSize(*args): return Coin_SWIG_Python.SbBox3d_getSize(*args)
    def getSpan(*args): return Coin_SWIG_Python.SbBox3d_getSpan(*args)
    def output(*args): return Coin_SWIG_Python.SbBox3d_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBox3d
    __del__ = lambda self : None;
SbBox3d_swigregister = Coin_SWIG_Python.SbBox3d_swigregister
SbBox3d_swigregister(SbBox3d)

class SoSFBox3d(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFBox3d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFBox3d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFBox3d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFBox3d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFBox3d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFBox3d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFBox3d_isSame(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFBox3d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFBox3d___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFBox3d_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFBox3d_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFBox3d_getValue(*args)
SoSFBox3d_swigregister = Coin_SWIG_Python.SoSFBox3d_swigregister
SoSFBox3d_swigregister(SoSFBox3d)
SoSFBox3d_createInstance = Coin_SWIG_Python.SoSFBox3d_createInstance
SoSFBox3d_getClassTypeId = Coin_SWIG_Python.SoSFBox3d_getClassTypeId
SoSFBox3d_initClass = Coin_SWIG_Python.SoSFBox3d_initClass

class SoSFColorRGBA(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFColorRGBA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFColorRGBA
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFColorRGBA_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFColorRGBA_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFColorRGBA_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFColorRGBA_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFColorRGBA_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFColorRGBA_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFColorRGBA___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFColorRGBA___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFColorRGBA_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFColorRGBA_setValue(*args)
    def setHSVValue(*args): return Coin_SWIG_Python.SoSFColorRGBA_setHSVValue(*args)
SoSFColorRGBA_swigregister = Coin_SWIG_Python.SoSFColorRGBA_swigregister
SoSFColorRGBA_swigregister(SoSFColorRGBA)
SoSFColorRGBA_createInstance = Coin_SWIG_Python.SoSFColorRGBA_createInstance
SoSFColorRGBA_getClassTypeId = Coin_SWIG_Python.SoSFColorRGBA_getClassTypeId
SoSFColorRGBA_initClass = Coin_SWIG_Python.SoSFColorRGBA_initClass

class SoSFDouble(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFDouble
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFDouble_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFDouble_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFDouble_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFDouble_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFDouble_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFDouble_getValue(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFDouble_setValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFDouble___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFDouble___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFDouble_initClass)
SoSFDouble_swigregister = Coin_SWIG_Python.SoSFDouble_swigregister
SoSFDouble_swigregister(SoSFDouble)
SoSFDouble_createInstance = Coin_SWIG_Python.SoSFDouble_createInstance
SoSFDouble_getClassTypeId = Coin_SWIG_Python.SoSFDouble_getClassTypeId
SoSFDouble_initClass = Coin_SWIG_Python.SoSFDouble_initClass

class SoSFEngine(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFEngine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFEngine
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFEngine_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFEngine_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFEngine_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFEngine_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFEngine_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFEngine_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFEngine___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFEngine___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFEngine_initClass)
    def fixCopy(*args): return Coin_SWIG_Python.SoSFEngine_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoSFEngine_referencesCopy(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFEngine_setValue(*args)
SoSFEngine_swigregister = Coin_SWIG_Python.SoSFEngine_swigregister
SoSFEngine_swigregister(SoSFEngine)
SoSFEngine_createInstance = Coin_SWIG_Python.SoSFEngine_createInstance
SoSFEngine_getClassTypeId = Coin_SWIG_Python.SoSFEngine_getClassTypeId
SoSFEngine_initClass = Coin_SWIG_Python.SoSFEngine_initClass

class SoSFImage3(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFImage3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFImage3
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFImage3_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFImage3_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFImage3_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFImage3_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFImage3_isSame(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFImage3_initClass)
    def getValue(*args): return Coin_SWIG_Python.SoSFImage3_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFImage3___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFImage3___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoSFImage3_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoSFImage3_finishEditing(*args)
    def setValue(*args): return Coin_SWIG_Python.SoSFImage3_setValue(*args)
SoSFImage3_swigregister = Coin_SWIG_Python.SoSFImage3_swigregister
SoSFImage3_swigregister(SoSFImage3)
SoSFImage3_createInstance = Coin_SWIG_Python.SoSFImage3_createInstance
SoSFImage3_getClassTypeId = Coin_SWIG_Python.SoSFImage3_getClassTypeId
SoSFImage3_initClass = Coin_SWIG_Python.SoSFImage3_initClass

class SoSFMatrix(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFMatrix
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFMatrix_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFMatrix_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFMatrix_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFMatrix_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFMatrix_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFMatrix_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFMatrix___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFMatrix___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFMatrix_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFMatrix_setValue(*args)
SoSFMatrix_swigregister = Coin_SWIG_Python.SoSFMatrix_swigregister
SoSFMatrix_swigregister(SoSFMatrix)
SoSFMatrix_createInstance = Coin_SWIG_Python.SoSFMatrix_createInstance
SoSFMatrix_getClassTypeId = Coin_SWIG_Python.SoSFMatrix_getClassTypeId
SoSFMatrix_initClass = Coin_SWIG_Python.SoSFMatrix_initClass

class SoSFPlane(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFPlane
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFPlane_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFPlane_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFPlane_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFPlane_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFPlane_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFPlane_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFPlane___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFPlane___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFPlane_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFPlane_setValue(*args)
SoSFPlane_swigregister = Coin_SWIG_Python.SoSFPlane_swigregister
SoSFPlane_swigregister(SoSFPlane)
SoSFPlane_createInstance = Coin_SWIG_Python.SoSFPlane_createInstance
SoSFPlane_getClassTypeId = Coin_SWIG_Python.SoSFPlane_getClassTypeId
SoSFPlane_initClass = Coin_SWIG_Python.SoSFPlane_initClass

class SoSFUInt32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFUInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFUInt32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFUInt32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFUInt32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFUInt32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFUInt32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFUInt32_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFUInt32_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFUInt32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFUInt32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFUInt32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFUInt32_setValue(*args)
SoSFUInt32_swigregister = Coin_SWIG_Python.SoSFUInt32_swigregister
SoSFUInt32_swigregister(SoSFUInt32)
SoSFUInt32_createInstance = Coin_SWIG_Python.SoSFUInt32_createInstance
SoSFUInt32_getClassTypeId = Coin_SWIG_Python.SoSFUInt32_getClassTypeId
SoSFUInt32_initClass = Coin_SWIG_Python.SoSFUInt32_initClass

class SbVec2b(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec2b(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec2b_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec2b_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec2b_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec2b_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec2b___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec2b___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec2b___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec2b___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec2b___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec2b
    __del__ = lambda self : None;
SbVec2b_swigregister = Coin_SWIG_Python.SbVec2b_swigregister
SbVec2b_swigregister(SbVec2b)

class SoSFVec2b(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec2b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2b
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec2b_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec2b_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec2b_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec2b_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec2b_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec2b_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec2b___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec2b___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec2b_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec2b_setValue(*args)
SoSFVec2b_swigregister = Coin_SWIG_Python.SoSFVec2b_swigregister
SoSFVec2b_swigregister(SoSFVec2b)
SoSFVec2b_createInstance = Coin_SWIG_Python.SoSFVec2b_createInstance
SoSFVec2b_getClassTypeId = Coin_SWIG_Python.SoSFVec2b_getClassTypeId
SoSFVec2b_initClass = Coin_SWIG_Python.SoSFVec2b_initClass

class SoSFVec2s(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec2s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec2s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec2s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec2s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec2s_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec2s_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec2s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec2s___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec2s_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec2s_setValue(*args)
SoSFVec2s_swigregister = Coin_SWIG_Python.SoSFVec2s_swigregister
SoSFVec2s_swigregister(SoSFVec2s)
SoSFVec2s_createInstance = Coin_SWIG_Python.SoSFVec2s_createInstance
SoSFVec2s_getClassTypeId = Coin_SWIG_Python.SoSFVec2s_getClassTypeId
SoSFVec2s_initClass = Coin_SWIG_Python.SoSFVec2s_initClass

class SoSFVec2i32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec2i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec2i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec2i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec2i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec2i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec2i32_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec2i32_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec2i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec2i32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec2i32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec2i32_setValue(*args)
SoSFVec2i32_swigregister = Coin_SWIG_Python.SoSFVec2i32_swigregister
SoSFVec2i32_swigregister(SoSFVec2i32)
SoSFVec2i32_createInstance = Coin_SWIG_Python.SoSFVec2i32_createInstance
SoSFVec2i32_getClassTypeId = Coin_SWIG_Python.SoSFVec2i32_getClassTypeId
SoSFVec2i32_initClass = Coin_SWIG_Python.SoSFVec2i32_initClass

class SoSFVec2f(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec2f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec2f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec2f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec2f_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec2f_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec2f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec2f___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec2f_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec2f_setValue(*args)
SoSFVec2f_swigregister = Coin_SWIG_Python.SoSFVec2f_swigregister
SoSFVec2f_swigregister(SoSFVec2f)
SoSFVec2f_createInstance = Coin_SWIG_Python.SoSFVec2f_createInstance
SoSFVec2f_getClassTypeId = Coin_SWIG_Python.SoSFVec2f_getClassTypeId
SoSFVec2f_initClass = Coin_SWIG_Python.SoSFVec2f_initClass

class SoSFVec2d(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec2d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec2d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec2d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec2d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec2d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec2d_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec2d_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec2d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec2d___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec2d_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec2d_setValue(*args)
SoSFVec2d_swigregister = Coin_SWIG_Python.SoSFVec2d_swigregister
SoSFVec2d_swigregister(SoSFVec2d)
SoSFVec2d_createInstance = Coin_SWIG_Python.SoSFVec2d_createInstance
SoSFVec2d_getClassTypeId = Coin_SWIG_Python.SoSFVec2d_getClassTypeId
SoSFVec2d_initClass = Coin_SWIG_Python.SoSFVec2d_initClass

class SbVec3b(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec3b(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec3b_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec3b_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec3b_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec3b_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec3b___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec3b___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec3b___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec3b___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec3b___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3b
    __del__ = lambda self : None;
SbVec3b_swigregister = Coin_SWIG_Python.SbVec3b_swigregister
SbVec3b_swigregister(SbVec3b)

class SoSFVec3b(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec3b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3b
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec3b_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec3b_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec3b_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec3b_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec3b_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec3b_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec3b___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec3b___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec3b_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec3b_setValue(*args)
SoSFVec3b_swigregister = Coin_SWIG_Python.SoSFVec3b_swigregister
SoSFVec3b_swigregister(SoSFVec3b)
SoSFVec3b_createInstance = Coin_SWIG_Python.SoSFVec3b_createInstance
SoSFVec3b_getClassTypeId = Coin_SWIG_Python.SoSFVec3b_getClassTypeId
SoSFVec3b_initClass = Coin_SWIG_Python.SoSFVec3b_initClass

class SoSFVec3s(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec3s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec3s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec3s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec3s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec3s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec3s_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec3s_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec3s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec3s___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec3s_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec3s_setValue(*args)
SoSFVec3s_swigregister = Coin_SWIG_Python.SoSFVec3s_swigregister
SoSFVec3s_swigregister(SoSFVec3s)
SoSFVec3s_createInstance = Coin_SWIG_Python.SoSFVec3s_createInstance
SoSFVec3s_getClassTypeId = Coin_SWIG_Python.SoSFVec3s_getClassTypeId
SoSFVec3s_initClass = Coin_SWIG_Python.SoSFVec3s_initClass

class SoSFVec3i32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec3i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec3i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec3i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec3i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec3i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec3i32_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec3i32_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec3i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec3i32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec3i32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec3i32_setValue(*args)
SoSFVec3i32_swigregister = Coin_SWIG_Python.SoSFVec3i32_swigregister
SoSFVec3i32_swigregister(SoSFVec3i32)
SoSFVec3i32_createInstance = Coin_SWIG_Python.SoSFVec3i32_createInstance
SoSFVec3i32_getClassTypeId = Coin_SWIG_Python.SoSFVec3i32_getClassTypeId
SoSFVec3i32_initClass = Coin_SWIG_Python.SoSFVec3i32_initClass

class SoSFVec3d(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec3d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec3d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec3d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec3d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec3d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec3d_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec3d_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec3d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec3d___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec3d_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec3d_setValue(*args)
SoSFVec3d_swigregister = Coin_SWIG_Python.SoSFVec3d_swigregister
SoSFVec3d_swigregister(SoSFVec3d)
SoSFVec3d_createInstance = Coin_SWIG_Python.SoSFVec3d_createInstance
SoSFVec3d_getClassTypeId = Coin_SWIG_Python.SoSFVec3d_getClassTypeId
SoSFVec3d_initClass = Coin_SWIG_Python.SoSFVec3d_initClass

class SbVec4b(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4b(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec4b_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4b_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec4b_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4b_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4b___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4b___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4b___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4b___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4b___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4b
    __del__ = lambda self : None;
SbVec4b_swigregister = Coin_SWIG_Python.SbVec4b_swigregister
SbVec4b_swigregister(SbVec4b)

class SoSFVec4b(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4b
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4b_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4b_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4b_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4b_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4b_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4b_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4b___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4b___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4b_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4b_setValue(*args)
SoSFVec4b_swigregister = Coin_SWIG_Python.SoSFVec4b_swigregister
SoSFVec4b_swigregister(SoSFVec4b)
SoSFVec4b_createInstance = Coin_SWIG_Python.SoSFVec4b_createInstance
SoSFVec4b_getClassTypeId = Coin_SWIG_Python.SoSFVec4b_getClassTypeId
SoSFVec4b_initClass = Coin_SWIG_Python.SoSFVec4b_initClass

class SbVec4s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4s(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec4s_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4s_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec4s_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4s_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4s___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4s___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4s___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4s___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4s___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4s
    __del__ = lambda self : None;
SbVec4s_swigregister = Coin_SWIG_Python.SbVec4s_swigregister
SbVec4s_swigregister(SbVec4s)

class SoSFVec4s(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4s_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4s_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4s___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4s_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4s_setValue(*args)
SoSFVec4s_swigregister = Coin_SWIG_Python.SoSFVec4s_swigregister
SoSFVec4s_swigregister(SoSFVec4s)
SoSFVec4s_createInstance = Coin_SWIG_Python.SoSFVec4s_createInstance
SoSFVec4s_getClassTypeId = Coin_SWIG_Python.SoSFVec4s_getClassTypeId
SoSFVec4s_initClass = Coin_SWIG_Python.SoSFVec4s_initClass

class SbVec4i32(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4i32(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec4i32_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4i32_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec4i32_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4i32_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4i32___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4i32___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4i32___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4i32___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4i32___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4i32
    __del__ = lambda self : None;
SbVec4i32_swigregister = Coin_SWIG_Python.SbVec4i32_swigregister
SbVec4i32_swigregister(SbVec4i32)

class SoSFVec4i32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4i32_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4i32_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4i32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4i32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4i32_setValue(*args)
SoSFVec4i32_swigregister = Coin_SWIG_Python.SoSFVec4i32_swigregister
SoSFVec4i32_swigregister(SoSFVec4i32)
SoSFVec4i32_createInstance = Coin_SWIG_Python.SoSFVec4i32_createInstance
SoSFVec4i32_getClassTypeId = Coin_SWIG_Python.SoSFVec4i32_getClassTypeId
SoSFVec4i32_initClass = Coin_SWIG_Python.SoSFVec4i32_initClass

class SoSFVec4f(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4f
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4f_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4f_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4f_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4f_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4f_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4f___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4f___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4f_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4f_setValue(*args)
SoSFVec4f_swigregister = Coin_SWIG_Python.SoSFVec4f_swigregister
SoSFVec4f_swigregister(SoSFVec4f)
SoSFVec4f_createInstance = Coin_SWIG_Python.SoSFVec4f_createInstance
SoSFVec4f_getClassTypeId = Coin_SWIG_Python.SoSFVec4f_getClassTypeId
SoSFVec4f_initClass = Coin_SWIG_Python.SoSFVec4f_initClass

class SbVec4d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(*args): return Coin_SWIG_Python.SbVec4d_dot(*args)
    def equals(*args): return Coin_SWIG_Python.SbVec4d_equals(*args)
    def getReal(*args): return Coin_SWIG_Python.SbVec4d_getReal(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4d_getValue(*args)
    def length(*args): return Coin_SWIG_Python.SbVec4d_length(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4d_negate(*args)
    def normalize(*args): return Coin_SWIG_Python.SbVec4d_normalize(*args)
    def setValue(*args): return Coin_SWIG_Python.SbVec4d_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4d___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4d___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4d___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4d___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4d___neg__(*args)
    def output(*args): return Coin_SWIG_Python.SbVec4d_output(*args)
    def __add__(*args): return Coin_SWIG_Python.SbVec4d___add__(*args)
    def __sub__(*args): return Coin_SWIG_Python.SbVec4d___sub__(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbVec4d___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbVec4d___rmul__(*args)
    def __div__(*args): return Coin_SWIG_Python.SbVec4d___div__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbVec4d___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbVec4d___nq__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec4d___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec4d___setitem__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4d
    __del__ = lambda self : None;
SbVec4d_swigregister = Coin_SWIG_Python.SbVec4d_swigregister
SbVec4d_swigregister(SbVec4d)

class SoSFVec4d(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4d_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4d_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4d___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4d_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4d_setValue(*args)
SoSFVec4d_swigregister = Coin_SWIG_Python.SoSFVec4d_swigregister
SoSFVec4d_swigregister(SoSFVec4d)
SoSFVec4d_createInstance = Coin_SWIG_Python.SoSFVec4d_createInstance
SoSFVec4d_getClassTypeId = Coin_SWIG_Python.SoSFVec4d_getClassTypeId
SoSFVec4d_initClass = Coin_SWIG_Python.SoSFVec4d_initClass

class SbVec4ub(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4ub(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec4ub_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4ub_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec4ub_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4ub_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4ub___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4ub___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4ub___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4ub___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4ub___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4ub
    __del__ = lambda self : None;
SbVec4ub_swigregister = Coin_SWIG_Python.SbVec4ub_swigregister
SbVec4ub_swigregister(SbVec4ub)

class SoSFVec4ub(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4ub(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4ub
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4ub_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4ub_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4ub_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4ub_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4ub_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4ub_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4ub___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4ub___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4ub_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4ub_setValue(*args)
SoSFVec4ub_swigregister = Coin_SWIG_Python.SoSFVec4ub_swigregister
SoSFVec4ub_swigregister(SoSFVec4ub)
SoSFVec4ub_createInstance = Coin_SWIG_Python.SoSFVec4ub_createInstance
SoSFVec4ub_getClassTypeId = Coin_SWIG_Python.SoSFVec4ub_getClassTypeId
SoSFVec4ub_initClass = Coin_SWIG_Python.SoSFVec4ub_initClass

class SbVec4us(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4us(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec4us_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4us_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec4us_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4us_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4us___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4us___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4us___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4us___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4us___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4us
    __del__ = lambda self : None;
SbVec4us_swigregister = Coin_SWIG_Python.SbVec4us_swigregister
SbVec4us_swigregister(SbVec4us)

class SoSFVec4us(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4us(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4us
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4us_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4us_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4us_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4us_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4us_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4us_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4us___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4us___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4us_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4us_setValue(*args)
SoSFVec4us_swigregister = Coin_SWIG_Python.SoSFVec4us_swigregister
SoSFVec4us_swigregister(SoSFVec4us)
SoSFVec4us_createInstance = Coin_SWIG_Python.SoSFVec4us_createInstance
SoSFVec4us_getClassTypeId = Coin_SWIG_Python.SoSFVec4us_getClassTypeId
SoSFVec4us_initClass = Coin_SWIG_Python.SoSFVec4us_initClass

class SbVec4ui32(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec4ui32(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbVec4ui32_setValue(*args)
    def getValue(*args): return Coin_SWIG_Python.SbVec4ui32_getValue(*args)
    def dot(*args): return Coin_SWIG_Python.SbVec4ui32_dot(*args)
    def negate(*args): return Coin_SWIG_Python.SbVec4ui32_negate(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbVec4ui32___imul__(*args)
    def __idiv__(*args): return Coin_SWIG_Python.SbVec4ui32___idiv__(*args)
    def __iadd__(*args): return Coin_SWIG_Python.SbVec4ui32___iadd__(*args)
    def __isub__(*args): return Coin_SWIG_Python.SbVec4ui32___isub__(*args)
    def __neg__(*args): return Coin_SWIG_Python.SbVec4ui32___neg__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec4ui32
    __del__ = lambda self : None;
SbVec4ui32_swigregister = Coin_SWIG_Python.SbVec4ui32_swigregister
SbVec4ui32_swigregister(SbVec4ui32)

class SoSFVec4ui32(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSFVec4ui32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSFVec4ui32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoSFVec4ui32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSFVec4ui32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSFVec4ui32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoSFVec4ui32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoSFVec4ui32_isSame(*args)
    def getValue(*args): return Coin_SWIG_Python.SoSFVec4ui32_getValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoSFVec4ui32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoSFVec4ui32___ne__(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSFVec4ui32_initClass)
    def setValue(*args): return Coin_SWIG_Python.SoSFVec4ui32_setValue(*args)
SoSFVec4ui32_swigregister = Coin_SWIG_Python.SoSFVec4ui32_swigregister
SoSFVec4ui32_swigregister(SoSFVec4ui32)
SoSFVec4ui32_createInstance = Coin_SWIG_Python.SoSFVec4ui32_createInstance
SoSFVec4ui32_getClassTypeId = Coin_SWIG_Python.SoSFVec4ui32_getClassTypeId
SoSFVec4ui32_initClass = Coin_SWIG_Python.SoSFVec4ui32_initClass

class SoMFColor(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFColor
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFColor_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFColor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFColor_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFColor_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFColor_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFColor_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFColor___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFColor___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFColor_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFColor_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFColor_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFColor_initClass)
    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFColor_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFColor_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFColor_setValues,args)


    def setHSVValues(*args): return Coin_SWIG_Python.SoMFColor_setHSVValues(*args)
    def setHSVValue(*args): return Coin_SWIG_Python.SoMFColor_setHSVValue(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFColor_set1Value(*args)
    def set1HSVValue(*args): return Coin_SWIG_Python.SoMFColor_set1HSVValue(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFColor___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFColor___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFColor_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFColor_getValues(*args)
SoMFColor_swigregister = Coin_SWIG_Python.SoMFColor_swigregister
SoMFColor_swigregister(SoMFColor)
SoMFColor_createInstance = Coin_SWIG_Python.SoMFColor_createInstance
SoMFColor_getClassTypeId = Coin_SWIG_Python.SoMFColor_getClassTypeId
SoMFColor_initClass = Coin_SWIG_Python.SoMFColor_initClass

class SoMFColorRGBA(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFColorRGBA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFColorRGBA
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFColorRGBA_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFColorRGBA_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFColorRGBA_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFColorRGBA_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFColorRGBA_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFColorRGBA_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFColorRGBA_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFColorRGBA___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFColorRGBA___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFColorRGBA_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFColorRGBA_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFColorRGBA_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFColorRGBA_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFColorRGBA_setValues(*args)
    def setHSVValues(*args): return Coin_SWIG_Python.SoMFColorRGBA_setHSVValues(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFColorRGBA_setValue(*args)
    def setHSVValue(*args): return Coin_SWIG_Python.SoMFColorRGBA_setHSVValue(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFColorRGBA_set1Value(*args)
    def set1HSVValue(*args): return Coin_SWIG_Python.SoMFColorRGBA_set1HSVValue(*args)
SoMFColorRGBA_swigregister = Coin_SWIG_Python.SoMFColorRGBA_swigregister
SoMFColorRGBA_swigregister(SoMFColorRGBA)
SoMFColorRGBA_createInstance = Coin_SWIG_Python.SoMFColorRGBA_createInstance
SoMFColorRGBA_getClassTypeId = Coin_SWIG_Python.SoMFColorRGBA_getClassTypeId
SoMFColorRGBA_initClass = Coin_SWIG_Python.SoMFColorRGBA_initClass

class SoMFDouble(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFDouble
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFDouble_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFDouble_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFDouble_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFDouble_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFDouble_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFDouble_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFDouble_find(*args)
    def setValues(*args): return Coin_SWIG_Python.SoMFDouble_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFDouble_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFDouble_setValue(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFDouble___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFDouble___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFDouble_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFDouble_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFDouble_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFDouble_initClass)
SoMFDouble_swigregister = Coin_SWIG_Python.SoMFDouble_swigregister
SoMFDouble_swigregister(SoMFDouble)
SoMFDouble_createInstance = Coin_SWIG_Python.SoMFDouble_createInstance
SoMFDouble_getClassTypeId = Coin_SWIG_Python.SoMFDouble_getClassTypeId
SoMFDouble_initClass = Coin_SWIG_Python.SoMFDouble_initClass

class SoMFEngine(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFEngine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFEngine
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFEngine_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFEngine_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFEngine_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFEngine_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFEngine_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFEngine_find(*args)
    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFEngine_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFEngine_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFEngine_setValues,args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFEngine_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFEngine___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFEngine___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFEngine_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFEngine_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFEngine_initClass)
    def fixCopy(*args): return Coin_SWIG_Python.SoMFEngine_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoMFEngine_referencesCopy(*args)
    def deleteValues(*args): return Coin_SWIG_Python.SoMFEngine_deleteValues(*args)
    def insertSpace(*args): return Coin_SWIG_Python.SoMFEngine_insertSpace(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFEngine___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFEngine___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFEngine_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFEngine_getValues(*args)
SoMFEngine_swigregister = Coin_SWIG_Python.SoMFEngine_swigregister
SoMFEngine_swigregister(SoMFEngine)
SoMFEngine_createInstance = Coin_SWIG_Python.SoMFEngine_createInstance
SoMFEngine_getClassTypeId = Coin_SWIG_Python.SoMFEngine_getClassTypeId
SoMFEngine_initClass = Coin_SWIG_Python.SoMFEngine_initClass

class SoMFBitMask(SoMFEnum):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFBitMask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFBitMask
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFBitMask_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFBitMask_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFBitMask_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFBitMask_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFBitMask_isSame(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFBitMask_initClass)
SoMFBitMask_swigregister = Coin_SWIG_Python.SoMFBitMask_swigregister
SoMFBitMask_swigregister(SoMFBitMask)
SoMFBitMask_createInstance = Coin_SWIG_Python.SoMFBitMask_createInstance
SoMFBitMask_getClassTypeId = Coin_SWIG_Python.SoMFBitMask_getClassTypeId
SoMFBitMask_initClass = Coin_SWIG_Python.SoMFBitMask_initClass

class SoMFInt32(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFInt32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFInt32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFInt32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFInt32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFInt32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFInt32_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFInt32_find(*args)
    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFInt32):
             val = args[1].getValues()
             return _coin.SoMFInt32_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFInt32_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFInt32):
             val = args[2].getValues()
             return _coin.SoMFInt32_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFInt32_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFInt32_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFInt32_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFInt32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFInt32___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFInt32_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFInt32_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFInt32_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFInt32_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFInt32___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFInt32___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFInt32_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFInt32_getValues(*args)
SoMFInt32_swigregister = Coin_SWIG_Python.SoMFInt32_swigregister
SoMFInt32_swigregister(SoMFInt32)
SoMFInt32_createInstance = Coin_SWIG_Python.SoMFInt32_createInstance
SoMFInt32_getClassTypeId = Coin_SWIG_Python.SoMFInt32_getClassTypeId
SoMFInt32_initClass = Coin_SWIG_Python.SoMFInt32_initClass

class SoMFNode(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFNode
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFNode_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFNode_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFNode_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFNode_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFNode_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFNode_find(*args)
    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFNode_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFNode_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFNode_setValues,args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFNode_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFNode___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFNode___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFNode_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFNode_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFNode_initClass)
    def fixCopy(*args): return Coin_SWIG_Python.SoMFNode_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoMFNode_referencesCopy(*args)
    def addNode(*args): return Coin_SWIG_Python.SoMFNode_addNode(*args)
    def insertNode(*args): return Coin_SWIG_Python.SoMFNode_insertNode(*args)
    def getNode(*args): return Coin_SWIG_Python.SoMFNode_getNode(*args)
    def findNode(*args): return Coin_SWIG_Python.SoMFNode_findNode(*args)
    def getNumNodes(*args): return Coin_SWIG_Python.SoMFNode_getNumNodes(*args)
    def removeNode(*args): return Coin_SWIG_Python.SoMFNode_removeNode(*args)
    def removeAllNodes(*args): return Coin_SWIG_Python.SoMFNode_removeAllNodes(*args)
    def replaceNode(*args): return Coin_SWIG_Python.SoMFNode_replaceNode(*args)
    def deleteValues(*args): return Coin_SWIG_Python.SoMFNode_deleteValues(*args)
    def insertSpace(*args): return Coin_SWIG_Python.SoMFNode_insertSpace(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFNode___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFNode___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFNode_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFNode_getValues(*args)
SoMFNode_swigregister = Coin_SWIG_Python.SoMFNode_swigregister
SoMFNode_swigregister(SoMFNode)
SoMFNode_createInstance = Coin_SWIG_Python.SoMFNode_createInstance
SoMFNode_getClassTypeId = Coin_SWIG_Python.SoMFNode_getClassTypeId
SoMFNode_initClass = Coin_SWIG_Python.SoMFNode_initClass

class SoMFPath(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFPath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFPath
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFPath_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFPath_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFPath_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFPath_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFPath_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFPath_find(*args)
    def setValues(*args):
       if len(args) == 2:
         return _coin.SoMFPath_setValues(args[0], 0, len(args[1]), args[1])
       elif len(args) == 3:
         return _coin.SoMFPath_setValues(args[0], args[1], len(args[2]), args[2])
       return apply(_coin.SoMFPath_setValues,args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFPath_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFPath___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFPath___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFPath_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFPath_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFPath_initClass)
    def notify(*args): return Coin_SWIG_Python.SoMFPath_notify(*args)
    def fixCopy(*args): return Coin_SWIG_Python.SoMFPath_fixCopy(*args)
    def referencesCopy(*args): return Coin_SWIG_Python.SoMFPath_referencesCopy(*args)
    def deleteValues(*args): return Coin_SWIG_Python.SoMFPath_deleteValues(*args)
    def insertSpace(*args): return Coin_SWIG_Python.SoMFPath_insertSpace(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFPath___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFPath___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFPath_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFPath_getValues(*args)
SoMFPath_swigregister = Coin_SWIG_Python.SoMFPath_swigregister
SoMFPath_swigregister(SoMFPath)
SoMFPath_createInstance = Coin_SWIG_Python.SoMFPath_createInstance
SoMFPath_getClassTypeId = Coin_SWIG_Python.SoMFPath_getClassTypeId
SoMFPath_initClass = Coin_SWIG_Python.SoMFPath_initClass

class SoMFPlane(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFPlane
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFPlane_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFPlane_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFPlane_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFPlane_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFPlane_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFPlane_find(*args)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFPlane_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFPlane_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFPlane_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFPlane_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFPlane___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFPlane___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFPlane_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFPlane_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFPlane_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFPlane___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFPlane___setitem__(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFPlane_getValues(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFPlane_setValue(*args)
SoMFPlane_swigregister = Coin_SWIG_Python.SoMFPlane_swigregister
SoMFPlane_swigregister(SoMFPlane)
SoMFPlane_createInstance = Coin_SWIG_Python.SoMFPlane_createInstance
SoMFPlane_getClassTypeId = Coin_SWIG_Python.SoMFPlane_getClassTypeId
SoMFPlane_initClass = Coin_SWIG_Python.SoMFPlane_initClass

class SoMFShort(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFShort
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFShort_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFShort_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFShort_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFShort_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFShort_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFShort_find(*args)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFShort_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFShort_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFShort_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFShort_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFShort___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFShort___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFShort_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFShort_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFShort_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFShort_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFShort___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFShort___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFShort_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFShort_getValues(*args)
SoMFShort_swigregister = Coin_SWIG_Python.SoMFShort_swigregister
SoMFShort_swigregister(SoMFShort)
SoMFShort_createInstance = Coin_SWIG_Python.SoMFShort_createInstance
SoMFShort_getClassTypeId = Coin_SWIG_Python.SoMFShort_getClassTypeId
SoMFShort_initClass = Coin_SWIG_Python.SoMFShort_initClass

class SoMFTime(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFTime
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFTime_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFTime_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFTime_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFTime_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFTime_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFTime_find(*args)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFTime_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFTime_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFTime_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFTime_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFTime___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFTime___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFTime_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFTime_finishEditing(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFTime_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFTime___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFTime___setitem__(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFTime_getValues(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFTime_setValue(*args)
SoMFTime_swigregister = Coin_SWIG_Python.SoMFTime_swigregister
SoMFTime_swigregister(SoMFTime)
SoMFTime_createInstance = Coin_SWIG_Python.SoMFTime_createInstance
SoMFTime_getClassTypeId = Coin_SWIG_Python.SoMFTime_getClassTypeId
SoMFTime_initClass = Coin_SWIG_Python.SoMFTime_initClass

class SoMFUInt32(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFUInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFUInt32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFUInt32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFUInt32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFUInt32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFUInt32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFUInt32_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFUInt32_find(*args)
    def setValues(*args):
       if len(args) == 2:
          if isinstance(args[1], SoMFUInt32):
             val = args[1].getValues()
             return _coin.SoMFUInt32_setValues(args[0],0,len(val),val)
          else:
             return _coin.SoMFUInt32_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          if isinstance(args[2], SoMFUInt32):
             val = args[2].getValues()
             return _coin.SoMFUInt32_setValues(args[0],args[1],len(val),val)
          else:
             return _coin.SoMFUInt32_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFUInt32_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFUInt32_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFUInt32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFUInt32___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFUInt32_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFUInt32_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFUInt32_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFUInt32_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFUInt32___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFUInt32___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFUInt32_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFUInt32_getValues(*args)
SoMFUInt32_swigregister = Coin_SWIG_Python.SoMFUInt32_swigregister
SoMFUInt32_swigregister(SoMFUInt32)
SoMFUInt32_createInstance = Coin_SWIG_Python.SoMFUInt32_createInstance
SoMFUInt32_getClassTypeId = Coin_SWIG_Python.SoMFUInt32_getClassTypeId
SoMFUInt32_initClass = Coin_SWIG_Python.SoMFUInt32_initClass

class SoMFUShort(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFUShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFUShort
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFUShort_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFUShort_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFUShort_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFUShort_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFUShort_isSame(*args)
    def find(*args): return Coin_SWIG_Python.SoMFUShort_find(*args)
    def setValues(*args):
       if len(args) == 2:
          return _coin.SoMFUShort_setValues(args[0],0,len(args[1]),args[1])
       elif len(args) == 3:
          return _coin.SoMFUShort_setValues(args[0],args[1],len(args[2]),args[2])
       return _coin.SoMFUShort_setValues(*args)


    def set1Value(*args): return Coin_SWIG_Python.SoMFUShort_set1Value(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFUShort___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFUShort___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFUShort_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFUShort_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFUShort_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFUShort_initClass)
    def __getitem__(*args): return Coin_SWIG_Python.SoMFUShort___getitem__(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SoMFUShort___setitem__(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFUShort_setValue(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFUShort_getValues(*args)
SoMFUShort_swigregister = Coin_SWIG_Python.SoMFUShort_swigregister
SoMFUShort_swigregister(SoMFUShort)
SoMFUShort_createInstance = Coin_SWIG_Python.SoMFUShort_createInstance
SoMFUShort_getClassTypeId = Coin_SWIG_Python.SoMFUShort_getClassTypeId
SoMFUShort_initClass = Coin_SWIG_Python.SoMFUShort_initClass

class SoMFVec2b(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec2b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2b
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec2b_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec2b_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec2b_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec2b_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec2b_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec2b_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec2b_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec2b___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec2b___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec2b_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec2b_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec2b_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec2b_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec2b_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec2b_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec2b_setValue(*args)
SoMFVec2b_swigregister = Coin_SWIG_Python.SoMFVec2b_swigregister
SoMFVec2b_swigregister(SoMFVec2b)
SoMFVec2b_createInstance = Coin_SWIG_Python.SoMFVec2b_createInstance
SoMFVec2b_getClassTypeId = Coin_SWIG_Python.SoMFVec2b_getClassTypeId
SoMFVec2b_initClass = Coin_SWIG_Python.SoMFVec2b_initClass

class SoMFVec2s(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec2s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec2s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec2s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec2s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec2s_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec2s_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec2s_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec2s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec2s___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec2s_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec2s_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec2s_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec2s_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec2s_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec2s_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec2s_setValue(*args)
SoMFVec2s_swigregister = Coin_SWIG_Python.SoMFVec2s_swigregister
SoMFVec2s_swigregister(SoMFVec2s)
SoMFVec2s_createInstance = Coin_SWIG_Python.SoMFVec2s_createInstance
SoMFVec2s_getClassTypeId = Coin_SWIG_Python.SoMFVec2s_getClassTypeId
SoMFVec2s_initClass = Coin_SWIG_Python.SoMFVec2s_initClass

class SoMFVec2i32(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec2i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec2i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec2i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec2i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec2i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec2i32_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec2i32_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec2i32_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec2i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec2i32___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec2i32_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec2i32_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec2i32_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec2i32_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec2i32_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec2i32_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec2i32_setValue(*args)
SoMFVec2i32_swigregister = Coin_SWIG_Python.SoMFVec2i32_swigregister
SoMFVec2i32_swigregister(SoMFVec2i32)
SoMFVec2i32_createInstance = Coin_SWIG_Python.SoMFVec2i32_createInstance
SoMFVec2i32_getClassTypeId = Coin_SWIG_Python.SoMFVec2i32_getClassTypeId
SoMFVec2i32_initClass = Coin_SWIG_Python.SoMFVec2i32_initClass

class SoMFVec2d(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec2d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec2d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec2d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec2d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec2d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec2d_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec2d_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec2d_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec2d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec2d___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec2d_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec2d_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec2d_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec2d_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec2d_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec2d_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec2d_setValue(*args)
SoMFVec2d_swigregister = Coin_SWIG_Python.SoMFVec2d_swigregister
SoMFVec2d_swigregister(SoMFVec2d)
SoMFVec2d_createInstance = Coin_SWIG_Python.SoMFVec2d_createInstance
SoMFVec2d_getClassTypeId = Coin_SWIG_Python.SoMFVec2d_getClassTypeId
SoMFVec2d_initClass = Coin_SWIG_Python.SoMFVec2d_initClass

class SoMFVec3b(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec3b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3b
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec3b_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec3b_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec3b_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec3b_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec3b_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec3b_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec3b_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec3b___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec3b___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec3b_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec3b_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec3b_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec3b_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec3b_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec3b_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec3b_setValue(*args)
SoMFVec3b_swigregister = Coin_SWIG_Python.SoMFVec3b_swigregister
SoMFVec3b_swigregister(SoMFVec3b)
SoMFVec3b_createInstance = Coin_SWIG_Python.SoMFVec3b_createInstance
SoMFVec3b_getClassTypeId = Coin_SWIG_Python.SoMFVec3b_getClassTypeId
SoMFVec3b_initClass = Coin_SWIG_Python.SoMFVec3b_initClass

class SoMFVec3s(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec3s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec3s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec3s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec3s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec3s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec3s_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec3s_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec3s_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec3s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec3s___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec3s_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec3s_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec3s_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec3s_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec3s_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec3s_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec3s_setValue(*args)
SoMFVec3s_swigregister = Coin_SWIG_Python.SoMFVec3s_swigregister
SoMFVec3s_swigregister(SoMFVec3s)
SoMFVec3s_createInstance = Coin_SWIG_Python.SoMFVec3s_createInstance
SoMFVec3s_getClassTypeId = Coin_SWIG_Python.SoMFVec3s_getClassTypeId
SoMFVec3s_initClass = Coin_SWIG_Python.SoMFVec3s_initClass

class SoMFVec3i32(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec3i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec3i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec3i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec3i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec3i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec3i32_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec3i32_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec3i32_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec3i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec3i32___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec3i32_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec3i32_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec3i32_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec3i32_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec3i32_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec3i32_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec3i32_setValue(*args)
SoMFVec3i32_swigregister = Coin_SWIG_Python.SoMFVec3i32_swigregister
SoMFVec3i32_swigregister(SoMFVec3i32)
SoMFVec3i32_createInstance = Coin_SWIG_Python.SoMFVec3i32_createInstance
SoMFVec3i32_getClassTypeId = Coin_SWIG_Python.SoMFVec3i32_getClassTypeId
SoMFVec3i32_initClass = Coin_SWIG_Python.SoMFVec3i32_initClass

class SoMFVec3d(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec3d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec3d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec3d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec3d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec3d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec3d_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec3d_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec3d_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec3d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec3d___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec3d_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec3d_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec3d_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec3d_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec3d_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec3d_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec3d_setValue(*args)
SoMFVec3d_swigregister = Coin_SWIG_Python.SoMFVec3d_swigregister
SoMFVec3d_swigregister(SoMFVec3d)
SoMFVec3d_createInstance = Coin_SWIG_Python.SoMFVec3d_createInstance
SoMFVec3d_getClassTypeId = Coin_SWIG_Python.SoMFVec3d_getClassTypeId
SoMFVec3d_initClass = Coin_SWIG_Python.SoMFVec3d_initClass

class SoMFVec4b(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4b
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4b_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4b_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4b_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4b_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4b_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4b_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4b_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4b___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4b___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4b_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4b_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4b_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4b_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4b_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4b_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4b_setValue(*args)
SoMFVec4b_swigregister = Coin_SWIG_Python.SoMFVec4b_swigregister
SoMFVec4b_swigregister(SoMFVec4b)
SoMFVec4b_createInstance = Coin_SWIG_Python.SoMFVec4b_createInstance
SoMFVec4b_getClassTypeId = Coin_SWIG_Python.SoMFVec4b_getClassTypeId
SoMFVec4b_initClass = Coin_SWIG_Python.SoMFVec4b_initClass

class SoMFVec4s(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4s(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4s
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4s_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4s_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4s_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4s_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4s_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4s_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4s_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4s___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4s___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4s_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4s_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4s_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4s_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4s_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4s_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4s_setValue(*args)
SoMFVec4s_swigregister = Coin_SWIG_Python.SoMFVec4s_swigregister
SoMFVec4s_swigregister(SoMFVec4s)
SoMFVec4s_createInstance = Coin_SWIG_Python.SoMFVec4s_createInstance
SoMFVec4s_getClassTypeId = Coin_SWIG_Python.SoMFVec4s_getClassTypeId
SoMFVec4s_initClass = Coin_SWIG_Python.SoMFVec4s_initClass

class SoMFVec4i32(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4i32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4i32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4i32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4i32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4i32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4i32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4i32_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4i32_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4i32_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4i32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4i32___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4i32_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4i32_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4i32_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4i32_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4i32_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4i32_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4i32_setValue(*args)
SoMFVec4i32_swigregister = Coin_SWIG_Python.SoMFVec4i32_swigregister
SoMFVec4i32_swigregister(SoMFVec4i32)
SoMFVec4i32_createInstance = Coin_SWIG_Python.SoMFVec4i32_createInstance
SoMFVec4i32_getClassTypeId = Coin_SWIG_Python.SoMFVec4i32_getClassTypeId
SoMFVec4i32_initClass = Coin_SWIG_Python.SoMFVec4i32_initClass

class SoMFVec4d(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4d
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4d_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4d_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4d_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4d_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4d_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4d_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4d_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4d___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4d___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4d_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4d_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4d_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4d_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4d_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4d_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4d_setValue(*args)
SoMFVec4d_swigregister = Coin_SWIG_Python.SoMFVec4d_swigregister
SoMFVec4d_swigregister(SoMFVec4d)
SoMFVec4d_createInstance = Coin_SWIG_Python.SoMFVec4d_createInstance
SoMFVec4d_getClassTypeId = Coin_SWIG_Python.SoMFVec4d_getClassTypeId
SoMFVec4d_initClass = Coin_SWIG_Python.SoMFVec4d_initClass

class SoMFVec4ub(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4ub(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4ub
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4ub_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4ub_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4ub_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4ub_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4ub_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4ub_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4ub_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4ub___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4ub___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4ub_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4ub_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4ub_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4ub_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4ub_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4ub_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4ub_setValue(*args)
SoMFVec4ub_swigregister = Coin_SWIG_Python.SoMFVec4ub_swigregister
SoMFVec4ub_swigregister(SoMFVec4ub)
SoMFVec4ub_createInstance = Coin_SWIG_Python.SoMFVec4ub_createInstance
SoMFVec4ub_getClassTypeId = Coin_SWIG_Python.SoMFVec4ub_getClassTypeId
SoMFVec4ub_initClass = Coin_SWIG_Python.SoMFVec4ub_initClass

class SoMFVec4us(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4us(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4us
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4us_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4us_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4us_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4us_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4us_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4us_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4us_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4us___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4us___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4us_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4us_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4us_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4us_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4us_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4us_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4us_setValue(*args)
SoMFVec4us_swigregister = Coin_SWIG_Python.SoMFVec4us_swigregister
SoMFVec4us_swigregister(SoMFVec4us)
SoMFVec4us_createInstance = Coin_SWIG_Python.SoMFVec4us_createInstance
SoMFVec4us_getClassTypeId = Coin_SWIG_Python.SoMFVec4us_getClassTypeId
SoMFVec4us_initClass = Coin_SWIG_Python.SoMFVec4us_initClass

class SoMFVec4ui32(SoMField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMFVec4ui32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMFVec4ui32
    __del__ = lambda self : None;
    createInstance = staticmethod(Coin_SWIG_Python.SoMFVec4ui32_createInstance)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMFVec4ui32_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMFVec4ui32_getTypeId(*args)
    def copyFrom(*args): return Coin_SWIG_Python.SoMFVec4ui32_copyFrom(*args)
    def isSame(*args): return Coin_SWIG_Python.SoMFVec4ui32_isSame(*args)
    def getValues(*args): return Coin_SWIG_Python.SoMFVec4ui32_getValues(*args)
    def find(*args): return Coin_SWIG_Python.SoMFVec4ui32_find(*args)
    def __eq__(*args): return Coin_SWIG_Python.SoMFVec4ui32___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SoMFVec4ui32___ne__(*args)
    def startEditing(*args): return Coin_SWIG_Python.SoMFVec4ui32_startEditing(*args)
    def finishEditing(*args): return Coin_SWIG_Python.SoMFVec4ui32_finishEditing(*args)
    def setValuesPointer(*args): return Coin_SWIG_Python.SoMFVec4ui32_setValuesPointer(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMFVec4ui32_initClass)
    def setValues(*args): return Coin_SWIG_Python.SoMFVec4ui32_setValues(*args)
    def set1Value(*args): return Coin_SWIG_Python.SoMFVec4ui32_set1Value(*args)
    def setValue(*args): return Coin_SWIG_Python.SoMFVec4ui32_setValue(*args)
SoMFVec4ui32_swigregister = Coin_SWIG_Python.SoMFVec4ui32_swigregister
SoMFVec4ui32_swigregister(SoMFVec4ui32)
SoMFVec4ui32_createInstance = Coin_SWIG_Python.SoMFVec4ui32_createInstance
SoMFVec4ui32_getClassTypeId = Coin_SWIG_Python.SoMFVec4ui32_getClassTypeId
SoMFVec4ui32_initClass = Coin_SWIG_Python.SoMFVec4ui32_initClass

class SbStringList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return Coin_SWIG_Python.SbStringList_append(*args)
    def find(*args): return Coin_SWIG_Python.SbStringList_find(*args)
    def insert(*args): return Coin_SWIG_Python.SbStringList_insert(*args)
    def getArrayPtr(*args): return Coin_SWIG_Python.SbStringList_getArrayPtr(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbStringList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbStringList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SbStringList_get(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbStringList
    __del__ = lambda self : None;
SbStringList_swigregister = Coin_SWIG_Python.SbStringList_swigregister
SbStringList_swigregister(SbStringList)

class SbVec3fList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbVec3fList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbVec3fList
    __del__ = lambda self : None;
    def append(*args): return Coin_SWIG_Python.SbVec3fList_append(*args)
    def insert(*args): return Coin_SWIG_Python.SbVec3fList_insert(*args)
    def __setitem__(*args): return Coin_SWIG_Python.SbVec3fList___setitem__(*args)
    def __getitem__(*args): return Coin_SWIG_Python.SbVec3fList___getitem__(*args)
    def get(*args): return Coin_SWIG_Python.SbVec3fList_get(*args)
SbVec3fList_swigregister = Coin_SWIG_Python.SbVec3fList_swigregister
SbVec3fList_swigregister(SbVec3fList)

class SoLockManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SetUnlockString = staticmethod(Coin_SWIG_Python.SoLockManager_SetUnlockString)
    GetUnlockString = staticmethod(Coin_SWIG_Python.SoLockManager_GetUnlockString)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLockManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLockManager
    __del__ = lambda self : None;
SoLockManager_swigregister = Coin_SWIG_Python.SoLockManager_swigregister
SoLockManager_swigregister(SoLockManager)
SoLockManager_SetUnlockString = Coin_SWIG_Python.SoLockManager_SetUnlockString
SoLockManager_GetUnlockString = Coin_SWIG_Python.SoLockManager_GetUnlockString

class SoTransform(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTransform_translation_get, Coin_SWIG_Python.SoTransform_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoTransform_rotation_get, Coin_SWIG_Python.SoTransform_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTransform_scaleFactor_get, Coin_SWIG_Python.SoTransform_scaleFactor_set)
    scaleOrientation = _swig_property(Coin_SWIG_Python.SoTransform_scaleOrientation_get, Coin_SWIG_Python.SoTransform_scaleOrientation_set)
    center = _swig_property(Coin_SWIG_Python.SoTransform_center_get, Coin_SWIG_Python.SoTransform_center_set)
    def pointAt(*args): return Coin_SWIG_Python.SoTransform_pointAt(*args)
    def getScaleSpaceMatrix(*args): return Coin_SWIG_Python.SoTransform_getScaleSpaceMatrix(*args)
    def getRotationSpaceMatrix(*args): return Coin_SWIG_Python.SoTransform_getRotationSpaceMatrix(*args)
    def getTranslationSpaceMatrix(*args): return Coin_SWIG_Python.SoTransform_getTranslationSpaceMatrix(*args)
    def multLeft(*args): return Coin_SWIG_Python.SoTransform_multLeft(*args)
    def multRight(*args): return Coin_SWIG_Python.SoTransform_multRight(*args)
    def combineLeft(*args): return Coin_SWIG_Python.SoTransform_combineLeft(*args)
    def combineRight(*args): return Coin_SWIG_Python.SoTransform_combineRight(*args)
    def setMatrix(*args): return Coin_SWIG_Python.SoTransform_setMatrix(*args)
    def recenter(*args): return Coin_SWIG_Python.SoTransform_recenter(*args)
    def doAction(*args): return Coin_SWIG_Python.SoTransform_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTransform_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTransform_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoTransform_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTransform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoTransform_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoTransform_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransform
    __del__ = lambda self : None;
SoTransform_swigregister = Coin_SWIG_Python.SoTransform_swigregister
SoTransform_swigregister(SoTransform)
SoTransform_getClassTypeId = Coin_SWIG_Python.SoTransform_getClassTypeId
SoTransform_initClass = Coin_SWIG_Python.SoTransform_initClass

class SoTransformManip(SoTransform):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformManip(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDragger(*args): return Coin_SWIG_Python.SoTransformManip_getDragger(*args)
    def replaceNode(*args): return Coin_SWIG_Python.SoTransformManip_replaceNode(*args)
    def replaceManip(*args): return Coin_SWIG_Python.SoTransformManip_replaceManip(*args)
    def doAction(*args): return Coin_SWIG_Python.SoTransformManip_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTransformManip_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTransformManip_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoTransformManip_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTransformManip_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoTransformManip_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoTransformManip_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoTransformManip_search(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoTransformManip_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformManip
    __del__ = lambda self : None;
SoTransformManip_swigregister = Coin_SWIG_Python.SoTransformManip_swigregister
SoTransformManip_swigregister(SoTransformManip)
SoTransformManip_getClassTypeId = Coin_SWIG_Python.SoTransformManip_getClassTypeId
SoTransformManip_initClass = Coin_SWIG_Python.SoTransformManip_initClass

class SoCenterballManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCenterballManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCenterballManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCenterballManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCenterballManip(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCenterballManip
    __del__ = lambda self : None;
SoCenterballManip_swigregister = Coin_SWIG_Python.SoCenterballManip_swigregister
SoCenterballManip_swigregister(SoCenterballManip)
SoCenterballManip_getClassTypeId = Coin_SWIG_Python.SoCenterballManip_getClassTypeId
SoCenterballManip_initClass = Coin_SWIG_Python.SoCenterballManip_initClass

class SoClipPlane(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoClipPlane_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoClipPlane_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoClipPlane_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoClipPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    plane = _swig_property(Coin_SWIG_Python.SoClipPlane_plane_get, Coin_SWIG_Python.SoClipPlane_plane_set)
    on = _swig_property(Coin_SWIG_Python.SoClipPlane_on_get, Coin_SWIG_Python.SoClipPlane_on_set)
    def doAction(*args): return Coin_SWIG_Python.SoClipPlane_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoClipPlane_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoClipPlane_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoClipPlane_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoClipPlane
    __del__ = lambda self : None;
SoClipPlane_swigregister = Coin_SWIG_Python.SoClipPlane_swigregister
SoClipPlane_swigregister(SoClipPlane)
SoClipPlane_getClassTypeId = Coin_SWIG_Python.SoClipPlane_getClassTypeId
SoClipPlane_initClass = Coin_SWIG_Python.SoClipPlane_initClass

class SoClipPlaneManip(SoClipPlane):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoClipPlaneManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoClipPlaneManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoClipPlaneManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoClipPlaneManip(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDragger(*args): return Coin_SWIG_Python.SoClipPlaneManip_getDragger(*args)
    def setValue(*args): return Coin_SWIG_Python.SoClipPlaneManip_setValue(*args)
    def replaceNode(*args): return Coin_SWIG_Python.SoClipPlaneManip_replaceNode(*args)
    def replaceManip(*args): return Coin_SWIG_Python.SoClipPlaneManip_replaceManip(*args)
    def doAction(*args): return Coin_SWIG_Python.SoClipPlaneManip_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoClipPlaneManip_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoClipPlaneManip_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoClipPlaneManip_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoClipPlaneManip_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoClipPlaneManip_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoClipPlaneManip_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoClipPlaneManip_search(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoClipPlaneManip_getChildren(*args)
    draggerPosition = _swig_property(Coin_SWIG_Python.SoClipPlaneManip_draggerPosition_get, Coin_SWIG_Python.SoClipPlaneManip_draggerPosition_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoClipPlaneManip
    __del__ = lambda self : None;
SoClipPlaneManip_swigregister = Coin_SWIG_Python.SoClipPlaneManip_swigregister
SoClipPlaneManip_swigregister(SoClipPlaneManip)
SoClipPlaneManip_getClassTypeId = Coin_SWIG_Python.SoClipPlaneManip_getClassTypeId
SoClipPlaneManip_initClass = Coin_SWIG_Python.SoClipPlaneManip_initClass

class SoLight(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLight_initClass)
    on = _swig_property(Coin_SWIG_Python.SoLight_on_get, Coin_SWIG_Python.SoLight_on_set)
    intensity = _swig_property(Coin_SWIG_Python.SoLight_intensity_get, Coin_SWIG_Python.SoLight_intensity_set)
    color = _swig_property(Coin_SWIG_Python.SoLight_color_get, Coin_SWIG_Python.SoLight_color_set)
    def callback(*args): return Coin_SWIG_Python.SoLight_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLight
    __del__ = lambda self : None;
SoLight_swigregister = Coin_SWIG_Python.SoLight_swigregister
SoLight_swigregister(SoLight)
SoLight_getClassTypeId = Coin_SWIG_Python.SoLight_getClassTypeId
SoLight_initClass = Coin_SWIG_Python.SoLight_initClass

class SoDirectionalLight(SoLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDirectionalLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDirectionalLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoDirectionalLight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDirectionalLight(*args)
        try: self.this.append(this)
        except: self.this = this
    direction = _swig_property(Coin_SWIG_Python.SoDirectionalLight_direction_get, Coin_SWIG_Python.SoDirectionalLight_direction_set)
    def GLRender(*args): return Coin_SWIG_Python.SoDirectionalLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDirectionalLight
    __del__ = lambda self : None;
SoDirectionalLight_swigregister = Coin_SWIG_Python.SoDirectionalLight_swigregister
SoDirectionalLight_swigregister(SoDirectionalLight)
SoDirectionalLight_getClassTypeId = Coin_SWIG_Python.SoDirectionalLight_getClassTypeId
SoDirectionalLight_initClass = Coin_SWIG_Python.SoDirectionalLight_initClass

class SoDirectionalLightManip(SoDirectionalLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoDirectionalLightManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoDirectionalLightManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoDirectionalLightManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoDirectionalLightManip(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDragger(*args): return Coin_SWIG_Python.SoDirectionalLightManip_getDragger(*args)
    def replaceNode(*args): return Coin_SWIG_Python.SoDirectionalLightManip_replaceNode(*args)
    def replaceManip(*args): return Coin_SWIG_Python.SoDirectionalLightManip_replaceManip(*args)
    def doAction(*args): return Coin_SWIG_Python.SoDirectionalLightManip_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoDirectionalLightManip_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoDirectionalLightManip_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoDirectionalLightManip_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoDirectionalLightManip_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoDirectionalLightManip_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoDirectionalLightManip_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoDirectionalLightManip_search(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoDirectionalLightManip_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoDirectionalLightManip
    __del__ = lambda self : None;
SoDirectionalLightManip_swigregister = Coin_SWIG_Python.SoDirectionalLightManip_swigregister
SoDirectionalLightManip_swigregister(SoDirectionalLightManip)
SoDirectionalLightManip_getClassTypeId = Coin_SWIG_Python.SoDirectionalLightManip_getClassTypeId
SoDirectionalLightManip_initClass = Coin_SWIG_Python.SoDirectionalLightManip_initClass

class SoHandleBoxManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoHandleBoxManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoHandleBoxManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoHandleBoxManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoHandleBoxManip(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoHandleBoxManip
    __del__ = lambda self : None;
SoHandleBoxManip_swigregister = Coin_SWIG_Python.SoHandleBoxManip_swigregister
SoHandleBoxManip_swigregister(SoHandleBoxManip)
SoHandleBoxManip_getClassTypeId = Coin_SWIG_Python.SoHandleBoxManip_getClassTypeId
SoHandleBoxManip_initClass = Coin_SWIG_Python.SoHandleBoxManip_initClass

class SoJackManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoJackManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoJackManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoJackManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoJackManip(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoJackManip
    __del__ = lambda self : None;
SoJackManip_swigregister = Coin_SWIG_Python.SoJackManip_swigregister
SoJackManip_swigregister(SoJackManip)
SoJackManip_getClassTypeId = Coin_SWIG_Python.SoJackManip_getClassTypeId
SoJackManip_initClass = Coin_SWIG_Python.SoJackManip_initClass

class SoPointLight(SoLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPointLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPointLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPointLight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPointLight(*args)
        try: self.this.append(this)
        except: self.this = this
    location = _swig_property(Coin_SWIG_Python.SoPointLight_location_get, Coin_SWIG_Python.SoPointLight_location_set)
    def GLRender(*args): return Coin_SWIG_Python.SoPointLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointLight
    __del__ = lambda self : None;
SoPointLight_swigregister = Coin_SWIG_Python.SoPointLight_swigregister
SoPointLight_swigregister(SoPointLight)
SoPointLight_getClassTypeId = Coin_SWIG_Python.SoPointLight_getClassTypeId
SoPointLight_initClass = Coin_SWIG_Python.SoPointLight_initClass

class SoPointLightManip(SoPointLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPointLightManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPointLightManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPointLightManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPointLightManip(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDragger(*args): return Coin_SWIG_Python.SoPointLightManip_getDragger(*args)
    def replaceNode(*args): return Coin_SWIG_Python.SoPointLightManip_replaceNode(*args)
    def replaceManip(*args): return Coin_SWIG_Python.SoPointLightManip_replaceManip(*args)
    def doAction(*args): return Coin_SWIG_Python.SoPointLightManip_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoPointLightManip_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoPointLightManip_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoPointLightManip_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoPointLightManip_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoPointLightManip_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoPointLightManip_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoPointLightManip_search(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoPointLightManip_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointLightManip
    __del__ = lambda self : None;
SoPointLightManip_swigregister = Coin_SWIG_Python.SoPointLightManip_swigregister
SoPointLightManip_swigregister(SoPointLightManip)
SoPointLightManip_getClassTypeId = Coin_SWIG_Python.SoPointLightManip_getClassTypeId
SoPointLightManip_initClass = Coin_SWIG_Python.SoPointLightManip_initClass

class SoSpotLight(SoLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSpotLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSpotLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSpotLight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSpotLight(*args)
        try: self.this.append(this)
        except: self.this = this
    location = _swig_property(Coin_SWIG_Python.SoSpotLight_location_get, Coin_SWIG_Python.SoSpotLight_location_set)
    direction = _swig_property(Coin_SWIG_Python.SoSpotLight_direction_get, Coin_SWIG_Python.SoSpotLight_direction_set)
    dropOffRate = _swig_property(Coin_SWIG_Python.SoSpotLight_dropOffRate_get, Coin_SWIG_Python.SoSpotLight_dropOffRate_set)
    cutOffAngle = _swig_property(Coin_SWIG_Python.SoSpotLight_cutOffAngle_get, Coin_SWIG_Python.SoSpotLight_cutOffAngle_set)
    def GLRender(*args): return Coin_SWIG_Python.SoSpotLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpotLight
    __del__ = lambda self : None;
SoSpotLight_swigregister = Coin_SWIG_Python.SoSpotLight_swigregister
SoSpotLight_swigregister(SoSpotLight)
SoSpotLight_getClassTypeId = Coin_SWIG_Python.SoSpotLight_getClassTypeId
SoSpotLight_initClass = Coin_SWIG_Python.SoSpotLight_initClass

class SoSpotLightManip(SoSpotLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSpotLightManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSpotLightManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSpotLightManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSpotLightManip(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDragger(*args): return Coin_SWIG_Python.SoSpotLightManip_getDragger(*args)
    def replaceNode(*args): return Coin_SWIG_Python.SoSpotLightManip_replaceNode(*args)
    def replaceManip(*args): return Coin_SWIG_Python.SoSpotLightManip_replaceManip(*args)
    def doAction(*args): return Coin_SWIG_Python.SoSpotLightManip_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoSpotLightManip_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoSpotLightManip_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoSpotLightManip_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoSpotLightManip_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoSpotLightManip_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoSpotLightManip_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoSpotLightManip_search(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoSpotLightManip_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSpotLightManip
    __del__ = lambda self : None;
SoSpotLightManip_swigregister = Coin_SWIG_Python.SoSpotLightManip_swigregister
SoSpotLightManip_swigregister(SoSpotLightManip)
SoSpotLightManip_getClassTypeId = Coin_SWIG_Python.SoSpotLightManip_getClassTypeId
SoSpotLightManip_initClass = Coin_SWIG_Python.SoSpotLightManip_initClass

class SoTabBoxManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTabBoxManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTabBoxManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTabBoxManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTabBoxManip(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTabBoxManip
    __del__ = lambda self : None;
SoTabBoxManip_swigregister = Coin_SWIG_Python.SoTabBoxManip_swigregister
SoTabBoxManip_swigregister(SoTabBoxManip)
SoTabBoxManip_getClassTypeId = Coin_SWIG_Python.SoTabBoxManip_getClassTypeId
SoTabBoxManip_initClass = Coin_SWIG_Python.SoTabBoxManip_initClass

class SoTrackballManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTrackballManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTrackballManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTrackballManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTrackballManip(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTrackballManip
    __del__ = lambda self : None;
SoTrackballManip_swigregister = Coin_SWIG_Python.SoTrackballManip_swigregister
SoTrackballManip_swigregister(SoTrackballManip)
SoTrackballManip_getClassTypeId = Coin_SWIG_Python.SoTrackballManip_getClassTypeId
SoTrackballManip_initClass = Coin_SWIG_Python.SoTrackballManip_initClass

class SoTransformBoxManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformBoxManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformBoxManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformBoxManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformBoxManip(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformBoxManip
    __del__ = lambda self : None;
SoTransformBoxManip_swigregister = Coin_SWIG_Python.SoTransformBoxManip_swigregister
SoTransformBoxManip_swigregister(SoTransformBoxManip)
SoTransformBoxManip_getClassTypeId = Coin_SWIG_Python.SoTransformBoxManip_getClassTypeId
SoTransformBoxManip_initClass = Coin_SWIG_Python.SoTransformBoxManip_initClass

class SoTransformerManip(SoTransformManip):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformerManip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformerManip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformerManip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformerManip(*args)
        try: self.this.append(this)
        except: self.this = this
    def isLocateHighlighting(*args): return Coin_SWIG_Python.SoTransformerManip_isLocateHighlighting(*args)
    def setLocateHighlighting(*args): return Coin_SWIG_Python.SoTransformerManip_setLocateHighlighting(*args)
    def unsquishKnobs(*args): return Coin_SWIG_Python.SoTransformerManip_unsquishKnobs(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformerManip
    __del__ = lambda self : None;
SoTransformerManip_swigregister = Coin_SWIG_Python.SoTransformerManip_swigregister
SoTransformerManip_swigregister(SoTransformerManip)
SoTransformerManip_getClassTypeId = Coin_SWIG_Python.SoTransformerManip_getClassTypeId
SoTransformerManip_initClass = Coin_SWIG_Python.SoTransformerManip_initClass

class SoAudioDevice(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    instance = staticmethod(Coin_SWIG_Python.SoAudioDevice_instance)
    def init(*args): return Coin_SWIG_Python.SoAudioDevice_init(*args)
    def enable(*args): return Coin_SWIG_Python.SoAudioDevice_enable(*args)
    def disable(*args): return Coin_SWIG_Python.SoAudioDevice_disable(*args)
    def isEnabled(*args): return Coin_SWIG_Python.SoAudioDevice_isEnabled(*args)
    def haveSound(*args): return Coin_SWIG_Python.SoAudioDevice_haveSound(*args)
    def setGain(*args): return Coin_SWIG_Python.SoAudioDevice_setGain(*args)
    def mute(*args): return Coin_SWIG_Python.SoAudioDevice_mute(*args)
    def cleanup(*args): return Coin_SWIG_Python.SoAudioDevice_cleanup(*args)
SoAudioDevice_swigregister = Coin_SWIG_Python.SoAudioDevice_swigregister
SoAudioDevice_swigregister(SoAudioDevice)
SoAudioDevice_instance = Coin_SWIG_Python.SoAudioDevice_instance

class SoByteStream(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoByteStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoByteStream
    __del__ = lambda self : None;
    def convert(*args): return Coin_SWIG_Python.SoByteStream_convert(*args)
    def getData(*args): return Coin_SWIG_Python.SoByteStream_getData(*args)
    def getNumBytes(*args): return Coin_SWIG_Python.SoByteStream_getNumBytes(*args)
    unconvert = staticmethod(Coin_SWIG_Python.SoByteStream_unconvert)
    def copy(*args): return Coin_SWIG_Python.SoByteStream_copy(*args)
    def isRawData(*args): return Coin_SWIG_Python.SoByteStream_isRawData(*args)
SoByteStream_swigregister = Coin_SWIG_Python.SoByteStream_swigregister
SoByteStream_swigregister(SoByteStream)
SoByteStream_unconvert = Coin_SWIG_Python.SoByteStream_unconvert

class SoContextHandler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    destructingContext = staticmethod(Coin_SWIG_Python.SoContextHandler_destructingContext)
    addContextDestructionCallback = staticmethod(Coin_SWIG_Python.SoContextHandler_addContextDestructionCallback)
    removeContextDestructionCallback = staticmethod(Coin_SWIG_Python.SoContextHandler_removeContextDestructionCallback)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoContextHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoContextHandler
    __del__ = lambda self : None;
SoContextHandler_swigregister = Coin_SWIG_Python.SoContextHandler_swigregister
SoContextHandler_swigregister(SoContextHandler)
SoContextHandler_destructingContext = Coin_SWIG_Python.SoContextHandler_destructingContext
SoContextHandler_addContextDestructionCallback = Coin_SWIG_Python.SoContextHandler_addContextDestructionCallback
SoContextHandler_removeContextDestructionCallback = Coin_SWIG_Python.SoContextHandler_removeContextDestructionCallback

class SoGLImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def unref(*args): return Coin_SWIG_Python.SoGLImage_unref(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLImage_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoGLImage_getTypeId(*args)
    def isOfType(*args): return Coin_SWIG_Python.SoGLImage_isOfType(*args)
    REPEAT = Coin_SWIG_Python.SoGLImage_REPEAT
    CLAMP = Coin_SWIG_Python.SoGLImage_CLAMP
    CLAMP_TO_EDGE = Coin_SWIG_Python.SoGLImage_CLAMP_TO_EDGE
    CLAMP_TO_BORDER = Coin_SWIG_Python.SoGLImage_CLAMP_TO_BORDER
    IMAGE = Coin_SWIG_Python.SoGLImage_IMAGE
    SUBIMAGE = Coin_SWIG_Python.SoGLImage_SUBIMAGE
    MIPMAP = Coin_SWIG_Python.SoGLImage_MIPMAP
    def setGLDisplayList(*args): return Coin_SWIG_Python.SoGLImage_setGLDisplayList(*args)
    def setPBuffer(*args): return Coin_SWIG_Python.SoGLImage_setPBuffer(*args)
    def setData(*args): return Coin_SWIG_Python.SoGLImage_setData(*args)
    SCALE_DOWN = Coin_SWIG_Python.SoGLImage_SCALE_DOWN
    NO_MIPMAP = Coin_SWIG_Python.SoGLImage_NO_MIPMAP
    LINEAR_MAG_FILTER = Coin_SWIG_Python.SoGLImage_LINEAR_MAG_FILTER
    LINEAR_MIN_FILTER = Coin_SWIG_Python.SoGLImage_LINEAR_MIN_FILTER
    LINEAR_MIPMAP_FILTER = Coin_SWIG_Python.SoGLImage_LINEAR_MIPMAP_FILTER
    FORCE_TRANSPARENCY_TRUE = Coin_SWIG_Python.SoGLImage_FORCE_TRANSPARENCY_TRUE
    FORCE_TRANSPARENCY_FALSE = Coin_SWIG_Python.SoGLImage_FORCE_TRANSPARENCY_FALSE
    FORCE_ALPHA_TEST_TRUE = Coin_SWIG_Python.SoGLImage_FORCE_ALPHA_TEST_TRUE
    FORCE_ALPHA_TEST_FALSE = Coin_SWIG_Python.SoGLImage_FORCE_ALPHA_TEST_FALSE
    INVINCIBLE = Coin_SWIG_Python.SoGLImage_INVINCIBLE
    RECTANGLE = Coin_SWIG_Python.SoGLImage_RECTANGLE
    COMPRESSED = Coin_SWIG_Python.SoGLImage_COMPRESSED
    USE_QUALITY_VALUE = Coin_SWIG_Python.SoGLImage_USE_QUALITY_VALUE
    def setFlags(*args): return Coin_SWIG_Python.SoGLImage_setFlags(*args)
    def getFlags(*args): return Coin_SWIG_Python.SoGLImage_getFlags(*args)
    def getImage(*args): return Coin_SWIG_Python.SoGLImage_getImage(*args)
    def getGLDisplayList(*args): return Coin_SWIG_Python.SoGLImage_getGLDisplayList(*args)
    def hasTransparency(*args): return Coin_SWIG_Python.SoGLImage_hasTransparency(*args)
    def useAlphaTest(*args): return Coin_SWIG_Python.SoGLImage_useAlphaTest(*args)
    def getWrapS(*args): return Coin_SWIG_Python.SoGLImage_getWrapS(*args)
    def getWrapT(*args): return Coin_SWIG_Python.SoGLImage_getWrapT(*args)
    def getWrapR(*args): return Coin_SWIG_Python.SoGLImage_getWrapR(*args)
    def getQuality(*args): return Coin_SWIG_Python.SoGLImage_getQuality(*args)
    def getGLImageId(*args): return Coin_SWIG_Python.SoGLImage_getGLImageId(*args)
    beginFrame = staticmethod(Coin_SWIG_Python.SoGLImage_beginFrame)
    tagImage = staticmethod(Coin_SWIG_Python.SoGLImage_tagImage)
    endFrame = staticmethod(Coin_SWIG_Python.SoGLImage_endFrame)
    setDisplayListMaxAge = staticmethod(Coin_SWIG_Python.SoGLImage_setDisplayListMaxAge)
    freeAllImages = staticmethod(Coin_SWIG_Python.SoGLImage_freeAllImages)
    def setEndFrameCallback(*args): return Coin_SWIG_Python.SoGLImage_setEndFrameCallback(*args)
    def getNumFramesSinceUsed(*args): return Coin_SWIG_Python.SoGLImage_getNumFramesSinceUsed(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoGLImage_initClass)
    setResizeCallback = staticmethod(Coin_SWIG_Python.SoGLImage_setResizeCallback)
SoGLImage_swigregister = Coin_SWIG_Python.SoGLImage_swigregister
SoGLImage_swigregister(SoGLImage)
SoGLImage_getClassTypeId = Coin_SWIG_Python.SoGLImage_getClassTypeId
SoGLImage_beginFrame = Coin_SWIG_Python.SoGLImage_beginFrame
SoGLImage_tagImage = Coin_SWIG_Python.SoGLImage_tagImage
SoGLImage_endFrame = Coin_SWIG_Python.SoGLImage_endFrame
SoGLImage_setDisplayListMaxAge = Coin_SWIG_Python.SoGLImage_setDisplayListMaxAge
SoGLImage_freeAllImages = Coin_SWIG_Python.SoGLImage_freeAllImages
SoGLImage_initClass = Coin_SWIG_Python.SoGLImage_initClass
SoGLImage_setResizeCallback = Coin_SWIG_Python.SoGLImage_setResizeCallback

class SoGLBigImage(SoGLImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGLBigImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def unref(*args): return Coin_SWIG_Python.SoGLBigImage_unref(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGLBigImage_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoGLBigImage_getTypeId(*args)
    def setData(*args): return Coin_SWIG_Python.SoGLBigImage_setData(*args)
    def initSubImages(*args): return Coin_SWIG_Python.SoGLBigImage_initSubImages(*args)
    def handleSubImage(*args): return Coin_SWIG_Python.SoGLBigImage_handleSubImage(*args)
    def applySubImage(*args): return Coin_SWIG_Python.SoGLBigImage_applySubImage(*args)
    def exceededChangeLimit(*args): return Coin_SWIG_Python.SoGLBigImage_exceededChangeLimit(*args)
    setChangeLimit = staticmethod(Coin_SWIG_Python.SoGLBigImage_setChangeLimit)
    def getGLDisplayList(*args): return Coin_SWIG_Python.SoGLBigImage_getGLDisplayList(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoGLBigImage_initClass)
SoGLBigImage_swigregister = Coin_SWIG_Python.SoGLBigImage_swigregister
SoGLBigImage_swigregister(SoGLBigImage)
SoGLBigImage_getClassTypeId = Coin_SWIG_Python.SoGLBigImage_getClassTypeId
SoGLBigImage_setChangeLimit = Coin_SWIG_Python.SoGLBigImage_setChangeLimit
SoGLBigImage_initClass = Coin_SWIG_Python.SoGLBigImage_initClass

class SoGlyph(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    FONT2D = Coin_SWIG_Python.SoGlyph_FONT2D
    FONT3D = Coin_SWIG_Python.SoGlyph_FONT3D
    def unref(*args): return Coin_SWIG_Python.SoGlyph_unref(*args)
    def getCoords(*args): return Coin_SWIG_Python.SoGlyph_getCoords(*args)
    def getFaceIndices(*args): return Coin_SWIG_Python.SoGlyph_getFaceIndices(*args)
    def getEdgeIndices(*args): return Coin_SWIG_Python.SoGlyph_getEdgeIndices(*args)
    def getNextCWEdge(*args): return Coin_SWIG_Python.SoGlyph_getNextCWEdge(*args)
    def getNextCCWEdge(*args): return Coin_SWIG_Python.SoGlyph_getNextCCWEdge(*args)
    def getWidth(*args): return Coin_SWIG_Python.SoGlyph_getWidth(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoGlyph_getBoundingBox(*args)
    getGlyph = staticmethod(Coin_SWIG_Python.SoGlyph_getGlyph)
    def getAdvance(*args): return Coin_SWIG_Python.SoGlyph_getAdvance(*args)
    def getKerning(*args): return Coin_SWIG_Python.SoGlyph_getKerning(*args)
    def getBitmap(*args): return Coin_SWIG_Python.SoGlyph_getBitmap(*args)
SoGlyph_swigregister = Coin_SWIG_Python.SoGlyph_swigregister
SoGlyph_swigregister(SoGlyph)
SoGlyph_getGlyph = Coin_SWIG_Python.SoGlyph_getGlyph

class SoProto(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoProto(*args)
        try: self.this.append(this)
        except: self.this = this
    setFetchExternProtoCallback = staticmethod(Coin_SWIG_Python.SoProto_setFetchExternProtoCallback)
    def getTypeId(*args): return Coin_SWIG_Python.SoProto_getTypeId(*args)
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProto_getClassTypeId)
    findProto = staticmethod(Coin_SWIG_Python.SoProto_findProto)
    initClass = staticmethod(Coin_SWIG_Python.SoProto_initClass)
    def createProtoInstance(*args): return Coin_SWIG_Python.SoProto_createProtoInstance(*args)
    def addISReference(*args): return Coin_SWIG_Python.SoProto_addISReference(*args)
    def findISReference(*args): return Coin_SWIG_Python.SoProto_findISReference(*args)
    def addReference(*args): return Coin_SWIG_Python.SoProto_addReference(*args)
    def removeReference(*args): return Coin_SWIG_Python.SoProto_removeReference(*args)
    def findReference(*args): return Coin_SWIG_Python.SoProto_findReference(*args)
    def addRoute(*args): return Coin_SWIG_Python.SoProto_addRoute(*args)
    def getProtoName(*args): return Coin_SWIG_Python.SoProto_getProtoName(*args)
    def readInstance(*args): return Coin_SWIG_Python.SoProto_readInstance(*args)
    def write(*args): return Coin_SWIG_Python.SoProto_write(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProto
    __del__ = lambda self : None;
SoProto_swigregister = Coin_SWIG_Python.SoProto_swigregister
SoProto_swigregister(SoProto)
SoProto_setFetchExternProtoCallback = Coin_SWIG_Python.SoProto_setFetchExternProtoCallback
SoProto_getClassTypeId = Coin_SWIG_Python.SoProto_getClassTypeId
SoProto_findProto = Coin_SWIG_Python.SoProto_findProto
SoProto_initClass = Coin_SWIG_Python.SoProto_initClass

class SoProtoInstance(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProtoInstance_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoProtoInstance_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoProtoInstance_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoProtoInstance(*args)
        try: self.this.append(this)
        except: self.this = this
    findProtoInstance = staticmethod(Coin_SWIG_Python.SoProtoInstance_findProtoInstance)
    def setRootNode(*args): return Coin_SWIG_Python.SoProtoInstance_setRootNode(*args)
    def getRootNode(*args): return Coin_SWIG_Python.SoProtoInstance_getRootNode(*args)
    def getProtoDefinition(*args): return Coin_SWIG_Python.SoProtoInstance_getProtoDefinition(*args)
    def getProtoName(*args): return Coin_SWIG_Python.SoProtoInstance_getProtoName(*args)
    def write(*args): return Coin_SWIG_Python.SoProtoInstance_write(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProtoInstance
    __del__ = lambda self : None;
SoProtoInstance_swigregister = Coin_SWIG_Python.SoProtoInstance_swigregister
SoProtoInstance_swigregister(SoProtoInstance)
SoProtoInstance_getClassTypeId = Coin_SWIG_Python.SoProtoInstance_getClassTypeId
SoProtoInstance_initClass = Coin_SWIG_Python.SoProtoInstance_initClass
SoProtoInstance_findProtoInstance = Coin_SWIG_Python.SoProtoInstance_findProtoInstance

class SoTranReceiver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTranReceiver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranReceiver
    __del__ = lambda self : None;
    def interpret(*args): return Coin_SWIG_Python.SoTranReceiver_interpret(*args)
SoTranReceiver_swigregister = Coin_SWIG_Python.SoTranReceiver_swigregister
SoTranReceiver_swigregister(SoTranReceiver)

class SoTranSender(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTranSender(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranSender
    __del__ = lambda self : None;
    def getOutput(*args): return Coin_SWIG_Python.SoTranSender_getOutput(*args)
    def insert(*args): return Coin_SWIG_Python.SoTranSender_insert(*args)
    def remove(*args): return Coin_SWIG_Python.SoTranSender_remove(*args)
    def replace(*args): return Coin_SWIG_Python.SoTranSender_replace(*args)
    def modify(*args): return Coin_SWIG_Python.SoTranSender_modify(*args)
    def prepareToSend(*args): return Coin_SWIG_Python.SoTranSender_prepareToSend(*args)
SoTranSender_swigregister = Coin_SWIG_Python.SoTranSender_swigregister
SoTranSender_swigregister(SoTranSender)

class SoAppearanceKit(SoBaseKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAppearanceKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoAppearanceKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoAppearanceKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoAppearanceKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoAppearanceKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoAppearanceKit_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAppearanceKit
    __del__ = lambda self : None;
SoAppearanceKit_swigregister = Coin_SWIG_Python.SoAppearanceKit_swigregister
SoAppearanceKit_swigregister(SoAppearanceKit)
SoAppearanceKit_getClassTypeId = Coin_SWIG_Python.SoAppearanceKit_getClassTypeId
SoAppearanceKit_getClassNodekitCatalog = Coin_SWIG_Python.SoAppearanceKit_getClassNodekitCatalog
SoAppearanceKit_initClass = Coin_SWIG_Python.SoAppearanceKit_initClass

class SoCameraKit(SoBaseKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCameraKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCameraKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoCameraKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoCameraKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCameraKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoCameraKit_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCameraKit
    __del__ = lambda self : None;
SoCameraKit_swigregister = Coin_SWIG_Python.SoCameraKit_swigregister
SoCameraKit_swigregister(SoCameraKit)
SoCameraKit_getClassTypeId = Coin_SWIG_Python.SoCameraKit_getClassTypeId
SoCameraKit_getClassNodekitCatalog = Coin_SWIG_Python.SoCameraKit_getClassNodekitCatalog
SoCameraKit_initClass = Coin_SWIG_Python.SoCameraKit_initClass

class SoLightKit(SoBaseKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLightKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLightKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoLightKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoLightKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLightKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoLightKit_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLightKit
    __del__ = lambda self : None;
SoLightKit_swigregister = Coin_SWIG_Python.SoLightKit_swigregister
SoLightKit_swigregister(SoLightKit)
SoLightKit_getClassTypeId = Coin_SWIG_Python.SoLightKit_getClassTypeId
SoLightKit_getClassNodekitCatalog = Coin_SWIG_Python.SoLightKit_getClassNodekitCatalog
SoLightKit_initClass = Coin_SWIG_Python.SoLightKit_initClass

class SoNodeKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    init = staticmethod(Coin_SWIG_Python.SoNodeKit_init)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNodeKit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeKit
    __del__ = lambda self : None;
SoNodeKit_swigregister = Coin_SWIG_Python.SoNodeKit_swigregister
SoNodeKit_swigregister(SoNodeKit)
SoNodeKit_init = Coin_SWIG_Python.SoNodeKit_init

class SoSceneKit(SoBaseKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSceneKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSceneKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoSceneKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoSceneKit_getNodekitCatalog(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSceneKit_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSceneKit(*args)
        try: self.this.append(this)
        except: self.this = this
    def getCameraNumber(*args): return Coin_SWIG_Python.SoSceneKit_getCameraNumber(*args)
    def setCameraNumber(*args): return Coin_SWIG_Python.SoSceneKit_setCameraNumber(*args)
    def affectsState(*args): return Coin_SWIG_Python.SoSceneKit_affectsState(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSceneKit
    __del__ = lambda self : None;
SoSceneKit_swigregister = Coin_SWIG_Python.SoSceneKit_swigregister
SoSceneKit_swigregister(SoSceneKit)
SoSceneKit_getClassTypeId = Coin_SWIG_Python.SoSceneKit_getClassTypeId
SoSceneKit_getClassNodekitCatalog = Coin_SWIG_Python.SoSceneKit_getClassNodekitCatalog
SoSceneKit_initClass = Coin_SWIG_Python.SoSceneKit_initClass

class SoSeparatorKit(SoBaseKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSeparatorKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSeparatorKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoSeparatorKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoSeparatorKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSeparatorKit(*args)
        try: self.this.append(this)
        except: self.this = this
    OFF = Coin_SWIG_Python.SoSeparatorKit_OFF
    ON = Coin_SWIG_Python.SoSeparatorKit_ON
    AUTO = Coin_SWIG_Python.SoSeparatorKit_AUTO
    renderCaching = _swig_property(Coin_SWIG_Python.SoSeparatorKit_renderCaching_get, Coin_SWIG_Python.SoSeparatorKit_renderCaching_set)
    boundingBoxCaching = _swig_property(Coin_SWIG_Python.SoSeparatorKit_boundingBoxCaching_get, Coin_SWIG_Python.SoSeparatorKit_boundingBoxCaching_set)
    renderCulling = _swig_property(Coin_SWIG_Python.SoSeparatorKit_renderCulling_get, Coin_SWIG_Python.SoSeparatorKit_renderCulling_set)
    pickCulling = _swig_property(Coin_SWIG_Python.SoSeparatorKit_pickCulling_get, Coin_SWIG_Python.SoSeparatorKit_pickCulling_set)
    initClass = staticmethod(Coin_SWIG_Python.SoSeparatorKit_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSeparatorKit
    __del__ = lambda self : None;
SoSeparatorKit_swigregister = Coin_SWIG_Python.SoSeparatorKit_swigregister
SoSeparatorKit_swigregister(SoSeparatorKit)
SoSeparatorKit_getClassTypeId = Coin_SWIG_Python.SoSeparatorKit_getClassTypeId
SoSeparatorKit_getClassNodekitCatalog = Coin_SWIG_Python.SoSeparatorKit_getClassNodekitCatalog
SoSeparatorKit_initClass = Coin_SWIG_Python.SoSeparatorKit_initClass

class SoShapeKit(SoSeparatorKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShapeKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShapeKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoShapeKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoShapeKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShapeKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShapeKit_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShapeKit
    __del__ = lambda self : None;
SoShapeKit_swigregister = Coin_SWIG_Python.SoShapeKit_swigregister
SoShapeKit_swigregister(SoShapeKit)
SoShapeKit_getClassTypeId = Coin_SWIG_Python.SoShapeKit_getClassTypeId
SoShapeKit_getClassNodekitCatalog = Coin_SWIG_Python.SoShapeKit_getClassNodekitCatalog
SoShapeKit_initClass = Coin_SWIG_Python.SoShapeKit_initClass

class SoWrapperKit(SoSeparatorKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoWrapperKit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoWrapperKit_getTypeId(*args)
    getClassNodekitCatalog = staticmethod(Coin_SWIG_Python.SoWrapperKit_getClassNodekitCatalog)
    def getNodekitCatalog(*args): return Coin_SWIG_Python.SoWrapperKit_getNodekitCatalog(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoWrapperKit(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoWrapperKit_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWrapperKit
    __del__ = lambda self : None;
SoWrapperKit_swigregister = Coin_SWIG_Python.SoWrapperKit_swigregister
SoWrapperKit_swigregister(SoWrapperKit)
SoWrapperKit_getClassTypeId = Coin_SWIG_Python.SoWrapperKit_getClassTypeId
SoWrapperKit_getClassNodekitCatalog = Coin_SWIG_Python.SoWrapperKit_getClassNodekitCatalog
SoWrapperKit_initClass = Coin_SWIG_Python.SoWrapperKit_initClass

class SoGroup(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGroup_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoGroup_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoGroup_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def addChild(*args): return Coin_SWIG_Python.SoGroup_addChild(*args)
    def insertChild(*args): return Coin_SWIG_Python.SoGroup_insertChild(*args)
    def getChild(*args): return Coin_SWIG_Python.SoGroup_getChild(*args)
    def findChild(*args): return Coin_SWIG_Python.SoGroup_findChild(*args)
    def getNumChildren(*args): return Coin_SWIG_Python.SoGroup_getNumChildren(*args)
    def removeChild(*args): return Coin_SWIG_Python.SoGroup_removeChild(*args)
    def removeAllChildren(*args): return Coin_SWIG_Python.SoGroup_removeAllChildren(*args)
    def replaceChild(*args): return Coin_SWIG_Python.SoGroup_replaceChild(*args)
    def doAction(*args): return Coin_SWIG_Python.SoGroup_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoGroup_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoGroup_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoGroup_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoGroup_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoGroup_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoGroup_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoGroup_search(*args)
    def write(*args): return Coin_SWIG_Python.SoGroup_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoGroup_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoGroup_audioRender(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoGroup_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGroup
    __del__ = lambda self : None;
SoGroup_swigregister = Coin_SWIG_Python.SoGroup_swigregister
SoGroup_swigregister(SoGroup)
SoGroup_getClassTypeId = Coin_SWIG_Python.SoGroup_getClassTypeId
SoGroup_initClass = Coin_SWIG_Python.SoGroup_initClass

class SoSeparator(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSeparator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSeparator_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSeparator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSeparator(*args)
        try: self.this.append(this)
        except: self.this = this
    OFF = Coin_SWIG_Python.SoSeparator_OFF
    ON = Coin_SWIG_Python.SoSeparator_ON
    AUTO = Coin_SWIG_Python.SoSeparator_AUTO
    renderCaching = _swig_property(Coin_SWIG_Python.SoSeparator_renderCaching_get, Coin_SWIG_Python.SoSeparator_renderCaching_set)
    boundingBoxCaching = _swig_property(Coin_SWIG_Python.SoSeparator_boundingBoxCaching_get, Coin_SWIG_Python.SoSeparator_boundingBoxCaching_set)
    renderCulling = _swig_property(Coin_SWIG_Python.SoSeparator_renderCulling_get, Coin_SWIG_Python.SoSeparator_renderCulling_set)
    pickCulling = _swig_property(Coin_SWIG_Python.SoSeparator_pickCulling_get, Coin_SWIG_Python.SoSeparator_pickCulling_set)
    def doAction(*args): return Coin_SWIG_Python.SoSeparator_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoSeparator_GLRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoSeparator_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoSeparator_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoSeparator_GLRenderOffPath(*args)
    def callback(*args): return Coin_SWIG_Python.SoSeparator_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoSeparator_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoSeparator_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoSeparator_handleEvent(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoSeparator_rayPick(*args)
    def search(*args): return Coin_SWIG_Python.SoSeparator_search(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoSeparator_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoSeparator_audioRender(*args)
    def notify(*args): return Coin_SWIG_Python.SoSeparator_notify(*args)
    setNumRenderCaches = staticmethod(Coin_SWIG_Python.SoSeparator_setNumRenderCaches)
    getNumRenderCaches = staticmethod(Coin_SWIG_Python.SoSeparator_getNumRenderCaches)
    def affectsState(*args): return Coin_SWIG_Python.SoSeparator_affectsState(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSeparator
    __del__ = lambda self : None;
SoSeparator_swigregister = Coin_SWIG_Python.SoSeparator_swigregister
SoSeparator_swigregister(SoSeparator)
SoSeparator_getClassTypeId = Coin_SWIG_Python.SoSeparator_getClassTypeId
SoSeparator_initClass = Coin_SWIG_Python.SoSeparator_initClass
SoSeparator_setNumRenderCaches = Coin_SWIG_Python.SoSeparator_setNumRenderCaches
SoSeparator_getNumRenderCaches = Coin_SWIG_Python.SoSeparator_getNumRenderCaches

class SoAnnotation(SoSeparator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAnnotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoAnnotation_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoAnnotation_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoAnnotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return Coin_SWIG_Python.SoAnnotation_GLRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoAnnotation_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoAnnotation_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoAnnotation_GLRenderOffPath(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAnnotation
    __del__ = lambda self : None;
SoAnnotation_swigregister = Coin_SWIG_Python.SoAnnotation_swigregister
SoAnnotation_swigregister(SoAnnotation)
SoAnnotation_getClassTypeId = Coin_SWIG_Python.SoAnnotation_getClassTypeId
SoAnnotation_initClass = Coin_SWIG_Python.SoAnnotation_initClass

class SoAntiSquish(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAntiSquish_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoAntiSquish_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoAntiSquish_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoAntiSquish(*args)
        try: self.this.append(this)
        except: self.this = this
    X = Coin_SWIG_Python.SoAntiSquish_X
    Y = Coin_SWIG_Python.SoAntiSquish_Y
    Z = Coin_SWIG_Python.SoAntiSquish_Z
    AVERAGE_DIMENSION = Coin_SWIG_Python.SoAntiSquish_AVERAGE_DIMENSION
    BIGGEST_DIMENSION = Coin_SWIG_Python.SoAntiSquish_BIGGEST_DIMENSION
    SMALLEST_DIMENSION = Coin_SWIG_Python.SoAntiSquish_SMALLEST_DIMENSION
    LONGEST_DIAGONAL = Coin_SWIG_Python.SoAntiSquish_LONGEST_DIAGONAL
    sizing = _swig_property(Coin_SWIG_Python.SoAntiSquish_sizing_get, Coin_SWIG_Python.SoAntiSquish_sizing_set)
    recalcAlways = _swig_property(Coin_SWIG_Python.SoAntiSquish_recalcAlways_get, Coin_SWIG_Python.SoAntiSquish_recalcAlways_set)
    def recalc(*args): return Coin_SWIG_Python.SoAntiSquish_recalc(*args)
    def doAction(*args): return Coin_SWIG_Python.SoAntiSquish_doAction(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAntiSquish
    __del__ = lambda self : None;
SoAntiSquish_swigregister = Coin_SWIG_Python.SoAntiSquish_swigregister
SoAntiSquish_swigregister(SoAntiSquish)
SoAntiSquish_getClassTypeId = Coin_SWIG_Python.SoAntiSquish_getClassTypeId
SoAntiSquish_initClass = Coin_SWIG_Python.SoAntiSquish_initClass

class SoArray(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoArray_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoArray_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoArray_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoArray(*args)
        try: self.this.append(this)
        except: self.this = this
    FIRST = Coin_SWIG_Python.SoArray_FIRST
    CENTER = Coin_SWIG_Python.SoArray_CENTER
    LAST = Coin_SWIG_Python.SoArray_LAST
    origin = _swig_property(Coin_SWIG_Python.SoArray_origin_get, Coin_SWIG_Python.SoArray_origin_set)
    numElements1 = _swig_property(Coin_SWIG_Python.SoArray_numElements1_get, Coin_SWIG_Python.SoArray_numElements1_set)
    numElements2 = _swig_property(Coin_SWIG_Python.SoArray_numElements2_get, Coin_SWIG_Python.SoArray_numElements2_set)
    numElements3 = _swig_property(Coin_SWIG_Python.SoArray_numElements3_get, Coin_SWIG_Python.SoArray_numElements3_set)
    separation1 = _swig_property(Coin_SWIG_Python.SoArray_separation1_get, Coin_SWIG_Python.SoArray_separation1_set)
    separation2 = _swig_property(Coin_SWIG_Python.SoArray_separation2_get, Coin_SWIG_Python.SoArray_separation2_set)
    separation3 = _swig_property(Coin_SWIG_Python.SoArray_separation3_get, Coin_SWIG_Python.SoArray_separation3_set)
    def affectsState(*args): return Coin_SWIG_Python.SoArray_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoArray_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoArray_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoArray_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoArray_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoArray_getBoundingBox(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoArray_handleEvent(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoArray_getMatrix(*args)
    def search(*args): return Coin_SWIG_Python.SoArray_search(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoArray_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoArray_audioRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoArray
    __del__ = lambda self : None;
SoArray_swigregister = Coin_SWIG_Python.SoArray_swigregister
SoArray_swigregister(SoArray)
SoArray_getClassTypeId = Coin_SWIG_Python.SoArray_getClassTypeId
SoArray_initClass = Coin_SWIG_Python.SoArray_initClass

class SoAsciiText(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoAsciiText_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoAsciiText_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoAsciiText_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoAsciiText(*args)
        try: self.this.append(this)
        except: self.this = this
    LEFT = Coin_SWIG_Python.SoAsciiText_LEFT
    RIGHT = Coin_SWIG_Python.SoAsciiText_RIGHT
    CENTER = Coin_SWIG_Python.SoAsciiText_CENTER
    string = _swig_property(Coin_SWIG_Python.SoAsciiText_string_get, Coin_SWIG_Python.SoAsciiText_string_set)
    spacing = _swig_property(Coin_SWIG_Python.SoAsciiText_spacing_get, Coin_SWIG_Python.SoAsciiText_spacing_set)
    justification = _swig_property(Coin_SWIG_Python.SoAsciiText_justification_get, Coin_SWIG_Python.SoAsciiText_justification_set)
    width = _swig_property(Coin_SWIG_Python.SoAsciiText_width_get, Coin_SWIG_Python.SoAsciiText_width_set)
    def GLRender(*args): return Coin_SWIG_Python.SoAsciiText_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoAsciiText_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoAsciiText
    __del__ = lambda self : None;
SoAsciiText_swigregister = Coin_SWIG_Python.SoAsciiText_swigregister
SoAsciiText_swigregister(SoAsciiText)
SoAsciiText_getClassTypeId = Coin_SWIG_Python.SoAsciiText_getClassTypeId
SoAsciiText_initClass = Coin_SWIG_Python.SoAsciiText_initClass

class SoBaseColor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBaseColor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBaseColor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoBaseColor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBaseColor(*args)
        try: self.this.append(this)
        except: self.this = this
    rgb = _swig_property(Coin_SWIG_Python.SoBaseColor_rgb_get, Coin_SWIG_Python.SoBaseColor_rgb_set)
    def doAction(*args): return Coin_SWIG_Python.SoBaseColor_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoBaseColor_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoBaseColor_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBaseColor
    __del__ = lambda self : None;
SoBaseColor_swigregister = Coin_SWIG_Python.SoBaseColor_swigregister
SoBaseColor_swigregister(SoBaseColor)
SoBaseColor_getClassTypeId = Coin_SWIG_Python.SoBaseColor_getClassTypeId
SoBaseColor_initClass = Coin_SWIG_Python.SoBaseColor_initClass

SO_SWITCH_NONE = Coin_SWIG_Python.SO_SWITCH_NONE
SO_SWITCH_INHERIT = Coin_SWIG_Python.SO_SWITCH_INHERIT
SO_SWITCH_ALL = Coin_SWIG_Python.SO_SWITCH_ALL
class SoSwitch(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSwitch_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSwitch_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSwitch_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSwitch(*args)
        try: self.this.append(this)
        except: self.this = this
    whichChild = _swig_property(Coin_SWIG_Python.SoSwitch_whichChild_get, Coin_SWIG_Python.SoSwitch_whichChild_set)
    def affectsState(*args): return Coin_SWIG_Python.SoSwitch_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoSwitch_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoSwitch_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoSwitch_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoSwitch_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoSwitch_getBoundingBox(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoSwitch_handleEvent(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoSwitch_getMatrix(*args)
    def search(*args): return Coin_SWIG_Python.SoSwitch_search(*args)
    def write(*args): return Coin_SWIG_Python.SoSwitch_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoSwitch_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoSwitch_audioRender(*args)
    def notify(*args): return Coin_SWIG_Python.SoSwitch_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSwitch
    __del__ = lambda self : None;
SoSwitch_swigregister = Coin_SWIG_Python.SoSwitch_swigregister
SoSwitch_swigregister(SoSwitch)
SoSwitch_getClassTypeId = Coin_SWIG_Python.SoSwitch_getClassTypeId
SoSwitch_initClass = Coin_SWIG_Python.SoSwitch_initClass

class SoBlinker(SoSwitch):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBlinker_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBlinker_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoBlinker_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBlinker(*args)
        try: self.this.append(this)
        except: self.this = this
    speed = _swig_property(Coin_SWIG_Python.SoBlinker_speed_get, Coin_SWIG_Python.SoBlinker_speed_set)
    on = _swig_property(Coin_SWIG_Python.SoBlinker_on_get, Coin_SWIG_Python.SoBlinker_on_set)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoBlinker_getBoundingBox(*args)
    def write(*args): return Coin_SWIG_Python.SoBlinker_write(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBlinker
    __del__ = lambda self : None;
SoBlinker_swigregister = Coin_SWIG_Python.SoBlinker_swigregister
SoBlinker_swigregister(SoBlinker)
SoBlinker_getClassTypeId = Coin_SWIG_Python.SoBlinker_getClassTypeId
SoBlinker_initClass = Coin_SWIG_Python.SoBlinker_initClass

class SoBumpMapCoordinate(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinate_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBumpMapCoordinate_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoBumpMapCoordinate_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBumpMapCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoBumpMapCoordinate_point_get, Coin_SWIG_Python.SoBumpMapCoordinate_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoBumpMapCoordinate_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoBumpMapCoordinate_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoBumpMapCoordinate_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoBumpMapCoordinate_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBumpMapCoordinate
    __del__ = lambda self : None;
SoBumpMapCoordinate_swigregister = Coin_SWIG_Python.SoBumpMapCoordinate_swigregister
SoBumpMapCoordinate_swigregister(SoBumpMapCoordinate)
SoBumpMapCoordinate_getClassTypeId = Coin_SWIG_Python.SoBumpMapCoordinate_getClassTypeId
SoBumpMapCoordinate_initClass = Coin_SWIG_Python.SoBumpMapCoordinate_initClass

class SoBumpMap(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBumpMap_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBumpMap_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoBumpMap_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBumpMap(*args)
        try: self.this.append(this)
        except: self.this = this
    REPEAT = Coin_SWIG_Python.SoBumpMap_REPEAT
    CLAMP = Coin_SWIG_Python.SoBumpMap_CLAMP
    filename = _swig_property(Coin_SWIG_Python.SoBumpMap_filename_get, Coin_SWIG_Python.SoBumpMap_filename_set)
    image = _swig_property(Coin_SWIG_Python.SoBumpMap_image_get, Coin_SWIG_Python.SoBumpMap_image_set)
    wrapS = _swig_property(Coin_SWIG_Python.SoBumpMap_wrapS_get, Coin_SWIG_Python.SoBumpMap_wrapS_set)
    wrapT = _swig_property(Coin_SWIG_Python.SoBumpMap_wrapT_get, Coin_SWIG_Python.SoBumpMap_wrapT_set)
    def doAction(*args): return Coin_SWIG_Python.SoBumpMap_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoBumpMap_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoBumpMap_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoBumpMap_rayPick(*args)
    readImage = staticmethod(Coin_SWIG_Python.SoBumpMap_readImage)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBumpMap
    __del__ = lambda self : None;
SoBumpMap_swigregister = Coin_SWIG_Python.SoBumpMap_swigregister
SoBumpMap_swigregister(SoBumpMap)
SoBumpMap_getClassTypeId = Coin_SWIG_Python.SoBumpMap_getClassTypeId
SoBumpMap_initClass = Coin_SWIG_Python.SoBumpMap_initClass
SoBumpMap_readImage = Coin_SWIG_Python.SoBumpMap_readImage

class SoBumpMapTransform(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoBumpMapTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoBumpMapTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoBumpMapTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoBumpMapTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoBumpMapTransform_translation_get, Coin_SWIG_Python.SoBumpMapTransform_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoBumpMapTransform_rotation_get, Coin_SWIG_Python.SoBumpMapTransform_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoBumpMapTransform_scaleFactor_get, Coin_SWIG_Python.SoBumpMapTransform_scaleFactor_set)
    center = _swig_property(Coin_SWIG_Python.SoBumpMapTransform_center_get, Coin_SWIG_Python.SoBumpMapTransform_center_set)
    def doAction(*args): return Coin_SWIG_Python.SoBumpMapTransform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoBumpMapTransform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoBumpMapTransform_GLRender(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoBumpMapTransform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoBumpMapTransform_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoBumpMapTransform
    __del__ = lambda self : None;
SoBumpMapTransform_swigregister = Coin_SWIG_Python.SoBumpMapTransform_swigregister
SoBumpMapTransform_swigregister(SoBumpMapTransform)
SoBumpMapTransform_getClassTypeId = Coin_SWIG_Python.SoBumpMapTransform_getClassTypeId
SoBumpMapTransform_initClass = Coin_SWIG_Python.SoBumpMapTransform_initClass

class SoCallback(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCallback_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCallback_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCallback_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoCallback_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoCallback_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoCallback_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoCallback_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoCallback_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoCallback_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoCallback_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoCallback_search(*args)
    def write(*args): return Coin_SWIG_Python.SoCallback_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCallback_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCallback
    __del__ = lambda self : None;
    def setCallback(*args): return Coin_SWIG_Python.SoCallback_setCallback(*args)
SoCallback_swigregister = Coin_SWIG_Python.SoCallback_swigregister
SoCallback_swigregister(SoCallback)
SoCallback_getClassTypeId = Coin_SWIG_Python.SoCallback_getClassTypeId
SoCallback_initClass = Coin_SWIG_Python.SoCallback_initClass

SO_ASPECT_SQUARE = Coin_SWIG_Python.SO_ASPECT_SQUARE
SO_ASPECT_VIDEO = Coin_SWIG_Python.SO_ASPECT_VIDEO
SO_ASPECT_35mm_ACADEMY = Coin_SWIG_Python.SO_ASPECT_35mm_ACADEMY
SO_ASPECT_16mm = Coin_SWIG_Python.SO_ASPECT_16mm
SO_ASPECT_35mm_FULL = Coin_SWIG_Python.SO_ASPECT_35mm_FULL
SO_ASPECT_70mm = Coin_SWIG_Python.SO_ASPECT_70mm
SO_ASPECT_CINEMASCOPE = Coin_SWIG_Python.SO_ASPECT_CINEMASCOPE
SO_ASPECT_HDTV = Coin_SWIG_Python.SO_ASPECT_HDTV
SO_ASPECT_PANAVISION = Coin_SWIG_Python.SO_ASPECT_PANAVISION
SO_ASPECT_35mm = Coin_SWIG_Python.SO_ASPECT_35mm
SO_ASPECT_VISTAVISION = Coin_SWIG_Python.SO_ASPECT_VISTAVISION
class SoCamera(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCamera_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCamera_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCamera_initClass)
    CROP_VIEWPORT_FILL_FRAME = Coin_SWIG_Python.SoCamera_CROP_VIEWPORT_FILL_FRAME
    CROP_VIEWPORT_LINE_FRAME = Coin_SWIG_Python.SoCamera_CROP_VIEWPORT_LINE_FRAME
    CROP_VIEWPORT_NO_FRAME = Coin_SWIG_Python.SoCamera_CROP_VIEWPORT_NO_FRAME
    ADJUST_CAMERA = Coin_SWIG_Python.SoCamera_ADJUST_CAMERA
    LEAVE_ALONE = Coin_SWIG_Python.SoCamera_LEAVE_ALONE
    viewportMapping = _swig_property(Coin_SWIG_Python.SoCamera_viewportMapping_get, Coin_SWIG_Python.SoCamera_viewportMapping_set)
    position = _swig_property(Coin_SWIG_Python.SoCamera_position_get, Coin_SWIG_Python.SoCamera_position_set)
    orientation = _swig_property(Coin_SWIG_Python.SoCamera_orientation_get, Coin_SWIG_Python.SoCamera_orientation_set)
    aspectRatio = _swig_property(Coin_SWIG_Python.SoCamera_aspectRatio_get, Coin_SWIG_Python.SoCamera_aspectRatio_set)
    nearDistance = _swig_property(Coin_SWIG_Python.SoCamera_nearDistance_get, Coin_SWIG_Python.SoCamera_nearDistance_set)
    farDistance = _swig_property(Coin_SWIG_Python.SoCamera_farDistance_get, Coin_SWIG_Python.SoCamera_farDistance_set)
    focalDistance = _swig_property(Coin_SWIG_Python.SoCamera_focalDistance_get, Coin_SWIG_Python.SoCamera_focalDistance_set)
    def pointAt(*args): return Coin_SWIG_Python.SoCamera_pointAt(*args)
    def scaleHeight(*args): return Coin_SWIG_Python.SoCamera_scaleHeight(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoCamera_getViewVolume(*args)
    def viewAll(*args): return Coin_SWIG_Python.SoCamera_viewAll(*args)
    def getViewportBounds(*args): return Coin_SWIG_Python.SoCamera_getViewportBounds(*args)
    MONOSCOPIC = Coin_SWIG_Python.SoCamera_MONOSCOPIC
    LEFT_VIEW = Coin_SWIG_Python.SoCamera_LEFT_VIEW
    RIGHT_VIEW = Coin_SWIG_Python.SoCamera_RIGHT_VIEW
    def setStereoMode(*args): return Coin_SWIG_Python.SoCamera_setStereoMode(*args)
    def getStereoMode(*args): return Coin_SWIG_Python.SoCamera_getStereoMode(*args)
    def setStereoAdjustment(*args): return Coin_SWIG_Python.SoCamera_setStereoAdjustment(*args)
    def getStereoAdjustment(*args): return Coin_SWIG_Python.SoCamera_getStereoAdjustment(*args)
    def setBalanceAdjustment(*args): return Coin_SWIG_Python.SoCamera_setBalanceAdjustment(*args)
    def getBalanceAdjustment(*args): return Coin_SWIG_Python.SoCamera_getBalanceAdjustment(*args)
    def doAction(*args): return Coin_SWIG_Python.SoCamera_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoCamera_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoCamera_GLRender(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoCamera_audioRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoCamera_getBoundingBox(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoCamera_handleEvent(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoCamera_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCamera_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCamera
    __del__ = lambda self : None;
SoCamera_swigregister = Coin_SWIG_Python.SoCamera_swigregister
SoCamera_swigregister(SoCamera)
SoCamera_getClassTypeId = Coin_SWIG_Python.SoCamera_getClassTypeId
SoCamera_initClass = Coin_SWIG_Python.SoCamera_initClass

class SoColorIndex(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoColorIndex_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoColorIndex_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoColorIndex_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoColorIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    index = _swig_property(Coin_SWIG_Python.SoColorIndex_index_get, Coin_SWIG_Python.SoColorIndex_index_set)
    def GLRender(*args): return Coin_SWIG_Python.SoColorIndex_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoColorIndex
    __del__ = lambda self : None;
SoColorIndex_swigregister = Coin_SWIG_Python.SoColorIndex_swigregister
SoColorIndex_swigregister(SoColorIndex)
SoColorIndex_getClassTypeId = Coin_SWIG_Python.SoColorIndex_getClassTypeId
SoColorIndex_initClass = Coin_SWIG_Python.SoColorIndex_initClass

class SoCone(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCone_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCone_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCone_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCone(*args)
        try: self.this.append(this)
        except: self.this = this
    SIDES = Coin_SWIG_Python.SoCone_SIDES
    BOTTOM = Coin_SWIG_Python.SoCone_BOTTOM
    ALL = Coin_SWIG_Python.SoCone_ALL
    parts = _swig_property(Coin_SWIG_Python.SoCone_parts_get, Coin_SWIG_Python.SoCone_parts_set)
    bottomRadius = _swig_property(Coin_SWIG_Python.SoCone_bottomRadius_get, Coin_SWIG_Python.SoCone_bottomRadius_set)
    height = _swig_property(Coin_SWIG_Python.SoCone_height_get, Coin_SWIG_Python.SoCone_height_set)
    def addPart(*args): return Coin_SWIG_Python.SoCone_addPart(*args)
    def removePart(*args): return Coin_SWIG_Python.SoCone_removePart(*args)
    def hasPart(*args): return Coin_SWIG_Python.SoCone_hasPart(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoCone_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoCone_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCone_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCone
    __del__ = lambda self : None;
SoCone_swigregister = Coin_SWIG_Python.SoCone_swigregister
SoCone_swigregister(SoCone)
SoCone_getClassTypeId = Coin_SWIG_Python.SoCone_getClassTypeId
SoCone_initClass = Coin_SWIG_Python.SoCone_initClass

class SoCoordinate3(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCoordinate3_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCoordinate3_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCoordinate3_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCoordinate3(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoCoordinate3_point_get, Coin_SWIG_Python.SoCoordinate3_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoCoordinate3_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoCoordinate3_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoCoordinate3_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoCoordinate3_getBoundingBox(*args)
    def pick(*args): return Coin_SWIG_Python.SoCoordinate3_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCoordinate3_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCoordinate3
    __del__ = lambda self : None;
SoCoordinate3_swigregister = Coin_SWIG_Python.SoCoordinate3_swigregister
SoCoordinate3_swigregister(SoCoordinate3)
SoCoordinate3_getClassTypeId = Coin_SWIG_Python.SoCoordinate3_getClassTypeId
SoCoordinate3_initClass = Coin_SWIG_Python.SoCoordinate3_initClass

class SoCoordinate4(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCoordinate4_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCoordinate4_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCoordinate4_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCoordinate4(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoCoordinate4_point_get, Coin_SWIG_Python.SoCoordinate4_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoCoordinate4_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoCoordinate4_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoCoordinate4_getBoundingBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoCoordinate4_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoCoordinate4_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCoordinate4_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCoordinate4
    __del__ = lambda self : None;
SoCoordinate4_swigregister = Coin_SWIG_Python.SoCoordinate4_swigregister
SoCoordinate4_swigregister(SoCoordinate4)
SoCoordinate4_getClassTypeId = Coin_SWIG_Python.SoCoordinate4_getClassTypeId
SoCoordinate4_initClass = Coin_SWIG_Python.SoCoordinate4_initClass

class SoCube(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCube_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCube_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCube_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCube(*args)
        try: self.this.append(this)
        except: self.this = this
    width = _swig_property(Coin_SWIG_Python.SoCube_width_get, Coin_SWIG_Python.SoCube_width_set)
    height = _swig_property(Coin_SWIG_Python.SoCube_height_get, Coin_SWIG_Python.SoCube_height_set)
    depth = _swig_property(Coin_SWIG_Python.SoCube_depth_get, Coin_SWIG_Python.SoCube_depth_set)
    def GLRender(*args): return Coin_SWIG_Python.SoCube_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoCube_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCube_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCube
    __del__ = lambda self : None;
SoCube_swigregister = Coin_SWIG_Python.SoCube_swigregister
SoCube_swigregister(SoCube)
SoCube_getClassTypeId = Coin_SWIG_Python.SoCube_getClassTypeId
SoCube_initClass = Coin_SWIG_Python.SoCube_initClass

class SoCylinder(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoCylinder_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoCylinder_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoCylinder_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    SIDES = Coin_SWIG_Python.SoCylinder_SIDES
    TOP = Coin_SWIG_Python.SoCylinder_TOP
    BOTTOM = Coin_SWIG_Python.SoCylinder_BOTTOM
    ALL = Coin_SWIG_Python.SoCylinder_ALL
    radius = _swig_property(Coin_SWIG_Python.SoCylinder_radius_get, Coin_SWIG_Python.SoCylinder_radius_set)
    height = _swig_property(Coin_SWIG_Python.SoCylinder_height_get, Coin_SWIG_Python.SoCylinder_height_set)
    parts = _swig_property(Coin_SWIG_Python.SoCylinder_parts_get, Coin_SWIG_Python.SoCylinder_parts_set)
    def addPart(*args): return Coin_SWIG_Python.SoCylinder_addPart(*args)
    def removePart(*args): return Coin_SWIG_Python.SoCylinder_removePart(*args)
    def hasPart(*args): return Coin_SWIG_Python.SoCylinder_hasPart(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoCylinder_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoCylinder_getPrimitiveCount(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoCylinder_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoCylinder
    __del__ = lambda self : None;
SoCylinder_swigregister = Coin_SWIG_Python.SoCylinder_swigregister
SoCylinder_swigregister(SoCylinder)
SoCylinder_getClassTypeId = Coin_SWIG_Python.SoCylinder_getClassTypeId
SoCylinder_initClass = Coin_SWIG_Python.SoCylinder_initClass

class SoEnvironment(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoEnvironment_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoEnvironment_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoEnvironment_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEnvironment(*args)
        try: self.this.append(this)
        except: self.this = this
    NONE = Coin_SWIG_Python.SoEnvironment_NONE
    HAZE = Coin_SWIG_Python.SoEnvironment_HAZE
    FOG = Coin_SWIG_Python.SoEnvironment_FOG
    SMOKE = Coin_SWIG_Python.SoEnvironment_SMOKE
    def GLRender(*args): return Coin_SWIG_Python.SoEnvironment_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoEnvironment_callback(*args)
    ambientIntensity = _swig_property(Coin_SWIG_Python.SoEnvironment_ambientIntensity_get, Coin_SWIG_Python.SoEnvironment_ambientIntensity_set)
    ambientColor = _swig_property(Coin_SWIG_Python.SoEnvironment_ambientColor_get, Coin_SWIG_Python.SoEnvironment_ambientColor_set)
    attenuation = _swig_property(Coin_SWIG_Python.SoEnvironment_attenuation_get, Coin_SWIG_Python.SoEnvironment_attenuation_set)
    fogType = _swig_property(Coin_SWIG_Python.SoEnvironment_fogType_get, Coin_SWIG_Python.SoEnvironment_fogType_set)
    fogColor = _swig_property(Coin_SWIG_Python.SoEnvironment_fogColor_get, Coin_SWIG_Python.SoEnvironment_fogColor_set)
    fogVisibility = _swig_property(Coin_SWIG_Python.SoEnvironment_fogVisibility_get, Coin_SWIG_Python.SoEnvironment_fogVisibility_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEnvironment
    __del__ = lambda self : None;
SoEnvironment_swigregister = Coin_SWIG_Python.SoEnvironment_swigregister
SoEnvironment_swigregister(SoEnvironment)
SoEnvironment_getClassTypeId = Coin_SWIG_Python.SoEnvironment_getClassTypeId
SoEnvironment_initClass = Coin_SWIG_Python.SoEnvironment_initClass

class SoEventCallback(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoEventCallback_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoEventCallback_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoEventCallback_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoEventCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPath(*args): return Coin_SWIG_Python.SoEventCallback_setPath(*args)
    def getPath(*args): return Coin_SWIG_Python.SoEventCallback_getPath(*args)
    def getAction(*args): return Coin_SWIG_Python.SoEventCallback_getAction(*args)
    def getEvent(*args): return Coin_SWIG_Python.SoEventCallback_getEvent(*args)
    def getPickedPoint(*args): return Coin_SWIG_Python.SoEventCallback_getPickedPoint(*args)
    def setHandled(*args): return Coin_SWIG_Python.SoEventCallback_setHandled(*args)
    def isHandled(*args): return Coin_SWIG_Python.SoEventCallback_isHandled(*args)
    def grabEvents(*args): return Coin_SWIG_Python.SoEventCallback_grabEvents(*args)
    def releaseEvents(*args): return Coin_SWIG_Python.SoEventCallback_releaseEvents(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoEventCallback
    __del__ = lambda self : None;
    def addEventCallback(*args): return Coin_SWIG_Python.SoEventCallback_addEventCallback(*args)
    def removeEventCallback(*args): return Coin_SWIG_Python.SoEventCallback_removeEventCallback(*args)
SoEventCallback_swigregister = Coin_SWIG_Python.SoEventCallback_swigregister
SoEventCallback_swigregister(SoEventCallback)
SoEventCallback_getClassTypeId = Coin_SWIG_Python.SoEventCallback_getClassTypeId
SoEventCallback_initClass = Coin_SWIG_Python.SoEventCallback_initClass

class SoSelection(SoSeparator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSelection_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSelection_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSelection_initClass)
    SINGLE = Coin_SWIG_Python.SoSelection_SINGLE
    TOGGLE = Coin_SWIG_Python.SoSelection_TOGGLE
    SHIFT = Coin_SWIG_Python.SoSelection_SHIFT
    policy = _swig_property(Coin_SWIG_Python.SoSelection_policy_get, Coin_SWIG_Python.SoSelection_policy_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSelection(*args)
        try: self.this.append(this)
        except: self.this = this
    def select(*args): return Coin_SWIG_Python.SoSelection_select(*args)
    def deselect(*args): return Coin_SWIG_Python.SoSelection_deselect(*args)
    def toggle(*args): return Coin_SWIG_Python.SoSelection_toggle(*args)
    def isSelected(*args): return Coin_SWIG_Python.SoSelection_isSelected(*args)
    def deselectAll(*args): return Coin_SWIG_Python.SoSelection_deselectAll(*args)
    def getNumSelected(*args): return Coin_SWIG_Python.SoSelection_getNumSelected(*args)
    def getList(*args): return Coin_SWIG_Python.SoSelection_getList(*args)
    def getPath(*args): return Coin_SWIG_Python.SoSelection_getPath(*args)
    def setPickMatching(*args): return Coin_SWIG_Python.SoSelection_setPickMatching(*args)
    def isPickMatching(*args): return Coin_SWIG_Python.SoSelection_isPickMatching(*args)
    def getPickMatching(*args): return Coin_SWIG_Python.SoSelection_getPickMatching(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSelection
    __del__ = lambda self : None;
    def addSelectionCallback(*args): return Coin_SWIG_Python.SoSelection_addSelectionCallback(*args)
    def removeSelectionCallback(*args): return Coin_SWIG_Python.SoSelection_removeSelectionCallback(*args)
    def addDeselectionCallback(*args): return Coin_SWIG_Python.SoSelection_addDeselectionCallback(*args)
    def removeDeselectionCallback(*args): return Coin_SWIG_Python.SoSelection_removeDeselectionCallback(*args)
    def addStartCallback(*args): return Coin_SWIG_Python.SoSelection_addStartCallback(*args)
    def removeStartCallback(*args): return Coin_SWIG_Python.SoSelection_removeStartCallback(*args)
    def addFinishCallback(*args): return Coin_SWIG_Python.SoSelection_addFinishCallback(*args)
    def removeFinishCallback(*args): return Coin_SWIG_Python.SoSelection_removeFinishCallback(*args)
    def setPickFilterCallback(*args): return Coin_SWIG_Python.SoSelection_setPickFilterCallback(*args)
    def addChangeCallback(*args): return Coin_SWIG_Python.SoSelection_addChangeCallback(*args)
    def removeChangeCallback(*args): return Coin_SWIG_Python.SoSelection_removeChangeCallback(*args)
SoSelection_swigregister = Coin_SWIG_Python.SoSelection_swigregister
SoSelection_swigregister(SoSelection)
SoSelection_getClassTypeId = Coin_SWIG_Python.SoSelection_getClassTypeId
SoSelection_initClass = Coin_SWIG_Python.SoSelection_initClass

class SoExtSelection(SoSelection):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoExtSelection_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoExtSelection_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoExtSelection_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoExtSelection(*args)
        try: self.this.append(this)
        except: self.this = this
    NOLASSO = Coin_SWIG_Python.SoExtSelection_NOLASSO
    LASSO = Coin_SWIG_Python.SoExtSelection_LASSO
    RECTANGLE = Coin_SWIG_Python.SoExtSelection_RECTANGLE
    FULL_BBOX = Coin_SWIG_Python.SoExtSelection_FULL_BBOX
    PART_BBOX = Coin_SWIG_Python.SoExtSelection_PART_BBOX
    FULL = Coin_SWIG_Python.SoExtSelection_FULL
    PART = Coin_SWIG_Python.SoExtSelection_PART
    ALL_SHAPES = Coin_SWIG_Python.SoExtSelection_ALL_SHAPES
    VISIBLE_SHAPES = Coin_SWIG_Python.SoExtSelection_VISIBLE_SHAPES
    lassoType = _swig_property(Coin_SWIG_Python.SoExtSelection_lassoType_get, Coin_SWIG_Python.SoExtSelection_lassoType_set)
    lassoPolicy = _swig_property(Coin_SWIG_Python.SoExtSelection_lassoPolicy_get, Coin_SWIG_Python.SoExtSelection_lassoPolicy_set)
    lassoMode = _swig_property(Coin_SWIG_Python.SoExtSelection_lassoMode_get, Coin_SWIG_Python.SoExtSelection_lassoMode_set)
    def useOverlay(*args): return Coin_SWIG_Python.SoExtSelection_useOverlay(*args)
    def isUsingOverlay(*args): return Coin_SWIG_Python.SoExtSelection_isUsingOverlay(*args)
    def getOverlaySceneGraph(*args): return Coin_SWIG_Python.SoExtSelection_getOverlaySceneGraph(*args)
    def setOverlayLassoColorIndex(*args): return Coin_SWIG_Python.SoExtSelection_setOverlayLassoColorIndex(*args)
    def getOverlayLassoColorIndex(*args): return Coin_SWIG_Python.SoExtSelection_getOverlayLassoColorIndex(*args)
    def setLassoColor(*args): return Coin_SWIG_Python.SoExtSelection_setLassoColor(*args)
    def getLassoColor(*args): return Coin_SWIG_Python.SoExtSelection_getLassoColor(*args)
    def setLassoWidth(*args): return Coin_SWIG_Python.SoExtSelection_setLassoWidth(*args)
    def getLassoWidth(*args): return Coin_SWIG_Python.SoExtSelection_getLassoWidth(*args)
    def setOverlayLassoPattern(*args): return Coin_SWIG_Python.SoExtSelection_setOverlayLassoPattern(*args)
    def getOverlayLassoPattern(*args): return Coin_SWIG_Python.SoExtSelection_getOverlayLassoPattern(*args)
    def animateOverlayLasso(*args): return Coin_SWIG_Python.SoExtSelection_animateOverlayLasso(*args)
    def isOverlayLassoAnimated(*args): return Coin_SWIG_Python.SoExtSelection_isOverlayLassoAnimated(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoExtSelection_handleEvent(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoExtSelection_GLRenderBelowPath(*args)
    def select(*args): return Coin_SWIG_Python.SoExtSelection_select(*args)
    def getLassoCoordsDC(*args): return Coin_SWIG_Python.SoExtSelection_getLassoCoordsDC(*args)
    def getLassoCoordsWC(*args): return Coin_SWIG_Python.SoExtSelection_getLassoCoordsWC(*args)
    def getSelectionPathList(*args): return Coin_SWIG_Python.SoExtSelection_getSelectionPathList(*args)
    def setLassoFilterCallback(*args): return Coin_SWIG_Python.SoExtSelection_setLassoFilterCallback(*args)
    def setTriangleFilterCallback(*args): return Coin_SWIG_Python.SoExtSelection_setTriangleFilterCallback(*args)
    def setLineSegmentFilterCallback(*args): return Coin_SWIG_Python.SoExtSelection_setLineSegmentFilterCallback(*args)
    def setPointFilterCallback(*args): return Coin_SWIG_Python.SoExtSelection_setPointFilterCallback(*args)
    def wasShiftDown(*args): return Coin_SWIG_Python.SoExtSelection_wasShiftDown(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoExtSelection
    __del__ = lambda self : None;
SoExtSelection_swigregister = Coin_SWIG_Python.SoExtSelection_swigregister
SoExtSelection_swigregister(SoExtSelection)
SoExtSelection_getClassTypeId = Coin_SWIG_Python.SoExtSelection_getClassTypeId
SoExtSelection_initClass = Coin_SWIG_Python.SoExtSelection_initClass

class SoVertexProperty(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVertexProperty_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVertexProperty_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVertexProperty_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVertexProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    OVERALL = Coin_SWIG_Python.SoVertexProperty_OVERALL
    PER_PART = Coin_SWIG_Python.SoVertexProperty_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoVertexProperty_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoVertexProperty_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoVertexProperty_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoVertexProperty_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoVertexProperty_PER_VERTEX_INDEXED
    vertex = _swig_property(Coin_SWIG_Python.SoVertexProperty_vertex_get, Coin_SWIG_Python.SoVertexProperty_vertex_set)
    texCoord = _swig_property(Coin_SWIG_Python.SoVertexProperty_texCoord_get, Coin_SWIG_Python.SoVertexProperty_texCoord_set)
    texCoord3 = _swig_property(Coin_SWIG_Python.SoVertexProperty_texCoord3_get, Coin_SWIG_Python.SoVertexProperty_texCoord3_set)
    normal = _swig_property(Coin_SWIG_Python.SoVertexProperty_normal_get, Coin_SWIG_Python.SoVertexProperty_normal_set)
    normalBinding = _swig_property(Coin_SWIG_Python.SoVertexProperty_normalBinding_get, Coin_SWIG_Python.SoVertexProperty_normalBinding_set)
    orderedRGBA = _swig_property(Coin_SWIG_Python.SoVertexProperty_orderedRGBA_get, Coin_SWIG_Python.SoVertexProperty_orderedRGBA_set)
    materialBinding = _swig_property(Coin_SWIG_Python.SoVertexProperty_materialBinding_get, Coin_SWIG_Python.SoVertexProperty_materialBinding_set)
    def doAction(*args): return Coin_SWIG_Python.SoVertexProperty_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVertexProperty_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVertexProperty_getBoundingBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoVertexProperty_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoVertexProperty_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVertexProperty_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVertexProperty
    __del__ = lambda self : None;
SoVertexProperty_swigregister = Coin_SWIG_Python.SoVertexProperty_swigregister
SoVertexProperty_swigregister(SoVertexProperty)
SoVertexProperty_getClassTypeId = Coin_SWIG_Python.SoVertexProperty_getClassTypeId
SoVertexProperty_initClass = Coin_SWIG_Python.SoVertexProperty_initClass

class SoVertexShape(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVertexShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVertexShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVertexShape_initClass)
    vertexProperty = _swig_property(Coin_SWIG_Python.SoVertexShape_vertexProperty_get, Coin_SWIG_Python.SoVertexShape_vertexProperty_set)
    def notify(*args): return Coin_SWIG_Python.SoVertexShape_notify(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoVertexShape_generateDefaultNormals(*args)
    def write(*args): return Coin_SWIG_Python.SoVertexShape_write(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVertexShape
    __del__ = lambda self : None;
SoVertexShape_swigregister = Coin_SWIG_Python.SoVertexShape_swigregister
SoVertexShape_swigregister(SoVertexShape)
SoVertexShape_getClassTypeId = Coin_SWIG_Python.SoVertexShape_getClassTypeId
SoVertexShape_initClass = Coin_SWIG_Python.SoVertexShape_initClass

class SoNonIndexedShape(SoVertexShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNonIndexedShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNonIndexedShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNonIndexedShape_initClass)
    startIndex = _swig_property(Coin_SWIG_Python.SoNonIndexedShape_startIndex_get, Coin_SWIG_Python.SoNonIndexedShape_startIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNonIndexedShape
    __del__ = lambda self : None;
SoNonIndexedShape_swigregister = Coin_SWIG_Python.SoNonIndexedShape_swigregister
SoNonIndexedShape_swigregister(SoNonIndexedShape)
SoNonIndexedShape_getClassTypeId = Coin_SWIG_Python.SoNonIndexedShape_getClassTypeId
SoNonIndexedShape_initClass = Coin_SWIG_Python.SoNonIndexedShape_initClass

class SoFaceSet(SoNonIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFaceSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFaceSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFaceSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFaceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    numVertices = _swig_property(Coin_SWIG_Python.SoFaceSet_numVertices_get, Coin_SWIG_Python.SoFaceSet_numVertices_set)
    def GLRender(*args): return Coin_SWIG_Python.SoFaceSet_GLRender(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoFaceSet_generateDefaultNormals(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoFaceSet_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFaceSet
    __del__ = lambda self : None;
SoFaceSet_swigregister = Coin_SWIG_Python.SoFaceSet_swigregister
SoFaceSet_swigregister(SoFaceSet)
SoFaceSet_getClassTypeId = Coin_SWIG_Python.SoFaceSet_getClassTypeId
SoFaceSet_initClass = Coin_SWIG_Python.SoFaceSet_initClass

class SoFile(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFile_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFile_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFile_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFile(*args)
        try: self.this.append(this)
        except: self.this = this
    name = _swig_property(Coin_SWIG_Python.SoFile_name_get, Coin_SWIG_Python.SoFile_name_set)
    def doAction(*args): return Coin_SWIG_Python.SoFile_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoFile_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoFile_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoFile_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoFile_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoFile_handleEvent(*args)
    def pick(*args): return Coin_SWIG_Python.SoFile_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoFile_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoFile_audioRender(*args)
    def search(*args): return Coin_SWIG_Python.SoFile_search(*args)
    def copyChildren(*args): return Coin_SWIG_Python.SoFile_copyChildren(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoFile_getChildren(*args)
    def copyContents(*args): return Coin_SWIG_Python.SoFile_copyContents(*args)
    def getFullName(*args): return Coin_SWIG_Python.SoFile_getFullName(*args)
    setSearchOK = staticmethod(Coin_SWIG_Python.SoFile_setSearchOK)
    getSearchOK = staticmethod(Coin_SWIG_Python.SoFile_getSearchOK)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFile
    __del__ = lambda self : None;
SoFile_swigregister = Coin_SWIG_Python.SoFile_swigregister
SoFile_swigregister(SoFile)
SoFile_getClassTypeId = Coin_SWIG_Python.SoFile_getClassTypeId
SoFile_initClass = Coin_SWIG_Python.SoFile_initClass
SoFile_setSearchOK = Coin_SWIG_Python.SoFile_setSearchOK
SoFile_getSearchOK = Coin_SWIG_Python.SoFile_getSearchOK

class SoFont(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFont_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFont_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFont_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFont(*args)
        try: self.this.append(this)
        except: self.this = this
    name = _swig_property(Coin_SWIG_Python.SoFont_name_get, Coin_SWIG_Python.SoFont_name_set)
    size = _swig_property(Coin_SWIG_Python.SoFont_size_get, Coin_SWIG_Python.SoFont_size_set)
    def doAction(*args): return Coin_SWIG_Python.SoFont_doAction(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoFont_getBoundingBox(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoFont_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoFont_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoFont_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoFont_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFont
    __del__ = lambda self : None;
SoFont_swigregister = Coin_SWIG_Python.SoFont_swigregister
SoFont_swigregister(SoFont)
SoFont_getClassTypeId = Coin_SWIG_Python.SoFont_getClassTypeId
SoFont_initClass = Coin_SWIG_Python.SoFont_initClass

class SoFontStyle(SoFont):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFontStyle_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFontStyle_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFontStyle_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFontStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    SERIF = Coin_SWIG_Python.SoFontStyle_SERIF
    SANS = Coin_SWIG_Python.SoFontStyle_SANS
    TYPEWRITER = Coin_SWIG_Python.SoFontStyle_TYPEWRITER
    NONE = Coin_SWIG_Python.SoFontStyle_NONE
    BOLD = Coin_SWIG_Python.SoFontStyle_BOLD
    ITALIC = Coin_SWIG_Python.SoFontStyle_ITALIC
    family = _swig_property(Coin_SWIG_Python.SoFontStyle_family_get, Coin_SWIG_Python.SoFontStyle_family_set)
    style = _swig_property(Coin_SWIG_Python.SoFontStyle_style_get, Coin_SWIG_Python.SoFontStyle_style_set)
    def getFontName(*args): return Coin_SWIG_Python.SoFontStyle_getFontName(*args)
    def doAction(*args): return Coin_SWIG_Python.SoFontStyle_doAction(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoFontStyle_getBoundingBox(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoFontStyle_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoFontStyle_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoFontStyle_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoFontStyle_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFontStyle
    __del__ = lambda self : None;
SoFontStyle_swigregister = Coin_SWIG_Python.SoFontStyle_swigregister
SoFontStyle_swigregister(SoFontStyle)
SoFontStyle_getClassTypeId = Coin_SWIG_Python.SoFontStyle_getClassTypeId
SoFontStyle_initClass = Coin_SWIG_Python.SoFontStyle_initClass

class SoIndexedShape(SoVertexShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIndexedShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoIndexedShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoIndexedShape_initClass)
    coordIndex = _swig_property(Coin_SWIG_Python.SoIndexedShape_coordIndex_get, Coin_SWIG_Python.SoIndexedShape_coordIndex_set)
    materialIndex = _swig_property(Coin_SWIG_Python.SoIndexedShape_materialIndex_get, Coin_SWIG_Python.SoIndexedShape_materialIndex_set)
    normalIndex = _swig_property(Coin_SWIG_Python.SoIndexedShape_normalIndex_get, Coin_SWIG_Python.SoIndexedShape_normalIndex_set)
    textureCoordIndex = _swig_property(Coin_SWIG_Python.SoIndexedShape_textureCoordIndex_get, Coin_SWIG_Python.SoIndexedShape_textureCoordIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedShape
    __del__ = lambda self : None;
SoIndexedShape_swigregister = Coin_SWIG_Python.SoIndexedShape_swigregister
SoIndexedShape_swigregister(SoIndexedShape)
SoIndexedShape_getClassTypeId = Coin_SWIG_Python.SoIndexedShape_getClassTypeId
SoIndexedShape_initClass = Coin_SWIG_Python.SoIndexedShape_initClass

SO_END_FACE_INDEX = Coin_SWIG_Python.SO_END_FACE_INDEX
class SoIndexedFaceSet(SoIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIndexedFaceSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoIndexedFaceSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoIndexedFaceSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIndexedFaceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return Coin_SWIG_Python.SoIndexedFaceSet_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoIndexedFaceSet_getPrimitiveCount(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoIndexedFaceSet_generateDefaultNormals(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedFaceSet
    __del__ = lambda self : None;
SoIndexedFaceSet_swigregister = Coin_SWIG_Python.SoIndexedFaceSet_swigregister
SoIndexedFaceSet_swigregister(SoIndexedFaceSet)
SoIndexedFaceSet_getClassTypeId = Coin_SWIG_Python.SoIndexedFaceSet_getClassTypeId
SoIndexedFaceSet_initClass = Coin_SWIG_Python.SoIndexedFaceSet_initClass

SO_END_LINE_INDEX = Coin_SWIG_Python.SO_END_LINE_INDEX
class SoIndexedLineSet(SoIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIndexedLineSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoIndexedLineSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoIndexedLineSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIndexedLineSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return Coin_SWIG_Python.SoIndexedLineSet_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoIndexedLineSet_getBoundingBox(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoIndexedLineSet_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedLineSet
    __del__ = lambda self : None;
SoIndexedLineSet_swigregister = Coin_SWIG_Python.SoIndexedLineSet_swigregister
SoIndexedLineSet_swigregister(SoIndexedLineSet)
SoIndexedLineSet_getClassTypeId = Coin_SWIG_Python.SoIndexedLineSet_getClassTypeId
SoIndexedLineSet_initClass = Coin_SWIG_Python.SoIndexedLineSet_initClass

class SoIndexedNurbsCurve(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIndexedNurbsCurve_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoIndexedNurbsCurve_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoIndexedNurbsCurve_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIndexedNurbsCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    numControlPoints = _swig_property(Coin_SWIG_Python.SoIndexedNurbsCurve_numControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsCurve_numControlPoints_set)
    coordIndex = _swig_property(Coin_SWIG_Python.SoIndexedNurbsCurve_coordIndex_get, Coin_SWIG_Python.SoIndexedNurbsCurve_coordIndex_set)
    knotVector = _swig_property(Coin_SWIG_Python.SoIndexedNurbsCurve_knotVector_get, Coin_SWIG_Python.SoIndexedNurbsCurve_knotVector_set)
    def GLRender(*args): return Coin_SWIG_Python.SoIndexedNurbsCurve_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoIndexedNurbsCurve_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoIndexedNurbsCurve_getPrimitiveCount(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoIndexedNurbsCurve_getBoundingBox(*args)
    def sendPrimitive(*args): return Coin_SWIG_Python.SoIndexedNurbsCurve_sendPrimitive(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedNurbsCurve
    __del__ = lambda self : None;
SoIndexedNurbsCurve_swigregister = Coin_SWIG_Python.SoIndexedNurbsCurve_swigregister
SoIndexedNurbsCurve_swigregister(SoIndexedNurbsCurve)
SoIndexedNurbsCurve_getClassTypeId = Coin_SWIG_Python.SoIndexedNurbsCurve_getClassTypeId
SoIndexedNurbsCurve_initClass = Coin_SWIG_Python.SoIndexedNurbsCurve_initClass

class SoIndexedNurbsSurface(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIndexedNurbsSurface_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoIndexedNurbsSurface_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoIndexedNurbsSurface_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIndexedNurbsSurface(*args)
        try: self.this.append(this)
        except: self.this = this
    numUControlPoints = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_numUControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numUControlPoints_set)
    numVControlPoints = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_numVControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numVControlPoints_set)
    coordIndex = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_coordIndex_get, Coin_SWIG_Python.SoIndexedNurbsSurface_coordIndex_set)
    uKnotVector = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_uKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_uKnotVector_set)
    vKnotVector = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_vKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_vKnotVector_set)
    numSControlPoints = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_numSControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numSControlPoints_set)
    numTControlPoints = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_numTControlPoints_get, Coin_SWIG_Python.SoIndexedNurbsSurface_numTControlPoints_set)
    textureCoordIndex = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_textureCoordIndex_get, Coin_SWIG_Python.SoIndexedNurbsSurface_textureCoordIndex_set)
    sKnotVector = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_sKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_sKnotVector_set)
    tKnotVector = _swig_property(Coin_SWIG_Python.SoIndexedNurbsSurface_tKnotVector_get, Coin_SWIG_Python.SoIndexedNurbsSurface_tKnotVector_set)
    def GLRender(*args): return Coin_SWIG_Python.SoIndexedNurbsSurface_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoIndexedNurbsSurface_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoIndexedNurbsSurface_getPrimitiveCount(*args)
    def sendPrimitive(*args): return Coin_SWIG_Python.SoIndexedNurbsSurface_sendPrimitive(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedNurbsSurface
    __del__ = lambda self : None;
SoIndexedNurbsSurface_swigregister = Coin_SWIG_Python.SoIndexedNurbsSurface_swigregister
SoIndexedNurbsSurface_swigregister(SoIndexedNurbsSurface)
SoIndexedNurbsSurface_getClassTypeId = Coin_SWIG_Python.SoIndexedNurbsSurface_getClassTypeId
SoIndexedNurbsSurface_initClass = Coin_SWIG_Python.SoIndexedNurbsSurface_initClass

SO_END_STRIP_INDEX = Coin_SWIG_Python.SO_END_STRIP_INDEX
class SoIndexedTriangleStripSet(SoIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoIndexedTriangleStripSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoIndexedTriangleStripSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoIndexedTriangleStripSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoIndexedTriangleStripSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return Coin_SWIG_Python.SoIndexedTriangleStripSet_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoIndexedTriangleStripSet_getPrimitiveCount(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoIndexedTriangleStripSet_generateDefaultNormals(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoIndexedTriangleStripSet
    __del__ = lambda self : None;
SoIndexedTriangleStripSet_swigregister = Coin_SWIG_Python.SoIndexedTriangleStripSet_swigregister
SoIndexedTriangleStripSet_swigregister(SoIndexedTriangleStripSet)
SoIndexedTriangleStripSet_getClassTypeId = Coin_SWIG_Python.SoIndexedTriangleStripSet_getClassTypeId
SoIndexedTriangleStripSet_initClass = Coin_SWIG_Python.SoIndexedTriangleStripSet_initClass

class SoInfo(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoInfo_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoInfo_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoInfo_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    string = _swig_property(Coin_SWIG_Python.SoInfo_string_get, Coin_SWIG_Python.SoInfo_string_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInfo
    __del__ = lambda self : None;
SoInfo_swigregister = Coin_SWIG_Python.SoInfo_swigregister
SoInfo_swigregister(SoInfo)
SoInfo_getClassTypeId = Coin_SWIG_Python.SoInfo_getClassTypeId
SoInfo_initClass = Coin_SWIG_Python.SoInfo_initClass

class SoLabel(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLabel_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLabel_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLabel_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLabel(*args)
        try: self.this.append(this)
        except: self.this = this
    label = _swig_property(Coin_SWIG_Python.SoLabel_label_get, Coin_SWIG_Python.SoLabel_label_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLabel
    __del__ = lambda self : None;
SoLabel_swigregister = Coin_SWIG_Python.SoLabel_swigregister
SoLabel_swigregister(SoLabel)
SoLabel_getClassTypeId = Coin_SWIG_Python.SoLabel_getClassTypeId
SoLabel_initClass = Coin_SWIG_Python.SoLabel_initClass

class SoLevelOfDetail(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLevelOfDetail_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLevelOfDetail_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLevelOfDetail_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLevelOfDetail(*args)
        try: self.this.append(this)
        except: self.this = this
    screenArea = _swig_property(Coin_SWIG_Python.SoLevelOfDetail_screenArea_get, Coin_SWIG_Python.SoLevelOfDetail_screenArea_set)
    def doAction(*args): return Coin_SWIG_Python.SoLevelOfDetail_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoLevelOfDetail_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoLevelOfDetail_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoLevelOfDetail_rayPick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoLevelOfDetail_getBoundingBox(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoLevelOfDetail_audioRender(*args)
    def notify(*args): return Coin_SWIG_Python.SoLevelOfDetail_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLevelOfDetail
    __del__ = lambda self : None;
SoLevelOfDetail_swigregister = Coin_SWIG_Python.SoLevelOfDetail_swigregister
SoLevelOfDetail_swigregister(SoLevelOfDetail)
SoLevelOfDetail_getClassTypeId = Coin_SWIG_Python.SoLevelOfDetail_getClassTypeId
SoLevelOfDetail_initClass = Coin_SWIG_Python.SoLevelOfDetail_initClass

class SoProfile(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProfile_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoProfile_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoProfile_initClass)
    START_FIRST = Coin_SWIG_Python.SoProfile_START_FIRST
    START_NEW = Coin_SWIG_Python.SoProfile_START_NEW
    ADD_TO_CURRENT = Coin_SWIG_Python.SoProfile_ADD_TO_CURRENT
    index = _swig_property(Coin_SWIG_Python.SoProfile_index_get, Coin_SWIG_Python.SoProfile_index_set)
    linkage = _swig_property(Coin_SWIG_Python.SoProfile_linkage_get, Coin_SWIG_Python.SoProfile_linkage_set)
    def doAction(*args): return Coin_SWIG_Python.SoProfile_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoProfile_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoProfile_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoProfile_getBoundingBox(*args)
    def pick(*args): return Coin_SWIG_Python.SoProfile_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoProfile_getPrimitiveCount(*args)
    def getTrimCurve(*args): return Coin_SWIG_Python.SoProfile_getTrimCurve(*args)
    def getVertices(*args): return Coin_SWIG_Python.SoProfile_getVertices(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProfile
    __del__ = lambda self : None;
SoProfile_swigregister = Coin_SWIG_Python.SoProfile_swigregister
SoProfile_swigregister(SoProfile)
SoProfile_getClassTypeId = Coin_SWIG_Python.SoProfile_getClassTypeId
SoProfile_initClass = Coin_SWIG_Python.SoProfile_initClass

class SoLinearProfile(SoProfile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLinearProfile_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLinearProfile_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLinearProfile_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLinearProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTrimCurve(*args): return Coin_SWIG_Python.SoLinearProfile_getTrimCurve(*args)
    def getVertices(*args): return Coin_SWIG_Python.SoLinearProfile_getVertices(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLinearProfile
    __del__ = lambda self : None;
SoLinearProfile_swigregister = Coin_SWIG_Python.SoLinearProfile_swigregister
SoLinearProfile_swigregister(SoLinearProfile)
SoLinearProfile_getClassTypeId = Coin_SWIG_Python.SoLinearProfile_getClassTypeId
SoLinearProfile_initClass = Coin_SWIG_Python.SoLinearProfile_initClass

class SoLineSet(SoNonIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLineSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLineSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLineSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLineSet(*args)
        try: self.this.append(this)
        except: self.this = this
    numVertices = _swig_property(Coin_SWIG_Python.SoLineSet_numVertices_get, Coin_SWIG_Python.SoLineSet_numVertices_set)
    def GLRender(*args): return Coin_SWIG_Python.SoLineSet_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoLineSet_getBoundingBox(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoLineSet_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLineSet
    __del__ = lambda self : None;
SoLineSet_swigregister = Coin_SWIG_Python.SoLineSet_swigregister
SoLineSet_swigregister(SoLineSet)
SoLineSet_getClassTypeId = Coin_SWIG_Python.SoLineSet_getClassTypeId
SoLineSet_initClass = Coin_SWIG_Python.SoLineSet_initClass

class SoListener(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoListener_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoListener_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoListener_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoListener(*args)
        try: self.this.append(this)
        except: self.this = this
    position = _swig_property(Coin_SWIG_Python.SoListener_position_get, Coin_SWIG_Python.SoListener_position_set)
    orientation = _swig_property(Coin_SWIG_Python.SoListener_orientation_get, Coin_SWIG_Python.SoListener_orientation_set)
    gain = _swig_property(Coin_SWIG_Python.SoListener_gain_get, Coin_SWIG_Python.SoListener_gain_set)
    dopplerVelocity = _swig_property(Coin_SWIG_Python.SoListener_dopplerVelocity_get, Coin_SWIG_Python.SoListener_dopplerVelocity_set)
    dopplerFactor = _swig_property(Coin_SWIG_Python.SoListener_dopplerFactor_get, Coin_SWIG_Python.SoListener_dopplerFactor_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoListener
    __del__ = lambda self : None;
SoListener_swigregister = Coin_SWIG_Python.SoListener_swigregister
SoListener_swigregister(SoListener)
SoListener_getClassTypeId = Coin_SWIG_Python.SoListener_getClassTypeId
SoListener_initClass = Coin_SWIG_Python.SoListener_initClass

class SoLocateHighlight(SoSeparator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLocateHighlight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLocateHighlight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoLocateHighlight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLocateHighlight(*args)
        try: self.this.append(this)
        except: self.this = this
    AUTO = Coin_SWIG_Python.SoLocateHighlight_AUTO
    ON = Coin_SWIG_Python.SoLocateHighlight_ON
    OFF = Coin_SWIG_Python.SoLocateHighlight_OFF
    EMISSIVE = Coin_SWIG_Python.SoLocateHighlight_EMISSIVE
    EMISSIVE_DIFFUSE = Coin_SWIG_Python.SoLocateHighlight_EMISSIVE_DIFFUSE
    color = _swig_property(Coin_SWIG_Python.SoLocateHighlight_color_get, Coin_SWIG_Python.SoLocateHighlight_color_set)
    style = _swig_property(Coin_SWIG_Python.SoLocateHighlight_style_get, Coin_SWIG_Python.SoLocateHighlight_style_set)
    mode = _swig_property(Coin_SWIG_Python.SoLocateHighlight_mode_get, Coin_SWIG_Python.SoLocateHighlight_mode_set)
    def handleEvent(*args): return Coin_SWIG_Python.SoLocateHighlight_handleEvent(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoLocateHighlight_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoLocateHighlight_GLRenderInPath(*args)
    turnOffCurrentHighlight = staticmethod(Coin_SWIG_Python.SoLocateHighlight_turnOffCurrentHighlight)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLocateHighlight
    __del__ = lambda self : None;
SoLocateHighlight_swigregister = Coin_SWIG_Python.SoLocateHighlight_swigregister
SoLocateHighlight_swigregister(SoLocateHighlight)
SoLocateHighlight_getClassTypeId = Coin_SWIG_Python.SoLocateHighlight_getClassTypeId
SoLocateHighlight_initClass = Coin_SWIG_Python.SoLocateHighlight_initClass
SoLocateHighlight_turnOffCurrentHighlight = Coin_SWIG_Python.SoLocateHighlight_turnOffCurrentHighlight

class SoLOD(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoLOD_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoLOD_getTypeId(*args)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoLOD(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoLOD_initClass)
    range = _swig_property(Coin_SWIG_Python.SoLOD_range_get, Coin_SWIG_Python.SoLOD_range_set)
    center = _swig_property(Coin_SWIG_Python.SoLOD_center_get, Coin_SWIG_Python.SoLOD_center_set)
    def doAction(*args): return Coin_SWIG_Python.SoLOD_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoLOD_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoLOD_GLRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoLOD_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoLOD_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoLOD_GLRenderOffPath(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoLOD_rayPick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoLOD_getBoundingBox(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoLOD_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoLOD_audioRender(*args)
    def notify(*args): return Coin_SWIG_Python.SoLOD_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoLOD
    __del__ = lambda self : None;
SoLOD_swigregister = Coin_SWIG_Python.SoLOD_swigregister
SoLOD_swigregister(SoLOD)
SoLOD_getClassTypeId = Coin_SWIG_Python.SoLOD_getClassTypeId
SoLOD_initClass = Coin_SWIG_Python.SoLOD_initClass

class SoPointSet(SoNonIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPointSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPointSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPointSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPointSet(*args)
        try: self.this.append(this)
        except: self.this = this
    numPoints = _swig_property(Coin_SWIG_Python.SoPointSet_numPoints_get, Coin_SWIG_Python.SoPointSet_numPoints_set)
    def GLRender(*args): return Coin_SWIG_Python.SoPointSet_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoPointSet_getBoundingBox(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoPointSet_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPointSet
    __del__ = lambda self : None;
SoPointSet_swigregister = Coin_SWIG_Python.SoPointSet_swigregister
SoPointSet_swigregister(SoPointSet)
SoPointSet_getClassTypeId = Coin_SWIG_Python.SoPointSet_getClassTypeId
SoPointSet_initClass = Coin_SWIG_Python.SoPointSet_initClass

class SoMarkerSet(SoPointSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMarkerSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMarkerSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMarkerSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMarkerSet(*args)
        try: self.this.append(this)
        except: self.this = this
    NONE = Coin_SWIG_Python.SoMarkerSet_NONE
    CROSS_5_5 = Coin_SWIG_Python.SoMarkerSet_CROSS_5_5
    PLUS_5_5 = Coin_SWIG_Python.SoMarkerSet_PLUS_5_5
    MINUS_5_5 = Coin_SWIG_Python.SoMarkerSet_MINUS_5_5
    SLASH_5_5 = Coin_SWIG_Python.SoMarkerSet_SLASH_5_5
    BACKSLASH_5_5 = Coin_SWIG_Python.SoMarkerSet_BACKSLASH_5_5
    BAR_5_5 = Coin_SWIG_Python.SoMarkerSet_BAR_5_5
    STAR_5_5 = Coin_SWIG_Python.SoMarkerSet_STAR_5_5
    Y_5_5 = Coin_SWIG_Python.SoMarkerSet_Y_5_5
    LIGHTNING_5_5 = Coin_SWIG_Python.SoMarkerSet_LIGHTNING_5_5
    WELL_5_5 = Coin_SWIG_Python.SoMarkerSet_WELL_5_5
    CIRCLE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_LINE_5_5
    SQUARE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_SQUARE_LINE_5_5
    DIAMOND_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_LINE_5_5
    TRIANGLE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_LINE_5_5
    RHOMBUS_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_LINE_5_5
    HOURGLASS_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_LINE_5_5
    SATELLITE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_LINE_5_5
    PINE_TREE_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_LINE_5_5
    CAUTION_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_CAUTION_LINE_5_5
    SHIP_LINE_5_5 = Coin_SWIG_Python.SoMarkerSet_SHIP_LINE_5_5
    CIRCLE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_FILLED_5_5
    SQUARE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_SQUARE_FILLED_5_5
    DIAMOND_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_FILLED_5_5
    TRIANGLE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_FILLED_5_5
    RHOMBUS_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_FILLED_5_5
    HOURGLASS_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_FILLED_5_5
    SATELLITE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_FILLED_5_5
    PINE_TREE_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_FILLED_5_5
    CAUTION_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_CAUTION_FILLED_5_5
    SHIP_FILLED_5_5 = Coin_SWIG_Python.SoMarkerSet_SHIP_FILLED_5_5
    CROSS_7_7 = Coin_SWIG_Python.SoMarkerSet_CROSS_7_7
    PLUS_7_7 = Coin_SWIG_Python.SoMarkerSet_PLUS_7_7
    MINUS_7_7 = Coin_SWIG_Python.SoMarkerSet_MINUS_7_7
    SLASH_7_7 = Coin_SWIG_Python.SoMarkerSet_SLASH_7_7
    BACKSLASH_7_7 = Coin_SWIG_Python.SoMarkerSet_BACKSLASH_7_7
    BAR_7_7 = Coin_SWIG_Python.SoMarkerSet_BAR_7_7
    STAR_7_7 = Coin_SWIG_Python.SoMarkerSet_STAR_7_7
    Y_7_7 = Coin_SWIG_Python.SoMarkerSet_Y_7_7
    LIGHTNING_7_7 = Coin_SWIG_Python.SoMarkerSet_LIGHTNING_7_7
    WELL_7_7 = Coin_SWIG_Python.SoMarkerSet_WELL_7_7
    CIRCLE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_LINE_7_7
    SQUARE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_SQUARE_LINE_7_7
    DIAMOND_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_LINE_7_7
    TRIANGLE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_LINE_7_7
    RHOMBUS_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_LINE_7_7
    HOURGLASS_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_LINE_7_7
    SATELLITE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_LINE_7_7
    PINE_TREE_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_LINE_7_7
    CAUTION_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_CAUTION_LINE_7_7
    SHIP_LINE_7_7 = Coin_SWIG_Python.SoMarkerSet_SHIP_LINE_7_7
    CIRCLE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_FILLED_7_7
    SQUARE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_SQUARE_FILLED_7_7
    DIAMOND_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_FILLED_7_7
    TRIANGLE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_FILLED_7_7
    RHOMBUS_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_FILLED_7_7
    HOURGLASS_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_FILLED_7_7
    SATELLITE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_FILLED_7_7
    PINE_TREE_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_FILLED_7_7
    CAUTION_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_CAUTION_FILLED_7_7
    SHIP_FILLED_7_7 = Coin_SWIG_Python.SoMarkerSet_SHIP_FILLED_7_7
    CROSS_9_9 = Coin_SWIG_Python.SoMarkerSet_CROSS_9_9
    PLUS_9_9 = Coin_SWIG_Python.SoMarkerSet_PLUS_9_9
    MINUS_9_9 = Coin_SWIG_Python.SoMarkerSet_MINUS_9_9
    SLASH_9_9 = Coin_SWIG_Python.SoMarkerSet_SLASH_9_9
    BACKSLASH_9_9 = Coin_SWIG_Python.SoMarkerSet_BACKSLASH_9_9
    BAR_9_9 = Coin_SWIG_Python.SoMarkerSet_BAR_9_9
    STAR_9_9 = Coin_SWIG_Python.SoMarkerSet_STAR_9_9
    Y_9_9 = Coin_SWIG_Python.SoMarkerSet_Y_9_9
    LIGHTNING_9_9 = Coin_SWIG_Python.SoMarkerSet_LIGHTNING_9_9
    WELL_9_9 = Coin_SWIG_Python.SoMarkerSet_WELL_9_9
    CIRCLE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_LINE_9_9
    SQUARE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_SQUARE_LINE_9_9
    DIAMOND_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_LINE_9_9
    TRIANGLE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_LINE_9_9
    RHOMBUS_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_LINE_9_9
    HOURGLASS_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_LINE_9_9
    SATELLITE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_LINE_9_9
    PINE_TREE_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_LINE_9_9
    CAUTION_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_CAUTION_LINE_9_9
    SHIP_LINE_9_9 = Coin_SWIG_Python.SoMarkerSet_SHIP_LINE_9_9
    CIRCLE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_CIRCLE_FILLED_9_9
    SQUARE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_SQUARE_FILLED_9_9
    DIAMOND_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_DIAMOND_FILLED_9_9
    TRIANGLE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_TRIANGLE_FILLED_9_9
    RHOMBUS_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_RHOMBUS_FILLED_9_9
    HOURGLASS_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_HOURGLASS_FILLED_9_9
    SATELLITE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_SATELLITE_FILLED_9_9
    PINE_TREE_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_PINE_TREE_FILLED_9_9
    CAUTION_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_CAUTION_FILLED_9_9
    SHIP_FILLED_9_9 = Coin_SWIG_Python.SoMarkerSet_SHIP_FILLED_9_9
    NUM_MARKERS = Coin_SWIG_Python.SoMarkerSet_NUM_MARKERS
    markerIndex = _swig_property(Coin_SWIG_Python.SoMarkerSet_markerIndex_get, Coin_SWIG_Python.SoMarkerSet_markerIndex_set)
    def GLRender(*args): return Coin_SWIG_Python.SoMarkerSet_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoMarkerSet_getPrimitiveCount(*args)
    getNumDefinedMarkers = staticmethod(Coin_SWIG_Python.SoMarkerSet_getNumDefinedMarkers)
    addMarker = staticmethod(Coin_SWIG_Python.SoMarkerSet_addMarker)
    getMarker = staticmethod(Coin_SWIG_Python.SoMarkerSet_getMarker)
    removeMarker = staticmethod(Coin_SWIG_Python.SoMarkerSet_removeMarker)
    isMarkerBitSet = staticmethod(Coin_SWIG_Python.SoMarkerSet_isMarkerBitSet)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMarkerSet
    __del__ = lambda self : None;
SoMarkerSet_swigregister = Coin_SWIG_Python.SoMarkerSet_swigregister
SoMarkerSet_swigregister(SoMarkerSet)
SoMarkerSet_getClassTypeId = Coin_SWIG_Python.SoMarkerSet_getClassTypeId
SoMarkerSet_initClass = Coin_SWIG_Python.SoMarkerSet_initClass
SoMarkerSet_getNumDefinedMarkers = Coin_SWIG_Python.SoMarkerSet_getNumDefinedMarkers
SoMarkerSet_addMarker = Coin_SWIG_Python.SoMarkerSet_addMarker
SoMarkerSet_getMarker = Coin_SWIG_Python.SoMarkerSet_getMarker
SoMarkerSet_removeMarker = Coin_SWIG_Python.SoMarkerSet_removeMarker
SoMarkerSet_isMarkerBitSet = Coin_SWIG_Python.SoMarkerSet_isMarkerBitSet

class SoMaterial(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMaterial_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMaterial_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMaterial_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    ambientColor = _swig_property(Coin_SWIG_Python.SoMaterial_ambientColor_get, Coin_SWIG_Python.SoMaterial_ambientColor_set)
    diffuseColor = _swig_property(Coin_SWIG_Python.SoMaterial_diffuseColor_get, Coin_SWIG_Python.SoMaterial_diffuseColor_set)
    specularColor = _swig_property(Coin_SWIG_Python.SoMaterial_specularColor_get, Coin_SWIG_Python.SoMaterial_specularColor_set)
    emissiveColor = _swig_property(Coin_SWIG_Python.SoMaterial_emissiveColor_get, Coin_SWIG_Python.SoMaterial_emissiveColor_set)
    shininess = _swig_property(Coin_SWIG_Python.SoMaterial_shininess_get, Coin_SWIG_Python.SoMaterial_shininess_set)
    transparency = _swig_property(Coin_SWIG_Python.SoMaterial_transparency_get, Coin_SWIG_Python.SoMaterial_transparency_set)
    def doAction(*args): return Coin_SWIG_Python.SoMaterial_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoMaterial_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoMaterial_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMaterial
    __del__ = lambda self : None;
SoMaterial_swigregister = Coin_SWIG_Python.SoMaterial_swigregister
SoMaterial_swigregister(SoMaterial)
SoMaterial_getClassTypeId = Coin_SWIG_Python.SoMaterial_getClassTypeId
SoMaterial_initClass = Coin_SWIG_Python.SoMaterial_initClass

class SoMatrixTransform(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMatrixTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMatrixTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMatrixTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMatrixTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    matrix = _swig_property(Coin_SWIG_Python.SoMatrixTransform_matrix_get, Coin_SWIG_Python.SoMatrixTransform_matrix_set)
    def doAction(*args): return Coin_SWIG_Python.SoMatrixTransform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoMatrixTransform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoMatrixTransform_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoMatrixTransform_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoMatrixTransform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoMatrixTransform_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoMatrixTransform_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMatrixTransform
    __del__ = lambda self : None;
SoMatrixTransform_swigregister = Coin_SWIG_Python.SoMatrixTransform_swigregister
SoMatrixTransform_swigregister(SoMatrixTransform)
SoMatrixTransform_getClassTypeId = Coin_SWIG_Python.SoMatrixTransform_getClassTypeId
SoMatrixTransform_initClass = Coin_SWIG_Python.SoMatrixTransform_initClass

class SoMultipleCopy(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoMultipleCopy_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoMultipleCopy_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoMultipleCopy_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoMultipleCopy(*args)
        try: self.this.append(this)
        except: self.this = this
    matrix = _swig_property(Coin_SWIG_Python.SoMultipleCopy_matrix_get, Coin_SWIG_Python.SoMultipleCopy_matrix_set)
    def affectsState(*args): return Coin_SWIG_Python.SoMultipleCopy_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoMultipleCopy_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoMultipleCopy_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoMultipleCopy_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoMultipleCopy_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoMultipleCopy_getBoundingBox(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoMultipleCopy_handleEvent(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoMultipleCopy_getMatrix(*args)
    def search(*args): return Coin_SWIG_Python.SoMultipleCopy_search(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoMultipleCopy_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoMultipleCopy_audioRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoMultipleCopy
    __del__ = lambda self : None;
SoMultipleCopy_swigregister = Coin_SWIG_Python.SoMultipleCopy_swigregister
SoMultipleCopy_swigregister(SoMultipleCopy)
SoMultipleCopy_getClassTypeId = Coin_SWIG_Python.SoMultipleCopy_getClassTypeId
SoMultipleCopy_initClass = Coin_SWIG_Python.SoMultipleCopy_initClass

class SoNormal(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNormal_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNormal_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNormal_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNormal(*args)
        try: self.this.append(this)
        except: self.this = this
    vector = _swig_property(Coin_SWIG_Python.SoNormal_vector_get, Coin_SWIG_Python.SoNormal_vector_set)
    def doAction(*args): return Coin_SWIG_Python.SoNormal_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoNormal_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoNormal_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoNormal_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoNormal_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNormal
    __del__ = lambda self : None;
SoNormal_swigregister = Coin_SWIG_Python.SoNormal_swigregister
SoNormal_swigregister(SoNormal)
SoNormal_getClassTypeId = Coin_SWIG_Python.SoNormal_getClassTypeId
SoNormal_initClass = Coin_SWIG_Python.SoNormal_initClass

class SoNurbsCurve(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNurbsCurve_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNurbsCurve_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNurbsCurve_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNurbsCurve(*args)
        try: self.this.append(this)
        except: self.this = this
    numControlPoints = _swig_property(Coin_SWIG_Python.SoNurbsCurve_numControlPoints_get, Coin_SWIG_Python.SoNurbsCurve_numControlPoints_set)
    knotVector = _swig_property(Coin_SWIG_Python.SoNurbsCurve_knotVector_get, Coin_SWIG_Python.SoNurbsCurve_knotVector_set)
    def GLRender(*args): return Coin_SWIG_Python.SoNurbsCurve_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoNurbsCurve_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoNurbsCurve_getPrimitiveCount(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoNurbsCurve_getBoundingBox(*args)
    def sendPrimitive(*args): return Coin_SWIG_Python.SoNurbsCurve_sendPrimitive(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNurbsCurve
    __del__ = lambda self : None;
SoNurbsCurve_swigregister = Coin_SWIG_Python.SoNurbsCurve_swigregister
SoNurbsCurve_swigregister(SoNurbsCurve)
SoNurbsCurve_getClassTypeId = Coin_SWIG_Python.SoNurbsCurve_getClassTypeId
SoNurbsCurve_initClass = Coin_SWIG_Python.SoNurbsCurve_initClass

class SoNurbsProfile(SoProfile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNurbsProfile_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNurbsProfile_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNurbsProfile_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNurbsProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    knotVector = _swig_property(Coin_SWIG_Python.SoNurbsProfile_knotVector_get, Coin_SWIG_Python.SoNurbsProfile_knotVector_set)
    def getTrimCurve(*args): return Coin_SWIG_Python.SoNurbsProfile_getTrimCurve(*args)
    def getVertices(*args): return Coin_SWIG_Python.SoNurbsProfile_getVertices(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNurbsProfile
    __del__ = lambda self : None;
SoNurbsProfile_swigregister = Coin_SWIG_Python.SoNurbsProfile_swigregister
SoNurbsProfile_swigregister(SoNurbsProfile)
SoNurbsProfile_getClassTypeId = Coin_SWIG_Python.SoNurbsProfile_getClassTypeId
SoNurbsProfile_initClass = Coin_SWIG_Python.SoNurbsProfile_initClass

class SoNurbsSurface(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoNurbsSurface_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoNurbsSurface_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoNurbsSurface_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoNurbsSurface(*args)
        try: self.this.append(this)
        except: self.this = this
    numUControlPoints = _swig_property(Coin_SWIG_Python.SoNurbsSurface_numUControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numUControlPoints_set)
    numVControlPoints = _swig_property(Coin_SWIG_Python.SoNurbsSurface_numVControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numVControlPoints_set)
    numSControlPoints = _swig_property(Coin_SWIG_Python.SoNurbsSurface_numSControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numSControlPoints_set)
    numTControlPoints = _swig_property(Coin_SWIG_Python.SoNurbsSurface_numTControlPoints_get, Coin_SWIG_Python.SoNurbsSurface_numTControlPoints_set)
    uKnotVector = _swig_property(Coin_SWIG_Python.SoNurbsSurface_uKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_uKnotVector_set)
    vKnotVector = _swig_property(Coin_SWIG_Python.SoNurbsSurface_vKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_vKnotVector_set)
    sKnotVector = _swig_property(Coin_SWIG_Python.SoNurbsSurface_sKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_sKnotVector_set)
    tKnotVector = _swig_property(Coin_SWIG_Python.SoNurbsSurface_tKnotVector_get, Coin_SWIG_Python.SoNurbsSurface_tKnotVector_set)
    def GLRender(*args): return Coin_SWIG_Python.SoNurbsSurface_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoNurbsSurface_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoNurbsSurface_getPrimitiveCount(*args)
    def sendPrimitive(*args): return Coin_SWIG_Python.SoNurbsSurface_sendPrimitive(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoNurbsSurface
    __del__ = lambda self : None;
SoNurbsSurface_swigregister = Coin_SWIG_Python.SoNurbsSurface_swigregister
SoNurbsSurface_swigregister(SoNurbsSurface)
SoNurbsSurface_getClassTypeId = Coin_SWIG_Python.SoNurbsSurface_getClassTypeId
SoNurbsSurface_initClass = Coin_SWIG_Python.SoNurbsSurface_initClass

class SoOrthographicCamera(SoCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoOrthographicCamera_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoOrthographicCamera_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoOrthographicCamera_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoOrthographicCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    height = _swig_property(Coin_SWIG_Python.SoOrthographicCamera_height_get, Coin_SWIG_Python.SoOrthographicCamera_height_set)
    def scaleHeight(*args): return Coin_SWIG_Python.SoOrthographicCamera_scaleHeight(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoOrthographicCamera_getViewVolume(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOrthographicCamera
    __del__ = lambda self : None;
SoOrthographicCamera_swigregister = Coin_SWIG_Python.SoOrthographicCamera_swigregister
SoOrthographicCamera_swigregister(SoOrthographicCamera)
SoOrthographicCamera_getClassTypeId = Coin_SWIG_Python.SoOrthographicCamera_getClassTypeId
SoOrthographicCamera_initClass = Coin_SWIG_Python.SoOrthographicCamera_initClass

class SoPackedColor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPackedColor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPackedColor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPackedColor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPackedColor(*args)
        try: self.this.append(this)
        except: self.this = this
    orderedRGBA = _swig_property(Coin_SWIG_Python.SoPackedColor_orderedRGBA_get, Coin_SWIG_Python.SoPackedColor_orderedRGBA_set)
    def doAction(*args): return Coin_SWIG_Python.SoPackedColor_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoPackedColor_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoPackedColor_callback(*args)
    def isTransparent(*args): return Coin_SWIG_Python.SoPackedColor_isTransparent(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPackedColor
    __del__ = lambda self : None;
SoPackedColor_swigregister = Coin_SWIG_Python.SoPackedColor_swigregister
SoPackedColor_swigregister(SoPackedColor)
SoPackedColor_getClassTypeId = Coin_SWIG_Python.SoPackedColor_getClassTypeId
SoPackedColor_initClass = Coin_SWIG_Python.SoPackedColor_initClass

class SoPathSwitch(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPathSwitch_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPathSwitch_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPathSwitch_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPathSwitch(*args)
        try: self.this.append(this)
        except: self.this = this
    path = _swig_property(Coin_SWIG_Python.SoPathSwitch_path_get, Coin_SWIG_Python.SoPathSwitch_path_set)
    def doAction(*args): return Coin_SWIG_Python.SoPathSwitch_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoPathSwitch_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoPathSwitch_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoPathSwitch_getBoundingBox(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoPathSwitch_handleEvent(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoPathSwitch_getMatrix(*args)
    def search(*args): return Coin_SWIG_Python.SoPathSwitch_search(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoPathSwitch_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoPathSwitch_audioRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPathSwitch
    __del__ = lambda self : None;
SoPathSwitch_swigregister = Coin_SWIG_Python.SoPathSwitch_swigregister
SoPathSwitch_swigregister(SoPathSwitch)
SoPathSwitch_getClassTypeId = Coin_SWIG_Python.SoPathSwitch_getClassTypeId
SoPathSwitch_initClass = Coin_SWIG_Python.SoPathSwitch_initClass

class SoRotation(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRotation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoRotation_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoRotation_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation = _swig_property(Coin_SWIG_Python.SoRotation_rotation_get, Coin_SWIG_Python.SoRotation_rotation_set)
    def doAction(*args): return Coin_SWIG_Python.SoRotation_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoRotation_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoRotation_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoRotation_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoRotation_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoRotation_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoRotation_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotation
    __del__ = lambda self : None;
SoRotation_swigregister = Coin_SWIG_Python.SoRotation_swigregister
SoRotation_swigregister(SoRotation)
SoRotation_getClassTypeId = Coin_SWIG_Python.SoRotation_getClassTypeId
SoRotation_initClass = Coin_SWIG_Python.SoRotation_initClass

class SoPendulum(SoRotation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPendulum_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPendulum_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPendulum_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPendulum(*args)
        try: self.this.append(this)
        except: self.this = this
    rotation0 = _swig_property(Coin_SWIG_Python.SoPendulum_rotation0_get, Coin_SWIG_Python.SoPendulum_rotation0_set)
    rotation1 = _swig_property(Coin_SWIG_Python.SoPendulum_rotation1_get, Coin_SWIG_Python.SoPendulum_rotation1_set)
    speed = _swig_property(Coin_SWIG_Python.SoPendulum_speed_get, Coin_SWIG_Python.SoPendulum_speed_set)
    on = _swig_property(Coin_SWIG_Python.SoPendulum_on_get, Coin_SWIG_Python.SoPendulum_on_set)
    def write(*args): return Coin_SWIG_Python.SoPendulum_write(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPendulum
    __del__ = lambda self : None;
SoPendulum_swigregister = Coin_SWIG_Python.SoPendulum_swigregister
SoPendulum_swigregister(SoPendulum)
SoPendulum_getClassTypeId = Coin_SWIG_Python.SoPendulum_getClassTypeId
SoPendulum_initClass = Coin_SWIG_Python.SoPendulum_initClass

class SoPerspectiveCamera(SoCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPerspectiveCamera_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPerspectiveCamera_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPerspectiveCamera_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPerspectiveCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    heightAngle = _swig_property(Coin_SWIG_Python.SoPerspectiveCamera_heightAngle_get, Coin_SWIG_Python.SoPerspectiveCamera_heightAngle_set)
    def scaleHeight(*args): return Coin_SWIG_Python.SoPerspectiveCamera_scaleHeight(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoPerspectiveCamera_getViewVolume(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPerspectiveCamera
    __del__ = lambda self : None;
SoPerspectiveCamera_swigregister = Coin_SWIG_Python.SoPerspectiveCamera_swigregister
SoPerspectiveCamera_swigregister(SoPerspectiveCamera)
SoPerspectiveCamera_getClassTypeId = Coin_SWIG_Python.SoPerspectiveCamera_getClassTypeId
SoPerspectiveCamera_initClass = Coin_SWIG_Python.SoPerspectiveCamera_initClass

class SoPolygonOffset(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoPolygonOffset_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoPolygonOffset_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoPolygonOffset_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPolygonOffset(*args)
        try: self.this.append(this)
        except: self.this = this
    FILLED = Coin_SWIG_Python.SoPolygonOffset_FILLED
    LINES = Coin_SWIG_Python.SoPolygonOffset_LINES
    POINTS = Coin_SWIG_Python.SoPolygonOffset_POINTS
    factor = _swig_property(Coin_SWIG_Python.SoPolygonOffset_factor_get, Coin_SWIG_Python.SoPolygonOffset_factor_set)
    units = _swig_property(Coin_SWIG_Python.SoPolygonOffset_units_get, Coin_SWIG_Python.SoPolygonOffset_units_set)
    styles = _swig_property(Coin_SWIG_Python.SoPolygonOffset_styles_get, Coin_SWIG_Python.SoPolygonOffset_styles_set)
    on = _swig_property(Coin_SWIG_Python.SoPolygonOffset_on_get, Coin_SWIG_Python.SoPolygonOffset_on_set)
    def doAction(*args): return Coin_SWIG_Python.SoPolygonOffset_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoPolygonOffset_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoPolygonOffset_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPolygonOffset
    __del__ = lambda self : None;
SoPolygonOffset_swigregister = Coin_SWIG_Python.SoPolygonOffset_swigregister
SoPolygonOffset_swigregister(SoPolygonOffset)
SoPolygonOffset_getClassTypeId = Coin_SWIG_Python.SoPolygonOffset_getClassTypeId
SoPolygonOffset_initClass = Coin_SWIG_Python.SoPolygonOffset_initClass

class SoProfileCoordinate2(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProfileCoordinate2_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoProfileCoordinate2_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoProfileCoordinate2_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoProfileCoordinate2(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoProfileCoordinate2_point_get, Coin_SWIG_Python.SoProfileCoordinate2_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoProfileCoordinate2_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoProfileCoordinate2_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoProfileCoordinate2_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoProfileCoordinate2_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoProfileCoordinate2_getBoundingBox(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoProfileCoordinate2_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProfileCoordinate2
    __del__ = lambda self : None;
SoProfileCoordinate2_swigregister = Coin_SWIG_Python.SoProfileCoordinate2_swigregister
SoProfileCoordinate2_swigregister(SoProfileCoordinate2)
SoProfileCoordinate2_getClassTypeId = Coin_SWIG_Python.SoProfileCoordinate2_getClassTypeId
SoProfileCoordinate2_initClass = Coin_SWIG_Python.SoProfileCoordinate2_initClass

class SoProfileCoordinate3(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoProfileCoordinate3_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoProfileCoordinate3_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoProfileCoordinate3_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoProfileCoordinate3(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoProfileCoordinate3_point_get, Coin_SWIG_Python.SoProfileCoordinate3_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoProfileCoordinate3_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoProfileCoordinate3_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoProfileCoordinate3_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoProfileCoordinate3_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoProfileCoordinate3_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoProfileCoordinate3
    __del__ = lambda self : None;
SoProfileCoordinate3_swigregister = Coin_SWIG_Python.SoProfileCoordinate3_swigregister
SoProfileCoordinate3_swigregister(SoProfileCoordinate3)
SoProfileCoordinate3_getClassTypeId = Coin_SWIG_Python.SoProfileCoordinate3_getClassTypeId
SoProfileCoordinate3_initClass = Coin_SWIG_Python.SoProfileCoordinate3_initClass

class SoQuadMesh(SoNonIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoQuadMesh_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoQuadMesh_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoQuadMesh_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoQuadMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    verticesPerColumn = _swig_property(Coin_SWIG_Python.SoQuadMesh_verticesPerColumn_get, Coin_SWIG_Python.SoQuadMesh_verticesPerColumn_set)
    verticesPerRow = _swig_property(Coin_SWIG_Python.SoQuadMesh_verticesPerRow_get, Coin_SWIG_Python.SoQuadMesh_verticesPerRow_set)
    def GLRender(*args): return Coin_SWIG_Python.SoQuadMesh_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoQuadMesh_getPrimitiveCount(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoQuadMesh_generateDefaultNormals(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoQuadMesh
    __del__ = lambda self : None;
SoQuadMesh_swigregister = Coin_SWIG_Python.SoQuadMesh_swigregister
SoQuadMesh_swigregister(SoQuadMesh)
SoQuadMesh_getClassTypeId = Coin_SWIG_Python.SoQuadMesh_getClassTypeId
SoQuadMesh_initClass = Coin_SWIG_Python.SoQuadMesh_initClass

class SoResetTransform(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoResetTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoResetTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoResetTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoResetTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    TRANSFORM = Coin_SWIG_Python.SoResetTransform_TRANSFORM
    BBOX = Coin_SWIG_Python.SoResetTransform_BBOX
    whatToReset = _swig_property(Coin_SWIG_Python.SoResetTransform_whatToReset_get, Coin_SWIG_Python.SoResetTransform_whatToReset_set)
    def doAction(*args): return Coin_SWIG_Python.SoResetTransform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoResetTransform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoResetTransform_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoResetTransform_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoResetTransform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoResetTransform_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoResetTransform_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoResetTransform
    __del__ = lambda self : None;
SoResetTransform_swigregister = Coin_SWIG_Python.SoResetTransform_swigregister
SoResetTransform_swigregister(SoResetTransform)
SoResetTransform_getClassTypeId = Coin_SWIG_Python.SoResetTransform_getClassTypeId
SoResetTransform_initClass = Coin_SWIG_Python.SoResetTransform_initClass

class SoRotationXYZ(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRotationXYZ_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoRotationXYZ_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoRotationXYZ_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRotationXYZ(*args)
        try: self.this.append(this)
        except: self.this = this
    X = Coin_SWIG_Python.SoRotationXYZ_X
    Y = Coin_SWIG_Python.SoRotationXYZ_Y
    Z = Coin_SWIG_Python.SoRotationXYZ_Z
    axis = _swig_property(Coin_SWIG_Python.SoRotationXYZ_axis_get, Coin_SWIG_Python.SoRotationXYZ_axis_set)
    angle = _swig_property(Coin_SWIG_Python.SoRotationXYZ_angle_get, Coin_SWIG_Python.SoRotationXYZ_angle_set)
    def getRotation(*args): return Coin_SWIG_Python.SoRotationXYZ_getRotation(*args)
    def doAction(*args): return Coin_SWIG_Python.SoRotationXYZ_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoRotationXYZ_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoRotationXYZ_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoRotationXYZ_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoRotationXYZ_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoRotationXYZ_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoRotationXYZ_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotationXYZ
    __del__ = lambda self : None;
SoRotationXYZ_swigregister = Coin_SWIG_Python.SoRotationXYZ_swigregister
SoRotationXYZ_swigregister(SoRotationXYZ)
SoRotationXYZ_getClassTypeId = Coin_SWIG_Python.SoRotationXYZ_getClassTypeId
SoRotationXYZ_initClass = Coin_SWIG_Python.SoRotationXYZ_initClass

class SoRotor(SoRotation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoRotor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoRotor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoRotor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoRotor(*args)
        try: self.this.append(this)
        except: self.this = this
    speed = _swig_property(Coin_SWIG_Python.SoRotor_speed_get, Coin_SWIG_Python.SoRotor_speed_set)
    on = _swig_property(Coin_SWIG_Python.SoRotor_on_get, Coin_SWIG_Python.SoRotor_on_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoRotor
    __del__ = lambda self : None;
SoRotor_swigregister = Coin_SWIG_Python.SoRotor_swigregister
SoRotor_swigregister(SoRotor)
SoRotor_getClassTypeId = Coin_SWIG_Python.SoRotor_getClassTypeId
SoRotor_initClass = Coin_SWIG_Python.SoRotor_initClass

class SoTranslation(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTranslation_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTranslation_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTranslation_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTranslation(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTranslation_translation_get, Coin_SWIG_Python.SoTranslation_translation_set)
    def doAction(*args): return Coin_SWIG_Python.SoTranslation_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTranslation_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTranslation_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoTranslation_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTranslation_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoTranslation_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoTranslation_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTranslation
    __del__ = lambda self : None;
SoTranslation_swigregister = Coin_SWIG_Python.SoTranslation_swigregister
SoTranslation_swigregister(SoTranslation)
SoTranslation_getClassTypeId = Coin_SWIG_Python.SoTranslation_getClassTypeId
SoTranslation_initClass = Coin_SWIG_Python.SoTranslation_initClass

class SoShuttle(SoTranslation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShuttle_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShuttle_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoShuttle_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShuttle(*args)
        try: self.this.append(this)
        except: self.this = this
    translation0 = _swig_property(Coin_SWIG_Python.SoShuttle_translation0_get, Coin_SWIG_Python.SoShuttle_translation0_set)
    translation1 = _swig_property(Coin_SWIG_Python.SoShuttle_translation1_get, Coin_SWIG_Python.SoShuttle_translation1_set)
    speed = _swig_property(Coin_SWIG_Python.SoShuttle_speed_get, Coin_SWIG_Python.SoShuttle_speed_set)
    on = _swig_property(Coin_SWIG_Python.SoShuttle_on_get, Coin_SWIG_Python.SoShuttle_on_set)
    def write(*args): return Coin_SWIG_Python.SoShuttle_write(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShuttle
    __del__ = lambda self : None;
SoShuttle_swigregister = Coin_SWIG_Python.SoShuttle_swigregister
SoShuttle_swigregister(SoShuttle)
SoShuttle_getClassTypeId = Coin_SWIG_Python.SoShuttle_getClassTypeId
SoShuttle_initClass = Coin_SWIG_Python.SoShuttle_initClass

class SoSphere(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSphere_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSphere_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSphere_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    radius = _swig_property(Coin_SWIG_Python.SoSphere_radius_get, Coin_SWIG_Python.SoSphere_radius_set)
    def GLRender(*args): return Coin_SWIG_Python.SoSphere_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoSphere_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoSphere_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSphere
    __del__ = lambda self : None;
SoSphere_swigregister = Coin_SWIG_Python.SoSphere_swigregister
SoSphere_swigregister(SoSphere)
SoSphere_getClassTypeId = Coin_SWIG_Python.SoSphere_getClassTypeId
SoSphere_initClass = Coin_SWIG_Python.SoSphere_initClass

class SoSurroundScale(SoTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSurroundScale_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSurroundScale_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSurroundScale_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSurroundScale(*args)
        try: self.this.append(this)
        except: self.this = this
    numNodesUpToContainer = _swig_property(Coin_SWIG_Python.SoSurroundScale_numNodesUpToContainer_get, Coin_SWIG_Python.SoSurroundScale_numNodesUpToContainer_set)
    numNodesUpToReset = _swig_property(Coin_SWIG_Python.SoSurroundScale_numNodesUpToReset_get, Coin_SWIG_Python.SoSurroundScale_numNodesUpToReset_set)
    def invalidate(*args): return Coin_SWIG_Python.SoSurroundScale_invalidate(*args)
    def doAction(*args): return Coin_SWIG_Python.SoSurroundScale_doAction(*args)
    def setDoingTranslations(*args): return Coin_SWIG_Python.SoSurroundScale_setDoingTranslations(*args)
    def isDoingTranslations(*args): return Coin_SWIG_Python.SoSurroundScale_isDoingTranslations(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSurroundScale
    __del__ = lambda self : None;
SoSurroundScale_swigregister = Coin_SWIG_Python.SoSurroundScale_swigregister
SoSurroundScale_swigregister(SoSurroundScale)
SoSurroundScale_getClassTypeId = Coin_SWIG_Python.SoSurroundScale_getClassTypeId
SoSurroundScale_initClass = Coin_SWIG_Python.SoSurroundScale_initClass

class SoText2(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoText2_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoText2_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoText2_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoText2(*args)
        try: self.this.append(this)
        except: self.this = this
    LEFT = Coin_SWIG_Python.SoText2_LEFT
    RIGHT = Coin_SWIG_Python.SoText2_RIGHT
    CENTER = Coin_SWIG_Python.SoText2_CENTER
    string = _swig_property(Coin_SWIG_Python.SoText2_string_get, Coin_SWIG_Python.SoText2_string_set)
    spacing = _swig_property(Coin_SWIG_Python.SoText2_spacing_get, Coin_SWIG_Python.SoText2_spacing_set)
    justification = _swig_property(Coin_SWIG_Python.SoText2_justification_get, Coin_SWIG_Python.SoText2_justification_set)
    def GLRender(*args): return Coin_SWIG_Python.SoText2_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoText2_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoText2_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoText2
    __del__ = lambda self : None;
SoText2_swigregister = Coin_SWIG_Python.SoText2_swigregister
SoText2_swigregister(SoText2)
SoText2_getClassTypeId = Coin_SWIG_Python.SoText2_getClassTypeId
SoText2_initClass = Coin_SWIG_Python.SoText2_initClass

class SoText3(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoText3_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoText3_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoText3_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoText3(*args)
        try: self.this.append(this)
        except: self.this = this
    FRONT = Coin_SWIG_Python.SoText3_FRONT
    SIDES = Coin_SWIG_Python.SoText3_SIDES
    BACK = Coin_SWIG_Python.SoText3_BACK
    ALL = Coin_SWIG_Python.SoText3_ALL
    LEFT = Coin_SWIG_Python.SoText3_LEFT
    RIGHT = Coin_SWIG_Python.SoText3_RIGHT
    CENTER = Coin_SWIG_Python.SoText3_CENTER
    string = _swig_property(Coin_SWIG_Python.SoText3_string_get, Coin_SWIG_Python.SoText3_string_set)
    spacing = _swig_property(Coin_SWIG_Python.SoText3_spacing_get, Coin_SWIG_Python.SoText3_spacing_set)
    justification = _swig_property(Coin_SWIG_Python.SoText3_justification_get, Coin_SWIG_Python.SoText3_justification_set)
    parts = _swig_property(Coin_SWIG_Python.SoText3_parts_get, Coin_SWIG_Python.SoText3_parts_set)
    def getCharacterBounds(*args): return Coin_SWIG_Python.SoText3_getCharacterBounds(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoText3_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoText3_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoText3
    __del__ = lambda self : None;
SoText3_swigregister = Coin_SWIG_Python.SoText3_swigregister
SoText3_swigregister(SoText3)
SoText3_getClassTypeId = Coin_SWIG_Python.SoText3_getClassTypeId
SoText3_initClass = Coin_SWIG_Python.SoText3_initClass

class SoTexture2Transform(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTexture2Transform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTexture2Transform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTexture2Transform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTexture2Transform(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTexture2Transform_translation_get, Coin_SWIG_Python.SoTexture2Transform_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoTexture2Transform_rotation_get, Coin_SWIG_Python.SoTexture2Transform_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTexture2Transform_scaleFactor_get, Coin_SWIG_Python.SoTexture2Transform_scaleFactor_set)
    center = _swig_property(Coin_SWIG_Python.SoTexture2Transform_center_get, Coin_SWIG_Python.SoTexture2Transform_center_set)
    def doAction(*args): return Coin_SWIG_Python.SoTexture2Transform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTexture2Transform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTexture2Transform_GLRender(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTexture2Transform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoTexture2Transform_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture2Transform
    __del__ = lambda self : None;
SoTexture2Transform_swigregister = Coin_SWIG_Python.SoTexture2Transform_swigregister
SoTexture2Transform_swigregister(SoTexture2Transform)
SoTexture2Transform_getClassTypeId = Coin_SWIG_Python.SoTexture2Transform_getClassTypeId
SoTexture2Transform_initClass = Coin_SWIG_Python.SoTexture2Transform_initClass

class SoTexture3(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTexture3_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTexture3_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTexture3_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTexture3(*args)
        try: self.this.append(this)
        except: self.this = this
    MODULATE = Coin_SWIG_Python.SoTexture3_MODULATE
    DECAL = Coin_SWIG_Python.SoTexture3_DECAL
    BLEND = Coin_SWIG_Python.SoTexture3_BLEND
    REPEAT = Coin_SWIG_Python.SoTexture3_REPEAT
    CLAMP = Coin_SWIG_Python.SoTexture3_CLAMP
    filenames = _swig_property(Coin_SWIG_Python.SoTexture3_filenames_get, Coin_SWIG_Python.SoTexture3_filenames_set)
    images = _swig_property(Coin_SWIG_Python.SoTexture3_images_get, Coin_SWIG_Python.SoTexture3_images_set)
    wrapR = _swig_property(Coin_SWIG_Python.SoTexture3_wrapR_get, Coin_SWIG_Python.SoTexture3_wrapR_set)
    wrapS = _swig_property(Coin_SWIG_Python.SoTexture3_wrapS_get, Coin_SWIG_Python.SoTexture3_wrapS_set)
    wrapT = _swig_property(Coin_SWIG_Python.SoTexture3_wrapT_get, Coin_SWIG_Python.SoTexture3_wrapT_set)
    model = _swig_property(Coin_SWIG_Python.SoTexture3_model_get, Coin_SWIG_Python.SoTexture3_model_set)
    blendColor = _swig_property(Coin_SWIG_Python.SoTexture3_blendColor_get, Coin_SWIG_Python.SoTexture3_blendColor_set)
    def doAction(*args): return Coin_SWIG_Python.SoTexture3_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTexture3_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTexture3_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture3
    __del__ = lambda self : None;
SoTexture3_swigregister = Coin_SWIG_Python.SoTexture3_swigregister
SoTexture3_swigregister(SoTexture3)
SoTexture3_getClassTypeId = Coin_SWIG_Python.SoTexture3_getClassTypeId
SoTexture3_initClass = Coin_SWIG_Python.SoTexture3_initClass

class SoTexture3Transform(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTexture3Transform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTexture3Transform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTexture3Transform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTexture3Transform(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoTexture3Transform_translation_get, Coin_SWIG_Python.SoTexture3Transform_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoTexture3Transform_rotation_get, Coin_SWIG_Python.SoTexture3Transform_rotation_set)
    scaleFactor = _swig_property(Coin_SWIG_Python.SoTexture3Transform_scaleFactor_get, Coin_SWIG_Python.SoTexture3Transform_scaleFactor_set)
    scaleOrientation = _swig_property(Coin_SWIG_Python.SoTexture3Transform_scaleOrientation_get, Coin_SWIG_Python.SoTexture3Transform_scaleOrientation_set)
    center = _swig_property(Coin_SWIG_Python.SoTexture3Transform_center_get, Coin_SWIG_Python.SoTexture3Transform_center_set)
    def doAction(*args): return Coin_SWIG_Python.SoTexture3Transform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTexture3Transform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTexture3Transform_GLRender(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTexture3Transform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoTexture3Transform_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTexture3Transform
    __del__ = lambda self : None;
SoTexture3Transform_swigregister = Coin_SWIG_Python.SoTexture3Transform_swigregister
SoTexture3Transform_swigregister(SoTexture3Transform)
SoTexture3Transform_getClassTypeId = Coin_SWIG_Python.SoTexture3Transform_getClassTypeId
SoTexture3Transform_initClass = Coin_SWIG_Python.SoTexture3Transform_initClass

class SoTextureMatrixTransform(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureMatrixTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureMatrixTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureMatrixTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureMatrixTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    matrix = _swig_property(Coin_SWIG_Python.SoTextureMatrixTransform_matrix_get, Coin_SWIG_Python.SoTextureMatrixTransform_matrix_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureMatrixTransform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureMatrixTransform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureMatrixTransform_GLRender(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTextureMatrixTransform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureMatrixTransform_pick(*args)
SoTextureMatrixTransform_swigregister = Coin_SWIG_Python.SoTextureMatrixTransform_swigregister
SoTextureMatrixTransform_swigregister(SoTextureMatrixTransform)
SoTextureMatrixTransform_getClassTypeId = Coin_SWIG_Python.SoTextureMatrixTransform_getClassTypeId
SoTextureMatrixTransform_initClass = Coin_SWIG_Python.SoTextureMatrixTransform_initClass

class SoTextureCoordinate2(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinate2_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinate2_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinate2_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinate2(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoTextureCoordinate2_point_get, Coin_SWIG_Python.SoTextureCoordinate2_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinate2_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinate2_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinate2_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinate2_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinate2
    __del__ = lambda self : None;
SoTextureCoordinate2_swigregister = Coin_SWIG_Python.SoTextureCoordinate2_swigregister
SoTextureCoordinate2_swigregister(SoTextureCoordinate2)
SoTextureCoordinate2_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinate2_getClassTypeId
SoTextureCoordinate2_initClass = Coin_SWIG_Python.SoTextureCoordinate2_initClass

class SoTextureCoordinate3(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinate3_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinate3_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinate3_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinate3(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoTextureCoordinate3_point_get, Coin_SWIG_Python.SoTextureCoordinate3_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinate3_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinate3_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinate3_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinate3_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinate3
    __del__ = lambda self : None;
SoTextureCoordinate3_swigregister = Coin_SWIG_Python.SoTextureCoordinate3_swigregister
SoTextureCoordinate3_swigregister(SoTextureCoordinate3)
SoTextureCoordinate3_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinate3_getClassTypeId
SoTextureCoordinate3_initClass = Coin_SWIG_Python.SoTextureCoordinate3_initClass

class SoTextureCoordinateFunction(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateFunction_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateFunction_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateFunction_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateFunction
    __del__ = lambda self : None;
SoTextureCoordinateFunction_swigregister = Coin_SWIG_Python.SoTextureCoordinateFunction_swigregister
SoTextureCoordinateFunction_swigregister(SoTextureCoordinateFunction)
SoTextureCoordinateFunction_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateFunction_getClassTypeId
SoTextureCoordinateFunction_initClass = Coin_SWIG_Python.SoTextureCoordinateFunction_initClass

class SoTextureCoordinateDefault(SoTextureCoordinateFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateDefault_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateDefault_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateDefault_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateDefault(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinateDefault_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinateDefault_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinateDefault_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinateDefault_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateDefault
    __del__ = lambda self : None;
SoTextureCoordinateDefault_swigregister = Coin_SWIG_Python.SoTextureCoordinateDefault_swigregister
SoTextureCoordinateDefault_swigregister(SoTextureCoordinateDefault)
SoTextureCoordinateDefault_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateDefault_getClassTypeId
SoTextureCoordinateDefault_initClass = Coin_SWIG_Python.SoTextureCoordinateDefault_initClass

class SoTextureCoordinateEnvironment(SoTextureCoordinateFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateEnvironment_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateEnvironment_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateEnvironment_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateEnvironment(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinateEnvironment_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinateEnvironment_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinateEnvironment_pick(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinateEnvironment_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinateEnvironment
    __del__ = lambda self : None;
SoTextureCoordinateEnvironment_swigregister = Coin_SWIG_Python.SoTextureCoordinateEnvironment_swigregister
SoTextureCoordinateEnvironment_swigregister(SoTextureCoordinateEnvironment)
SoTextureCoordinateEnvironment_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateEnvironment_getClassTypeId
SoTextureCoordinateEnvironment_initClass = Coin_SWIG_Python.SoTextureCoordinateEnvironment_initClass

class SoTextureCoordinatePlane(SoTextureCoordinateFunction):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinatePlane_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinatePlane_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinatePlane_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinatePlane(*args)
        try: self.this.append(this)
        except: self.this = this
    directionS = _swig_property(Coin_SWIG_Python.SoTextureCoordinatePlane_directionS_get, Coin_SWIG_Python.SoTextureCoordinatePlane_directionS_set)
    directionT = _swig_property(Coin_SWIG_Python.SoTextureCoordinatePlane_directionT_get, Coin_SWIG_Python.SoTextureCoordinatePlane_directionT_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinatePlane_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinatePlane_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinatePlane_pick(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinatePlane_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureCoordinatePlane
    __del__ = lambda self : None;
SoTextureCoordinatePlane_swigregister = Coin_SWIG_Python.SoTextureCoordinatePlane_swigregister
SoTextureCoordinatePlane_swigregister(SoTextureCoordinatePlane)
SoTextureCoordinatePlane_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinatePlane_getClassTypeId
SoTextureCoordinatePlane_initClass = Coin_SWIG_Python.SoTextureCoordinatePlane_initClass

class SoTransformSeparator(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransformSeparator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransformSeparator_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransformSeparator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransformSeparator(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoTransformSeparator_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTransformSeparator_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTransformSeparator_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoTransformSeparator_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoTransformSeparator_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoTransformSeparator_getMatrix(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoTransformSeparator_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoTransformSeparator_audioRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransformSeparator
    __del__ = lambda self : None;
SoTransformSeparator_swigregister = Coin_SWIG_Python.SoTransformSeparator_swigregister
SoTransformSeparator_swigregister(SoTransformSeparator)
SoTransformSeparator_getClassTypeId = Coin_SWIG_Python.SoTransformSeparator_getClassTypeId
SoTransformSeparator_initClass = Coin_SWIG_Python.SoTransformSeparator_initClass

class SoTransparencyType(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTransparencyType_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTransparencyType_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTransparencyType_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTransparencyType(*args)
        try: self.this.append(this)
        except: self.this = this
    SCREEN_DOOR = Coin_SWIG_Python.SoTransparencyType_SCREEN_DOOR
    ADD = Coin_SWIG_Python.SoTransparencyType_ADD
    DELAYED_ADD = Coin_SWIG_Python.SoTransparencyType_DELAYED_ADD
    SORTED_OBJECT_ADD = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_ADD
    BLEND = Coin_SWIG_Python.SoTransparencyType_BLEND
    DELAYED_BLEND = Coin_SWIG_Python.SoTransparencyType_DELAYED_BLEND
    SORTED_OBJECT_BLEND = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_BLEND
    SORTED_OBJECT_SORTED_TRIANGLE_ADD = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_SORTED_TRIANGLE_ADD
    SORTED_OBJECT_SORTED_TRIANGLE_BLEND = Coin_SWIG_Python.SoTransparencyType_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
    NONE = Coin_SWIG_Python.SoTransparencyType_NONE
    value = _swig_property(Coin_SWIG_Python.SoTransparencyType_value_get, Coin_SWIG_Python.SoTransparencyType_value_set)
    def doAction(*args): return Coin_SWIG_Python.SoTransparencyType_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTransparencyType_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTransparencyType_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTransparencyType
    __del__ = lambda self : None;
SoTransparencyType_swigregister = Coin_SWIG_Python.SoTransparencyType_swigregister
SoTransparencyType_swigregister(SoTransparencyType)
SoTransparencyType_getClassTypeId = Coin_SWIG_Python.SoTransparencyType_getClassTypeId
SoTransparencyType_initClass = Coin_SWIG_Python.SoTransparencyType_initClass

class SoTriangleStripSet(SoNonIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTriangleStripSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTriangleStripSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTriangleStripSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTriangleStripSet(*args)
        try: self.this.append(this)
        except: self.this = this
    numVertices = _swig_property(Coin_SWIG_Python.SoTriangleStripSet_numVertices_get, Coin_SWIG_Python.SoTriangleStripSet_numVertices_set)
    def GLRender(*args): return Coin_SWIG_Python.SoTriangleStripSet_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoTriangleStripSet_getPrimitiveCount(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoTriangleStripSet_generateDefaultNormals(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTriangleStripSet
    __del__ = lambda self : None;
SoTriangleStripSet_swigregister = Coin_SWIG_Python.SoTriangleStripSet_swigregister
SoTriangleStripSet_swigregister(SoTriangleStripSet)
SoTriangleStripSet_getClassTypeId = Coin_SWIG_Python.SoTriangleStripSet_getClassTypeId
SoTriangleStripSet_initClass = Coin_SWIG_Python.SoTriangleStripSet_initClass

class SoWWWAnchor(SoLocateHighlight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoWWWAnchor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoWWWAnchor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoWWWAnchor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoWWWAnchor(*args)
        try: self.this.append(this)
        except: self.this = this
    NONE = Coin_SWIG_Python.SoWWWAnchor_NONE
    POINT = Coin_SWIG_Python.SoWWWAnchor_POINT
    name = _swig_property(Coin_SWIG_Python.SoWWWAnchor_name_get, Coin_SWIG_Python.SoWWWAnchor_name_set)
    description = _swig_property(Coin_SWIG_Python.SoWWWAnchor_description_get, Coin_SWIG_Python.SoWWWAnchor_description_set)
    map = _swig_property(Coin_SWIG_Python.SoWWWAnchor_map_get, Coin_SWIG_Python.SoWWWAnchor_map_set)
    def setFullURLName(*args): return Coin_SWIG_Python.SoWWWAnchor_setFullURLName(*args)
    def getFullURLName(*args): return Coin_SWIG_Python.SoWWWAnchor_getFullURLName(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoWWWAnchor_handleEvent(*args)
    setFetchURLCallBack = staticmethod(Coin_SWIG_Python.SoWWWAnchor_setFetchURLCallBack)
    setHighlightURLCallBack = staticmethod(Coin_SWIG_Python.SoWWWAnchor_setHighlightURLCallBack)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWWWAnchor
    __del__ = lambda self : None;
SoWWWAnchor_swigregister = Coin_SWIG_Python.SoWWWAnchor_swigregister
SoWWWAnchor_swigregister(SoWWWAnchor)
SoWWWAnchor_getClassTypeId = Coin_SWIG_Python.SoWWWAnchor_getClassTypeId
SoWWWAnchor_initClass = Coin_SWIG_Python.SoWWWAnchor_initClass
SoWWWAnchor_setFetchURLCallBack = Coin_SWIG_Python.SoWWWAnchor_setFetchURLCallBack
SoWWWAnchor_setHighlightURLCallBack = Coin_SWIG_Python.SoWWWAnchor_setHighlightURLCallBack

class SoWWWInline(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoWWWInline_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoWWWInline_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoWWWInline_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoWWWInline(*args)
        try: self.this.append(this)
        except: self.this = this
    name = _swig_property(Coin_SWIG_Python.SoWWWInline_name_get, Coin_SWIG_Python.SoWWWInline_name_set)
    bboxCenter = _swig_property(Coin_SWIG_Python.SoWWWInline_bboxCenter_get, Coin_SWIG_Python.SoWWWInline_bboxCenter_set)
    bboxSize = _swig_property(Coin_SWIG_Python.SoWWWInline_bboxSize_get, Coin_SWIG_Python.SoWWWInline_bboxSize_set)
    alternateRep = _swig_property(Coin_SWIG_Python.SoWWWInline_alternateRep_get, Coin_SWIG_Python.SoWWWInline_alternateRep_set)
    NEVER = Coin_SWIG_Python.SoWWWInline_NEVER
    UNTIL_LOADED = Coin_SWIG_Python.SoWWWInline_UNTIL_LOADED
    ALWAYS = Coin_SWIG_Python.SoWWWInline_ALWAYS
    def setFullURLName(*args): return Coin_SWIG_Python.SoWWWInline_setFullURLName(*args)
    def getFullURLName(*args): return Coin_SWIG_Python.SoWWWInline_getFullURLName(*args)
    def copyChildren(*args): return Coin_SWIG_Python.SoWWWInline_copyChildren(*args)
    def requestURLData(*args): return Coin_SWIG_Python.SoWWWInline_requestURLData(*args)
    def isURLDataRequested(*args): return Coin_SWIG_Python.SoWWWInline_isURLDataRequested(*args)
    def isURLDataHere(*args): return Coin_SWIG_Python.SoWWWInline_isURLDataHere(*args)
    def cancelURLDataRequest(*args): return Coin_SWIG_Python.SoWWWInline_cancelURLDataRequest(*args)
    def setChildData(*args): return Coin_SWIG_Python.SoWWWInline_setChildData(*args)
    def getChildData(*args): return Coin_SWIG_Python.SoWWWInline_getChildData(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoWWWInline_getChildren(*args)
    setFetchURLCallBack = staticmethod(Coin_SWIG_Python.SoWWWInline_setFetchURLCallBack)
    setBoundingBoxVisibility = staticmethod(Coin_SWIG_Python.SoWWWInline_setBoundingBoxVisibility)
    getBoundingBoxVisibility = staticmethod(Coin_SWIG_Python.SoWWWInline_getBoundingBoxVisibility)
    setBoundingBoxColor = staticmethod(Coin_SWIG_Python.SoWWWInline_setBoundingBoxColor)
    getBoundingBoxColor = staticmethod(Coin_SWIG_Python.SoWWWInline_getBoundingBoxColor)
    setReadAsSoFile = staticmethod(Coin_SWIG_Python.SoWWWInline_setReadAsSoFile)
    getReadAsSoFile = staticmethod(Coin_SWIG_Python.SoWWWInline_getReadAsSoFile)
    def doAction(*args): return Coin_SWIG_Python.SoWWWInline_doAction(*args)
    def doActionOnKidsOrBox(*args): return Coin_SWIG_Python.SoWWWInline_doActionOnKidsOrBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoWWWInline_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoWWWInline_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoWWWInline_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoWWWInline_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoWWWInline_handleEvent(*args)
    def search(*args): return Coin_SWIG_Python.SoWWWInline_search(*args)
    def pick(*args): return Coin_SWIG_Python.SoWWWInline_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoWWWInline_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoWWWInline_audioRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoWWWInline
    __del__ = lambda self : None;
SoWWWInline_swigregister = Coin_SWIG_Python.SoWWWInline_swigregister
SoWWWInline_swigregister(SoWWWInline)
SoWWWInline_getClassTypeId = Coin_SWIG_Python.SoWWWInline_getClassTypeId
SoWWWInline_initClass = Coin_SWIG_Python.SoWWWInline_initClass
SoWWWInline_setFetchURLCallBack = Coin_SWIG_Python.SoWWWInline_setFetchURLCallBack
SoWWWInline_setBoundingBoxVisibility = Coin_SWIG_Python.SoWWWInline_setBoundingBoxVisibility
SoWWWInline_getBoundingBoxVisibility = Coin_SWIG_Python.SoWWWInline_getBoundingBoxVisibility
SoWWWInline_setBoundingBoxColor = Coin_SWIG_Python.SoWWWInline_setBoundingBoxColor
SoWWWInline_getBoundingBoxColor = Coin_SWIG_Python.SoWWWInline_getBoundingBoxColor
SoWWWInline_setReadAsSoFile = Coin_SWIG_Python.SoWWWInline_setReadAsSoFile
SoWWWInline_getReadAsSoFile = Coin_SWIG_Python.SoWWWInline_getReadAsSoFile

class SoTextureScalePolicy(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureScalePolicy_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureScalePolicy_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureScalePolicy_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureScalePolicy(*args)
        try: self.this.append(this)
        except: self.this = this
    USE_TEXTURE_QUALITY = Coin_SWIG_Python.SoTextureScalePolicy_USE_TEXTURE_QUALITY
    SCALE_DOWN = Coin_SWIG_Python.SoTextureScalePolicy_SCALE_DOWN
    SCALE_UP = Coin_SWIG_Python.SoTextureScalePolicy_SCALE_UP
    FRACTURE = Coin_SWIG_Python.SoTextureScalePolicy_FRACTURE
    policy = _swig_property(Coin_SWIG_Python.SoTextureScalePolicy_policy_get, Coin_SWIG_Python.SoTextureScalePolicy_policy_set)
    quality = _swig_property(Coin_SWIG_Python.SoTextureScalePolicy_quality_get, Coin_SWIG_Python.SoTextureScalePolicy_quality_set)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureScalePolicy_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureScalePolicy
    __del__ = lambda self : None;
SoTextureScalePolicy_swigregister = Coin_SWIG_Python.SoTextureScalePolicy_swigregister
SoTextureScalePolicy_swigregister(SoTextureScalePolicy)
SoTextureScalePolicy_getClassTypeId = Coin_SWIG_Python.SoTextureScalePolicy_getClassTypeId
SoTextureScalePolicy_initClass = Coin_SWIG_Python.SoTextureScalePolicy_initClass

class SoTextureUnit(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureUnit_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureUnit_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureUnit_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureUnit(*args)
        try: self.this.append(this)
        except: self.this = this
    BUMP_MAPPING = Coin_SWIG_Python.SoTextureUnit_BUMP_MAPPING
    IMAGE_MAPPING = Coin_SWIG_Python.SoTextureUnit_IMAGE_MAPPING
    unit = _swig_property(Coin_SWIG_Python.SoTextureUnit_unit_get, Coin_SWIG_Python.SoTextureUnit_unit_set)
    mappingMethod = _swig_property(Coin_SWIG_Python.SoTextureUnit_mappingMethod_get, Coin_SWIG_Python.SoTextureUnit_mappingMethod_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureUnit_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureUnit_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureUnit_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureUnit_pick(*args)
    getMaxTextureUnit = staticmethod(Coin_SWIG_Python.SoTextureUnit_getMaxTextureUnit)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoTextureUnit
    __del__ = lambda self : None;
SoTextureUnit_swigregister = Coin_SWIG_Python.SoTextureUnit_swigregister
SoTextureUnit_swigregister(SoTextureUnit)
SoTextureUnit_getClassTypeId = Coin_SWIG_Python.SoTextureUnit_getClassTypeId
SoTextureUnit_initClass = Coin_SWIG_Python.SoTextureUnit_initClass
SoTextureUnit_getMaxTextureUnit = Coin_SWIG_Python.SoTextureUnit_getMaxTextureUnit

class SoSceneTexture2(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoSceneTexture2_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoSceneTexture2_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoSceneTexture2_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSceneTexture2(*args)
        try: self.this.append(this)
        except: self.this = this
    MODULATE = Coin_SWIG_Python.SoSceneTexture2_MODULATE
    DECAL = Coin_SWIG_Python.SoSceneTexture2_DECAL
    BLEND = Coin_SWIG_Python.SoSceneTexture2_BLEND
    REPLACE = Coin_SWIG_Python.SoSceneTexture2_REPLACE
    REPEAT = Coin_SWIG_Python.SoSceneTexture2_REPEAT
    CLAMP = Coin_SWIG_Python.SoSceneTexture2_CLAMP
    CLAMP_TO_BORDER = Coin_SWIG_Python.SoSceneTexture2_CLAMP_TO_BORDER
    NONE = Coin_SWIG_Python.SoSceneTexture2_NONE
    ALPHA_BLEND = Coin_SWIG_Python.SoSceneTexture2_ALPHA_BLEND
    ALPHA_TEST = Coin_SWIG_Python.SoSceneTexture2_ALPHA_TEST
    DEPTH = Coin_SWIG_Python.SoSceneTexture2_DEPTH
    RGBA8 = Coin_SWIG_Python.SoSceneTexture2_RGBA8
    RGBA32F = Coin_SWIG_Python.SoSceneTexture2_RGBA32F
    RGB32F = Coin_SWIG_Python.SoSceneTexture2_RGB32F
    RGBA16F = Coin_SWIG_Python.SoSceneTexture2_RGBA16F
    RGB16F = Coin_SWIG_Python.SoSceneTexture2_RGB16F
    R3_G3_B2 = Coin_SWIG_Python.SoSceneTexture2_R3_G3_B2
    RGB = Coin_SWIG_Python.SoSceneTexture2_RGB
    RGB4 = Coin_SWIG_Python.SoSceneTexture2_RGB4
    RGB5 = Coin_SWIG_Python.SoSceneTexture2_RGB5
    RGB8 = Coin_SWIG_Python.SoSceneTexture2_RGB8
    RGB10 = Coin_SWIG_Python.SoSceneTexture2_RGB10
    RGB12 = Coin_SWIG_Python.SoSceneTexture2_RGB12
    RGB16 = Coin_SWIG_Python.SoSceneTexture2_RGB16
    RGBA = Coin_SWIG_Python.SoSceneTexture2_RGBA
    RGBA2 = Coin_SWIG_Python.SoSceneTexture2_RGBA2
    RGBA4 = Coin_SWIG_Python.SoSceneTexture2_RGBA4
    RGB5_A1 = Coin_SWIG_Python.SoSceneTexture2_RGB5_A1
    RGB10_A2 = Coin_SWIG_Python.SoSceneTexture2_RGB10_A2
    RGBA12 = Coin_SWIG_Python.SoSceneTexture2_RGBA12
    RGBA16 = Coin_SWIG_Python.SoSceneTexture2_RGBA16
    wrapS = _swig_property(Coin_SWIG_Python.SoSceneTexture2_wrapS_get, Coin_SWIG_Python.SoSceneTexture2_wrapS_set)
    wrapT = _swig_property(Coin_SWIG_Python.SoSceneTexture2_wrapT_get, Coin_SWIG_Python.SoSceneTexture2_wrapT_set)
    model = _swig_property(Coin_SWIG_Python.SoSceneTexture2_model_get, Coin_SWIG_Python.SoSceneTexture2_model_set)
    blendColor = _swig_property(Coin_SWIG_Python.SoSceneTexture2_blendColor_get, Coin_SWIG_Python.SoSceneTexture2_blendColor_set)
    backgroundColor = _swig_property(Coin_SWIG_Python.SoSceneTexture2_backgroundColor_get, Coin_SWIG_Python.SoSceneTexture2_backgroundColor_set)
    size = _swig_property(Coin_SWIG_Python.SoSceneTexture2_size_get, Coin_SWIG_Python.SoSceneTexture2_size_set)
    scene = _swig_property(Coin_SWIG_Python.SoSceneTexture2_scene_get, Coin_SWIG_Python.SoSceneTexture2_scene_set)
    transparencyFunction = _swig_property(Coin_SWIG_Python.SoSceneTexture2_transparencyFunction_get, Coin_SWIG_Python.SoSceneTexture2_transparencyFunction_set)
    def notify(*args): return Coin_SWIG_Python.SoSceneTexture2_notify(*args)
    def write(*args): return Coin_SWIG_Python.SoSceneTexture2_write(*args)
    def doAction(*args): return Coin_SWIG_Python.SoSceneTexture2_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoSceneTexture2_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoSceneTexture2_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoSceneTexture2_rayPick(*args)
    def setType(*args): return Coin_SWIG_Python.SoSceneTexture2_setType(*args)
    def setSceneTransparencyType(*args): return Coin_SWIG_Python.SoSceneTexture2_setSceneTransparencyType(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSceneTexture2
    __del__ = lambda self : None;
SoSceneTexture2_swigregister = Coin_SWIG_Python.SoSceneTexture2_swigregister
SoSceneTexture2_swigregister(SoSceneTexture2)
SoSceneTexture2_getClassTypeId = Coin_SWIG_Python.SoSceneTexture2_getClassTypeId
SoSceneTexture2_initClass = Coin_SWIG_Python.SoSceneTexture2_initClass

class SoTextureCoordinateCube(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateCube_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateCube_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateCube_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateCube(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinateCube_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinateCube_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinateCube_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinateCube_pick(*args)
SoTextureCoordinateCube_swigregister = Coin_SWIG_Python.SoTextureCoordinateCube_swigregister
SoTextureCoordinateCube_swigregister(SoTextureCoordinateCube)
SoTextureCoordinateCube_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateCube_getClassTypeId
SoTextureCoordinateCube_initClass = Coin_SWIG_Python.SoTextureCoordinateCube_initClass

class SoTextureCoordinateSphere(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateSphere_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateSphere_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateSphere_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinateSphere_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinateSphere_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinateSphere_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinateSphere_pick(*args)
SoTextureCoordinateSphere_swigregister = Coin_SWIG_Python.SoTextureCoordinateSphere_swigregister
SoTextureCoordinateSphere_swigregister(SoTextureCoordinateSphere)
SoTextureCoordinateSphere_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateSphere_getClassTypeId
SoTextureCoordinateSphere_initClass = Coin_SWIG_Python.SoTextureCoordinateSphere_initClass

class SoTextureCoordinateCylinder(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCoordinateCylinder_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCoordinateCylinder_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCoordinateCylinder_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCoordinateCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def doAction(*args): return Coin_SWIG_Python.SoTextureCoordinateCylinder_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCoordinateCylinder_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCoordinateCylinder_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCoordinateCylinder_pick(*args)
SoTextureCoordinateCylinder_swigregister = Coin_SWIG_Python.SoTextureCoordinateCylinder_swigregister
SoTextureCoordinateCylinder_swigregister(SoTextureCoordinateCylinder)
SoTextureCoordinateCylinder_getClassTypeId = Coin_SWIG_Python.SoTextureCoordinateCylinder_getClassTypeId
SoTextureCoordinateCylinder_initClass = Coin_SWIG_Python.SoTextureCoordinateCylinder_initClass

class SoTextureCombine(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCombine_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCombine_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCombine_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCombine(*args)
        try: self.this.append(this)
        except: self.this = this
    PRIMARY_COLOR = Coin_SWIG_Python.SoTextureCombine_PRIMARY_COLOR
    TEXTURE = Coin_SWIG_Python.SoTextureCombine_TEXTURE
    CONSTANT = Coin_SWIG_Python.SoTextureCombine_CONSTANT
    PREVIOUS = Coin_SWIG_Python.SoTextureCombine_PREVIOUS
    SRC_COLOR = Coin_SWIG_Python.SoTextureCombine_SRC_COLOR
    ONE_MINUS_SRC_COLOR = Coin_SWIG_Python.SoTextureCombine_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = Coin_SWIG_Python.SoTextureCombine_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = Coin_SWIG_Python.SoTextureCombine_ONE_MINUS_SRC_ALPHA
    REPLACE = Coin_SWIG_Python.SoTextureCombine_REPLACE
    MODULATE = Coin_SWIG_Python.SoTextureCombine_MODULATE
    ADD = Coin_SWIG_Python.SoTextureCombine_ADD
    ADD_SIGNED = Coin_SWIG_Python.SoTextureCombine_ADD_SIGNED
    SUBTRACT = Coin_SWIG_Python.SoTextureCombine_SUBTRACT
    INTERPOLATE = Coin_SWIG_Python.SoTextureCombine_INTERPOLATE
    DOT3_RGB = Coin_SWIG_Python.SoTextureCombine_DOT3_RGB
    DOT3_RGBA = Coin_SWIG_Python.SoTextureCombine_DOT3_RGBA
    rgbSource = _swig_property(Coin_SWIG_Python.SoTextureCombine_rgbSource_get, Coin_SWIG_Python.SoTextureCombine_rgbSource_set)
    alphaSource = _swig_property(Coin_SWIG_Python.SoTextureCombine_alphaSource_get, Coin_SWIG_Python.SoTextureCombine_alphaSource_set)
    rgbOperand = _swig_property(Coin_SWIG_Python.SoTextureCombine_rgbOperand_get, Coin_SWIG_Python.SoTextureCombine_rgbOperand_set)
    alphaOperand = _swig_property(Coin_SWIG_Python.SoTextureCombine_alphaOperand_get, Coin_SWIG_Python.SoTextureCombine_alphaOperand_set)
    rgbOperation = _swig_property(Coin_SWIG_Python.SoTextureCombine_rgbOperation_get, Coin_SWIG_Python.SoTextureCombine_rgbOperation_set)
    alphaOperation = _swig_property(Coin_SWIG_Python.SoTextureCombine_alphaOperation_get, Coin_SWIG_Python.SoTextureCombine_alphaOperation_set)
    rgbScale = _swig_property(Coin_SWIG_Python.SoTextureCombine_rgbScale_get, Coin_SWIG_Python.SoTextureCombine_rgbScale_set)
    alphaScale = _swig_property(Coin_SWIG_Python.SoTextureCombine_alphaScale_get, Coin_SWIG_Python.SoTextureCombine_alphaScale_set)
    constantColor = _swig_property(Coin_SWIG_Python.SoTextureCombine_constantColor_get, Coin_SWIG_Python.SoTextureCombine_constantColor_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureCombine_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCombine_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCombine_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoTextureCombine_pick(*args)
SoTextureCombine_swigregister = Coin_SWIG_Python.SoTextureCombine_swigregister
SoTextureCombine_swigregister(SoTextureCombine)
SoTextureCombine_getClassTypeId = Coin_SWIG_Python.SoTextureCombine_getClassTypeId
SoTextureCombine_initClass = Coin_SWIG_Python.SoTextureCombine_initClass

class SoTextureCubeMap(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoTextureCubeMap_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoTextureCubeMap_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoTextureCubeMap_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoTextureCubeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    MODULATE = Coin_SWIG_Python.SoTextureCubeMap_MODULATE
    DECAL = Coin_SWIG_Python.SoTextureCubeMap_DECAL
    BLEND = Coin_SWIG_Python.SoTextureCubeMap_BLEND
    REPLACE = Coin_SWIG_Python.SoTextureCubeMap_REPLACE
    REPEAT = Coin_SWIG_Python.SoTextureCubeMap_REPEAT
    CLAMP = Coin_SWIG_Python.SoTextureCubeMap_CLAMP
    filenames = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_filenames_get, Coin_SWIG_Python.SoTextureCubeMap_filenames_set)
    imagePosX = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_imagePosX_get, Coin_SWIG_Python.SoTextureCubeMap_imagePosX_set)
    imageNegX = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_imageNegX_get, Coin_SWIG_Python.SoTextureCubeMap_imageNegX_set)
    imagePosY = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_imagePosY_get, Coin_SWIG_Python.SoTextureCubeMap_imagePosY_set)
    imageNegY = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_imageNegY_get, Coin_SWIG_Python.SoTextureCubeMap_imageNegY_set)
    imagePosZ = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_imagePosZ_get, Coin_SWIG_Python.SoTextureCubeMap_imagePosZ_set)
    imageNegZ = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_imageNegZ_get, Coin_SWIG_Python.SoTextureCubeMap_imageNegZ_set)
    wrapS = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_wrapS_get, Coin_SWIG_Python.SoTextureCubeMap_wrapS_set)
    wrapT = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_wrapT_get, Coin_SWIG_Python.SoTextureCubeMap_wrapT_set)
    model = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_model_get, Coin_SWIG_Python.SoTextureCubeMap_model_set)
    blendColor = _swig_property(Coin_SWIG_Python.SoTextureCubeMap_blendColor_get, Coin_SWIG_Python.SoTextureCubeMap_blendColor_set)
    def doAction(*args): return Coin_SWIG_Python.SoTextureCubeMap_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoTextureCubeMap_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoTextureCubeMap_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoTextureCubeMap_rayPick(*args)
    readImage = staticmethod(Coin_SWIG_Python.SoTextureCubeMap_readImage)
SoTextureCubeMap_swigregister = Coin_SWIG_Python.SoTextureCubeMap_swigregister
SoTextureCubeMap_swigregister(SoTextureCubeMap)
SoTextureCubeMap_getClassTypeId = Coin_SWIG_Python.SoTextureCubeMap_getClassTypeId
SoTextureCubeMap_initClass = Coin_SWIG_Python.SoTextureCubeMap_initClass
SoTextureCubeMap_readImage = Coin_SWIG_Python.SoTextureCubeMap_readImage

class SoShaderObject(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderObject_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderObject_getTypeId(*args)
    ARB_PROGRAM = Coin_SWIG_Python.SoShaderObject_ARB_PROGRAM
    CG_PROGRAM = Coin_SWIG_Python.SoShaderObject_CG_PROGRAM
    GLSL_PROGRAM = Coin_SWIG_Python.SoShaderObject_GLSL_PROGRAM
    FILENAME = Coin_SWIG_Python.SoShaderObject_FILENAME
    isActive = _swig_property(Coin_SWIG_Python.SoShaderObject_isActive_get, Coin_SWIG_Python.SoShaderObject_isActive_set)
    sourceType = _swig_property(Coin_SWIG_Python.SoShaderObject_sourceType_get, Coin_SWIG_Python.SoShaderObject_sourceType_set)
    sourceProgram = _swig_property(Coin_SWIG_Python.SoShaderObject_sourceProgram_get, Coin_SWIG_Python.SoShaderObject_sourceProgram_set)
    parameter = _swig_property(Coin_SWIG_Python.SoShaderObject_parameter_get, Coin_SWIG_Python.SoShaderObject_parameter_set)
    initClass = staticmethod(Coin_SWIG_Python.SoShaderObject_initClass)
    def GLRender(*args): return Coin_SWIG_Python.SoShaderObject_GLRender(*args)
    def search(*args): return Coin_SWIG_Python.SoShaderObject_search(*args)
    def updateParameters(*args): return Coin_SWIG_Python.SoShaderObject_updateParameters(*args)
    def getSourceType(*args): return Coin_SWIG_Python.SoShaderObject_getSourceType(*args)
    def getSourceProgram(*args): return Coin_SWIG_Python.SoShaderObject_getSourceProgram(*args)
SoShaderObject_swigregister = Coin_SWIG_Python.SoShaderObject_swigregister
SoShaderObject_swigregister(SoShaderObject)
SoShaderObject_getClassTypeId = Coin_SWIG_Python.SoShaderObject_getClassTypeId
SoShaderObject_initClass = Coin_SWIG_Python.SoShaderObject_initClass

class SoShaderParameter(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter_getTypeId(*args)
    name = _swig_property(Coin_SWIG_Python.SoShaderParameter_name_get, Coin_SWIG_Python.SoShaderParameter_name_set)
    identifier = _swig_property(Coin_SWIG_Python.SoShaderParameter_identifier_get, Coin_SWIG_Python.SoShaderParameter_identifier_set)
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter_initClass)
SoShaderParameter_swigregister = Coin_SWIG_Python.SoShaderParameter_swigregister
SoShaderParameter_swigregister(SoShaderParameter)
SoShaderParameter_getClassTypeId = Coin_SWIG_Python.SoShaderParameter_getClassTypeId
SoShaderParameter_initClass = Coin_SWIG_Python.SoShaderParameter_initClass

class SoUniformShaderParameter(SoShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoUniformShaderParameter_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoUniformShaderParameter_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoUniformShaderParameter_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoUniformShaderParameter_updateParameter(*args)
    def isRegularBehavior(*args): return Coin_SWIG_Python.SoUniformShaderParameter_isRegularBehavior(*args)
SoUniformShaderParameter_swigregister = Coin_SWIG_Python.SoUniformShaderParameter_swigregister
SoUniformShaderParameter_swigregister(SoUniformShaderParameter)
SoUniformShaderParameter_getClassTypeId = Coin_SWIG_Python.SoUniformShaderParameter_getClassTypeId
SoUniformShaderParameter_initClass = Coin_SWIG_Python.SoUniformShaderParameter_initClass

class SoShaderParameter1f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter1f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter1f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter1f_value_get, Coin_SWIG_Python.SoShaderParameter1f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter1f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter1f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter1f_updateParameter(*args)
SoShaderParameter1f_swigregister = Coin_SWIG_Python.SoShaderParameter1f_swigregister
SoShaderParameter1f_swigregister(SoShaderParameter1f)
SoShaderParameter1f_getClassTypeId = Coin_SWIG_Python.SoShaderParameter1f_getClassTypeId
SoShaderParameter1f_initClass = Coin_SWIG_Python.SoShaderParameter1f_initClass

class SoShaderParameter1i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter1i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter1i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter1i_value_get, Coin_SWIG_Python.SoShaderParameter1i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter1i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter1i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter1i_updateParameter(*args)
SoShaderParameter1i_swigregister = Coin_SWIG_Python.SoShaderParameter1i_swigregister
SoShaderParameter1i_swigregister(SoShaderParameter1i)
SoShaderParameter1i_getClassTypeId = Coin_SWIG_Python.SoShaderParameter1i_getClassTypeId
SoShaderParameter1i_initClass = Coin_SWIG_Python.SoShaderParameter1i_initClass

class SoShaderParameter2f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter2f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter2f_value_get, Coin_SWIG_Python.SoShaderParameter2f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter2f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter2f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter2f_updateParameter(*args)
SoShaderParameter2f_swigregister = Coin_SWIG_Python.SoShaderParameter2f_swigregister
SoShaderParameter2f_swigregister(SoShaderParameter2f)
SoShaderParameter2f_getClassTypeId = Coin_SWIG_Python.SoShaderParameter2f_getClassTypeId
SoShaderParameter2f_initClass = Coin_SWIG_Python.SoShaderParameter2f_initClass

class SoShaderParameter2i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter2i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter2i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter2i_value_get, Coin_SWIG_Python.SoShaderParameter2i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter2i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter2i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter2i_updateParameter(*args)
SoShaderParameter2i_swigregister = Coin_SWIG_Python.SoShaderParameter2i_swigregister
SoShaderParameter2i_swigregister(SoShaderParameter2i)
SoShaderParameter2i_getClassTypeId = Coin_SWIG_Python.SoShaderParameter2i_getClassTypeId
SoShaderParameter2i_initClass = Coin_SWIG_Python.SoShaderParameter2i_initClass

class SoShaderParameter3f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter3f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter3f_value_get, Coin_SWIG_Python.SoShaderParameter3f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter3f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter3f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter3f_updateParameter(*args)
SoShaderParameter3f_swigregister = Coin_SWIG_Python.SoShaderParameter3f_swigregister
SoShaderParameter3f_swigregister(SoShaderParameter3f)
SoShaderParameter3f_getClassTypeId = Coin_SWIG_Python.SoShaderParameter3f_getClassTypeId
SoShaderParameter3f_initClass = Coin_SWIG_Python.SoShaderParameter3f_initClass

class SoShaderParameter3i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter3i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter3i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter3i_value_get, Coin_SWIG_Python.SoShaderParameter3i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter3i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter3i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter3i_updateParameter(*args)
SoShaderParameter3i_swigregister = Coin_SWIG_Python.SoShaderParameter3i_swigregister
SoShaderParameter3i_swigregister(SoShaderParameter3i)
SoShaderParameter3i_getClassTypeId = Coin_SWIG_Python.SoShaderParameter3i_getClassTypeId
SoShaderParameter3i_initClass = Coin_SWIG_Python.SoShaderParameter3i_initClass

class SoShaderParameter4f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter4f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter4f_value_get, Coin_SWIG_Python.SoShaderParameter4f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter4f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter4f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter4f_updateParameter(*args)
SoShaderParameter4f_swigregister = Coin_SWIG_Python.SoShaderParameter4f_swigregister
SoShaderParameter4f_swigregister(SoShaderParameter4f)
SoShaderParameter4f_getClassTypeId = Coin_SWIG_Python.SoShaderParameter4f_getClassTypeId
SoShaderParameter4f_initClass = Coin_SWIG_Python.SoShaderParameter4f_initClass

class SoShaderParameter4i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameter4i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameter4i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameter4i_value_get, Coin_SWIG_Python.SoShaderParameter4i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameter4i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameter4i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameter4i_updateParameter(*args)
SoShaderParameter4i_swigregister = Coin_SWIG_Python.SoShaderParameter4i_swigregister
SoShaderParameter4i_swigregister(SoShaderParameter4i)
SoShaderParameter4i_getClassTypeId = Coin_SWIG_Python.SoShaderParameter4i_getClassTypeId
SoShaderParameter4i_initClass = Coin_SWIG_Python.SoShaderParameter4i_initClass

class SoShaderParameterArray1f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray1f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray1f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray1f_value_get, Coin_SWIG_Python.SoShaderParameterArray1f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray1f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray1f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray1f_updateParameter(*args)
SoShaderParameterArray1f_swigregister = Coin_SWIG_Python.SoShaderParameterArray1f_swigregister
SoShaderParameterArray1f_swigregister(SoShaderParameterArray1f)
SoShaderParameterArray1f_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray1f_getClassTypeId
SoShaderParameterArray1f_initClass = Coin_SWIG_Python.SoShaderParameterArray1f_initClass

class SoShaderParameterArray1i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray1i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray1i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray1i_value_get, Coin_SWIG_Python.SoShaderParameterArray1i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray1i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray1i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray1i_updateParameter(*args)
SoShaderParameterArray1i_swigregister = Coin_SWIG_Python.SoShaderParameterArray1i_swigregister
SoShaderParameterArray1i_swigregister(SoShaderParameterArray1i)
SoShaderParameterArray1i_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray1i_getClassTypeId
SoShaderParameterArray1i_initClass = Coin_SWIG_Python.SoShaderParameterArray1i_initClass

class SoShaderParameterArray2f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray2f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray2f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray2f_value_get, Coin_SWIG_Python.SoShaderParameterArray2f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray2f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray2f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray2f_updateParameter(*args)
SoShaderParameterArray2f_swigregister = Coin_SWIG_Python.SoShaderParameterArray2f_swigregister
SoShaderParameterArray2f_swigregister(SoShaderParameterArray2f)
SoShaderParameterArray2f_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray2f_getClassTypeId
SoShaderParameterArray2f_initClass = Coin_SWIG_Python.SoShaderParameterArray2f_initClass

class SoShaderParameterArray2i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray2i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray2i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray2i_value_get, Coin_SWIG_Python.SoShaderParameterArray2i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray2i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray2i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray2i_updateParameter(*args)
SoShaderParameterArray2i_swigregister = Coin_SWIG_Python.SoShaderParameterArray2i_swigregister
SoShaderParameterArray2i_swigregister(SoShaderParameterArray2i)
SoShaderParameterArray2i_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray2i_getClassTypeId
SoShaderParameterArray2i_initClass = Coin_SWIG_Python.SoShaderParameterArray2i_initClass

class SoShaderParameterArray3f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray3f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray3f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray3f_value_get, Coin_SWIG_Python.SoShaderParameterArray3f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray3f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray3f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray3f_updateParameter(*args)
SoShaderParameterArray3f_swigregister = Coin_SWIG_Python.SoShaderParameterArray3f_swigregister
SoShaderParameterArray3f_swigregister(SoShaderParameterArray3f)
SoShaderParameterArray3f_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray3f_getClassTypeId
SoShaderParameterArray3f_initClass = Coin_SWIG_Python.SoShaderParameterArray3f_initClass

class SoShaderParameterArray3i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray3i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray3i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray3i_value_get, Coin_SWIG_Python.SoShaderParameterArray3i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray3i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray3i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray3i_updateParameter(*args)
SoShaderParameterArray3i_swigregister = Coin_SWIG_Python.SoShaderParameterArray3i_swigregister
SoShaderParameterArray3i_swigregister(SoShaderParameterArray3i)
SoShaderParameterArray3i_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray3i_getClassTypeId
SoShaderParameterArray3i_initClass = Coin_SWIG_Python.SoShaderParameterArray3i_initClass

class SoShaderParameterArray4f(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray4f_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray4f_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray4f_value_get, Coin_SWIG_Python.SoShaderParameterArray4f_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray4f(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray4f_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray4f_updateParameter(*args)
SoShaderParameterArray4f_swigregister = Coin_SWIG_Python.SoShaderParameterArray4f_swigregister
SoShaderParameterArray4f_swigregister(SoShaderParameterArray4f)
SoShaderParameterArray4f_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray4f_getClassTypeId
SoShaderParameterArray4f_initClass = Coin_SWIG_Python.SoShaderParameterArray4f_initClass

class SoShaderParameterArray4i(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterArray4i_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterArray4i_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterArray4i_value_get, Coin_SWIG_Python.SoShaderParameterArray4i_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterArray4i(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterArray4i_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterArray4i_updateParameter(*args)
SoShaderParameterArray4i_swigregister = Coin_SWIG_Python.SoShaderParameterArray4i_swigregister
SoShaderParameterArray4i_swigregister(SoShaderParameterArray4i)
SoShaderParameterArray4i_getClassTypeId = Coin_SWIG_Python.SoShaderParameterArray4i_getClassTypeId
SoShaderParameterArray4i_initClass = Coin_SWIG_Python.SoShaderParameterArray4i_initClass

class SoShaderParameterMatrix(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterMatrix_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterMatrix_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterMatrix_value_get, Coin_SWIG_Python.SoShaderParameterMatrix_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterMatrix_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterMatrix_updateParameter(*args)
SoShaderParameterMatrix_swigregister = Coin_SWIG_Python.SoShaderParameterMatrix_swigregister
SoShaderParameterMatrix_swigregister(SoShaderParameterMatrix)
SoShaderParameterMatrix_getClassTypeId = Coin_SWIG_Python.SoShaderParameterMatrix_getClassTypeId
SoShaderParameterMatrix_initClass = Coin_SWIG_Python.SoShaderParameterMatrix_initClass

class SoShaderParameterMatrixArray(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderParameterMatrixArray_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderParameterMatrixArray_getTypeId(*args)
    value = _swig_property(Coin_SWIG_Python.SoShaderParameterMatrixArray_value_get, Coin_SWIG_Python.SoShaderParameterMatrixArray_value_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderParameterMatrixArray(*args)
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(Coin_SWIG_Python.SoShaderParameterMatrixArray_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderParameterMatrixArray_updateParameter(*args)
SoShaderParameterMatrixArray_swigregister = Coin_SWIG_Python.SoShaderParameterMatrixArray_swigregister
SoShaderParameterMatrixArray_swigregister(SoShaderParameterMatrixArray)
SoShaderParameterMatrixArray_getClassTypeId = Coin_SWIG_Python.SoShaderParameterMatrixArray_getClassTypeId
SoShaderParameterMatrixArray_initClass = Coin_SWIG_Python.SoShaderParameterMatrixArray_initClass

class SoShaderStateMatrixParameter(SoUniformShaderParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoShaderStateMatrixParameter_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoShaderStateMatrixParameter_getTypeId(*args)
    MODELVIEW = Coin_SWIG_Python.SoShaderStateMatrixParameter_MODELVIEW
    PROJECTION = Coin_SWIG_Python.SoShaderStateMatrixParameter_PROJECTION
    TEXTURE = Coin_SWIG_Python.SoShaderStateMatrixParameter_TEXTURE
    MODELVIEW_PROJECTION = Coin_SWIG_Python.SoShaderStateMatrixParameter_MODELVIEW_PROJECTION
    IDENTITY = Coin_SWIG_Python.SoShaderStateMatrixParameter_IDENTITY
    TRANSPOSE = Coin_SWIG_Python.SoShaderStateMatrixParameter_TRANSPOSE
    INVERSE = Coin_SWIG_Python.SoShaderStateMatrixParameter_INVERSE
    INVERSE_TRANSPOSE = Coin_SWIG_Python.SoShaderStateMatrixParameter_INVERSE_TRANSPOSE
    matrixType = _swig_property(Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixType_get, Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixType_set)
    matrixTransform = _swig_property(Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixTransform_get, Coin_SWIG_Python.SoShaderStateMatrixParameter_matrixTransform_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoShaderStateMatrixParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoShaderStateMatrixParameter
    __del__ = lambda self : None;
    initClass = staticmethod(Coin_SWIG_Python.SoShaderStateMatrixParameter_initClass)
    def updateParameter(*args): return Coin_SWIG_Python.SoShaderStateMatrixParameter_updateParameter(*args)
SoShaderStateMatrixParameter_swigregister = Coin_SWIG_Python.SoShaderStateMatrixParameter_swigregister
SoShaderStateMatrixParameter_swigregister(SoShaderStateMatrixParameter)
SoShaderStateMatrixParameter_getClassTypeId = Coin_SWIG_Python.SoShaderStateMatrixParameter_getClassTypeId
SoShaderStateMatrixParameter_initClass = Coin_SWIG_Python.SoShaderStateMatrixParameter_initClass

class SoVertexShader(SoShaderObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVertexShader_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVertexShader_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVertexShader_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVertexShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVertexShader
    __del__ = lambda self : None;
    isSupported = staticmethod(Coin_SWIG_Python.SoVertexShader_isSupported)
SoVertexShader_swigregister = Coin_SWIG_Python.SoVertexShader_swigregister
SoVertexShader_swigregister(SoVertexShader)
SoVertexShader_getClassTypeId = Coin_SWIG_Python.SoVertexShader_getClassTypeId
SoVertexShader_initClass = Coin_SWIG_Python.SoVertexShader_initClass
SoVertexShader_isSupported = Coin_SWIG_Python.SoVertexShader_isSupported

class SoFragmentShader(SoShaderObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFragmentShader_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFragmentShader_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFragmentShader_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFragmentShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoFragmentShader
    __del__ = lambda self : None;
    isSupported = staticmethod(Coin_SWIG_Python.SoFragmentShader_isSupported)
SoFragmentShader_swigregister = Coin_SWIG_Python.SoFragmentShader_swigregister
SoFragmentShader_swigregister(SoFragmentShader)
SoFragmentShader_getClassTypeId = Coin_SWIG_Python.SoFragmentShader_getClassTypeId
SoFragmentShader_initClass = Coin_SWIG_Python.SoFragmentShader_initClass
SoFragmentShader_isSupported = Coin_SWIG_Python.SoFragmentShader_isSupported

class SoFrustumCamera(SoCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoFrustumCamera_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoFrustumCamera_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoFrustumCamera_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoFrustumCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    left = _swig_property(Coin_SWIG_Python.SoFrustumCamera_left_get, Coin_SWIG_Python.SoFrustumCamera_left_set)
    right = _swig_property(Coin_SWIG_Python.SoFrustumCamera_right_get, Coin_SWIG_Python.SoFrustumCamera_right_set)
    top = _swig_property(Coin_SWIG_Python.SoFrustumCamera_top_get, Coin_SWIG_Python.SoFrustumCamera_top_set)
    bottom = _swig_property(Coin_SWIG_Python.SoFrustumCamera_bottom_get, Coin_SWIG_Python.SoFrustumCamera_bottom_set)
    def scaleHeight(*args): return Coin_SWIG_Python.SoFrustumCamera_scaleHeight(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SoFrustumCamera_getViewVolume(*args)
SoFrustumCamera_swigregister = Coin_SWIG_Python.SoFrustumCamera_swigregister
SoFrustumCamera_swigregister(SoFrustumCamera)
SoFrustumCamera_getClassTypeId = Coin_SWIG_Python.SoFrustumCamera_getClassTypeId
SoFrustumCamera_initClass = Coin_SWIG_Python.SoFrustumCamera_initClass

class SoGeometryShader(SoShaderObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoGeometryShader_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoGeometryShader_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoGeometryShader_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoGeometryShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoGeometryShader
    __del__ = lambda self : None;
    POINTS_IN = Coin_SWIG_Python.SoGeometryShader_POINTS_IN
    LINES_IN = Coin_SWIG_Python.SoGeometryShader_LINES_IN
    TRIANGLES_IN = Coin_SWIG_Python.SoGeometryShader_TRIANGLES_IN
    POINTS_OUT = Coin_SWIG_Python.SoGeometryShader_POINTS_OUT
    LINE_STRIP_OUT = Coin_SWIG_Python.SoGeometryShader_LINE_STRIP_OUT
    TRIANGLE_STRIP_OUT = Coin_SWIG_Python.SoGeometryShader_TRIANGLE_STRIP_OUT
    inputType = _swig_property(Coin_SWIG_Python.SoGeometryShader_inputType_get, Coin_SWIG_Python.SoGeometryShader_inputType_set)
    outputType = _swig_property(Coin_SWIG_Python.SoGeometryShader_outputType_get, Coin_SWIG_Python.SoGeometryShader_outputType_set)
    maxEmit = _swig_property(Coin_SWIG_Python.SoGeometryShader_maxEmit_get, Coin_SWIG_Python.SoGeometryShader_maxEmit_set)
    def GLRender(*args): return Coin_SWIG_Python.SoGeometryShader_GLRender(*args)
    isSupported = staticmethod(Coin_SWIG_Python.SoGeometryShader_isSupported)
SoGeometryShader_swigregister = Coin_SWIG_Python.SoGeometryShader_swigregister
SoGeometryShader_swigregister(SoGeometryShader)
SoGeometryShader_getClassTypeId = Coin_SWIG_Python.SoGeometryShader_getClassTypeId
SoGeometryShader_initClass = Coin_SWIG_Python.SoGeometryShader_initClass
SoGeometryShader_isSupported = Coin_SWIG_Python.SoGeometryShader_isSupported

class SbLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbLine_setValue(*args)
    def getClosestPoints(*args): return Coin_SWIG_Python.SbLine_getClosestPoints(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbLine_getClosestPoint(*args)
    def getPosition(*args): return Coin_SWIG_Python.SbLine_getPosition(*args)
    def getDirection(*args): return Coin_SWIG_Python.SbLine_getDirection(*args)
    def output(*args): return Coin_SWIG_Python.SbLine_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbLine
    __del__ = lambda self : None;
SbLine_swigregister = Coin_SWIG_Python.SbLine_swigregister
SbLine_swigregister(SbLine)

class SbProjector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def project(*args): return Coin_SWIG_Python.SbProjector_project(*args)
    def setViewVolume(*args): return Coin_SWIG_Python.SbProjector_setViewVolume(*args)
    def getViewVolume(*args): return Coin_SWIG_Python.SbProjector_getViewVolume(*args)
    def setWorkingSpace(*args): return Coin_SWIG_Python.SbProjector_setWorkingSpace(*args)
    def getWorkingSpace(*args): return Coin_SWIG_Python.SbProjector_getWorkingSpace(*args)
    def copy(*args): return Coin_SWIG_Python.SbProjector_copy(*args)
SbProjector_swigregister = Coin_SWIG_Python.SbProjector_swigregister
SbProjector_swigregister(SbProjector)

class SbCylinder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbCylinder_setValue(*args)
    def setAxis(*args): return Coin_SWIG_Python.SbCylinder_setAxis(*args)
    def setRadius(*args): return Coin_SWIG_Python.SbCylinder_setRadius(*args)
    def getAxis(*args): return Coin_SWIG_Python.SbCylinder_getAxis(*args)
    def getRadius(*args): return Coin_SWIG_Python.SbCylinder_getRadius(*args)
    def intersect(*args): return Coin_SWIG_Python.SbCylinder_intersect(*args)
    def output(*args): return Coin_SWIG_Python.SbCylinder_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinder
    __del__ = lambda self : None;
SbCylinder_swigregister = Coin_SWIG_Python.SbCylinder_swigregister
SbCylinder_swigregister(SbCylinder)

class SbCylinderProjector(SbProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def project(*args): return Coin_SWIG_Python.SbCylinderProjector_project(*args)
    def projectAndGetRotation(*args): return Coin_SWIG_Python.SbCylinderProjector_projectAndGetRotation(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbCylinderProjector_getRotation(*args)
    def setCylinder(*args): return Coin_SWIG_Python.SbCylinderProjector_setCylinder(*args)
    def getCylinder(*args): return Coin_SWIG_Python.SbCylinderProjector_getCylinder(*args)
    def setOrientToEye(*args): return Coin_SWIG_Python.SbCylinderProjector_setOrientToEye(*args)
    def isOrientToEye(*args): return Coin_SWIG_Python.SbCylinderProjector_isOrientToEye(*args)
    def setFront(*args): return Coin_SWIG_Python.SbCylinderProjector_setFront(*args)
    def isFront(*args): return Coin_SWIG_Python.SbCylinderProjector_isFront(*args)
    def isPointInFront(*args): return Coin_SWIG_Python.SbCylinderProjector_isPointInFront(*args)
    def setWorkingSpace(*args): return Coin_SWIG_Python.SbCylinderProjector_setWorkingSpace(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderProjector
    __del__ = lambda self : None;
SbCylinderProjector_swigregister = Coin_SWIG_Python.SbCylinderProjector_swigregister
SbCylinderProjector_swigregister(SbCylinderProjector)

class SbCylinderSectionProjector(SbCylinderProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbCylinderSectionProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbCylinderSectionProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbCylinderSectionProjector_project(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbCylinderSectionProjector_getRotation(*args)
    def setTolerance(*args): return Coin_SWIG_Python.SbCylinderSectionProjector_setTolerance(*args)
    def getTolerance(*args): return Coin_SWIG_Python.SbCylinderSectionProjector_getTolerance(*args)
    def isWithinTolerance(*args): return Coin_SWIG_Python.SbCylinderSectionProjector_isWithinTolerance(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderSectionProjector
    __del__ = lambda self : None;
SbCylinderSectionProjector_swigregister = Coin_SWIG_Python.SbCylinderSectionProjector_swigregister
SbCylinderSectionProjector_swigregister(SbCylinderSectionProjector)

class SbCylinderPlaneProjector(SbCylinderSectionProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbCylinderPlaneProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbCylinderPlaneProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbCylinderPlaneProjector_project(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbCylinderPlaneProjector_getRotation(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderPlaneProjector
    __del__ = lambda self : None;
SbCylinderPlaneProjector_swigregister = Coin_SWIG_Python.SbCylinderPlaneProjector_swigregister
SbCylinderPlaneProjector_swigregister(SbCylinderPlaneProjector)

class SbCylinderSheetProjector(SbCylinderProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbCylinderSheetProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbCylinderSheetProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbCylinderSheetProjector_project(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbCylinderSheetProjector_getRotation(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCylinderSheetProjector
    __del__ = lambda self : None;
SbCylinderSheetProjector_swigregister = Coin_SWIG_Python.SbCylinderSheetProjector_swigregister
SbCylinderSheetProjector_swigregister(SbCylinderSheetProjector)

class SbLineProjector(SbProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbLineProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbLineProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbLineProjector_project(*args)
    def setLine(*args): return Coin_SWIG_Python.SbLineProjector_setLine(*args)
    def getLine(*args): return Coin_SWIG_Python.SbLineProjector_getLine(*args)
    def getVector(*args): return Coin_SWIG_Python.SbLineProjector_getVector(*args)
    def setStartPosition(*args): return Coin_SWIG_Python.SbLineProjector_setStartPosition(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbLineProjector
    __del__ = lambda self : None;
SbLineProjector_swigregister = Coin_SWIG_Python.SbLineProjector_swigregister
SbLineProjector_swigregister(SbLineProjector)

class SbPlaneProjector(SbProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbPlaneProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbPlaneProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbPlaneProjector_project(*args)
    def setPlane(*args): return Coin_SWIG_Python.SbPlaneProjector_setPlane(*args)
    def getPlane(*args): return Coin_SWIG_Python.SbPlaneProjector_getPlane(*args)
    def setOrientToEye(*args): return Coin_SWIG_Python.SbPlaneProjector_setOrientToEye(*args)
    def isOrientToEye(*args): return Coin_SWIG_Python.SbPlaneProjector_isOrientToEye(*args)
    def getVector(*args): return Coin_SWIG_Python.SbPlaneProjector_getVector(*args)
    def setStartPosition(*args): return Coin_SWIG_Python.SbPlaneProjector_setStartPosition(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbPlaneProjector
    __del__ = lambda self : None;
SbPlaneProjector_swigregister = Coin_SWIG_Python.SbPlaneProjector_swigregister
SbPlaneProjector_swigregister(SbPlaneProjector)

class SbSphere(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbSphere_setValue(*args)
    def setCenter(*args): return Coin_SWIG_Python.SbSphere_setCenter(*args)
    def setRadius(*args): return Coin_SWIG_Python.SbSphere_setRadius(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbSphere_getCenter(*args)
    def getRadius(*args): return Coin_SWIG_Python.SbSphere_getRadius(*args)
    def circumscribe(*args): return Coin_SWIG_Python.SbSphere_circumscribe(*args)
    def intersect(*args): return Coin_SWIG_Python.SbSphere_intersect(*args)
    def pointInside(*args): return Coin_SWIG_Python.SbSphere_pointInside(*args)
    def output(*args): return Coin_SWIG_Python.SbSphere_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphere
    __del__ = lambda self : None;
SbSphere_swigregister = Coin_SWIG_Python.SbSphere_swigregister
SbSphere_swigregister(SbSphere)

class SbSphereProjector(SbProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def projectAndGetRotation(*args): return Coin_SWIG_Python.SbSphereProjector_projectAndGetRotation(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbSphereProjector_getRotation(*args)
    def setSphere(*args): return Coin_SWIG_Python.SbSphereProjector_setSphere(*args)
    def getSphere(*args): return Coin_SWIG_Python.SbSphereProjector_getSphere(*args)
    def setOrientToEye(*args): return Coin_SWIG_Python.SbSphereProjector_setOrientToEye(*args)
    def isOrientToEye(*args): return Coin_SWIG_Python.SbSphereProjector_isOrientToEye(*args)
    def setFront(*args): return Coin_SWIG_Python.SbSphereProjector_setFront(*args)
    def isFront(*args): return Coin_SWIG_Python.SbSphereProjector_isFront(*args)
    def isPointInFront(*args): return Coin_SWIG_Python.SbSphereProjector_isPointInFront(*args)
    def setWorkingSpace(*args): return Coin_SWIG_Python.SbSphereProjector_setWorkingSpace(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphereProjector
    __del__ = lambda self : None;
SbSphereProjector_swigregister = Coin_SWIG_Python.SbSphereProjector_swigregister
SbSphereProjector_swigregister(SbSphereProjector)

class SbSphereSheetProjector(SbSphereProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbSphereSheetProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbSphereSheetProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbSphereSheetProjector_project(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbSphereSheetProjector_getRotation(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphereSheetProjector
    __del__ = lambda self : None;
SbSphereSheetProjector_swigregister = Coin_SWIG_Python.SbSphereSheetProjector_swigregister
SbSphereSheetProjector_swigregister(SbSphereSheetProjector)

class SbSphereSectionProjector(SbSphereProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbSphereSectionProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbSphereSectionProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbSphereSectionProjector_project(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbSphereSectionProjector_getRotation(*args)
    def setTolerance(*args): return Coin_SWIG_Python.SbSphereSectionProjector_setTolerance(*args)
    def getTolerance(*args): return Coin_SWIG_Python.SbSphereSectionProjector_getTolerance(*args)
    def setRadialFactor(*args): return Coin_SWIG_Python.SbSphereSectionProjector_setRadialFactor(*args)
    def getRadialFactor(*args): return Coin_SWIG_Python.SbSphereSectionProjector_getRadialFactor(*args)
    def isWithinTolerance(*args): return Coin_SWIG_Python.SbSphereSectionProjector_isWithinTolerance(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSphereSectionProjector
    __del__ = lambda self : None;
SbSphereSectionProjector_swigregister = Coin_SWIG_Python.SbSphereSectionProjector_swigregister
SbSphereSectionProjector_swigregister(SbSphereSectionProjector)

class SbSpherePlaneProjector(SbSphereSectionProjector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbSpherePlaneProjector(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(*args): return Coin_SWIG_Python.SbSpherePlaneProjector_copy(*args)
    def project(*args): return Coin_SWIG_Python.SbSpherePlaneProjector_project(*args)
    def getRotation(*args): return Coin_SWIG_Python.SbSpherePlaneProjector_getRotation(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbSpherePlaneProjector
    __del__ = lambda self : None;
SbSpherePlaneProjector_swigregister = Coin_SWIG_Python.SbSpherePlaneProjector_swigregister
SbSpherePlaneProjector_swigregister(SbSpherePlaneProjector)

class SbDPMatrix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbDPMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPMatrix
    __del__ = lambda self : None;
    def makeIdentity(*args): return Coin_SWIG_Python.SbDPMatrix_makeIdentity(*args)
    def setRotate(*args): return Coin_SWIG_Python.SbDPMatrix_setRotate(*args)
    def inverse(*args): return Coin_SWIG_Python.SbDPMatrix_inverse(*args)
    def det3(*args): return Coin_SWIG_Python.SbDPMatrix_det3(*args)
    def det4(*args): return Coin_SWIG_Python.SbDPMatrix_det4(*args)
    def equals(*args): return Coin_SWIG_Python.SbDPMatrix_equals(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbDPMatrix___imul__(*args)
    def getValue(*args): return Coin_SWIG_Python.SbDPMatrix_getValue(*args)
    identity = staticmethod(Coin_SWIG_Python.SbDPMatrix_identity)
    def setScale(*args): return Coin_SWIG_Python.SbDPMatrix_setScale(*args)
    def setTranslate(*args): return Coin_SWIG_Python.SbDPMatrix_setTranslate(*args)
    def setTransform(*args): return Coin_SWIG_Python.SbDPMatrix_setTransform(*args)
    def getTransform(*args): return Coin_SWIG_Python.SbDPMatrix_getTransform(*args)
    def factor(*args): return Coin_SWIG_Python.SbDPMatrix_factor(*args)
    def LUDecomposition(*args): return Coin_SWIG_Python.SbDPMatrix_LUDecomposition(*args)
    def LUBackSubstitution(*args): return Coin_SWIG_Python.SbDPMatrix_LUBackSubstitution(*args)
    def transpose(*args): return Coin_SWIG_Python.SbDPMatrix_transpose(*args)
    def multRight(*args): return Coin_SWIG_Python.SbDPMatrix_multRight(*args)
    def multLeft(*args): return Coin_SWIG_Python.SbDPMatrix_multLeft(*args)
    def multMatrixVec(*args): return Coin_SWIG_Python.SbDPMatrix_multMatrixVec(*args)
    def multDirMatrix(*args): return Coin_SWIG_Python.SbDPMatrix_multDirMatrix(*args)
    def multLineMatrix(*args): return Coin_SWIG_Python.SbDPMatrix_multLineMatrix(*args)
    def multVecMatrix(*args): return Coin_SWIG_Python.SbDPMatrix_multVecMatrix(*args)
    def output(*args): return Coin_SWIG_Python.SbDPMatrix_output(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbDPMatrix___mul__(*args)
    def __rmul__(*args): return Coin_SWIG_Python.SbDPMatrix___rmul__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbDPMatrix___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbDPMatrix___ne__(*args)
SbDPMatrix_swigregister = Coin_SWIG_Python.SbDPMatrix_swigregister
SbDPMatrix_swigregister(SbDPMatrix)
SbDPMatrix_identity = Coin_SWIG_Python.SbDPMatrix_identity

class SbXfBox3d(SbBox3d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbXfBox3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTransform(*args): return Coin_SWIG_Python.SbXfBox3d_setTransform(*args)
    def getTransform(*args): return Coin_SWIG_Python.SbXfBox3d_getTransform(*args)
    def getInverse(*args): return Coin_SWIG_Python.SbXfBox3d_getInverse(*args)
    def getCenter(*args): return Coin_SWIG_Python.SbXfBox3d_getCenter(*args)
    def extendBy(*args): return Coin_SWIG_Python.SbXfBox3d_extendBy(*args)
    def intersect(*args): return Coin_SWIG_Python.SbXfBox3d_intersect(*args)
    def project(*args): return Coin_SWIG_Python.SbXfBox3d_project(*args)
    def getSpan(*args): return Coin_SWIG_Python.SbXfBox3d_getSpan(*args)
    def transform(*args): return Coin_SWIG_Python.SbXfBox3d_transform(*args)
    def getVolume(*args): return Coin_SWIG_Python.SbXfBox3d_getVolume(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbXfBox3d
    __del__ = lambda self : None;
SbXfBox3d_swigregister = Coin_SWIG_Python.SbXfBox3d_swigregister
SbXfBox3d_swigregister(SbXfBox3d)

class SbClip(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbClip(*args)
        try: self.this.append(this)
        except: self.this = this
    def addVertex(*args): return Coin_SWIG_Python.SbClip_addVertex(*args)
    def reset(*args): return Coin_SWIG_Python.SbClip_reset(*args)
    def clip(*args): return Coin_SWIG_Python.SbClip_clip(*args)
    def getNumVertices(*args): return Coin_SWIG_Python.SbClip_getNumVertices(*args)
    def getVertex(*args): return Coin_SWIG_Python.SbClip_getVertex(*args)
    def getVertexData(*args): return Coin_SWIG_Python.SbClip_getVertexData(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbClip
    __del__ = lambda self : None;
SbClip_swigregister = Coin_SWIG_Python.SbClip_swigregister
SbClip_swigregister(SbClip)

class SbDPRotation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbDPRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def getValue(*args): return Coin_SWIG_Python.SbDPRotation_getValue(*args)
    def getAxisAngle(*args): return Coin_SWIG_Python.SbDPRotation_getAxisAngle(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SbDPRotation_getMatrix(*args)
    def invert(*args): return Coin_SWIG_Python.SbDPRotation_invert(*args)
    def inverse(*args): return Coin_SWIG_Python.SbDPRotation_inverse(*args)
    def setValue(*args): return Coin_SWIG_Python.SbDPRotation_setValue(*args)
    def __imul__(*args): return Coin_SWIG_Python.SbDPRotation___imul__(*args)
    def equals(*args): return Coin_SWIG_Python.SbDPRotation_equals(*args)
    def multVec(*args): return Coin_SWIG_Python.SbDPRotation_multVec(*args)
    def scaleAngle(*args): return Coin_SWIG_Python.SbDPRotation_scaleAngle(*args)
    slerp = staticmethod(Coin_SWIG_Python.SbDPRotation_slerp)
    identity = staticmethod(Coin_SWIG_Python.SbDPRotation_identity)
    def output(*args): return Coin_SWIG_Python.SbDPRotation_output(*args)
    def __mul__(*args): return Coin_SWIG_Python.SbDPRotation___mul__(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbDPRotation___eq__(*args)
    def __nq__(*args): return Coin_SWIG_Python.SbDPRotation___nq__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPRotation
    __del__ = lambda self : None;
SbDPRotation_swigregister = Coin_SWIG_Python.SbDPRotation_swigregister
SbDPRotation_swigregister(SbDPRotation)
SbDPRotation_slerp = Coin_SWIG_Python.SbDPRotation_slerp
SbDPRotation_identity = Coin_SWIG_Python.SbDPRotation_identity

class SbDPLine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbDPLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(*args): return Coin_SWIG_Python.SbDPLine_setValue(*args)
    def getClosestPoints(*args): return Coin_SWIG_Python.SbDPLine_getClosestPoints(*args)
    def getClosestPoint(*args): return Coin_SWIG_Python.SbDPLine_getClosestPoint(*args)
    def getPosition(*args): return Coin_SWIG_Python.SbDPLine_getPosition(*args)
    def getDirection(*args): return Coin_SWIG_Python.SbDPLine_getDirection(*args)
    def output(*args): return Coin_SWIG_Python.SbDPLine_output(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPLine
    __del__ = lambda self : None;
SbDPLine_swigregister = Coin_SWIG_Python.SbDPLine_swigregister
SbDPLine_swigregister(SbDPLine)

class SbDPPlane(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbDPPlane(*args)
        try: self.this.append(this)
        except: self.this = this
    def offset(*args): return Coin_SWIG_Python.SbDPPlane_offset(*args)
    def transform(*args): return Coin_SWIG_Python.SbDPPlane_transform(*args)
    def isInHalfSpace(*args): return Coin_SWIG_Python.SbDPPlane_isInHalfSpace(*args)
    def getDistance(*args): return Coin_SWIG_Python.SbDPPlane_getDistance(*args)
    def getNormal(*args): return Coin_SWIG_Python.SbDPPlane_getNormal(*args)
    def getDistanceFromOrigin(*args): return Coin_SWIG_Python.SbDPPlane_getDistanceFromOrigin(*args)
    def output(*args): return Coin_SWIG_Python.SbDPPlane_output(*args)
    def intersect(*args): return Coin_SWIG_Python.SbDPPlane_intersect(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbDPPlane___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbDPPlane___ne__(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SbDPPlane
    __del__ = lambda self : None;
SbDPPlane_swigregister = Coin_SWIG_Python.SbDPPlane_swigregister
SbDPPlane_swigregister(SbDPPlane)

class SbHeapFuncs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eval_func = _swig_property(Coin_SWIG_Python.SbHeapFuncs_eval_func_get, Coin_SWIG_Python.SbHeapFuncs_eval_func_set)
    get_index_func = _swig_property(Coin_SWIG_Python.SbHeapFuncs_get_index_func_get, Coin_SWIG_Python.SbHeapFuncs_get_index_func_set)
    set_index_func = _swig_property(Coin_SWIG_Python.SbHeapFuncs_set_index_func_get, Coin_SWIG_Python.SbHeapFuncs_set_index_func_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbHeapFuncs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbHeapFuncs
    __del__ = lambda self : None;
SbHeapFuncs_swigregister = Coin_SWIG_Python.SbHeapFuncs_swigregister
SbHeapFuncs_swigregister(SbHeapFuncs)

class SbHeap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbHeap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbHeap
    __del__ = lambda self : None;
    def emptyHeap(*args): return Coin_SWIG_Python.SbHeap_emptyHeap(*args)
    def size(*args): return Coin_SWIG_Python.SbHeap_size(*args)
    def add(*args): return Coin_SWIG_Python.SbHeap_add(*args)
    def remove(*args): return Coin_SWIG_Python.SbHeap_remove(*args)
    def extractMin(*args): return Coin_SWIG_Python.SbHeap_extractMin(*args)
    def getMin(*args): return Coin_SWIG_Python.SbHeap_getMin(*args)
    def newWeight(*args): return Coin_SWIG_Python.SbHeap_newWeight(*args)
    def buildHeap(*args): return Coin_SWIG_Python.SbHeap_buildHeap(*args)
    def traverseHeap(*args): return Coin_SWIG_Python.SbHeap_traverseHeap(*args)
SbHeap_swigregister = Coin_SWIG_Python.SbHeap_swigregister
SbHeap_swigregister(SbHeap)

class SbImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbImage
    __del__ = lambda self : None;
    def setValue(*args): return Coin_SWIG_Python.SbImage_setValue(*args)
    def setValuePtr(*args): return Coin_SWIG_Python.SbImage_setValuePtr(*args)
    def getSize(*args): return Coin_SWIG_Python.SbImage_getSize(*args)
    def readFile(*args): return Coin_SWIG_Python.SbImage_readFile(*args)
    def __eq__(*args): return Coin_SWIG_Python.SbImage___eq__(*args)
    def __ne__(*args): return Coin_SWIG_Python.SbImage___ne__(*args)
    searchForFile = staticmethod(Coin_SWIG_Python.SbImage_searchForFile)
    def hasData(*args): return Coin_SWIG_Python.SbImage_hasData(*args)
    def readLock(*args): return Coin_SWIG_Python.SbImage_readLock(*args)
    def readUnlock(*args): return Coin_SWIG_Python.SbImage_readUnlock(*args)
    def scheduleReadFile(*args): return Coin_SWIG_Python.SbImage_scheduleReadFile(*args)
    def getValue(*args): return Coin_SWIG_Python.SbImage_getValue(*args)
SbImage_swigregister = Coin_SWIG_Python.SbImage_swigregister
SbImage_swigregister(SbImage)
SbImage_searchForFile = Coin_SWIG_Python.SbImage_searchForFile

class SbOctTreeFuncs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bboxfunc = _swig_property(Coin_SWIG_Python.SbOctTreeFuncs_bboxfunc_get, Coin_SWIG_Python.SbOctTreeFuncs_bboxfunc_set)
    ptinsidefunc = _swig_property(Coin_SWIG_Python.SbOctTreeFuncs_ptinsidefunc_get, Coin_SWIG_Python.SbOctTreeFuncs_ptinsidefunc_set)
    insideboxfunc = _swig_property(Coin_SWIG_Python.SbOctTreeFuncs_insideboxfunc_get, Coin_SWIG_Python.SbOctTreeFuncs_insideboxfunc_set)
    insidespherefunc = _swig_property(Coin_SWIG_Python.SbOctTreeFuncs_insidespherefunc_get, Coin_SWIG_Python.SbOctTreeFuncs_insidespherefunc_set)
    insideplanesfunc = _swig_property(Coin_SWIG_Python.SbOctTreeFuncs_insideplanesfunc_get, Coin_SWIG_Python.SbOctTreeFuncs_insideplanesfunc_set)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbOctTreeFuncs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbOctTreeFuncs
    __del__ = lambda self : None;
SbOctTreeFuncs_swigregister = Coin_SWIG_Python.SbOctTreeFuncs_swigregister
SbOctTreeFuncs_swigregister(SbOctTreeFuncs)

class SbOctTree(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbOctTree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbOctTree
    __del__ = lambda self : None;
    def addItem(*args): return Coin_SWIG_Python.SbOctTree_addItem(*args)
    def removeItem(*args): return Coin_SWIG_Python.SbOctTree_removeItem(*args)
    def findItems(*args): return Coin_SWIG_Python.SbOctTree_findItems(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SbOctTree_getBoundingBox(*args)
    def clear(*args): return Coin_SWIG_Python.SbOctTree_clear(*args)
    def debugTree(*args): return Coin_SWIG_Python.SbOctTree_debugTree(*args)
SbOctTree_swigregister = Coin_SWIG_Python.SbOctTree_swigregister
SbOctTree_swigregister(SbOctTree)

class SbTesselator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbTesselator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbTesselator
    __del__ = lambda self : None;
    def beginPolygon(*args): return Coin_SWIG_Python.SbTesselator_beginPolygon(*args)
    def addVertex(*args): return Coin_SWIG_Python.SbTesselator_addVertex(*args)
    def endPolygon(*args): return Coin_SWIG_Python.SbTesselator_endPolygon(*args)
    def setCallback(*args): return Coin_SWIG_Python.SbTesselator_setCallback(*args)
SbTesselator_swigregister = Coin_SWIG_Python.SbTesselator_swigregister
SbTesselator_swigregister(SbTesselator)

class SoTimerQueueSensor(SoSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoTimerQueueSensor_scb_v,args)
       else:
          self.this = apply(_coin.new_SoTimerQueueSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoTimerQueueSensor
    __del__ = lambda self : None;
    def getTriggerTime(*args): return Coin_SWIG_Python.SoTimerQueueSensor_getTriggerTime(*args)
    def schedule(*args): return Coin_SWIG_Python.SoTimerQueueSensor_schedule(*args)
    def unschedule(*args): return Coin_SWIG_Python.SoTimerQueueSensor_unschedule(*args)
    def isScheduled(*args): return Coin_SWIG_Python.SoTimerQueueSensor_isScheduled(*args)
    def trigger(*args): return Coin_SWIG_Python.SoTimerQueueSensor_trigger(*args)
SoTimerQueueSensor_swigregister = Coin_SWIG_Python.SoTimerQueueSensor_swigregister
SoTimerQueueSensor_swigregister(SoTimerQueueSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoTimerQueueSensor_scb_v,args)
   else:
      self.this = apply(_coin.new_SoTimerQueueSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoAlarmSensor(SoTimerQueueSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoAlarmSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoAlarmSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoAlarmSensor
    __del__ = lambda self : None;
    def setTime(*args): return Coin_SWIG_Python.SoAlarmSensor_setTime(*args)
    def setTimeFromNow(*args): return Coin_SWIG_Python.SoAlarmSensor_setTimeFromNow(*args)
    def getTime(*args): return Coin_SWIG_Python.SoAlarmSensor_getTime(*args)
    def schedule(*args): return Coin_SWIG_Python.SoAlarmSensor_schedule(*args)
SoAlarmSensor_swigregister = Coin_SWIG_Python.SoAlarmSensor_swigregister
SoAlarmSensor_swigregister(SoAlarmSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoAlarmSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoAlarmSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoIdleSensor(SoDelayQueueSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoIdleSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoIdleSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoIdleSensor
    __del__ = lambda self : None;
SoIdleSensor_swigregister = Coin_SWIG_Python.SoIdleSensor_swigregister
SoIdleSensor_swigregister(SoIdleSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoIdleSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoIdleSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoNodeSensor(SoDataSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoNodeSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoNodeSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoNodeSensor
    __del__ = lambda self : None;
    def attach(*args): return Coin_SWIG_Python.SoNodeSensor_attach(*args)
    def detach(*args): return Coin_SWIG_Python.SoNodeSensor_detach(*args)
    def getAttachedNode(*args): return Coin_SWIG_Python.SoNodeSensor_getAttachedNode(*args)
SoNodeSensor_swigregister = Coin_SWIG_Python.SoNodeSensor_swigregister
SoNodeSensor_swigregister(SoNodeSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoNodeSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoNodeSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoOneShotSensor(SoDelayQueueSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoOneShotSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoOneShotSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoOneShotSensor
    __del__ = lambda self : None;
SoOneShotSensor_swigregister = Coin_SWIG_Python.SoOneShotSensor_swigregister
SoOneShotSensor_swigregister(SoOneShotSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoOneShotSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoOneShotSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoPathSensor(SoDataSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoPathSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoPathSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoPathSensor
    __del__ = lambda self : None;
    PATH = Coin_SWIG_Python.SoPathSensor_PATH
    NODES = Coin_SWIG_Python.SoPathSensor_NODES
    PATH_AND_NODES = Coin_SWIG_Python.SoPathSensor_PATH_AND_NODES
    def setTriggerFilter(*args): return Coin_SWIG_Python.SoPathSensor_setTriggerFilter(*args)
    def getTriggerFilter(*args): return Coin_SWIG_Python.SoPathSensor_getTriggerFilter(*args)
    def attach(*args): return Coin_SWIG_Python.SoPathSensor_attach(*args)
    def detach(*args): return Coin_SWIG_Python.SoPathSensor_detach(*args)
    def getAttachedPath(*args): return Coin_SWIG_Python.SoPathSensor_getAttachedPath(*args)
SoPathSensor_swigregister = Coin_SWIG_Python.SoPathSensor_swigregister
SoPathSensor_swigregister(SoPathSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoPathSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoPathSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoTimerSensor(SoTimerQueueSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self,*args):
       newobj = None
       if len(args) == 2:
          args = (args[0], (args[0], args[1]))
          newobj = apply(_coin.new_SoTimerSensor_scb_v,args)
       else:
          newobj = apply(_coin.new_SoTimerSensor,args)
       if newobj:
          self.this = newobj.this
          self.thisown = 1
          del newobj.thisown


    __swig_destroy__ = Coin_SWIG_Python.delete_SoTimerSensor
    __del__ = lambda self : None;
    def setBaseTime(*args): return Coin_SWIG_Python.SoTimerSensor_setBaseTime(*args)
    def getBaseTime(*args): return Coin_SWIG_Python.SoTimerSensor_getBaseTime(*args)
    def setInterval(*args): return Coin_SWIG_Python.SoTimerSensor_setInterval(*args)
    def getInterval(*args): return Coin_SWIG_Python.SoTimerSensor_getInterval(*args)
    def schedule(*args): return Coin_SWIG_Python.SoTimerSensor_schedule(*args)
    def unschedule(*args): return Coin_SWIG_Python.SoTimerSensor_unschedule(*args)
    def reschedule(*args): return Coin_SWIG_Python.SoTimerSensor_reschedule(*args)
SoTimerSensor_swigregister = Coin_SWIG_Python.SoTimerSensor_swigregister
SoTimerSensor_swigregister(SoTimerSensor)
def __init__(self,*args):
   newobj = None
   if len(args) == 2:
      args = (args[0], (args[0], args[1]))
      newobj = apply(_coin.new_SoTimerSensor_scb_v,args)
   else:
      newobj = apply(_coin.new_SoTimerSensor,args)
   if newobj:
      self.this = newobj.this
      self.thisown = 1
      del newobj.thisown



class SoInteraction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    init = staticmethod(Coin_SWIG_Python.SoInteraction_init)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoInteraction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoInteraction
    __del__ = lambda self : None;
SoInteraction_swigregister = Coin_SWIG_Python.SoInteraction_swigregister
SoInteraction_swigregister(SoInteraction)
SoInteraction_init = Coin_SWIG_Python.SoInteraction_init

class SoOffscreenRenderer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LUMINANCE = Coin_SWIG_Python.SoOffscreenRenderer_LUMINANCE
    LUMINANCE_TRANSPARENCY = Coin_SWIG_Python.SoOffscreenRenderer_LUMINANCE_TRANSPARENCY
    RGB = Coin_SWIG_Python.SoOffscreenRenderer_RGB
    RGB_TRANSPARENCY = Coin_SWIG_Python.SoOffscreenRenderer_RGB_TRANSPARENCY
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoOffscreenRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoOffscreenRenderer
    __del__ = lambda self : None;
    getScreenPixelsPerInch = staticmethod(Coin_SWIG_Python.SoOffscreenRenderer_getScreenPixelsPerInch)
    getMaximumResolution = staticmethod(Coin_SWIG_Python.SoOffscreenRenderer_getMaximumResolution)
    def setComponents(*args): return Coin_SWIG_Python.SoOffscreenRenderer_setComponents(*args)
    def getComponents(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getComponents(*args)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoOffscreenRenderer_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getViewportRegion(*args)
    def setBackgroundColor(*args): return Coin_SWIG_Python.SoOffscreenRenderer_setBackgroundColor(*args)
    def getBackgroundColor(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getBackgroundColor(*args)
    def setGLRenderAction(*args): return Coin_SWIG_Python.SoOffscreenRenderer_setGLRenderAction(*args)
    def getGLRenderAction(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getGLRenderAction(*args)
    def render(*args): return Coin_SWIG_Python.SoOffscreenRenderer_render(*args)
    def writeToRGB(*args): return Coin_SWIG_Python.SoOffscreenRenderer_writeToRGB(*args)
    def writeToPostScript(*args): return Coin_SWIG_Python.SoOffscreenRenderer_writeToPostScript(*args)
    def isWriteSupported(*args): return Coin_SWIG_Python.SoOffscreenRenderer_isWriteSupported(*args)
    def getNumWriteFiletypes(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getNumWriteFiletypes(*args)
    def writeToFile(*args): return Coin_SWIG_Python.SoOffscreenRenderer_writeToFile(*args)
    def getWriteFiletypeInfo(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getWriteFiletypeInfo(*args)
    def getBuffer(*args): return Coin_SWIG_Python.SoOffscreenRenderer_getBuffer(*args)
SoOffscreenRenderer_swigregister = Coin_SWIG_Python.SoOffscreenRenderer_swigregister
SoOffscreenRenderer_swigregister(SoOffscreenRenderer)
SoOffscreenRenderer_getScreenPixelsPerInch = Coin_SWIG_Python.SoOffscreenRenderer_getScreenPixelsPerInch
SoOffscreenRenderer_getMaximumResolution = Coin_SWIG_Python.SoOffscreenRenderer_getMaximumResolution

class SoPickedPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPickedPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPickedPoint
    __del__ = lambda self : None;
    def copy(*args): return Coin_SWIG_Python.SoPickedPoint_copy(*args)
    def getPoint(*args): return Coin_SWIG_Python.SoPickedPoint_getPoint(*args)
    def getNormal(*args): return Coin_SWIG_Python.SoPickedPoint_getNormal(*args)
    def getTextureCoords(*args): return Coin_SWIG_Python.SoPickedPoint_getTextureCoords(*args)
    def getMaterialIndex(*args): return Coin_SWIG_Python.SoPickedPoint_getMaterialIndex(*args)
    def getPath(*args): return Coin_SWIG_Python.SoPickedPoint_getPath(*args)
    def isOnGeometry(*args): return Coin_SWIG_Python.SoPickedPoint_isOnGeometry(*args)
    def getDetail(*args): return Coin_SWIG_Python.SoPickedPoint_getDetail(*args)
    def getObjectToWorld(*args): return Coin_SWIG_Python.SoPickedPoint_getObjectToWorld(*args)
    def getWorldToObject(*args): return Coin_SWIG_Python.SoPickedPoint_getWorldToObject(*args)
    def getObjectToImage(*args): return Coin_SWIG_Python.SoPickedPoint_getObjectToImage(*args)
    def getImageToObject(*args): return Coin_SWIG_Python.SoPickedPoint_getImageToObject(*args)
    def getObjectPoint(*args): return Coin_SWIG_Python.SoPickedPoint_getObjectPoint(*args)
    def getObjectNormal(*args): return Coin_SWIG_Python.SoPickedPoint_getObjectNormal(*args)
    def getObjectTextureCoords(*args): return Coin_SWIG_Python.SoPickedPoint_getObjectTextureCoords(*args)
    def setObjectNormal(*args): return Coin_SWIG_Python.SoPickedPoint_setObjectNormal(*args)
    def setObjectTextureCoords(*args): return Coin_SWIG_Python.SoPickedPoint_setObjectTextureCoords(*args)
    def setMaterialIndex(*args): return Coin_SWIG_Python.SoPickedPoint_setMaterialIndex(*args)
    def setDetail(*args): return Coin_SWIG_Python.SoPickedPoint_setDetail(*args)
SoPickedPoint_swigregister = Coin_SWIG_Python.SoPickedPoint_swigregister
SoPickedPoint_swigregister(SoPickedPoint)

class SoPrimitiveVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoPrimitiveVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoPrimitiveVertex
    __del__ = lambda self : None;
    def getPoint(*args): return Coin_SWIG_Python.SoPrimitiveVertex_getPoint(*args)
    def getNormal(*args): return Coin_SWIG_Python.SoPrimitiveVertex_getNormal(*args)
    def getTextureCoords(*args): return Coin_SWIG_Python.SoPrimitiveVertex_getTextureCoords(*args)
    def getMaterialIndex(*args): return Coin_SWIG_Python.SoPrimitiveVertex_getMaterialIndex(*args)
    def getDetail(*args): return Coin_SWIG_Python.SoPrimitiveVertex_getDetail(*args)
    def setPoint(*args): return Coin_SWIG_Python.SoPrimitiveVertex_setPoint(*args)
    def setNormal(*args): return Coin_SWIG_Python.SoPrimitiveVertex_setNormal(*args)
    def setTextureCoords(*args): return Coin_SWIG_Python.SoPrimitiveVertex_setTextureCoords(*args)
    def setMaterialIndex(*args): return Coin_SWIG_Python.SoPrimitiveVertex_setMaterialIndex(*args)
    def setDetail(*args): return Coin_SWIG_Python.SoPrimitiveVertex_setDetail(*args)
SoPrimitiveVertex_swigregister = Coin_SWIG_Python.SoPrimitiveVertex_swigregister
SoPrimitiveVertex_swigregister(SoPrimitiveVertex)

class SoSceneManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoSceneManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SoSceneManager
    __del__ = lambda self : None;
    def render(*args): return Coin_SWIG_Python.SoSceneManager_render(*args)
    def processEvent(*args): return Coin_SWIG_Python.SoSceneManager_processEvent(*args)
    def reinitialize(*args): return Coin_SWIG_Python.SoSceneManager_reinitialize(*args)
    def scheduleRedraw(*args): return Coin_SWIG_Python.SoSceneManager_scheduleRedraw(*args)
    def setSceneGraph(*args): return Coin_SWIG_Python.SoSceneManager_setSceneGraph(*args)
    def getSceneGraph(*args): return Coin_SWIG_Python.SoSceneManager_getSceneGraph(*args)
    def setWindowSize(*args): return Coin_SWIG_Python.SoSceneManager_setWindowSize(*args)
    def getWindowSize(*args): return Coin_SWIG_Python.SoSceneManager_getWindowSize(*args)
    def setSize(*args): return Coin_SWIG_Python.SoSceneManager_setSize(*args)
    def getSize(*args): return Coin_SWIG_Python.SoSceneManager_getSize(*args)
    def setOrigin(*args): return Coin_SWIG_Python.SoSceneManager_setOrigin(*args)
    def getOrigin(*args): return Coin_SWIG_Python.SoSceneManager_getOrigin(*args)
    def setViewportRegion(*args): return Coin_SWIG_Python.SoSceneManager_setViewportRegion(*args)
    def getViewportRegion(*args): return Coin_SWIG_Python.SoSceneManager_getViewportRegion(*args)
    def setBackgroundColor(*args): return Coin_SWIG_Python.SoSceneManager_setBackgroundColor(*args)
    def getBackgroundColor(*args): return Coin_SWIG_Python.SoSceneManager_getBackgroundColor(*args)
    def setBackgroundIndex(*args): return Coin_SWIG_Python.SoSceneManager_setBackgroundIndex(*args)
    def getBackgroundIndex(*args): return Coin_SWIG_Python.SoSceneManager_getBackgroundIndex(*args)
    def setRGBMode(*args): return Coin_SWIG_Python.SoSceneManager_setRGBMode(*args)
    def isRGBMode(*args): return Coin_SWIG_Python.SoSceneManager_isRGBMode(*args)
    def activate(*args): return Coin_SWIG_Python.SoSceneManager_activate(*args)
    def deactivate(*args): return Coin_SWIG_Python.SoSceneManager_deactivate(*args)
    def setRenderCallback(*args): return Coin_SWIG_Python.SoSceneManager_setRenderCallback(*args)
    def isAutoRedraw(*args): return Coin_SWIG_Python.SoSceneManager_isAutoRedraw(*args)
    def setRedrawPriority(*args): return Coin_SWIG_Python.SoSceneManager_setRedrawPriority(*args)
    def getRedrawPriority(*args): return Coin_SWIG_Python.SoSceneManager_getRedrawPriority(*args)
    def setAntialiasing(*args): return Coin_SWIG_Python.SoSceneManager_setAntialiasing(*args)
    def getAntialiasing(*args): return Coin_SWIG_Python.SoSceneManager_getAntialiasing(*args)
    def setGLRenderAction(*args): return Coin_SWIG_Python.SoSceneManager_setGLRenderAction(*args)
    def getGLRenderAction(*args): return Coin_SWIG_Python.SoSceneManager_getGLRenderAction(*args)
    def setAudioRenderAction(*args): return Coin_SWIG_Python.SoSceneManager_setAudioRenderAction(*args)
    def getAudioRenderAction(*args): return Coin_SWIG_Python.SoSceneManager_getAudioRenderAction(*args)
    def setHandleEventAction(*args): return Coin_SWIG_Python.SoSceneManager_setHandleEventAction(*args)
    def getHandleEventAction(*args): return Coin_SWIG_Python.SoSceneManager_getHandleEventAction(*args)
    getDefaultRedrawPriority = staticmethod(Coin_SWIG_Python.SoSceneManager_getDefaultRedrawPriority)
    enableRealTimeUpdate = staticmethod(Coin_SWIG_Python.SoSceneManager_enableRealTimeUpdate)
    isRealTimeUpdateEnabled = staticmethod(Coin_SWIG_Python.SoSceneManager_isRealTimeUpdateEnabled)
SoSceneManager_swigregister = Coin_SWIG_Python.SoSceneManager_swigregister
SoSceneManager_swigregister(SoSceneManager)
SoSceneManager_getDefaultRedrawPriority = Coin_SWIG_Python.SoSceneManager_getDefaultRedrawPriority
SoSceneManager_enableRealTimeUpdate = Coin_SWIG_Python.SoSceneManager_enableRealTimeUpdate
SoSceneManager_isRealTimeUpdateEnabled = Coin_SWIG_Python.SoSceneManager_isRealTimeUpdateEnabled

GL_GLEXT_PROTOTYPES = Coin_SWIG_Python.GL_GLEXT_PROTOTYPES
GL_CLAMP_TO_EDGE = Coin_SWIG_Python.GL_CLAMP_TO_EDGE
GL_CLAMP_TO_BORDER = Coin_SWIG_Python.GL_CLAMP_TO_BORDER
GL_REPLACE = Coin_SWIG_Python.GL_REPLACE
GL_MAX_3D_TEXTURE_SIZE = Coin_SWIG_Python.GL_MAX_3D_TEXTURE_SIZE
GL_PACK_IMAGE_HEIGHT = Coin_SWIG_Python.GL_PACK_IMAGE_HEIGHT
GL_PACK_SKIP_IMAGES = Coin_SWIG_Python.GL_PACK_SKIP_IMAGES
GL_PROXY_TEXTURE_2D = Coin_SWIG_Python.GL_PROXY_TEXTURE_2D
GL_PROXY_TEXTURE_3D = Coin_SWIG_Python.GL_PROXY_TEXTURE_3D
GL_TEXTURE_3D = Coin_SWIG_Python.GL_TEXTURE_3D
GL_TEXTURE_DEPTH = Coin_SWIG_Python.GL_TEXTURE_DEPTH
GL_TEXTURE_WRAP_R = Coin_SWIG_Python.GL_TEXTURE_WRAP_R
GL_UNPACK_IMAGE_HEIGHT = Coin_SWIG_Python.GL_UNPACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = Coin_SWIG_Python.GL_UNPACK_SKIP_IMAGES
GL_COLOR_TABLE_WIDTH = Coin_SWIG_Python.GL_COLOR_TABLE_WIDTH
GL_TEXTURE0 = Coin_SWIG_Python.GL_TEXTURE0
GL_TEXTURE1 = Coin_SWIG_Python.GL_TEXTURE1
GL_TEXTURE2 = Coin_SWIG_Python.GL_TEXTURE2
GL_TEXTURE3 = Coin_SWIG_Python.GL_TEXTURE3
GL_TEXTURE4 = Coin_SWIG_Python.GL_TEXTURE4
GL_TEXTURE5 = Coin_SWIG_Python.GL_TEXTURE5
GL_TEXTURE6 = Coin_SWIG_Python.GL_TEXTURE6
GL_TEXTURE7 = Coin_SWIG_Python.GL_TEXTURE7
GL_TEXTURE8 = Coin_SWIG_Python.GL_TEXTURE8
GL_TEXTURE9 = Coin_SWIG_Python.GL_TEXTURE9
GL_TEXTURE10 = Coin_SWIG_Python.GL_TEXTURE10
GL_TEXTURE11 = Coin_SWIG_Python.GL_TEXTURE11
GL_TEXTURE12 = Coin_SWIG_Python.GL_TEXTURE12
GL_TEXTURE13 = Coin_SWIG_Python.GL_TEXTURE13
GL_TEXTURE14 = Coin_SWIG_Python.GL_TEXTURE14
GL_TEXTURE15 = Coin_SWIG_Python.GL_TEXTURE15
GL_MAX_TEXTURE_UNITS = Coin_SWIG_Python.GL_MAX_TEXTURE_UNITS
GL_ACTIVE_TEXTURE = Coin_SWIG_Python.GL_ACTIVE_TEXTURE
GL_CLIENT_ACTIVE_TEXTURE = Coin_SWIG_Python.GL_CLIENT_ACTIVE_TEXTURE
GL_POLYGON_OFFSET_EXT = Coin_SWIG_Python.GL_POLYGON_OFFSET_EXT
GL_COLOR_TABLE = Coin_SWIG_Python.GL_COLOR_TABLE
GL_COLOR_INDEX1_EXT = Coin_SWIG_Python.GL_COLOR_INDEX1_EXT
GL_COLOR_INDEX2_EXT = Coin_SWIG_Python.GL_COLOR_INDEX2_EXT
GL_COLOR_INDEX4_EXT = Coin_SWIG_Python.GL_COLOR_INDEX4_EXT
GL_COLOR_INDEX8_EXT = Coin_SWIG_Python.GL_COLOR_INDEX8_EXT
GL_COLOR_INDEX12_EXT = Coin_SWIG_Python.GL_COLOR_INDEX12_EXT
GL_COLOR_INDEX16_EXT = Coin_SWIG_Python.GL_COLOR_INDEX16_EXT
GL_COLOR_TABLE_FORMAT_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_FORMAT_EXT
GL_COLOR_TABLE_RED_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_RED_SIZE_EXT
GL_COLOR_TABLE_GREEN_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_GREEN_SIZE_EXT
GL_COLOR_TABLE_BLUE_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_BLUE_SIZE_EXT
GL_COLOR_TABLE_ALPHA_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_ALPHA_SIZE_EXT
GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
GL_COLOR_TABLE_INTENSITY_SIZE_EXT = Coin_SWIG_Python.GL_COLOR_TABLE_INTENSITY_SIZE_EXT
GL_TEXTURE_INDEX_SIZE_EXT = Coin_SWIG_Python.GL_TEXTURE_INDEX_SIZE_EXT
GL_COMPRESSED_ALPHA_ARB = Coin_SWIG_Python.GL_COMPRESSED_ALPHA_ARB
GL_COMPRESSED_LUMINANCE_ARB = Coin_SWIG_Python.GL_COMPRESSED_LUMINANCE_ARB
GL_COMPRESSED_LUMINANCE_ALPHA_ARB = Coin_SWIG_Python.GL_COMPRESSED_LUMINANCE_ALPHA_ARB
GL_COMPRESSED_INTENSITY_ARB = Coin_SWIG_Python.GL_COMPRESSED_INTENSITY_ARB
GL_COMPRESSED_RGB_ARB = Coin_SWIG_Python.GL_COMPRESSED_RGB_ARB
GL_COMPRESSED_RGBA_ARB = Coin_SWIG_Python.GL_COMPRESSED_RGBA_ARB
GL_TEXTURE_COMPRESSION_HINT_ARB = Coin_SWIG_Python.GL_TEXTURE_COMPRESSION_HINT_ARB
GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = Coin_SWIG_Python.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
GL_TEXTURE_COMPRESSED_ARB = Coin_SWIG_Python.GL_TEXTURE_COMPRESSED_ARB
GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = Coin_SWIG_Python.GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
GL_COMPRESSED_TEXTURE_FORMATS_ARB = Coin_SWIG_Python.GL_COMPRESSED_TEXTURE_FORMATS_ARB
GL_DEPTH_COMPONENT16 = Coin_SWIG_Python.GL_DEPTH_COMPONENT16
GL_DEPTH_COMPONENT24 = Coin_SWIG_Python.GL_DEPTH_COMPONENT24
GL_DEPTH_COMPONENT32 = Coin_SWIG_Python.GL_DEPTH_COMPONENT32
GL_TEXTURE_DEPTH_SIZE = Coin_SWIG_Python.GL_TEXTURE_DEPTH_SIZE
GL_DEPTH_TEXTURE_MODE = Coin_SWIG_Python.GL_DEPTH_TEXTURE_MODE
GL_R3_G3_B2 = Coin_SWIG_Python.GL_R3_G3_B2
GL_RGB4 = Coin_SWIG_Python.GL_RGB4
GL_RGB5 = Coin_SWIG_Python.GL_RGB5
GL_RGB8 = Coin_SWIG_Python.GL_RGB8
GL_RGB10 = Coin_SWIG_Python.GL_RGB10
GL_RGB12 = Coin_SWIG_Python.GL_RGB12
GL_RGB16 = Coin_SWIG_Python.GL_RGB16
GL_RGBA2 = Coin_SWIG_Python.GL_RGBA2
GL_RGBA4 = Coin_SWIG_Python.GL_RGBA4
GL_RGB5_A1 = Coin_SWIG_Python.GL_RGB5_A1
GL_RGBA8 = Coin_SWIG_Python.GL_RGBA8
GL_RGB10_A2 = Coin_SWIG_Python.GL_RGB10_A2
GL_RGBA12 = Coin_SWIG_Python.GL_RGBA12
GL_RGBA16 = Coin_SWIG_Python.GL_RGBA16
GL_RGBA32F_ARB = Coin_SWIG_Python.GL_RGBA32F_ARB
GL_RGB32F_ARB = Coin_SWIG_Python.GL_RGB32F_ARB
GL_ALPHA32F_ARB = Coin_SWIG_Python.GL_ALPHA32F_ARB
GL_INTENSITY32F_ARB = Coin_SWIG_Python.GL_INTENSITY32F_ARB
GL_LUMINANCE32F_ARB = Coin_SWIG_Python.GL_LUMINANCE32F_ARB
GL_LUMINANCE_ALPHA32F_ARB = Coin_SWIG_Python.GL_LUMINANCE_ALPHA32F_ARB
GL_RGBA16F_ARB = Coin_SWIG_Python.GL_RGBA16F_ARB
GL_RGB16F_ARB = Coin_SWIG_Python.GL_RGB16F_ARB
GL_ALPHA16F_ARB = Coin_SWIG_Python.GL_ALPHA16F_ARB
GL_INTENSITY16F_ARB = Coin_SWIG_Python.GL_INTENSITY16F_ARB
GL_LUMINANCE16F_ARB = Coin_SWIG_Python.GL_LUMINANCE16F_ARB
GL_LUMINANCE_ALPHA16F_ARB = Coin_SWIG_Python.GL_LUMINANCE_ALPHA16F_ARB
GL_RGBA16_EXT = Coin_SWIG_Python.GL_RGBA16_EXT
GL_TEXTURE_COMPARE_MODE = Coin_SWIG_Python.GL_TEXTURE_COMPARE_MODE
GL_TEXTURE_COMPARE_FUNC = Coin_SWIG_Python.GL_TEXTURE_COMPARE_FUNC
GL_COMPARE_R_TO_TEXTURE = Coin_SWIG_Python.GL_COMPARE_R_TO_TEXTURE
GL_MIN = Coin_SWIG_Python.GL_MIN
GL_MAX = Coin_SWIG_Python.GL_MAX
GL_FUNC_ADD = Coin_SWIG_Python.GL_FUNC_ADD
GL_FUNC_SUBTRACT = Coin_SWIG_Python.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = Coin_SWIG_Python.GL_FUNC_REVERSE_SUBTRACT
GL_VERTEX_ARRAY = Coin_SWIG_Python.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = Coin_SWIG_Python.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = Coin_SWIG_Python.GL_COLOR_ARRAY
GL_INDEX_ARRAY = Coin_SWIG_Python.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = Coin_SWIG_Python.GL_TEXTURE_COORD_ARRAY
GL_V3F = Coin_SWIG_Python.GL_V3F
GL_C4UB_V3F = Coin_SWIG_Python.GL_C4UB_V3F
GL_C3F_V3F = Coin_SWIG_Python.GL_C3F_V3F
GL_N3F_V3F = Coin_SWIG_Python.GL_N3F_V3F
GL_C4F_N3F_V3F = Coin_SWIG_Python.GL_C4F_N3F_V3F
GL_T2F_V3F = Coin_SWIG_Python.GL_T2F_V3F
GL_T2F_C4UB_V3F = Coin_SWIG_Python.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = Coin_SWIG_Python.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = Coin_SWIG_Python.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = Coin_SWIG_Python.GL_T2F_C4F_N3F_V3F
GL_VERTEX_ARRAY_RANGE_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_NV
GL_VERTEX_ARRAY_RANGE_LENGTH_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_LENGTH_NV
GL_VERTEX_ARRAY_RANGE_VALID_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_VALID_NV
GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = Coin_SWIG_Python.GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
GL_VERTEX_ARRAY_RANGE_POINTER_NV = Coin_SWIG_Python.GL_VERTEX_ARRAY_RANGE_POINTER_NV
GL_ARRAY_BUFFER = Coin_SWIG_Python.GL_ARRAY_BUFFER
GL_ELEMENT_ARRAY_BUFFER = Coin_SWIG_Python.GL_ELEMENT_ARRAY_BUFFER
GL_READ_ONLY = Coin_SWIG_Python.GL_READ_ONLY
GL_WRITE_ONLY = Coin_SWIG_Python.GL_WRITE_ONLY
GL_READ_WRITE = Coin_SWIG_Python.GL_READ_WRITE
GL_BUFFER_ACCESS = Coin_SWIG_Python.GL_BUFFER_ACCESS
GL_BUFFER_MAPPED = Coin_SWIG_Python.GL_BUFFER_MAPPED
GL_BUFFER_MAP_POINTER = Coin_SWIG_Python.GL_BUFFER_MAP_POINTER
GL_STREAM_DRAW = Coin_SWIG_Python.GL_STREAM_DRAW
GL_STREAM_READ = Coin_SWIG_Python.GL_STREAM_READ
GL_STREAM_COPY = Coin_SWIG_Python.GL_STREAM_COPY
GL_STATIC_DRAW = Coin_SWIG_Python.GL_STATIC_DRAW
GL_STATIC_READ = Coin_SWIG_Python.GL_STATIC_READ
GL_STATIC_COPY = Coin_SWIG_Python.GL_STATIC_COPY
GL_DYNAMIC_DRAW = Coin_SWIG_Python.GL_DYNAMIC_DRAW
GL_DYNAMIC_READ = Coin_SWIG_Python.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = Coin_SWIG_Python.GL_DYNAMIC_COPY
GL_REGISTER_COMBINERS_NV = Coin_SWIG_Python.GL_REGISTER_COMBINERS_NV
GL_COMBINER0_NV = Coin_SWIG_Python.GL_COMBINER0_NV
GL_COMBINER1_NV = Coin_SWIG_Python.GL_COMBINER1_NV
GL_COMBINER2_NV = Coin_SWIG_Python.GL_COMBINER2_NV
GL_COMBINER3_NV = Coin_SWIG_Python.GL_COMBINER3_NV
GL_COMBINER4_NV = Coin_SWIG_Python.GL_COMBINER4_NV
GL_COMBINER5_NV = Coin_SWIG_Python.GL_COMBINER5_NV
GL_COMBINER6_NV = Coin_SWIG_Python.GL_COMBINER6_NV
GL_COMBINER7_NV = Coin_SWIG_Python.GL_COMBINER7_NV
GL_VARIABLE_A_NV = Coin_SWIG_Python.GL_VARIABLE_A_NV
GL_VARIABLE_B_NV = Coin_SWIG_Python.GL_VARIABLE_B_NV
GL_VARIABLE_C_NV = Coin_SWIG_Python.GL_VARIABLE_C_NV
GL_VARIABLE_D_NV = Coin_SWIG_Python.GL_VARIABLE_D_NV
GL_VARIABLE_E_NV = Coin_SWIG_Python.GL_VARIABLE_E_NV
GL_VARIABLE_F_NV = Coin_SWIG_Python.GL_VARIABLE_F_NV
GL_VARIABLE_G_NV = Coin_SWIG_Python.GL_VARIABLE_G_NV
GL_CONSTANT_COLOR0_NV = Coin_SWIG_Python.GL_CONSTANT_COLOR0_NV
GL_CONSTANT_COLOR1_NV = Coin_SWIG_Python.GL_CONSTANT_COLOR1_NV
GL_PRIMARY_COLOR_NV = Coin_SWIG_Python.GL_PRIMARY_COLOR_NV
GL_SECONDARY_COLOR_NV = Coin_SWIG_Python.GL_SECONDARY_COLOR_NV
GL_SPARE0_NV = Coin_SWIG_Python.GL_SPARE0_NV
GL_SPARE1_NV = Coin_SWIG_Python.GL_SPARE1_NV
GL_UNSIGNED_IDENTITY_NV = Coin_SWIG_Python.GL_UNSIGNED_IDENTITY_NV
GL_UNSIGNED_INVERT_NV = Coin_SWIG_Python.GL_UNSIGNED_INVERT_NV
GL_EXPAND_NORMAL_NV = Coin_SWIG_Python.GL_EXPAND_NORMAL_NV
GL_EXPAND_NEGATE_NV = Coin_SWIG_Python.GL_EXPAND_NEGATE_NV
GL_HALF_BIAS_NORMAL_NV = Coin_SWIG_Python.GL_HALF_BIAS_NORMAL_NV
GL_HALF_BIAS_NEGATE_NV = Coin_SWIG_Python.GL_HALF_BIAS_NEGATE_NV
GL_SIGNED_IDENTITY_NV = Coin_SWIG_Python.GL_SIGNED_IDENTITY_NV
GL_SIGNED_NEGATE_NV = Coin_SWIG_Python.GL_SIGNED_NEGATE_NV
GL_E_TIMES_F_NV = Coin_SWIG_Python.GL_E_TIMES_F_NV
GL_SPARE0_PLUS_SECONDARY_COLOR_NV = Coin_SWIG_Python.GL_SPARE0_PLUS_SECONDARY_COLOR_NV
GL_SCALE_BY_TWO_NV = Coin_SWIG_Python.GL_SCALE_BY_TWO_NV
GL_SCALE_BY_FOUR_NV = Coin_SWIG_Python.GL_SCALE_BY_FOUR_NV
GL_SCALE_BY_ONE_HALF_NV = Coin_SWIG_Python.GL_SCALE_BY_ONE_HALF_NV
GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = Coin_SWIG_Python.GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
GL_DISCARD_NV = Coin_SWIG_Python.GL_DISCARD_NV
GL_COMBINER_INPUT_NV = Coin_SWIG_Python.GL_COMBINER_INPUT_NV
GL_COMBINER_MAPPING_NV = Coin_SWIG_Python.GL_COMBINER_MAPPING_NV
GL_COMBINER_COMPONENT_USAGE_NV = Coin_SWIG_Python.GL_COMBINER_COMPONENT_USAGE_NV
GL_COMBINER_AB_DOT_PRODUCT_NV = Coin_SWIG_Python.GL_COMBINER_AB_DOT_PRODUCT_NV
GL_COMBINER_CD_DOT_PRODUCT_NV = Coin_SWIG_Python.GL_COMBINER_CD_DOT_PRODUCT_NV
GL_COMBINER_MUX_SUM_NV = Coin_SWIG_Python.GL_COMBINER_MUX_SUM_NV
GL_COMBINER_SCALE_NV = Coin_SWIG_Python.GL_COMBINER_SCALE_NV
GL_COMBINER_BIAS_NV = Coin_SWIG_Python.GL_COMBINER_BIAS_NV
GL_COMBINER_AB_OUTPUT_NV = Coin_SWIG_Python.GL_COMBINER_AB_OUTPUT_NV
GL_COMBINER_CD_OUTPUT_NV = Coin_SWIG_Python.GL_COMBINER_CD_OUTPUT_NV
GL_COMBINER_SUM_OUTPUT_NV = Coin_SWIG_Python.GL_COMBINER_SUM_OUTPUT_NV
GL_MAX_GENERAL_COMBINERS_NV = Coin_SWIG_Python.GL_MAX_GENERAL_COMBINERS_NV
GL_NUM_GENERAL_COMBINERS_NV = Coin_SWIG_Python.GL_NUM_GENERAL_COMBINERS_NV
GL_COLOR_SUM_CLAMP_NV = Coin_SWIG_Python.GL_COLOR_SUM_CLAMP_NV
GL_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_TEXTURE_RECTANGLE_NV
GL_TEXTURE_BINDING_RECTANGLE_NV = Coin_SWIG_Python.GL_TEXTURE_BINDING_RECTANGLE_NV
GL_PROXY_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_PROXY_TEXTURE_RECTANGLE_NV
GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = Coin_SWIG_Python.GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
GL_TEXTURE_RECTANGLE_EXT = Coin_SWIG_Python.GL_TEXTURE_RECTANGLE_EXT
GL_TEXTURE_BINDING_RECTANGLE_EXT = Coin_SWIG_Python.GL_TEXTURE_BINDING_RECTANGLE_EXT
GL_PROXY_TEXTURE_RECTANGLE_EXT = Coin_SWIG_Python.GL_PROXY_TEXTURE_RECTANGLE_EXT
GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = Coin_SWIG_Python.GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
GL_OFFSET_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_RECTANGLE_NV
GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = Coin_SWIG_Python.GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
GL_UNSIGNED_INT_S8_S8_8_8_NV = Coin_SWIG_Python.GL_UNSIGNED_INT_S8_S8_8_8_NV
GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = Coin_SWIG_Python.GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
GL_DSDT_MAG_INTENSITY_NV = Coin_SWIG_Python.GL_DSDT_MAG_INTENSITY_NV
GL_SHADER_CONSISTENT_NV = Coin_SWIG_Python.GL_SHADER_CONSISTENT_NV
GL_TEXTURE_SHADER_NV = Coin_SWIG_Python.GL_TEXTURE_SHADER_NV
GL_SHADER_OPERATION_NV = Coin_SWIG_Python.GL_SHADER_OPERATION_NV
GL_CULL_MODES_NV = Coin_SWIG_Python.GL_CULL_MODES_NV
GL_OFFSET_TEXTURE_MATRIX_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_MATRIX_NV
GL_OFFSET_TEXTURE_SCALE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_SCALE_NV
GL_OFFSET_TEXTURE_BIAS_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_BIAS_NV
GL_OFFSET_TEXTURE_2D_MATRIX_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_MATRIX_NV
GL_OFFSET_TEXTURE_2D_SCALE_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_SCALE_NV
GL_OFFSET_TEXTURE_2D_BIAS_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_BIAS_NV
GL_PREVIOUS_TEXTURE_INPUT_NV = Coin_SWIG_Python.GL_PREVIOUS_TEXTURE_INPUT_NV
GL_CONST_EYE_NV = Coin_SWIG_Python.GL_CONST_EYE_NV
GL_PASS_THROUGH_NV = Coin_SWIG_Python.GL_PASS_THROUGH_NV
GL_CULL_FRAGMENT_NV = Coin_SWIG_Python.GL_CULL_FRAGMENT_NV
GL_OFFSET_TEXTURE_2D_NV = Coin_SWIG_Python.GL_OFFSET_TEXTURE_2D_NV
GL_DEPENDENT_AR_TEXTURE_2D_NV = Coin_SWIG_Python.GL_DEPENDENT_AR_TEXTURE_2D_NV
GL_DEPENDENT_GB_TEXTURE_2D_NV = Coin_SWIG_Python.GL_DEPENDENT_GB_TEXTURE_2D_NV
GL_DOT_PRODUCT_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_NV
GL_DOT_PRODUCT_DEPTH_REPLACE_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_DEPTH_REPLACE_NV
GL_DOT_PRODUCT_TEXTURE_2D_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_TEXTURE_2D_NV
GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = Coin_SWIG_Python.GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
GL_HILO_NV = Coin_SWIG_Python.GL_HILO_NV
GL_DSDT_NV = Coin_SWIG_Python.GL_DSDT_NV
GL_DSDT_MAG_NV = Coin_SWIG_Python.GL_DSDT_MAG_NV
GL_DSDT_MAG_VIB_NV = Coin_SWIG_Python.GL_DSDT_MAG_VIB_NV
GL_HILO16_NV = Coin_SWIG_Python.GL_HILO16_NV
GL_SIGNED_HILO_NV = Coin_SWIG_Python.GL_SIGNED_HILO_NV
GL_SIGNED_HILO16_NV = Coin_SWIG_Python.GL_SIGNED_HILO16_NV
GL_SIGNED_RGBA_NV = Coin_SWIG_Python.GL_SIGNED_RGBA_NV
GL_SIGNED_RGBA8_NV = Coin_SWIG_Python.GL_SIGNED_RGBA8_NV
GL_SIGNED_RGB_NV = Coin_SWIG_Python.GL_SIGNED_RGB_NV
GL_SIGNED_RGB8_NV = Coin_SWIG_Python.GL_SIGNED_RGB8_NV
GL_SIGNED_LUMINANCE_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE_NV
GL_SIGNED_LUMINANCE8_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE8_NV
GL_SIGNED_LUMINANCE_ALPHA_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE_ALPHA_NV
GL_SIGNED_LUMINANCE8_ALPHA8_NV = Coin_SWIG_Python.GL_SIGNED_LUMINANCE8_ALPHA8_NV
GL_SIGNED_ALPHA_NV = Coin_SWIG_Python.GL_SIGNED_ALPHA_NV
GL_SIGNED_ALPHA8_NV = Coin_SWIG_Python.GL_SIGNED_ALPHA8_NV
GL_SIGNED_INTENSITY_NV = Coin_SWIG_Python.GL_SIGNED_INTENSITY_NV
GL_SIGNED_INTENSITY8_NV = Coin_SWIG_Python.GL_SIGNED_INTENSITY8_NV
GL_DSDT8_NV = Coin_SWIG_Python.GL_DSDT8_NV
GL_DSDT8_MAG8_NV = Coin_SWIG_Python.GL_DSDT8_MAG8_NV
GL_DSDT8_MAG8_INTENSITY8_NV = Coin_SWIG_Python.GL_DSDT8_MAG8_INTENSITY8_NV
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = Coin_SWIG_Python.GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = Coin_SWIG_Python.GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
GL_HI_SCALE_NV = Coin_SWIG_Python.GL_HI_SCALE_NV
GL_LO_SCALE_NV = Coin_SWIG_Python.GL_LO_SCALE_NV
GL_DS_SCALE_NV = Coin_SWIG_Python.GL_DS_SCALE_NV
GL_DT_SCALE_NV = Coin_SWIG_Python.GL_DT_SCALE_NV
GL_MAGNITUDE_SCALE_NV = Coin_SWIG_Python.GL_MAGNITUDE_SCALE_NV
GL_VIBRANCE_SCALE_NV = Coin_SWIG_Python.GL_VIBRANCE_SCALE_NV
GL_HI_BIAS_NV = Coin_SWIG_Python.GL_HI_BIAS_NV
GL_LO_BIAS_NV = Coin_SWIG_Python.GL_LO_BIAS_NV
GL_DS_BIAS_NV = Coin_SWIG_Python.GL_DS_BIAS_NV
GL_DT_BIAS_NV = Coin_SWIG_Python.GL_DT_BIAS_NV
GL_MAGNITUDE_BIAS_NV = Coin_SWIG_Python.GL_MAGNITUDE_BIAS_NV
GL_VIBRANCE_BIAS_NV = Coin_SWIG_Python.GL_VIBRANCE_BIAS_NV
GL_TEXTURE_BORDER_VALUES_NV = Coin_SWIG_Python.GL_TEXTURE_BORDER_VALUES_NV
GL_TEXTURE_HI_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_HI_SIZE_NV
GL_TEXTURE_LO_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_LO_SIZE_NV
GL_TEXTURE_DS_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_DS_SIZE_NV
GL_TEXTURE_DT_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_DT_SIZE_NV
GL_TEXTURE_MAG_SIZE_NV = Coin_SWIG_Python.GL_TEXTURE_MAG_SIZE_NV
GL_NORMAL_MAP = Coin_SWIG_Python.GL_NORMAL_MAP
GL_REFLECTION_MAP = Coin_SWIG_Python.GL_REFLECTION_MAP
GL_TEXTURE_CUBE_MAP = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = Coin_SWIG_Python.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = Coin_SWIG_Python.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_MAX_CUBE_MAP_TEXTURE_SIZE = Coin_SWIG_Python.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_COMBINE = Coin_SWIG_Python.GL_COMBINE
GL_COMBINE_RGB = Coin_SWIG_Python.GL_COMBINE_RGB
GL_COMBINE_ALPHA = Coin_SWIG_Python.GL_COMBINE_ALPHA
GL_RGB_SCALE = Coin_SWIG_Python.GL_RGB_SCALE
GL_ADD_SIGNED = Coin_SWIG_Python.GL_ADD_SIGNED
GL_INTERPOLATE = Coin_SWIG_Python.GL_INTERPOLATE
GL_CONSTANT = Coin_SWIG_Python.GL_CONSTANT
GL_PRIMARY_COLOR = Coin_SWIG_Python.GL_PRIMARY_COLOR
GL_PREVIOUS = Coin_SWIG_Python.GL_PREVIOUS
GL_SOURCE0_RGB = Coin_SWIG_Python.GL_SOURCE0_RGB
GL_SOURCE1_RGB = Coin_SWIG_Python.GL_SOURCE1_RGB
GL_SOURCE2_RGB = Coin_SWIG_Python.GL_SOURCE2_RGB
GL_SOURCE0_ALPHA = Coin_SWIG_Python.GL_SOURCE0_ALPHA
GL_SOURCE1_ALPHA = Coin_SWIG_Python.GL_SOURCE1_ALPHA
GL_SOURCE2_ALPHA = Coin_SWIG_Python.GL_SOURCE2_ALPHA
GL_OPERAND0_RGB = Coin_SWIG_Python.GL_OPERAND0_RGB
GL_OPERAND1_RGB = Coin_SWIG_Python.GL_OPERAND1_RGB
GL_OPERAND2_RGB = Coin_SWIG_Python.GL_OPERAND2_RGB
GL_OPERAND0_ALPHA = Coin_SWIG_Python.GL_OPERAND0_ALPHA
GL_OPERAND1_ALPHA = Coin_SWIG_Python.GL_OPERAND1_ALPHA
GL_OPERAND2_ALPHA = Coin_SWIG_Python.GL_OPERAND2_ALPHA
GL_SUBTRACT = Coin_SWIG_Python.GL_SUBTRACT
GL_DOT3_RGB = Coin_SWIG_Python.GL_DOT3_RGB
GL_DOT3_RGBA = Coin_SWIG_Python.GL_DOT3_RGBA
GL_GENERATE_MIPMAP_SGIS = Coin_SWIG_Python.GL_GENERATE_MIPMAP_SGIS
GL_GENERATE_MIPMAP_HINT_SGIS = Coin_SWIG_Python.GL_GENERATE_MIPMAP_HINT_SGIS
GL_FRAGMENT_PROGRAM_ARB = Coin_SWIG_Python.GL_FRAGMENT_PROGRAM_ARB
GL_PROGRAM_FORMAT_ASCII_ARB = Coin_SWIG_Python.GL_PROGRAM_FORMAT_ASCII_ARB
GL_PROGRAM_LENGTH_ARB = Coin_SWIG_Python.GL_PROGRAM_LENGTH_ARB
GL_PROGRAM_FORMAT_ARB = Coin_SWIG_Python.GL_PROGRAM_FORMAT_ARB
GL_PROGRAM_BINDING_ARB = Coin_SWIG_Python.GL_PROGRAM_BINDING_ARB
GL_PROGRAM_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_PROGRAM_TEMPORARIES_ARB = Coin_SWIG_Python.GL_PROGRAM_TEMPORARIES_ARB
GL_MAX_PROGRAM_TEMPORARIES_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_TEMPORARIES_ARB
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_PROGRAM_PARAMETERS_ARB = Coin_SWIG_Python.GL_PROGRAM_PARAMETERS_ARB
GL_MAX_PROGRAM_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_PARAMETERS_ARB
GL_PROGRAM_NATIVE_PARAMETERS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_PARAMETERS_ARB
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
GL_PROGRAM_ATTRIBS_ARB = Coin_SWIG_Python.GL_PROGRAM_ATTRIBS_ARB
GL_MAX_PROGRAM_ATTRIBS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ATTRIBS_ARB
GL_PROGRAM_NATIVE_ATTRIBS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = Coin_SWIG_Python.GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
GL_PROGRAM_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_ALU_INSTRUCTIONS_ARB
GL_PROGRAM_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_TEX_INSTRUCTIONS_ARB
GL_PROGRAM_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_TEX_INDIRECTIONS_ARB
GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
GL_PROGRAM_STRING_ARB = Coin_SWIG_Python.GL_PROGRAM_STRING_ARB
GL_PROGRAM_ERROR_POSITION_ARB = Coin_SWIG_Python.GL_PROGRAM_ERROR_POSITION_ARB
GL_CURRENT_MATRIX_ARB = Coin_SWIG_Python.GL_CURRENT_MATRIX_ARB
GL_TRANSPOSE_CURRENT_MATRIX_ARB = Coin_SWIG_Python.GL_TRANSPOSE_CURRENT_MATRIX_ARB
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = Coin_SWIG_Python.GL_CURRENT_MATRIX_STACK_DEPTH_ARB
GL_MAX_PROGRAM_MATRICES_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_MATRICES_ARB
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
GL_MAX_TEXTURE_COORDS_ARB = Coin_SWIG_Python.GL_MAX_TEXTURE_COORDS_ARB
GL_MAX_TEXTURE_IMAGE_UNITS_ARB = Coin_SWIG_Python.GL_MAX_TEXTURE_IMAGE_UNITS_ARB
GL_PROGRAM_ERROR_STRING_ARB = Coin_SWIG_Python.GL_PROGRAM_ERROR_STRING_ARB
GL_MATRIX0_ARB = Coin_SWIG_Python.GL_MATRIX0_ARB
GL_MATRIX1_ARB = Coin_SWIG_Python.GL_MATRIX1_ARB
GL_MATRIX2_ARB = Coin_SWIG_Python.GL_MATRIX2_ARB
GL_MATRIX3_ARB = Coin_SWIG_Python.GL_MATRIX3_ARB
GL_MATRIX4_ARB = Coin_SWIG_Python.GL_MATRIX4_ARB
GL_MATRIX5_ARB = Coin_SWIG_Python.GL_MATRIX5_ARB
GL_MATRIX6_ARB = Coin_SWIG_Python.GL_MATRIX6_ARB
GL_MATRIX7_ARB = Coin_SWIG_Python.GL_MATRIX7_ARB
GL_MATRIX8_ARB = Coin_SWIG_Python.GL_MATRIX8_ARB
GL_MATRIX9_ARB = Coin_SWIG_Python.GL_MATRIX9_ARB
GL_MATRIX10_ARB = Coin_SWIG_Python.GL_MATRIX10_ARB
GL_MATRIX11_ARB = Coin_SWIG_Python.GL_MATRIX11_ARB
GL_MATRIX12_ARB = Coin_SWIG_Python.GL_MATRIX12_ARB
GL_MATRIX13_ARB = Coin_SWIG_Python.GL_MATRIX13_ARB
GL_MATRIX14_ARB = Coin_SWIG_Python.GL_MATRIX14_ARB
GL_MATRIX15_ARB = Coin_SWIG_Python.GL_MATRIX15_ARB
GL_MATRIX16_ARB = Coin_SWIG_Python.GL_MATRIX16_ARB
GL_MATRIX17_ARB = Coin_SWIG_Python.GL_MATRIX17_ARB
GL_MATRIX18_ARB = Coin_SWIG_Python.GL_MATRIX18_ARB
GL_MATRIX19_ARB = Coin_SWIG_Python.GL_MATRIX19_ARB
GL_MATRIX20_ARB = Coin_SWIG_Python.GL_MATRIX20_ARB
GL_MATRIX21_ARB = Coin_SWIG_Python.GL_MATRIX21_ARB
GL_MATRIX22_ARB = Coin_SWIG_Python.GL_MATRIX22_ARB
GL_MATRIX23_ARB = Coin_SWIG_Python.GL_MATRIX23_ARB
GL_MATRIX24_ARB = Coin_SWIG_Python.GL_MATRIX24_ARB
GL_MATRIX25_ARB = Coin_SWIG_Python.GL_MATRIX25_ARB
GL_MATRIX26_ARB = Coin_SWIG_Python.GL_MATRIX26_ARB
GL_MATRIX27_ARB = Coin_SWIG_Python.GL_MATRIX27_ARB
GL_MATRIX28_ARB = Coin_SWIG_Python.GL_MATRIX28_ARB
GL_MATRIX29_ARB = Coin_SWIG_Python.GL_MATRIX29_ARB
GL_MATRIX30_ARB = Coin_SWIG_Python.GL_MATRIX30_ARB
GL_MATRIX31_ARB = Coin_SWIG_Python.GL_MATRIX31_ARB
GL_VERTEX_PROGRAM_ARB = Coin_SWIG_Python.GL_VERTEX_PROGRAM_ARB
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = Coin_SWIG_Python.GL_VERTEX_PROGRAM_POINT_SIZE_ARB
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = Coin_SWIG_Python.GL_VERTEX_PROGRAM_TWO_SIDE_ARB
GL_COLOR_SUM_ARB = Coin_SWIG_Python.GL_COLOR_SUM_ARB
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
GL_CURRENT_VERTEX_ATTRIB_ARB = Coin_SWIG_Python.GL_CURRENT_VERTEX_ATTRIB_ARB
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = Coin_SWIG_Python.GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
GL_PROGRAM_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_PROGRAM_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = Coin_SWIG_Python.GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_VERTEX_ATTRIBS_ARB = Coin_SWIG_Python.GL_MAX_VERTEX_ATTRIBS_ARB
GL_VERTEX_SHADER_ARB = Coin_SWIG_Python.GL_VERTEX_SHADER_ARB
GL_FRAGMENT_SHADER_ARB = Coin_SWIG_Python.GL_FRAGMENT_SHADER_ARB
GL_OBJECT_ACTIVE_UNIFORMS_ARB = Coin_SWIG_Python.GL_OBJECT_ACTIVE_UNIFORMS_ARB
GL_GEOMETRY_SHADER_EXT = Coin_SWIG_Python.GL_GEOMETRY_SHADER_EXT
GL_GEOMETRY_VERTICES_OUT_EXT = Coin_SWIG_Python.GL_GEOMETRY_VERTICES_OUT_EXT
GL_GEOMETRY_INPUT_TYPE_EXT = Coin_SWIG_Python.GL_GEOMETRY_INPUT_TYPE_EXT
GL_GEOMETRY_OUTPUT_TYPE_EXT = Coin_SWIG_Python.GL_GEOMETRY_OUTPUT_TYPE_EXT
GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
GL_MAX_VARYING_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_VARYING_COMPONENTS_EXT
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = Coin_SWIG_Python.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
GL_INT_VEC2_ARB = Coin_SWIG_Python.GL_INT_VEC2_ARB
GL_INT_VEC3_ARB = Coin_SWIG_Python.GL_INT_VEC3_ARB
GL_INT_VEC4_ARB = Coin_SWIG_Python.GL_INT_VEC4_ARB
GL_FLOAT_VEC2_ARB = Coin_SWIG_Python.GL_FLOAT_VEC2_ARB
GL_FLOAT_VEC3_ARB = Coin_SWIG_Python.GL_FLOAT_VEC3_ARB
GL_FLOAT_VEC4_ARB = Coin_SWIG_Python.GL_FLOAT_VEC4_ARB
GL_FLOAT_MAT2_ARB = Coin_SWIG_Python.GL_FLOAT_MAT2_ARB
GL_FLOAT_MAT3_ARB = Coin_SWIG_Python.GL_FLOAT_MAT3_ARB
GL_FLOAT_MAT4_ARB = Coin_SWIG_Python.GL_FLOAT_MAT4_ARB
GL_SAMPLER_1D_ARB = Coin_SWIG_Python.GL_SAMPLER_1D_ARB
GL_SAMPLER_2D_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_ARB
GL_SAMPLER_3D_ARB = Coin_SWIG_Python.GL_SAMPLER_3D_ARB
GL_SAMPLER_CUBE_ARB = Coin_SWIG_Python.GL_SAMPLER_CUBE_ARB
GL_SAMPLER_1D_SHADOW_ARB = Coin_SWIG_Python.GL_SAMPLER_1D_SHADOW_ARB
GL_SAMPLER_2D_SHADOW_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_SHADOW_ARB
GL_SAMPLER_2D_RECT_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_RECT_ARB
GL_SAMPLER_2D_RECT_SHADOW_ARB = Coin_SWIG_Python.GL_SAMPLER_2D_RECT_SHADOW_ARB
GL_OBJECT_COMPILE_STATUS_ARB = Coin_SWIG_Python.GL_OBJECT_COMPILE_STATUS_ARB
GL_OBJECT_INFO_LOG_LENGTH_ARB = Coin_SWIG_Python.GL_OBJECT_INFO_LOG_LENGTH_ARB
GL_OBJECT_LINK_STATUS_ARB = Coin_SWIG_Python.GL_OBJECT_LINK_STATUS_ARB
GL_TEXTURE_MAX_ANISOTROPY_EXT = Coin_SWIG_Python.GL_TEXTURE_MAX_ANISOTROPY_EXT
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = Coin_SWIG_Python.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
GL_SAMPLES_PASSED = Coin_SWIG_Python.GL_SAMPLES_PASSED
GL_QUERY_COUNTER_BITS = Coin_SWIG_Python.GL_QUERY_COUNTER_BITS
GL_CURRENT_QUERY = Coin_SWIG_Python.GL_CURRENT_QUERY
GL_QUERY_RESULT = Coin_SWIG_Python.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = Coin_SWIG_Python.GL_QUERY_RESULT_AVAILABLE
GL_CLIENT_PIXEL_STORE_BIT = Coin_SWIG_Python.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = Coin_SWIG_Python.GL_CLIENT_VERTEX_ARRAY_BIT
GL_CLIENT_ALL_ATTRIB_BITS = Coin_SWIG_Python.GL_CLIENT_ALL_ATTRIB_BITS
GL_ALL_CLIENT_ATTRIB_BITS = Coin_SWIG_Python.GL_ALL_CLIENT_ATTRIB_BITS
GL_INVALID_FRAMEBUFFER_OPERATION_EXT = Coin_SWIG_Python.GL_INVALID_FRAMEBUFFER_OPERATION_EXT
GL_MAX_RENDERBUFFER_SIZE_EXT = Coin_SWIG_Python.GL_MAX_RENDERBUFFER_SIZE_EXT
GL_FRAMEBUFFER_BINDING_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_BINDING_EXT
GL_RENDERBUFFER_BINDING_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_BINDING_EXT
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
GL_FRAMEBUFFER_COMPLETE_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_COMPLETE_EXT
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
GL_FRAMEBUFFER_UNSUPPORTED_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_UNSUPPORTED_EXT
GL_MAX_COLOR_ATTACHMENTS_EXT = Coin_SWIG_Python.GL_MAX_COLOR_ATTACHMENTS_EXT
GL_COLOR_ATTACHMENT0_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT0_EXT
GL_COLOR_ATTACHMENT1_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT1_EXT
GL_COLOR_ATTACHMENT2_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT2_EXT
GL_COLOR_ATTACHMENT3_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT3_EXT
GL_COLOR_ATTACHMENT4_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT4_EXT
GL_COLOR_ATTACHMENT5_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT5_EXT
GL_COLOR_ATTACHMENT6_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT6_EXT
GL_COLOR_ATTACHMENT7_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT7_EXT
GL_COLOR_ATTACHMENT8_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT8_EXT
GL_COLOR_ATTACHMENT9_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT9_EXT
GL_COLOR_ATTACHMENT10_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT10_EXT
GL_COLOR_ATTACHMENT11_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT11_EXT
GL_COLOR_ATTACHMENT12_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT12_EXT
GL_COLOR_ATTACHMENT13_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT13_EXT
GL_COLOR_ATTACHMENT14_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT14_EXT
GL_COLOR_ATTACHMENT15_EXT = Coin_SWIG_Python.GL_COLOR_ATTACHMENT15_EXT
GL_DEPTH_ATTACHMENT_EXT = Coin_SWIG_Python.GL_DEPTH_ATTACHMENT_EXT
GL_STENCIL_ATTACHMENT_EXT = Coin_SWIG_Python.GL_STENCIL_ATTACHMENT_EXT
GL_FRAMEBUFFER_EXT = Coin_SWIG_Python.GL_FRAMEBUFFER_EXT
GL_RENDERBUFFER_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_EXT
GL_RENDERBUFFER_WIDTH_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_WIDTH_EXT
GL_RENDERBUFFER_HEIGHT_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_HEIGHT_EXT
GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
GL_STENCIL_INDEX1_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX1_EXT
GL_STENCIL_INDEX4_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX4_EXT
GL_STENCIL_INDEX8_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX8_EXT
GL_STENCIL_INDEX16_EXT = Coin_SWIG_Python.GL_STENCIL_INDEX16_EXT
GL_RENDERBUFFER_RED_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_RED_SIZE_EXT
GL_RENDERBUFFER_GREEN_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_GREEN_SIZE_EXT
GL_RENDERBUFFER_BLUE_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_BLUE_SIZE_EXT
GL_RENDERBUFFER_ALPHA_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_ALPHA_SIZE_EXT
GL_RENDERBUFFER_DEPTH_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_DEPTH_SIZE_EXT
GL_RENDERBUFFER_STENCIL_SIZE_EXT = Coin_SWIG_Python.GL_RENDERBUFFER_STENCIL_SIZE_EXT
GLX_PBUFFER_WIDTH = Coin_SWIG_Python.GLX_PBUFFER_WIDTH
GLX_PBUFFER_HEIGHT = Coin_SWIG_Python.GLX_PBUFFER_HEIGHT
GLX_DRAWABLE_TYPE = Coin_SWIG_Python.GLX_DRAWABLE_TYPE
GLX_RENDER_TYPE = Coin_SWIG_Python.GLX_RENDER_TYPE
GLX_RGBA_TYPE = Coin_SWIG_Python.GLX_RGBA_TYPE
GLX_RGBA_BIT = Coin_SWIG_Python.GLX_RGBA_BIT
GLX_PBUFFER_BIT = Coin_SWIG_Python.GLX_PBUFFER_BIT
GLX_MAX_PBUFFER_WIDTH = Coin_SWIG_Python.GLX_MAX_PBUFFER_WIDTH
GLX_MAX_PBUFFER_HEIGHT = Coin_SWIG_Python.GLX_MAX_PBUFFER_HEIGHT
GLX_MAX_PBUFFER_PIXELS = Coin_SWIG_Python.GLX_MAX_PBUFFER_PIXELS
GLU_VERSION = Coin_SWIG_Python.GLU_VERSION
GLU_EXTENSIONS = Coin_SWIG_Python.GLU_EXTENSIONS
GLU_OUTLINE_POLYGON = Coin_SWIG_Python.GLU_OUTLINE_POLYGON
GLU_OUTLINE_PATCH = Coin_SWIG_Python.GLU_OUTLINE_PATCH
GLU_NURBS_ERROR = Coin_SWIG_Python.GLU_NURBS_ERROR
GLU_ERROR = Coin_SWIG_Python.GLU_ERROR
GLU_NURBS_BEGIN = Coin_SWIG_Python.GLU_NURBS_BEGIN
GLU_NURBS_VERTEX = Coin_SWIG_Python.GLU_NURBS_VERTEX
GLU_NURBS_NORMAL = Coin_SWIG_Python.GLU_NURBS_NORMAL
GLU_NURBS_COLOR = Coin_SWIG_Python.GLU_NURBS_COLOR
GLU_NURBS_TEXTURE_COORD = Coin_SWIG_Python.GLU_NURBS_TEXTURE_COORD
GLU_NURBS_END = Coin_SWIG_Python.GLU_NURBS_END
GLU_NURBS_BEGIN_DATA = Coin_SWIG_Python.GLU_NURBS_BEGIN_DATA
GLU_NURBS_VERTEX_DATA = Coin_SWIG_Python.GLU_NURBS_VERTEX_DATA
GLU_NURBS_NORMAL_DATA = Coin_SWIG_Python.GLU_NURBS_NORMAL_DATA
GLU_NURBS_COLOR_DATA = Coin_SWIG_Python.GLU_NURBS_COLOR_DATA
GLU_NURBS_TEXTURE_COORD_DATA = Coin_SWIG_Python.GLU_NURBS_TEXTURE_COORD_DATA
GLU_NURBS_END_DATA = Coin_SWIG_Python.GLU_NURBS_END_DATA
GLU_AUTO_LOAD_MATRIX = Coin_SWIG_Python.GLU_AUTO_LOAD_MATRIX
GLU_CULLING = Coin_SWIG_Python.GLU_CULLING
GLU_SAMPLING_TOLERANCE = Coin_SWIG_Python.GLU_SAMPLING_TOLERANCE
GLU_DISPLAY_MODE = Coin_SWIG_Python.GLU_DISPLAY_MODE
GLU_PARAMETRIC_TOLERANCE = Coin_SWIG_Python.GLU_PARAMETRIC_TOLERANCE
GLU_SAMPLING_METHOD = Coin_SWIG_Python.GLU_SAMPLING_METHOD
GLU_U_STEP = Coin_SWIG_Python.GLU_U_STEP
GLU_V_STEP = Coin_SWIG_Python.GLU_V_STEP
GLU_NURBS_MODE = Coin_SWIG_Python.GLU_NURBS_MODE
GLU_NURBS_TESSELLATOR = Coin_SWIG_Python.GLU_NURBS_TESSELLATOR
GLU_NURBS_RENDERER = Coin_SWIG_Python.GLU_NURBS_RENDERER
GLU_OBJECT_PARAMETRIC_ERROR = Coin_SWIG_Python.GLU_OBJECT_PARAMETRIC_ERROR
GLU_OBJECT_PATH_LENGTH = Coin_SWIG_Python.GLU_OBJECT_PATH_LENGTH
GLU_PATH_LENGTH = Coin_SWIG_Python.GLU_PATH_LENGTH
GLU_PARAMETRIC_ERROR = Coin_SWIG_Python.GLU_PARAMETRIC_ERROR
GLU_DOMAIN_DISTANCE = Coin_SWIG_Python.GLU_DOMAIN_DISTANCE
GLU_MAP1_TRIM_2 = Coin_SWIG_Python.GLU_MAP1_TRIM_2
GLU_MAP1_TRIM_3 = Coin_SWIG_Python.GLU_MAP1_TRIM_3
GLU_POINT = Coin_SWIG_Python.GLU_POINT
GLU_LINE = Coin_SWIG_Python.GLU_LINE
GLU_FILL = Coin_SWIG_Python.GLU_FILL
GLU_SILHOUETTE = Coin_SWIG_Python.GLU_SILHOUETTE
GLU_TESS_BEGIN = Coin_SWIG_Python.GLU_TESS_BEGIN
GLU_TESS_VERTEX = Coin_SWIG_Python.GLU_TESS_VERTEX
GLU_TESS_END = Coin_SWIG_Python.GLU_TESS_END
GLU_TESS_ERROR = Coin_SWIG_Python.GLU_TESS_ERROR
GLU_TESS_COMBINE = Coin_SWIG_Python.GLU_TESS_COMBINE
GLU_TESS_BEGIN_DATA = Coin_SWIG_Python.GLU_TESS_BEGIN_DATA
GLU_TESS_VERTEX_DATA = Coin_SWIG_Python.GLU_TESS_VERTEX_DATA
GLU_TESS_END_DATA = Coin_SWIG_Python.GLU_TESS_END_DATA
GLU_TESS_ERROR_DATA = Coin_SWIG_Python.GLU_TESS_ERROR_DATA
GLU_TESS_MISSING_BEGIN_POLYGON = Coin_SWIG_Python.GLU_TESS_MISSING_BEGIN_POLYGON
GLU_TESS_MISSING_BEGIN_CONTOUR = Coin_SWIG_Python.GLU_TESS_MISSING_BEGIN_CONTOUR
GLU_TESS_MISSING_END_POLYGON = Coin_SWIG_Python.GLU_TESS_MISSING_END_POLYGON
GLU_TESS_MISSING_END_CONTOUR = Coin_SWIG_Python.GLU_TESS_MISSING_END_CONTOUR
GLU_TESS_NEED_COMBINE_CALLBACK = Coin_SWIG_Python.GLU_TESS_NEED_COMBINE_CALLBACK
WGL_COLOR_BITS_ARB = Coin_SWIG_Python.WGL_COLOR_BITS_ARB
WGL_ALPHA_BITS_ARB = Coin_SWIG_Python.WGL_ALPHA_BITS_ARB
WGL_DEPTH_BITS_ARB = Coin_SWIG_Python.WGL_DEPTH_BITS_ARB
WGL_STENCIL_BITS_ARB = Coin_SWIG_Python.WGL_STENCIL_BITS_ARB
WGL_DRAW_TO_PBUFFER_ARB = Coin_SWIG_Python.WGL_DRAW_TO_PBUFFER_ARB
WGL_PBUFFER_WIDTH_ARB = Coin_SWIG_Python.WGL_PBUFFER_WIDTH_ARB
WGL_PBUFFER_HEIGHT_ARB = Coin_SWIG_Python.WGL_PBUFFER_HEIGHT_ARB
WGL_BIND_TO_TEXTURE_RGB_ARB = Coin_SWIG_Python.WGL_BIND_TO_TEXTURE_RGB_ARB
WGL_BIND_TO_TEXTURE_RGBA_ARB = Coin_SWIG_Python.WGL_BIND_TO_TEXTURE_RGBA_ARB
WGL_TEXTURE_FORMAT_ARB = Coin_SWIG_Python.WGL_TEXTURE_FORMAT_ARB
WGL_TEXTURE_TARGET_ARB = Coin_SWIG_Python.WGL_TEXTURE_TARGET_ARB
WGL_MIPMAP_TEXTURE_ARB = Coin_SWIG_Python.WGL_MIPMAP_TEXTURE_ARB
WGL_TEXTURE_RGB_ARB = Coin_SWIG_Python.WGL_TEXTURE_RGB_ARB
WGL_TEXTURE_RGBA_ARB = Coin_SWIG_Python.WGL_TEXTURE_RGBA_ARB
WGL_NO_TEXTURE_ARB = Coin_SWIG_Python.WGL_NO_TEXTURE_ARB
WGL_TEXTURE_CUBE_MAP_ARB = Coin_SWIG_Python.WGL_TEXTURE_CUBE_MAP_ARB
WGL_TEXTURE_1D_ARB = Coin_SWIG_Python.WGL_TEXTURE_1D_ARB
WGL_TEXTURE_2D_ARB = Coin_SWIG_Python.WGL_TEXTURE_2D_ARB
WGL_MIPMAP_LEVEL_ARB = Coin_SWIG_Python.WGL_MIPMAP_LEVEL_ARB
WGL_FRONT_LEFT_ARB = Coin_SWIG_Python.WGL_FRONT_LEFT_ARB
WGL_FRONT_RIGHT_ARB = Coin_SWIG_Python.WGL_FRONT_RIGHT_ARB
WGL_BACK_LEFT_ARB = Coin_SWIG_Python.WGL_BACK_LEFT_ARB
WGL_BACK_RIGHT_ARB = Coin_SWIG_Python.WGL_BACK_RIGHT_ARB
WGL_MAX_PBUFFER_PIXELS_ARB = Coin_SWIG_Python.WGL_MAX_PBUFFER_PIXELS_ARB
WGL_MAX_PBUFFER_WIDTH_ARB = Coin_SWIG_Python.WGL_MAX_PBUFFER_WIDTH_ARB
WGL_MAX_PBUFFER_HEIGHT_ARB = Coin_SWIG_Python.WGL_MAX_PBUFFER_HEIGHT_ARB
class SbBarrier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbBarrier(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbBarrier
    __del__ = lambda self : None;
    def enter(*args): return Coin_SWIG_Python.SbBarrier_enter(*args)
SbBarrier_swigregister = Coin_SWIG_Python.SbBarrier_swigregister
SbBarrier_swigregister(SbBarrier)

class SbMutex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbMutex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbMutex
    __del__ = lambda self : None;
    def lock(*args): return Coin_SWIG_Python.SbMutex_lock(*args)
    def tryLock(*args): return Coin_SWIG_Python.SbMutex_tryLock(*args)
    def unlock(*args): return Coin_SWIG_Python.SbMutex_unlock(*args)
SbMutex_swigregister = Coin_SWIG_Python.SbMutex_swigregister
SbMutex_swigregister(SbMutex)

class SbThreadAutoLock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbThreadAutoLock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbThreadAutoLock
    __del__ = lambda self : None;
SbThreadAutoLock_swigregister = Coin_SWIG_Python.SbThreadAutoLock_swigregister
SbThreadAutoLock_swigregister(SbThreadAutoLock)

class SbCondVar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbCondVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbCondVar
    __del__ = lambda self : None;
    def wait(*args): return Coin_SWIG_Python.SbCondVar_wait(*args)
    def timedWait(*args): return Coin_SWIG_Python.SbCondVar_timedWait(*args)
    def wakeOne(*args): return Coin_SWIG_Python.SbCondVar_wakeOne(*args)
    def wakeAll(*args): return Coin_SWIG_Python.SbCondVar_wakeAll(*args)
SbCondVar_swigregister = Coin_SWIG_Python.SbCondVar_swigregister
SbCondVar_swigregister(SbCondVar)

class SbFifo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbFifo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbFifo
    __del__ = lambda self : None;
    def assign(*args): return Coin_SWIG_Python.SbFifo_assign(*args)
    def retrieve(*args): return Coin_SWIG_Python.SbFifo_retrieve(*args)
    def tryRetrieve(*args): return Coin_SWIG_Python.SbFifo_tryRetrieve(*args)
    def size(*args): return Coin_SWIG_Python.SbFifo_size(*args)
    def lock(*args): return Coin_SWIG_Python.SbFifo_lock(*args)
    def unlock(*args): return Coin_SWIG_Python.SbFifo_unlock(*args)
    def peek(*args): return Coin_SWIG_Python.SbFifo_peek(*args)
    def contains(*args): return Coin_SWIG_Python.SbFifo_contains(*args)
    def reclaim(*args): return Coin_SWIG_Python.SbFifo_reclaim(*args)
SbFifo_swigregister = Coin_SWIG_Python.SbFifo_swigregister
SbFifo_swigregister(SbFifo)

class SbRWMutex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    READ_PRECEDENCE = Coin_SWIG_Python.SbRWMutex_READ_PRECEDENCE
    WRITE_PRECEDENCE = Coin_SWIG_Python.SbRWMutex_WRITE_PRECEDENCE
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbRWMutex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbRWMutex
    __del__ = lambda self : None;
    def writeLock(*args): return Coin_SWIG_Python.SbRWMutex_writeLock(*args)
    def tryWriteLock(*args): return Coin_SWIG_Python.SbRWMutex_tryWriteLock(*args)
    def writeUnlock(*args): return Coin_SWIG_Python.SbRWMutex_writeUnlock(*args)
    def readLock(*args): return Coin_SWIG_Python.SbRWMutex_readLock(*args)
    def tryReadLock(*args): return Coin_SWIG_Python.SbRWMutex_tryReadLock(*args)
    def readUnlock(*args): return Coin_SWIG_Python.SbRWMutex_readUnlock(*args)
SbRWMutex_swigregister = Coin_SWIG_Python.SbRWMutex_swigregister
SbRWMutex_swigregister(SbRWMutex)

class SbStorage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SbStorage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = Coin_SWIG_Python.delete_SbStorage
    __del__ = lambda self : None;
    def get(*args): return Coin_SWIG_Python.SbStorage_get(*args)
    def applyToAll(*args): return Coin_SWIG_Python.SbStorage_applyToAll(*args)
SbStorage_swigregister = Coin_SWIG_Python.SbStorage_swigregister
SbStorage_swigregister(SbStorage)

class SbThread(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    create = staticmethod(Coin_SWIG_Python.SbThread_create)
    destroy = staticmethod(Coin_SWIG_Python.SbThread_destroy)
    join = staticmethod(Coin_SWIG_Python.SbThread_join)
SbThread_swigregister = Coin_SWIG_Python.SbThread_swigregister
SbThread_swigregister(SbThread)
SbThread_create = Coin_SWIG_Python.SbThread_create
SbThread_destroy = Coin_SWIG_Python.SbThread_destroy
SbThread_join = Coin_SWIG_Python.SbThread_join

class SoVRMLParent(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLParent_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLParent_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLParent_initClass)
    children = _swig_property(Coin_SWIG_Python.SoVRMLParent_children_get, Coin_SWIG_Python.SoVRMLParent_children_set)
    def affectsState(*args): return Coin_SWIG_Python.SoVRMLParent_affectsState(*args)
    def addChild(*args): return Coin_SWIG_Python.SoVRMLParent_addChild(*args)
    def insertChild(*args): return Coin_SWIG_Python.SoVRMLParent_insertChild(*args)
    def getChild(*args): return Coin_SWIG_Python.SoVRMLParent_getChild(*args)
    def findChild(*args): return Coin_SWIG_Python.SoVRMLParent_findChild(*args)
    def getNumChildren(*args): return Coin_SWIG_Python.SoVRMLParent_getNumChildren(*args)
    def removeChild(*args): return Coin_SWIG_Python.SoVRMLParent_removeChild(*args)
    def removeAllChildren(*args): return Coin_SWIG_Python.SoVRMLParent_removeAllChildren(*args)
    def replaceChild(*args): return Coin_SWIG_Python.SoVRMLParent_replaceChild(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLParent_getChildren(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLParent_doAction(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLParent_search(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLParent_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLParent_getPrimitiveCount(*args)
    updateChildList = staticmethod(Coin_SWIG_Python.SoVRMLParent_updateChildList)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLParent
    __del__ = lambda self : None;
SoVRMLParent_swigregister = Coin_SWIG_Python.SoVRMLParent_swigregister
SoVRMLParent_swigregister(SoVRMLParent)
SoVRMLParent_getClassTypeId = Coin_SWIG_Python.SoVRMLParent_getClassTypeId
SoVRMLParent_initClass = Coin_SWIG_Python.SoVRMLParent_initClass
SoVRMLParent_updateChildList = Coin_SWIG_Python.SoVRMLParent_updateChildList

class SoVRMLAnchor(SoVRMLParent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLAnchor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLAnchor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLAnchor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLAnchor(*args)
        try: self.this.append(this)
        except: self.this = this
    url = _swig_property(Coin_SWIG_Python.SoVRMLAnchor_url_get, Coin_SWIG_Python.SoVRMLAnchor_url_set)
    description = _swig_property(Coin_SWIG_Python.SoVRMLAnchor_description_get, Coin_SWIG_Python.SoVRMLAnchor_description_set)
    parameter = _swig_property(Coin_SWIG_Python.SoVRMLAnchor_parameter_get, Coin_SWIG_Python.SoVRMLAnchor_parameter_set)
    bboxCenter = _swig_property(Coin_SWIG_Python.SoVRMLAnchor_bboxCenter_get, Coin_SWIG_Python.SoVRMLAnchor_bboxCenter_set)
    bboxSize = _swig_property(Coin_SWIG_Python.SoVRMLAnchor_bboxSize_get, Coin_SWIG_Python.SoVRMLAnchor_bboxSize_set)
    setFetchURLCallBack = staticmethod(Coin_SWIG_Python.SoVRMLAnchor_setFetchURLCallBack)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLAnchor_handleEvent(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLAnchor
    __del__ = lambda self : None;
SoVRMLAnchor_swigregister = Coin_SWIG_Python.SoVRMLAnchor_swigregister
SoVRMLAnchor_swigregister(SoVRMLAnchor)
SoVRMLAnchor_getClassTypeId = Coin_SWIG_Python.SoVRMLAnchor_getClassTypeId
SoVRMLAnchor_initClass = Coin_SWIG_Python.SoVRMLAnchor_initClass
SoVRMLAnchor_setFetchURLCallBack = Coin_SWIG_Python.SoVRMLAnchor_setFetchURLCallBack

class SoVRMLAppearance(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLAppearance_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLAppearance_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLAppearance_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLAppearance(*args)
        try: self.this.append(this)
        except: self.this = this
    material = _swig_property(Coin_SWIG_Python.SoVRMLAppearance_material_get, Coin_SWIG_Python.SoVRMLAppearance_material_set)
    texture = _swig_property(Coin_SWIG_Python.SoVRMLAppearance_texture_get, Coin_SWIG_Python.SoVRMLAppearance_texture_set)
    textureTransform = _swig_property(Coin_SWIG_Python.SoVRMLAppearance_textureTransform_get, Coin_SWIG_Python.SoVRMLAppearance_textureTransform_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLAppearance_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLAppearance_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLAppearance_GLRender(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLAppearance_search(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLAppearance_getChildren(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLAppearance_notify(*args)
    def copyContents(*args): return Coin_SWIG_Python.SoVRMLAppearance_copyContents(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLAppearance
    __del__ = lambda self : None;
SoVRMLAppearance_swigregister = Coin_SWIG_Python.SoVRMLAppearance_swigregister
SoVRMLAppearance_swigregister(SoVRMLAppearance)
SoVRMLAppearance_getClassTypeId = Coin_SWIG_Python.SoVRMLAppearance_getClassTypeId
SoVRMLAppearance_initClass = Coin_SWIG_Python.SoVRMLAppearance_initClass

class SoVRMLAudioClip(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLAudioClip_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLAudioClip(*args)
        try: self.this.append(this)
        except: self.this = this
    description = _swig_property(Coin_SWIG_Python.SoVRMLAudioClip_description_get, Coin_SWIG_Python.SoVRMLAudioClip_description_set)
    loop = _swig_property(Coin_SWIG_Python.SoVRMLAudioClip_loop_get, Coin_SWIG_Python.SoVRMLAudioClip_loop_set)
    pitch = _swig_property(Coin_SWIG_Python.SoVRMLAudioClip_pitch_get, Coin_SWIG_Python.SoVRMLAudioClip_pitch_set)
    startTime = _swig_property(Coin_SWIG_Python.SoVRMLAudioClip_startTime_get, Coin_SWIG_Python.SoVRMLAudioClip_startTime_set)
    stopTime = _swig_property(Coin_SWIG_Python.SoVRMLAudioClip_stopTime_get, Coin_SWIG_Python.SoVRMLAudioClip_stopTime_set)
    url = _swig_property(Coin_SWIG_Python.SoVRMLAudioClip_url_get, Coin_SWIG_Python.SoVRMLAudioClip_url_set)
    setSubdirectories = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_setSubdirectories)
    getSubdirectories = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_getSubdirectories)
    setDefaultPauseBetweenTracks = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_setDefaultPauseBetweenTracks)
    getDefaultPauseBetweenTracks = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_getDefaultPauseBetweenTracks)
    setDefaultIntroPause = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_setDefaultIntroPause)
    getDefaultIntroPause = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_getDefaultIntroPause)
    setDefaultSampleRate = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_setDefaultSampleRate)
    getDefaultSampleRate = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_getDefaultSampleRate)
    setDefaultTimerInterval = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_setDefaultTimerInterval)
    getDefaultTimerInterval = staticmethod(Coin_SWIG_Python.SoVRMLAudioClip_getDefaultTimerInterval)
    def getSampleRate(*args): return Coin_SWIG_Python.SoVRMLAudioClip_getSampleRate(*args)
    def open(*args): return Coin_SWIG_Python.SoVRMLAudioClip_open(*args)
    def read(*args): return Coin_SWIG_Python.SoVRMLAudioClip_read(*args)
    def seek(*args): return Coin_SWIG_Python.SoVRMLAudioClip_seek(*args)
    def tell(*args): return Coin_SWIG_Python.SoVRMLAudioClip_tell(*args)
    def close(*args): return Coin_SWIG_Python.SoVRMLAudioClip_close(*args)
    def setCallbacks(*args): return Coin_SWIG_Python.SoVRMLAudioClip_setCallbacks(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLAudioClip
    __del__ = lambda self : None;
SoVRMLAudioClip_swigregister = Coin_SWIG_Python.SoVRMLAudioClip_swigregister
SoVRMLAudioClip_swigregister(SoVRMLAudioClip)
SoVRMLAudioClip_getClassTypeId = Coin_SWIG_Python.SoVRMLAudioClip_getClassTypeId
SoVRMLAudioClip_initClass = Coin_SWIG_Python.SoVRMLAudioClip_initClass
SoVRMLAudioClip_setSubdirectories = Coin_SWIG_Python.SoVRMLAudioClip_setSubdirectories
SoVRMLAudioClip_getSubdirectories = Coin_SWIG_Python.SoVRMLAudioClip_getSubdirectories
SoVRMLAudioClip_setDefaultPauseBetweenTracks = Coin_SWIG_Python.SoVRMLAudioClip_setDefaultPauseBetweenTracks
SoVRMLAudioClip_getDefaultPauseBetweenTracks = Coin_SWIG_Python.SoVRMLAudioClip_getDefaultPauseBetweenTracks
SoVRMLAudioClip_setDefaultIntroPause = Coin_SWIG_Python.SoVRMLAudioClip_setDefaultIntroPause
SoVRMLAudioClip_getDefaultIntroPause = Coin_SWIG_Python.SoVRMLAudioClip_getDefaultIntroPause
SoVRMLAudioClip_setDefaultSampleRate = Coin_SWIG_Python.SoVRMLAudioClip_setDefaultSampleRate
SoVRMLAudioClip_getDefaultSampleRate = Coin_SWIG_Python.SoVRMLAudioClip_getDefaultSampleRate
SoVRMLAudioClip_setDefaultTimerInterval = Coin_SWIG_Python.SoVRMLAudioClip_setDefaultTimerInterval
SoVRMLAudioClip_getDefaultTimerInterval = Coin_SWIG_Python.SoVRMLAudioClip_getDefaultTimerInterval

class SoVRMLBackground(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLBackground_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLBackground_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLBackground_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLBackground(*args)
        try: self.this.append(this)
        except: self.this = this
    groundColor = _swig_property(Coin_SWIG_Python.SoVRMLBackground_groundColor_get, Coin_SWIG_Python.SoVRMLBackground_groundColor_set)
    groundAngle = _swig_property(Coin_SWIG_Python.SoVRMLBackground_groundAngle_get, Coin_SWIG_Python.SoVRMLBackground_groundAngle_set)
    skyColor = _swig_property(Coin_SWIG_Python.SoVRMLBackground_skyColor_get, Coin_SWIG_Python.SoVRMLBackground_skyColor_set)
    skyAngle = _swig_property(Coin_SWIG_Python.SoVRMLBackground_skyAngle_get, Coin_SWIG_Python.SoVRMLBackground_skyAngle_set)
    backUrl = _swig_property(Coin_SWIG_Python.SoVRMLBackground_backUrl_get, Coin_SWIG_Python.SoVRMLBackground_backUrl_set)
    bottomUrl = _swig_property(Coin_SWIG_Python.SoVRMLBackground_bottomUrl_get, Coin_SWIG_Python.SoVRMLBackground_bottomUrl_set)
    frontUrl = _swig_property(Coin_SWIG_Python.SoVRMLBackground_frontUrl_get, Coin_SWIG_Python.SoVRMLBackground_frontUrl_set)
    leftUrl = _swig_property(Coin_SWIG_Python.SoVRMLBackground_leftUrl_get, Coin_SWIG_Python.SoVRMLBackground_leftUrl_set)
    rightUrl = _swig_property(Coin_SWIG_Python.SoVRMLBackground_rightUrl_get, Coin_SWIG_Python.SoVRMLBackground_rightUrl_set)
    topUrl = _swig_property(Coin_SWIG_Python.SoVRMLBackground_topUrl_get, Coin_SWIG_Python.SoVRMLBackground_topUrl_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLBackground_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLBackground
    __del__ = lambda self : None;
SoVRMLBackground_swigregister = Coin_SWIG_Python.SoVRMLBackground_swigregister
SoVRMLBackground_swigregister(SoVRMLBackground)
SoVRMLBackground_getClassTypeId = Coin_SWIG_Python.SoVRMLBackground_getClassTypeId
SoVRMLBackground_initClass = Coin_SWIG_Python.SoVRMLBackground_initClass

class SoVRMLBillboard(SoVRMLParent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLBillboard_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLBillboard_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLBillboard_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLBillboard(*args)
        try: self.this.append(this)
        except: self.this = this
    axisOfRotation = _swig_property(Coin_SWIG_Python.SoVRMLBillboard_axisOfRotation_get, Coin_SWIG_Python.SoVRMLBillboard_axisOfRotation_set)
    bboxCenter = _swig_property(Coin_SWIG_Python.SoVRMLBillboard_bboxCenter_get, Coin_SWIG_Python.SoVRMLBillboard_bboxCenter_set)
    bboxSize = _swig_property(Coin_SWIG_Python.SoVRMLBillboard_bboxSize_get, Coin_SWIG_Python.SoVRMLBillboard_bboxSize_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLBillboard_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLBillboard_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLBillboard_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLBillboard_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoVRMLBillboard_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLBillboard_pick(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLBillboard_search(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoVRMLBillboard_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoVRMLBillboard_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoVRMLBillboard_GLRenderOffPath(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLBillboard_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLBillboard
    __del__ = lambda self : None;
SoVRMLBillboard_swigregister = Coin_SWIG_Python.SoVRMLBillboard_swigregister
SoVRMLBillboard_swigregister(SoVRMLBillboard)
SoVRMLBillboard_getClassTypeId = Coin_SWIG_Python.SoVRMLBillboard_getClassTypeId
SoVRMLBillboard_initClass = Coin_SWIG_Python.SoVRMLBillboard_initClass

class SoVRMLGeometry(SoShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLGeometry_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLGeometry_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLGeometry_initClass)
    def search(*args): return Coin_SWIG_Python.SoVRMLGeometry_search(*args)
    def copyContents(*args): return Coin_SWIG_Python.SoVRMLGeometry_copyContents(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLGeometry
    __del__ = lambda self : None;
SoVRMLGeometry_swigregister = Coin_SWIG_Python.SoVRMLGeometry_swigregister
SoVRMLGeometry_swigregister(SoVRMLGeometry)
SoVRMLGeometry_getClassTypeId = Coin_SWIG_Python.SoVRMLGeometry_getClassTypeId
SoVRMLGeometry_initClass = Coin_SWIG_Python.SoVRMLGeometry_initClass

class SoVRMLBox(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLBox_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLBox_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLBox_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLBox(*args)
        try: self.this.append(this)
        except: self.this = this
    size = _swig_property(Coin_SWIG_Python.SoVRMLBox_size_get, Coin_SWIG_Python.SoVRMLBox_size_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLBox_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLBox_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLBox_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLBox
    __del__ = lambda self : None;
SoVRMLBox_swigregister = Coin_SWIG_Python.SoVRMLBox_swigregister
SoVRMLBox_swigregister(SoVRMLBox)
SoVRMLBox_getClassTypeId = Coin_SWIG_Python.SoVRMLBox_getClassTypeId
SoVRMLBox_initClass = Coin_SWIG_Python.SoVRMLBox_initClass

class SoVRMLGroup(SoVRMLParent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLGroup_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLGroup_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLGroup_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    OFF = Coin_SWIG_Python.SoVRMLGroup_OFF
    ON = Coin_SWIG_Python.SoVRMLGroup_ON
    AUTO = Coin_SWIG_Python.SoVRMLGroup_AUTO
    renderCaching = _swig_property(Coin_SWIG_Python.SoVRMLGroup_renderCaching_get, Coin_SWIG_Python.SoVRMLGroup_renderCaching_set)
    boundingBoxCaching = _swig_property(Coin_SWIG_Python.SoVRMLGroup_boundingBoxCaching_get, Coin_SWIG_Python.SoVRMLGroup_boundingBoxCaching_set)
    renderCulling = _swig_property(Coin_SWIG_Python.SoVRMLGroup_renderCulling_get, Coin_SWIG_Python.SoVRMLGroup_renderCulling_set)
    pickCulling = _swig_property(Coin_SWIG_Python.SoVRMLGroup_pickCulling_get, Coin_SWIG_Python.SoVRMLGroup_pickCulling_set)
    bboxCenter = _swig_property(Coin_SWIG_Python.SoVRMLGroup_bboxCenter_get, Coin_SWIG_Python.SoVRMLGroup_bboxCenter_set)
    bboxSize = _swig_property(Coin_SWIG_Python.SoVRMLGroup_bboxSize_get, Coin_SWIG_Python.SoVRMLGroup_bboxSize_set)
    setNumRenderCaches = staticmethod(Coin_SWIG_Python.SoVRMLGroup_setNumRenderCaches)
    getNumRenderCaches = staticmethod(Coin_SWIG_Python.SoVRMLGroup_getNumRenderCaches)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLGroup_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLGroup_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLGroup_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLGroup_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoVRMLGroup_getMatrix(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLGroup_rayPick(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLGroup_search(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLGroup_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLGroup_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoVRMLGroup_audioRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoVRMLGroup_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoVRMLGroup_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoVRMLGroup_GLRenderOffPath(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLGroup_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLGroup
    __del__ = lambda self : None;
SoVRMLGroup_swigregister = Coin_SWIG_Python.SoVRMLGroup_swigregister
SoVRMLGroup_swigregister(SoVRMLGroup)
SoVRMLGroup_getClassTypeId = Coin_SWIG_Python.SoVRMLGroup_getClassTypeId
SoVRMLGroup_initClass = Coin_SWIG_Python.SoVRMLGroup_initClass
SoVRMLGroup_setNumRenderCaches = Coin_SWIG_Python.SoVRMLGroup_setNumRenderCaches
SoVRMLGroup_getNumRenderCaches = Coin_SWIG_Python.SoVRMLGroup_getNumRenderCaches

class SoVRMLCollision(SoVRMLGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLCollision_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLCollision_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLCollision_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLCollision(*args)
        try: self.this.append(this)
        except: self.this = this
    collide = _swig_property(Coin_SWIG_Python.SoVRMLCollision_collide_get, Coin_SWIG_Python.SoVRMLCollision_collide_set)
    proxy = _swig_property(Coin_SWIG_Python.SoVRMLCollision_proxy_get, Coin_SWIG_Python.SoVRMLCollision_proxy_set)
    collideTime = _swig_property(Coin_SWIG_Python.SoVRMLCollision_collideTime_get, Coin_SWIG_Python.SoVRMLCollision_collideTime_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLCollision_GLRender(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLCollision_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCollision
    __del__ = lambda self : None;
SoVRMLCollision_swigregister = Coin_SWIG_Python.SoVRMLCollision_swigregister
SoVRMLCollision_swigregister(SoVRMLCollision)
SoVRMLCollision_getClassTypeId = Coin_SWIG_Python.SoVRMLCollision_getClassTypeId
SoVRMLCollision_initClass = Coin_SWIG_Python.SoVRMLCollision_initClass

class SoVRMLColor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLColor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLColor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLColor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLColor(*args)
        try: self.this.append(this)
        except: self.this = this
    color = _swig_property(Coin_SWIG_Python.SoVRMLColor_color_get, Coin_SWIG_Python.SoVRMLColor_color_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLColor_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLColor_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLColor_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLColor
    __del__ = lambda self : None;
SoVRMLColor_swigregister = Coin_SWIG_Python.SoVRMLColor_swigregister
SoVRMLColor_swigregister(SoVRMLColor)
SoVRMLColor_getClassTypeId = Coin_SWIG_Python.SoVRMLColor_getClassTypeId
SoVRMLColor_initClass = Coin_SWIG_Python.SoVRMLColor_initClass

class SoVRMLInterpolator(SoNodeEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLInterpolator_getOutputData(*args)
    key = _swig_property(Coin_SWIG_Python.SoVRMLInterpolator_key_get, Coin_SWIG_Python.SoVRMLInterpolator_key_set)
    set_fraction = _swig_property(Coin_SWIG_Python.SoVRMLInterpolator_set_fraction_get, Coin_SWIG_Python.SoVRMLInterpolator_set_fraction_set)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLInterpolator_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLInterpolator
    __del__ = lambda self : None;
SoVRMLInterpolator_swigregister = Coin_SWIG_Python.SoVRMLInterpolator_swigregister
SoVRMLInterpolator_swigregister(SoVRMLInterpolator)
SoVRMLInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLInterpolator_getClassTypeId
SoVRMLInterpolator_initClass = Coin_SWIG_Python.SoVRMLInterpolator_initClass

class SoVRMLColorInterpolator(SoVRMLInterpolator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLColorInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLColorInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLColorInterpolator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLColorInterpolator_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLColorInterpolator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLColorInterpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    keyValue = _swig_property(Coin_SWIG_Python.SoVRMLColorInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLColorInterpolator_keyValue_set)
    value_changed = _swig_property(Coin_SWIG_Python.SoVRMLColorInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLColorInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLColorInterpolator
    __del__ = lambda self : None;
SoVRMLColorInterpolator_swigregister = Coin_SWIG_Python.SoVRMLColorInterpolator_swigregister
SoVRMLColorInterpolator_swigregister(SoVRMLColorInterpolator)
SoVRMLColorInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLColorInterpolator_getClassTypeId
SoVRMLColorInterpolator_createInstance = Coin_SWIG_Python.SoVRMLColorInterpolator_createInstance
SoVRMLColorInterpolator_initClass = Coin_SWIG_Python.SoVRMLColorInterpolator_initClass

class SoVRMLCone(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLCone_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLCone_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLCone_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLCone(*args)
        try: self.this.append(this)
        except: self.this = this
    bottomRadius = _swig_property(Coin_SWIG_Python.SoVRMLCone_bottomRadius_get, Coin_SWIG_Python.SoVRMLCone_bottomRadius_set)
    height = _swig_property(Coin_SWIG_Python.SoVRMLCone_height_get, Coin_SWIG_Python.SoVRMLCone_height_set)
    side = _swig_property(Coin_SWIG_Python.SoVRMLCone_side_get, Coin_SWIG_Python.SoVRMLCone_side_set)
    bottom = _swig_property(Coin_SWIG_Python.SoVRMLCone_bottom_get, Coin_SWIG_Python.SoVRMLCone_bottom_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLCone_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLCone_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLCone_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCone
    __del__ = lambda self : None;
SoVRMLCone_swigregister = Coin_SWIG_Python.SoVRMLCone_swigregister
SoVRMLCone_swigregister(SoVRMLCone)
SoVRMLCone_getClassTypeId = Coin_SWIG_Python.SoVRMLCone_getClassTypeId
SoVRMLCone_initClass = Coin_SWIG_Python.SoVRMLCone_initClass

class SoVRMLCoordinate(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLCoordinate_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLCoordinate_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLCoordinate_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoVRMLCoordinate_point_get, Coin_SWIG_Python.SoVRMLCoordinate_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLCoordinate_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLCoordinate_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLCoordinate_getBoundingBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLCoordinate_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLCoordinate_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCoordinate
    __del__ = lambda self : None;
SoVRMLCoordinate_swigregister = Coin_SWIG_Python.SoVRMLCoordinate_swigregister
SoVRMLCoordinate_swigregister(SoVRMLCoordinate)
SoVRMLCoordinate_getClassTypeId = Coin_SWIG_Python.SoVRMLCoordinate_getClassTypeId
SoVRMLCoordinate_initClass = Coin_SWIG_Python.SoVRMLCoordinate_initClass

class SoVRMLCoordinateInterpolator(SoVRMLInterpolator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLCoordinateInterpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    keyValue = _swig_property(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLCoordinateInterpolator_keyValue_set)
    value_changed = _swig_property(Coin_SWIG_Python.SoVRMLCoordinateInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLCoordinateInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCoordinateInterpolator
    __del__ = lambda self : None;
SoVRMLCoordinateInterpolator_swigregister = Coin_SWIG_Python.SoVRMLCoordinateInterpolator_swigregister
SoVRMLCoordinateInterpolator_swigregister(SoVRMLCoordinateInterpolator)
SoVRMLCoordinateInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLCoordinateInterpolator_getClassTypeId
SoVRMLCoordinateInterpolator_createInstance = Coin_SWIG_Python.SoVRMLCoordinateInterpolator_createInstance
SoVRMLCoordinateInterpolator_initClass = Coin_SWIG_Python.SoVRMLCoordinateInterpolator_initClass

class SoVRMLCylinder(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLCylinder_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLCylinder_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLCylinder_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    radius = _swig_property(Coin_SWIG_Python.SoVRMLCylinder_radius_get, Coin_SWIG_Python.SoVRMLCylinder_radius_set)
    height = _swig_property(Coin_SWIG_Python.SoVRMLCylinder_height_get, Coin_SWIG_Python.SoVRMLCylinder_height_set)
    side = _swig_property(Coin_SWIG_Python.SoVRMLCylinder_side_get, Coin_SWIG_Python.SoVRMLCylinder_side_set)
    top = _swig_property(Coin_SWIG_Python.SoVRMLCylinder_top_get, Coin_SWIG_Python.SoVRMLCylinder_top_set)
    bottom = _swig_property(Coin_SWIG_Python.SoVRMLCylinder_bottom_get, Coin_SWIG_Python.SoVRMLCylinder_bottom_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLCylinder_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLCylinder_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLCylinder_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCylinder
    __del__ = lambda self : None;
SoVRMLCylinder_swigregister = Coin_SWIG_Python.SoVRMLCylinder_swigregister
SoVRMLCylinder_swigregister(SoVRMLCylinder)
SoVRMLCylinder_getClassTypeId = Coin_SWIG_Python.SoVRMLCylinder_getClassTypeId
SoVRMLCylinder_initClass = Coin_SWIG_Python.SoVRMLCylinder_initClass

class SoVRMLSensor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLSensor_getTypeId(*args)
    isActive = _swig_property(Coin_SWIG_Python.SoVRMLSensor_isActive_get, Coin_SWIG_Python.SoVRMLSensor_isActive_set)
    enabled = _swig_property(Coin_SWIG_Python.SoVRMLSensor_enabled_get, Coin_SWIG_Python.SoVRMLSensor_enabled_set)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLSensor_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSensor
    __del__ = lambda self : None;
SoVRMLSensor_swigregister = Coin_SWIG_Python.SoVRMLSensor_swigregister
SoVRMLSensor_swigregister(SoVRMLSensor)
SoVRMLSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLSensor_getClassTypeId
SoVRMLSensor_initClass = Coin_SWIG_Python.SoVRMLSensor_initClass

class SoVRMLDragSensor(SoVRMLSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLDragSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLDragSensor_getTypeId(*args)
    trackPoint_changed = _swig_property(Coin_SWIG_Python.SoVRMLDragSensor_trackPoint_changed_get, Coin_SWIG_Python.SoVRMLDragSensor_trackPoint_changed_set)
    autoOffset = _swig_property(Coin_SWIG_Python.SoVRMLDragSensor_autoOffset_get, Coin_SWIG_Python.SoVRMLDragSensor_autoOffset_set)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLDragSensor_handleEvent(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLDragSensor_initClass)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLDragSensor
    __del__ = lambda self : None;
SoVRMLDragSensor_swigregister = Coin_SWIG_Python.SoVRMLDragSensor_swigregister
SoVRMLDragSensor_swigregister(SoVRMLDragSensor)
SoVRMLDragSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLDragSensor_getClassTypeId
SoVRMLDragSensor_initClass = Coin_SWIG_Python.SoVRMLDragSensor_initClass

class SoVRMLCylinderSensor(SoVRMLDragSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLCylinderSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLCylinderSensor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLCylinderSensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLCylinderSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    diskAngle = _swig_property(Coin_SWIG_Python.SoVRMLCylinderSensor_diskAngle_get, Coin_SWIG_Python.SoVRMLCylinderSensor_diskAngle_set)
    maxAngle = _swig_property(Coin_SWIG_Python.SoVRMLCylinderSensor_maxAngle_get, Coin_SWIG_Python.SoVRMLCylinderSensor_maxAngle_set)
    minAngle = _swig_property(Coin_SWIG_Python.SoVRMLCylinderSensor_minAngle_get, Coin_SWIG_Python.SoVRMLCylinderSensor_minAngle_set)
    offset = _swig_property(Coin_SWIG_Python.SoVRMLCylinderSensor_offset_get, Coin_SWIG_Python.SoVRMLCylinderSensor_offset_set)
    rotation_changed = _swig_property(Coin_SWIG_Python.SoVRMLCylinderSensor_rotation_changed_get, Coin_SWIG_Python.SoVRMLCylinderSensor_rotation_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLCylinderSensor
    __del__ = lambda self : None;
SoVRMLCylinderSensor_swigregister = Coin_SWIG_Python.SoVRMLCylinderSensor_swigregister
SoVRMLCylinderSensor_swigregister(SoVRMLCylinderSensor)
SoVRMLCylinderSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLCylinderSensor_getClassTypeId
SoVRMLCylinderSensor_initClass = Coin_SWIG_Python.SoVRMLCylinderSensor_initClass

class SoVRMLLight(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLLight_initClass)
    on = _swig_property(Coin_SWIG_Python.SoVRMLLight_on_get, Coin_SWIG_Python.SoVRMLLight_on_set)
    intensity = _swig_property(Coin_SWIG_Python.SoVRMLLight_intensity_get, Coin_SWIG_Python.SoVRMLLight_intensity_set)
    color = _swig_property(Coin_SWIG_Python.SoVRMLLight_color_get, Coin_SWIG_Python.SoVRMLLight_color_set)
    ambientIntensity = _swig_property(Coin_SWIG_Python.SoVRMLLight_ambientIntensity_get, Coin_SWIG_Python.SoVRMLLight_ambientIntensity_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLLight
    __del__ = lambda self : None;
SoVRMLLight_swigregister = Coin_SWIG_Python.SoVRMLLight_swigregister
SoVRMLLight_swigregister(SoVRMLLight)
SoVRMLLight_getClassTypeId = Coin_SWIG_Python.SoVRMLLight_getClassTypeId
SoVRMLLight_initClass = Coin_SWIG_Python.SoVRMLLight_initClass

class SoVRMLDirectionalLight(SoVRMLLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLDirectionalLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLDirectionalLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLDirectionalLight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLDirectionalLight(*args)
        try: self.this.append(this)
        except: self.this = this
    direction = _swig_property(Coin_SWIG_Python.SoVRMLDirectionalLight_direction_get, Coin_SWIG_Python.SoVRMLDirectionalLight_direction_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLDirectionalLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLDirectionalLight
    __del__ = lambda self : None;
SoVRMLDirectionalLight_swigregister = Coin_SWIG_Python.SoVRMLDirectionalLight_swigregister
SoVRMLDirectionalLight_swigregister(SoVRMLDirectionalLight)
SoVRMLDirectionalLight_getClassTypeId = Coin_SWIG_Python.SoVRMLDirectionalLight_getClassTypeId
SoVRMLDirectionalLight_initClass = Coin_SWIG_Python.SoVRMLDirectionalLight_initClass

class SoVRMLElevationGrid(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLElevationGrid_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLElevationGrid_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLElevationGrid_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLElevationGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    ccw = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_ccw_get, Coin_SWIG_Python.SoVRMLElevationGrid_ccw_set)
    solid = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_solid_get, Coin_SWIG_Python.SoVRMLElevationGrid_solid_set)
    creaseAngle = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_creaseAngle_get, Coin_SWIG_Python.SoVRMLElevationGrid_creaseAngle_set)
    zDimension = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_zDimension_get, Coin_SWIG_Python.SoVRMLElevationGrid_zDimension_set)
    xDimension = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_xDimension_get, Coin_SWIG_Python.SoVRMLElevationGrid_xDimension_set)
    zSpacing = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_zSpacing_get, Coin_SWIG_Python.SoVRMLElevationGrid_zSpacing_set)
    xSpacing = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_xSpacing_get, Coin_SWIG_Python.SoVRMLElevationGrid_xSpacing_set)
    height = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_height_get, Coin_SWIG_Python.SoVRMLElevationGrid_height_set)
    texCoord = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_texCoord_get, Coin_SWIG_Python.SoVRMLElevationGrid_texCoord_set)
    normal = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_normal_get, Coin_SWIG_Python.SoVRMLElevationGrid_normal_set)
    color = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_color_get, Coin_SWIG_Python.SoVRMLElevationGrid_color_set)
    colorPerVertex = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_colorPerVertex_get, Coin_SWIG_Python.SoVRMLElevationGrid_colorPerVertex_set)
    normalPerVertex = _swig_property(Coin_SWIG_Python.SoVRMLElevationGrid_normalPerVertex_get, Coin_SWIG_Python.SoVRMLElevationGrid_normalPerVertex_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLElevationGrid_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLElevationGrid_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLElevationGrid_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLElevationGrid
    __del__ = lambda self : None;
SoVRMLElevationGrid_swigregister = Coin_SWIG_Python.SoVRMLElevationGrid_swigregister
SoVRMLElevationGrid_swigregister(SoVRMLElevationGrid)
SoVRMLElevationGrid_getClassTypeId = Coin_SWIG_Python.SoVRMLElevationGrid_getClassTypeId
SoVRMLElevationGrid_initClass = Coin_SWIG_Python.SoVRMLElevationGrid_initClass

class SoVRMLExtrusion(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLExtrusion_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLExtrusion_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLExtrusion_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLExtrusion(*args)
        try: self.this.append(this)
        except: self.this = this
    beginCap = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_beginCap_get, Coin_SWIG_Python.SoVRMLExtrusion_beginCap_set)
    ccw = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_ccw_get, Coin_SWIG_Python.SoVRMLExtrusion_ccw_set)
    convex = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_convex_get, Coin_SWIG_Python.SoVRMLExtrusion_convex_set)
    creaseAngle = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_creaseAngle_get, Coin_SWIG_Python.SoVRMLExtrusion_creaseAngle_set)
    crossSection = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_crossSection_get, Coin_SWIG_Python.SoVRMLExtrusion_crossSection_set)
    endCap = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_endCap_get, Coin_SWIG_Python.SoVRMLExtrusion_endCap_set)
    orientation = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_orientation_get, Coin_SWIG_Python.SoVRMLExtrusion_orientation_set)
    scale = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_scale_get, Coin_SWIG_Python.SoVRMLExtrusion_scale_set)
    solid = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_solid_get, Coin_SWIG_Python.SoVRMLExtrusion_solid_set)
    spine = _swig_property(Coin_SWIG_Python.SoVRMLExtrusion_spine_get, Coin_SWIG_Python.SoVRMLExtrusion_spine_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLExtrusion_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLExtrusion_getPrimitiveCount(*args)
    def computeBBox(*args): return Coin_SWIG_Python.SoVRMLExtrusion_computeBBox(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLExtrusion
    __del__ = lambda self : None;
SoVRMLExtrusion_swigregister = Coin_SWIG_Python.SoVRMLExtrusion_swigregister
SoVRMLExtrusion_swigregister(SoVRMLExtrusion)
SoVRMLExtrusion_getClassTypeId = Coin_SWIG_Python.SoVRMLExtrusion_getClassTypeId
SoVRMLExtrusion_initClass = Coin_SWIG_Python.SoVRMLExtrusion_initClass

class SoVRMLFog(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLFog_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLFog_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLFog_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLFog(*args)
        try: self.this.append(this)
        except: self.this = this
    fogType = _swig_property(Coin_SWIG_Python.SoVRMLFog_fogType_get, Coin_SWIG_Python.SoVRMLFog_fogType_set)
    visibilityRange = _swig_property(Coin_SWIG_Python.SoVRMLFog_visibilityRange_get, Coin_SWIG_Python.SoVRMLFog_visibilityRange_set)
    color = _swig_property(Coin_SWIG_Python.SoVRMLFog_color_get, Coin_SWIG_Python.SoVRMLFog_color_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLFog_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLFog
    __del__ = lambda self : None;
SoVRMLFog_swigregister = Coin_SWIG_Python.SoVRMLFog_swigregister
SoVRMLFog_swigregister(SoVRMLFog)
SoVRMLFog_getClassTypeId = Coin_SWIG_Python.SoVRMLFog_getClassTypeId
SoVRMLFog_initClass = Coin_SWIG_Python.SoVRMLFog_initClass

class SoVRMLFontStyle(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLFontStyle_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLFontStyle_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLFontStyle_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLFontStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    SERIF = Coin_SWIG_Python.SoVRMLFontStyle_SERIF
    SANS = Coin_SWIG_Python.SoVRMLFontStyle_SANS
    TYPEWRITER = Coin_SWIG_Python.SoVRMLFontStyle_TYPEWRITER
    PLAIN = Coin_SWIG_Python.SoVRMLFontStyle_PLAIN
    BOLD = Coin_SWIG_Python.SoVRMLFontStyle_BOLD
    ITALIC = Coin_SWIG_Python.SoVRMLFontStyle_ITALIC
    BOLDITALIC = Coin_SWIG_Python.SoVRMLFontStyle_BOLDITALIC
    size = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_size_get, Coin_SWIG_Python.SoVRMLFontStyle_size_set)
    family = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_family_get, Coin_SWIG_Python.SoVRMLFontStyle_family_set)
    style = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_style_get, Coin_SWIG_Python.SoVRMLFontStyle_style_set)
    horizontal = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_horizontal_get, Coin_SWIG_Python.SoVRMLFontStyle_horizontal_set)
    leftToRight = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_leftToRight_get, Coin_SWIG_Python.SoVRMLFontStyle_leftToRight_set)
    topToBottom = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_topToBottom_get, Coin_SWIG_Python.SoVRMLFontStyle_topToBottom_set)
    language = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_language_get, Coin_SWIG_Python.SoVRMLFontStyle_language_set)
    justify = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_justify_get, Coin_SWIG_Python.SoVRMLFontStyle_justify_set)
    spacing = _swig_property(Coin_SWIG_Python.SoVRMLFontStyle_spacing_get, Coin_SWIG_Python.SoVRMLFontStyle_spacing_set)
    def getFontName(*args): return Coin_SWIG_Python.SoVRMLFontStyle_getFontName(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLFontStyle_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLFontStyle_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLFontStyle_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLFontStyle_getBoundingBox(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLFontStyle_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLFontStyle_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLFontStyle
    __del__ = lambda self : None;
SoVRMLFontStyle_swigregister = Coin_SWIG_Python.SoVRMLFontStyle_swigregister
SoVRMLFontStyle_swigregister(SoVRMLFontStyle)
SoVRMLFontStyle_getClassTypeId = Coin_SWIG_Python.SoVRMLFontStyle_getClassTypeId
SoVRMLFontStyle_initClass = Coin_SWIG_Python.SoVRMLFontStyle_initClass

so_vrml_init = Coin_SWIG_Python.so_vrml_init
class SoVRMLTexture(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLTexture_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLTexture_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLTexture_initClass)
    repeatS = _swig_property(Coin_SWIG_Python.SoVRMLTexture_repeatS_get, Coin_SWIG_Python.SoVRMLTexture_repeatS_set)
    repeatT = _swig_property(Coin_SWIG_Python.SoVRMLTexture_repeatT_get, Coin_SWIG_Python.SoVRMLTexture_repeatT_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLTexture_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTexture
    __del__ = lambda self : None;
SoVRMLTexture_swigregister = Coin_SWIG_Python.SoVRMLTexture_swigregister
SoVRMLTexture_swigregister(SoVRMLTexture)
SoVRMLTexture_getClassTypeId = Coin_SWIG_Python.SoVRMLTexture_getClassTypeId
SoVRMLTexture_initClass = Coin_SWIG_Python.SoVRMLTexture_initClass

class SoVRMLImageTexture(SoVRMLTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLImageTexture_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLImageTexture_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLImageTexture_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLImageTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    url = _swig_property(Coin_SWIG_Python.SoVRMLImageTexture_url_get, Coin_SWIG_Python.SoVRMLImageTexture_url_set)
    setDelayFetchURL = staticmethod(Coin_SWIG_Python.SoVRMLImageTexture_setDelayFetchURL)
    setPrequalifyFileCallBack = staticmethod(Coin_SWIG_Python.SoVRMLImageTexture_setPrequalifyFileCallBack)
    def allowPrequalifyFile(*args): return Coin_SWIG_Python.SoVRMLImageTexture_allowPrequalifyFile(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLImageTexture_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLImageTexture_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLImageTexture_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLImageTexture_rayPick(*args)
    def setImage(*args): return Coin_SWIG_Python.SoVRMLImageTexture_setImage(*args)
    def getImage(*args): return Coin_SWIG_Python.SoVRMLImageTexture_getImage(*args)
    setImageDataMaxAge = staticmethod(Coin_SWIG_Python.SoVRMLImageTexture_setImageDataMaxAge)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLImageTexture
    __del__ = lambda self : None;
SoVRMLImageTexture_swigregister = Coin_SWIG_Python.SoVRMLImageTexture_swigregister
SoVRMLImageTexture_swigregister(SoVRMLImageTexture)
SoVRMLImageTexture_getClassTypeId = Coin_SWIG_Python.SoVRMLImageTexture_getClassTypeId
SoVRMLImageTexture_initClass = Coin_SWIG_Python.SoVRMLImageTexture_initClass
SoVRMLImageTexture_setDelayFetchURL = Coin_SWIG_Python.SoVRMLImageTexture_setDelayFetchURL
SoVRMLImageTexture_setPrequalifyFileCallBack = Coin_SWIG_Python.SoVRMLImageTexture_setPrequalifyFileCallBack
SoVRMLImageTexture_setImageDataMaxAge = Coin_SWIG_Python.SoVRMLImageTexture_setImageDataMaxAge

class SoVRMLVertexShape(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLVertexShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLVertexShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLVertexShape_initClass)
    coord = _swig_property(Coin_SWIG_Python.SoVRMLVertexShape_coord_get, Coin_SWIG_Python.SoVRMLVertexShape_coord_set)
    texCoord = _swig_property(Coin_SWIG_Python.SoVRMLVertexShape_texCoord_get, Coin_SWIG_Python.SoVRMLVertexShape_texCoord_set)
    normal = _swig_property(Coin_SWIG_Python.SoVRMLVertexShape_normal_get, Coin_SWIG_Python.SoVRMLVertexShape_normal_set)
    color = _swig_property(Coin_SWIG_Python.SoVRMLVertexShape_color_get, Coin_SWIG_Python.SoVRMLVertexShape_color_set)
    colorPerVertex = _swig_property(Coin_SWIG_Python.SoVRMLVertexShape_colorPerVertex_get, Coin_SWIG_Python.SoVRMLVertexShape_colorPerVertex_set)
    normalPerVertex = _swig_property(Coin_SWIG_Python.SoVRMLVertexShape_normalPerVertex_get, Coin_SWIG_Python.SoVRMLVertexShape_normalPerVertex_set)
    OVERALL = Coin_SWIG_Python.SoVRMLVertexShape_OVERALL
    PER_PART = Coin_SWIG_Python.SoVRMLVertexShape_PER_PART
    PER_PART_INDEXED = Coin_SWIG_Python.SoVRMLVertexShape_PER_PART_INDEXED
    PER_FACE = Coin_SWIG_Python.SoVRMLVertexShape_PER_FACE
    PER_FACE_INDEXED = Coin_SWIG_Python.SoVRMLVertexShape_PER_FACE_INDEXED
    PER_VERTEX = Coin_SWIG_Python.SoVRMLVertexShape_PER_VERTEX
    PER_VERTEX_INDEXED = Coin_SWIG_Python.SoVRMLVertexShape_PER_VERTEX_INDEXED
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoVRMLVertexShape_generateDefaultNormals(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLVertexShape_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLVertexShape_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLVertexShape_getBoundingBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLVertexShape_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLVertexShape_pick(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLVertexShape_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVertexShape
    __del__ = lambda self : None;
SoVRMLVertexShape_swigregister = Coin_SWIG_Python.SoVRMLVertexShape_swigregister
SoVRMLVertexShape_swigregister(SoVRMLVertexShape)
SoVRMLVertexShape_getClassTypeId = Coin_SWIG_Python.SoVRMLVertexShape_getClassTypeId
SoVRMLVertexShape_initClass = Coin_SWIG_Python.SoVRMLVertexShape_initClass

class SoVRMLIndexedShape(SoVRMLVertexShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLIndexedShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLIndexedShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLIndexedShape_initClass)
    coordIndex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedShape_coordIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_coordIndex_set)
    colorIndex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedShape_colorIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_colorIndex_set)
    normalIndex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedShape_normalIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_normalIndex_set)
    texCoordIndex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedShape_texCoordIndex_get, Coin_SWIG_Python.SoVRMLIndexedShape_texCoordIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedShape
    __del__ = lambda self : None;
SoVRMLIndexedShape_swigregister = Coin_SWIG_Python.SoVRMLIndexedShape_swigregister
SoVRMLIndexedShape_swigregister(SoVRMLIndexedShape)
SoVRMLIndexedShape_getClassTypeId = Coin_SWIG_Python.SoVRMLIndexedShape_getClassTypeId
SoVRMLIndexedShape_initClass = Coin_SWIG_Python.SoVRMLIndexedShape_initClass

class SoVRMLIndexedFaceSet(SoVRMLIndexedShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLIndexedFaceSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLIndexedFaceSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLIndexedFaceSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLIndexedFaceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    ccw = _swig_property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_ccw_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_ccw_set)
    solid = _swig_property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_solid_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_solid_set)
    convex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_convex_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_convex_set)
    creaseAngle = _swig_property(Coin_SWIG_Python.SoVRMLIndexedFaceSet_creaseAngle_get, Coin_SWIG_Python.SoVRMLIndexedFaceSet_creaseAngle_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLIndexedFaceSet_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLIndexedFaceSet_getPrimitiveCount(*args)
    def generateDefaultNormals(*args): return Coin_SWIG_Python.SoVRMLIndexedFaceSet_generateDefaultNormals(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedFaceSet
    __del__ = lambda self : None;
SoVRMLIndexedFaceSet_swigregister = Coin_SWIG_Python.SoVRMLIndexedFaceSet_swigregister
SoVRMLIndexedFaceSet_swigregister(SoVRMLIndexedFaceSet)
SoVRMLIndexedFaceSet_getClassTypeId = Coin_SWIG_Python.SoVRMLIndexedFaceSet_getClassTypeId
SoVRMLIndexedFaceSet_initClass = Coin_SWIG_Python.SoVRMLIndexedFaceSet_initClass

class SoVRMLVertexLine(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLVertexLine_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLVertexLine_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLVertexLine_initClass)
    coord = _swig_property(Coin_SWIG_Python.SoVRMLVertexLine_coord_get, Coin_SWIG_Python.SoVRMLVertexLine_coord_set)
    color = _swig_property(Coin_SWIG_Python.SoVRMLVertexLine_color_get, Coin_SWIG_Python.SoVRMLVertexLine_color_set)
    colorPerVertex = _swig_property(Coin_SWIG_Python.SoVRMLVertexLine_colorPerVertex_get, Coin_SWIG_Python.SoVRMLVertexLine_colorPerVertex_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLVertexLine_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLVertexLine_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLVertexLine_getBoundingBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLVertexLine_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLVertexLine_pick(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLVertexLine_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVertexLine
    __del__ = lambda self : None;
SoVRMLVertexLine_swigregister = Coin_SWIG_Python.SoVRMLVertexLine_swigregister
SoVRMLVertexLine_swigregister(SoVRMLVertexLine)
SoVRMLVertexLine_getClassTypeId = Coin_SWIG_Python.SoVRMLVertexLine_getClassTypeId
SoVRMLVertexLine_initClass = Coin_SWIG_Python.SoVRMLVertexLine_initClass

class SoVRMLIndexedLine(SoVRMLVertexLine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLIndexedLine_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLIndexedLine_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLIndexedLine_initClass)
    coordIndex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedLine_coordIndex_get, Coin_SWIG_Python.SoVRMLIndexedLine_coordIndex_set)
    colorIndex = _swig_property(Coin_SWIG_Python.SoVRMLIndexedLine_colorIndex_get, Coin_SWIG_Python.SoVRMLIndexedLine_colorIndex_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedLine
    __del__ = lambda self : None;
SoVRMLIndexedLine_swigregister = Coin_SWIG_Python.SoVRMLIndexedLine_swigregister
SoVRMLIndexedLine_swigregister(SoVRMLIndexedLine)
SoVRMLIndexedLine_getClassTypeId = Coin_SWIG_Python.SoVRMLIndexedLine_getClassTypeId
SoVRMLIndexedLine_initClass = Coin_SWIG_Python.SoVRMLIndexedLine_initClass

class SoVRMLIndexedLineSet(SoVRMLIndexedLine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLIndexedLineSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLIndexedLineSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLIndexedLineSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLIndexedLineSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLIndexedLineSet_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLIndexedLineSet_getPrimitiveCount(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLIndexedLineSet_getBoundingBox(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLIndexedLineSet
    __del__ = lambda self : None;
SoVRMLIndexedLineSet_swigregister = Coin_SWIG_Python.SoVRMLIndexedLineSet_swigregister
SoVRMLIndexedLineSet_swigregister(SoVRMLIndexedLineSet)
SoVRMLIndexedLineSet_getClassTypeId = Coin_SWIG_Python.SoVRMLIndexedLineSet_getClassTypeId
SoVRMLIndexedLineSet_initClass = Coin_SWIG_Python.SoVRMLIndexedLineSet_initClass

class SoVRMLInline(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLInline_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLInline_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLInline_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLInline(*args)
        try: self.this.append(this)
        except: self.this = this
    NEVER = Coin_SWIG_Python.SoVRMLInline_NEVER
    UNTIL_LOADED = Coin_SWIG_Python.SoVRMLInline_UNTIL_LOADED
    ALWAYS = Coin_SWIG_Python.SoVRMLInline_ALWAYS
    bboxCenter = _swig_property(Coin_SWIG_Python.SoVRMLInline_bboxCenter_get, Coin_SWIG_Python.SoVRMLInline_bboxCenter_set)
    bboxSize = _swig_property(Coin_SWIG_Python.SoVRMLInline_bboxSize_get, Coin_SWIG_Python.SoVRMLInline_bboxSize_set)
    url = _swig_property(Coin_SWIG_Python.SoVRMLInline_url_get, Coin_SWIG_Python.SoVRMLInline_url_set)
    def setFullURLName(*args): return Coin_SWIG_Python.SoVRMLInline_setFullURLName(*args)
    def getFullURLName(*args): return Coin_SWIG_Python.SoVRMLInline_getFullURLName(*args)
    def copyChildren(*args): return Coin_SWIG_Python.SoVRMLInline_copyChildren(*args)
    def requestURLData(*args): return Coin_SWIG_Python.SoVRMLInline_requestURLData(*args)
    def isURLDataRequested(*args): return Coin_SWIG_Python.SoVRMLInline_isURLDataRequested(*args)
    def isURLDataHere(*args): return Coin_SWIG_Python.SoVRMLInline_isURLDataHere(*args)
    def cancelURLDataRequest(*args): return Coin_SWIG_Python.SoVRMLInline_cancelURLDataRequest(*args)
    def setChildData(*args): return Coin_SWIG_Python.SoVRMLInline_setChildData(*args)
    def getChildData(*args): return Coin_SWIG_Python.SoVRMLInline_getChildData(*args)
    setFetchURLCallBack = staticmethod(Coin_SWIG_Python.SoVRMLInline_setFetchURLCallBack)
    setBoundingBoxVisibility = staticmethod(Coin_SWIG_Python.SoVRMLInline_setBoundingBoxVisibility)
    getBoundingBoxVisibility = staticmethod(Coin_SWIG_Python.SoVRMLInline_getBoundingBoxVisibility)
    setBoundingBoxColor = staticmethod(Coin_SWIG_Python.SoVRMLInline_setBoundingBoxColor)
    getBoundingBoxColor = staticmethod(Coin_SWIG_Python.SoVRMLInline_getBoundingBoxColor)
    setReadAsSoFile = staticmethod(Coin_SWIG_Python.SoVRMLInline_setReadAsSoFile)
    getReadAsSoFile = staticmethod(Coin_SWIG_Python.SoVRMLInline_getReadAsSoFile)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLInline_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLInline_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLInline_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLInline_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoVRMLInline_getMatrix(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLInline_handleEvent(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLInline_search(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLInline_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLInline_getPrimitiveCount(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLInline_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLInline
    __del__ = lambda self : None;
SoVRMLInline_swigregister = Coin_SWIG_Python.SoVRMLInline_swigregister
SoVRMLInline_swigregister(SoVRMLInline)
SoVRMLInline_getClassTypeId = Coin_SWIG_Python.SoVRMLInline_getClassTypeId
SoVRMLInline_initClass = Coin_SWIG_Python.SoVRMLInline_initClass
SoVRMLInline_setFetchURLCallBack = Coin_SWIG_Python.SoVRMLInline_setFetchURLCallBack
SoVRMLInline_setBoundingBoxVisibility = Coin_SWIG_Python.SoVRMLInline_setBoundingBoxVisibility
SoVRMLInline_getBoundingBoxVisibility = Coin_SWIG_Python.SoVRMLInline_getBoundingBoxVisibility
SoVRMLInline_setBoundingBoxColor = Coin_SWIG_Python.SoVRMLInline_setBoundingBoxColor
SoVRMLInline_getBoundingBoxColor = Coin_SWIG_Python.SoVRMLInline_getBoundingBoxColor
SoVRMLInline_setReadAsSoFile = Coin_SWIG_Python.SoVRMLInline_setReadAsSoFile
SoVRMLInline_getReadAsSoFile = Coin_SWIG_Python.SoVRMLInline_getReadAsSoFile

class SoVRMLLOD(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLLOD_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLLOD_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLLOD_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLLOD(*args)
        try: self.this.append(this)
        except: self.this = this
    range = _swig_property(Coin_SWIG_Python.SoVRMLLOD_range_get, Coin_SWIG_Python.SoVRMLLOD_range_set)
    center = _swig_property(Coin_SWIG_Python.SoVRMLLOD_center_get, Coin_SWIG_Python.SoVRMLLOD_center_set)
    level = _swig_property(Coin_SWIG_Python.SoVRMLLOD_level_get, Coin_SWIG_Python.SoVRMLLOD_level_set)
    def affectsState(*args): return Coin_SWIG_Python.SoVRMLLOD_affectsState(*args)
    def addLevel(*args): return Coin_SWIG_Python.SoVRMLLOD_addLevel(*args)
    def insertLevel(*args): return Coin_SWIG_Python.SoVRMLLOD_insertLevel(*args)
    def getLevel(*args): return Coin_SWIG_Python.SoVRMLLOD_getLevel(*args)
    def findLevel(*args): return Coin_SWIG_Python.SoVRMLLOD_findLevel(*args)
    def getNumLevels(*args): return Coin_SWIG_Python.SoVRMLLOD_getNumLevels(*args)
    def removeLevel(*args): return Coin_SWIG_Python.SoVRMLLOD_removeLevel(*args)
    def removeAllLevels(*args): return Coin_SWIG_Python.SoVRMLLOD_removeAllLevels(*args)
    def replaceLevel(*args): return Coin_SWIG_Python.SoVRMLLOD_replaceLevel(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLLOD_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLLOD_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLLOD_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLLOD_rayPick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLLOD_getBoundingBox(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLLOD_search(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLLOD_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLLOD_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoVRMLLOD_audioRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoVRMLLOD_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoVRMLLOD_GLRenderInPath(*args)
    def GLRenderOffPath(*args): return Coin_SWIG_Python.SoVRMLLOD_GLRenderOffPath(*args)
    def addChild(*args): return Coin_SWIG_Python.SoVRMLLOD_addChild(*args)
    def insertChild(*args): return Coin_SWIG_Python.SoVRMLLOD_insertChild(*args)
    def getChild(*args): return Coin_SWIG_Python.SoVRMLLOD_getChild(*args)
    def findChild(*args): return Coin_SWIG_Python.SoVRMLLOD_findChild(*args)
    def getNumChildren(*args): return Coin_SWIG_Python.SoVRMLLOD_getNumChildren(*args)
    def removeChild(*args): return Coin_SWIG_Python.SoVRMLLOD_removeChild(*args)
    def removeAllChildren(*args): return Coin_SWIG_Python.SoVRMLLOD_removeAllChildren(*args)
    def replaceChild(*args): return Coin_SWIG_Python.SoVRMLLOD_replaceChild(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLLOD_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLLOD
    __del__ = lambda self : None;
SoVRMLLOD_swigregister = Coin_SWIG_Python.SoVRMLLOD_swigregister
SoVRMLLOD_swigregister(SoVRMLLOD)
SoVRMLLOD_getClassTypeId = Coin_SWIG_Python.SoVRMLLOD_getClassTypeId
SoVRMLLOD_initClass = Coin_SWIG_Python.SoVRMLLOD_initClass

class SoVRMLMaterial(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLMaterial_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLMaterial_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLMaterial_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    diffuseColor = _swig_property(Coin_SWIG_Python.SoVRMLMaterial_diffuseColor_get, Coin_SWIG_Python.SoVRMLMaterial_diffuseColor_set)
    ambientIntensity = _swig_property(Coin_SWIG_Python.SoVRMLMaterial_ambientIntensity_get, Coin_SWIG_Python.SoVRMLMaterial_ambientIntensity_set)
    specularColor = _swig_property(Coin_SWIG_Python.SoVRMLMaterial_specularColor_get, Coin_SWIG_Python.SoVRMLMaterial_specularColor_set)
    emissiveColor = _swig_property(Coin_SWIG_Python.SoVRMLMaterial_emissiveColor_get, Coin_SWIG_Python.SoVRMLMaterial_emissiveColor_set)
    shininess = _swig_property(Coin_SWIG_Python.SoVRMLMaterial_shininess_get, Coin_SWIG_Python.SoVRMLMaterial_shininess_set)
    transparency = _swig_property(Coin_SWIG_Python.SoVRMLMaterial_transparency_get, Coin_SWIG_Python.SoVRMLMaterial_transparency_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLMaterial_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLMaterial_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLMaterial_callback(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLMaterial
    __del__ = lambda self : None;
SoVRMLMaterial_swigregister = Coin_SWIG_Python.SoVRMLMaterial_swigregister
SoVRMLMaterial_swigregister(SoVRMLMaterial)
SoVRMLMaterial_getClassTypeId = Coin_SWIG_Python.SoVRMLMaterial_getClassTypeId
SoVRMLMaterial_initClass = Coin_SWIG_Python.SoVRMLMaterial_initClass

class SoVRMLMovieTexture(SoVRMLTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLMovieTexture_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLMovieTexture_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLMovieTexture_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLMovieTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    loop = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_loop_get, Coin_SWIG_Python.SoVRMLMovieTexture_loop_set)
    speed = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_speed_get, Coin_SWIG_Python.SoVRMLMovieTexture_speed_set)
    startTime = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_startTime_get, Coin_SWIG_Python.SoVRMLMovieTexture_startTime_set)
    stopTime = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_stopTime_get, Coin_SWIG_Python.SoVRMLMovieTexture_stopTime_set)
    url = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_url_get, Coin_SWIG_Python.SoVRMLMovieTexture_url_set)
    duration_changed = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_duration_changed_get, Coin_SWIG_Python.SoVRMLMovieTexture_duration_changed_set)
    isActive = _swig_property(Coin_SWIG_Python.SoVRMLMovieTexture_isActive_get, Coin_SWIG_Python.SoVRMLMovieTexture_isActive_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLMovieTexture_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLMovieTexture
    __del__ = lambda self : None;
SoVRMLMovieTexture_swigregister = Coin_SWIG_Python.SoVRMLMovieTexture_swigregister
SoVRMLMovieTexture_swigregister(SoVRMLMovieTexture)
SoVRMLMovieTexture_getClassTypeId = Coin_SWIG_Python.SoVRMLMovieTexture_getClassTypeId
SoVRMLMovieTexture_initClass = Coin_SWIG_Python.SoVRMLMovieTexture_initClass

class SoVRMLNavigationInfo(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLNavigationInfo_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLNavigationInfo_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLNavigationInfo_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLNavigationInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    type = _swig_property(Coin_SWIG_Python.SoVRMLNavigationInfo_type_get, Coin_SWIG_Python.SoVRMLNavigationInfo_type_set)
    speed = _swig_property(Coin_SWIG_Python.SoVRMLNavigationInfo_speed_get, Coin_SWIG_Python.SoVRMLNavigationInfo_speed_set)
    avatarSize = _swig_property(Coin_SWIG_Python.SoVRMLNavigationInfo_avatarSize_get, Coin_SWIG_Python.SoVRMLNavigationInfo_avatarSize_set)
    visibilityLimit = _swig_property(Coin_SWIG_Python.SoVRMLNavigationInfo_visibilityLimit_get, Coin_SWIG_Python.SoVRMLNavigationInfo_visibilityLimit_set)
    headlight = _swig_property(Coin_SWIG_Python.SoVRMLNavigationInfo_headlight_get, Coin_SWIG_Python.SoVRMLNavigationInfo_headlight_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLNavigationInfo_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLNavigationInfo
    __del__ = lambda self : None;
SoVRMLNavigationInfo_swigregister = Coin_SWIG_Python.SoVRMLNavigationInfo_swigregister
SoVRMLNavigationInfo_swigregister(SoVRMLNavigationInfo)
SoVRMLNavigationInfo_getClassTypeId = Coin_SWIG_Python.SoVRMLNavigationInfo_getClassTypeId
SoVRMLNavigationInfo_initClass = Coin_SWIG_Python.SoVRMLNavigationInfo_initClass

class SoVRMLNormal(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLNormal_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLNormal_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLNormal_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLNormal(*args)
        try: self.this.append(this)
        except: self.this = this
    vector = _swig_property(Coin_SWIG_Python.SoVRMLNormal_vector_get, Coin_SWIG_Python.SoVRMLNormal_vector_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLNormal_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLNormal_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLNormal_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLNormal_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLNormal_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLNormal
    __del__ = lambda self : None;
SoVRMLNormal_swigregister = Coin_SWIG_Python.SoVRMLNormal_swigregister
SoVRMLNormal_swigregister(SoVRMLNormal)
SoVRMLNormal_getClassTypeId = Coin_SWIG_Python.SoVRMLNormal_getClassTypeId
SoVRMLNormal_initClass = Coin_SWIG_Python.SoVRMLNormal_initClass

class SoVRMLNormalInterpolator(SoVRMLInterpolator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLNormalInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLNormalInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLNormalInterpolator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLNormalInterpolator_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLNormalInterpolator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLNormalInterpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    keyValue = _swig_property(Coin_SWIG_Python.SoVRMLNormalInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLNormalInterpolator_keyValue_set)
    value_changed = _swig_property(Coin_SWIG_Python.SoVRMLNormalInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLNormalInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLNormalInterpolator
    __del__ = lambda self : None;
SoVRMLNormalInterpolator_swigregister = Coin_SWIG_Python.SoVRMLNormalInterpolator_swigregister
SoVRMLNormalInterpolator_swigregister(SoVRMLNormalInterpolator)
SoVRMLNormalInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLNormalInterpolator_getClassTypeId
SoVRMLNormalInterpolator_createInstance = Coin_SWIG_Python.SoVRMLNormalInterpolator_createInstance
SoVRMLNormalInterpolator_initClass = Coin_SWIG_Python.SoVRMLNormalInterpolator_initClass

class SoVRMLOrientationInterpolator(SoVRMLInterpolator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLOrientationInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLOrientationInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLOrientationInterpolator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLOrientationInterpolator_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLOrientationInterpolator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLOrientationInterpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    keyValue = _swig_property(Coin_SWIG_Python.SoVRMLOrientationInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLOrientationInterpolator_keyValue_set)
    value_changed = _swig_property(Coin_SWIG_Python.SoVRMLOrientationInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLOrientationInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLOrientationInterpolator
    __del__ = lambda self : None;
SoVRMLOrientationInterpolator_swigregister = Coin_SWIG_Python.SoVRMLOrientationInterpolator_swigregister
SoVRMLOrientationInterpolator_swigregister(SoVRMLOrientationInterpolator)
SoVRMLOrientationInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLOrientationInterpolator_getClassTypeId
SoVRMLOrientationInterpolator_createInstance = Coin_SWIG_Python.SoVRMLOrientationInterpolator_createInstance
SoVRMLOrientationInterpolator_initClass = Coin_SWIG_Python.SoVRMLOrientationInterpolator_initClass

class SoVRMLPixelTexture(SoVRMLTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLPixelTexture_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLPixelTexture_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLPixelTexture_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLPixelTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    image = _swig_property(Coin_SWIG_Python.SoVRMLPixelTexture_image_get, Coin_SWIG_Python.SoVRMLPixelTexture_image_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLPixelTexture_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLPixelTexture_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLPixelTexture_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLPixelTexture_rayPick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPixelTexture
    __del__ = lambda self : None;
SoVRMLPixelTexture_swigregister = Coin_SWIG_Python.SoVRMLPixelTexture_swigregister
SoVRMLPixelTexture_swigregister(SoVRMLPixelTexture)
SoVRMLPixelTexture_getClassTypeId = Coin_SWIG_Python.SoVRMLPixelTexture_getClassTypeId
SoVRMLPixelTexture_initClass = Coin_SWIG_Python.SoVRMLPixelTexture_initClass

class SoVRMLPlaneSensor(SoVRMLDragSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLPlaneSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLPlaneSensor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLPlaneSensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLPlaneSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    minPosition = _swig_property(Coin_SWIG_Python.SoVRMLPlaneSensor_minPosition_get, Coin_SWIG_Python.SoVRMLPlaneSensor_minPosition_set)
    maxPosition = _swig_property(Coin_SWIG_Python.SoVRMLPlaneSensor_maxPosition_get, Coin_SWIG_Python.SoVRMLPlaneSensor_maxPosition_set)
    offset = _swig_property(Coin_SWIG_Python.SoVRMLPlaneSensor_offset_get, Coin_SWIG_Python.SoVRMLPlaneSensor_offset_set)
    translation_changed = _swig_property(Coin_SWIG_Python.SoVRMLPlaneSensor_translation_changed_get, Coin_SWIG_Python.SoVRMLPlaneSensor_translation_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPlaneSensor
    __del__ = lambda self : None;
SoVRMLPlaneSensor_swigregister = Coin_SWIG_Python.SoVRMLPlaneSensor_swigregister
SoVRMLPlaneSensor_swigregister(SoVRMLPlaneSensor)
SoVRMLPlaneSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLPlaneSensor_getClassTypeId
SoVRMLPlaneSensor_initClass = Coin_SWIG_Python.SoVRMLPlaneSensor_initClass

class SoVRMLPointLight(SoVRMLLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLPointLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLPointLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLPointLight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLPointLight(*args)
        try: self.this.append(this)
        except: self.this = this
    location = _swig_property(Coin_SWIG_Python.SoVRMLPointLight_location_get, Coin_SWIG_Python.SoVRMLPointLight_location_set)
    radius = _swig_property(Coin_SWIG_Python.SoVRMLPointLight_radius_get, Coin_SWIG_Python.SoVRMLPointLight_radius_set)
    attenuation = _swig_property(Coin_SWIG_Python.SoVRMLPointLight_attenuation_get, Coin_SWIG_Python.SoVRMLPointLight_attenuation_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLPointLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPointLight
    __del__ = lambda self : None;
SoVRMLPointLight_swigregister = Coin_SWIG_Python.SoVRMLPointLight_swigregister
SoVRMLPointLight_swigregister(SoVRMLPointLight)
SoVRMLPointLight_getClassTypeId = Coin_SWIG_Python.SoVRMLPointLight_getClassTypeId
SoVRMLPointLight_initClass = Coin_SWIG_Python.SoVRMLPointLight_initClass

class SoVRMLVertexPoint(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLVertexPoint_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLVertexPoint_initClass)
    coord = _swig_property(Coin_SWIG_Python.SoVRMLVertexPoint_coord_get, Coin_SWIG_Python.SoVRMLVertexPoint_coord_set)
    color = _swig_property(Coin_SWIG_Python.SoVRMLVertexPoint_color_get, Coin_SWIG_Python.SoVRMLVertexPoint_color_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_getBoundingBox(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_callback(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_getPrimitiveCount(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLVertexPoint_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVertexPoint
    __del__ = lambda self : None;
SoVRMLVertexPoint_swigregister = Coin_SWIG_Python.SoVRMLVertexPoint_swigregister
SoVRMLVertexPoint_swigregister(SoVRMLVertexPoint)
SoVRMLVertexPoint_getClassTypeId = Coin_SWIG_Python.SoVRMLVertexPoint_getClassTypeId
SoVRMLVertexPoint_initClass = Coin_SWIG_Python.SoVRMLVertexPoint_initClass

class SoVRMLPointSet(SoVRMLVertexPoint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLPointSet_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLPointSet_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLPointSet_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLPointSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLPointSet_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLPointSet_getBoundingBox(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPointSet
    __del__ = lambda self : None;
SoVRMLPointSet_swigregister = Coin_SWIG_Python.SoVRMLPointSet_swigregister
SoVRMLPointSet_swigregister(SoVRMLPointSet)
SoVRMLPointSet_getClassTypeId = Coin_SWIG_Python.SoVRMLPointSet_getClassTypeId
SoVRMLPointSet_initClass = Coin_SWIG_Python.SoVRMLPointSet_initClass

class SoVRMLPositionInterpolator(SoVRMLInterpolator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLPositionInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLPositionInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLPositionInterpolator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLPositionInterpolator_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLPositionInterpolator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLPositionInterpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    keyValue = _swig_property(Coin_SWIG_Python.SoVRMLPositionInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLPositionInterpolator_keyValue_set)
    value_changed = _swig_property(Coin_SWIG_Python.SoVRMLPositionInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLPositionInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLPositionInterpolator
    __del__ = lambda self : None;
SoVRMLPositionInterpolator_swigregister = Coin_SWIG_Python.SoVRMLPositionInterpolator_swigregister
SoVRMLPositionInterpolator_swigregister(SoVRMLPositionInterpolator)
SoVRMLPositionInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLPositionInterpolator_getClassTypeId
SoVRMLPositionInterpolator_createInstance = Coin_SWIG_Python.SoVRMLPositionInterpolator_createInstance
SoVRMLPositionInterpolator_initClass = Coin_SWIG_Python.SoVRMLPositionInterpolator_initClass

class SoVRMLProximitySensor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLProximitySensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLProximitySensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLProximitySensor(*args)
        try: self.this.append(this)
        except: self.this = this
    center = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_center_get, Coin_SWIG_Python.SoVRMLProximitySensor_center_set)
    size = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_size_get, Coin_SWIG_Python.SoVRMLProximitySensor_size_set)
    enabled = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_enabled_get, Coin_SWIG_Python.SoVRMLProximitySensor_enabled_set)
    isActive = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_isActive_get, Coin_SWIG_Python.SoVRMLProximitySensor_isActive_set)
    position_changed = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_position_changed_get, Coin_SWIG_Python.SoVRMLProximitySensor_position_changed_set)
    orientation_changed = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_orientation_changed_get, Coin_SWIG_Python.SoVRMLProximitySensor_orientation_changed_set)
    enterTime = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_enterTime_get, Coin_SWIG_Python.SoVRMLProximitySensor_enterTime_set)
    exitTime = _swig_property(Coin_SWIG_Python.SoVRMLProximitySensor_exitTime_get, Coin_SWIG_Python.SoVRMLProximitySensor_exitTime_set)
    def affectsState(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_doAction(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_GLRender(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_callback(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_rayPick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLProximitySensor_getBoundingBox(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLProximitySensor
    __del__ = lambda self : None;
SoVRMLProximitySensor_swigregister = Coin_SWIG_Python.SoVRMLProximitySensor_swigregister
SoVRMLProximitySensor_swigregister(SoVRMLProximitySensor)
SoVRMLProximitySensor_getClassTypeId = Coin_SWIG_Python.SoVRMLProximitySensor_getClassTypeId
SoVRMLProximitySensor_initClass = Coin_SWIG_Python.SoVRMLProximitySensor_initClass

class SoVRMLScalarInterpolator(SoVRMLInterpolator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLScalarInterpolator_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLScalarInterpolator_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLScalarInterpolator_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLScalarInterpolator_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLScalarInterpolator_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLScalarInterpolator(*args)
        try: self.this.append(this)
        except: self.this = this
    keyValue = _swig_property(Coin_SWIG_Python.SoVRMLScalarInterpolator_keyValue_get, Coin_SWIG_Python.SoVRMLScalarInterpolator_keyValue_set)
    value_changed = _swig_property(Coin_SWIG_Python.SoVRMLScalarInterpolator_value_changed_get, Coin_SWIG_Python.SoVRMLScalarInterpolator_value_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLScalarInterpolator
    __del__ = lambda self : None;
SoVRMLScalarInterpolator_swigregister = Coin_SWIG_Python.SoVRMLScalarInterpolator_swigregister
SoVRMLScalarInterpolator_swigregister(SoVRMLScalarInterpolator)
SoVRMLScalarInterpolator_getClassTypeId = Coin_SWIG_Python.SoVRMLScalarInterpolator_getClassTypeId
SoVRMLScalarInterpolator_createInstance = Coin_SWIG_Python.SoVRMLScalarInterpolator_createInstance
SoVRMLScalarInterpolator_initClass = Coin_SWIG_Python.SoVRMLScalarInterpolator_initClass

class SoVRMLScript(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLScript_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLScript(*args)
        try: self.this.append(this)
        except: self.this = this
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLScript_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLScript_getTypeId(*args)
    url = _swig_property(Coin_SWIG_Python.SoVRMLScript_url_get, Coin_SWIG_Python.SoVRMLScript_url_set)
    directOutput = _swig_property(Coin_SWIG_Python.SoVRMLScript_directOutput_get, Coin_SWIG_Python.SoVRMLScript_directOutput_set)
    mustEvaluate = _swig_property(Coin_SWIG_Python.SoVRMLScript_mustEvaluate_get, Coin_SWIG_Python.SoVRMLScript_mustEvaluate_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLScript_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLScript_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLScript_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLScript_getBoundingBox(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLScript_pick(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLScript_handleEvent(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLScript_write(*args)
    setScriptEvaluateCB = staticmethod(Coin_SWIG_Python.SoVRMLScript_setScriptEvaluateCB)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLScript
    __del__ = lambda self : None;
SoVRMLScript_swigregister = Coin_SWIG_Python.SoVRMLScript_swigregister
SoVRMLScript_swigregister(SoVRMLScript)
SoVRMLScript_initClass = Coin_SWIG_Python.SoVRMLScript_initClass
SoVRMLScript_getClassTypeId = Coin_SWIG_Python.SoVRMLScript_getClassTypeId
SoVRMLScript_setScriptEvaluateCB = Coin_SWIG_Python.SoVRMLScript_setScriptEvaluateCB

class SoVRMLShape(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLShape_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLShape_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLShape_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLShape(*args)
        try: self.this.append(this)
        except: self.this = this
    OFF = Coin_SWIG_Python.SoVRMLShape_OFF
    ON = Coin_SWIG_Python.SoVRMLShape_ON
    AUTO = Coin_SWIG_Python.SoVRMLShape_AUTO
    appearance = _swig_property(Coin_SWIG_Python.SoVRMLShape_appearance_get, Coin_SWIG_Python.SoVRMLShape_appearance_set)
    geometry = _swig_property(Coin_SWIG_Python.SoVRMLShape_geometry_get, Coin_SWIG_Python.SoVRMLShape_geometry_set)
    renderCaching = _swig_property(Coin_SWIG_Python.SoVRMLShape_renderCaching_get, Coin_SWIG_Python.SoVRMLShape_renderCaching_set)
    boundingBoxCaching = _swig_property(Coin_SWIG_Python.SoVRMLShape_boundingBoxCaching_get, Coin_SWIG_Python.SoVRMLShape_boundingBoxCaching_set)
    setNumRenderCaches = staticmethod(Coin_SWIG_Python.SoVRMLShape_setNumRenderCaches)
    getNumRenderCaches = staticmethod(Coin_SWIG_Python.SoVRMLShape_getNumRenderCaches)
    def affectsState(*args): return Coin_SWIG_Python.SoVRMLShape_affectsState(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLShape_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLShape_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLShape_GLRender(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLShape_getBoundingBox(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLShape_rayPick(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLShape_search(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLShape_write(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLShape_getPrimitiveCount(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLShape_getChildren(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLShape_notify(*args)
    def copyContents(*args): return Coin_SWIG_Python.SoVRMLShape_copyContents(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLShape
    __del__ = lambda self : None;
SoVRMLShape_swigregister = Coin_SWIG_Python.SoVRMLShape_swigregister
SoVRMLShape_swigregister(SoVRMLShape)
SoVRMLShape_getClassTypeId = Coin_SWIG_Python.SoVRMLShape_getClassTypeId
SoVRMLShape_initClass = Coin_SWIG_Python.SoVRMLShape_initClass
SoVRMLShape_setNumRenderCaches = Coin_SWIG_Python.SoVRMLShape_setNumRenderCaches
SoVRMLShape_getNumRenderCaches = Coin_SWIG_Python.SoVRMLShape_getNumRenderCaches

class SoVRMLSound(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLSound_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLSound_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLSound_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLSound(*args)
        try: self.this.append(this)
        except: self.this = this
    source = _swig_property(Coin_SWIG_Python.SoVRMLSound_source_get, Coin_SWIG_Python.SoVRMLSound_source_set)
    intensity = _swig_property(Coin_SWIG_Python.SoVRMLSound_intensity_get, Coin_SWIG_Python.SoVRMLSound_intensity_set)
    priority = _swig_property(Coin_SWIG_Python.SoVRMLSound_priority_get, Coin_SWIG_Python.SoVRMLSound_priority_set)
    location = _swig_property(Coin_SWIG_Python.SoVRMLSound_location_get, Coin_SWIG_Python.SoVRMLSound_location_set)
    direction = _swig_property(Coin_SWIG_Python.SoVRMLSound_direction_get, Coin_SWIG_Python.SoVRMLSound_direction_set)
    minFront = _swig_property(Coin_SWIG_Python.SoVRMLSound_minFront_get, Coin_SWIG_Python.SoVRMLSound_minFront_set)
    maxFront = _swig_property(Coin_SWIG_Python.SoVRMLSound_maxFront_get, Coin_SWIG_Python.SoVRMLSound_maxFront_set)
    minBack = _swig_property(Coin_SWIG_Python.SoVRMLSound_minBack_get, Coin_SWIG_Python.SoVRMLSound_minBack_set)
    maxBack = _swig_property(Coin_SWIG_Python.SoVRMLSound_maxBack_get, Coin_SWIG_Python.SoVRMLSound_maxBack_set)
    spatialize = _swig_property(Coin_SWIG_Python.SoVRMLSound_spatialize_get, Coin_SWIG_Python.SoVRMLSound_spatialize_set)
    def setDopplerVelocity(*args): return Coin_SWIG_Python.SoVRMLSound_setDopplerVelocity(*args)
    def getDopplerVelocity(*args): return Coin_SWIG_Python.SoVRMLSound_getDopplerVelocity(*args)
    def setDopplerFactor(*args): return Coin_SWIG_Python.SoVRMLSound_setDopplerFactor(*args)
    def getDopplerFactor(*args): return Coin_SWIG_Python.SoVRMLSound_getDopplerFactor(*args)
    def startPlaying(*args): return Coin_SWIG_Python.SoVRMLSound_startPlaying(*args)
    def stopPlaying(*args): return Coin_SWIG_Python.SoVRMLSound_stopPlaying(*args)
    setDefaultBufferingProperties = staticmethod(Coin_SWIG_Python.SoVRMLSound_setDefaultBufferingProperties)
    def setBufferingProperties(*args): return Coin_SWIG_Python.SoVRMLSound_setBufferingProperties(*args)
    def getBufferingProperties(*args): return Coin_SWIG_Python.SoVRMLSound_getBufferingProperties(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoVRMLSound_audioRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSound
    __del__ = lambda self : None;
SoVRMLSound_swigregister = Coin_SWIG_Python.SoVRMLSound_swigregister
SoVRMLSound_swigregister(SoVRMLSound)
SoVRMLSound_getClassTypeId = Coin_SWIG_Python.SoVRMLSound_getClassTypeId
SoVRMLSound_initClass = Coin_SWIG_Python.SoVRMLSound_initClass
SoVRMLSound_setDefaultBufferingProperties = Coin_SWIG_Python.SoVRMLSound_setDefaultBufferingProperties

class SoVRMLSphere(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLSphere_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLSphere_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLSphere_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    radius = _swig_property(Coin_SWIG_Python.SoVRMLSphere_radius_get, Coin_SWIG_Python.SoVRMLSphere_radius_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLSphere_GLRender(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLSphere_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLSphere_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSphere
    __del__ = lambda self : None;
SoVRMLSphere_swigregister = Coin_SWIG_Python.SoVRMLSphere_swigregister
SoVRMLSphere_swigregister(SoVRMLSphere)
SoVRMLSphere_getClassTypeId = Coin_SWIG_Python.SoVRMLSphere_getClassTypeId
SoVRMLSphere_initClass = Coin_SWIG_Python.SoVRMLSphere_initClass

class SoVRMLSphereSensor(SoVRMLDragSensor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLSphereSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLSphereSensor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLSphereSensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLSphereSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    offset = _swig_property(Coin_SWIG_Python.SoVRMLSphereSensor_offset_get, Coin_SWIG_Python.SoVRMLSphereSensor_offset_set)
    rotation_changed = _swig_property(Coin_SWIG_Python.SoVRMLSphereSensor_rotation_changed_get, Coin_SWIG_Python.SoVRMLSphereSensor_rotation_changed_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSphereSensor
    __del__ = lambda self : None;
SoVRMLSphereSensor_swigregister = Coin_SWIG_Python.SoVRMLSphereSensor_swigregister
SoVRMLSphereSensor_swigregister(SoVRMLSphereSensor)
SoVRMLSphereSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLSphereSensor_getClassTypeId
SoVRMLSphereSensor_initClass = Coin_SWIG_Python.SoVRMLSphereSensor_initClass

class SoVRMLSpotLight(SoVRMLLight):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLSpotLight_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLSpotLight_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLSpotLight_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLSpotLight(*args)
        try: self.this.append(this)
        except: self.this = this
    location = _swig_property(Coin_SWIG_Python.SoVRMLSpotLight_location_get, Coin_SWIG_Python.SoVRMLSpotLight_location_set)
    direction = _swig_property(Coin_SWIG_Python.SoVRMLSpotLight_direction_get, Coin_SWIG_Python.SoVRMLSpotLight_direction_set)
    beamWidth = _swig_property(Coin_SWIG_Python.SoVRMLSpotLight_beamWidth_get, Coin_SWIG_Python.SoVRMLSpotLight_beamWidth_set)
    cutOffAngle = _swig_property(Coin_SWIG_Python.SoVRMLSpotLight_cutOffAngle_get, Coin_SWIG_Python.SoVRMLSpotLight_cutOffAngle_set)
    radius = _swig_property(Coin_SWIG_Python.SoVRMLSpotLight_radius_get, Coin_SWIG_Python.SoVRMLSpotLight_radius_set)
    attenuation = _swig_property(Coin_SWIG_Python.SoVRMLSpotLight_attenuation_get, Coin_SWIG_Python.SoVRMLSpotLight_attenuation_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLSpotLight_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSpotLight
    __del__ = lambda self : None;
SoVRMLSpotLight_swigregister = Coin_SWIG_Python.SoVRMLSpotLight_swigregister
SoVRMLSpotLight_swigregister(SoVRMLSpotLight)
SoVRMLSpotLight_getClassTypeId = Coin_SWIG_Python.SoVRMLSpotLight_getClassTypeId
SoVRMLSpotLight_initClass = Coin_SWIG_Python.SoVRMLSpotLight_initClass

class SoVRMLSwitch(SoGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLSwitch_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLSwitch_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLSwitch_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLSwitch(*args)
        try: self.this.append(this)
        except: self.this = this
    choice = _swig_property(Coin_SWIG_Python.SoVRMLSwitch_choice_get, Coin_SWIG_Python.SoVRMLSwitch_choice_set)
    whichChoice = _swig_property(Coin_SWIG_Python.SoVRMLSwitch_whichChoice_get, Coin_SWIG_Python.SoVRMLSwitch_whichChoice_set)
    def affectsState(*args): return Coin_SWIG_Python.SoVRMLSwitch_affectsState(*args)
    def addChoice(*args): return Coin_SWIG_Python.SoVRMLSwitch_addChoice(*args)
    def insertChoice(*args): return Coin_SWIG_Python.SoVRMLSwitch_insertChoice(*args)
    def getChoice(*args): return Coin_SWIG_Python.SoVRMLSwitch_getChoice(*args)
    def findChoice(*args): return Coin_SWIG_Python.SoVRMLSwitch_findChoice(*args)
    def getNumChoices(*args): return Coin_SWIG_Python.SoVRMLSwitch_getNumChoices(*args)
    def removeChoice(*args): return Coin_SWIG_Python.SoVRMLSwitch_removeChoice(*args)
    def removeAllChoices(*args): return Coin_SWIG_Python.SoVRMLSwitch_removeAllChoices(*args)
    def replaceChoice(*args): return Coin_SWIG_Python.SoVRMLSwitch_replaceChoice(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLSwitch_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLSwitch_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLSwitch_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLSwitch_pick(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLSwitch_getBoundingBox(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLSwitch_handleEvent(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoVRMLSwitch_getMatrix(*args)
    def search(*args): return Coin_SWIG_Python.SoVRMLSwitch_search(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLSwitch_write(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoVRMLSwitch_audioRender(*args)
    def addChild(*args): return Coin_SWIG_Python.SoVRMLSwitch_addChild(*args)
    def insertChild(*args): return Coin_SWIG_Python.SoVRMLSwitch_insertChild(*args)
    def getChild(*args): return Coin_SWIG_Python.SoVRMLSwitch_getChild(*args)
    def findChild(*args): return Coin_SWIG_Python.SoVRMLSwitch_findChild(*args)
    def getNumChildren(*args): return Coin_SWIG_Python.SoVRMLSwitch_getNumChildren(*args)
    def removeChild(*args): return Coin_SWIG_Python.SoVRMLSwitch_removeChild(*args)
    def removeAllChildren(*args): return Coin_SWIG_Python.SoVRMLSwitch_removeAllChildren(*args)
    def replaceChild(*args): return Coin_SWIG_Python.SoVRMLSwitch_replaceChild(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLSwitch_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLSwitch
    __del__ = lambda self : None;
SoVRMLSwitch_swigregister = Coin_SWIG_Python.SoVRMLSwitch_swigregister
SoVRMLSwitch_swigregister(SoVRMLSwitch)
SoVRMLSwitch_getClassTypeId = Coin_SWIG_Python.SoVRMLSwitch_getClassTypeId
SoVRMLSwitch_initClass = Coin_SWIG_Python.SoVRMLSwitch_initClass

class SoVRMLText(SoVRMLGeometry):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLText_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLText_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLText_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLText(*args)
        try: self.this.append(this)
        except: self.this = this
    string = _swig_property(Coin_SWIG_Python.SoVRMLText_string_get, Coin_SWIG_Python.SoVRMLText_string_set)
    fontStyle = _swig_property(Coin_SWIG_Python.SoVRMLText_fontStyle_get, Coin_SWIG_Python.SoVRMLText_fontStyle_set)
    maxExtent = _swig_property(Coin_SWIG_Python.SoVRMLText_maxExtent_get, Coin_SWIG_Python.SoVRMLText_maxExtent_set)
    length = _swig_property(Coin_SWIG_Python.SoVRMLText_length_get, Coin_SWIG_Python.SoVRMLText_length_set)
    BEGIN = Coin_SWIG_Python.SoVRMLText_BEGIN
    END = Coin_SWIG_Python.SoVRMLText_END
    MIDDLE = Coin_SWIG_Python.SoVRMLText_MIDDLE
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLText_GLRender(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLText_getPrimitiveCount(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLText_notify(*args)
    def getChildren(*args): return Coin_SWIG_Python.SoVRMLText_getChildren(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLText
    __del__ = lambda self : None;
SoVRMLText_swigregister = Coin_SWIG_Python.SoVRMLText_swigregister
SoVRMLText_swigregister(SoVRMLText)
SoVRMLText_getClassTypeId = Coin_SWIG_Python.SoVRMLText_getClassTypeId
SoVRMLText_initClass = Coin_SWIG_Python.SoVRMLText_initClass

class SoVRMLTextureCoordinate(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLTextureCoordinate_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLTextureCoordinate_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLTextureCoordinate_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLTextureCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    point = _swig_property(Coin_SWIG_Python.SoVRMLTextureCoordinate_point_get, Coin_SWIG_Python.SoVRMLTextureCoordinate_point_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLTextureCoordinate_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLTextureCoordinate_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLTextureCoordinate_GLRender(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLTextureCoordinate_pick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLTextureCoordinate_getPrimitiveCount(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTextureCoordinate
    __del__ = lambda self : None;
SoVRMLTextureCoordinate_swigregister = Coin_SWIG_Python.SoVRMLTextureCoordinate_swigregister
SoVRMLTextureCoordinate_swigregister(SoVRMLTextureCoordinate)
SoVRMLTextureCoordinate_getClassTypeId = Coin_SWIG_Python.SoVRMLTextureCoordinate_getClassTypeId
SoVRMLTextureCoordinate_initClass = Coin_SWIG_Python.SoVRMLTextureCoordinate_initClass

class SoVRMLTextureTransform(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLTextureTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLTextureTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLTextureTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLTextureTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoVRMLTextureTransform_translation_get, Coin_SWIG_Python.SoVRMLTextureTransform_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoVRMLTextureTransform_rotation_get, Coin_SWIG_Python.SoVRMLTextureTransform_rotation_set)
    scale = _swig_property(Coin_SWIG_Python.SoVRMLTextureTransform_scale_get, Coin_SWIG_Python.SoVRMLTextureTransform_scale_set)
    center = _swig_property(Coin_SWIG_Python.SoVRMLTextureTransform_center_get, Coin_SWIG_Python.SoVRMLTextureTransform_center_set)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLTextureTransform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLTextureTransform_callback(*args)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLTextureTransform_GLRender(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoVRMLTextureTransform_getMatrix(*args)
    def pick(*args): return Coin_SWIG_Python.SoVRMLTextureTransform_pick(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTextureTransform
    __del__ = lambda self : None;
SoVRMLTextureTransform_swigregister = Coin_SWIG_Python.SoVRMLTextureTransform_swigregister
SoVRMLTextureTransform_swigregister(SoVRMLTextureTransform)
SoVRMLTextureTransform_getClassTypeId = Coin_SWIG_Python.SoVRMLTextureTransform_getClassTypeId
SoVRMLTextureTransform_initClass = Coin_SWIG_Python.SoVRMLTextureTransform_initClass

class SoVRMLTimeSensor(SoNodeEngine):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLTimeSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLTimeSensor_getTypeId(*args)
    def getOutputData(*args): return Coin_SWIG_Python.SoVRMLTimeSensor_getOutputData(*args)
    createInstance = staticmethod(Coin_SWIG_Python.SoVRMLTimeSensor_createInstance)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLTimeSensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLTimeSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    cycleInterval = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_cycleInterval_get, Coin_SWIG_Python.SoVRMLTimeSensor_cycleInterval_set)
    enabled = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_enabled_get, Coin_SWIG_Python.SoVRMLTimeSensor_enabled_set)
    loop = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_loop_get, Coin_SWIG_Python.SoVRMLTimeSensor_loop_set)
    startTime = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_startTime_get, Coin_SWIG_Python.SoVRMLTimeSensor_startTime_set)
    stopTime = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_stopTime_get, Coin_SWIG_Python.SoVRMLTimeSensor_stopTime_set)
    def notify(*args): return Coin_SWIG_Python.SoVRMLTimeSensor_notify(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLTimeSensor_handleEvent(*args)
    def write(*args): return Coin_SWIG_Python.SoVRMLTimeSensor_write(*args)
    cycleTime = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_cycleTime_get, Coin_SWIG_Python.SoVRMLTimeSensor_cycleTime_set)
    fraction_changed = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_fraction_changed_get, Coin_SWIG_Python.SoVRMLTimeSensor_fraction_changed_set)
    isActive = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_isActive_get, Coin_SWIG_Python.SoVRMLTimeSensor_isActive_set)
    time = _swig_property(Coin_SWIG_Python.SoVRMLTimeSensor_time_get, Coin_SWIG_Python.SoVRMLTimeSensor_time_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTimeSensor
    __del__ = lambda self : None;
SoVRMLTimeSensor_swigregister = Coin_SWIG_Python.SoVRMLTimeSensor_swigregister
SoVRMLTimeSensor_swigregister(SoVRMLTimeSensor)
SoVRMLTimeSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLTimeSensor_getClassTypeId
SoVRMLTimeSensor_createInstance = Coin_SWIG_Python.SoVRMLTimeSensor_createInstance
SoVRMLTimeSensor_initClass = Coin_SWIG_Python.SoVRMLTimeSensor_initClass

class SoVRMLTouchSensor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLTouchSensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLTouchSensor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLTouchSensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLTouchSensor(*args)
        try: self.this.append(this)
        except: self.this = this
    enabled = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_enabled_get, Coin_SWIG_Python.SoVRMLTouchSensor_enabled_set)
    hitNormal_changed = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_hitNormal_changed_get, Coin_SWIG_Python.SoVRMLTouchSensor_hitNormal_changed_set)
    hitPoint_changed = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_hitPoint_changed_get, Coin_SWIG_Python.SoVRMLTouchSensor_hitPoint_changed_set)
    hitTexCoord_changed = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_hitTexCoord_changed_get, Coin_SWIG_Python.SoVRMLTouchSensor_hitTexCoord_changed_set)
    isActive = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_isActive_get, Coin_SWIG_Python.SoVRMLTouchSensor_isActive_set)
    isOver = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_isOver_get, Coin_SWIG_Python.SoVRMLTouchSensor_isOver_set)
    touchTime = _swig_property(Coin_SWIG_Python.SoVRMLTouchSensor_touchTime_get, Coin_SWIG_Python.SoVRMLTouchSensor_touchTime_set)
    def affectsState(*args): return Coin_SWIG_Python.SoVRMLTouchSensor_affectsState(*args)
    def handleEvent(*args): return Coin_SWIG_Python.SoVRMLTouchSensor_handleEvent(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTouchSensor
    __del__ = lambda self : None;
SoVRMLTouchSensor_swigregister = Coin_SWIG_Python.SoVRMLTouchSensor_swigregister
SoVRMLTouchSensor_swigregister(SoVRMLTouchSensor)
SoVRMLTouchSensor_getClassTypeId = Coin_SWIG_Python.SoVRMLTouchSensor_getClassTypeId
SoVRMLTouchSensor_initClass = Coin_SWIG_Python.SoVRMLTouchSensor_initClass

class SoVRMLTransform(SoVRMLGroup):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLTransform_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLTransform_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLTransform_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    translation = _swig_property(Coin_SWIG_Python.SoVRMLTransform_translation_get, Coin_SWIG_Python.SoVRMLTransform_translation_set)
    rotation = _swig_property(Coin_SWIG_Python.SoVRMLTransform_rotation_get, Coin_SWIG_Python.SoVRMLTransform_rotation_set)
    scale = _swig_property(Coin_SWIG_Python.SoVRMLTransform_scale_get, Coin_SWIG_Python.SoVRMLTransform_scale_set)
    scaleOrientation = _swig_property(Coin_SWIG_Python.SoVRMLTransform_scaleOrientation_get, Coin_SWIG_Python.SoVRMLTransform_scaleOrientation_set)
    center = _swig_property(Coin_SWIG_Python.SoVRMLTransform_center_get, Coin_SWIG_Python.SoVRMLTransform_center_set)
    def pointAt(*args): return Coin_SWIG_Python.SoVRMLTransform_pointAt(*args)
    def getScaleSpaceMatrix(*args): return Coin_SWIG_Python.SoVRMLTransform_getScaleSpaceMatrix(*args)
    def getRotationSpaceMatrix(*args): return Coin_SWIG_Python.SoVRMLTransform_getRotationSpaceMatrix(*args)
    def getTranslationSpaceMatrix(*args): return Coin_SWIG_Python.SoVRMLTransform_getTranslationSpaceMatrix(*args)
    def multLeft(*args): return Coin_SWIG_Python.SoVRMLTransform_multLeft(*args)
    def multRight(*args): return Coin_SWIG_Python.SoVRMLTransform_multRight(*args)
    def combineLeft(*args): return Coin_SWIG_Python.SoVRMLTransform_combineLeft(*args)
    def combineRight(*args): return Coin_SWIG_Python.SoVRMLTransform_combineRight(*args)
    def setMatrix(*args): return Coin_SWIG_Python.SoVRMLTransform_setMatrix(*args)
    def recenter(*args): return Coin_SWIG_Python.SoVRMLTransform_recenter(*args)
    def doAction(*args): return Coin_SWIG_Python.SoVRMLTransform_doAction(*args)
    def callback(*args): return Coin_SWIG_Python.SoVRMLTransform_callback(*args)
    def getBoundingBox(*args): return Coin_SWIG_Python.SoVRMLTransform_getBoundingBox(*args)
    def getMatrix(*args): return Coin_SWIG_Python.SoVRMLTransform_getMatrix(*args)
    def rayPick(*args): return Coin_SWIG_Python.SoVRMLTransform_rayPick(*args)
    def getPrimitiveCount(*args): return Coin_SWIG_Python.SoVRMLTransform_getPrimitiveCount(*args)
    def audioRender(*args): return Coin_SWIG_Python.SoVRMLTransform_audioRender(*args)
    def GLRenderBelowPath(*args): return Coin_SWIG_Python.SoVRMLTransform_GLRenderBelowPath(*args)
    def GLRenderInPath(*args): return Coin_SWIG_Python.SoVRMLTransform_GLRenderInPath(*args)
    def notify(*args): return Coin_SWIG_Python.SoVRMLTransform_notify(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLTransform
    __del__ = lambda self : None;
SoVRMLTransform_swigregister = Coin_SWIG_Python.SoVRMLTransform_swigregister
SoVRMLTransform_swigregister(SoVRMLTransform)
SoVRMLTransform_getClassTypeId = Coin_SWIG_Python.SoVRMLTransform_getClassTypeId
SoVRMLTransform_initClass = Coin_SWIG_Python.SoVRMLTransform_initClass

class SoVRMLViewpoint(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLViewpoint_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLViewpoint_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLViewpoint_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLViewpoint(*args)
        try: self.this.append(this)
        except: self.this = this
    position = _swig_property(Coin_SWIG_Python.SoVRMLViewpoint_position_get, Coin_SWIG_Python.SoVRMLViewpoint_position_set)
    orientation = _swig_property(Coin_SWIG_Python.SoVRMLViewpoint_orientation_get, Coin_SWIG_Python.SoVRMLViewpoint_orientation_set)
    fieldOfView = _swig_property(Coin_SWIG_Python.SoVRMLViewpoint_fieldOfView_get, Coin_SWIG_Python.SoVRMLViewpoint_fieldOfView_set)
    description = _swig_property(Coin_SWIG_Python.SoVRMLViewpoint_description_get, Coin_SWIG_Python.SoVRMLViewpoint_description_set)
    jump = _swig_property(Coin_SWIG_Python.SoVRMLViewpoint_jump_get, Coin_SWIG_Python.SoVRMLViewpoint_jump_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLViewpoint_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLViewpoint
    __del__ = lambda self : None;
SoVRMLViewpoint_swigregister = Coin_SWIG_Python.SoVRMLViewpoint_swigregister
SoVRMLViewpoint_swigregister(SoVRMLViewpoint)
SoVRMLViewpoint_getClassTypeId = Coin_SWIG_Python.SoVRMLViewpoint_getClassTypeId
SoVRMLViewpoint_initClass = Coin_SWIG_Python.SoVRMLViewpoint_initClass

class SoVRMLVisibilitySensor(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLVisibilitySensor_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLVisibilitySensor_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLVisibilitySensor_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLVisibilitySensor(*args)
        try: self.this.append(this)
        except: self.this = this
    center = _swig_property(Coin_SWIG_Python.SoVRMLVisibilitySensor_center_get, Coin_SWIG_Python.SoVRMLVisibilitySensor_center_set)
    size = _swig_property(Coin_SWIG_Python.SoVRMLVisibilitySensor_size_get, Coin_SWIG_Python.SoVRMLVisibilitySensor_size_set)
    enabled = _swig_property(Coin_SWIG_Python.SoVRMLVisibilitySensor_enabled_get, Coin_SWIG_Python.SoVRMLVisibilitySensor_enabled_set)
    def GLRender(*args): return Coin_SWIG_Python.SoVRMLVisibilitySensor_GLRender(*args)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLVisibilitySensor
    __del__ = lambda self : None;
SoVRMLVisibilitySensor_swigregister = Coin_SWIG_Python.SoVRMLVisibilitySensor_swigregister
SoVRMLVisibilitySensor_swigregister(SoVRMLVisibilitySensor)
SoVRMLVisibilitySensor_getClassTypeId = Coin_SWIG_Python.SoVRMLVisibilitySensor_getClassTypeId
SoVRMLVisibilitySensor_initClass = Coin_SWIG_Python.SoVRMLVisibilitySensor_initClass

class SoVRMLWorldInfo(SoNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(Coin_SWIG_Python.SoVRMLWorldInfo_getClassTypeId)
    def getTypeId(*args): return Coin_SWIG_Python.SoVRMLWorldInfo_getTypeId(*args)
    initClass = staticmethod(Coin_SWIG_Python.SoVRMLWorldInfo_initClass)
    def __init__(self, *args): 
        this = Coin_SWIG_Python.new_SoVRMLWorldInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    title = _swig_property(Coin_SWIG_Python.SoVRMLWorldInfo_title_get, Coin_SWIG_Python.SoVRMLWorldInfo_title_set)
    info = _swig_property(Coin_SWIG_Python.SoVRMLWorldInfo_info_get, Coin_SWIG_Python.SoVRMLWorldInfo_info_set)
    __swig_destroy__ = Coin_SWIG_Python.delete_SoVRMLWorldInfo
    __del__ = lambda self : None;
SoVRMLWorldInfo_swigregister = Coin_SWIG_Python.SoVRMLWorldInfo_swigregister
SoVRMLWorldInfo_swigregister(SoVRMLWorldInfo)
SoVRMLWorldInfo_getClassTypeId = Coin_SWIG_Python.SoVRMLWorldInfo_getClassTypeId
SoVRMLWorldInfo_initClass = Coin_SWIG_Python.SoVRMLWorldInfo_initClass

for x in locals().values():
  if isinstance(x, type) and issubclass(x, SoFieldContainer):
    for name, thing in x.__dict__.items():
      if isinstance(thing, property):
        delattr(x, name)



