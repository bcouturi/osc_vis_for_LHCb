
// this :
#include <Rio/Core/Args.h>

//////////////////////////////////////////////////////////////////////////////
Rio::Args::Args(
 int aArgc
,char** aArgv
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  for(int index=0;index<aArgc;index++) fArgs.push_back(aArgv[index]); 
}
//////////////////////////////////////////////////////////////////////////////
Rio::Args::Args(
 const Args& aFrom
)
:fArgs(aFrom.fArgs)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
}
//////////////////////////////////////////////////////////////////////////////
Rio::Args::~Args(
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
}
//////////////////////////////////////////////////////////////////////////////
Rio::Args& Rio::Args::operator=(
 const Args& aFrom
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  fArgs = aFrom.fArgs;
  return *this;
}
//////////////////////////////////////////////////////////////////////////////
unsigned int Rio::Args::number(
) const
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  return fArgs.size();
}
//////////////////////////////////////////////////////////////////////////////
bool Rio::Args::isAnArgument(
 const std::string& aString
) const
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  for(unsigned int index=0;index<fArgs.size();index++) {
    if(aString==fArgs[index]) return true;
  }
  return false;
}
//////////////////////////////////////////////////////////////////////////////
bool Rio::Args::find(
 const std::string& aString
,std::string& aValue
) const
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  aValue = "";
  for(unsigned int index=0;index<fArgs.size();index++) {
    if(aString==fArgs[index]) {
      if(index+1<fArgs.size()) {
        aValue = fArgs[index+1];
        return true;
      }
    }
  }
  return false;
}
//////////////////////////////////////////////////////////////////////////////
bool Rio::Args::last(
 std::string& aValue
) const
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  aValue = "";
  if(!fArgs.size()) return false;
  aValue = fArgs[fArgs.size()-1];
  return true;
}
