/*
 * This file has been generated by the KUIP compiler.  Do NOT change it!
 *
 * KUIP header: 950303      Generation date: Thu Dec 23 16:17:49 2004
 *
 * Input file: CDF.cdf
 */

#if !defined(F77_LCASE) && !defined(F77_UCASE) && !defined(F77_USCORE)
#  if defined(__EXTENDED__) && !defined(IBM370) && !defined(_IBMR2)
#    define IBM370
#  endif
#  if defined(CRAY) || defined(IBM370) || defined(vms)
#    define F77_UCASE
#  else
#    if ( defined(apollo) || defined(__apollo) ) && defined(APOFTN)
#      define F77_LCASE
#    else
#      define F77_USCORE
#    endif
#  endif
#endif

typedef int     IntFunc();
typedef char*   CharFunc();
typedef char** pCharFunc();
typedef void    SUBROUTINE();
#ifdef IBM370
#  pragma linkage(SUBROUTINE,FORTRAN)
#endif

extern void klnkmenu();
extern void klnkbrcl();
extern void klnkkmcl();
extern void klnkicon();
extern void klnkbutt();

typedef unsigned long KmPixmap; /* Pixmap from <X11/X.h>                   */
 typedef void *KmWidget;         /* Widget from <X11/Intrinsic.h>           */
 typedef void *KmCalldata;       /* XmAnyCallbackStruct from <Motif/Xm.h>   */
                                 /*                                         */
 typedef enum {                  /*                                         */
   BRACT_OPEN = 0,               /*                                         */
   BRACT_ROOT = 1,               /*                                         */
   BRACT_CONT = 2,               /*                                         */
   BRACT_GRAF = 3                /*                                         */
 } BrActTag;                     /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   BrActUpdate    = 0x01,        /* browser window has to be updated ('!')  */
   BrActSeparator = 0x02,        /* put separator in menu ('/')             */
   BrActToggle    = 0x04,        /* register as toggle button               */
   BrActToggleOn  = 0x08,        /* toggle state is on                      */
   BrActSensitive = 0x10         /* button is sensitive                     */
 } BrActFlag;                    /*                                         */
                                 /*                                         */ 

typedef struct _BrAction {      /*                                         */ 
  struct _BrAction *next;       /* link to next action binding             */ 
  BrActFlag   flags;            /*                                         */ 
  char       *text;             /* text line in menu                       */ 
  char       *user_text;        /* user text overriding CDF text (malloced)*/ 
  char       *accel;            /* accelerator                             */ 
  char       *exec;             /* action commands                         */ 
  SUBROUTINE *call_F;           /* action routine                          */ 
  IntFunc    *call_C;           /* action function                         */ 
  BrActTag    tag;              /* for which window the action is defined  */ 
  struct _BrClass *class;       /* pointer to BrClass in case of open menu */
 } BrAction;                     /*                                         */
                                 /*                                         */
 typedef struct _BrClass {       /*                                         */
   struct _BrClass *next;        /* link to next browsable class            */
   char       *name;             /* unique identifier name                  */
   char       *title;            /* title for popup menu (maybe NULL)       */
   SUBROUTINE *scan_km_F;        /* user function scanning the directory    */
   pCharFunc  *scan_km_C;        /* user function scanning the directory    */
   SUBROUTINE *scan_br_F;        /* user function scanning for browsables   */
   pCharFunc  *scan_br_C;        /* user function scanning for browsables   */
   BrAction   *root;             /* list of actions in root window          */
   BrAction   *open;             /* list of actions in open menu            */
 } BrClass;                      /*                                         */
                                 /*                                         */ 

typedef struct _KmIcon {        /*                                         */ 
  struct _KmIcon *next;         /* link to next icon                       */ 
  char       *name;             /* unique identifier name                  */ 
  int         width;            /* width of the pixmap                     */ 
  int         height;           /* height of the pixmap                    */ 
  char       *bitmap;           /* bitmap data                             */ 
  KmPixmap    pix;              /* filled in Motif part                    */ 
  KmPixmap    hi_pix;           /* high lighted pixmap                     */
 } KmIcon;                       /*                                         */
                                 /*                                         */
 typedef struct _KmClass {       /*                                         */
   struct _KmClass *next;        /* link to next object class               */
   int         is_dir;           /* flag if class has is a directory        */
   char       *name;             /* unique identifier name                  */
   char       *title;            /* title for popup menu (maybe NULL)       */
   char       *big_icon;         /* name of the big icon                    */
   KmIcon     *bicon;            /* pointer to the big icon structure       */
   char       *sm_icon;          /* name of the small icon                  */
   KmIcon     *sicon;            /* pointer to the small icon structure     */
   SUBROUTINE *user_icon_F;      /* user function to return icon bitmap     */
   IntFunc    *user_icon_C;      /* user function to return icon bitmap     */
   BrAction   *cont;             /* list of actions in content window       */
   BrAction   *graf;             /* list of actions in graphics window      */
   int         obj_count;        /* number of objects in content window     */
 } KmClass;                      /*                                         */
                                 /*                                         */ 

typedef enum {                  /*                                         */ 
  KmButtSensitive       = 0x00, /* sensitive button                        */ 
  KmButtNonSensitive    = 0x01, /* non-sensitive button ('NS')             */ 
  KmButtToggleSensitive = 0x02, /* toggle-sensitive button ('TS')          */ 
  KmButtSensitivityMask = 0x03, /* mask for sensitivity type               */ 
  KmButtSeparator       = 0x04, /* put separator in menu ('/')             */ 
  KmButtBrowser         = 0x08  /* button is in main browser ('BR')        */
 } KmButtFlag;                   /*                                         */
                                 /*                                         */
 typedef struct _KmButton {      /*                                         */
   struct _KmButton *next;       /* button label or menu item               */
   char       *menu;             /* menu name or NULL for buttons           */
   char       *label;            /* button label or menu item               */
   SUBROUTINE *call_F;           /* callback routine (FORTRAN)              */
   IntFunc    *call_C;           /* callback routine (C)                    */
   char       *action;           /* name of callback routine                */
   char       *mnemo;            /* button mnemonic                         */
   char       *accel;            /* button accelerator                      */
   char       *accel_text;       /* button accelerator text                 */
   KmButtFlag  flags;            /* sensitivity type etc.                   */
   KmWidget    widget;           /* Motif widget ID                         */
 } KmButton;                     /*                                         */
                                 /*                                         */ 

struct {                        /*                                         */ 
  /* indirect calls to avoid linking HIGZ                                  */ 
  IntFunc    *graf_info_C;      /* pass display, open and close (ixmotif)  */ 
  SUBROUTINE *graf_size_F;      /* resize window (IGRSIZ)                  */ 
  SUBROUTINE *graf_pick_F;      /* identifying graphics objects (IGOBJ)    */ 
  SUBROUTINE *graf_attr_F;      /* set attributes (IGSET)                  */ 
  SUBROUTINE *graf_close_F;     /* close workstation (ICLWK)               */ 
  /* optional routines for Motif customization                             */ 
  pCharFunc  *user_FallBk_C;    /* get application fallbacks               */ 
  IntFunc    *user_TopWid_C;    /* pass toplevel widget identifiers        */
 } klnkaddr;                     /*                                         */ 

typedef enum {                  /*                                         */ 
  KmFLAG_FORGET = 0x01,         /* last value is not kept for Motif panels */ 
  KmFLAG_MINUS  = 0x02,         /* -VALUE is not an abbrev for CHOPT=VALUE */ 
  KmFLAG_QUOTE  = 0x04,         /* do not remove quotes                    */ 
  KmFLAG_VARARG = 0x08,         /* append additional args to this param.   */ 
  KmFLAG_CONST  = 0x10,         /* do not allow to assign a value          */ 
  KmFLAG_HIDDEN = 0x20,         /* do not show in menus                    */ 
  KmFLAG_SEPARATE = 0x40        /* treat arguments as separate tokens      */
 } KmParFlag;                    /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   KmTYPE_CHAR   = 'C',          /* character string                        */
   KmTYPE_FILE   = 'F',          /* file name                               */
   KmTYPE_INT    = 'I',          /* integer                                 */
   KmTYPE_OPTION = 'O',          /* option                                  */
   KmTYPE_REAL   = 'R'           /* real                                    */
 } KmParType;                    /*                                         */
                                 /*                                         */ 

typedef struct {                /* file name                               */ 
  char         *filter_default; /* filter wildcard                         */ 
  char         *filter_current; /* current filter                          */
 } KmParFile;                    /*                                         */
                                 /*                                         */
 typedef struct {                /*                                         */
   char         *range_lower;    /* lower value of range                    */
   char         *range_upper;    /* upper value of range                    */
   char         *slider_lower;   /* lower limit for slider                  */
   char         *slider_upper;   /* upper limit for slider                  */
   int           decimals;       /* number of decimals used for slider      */
 } KmParInt;                     /*                                         */
                                 /*                                         */
 typedef struct {                /* option                                  */
   char        **text;           /* explanations (parallel to range_value)  */
   int          *mutex;          /* mutex group to which text belongs       */
   int          *radio;          /* radio group to which text belongs       */
 } KmParOption;                  /*                                         */
                                 /*                                         */ 

typedef KmParInt KmParReal;     /* real and int have the same fields       */ 
                                /*                                         */
 typedef struct {                /*                                         */
   char         *name;           /* parameter name                          */
   int           abbrev;         /* minimum length that name is recognized  */
   char         *prompt;         /* prompt string                           */
   char         *dfault;         /* default value                           */
   char         *last;           /* last value for Motif panel (malloced)   */
   int           width;          /* width of input field                    */
   int           range_count;    /* number of items in range_value          */
   char        **range_value;    /* list of allowed values                  */
   int           select_count;   /* number of items in select_count         */
   char        **select_value;   /* list of values for selection box        */
   KmParFlag     flags;          /* special flags                           */
   KmParType     type;           /* parameter type                          */
   void        *ptype;           /* structure pointer selected by type      */
 } KmParameter;                  /*                                         */
                                 /*                                         */ 

typedef struct _KmCommand {     /*                                         */ 
  struct _KmCommand *next;      /* link to next command                    */ 
  char         *path;           /* command path                            */ 
  char         *name;           /* command name                            */ 
  int           hidden;         /* flag if command is invisible            */ 
  int           level;          /* depth of submenus                       */ 
  int           total;          /* total number of parameters              */ 
  int           mandatory;      /* number of mandatory parameters          */ 
  KmParameter **par;            /* list of total parameter descriptions    */ 
  int           list_par;       /* index+1 of parameter taking a list      */ 
  int           xcount;         /* count number of action calls            */ 
  SUBROUTINE   *action_F;       /* action routine                          */ 
  IntFunc      *action_C;       /* action routine                          */ 
  SUBROUTINE   *user_help_F;    /* user help routine                       */ 
  pCharFunc    *user_help_C;    /* user help routine                       */ 
  int          nguidance;       /* number of lines in guidance text        */ 
  char        **guidance;       /* help text                               */ 
  int          nkeyword;        /* number of lines for keywords            */ 
  char        **keyword;        /* list of keywords                        */ 
  int          nhlink;          /* number of lines for links               */ 
  char        **hlink;          /* list of links                           */ 
  int           argc;           /* number of arguments entered             */ 
  char        **argv;           /* argc argument values                    */ 
  char         *argline;        /* argument line as entered                */ 
  int          *argoffs;        /* argc offsets into argline for KUGETE    */
 } KmCommand;                    /*                                         */ 

typedef struct _KmMenu {        /*                                         */ 
  struct _KmMenu *next;         /* link to next menu                       */ 
  struct _KmMenu *down;         /* link to submenu                         */ 
  char         *path;           /* path of parent menu                     */ 
  char         *name;           /* menu name                               */ 
  int           level;          /* depth of submenus                       */ 
  KmCommand    *cmds;           /* link to first command                   */ 
  int          nguidance;       /* number of lines in guidance text        */ 
  char        **guidance;       /* help text                               */ 
  int          nkeyword;        /* number of lines for keywords            */ 
  char        **keyword;        /* list of keywords                        */ 
  int          nhlink;          /* number of lines for links               */ 
  char        **hlink;          /* list of links                           */
 } KmMenu;                       /*                                         */
                                 /*                                         */
 extern void klnkbrcl();         /*                                         */
 extern void klnkicon();         /*                                         */
 extern void klnkkmcl();         /*                                         */
 extern void klnkmenu();         /*                                         */
                                 /*                                         */ 

#ifdef F77_LCASE
#  define onxlab_kuip_def_ onxlab_kuip_def
#endif

#ifdef F77_UCASE
#  define onxlab_kuip_def_ ONXLAB_KUIP_DEF
#endif

#ifdef IBM370
#  pragma linkage(ONXLAB_KUIP_DEF,FORTRAN)
#endif

extern void onxlab_kuip_def_();

extern int onxlab_kuip();

void onxlab_kuip_def_()
{

static KmParameter _AIDA_TREE_RIO_NEW_NAME = { "NAME", 4, "Tree name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TREE_RIO_NEW_FNAME = { "FNAME", 5, "File name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TREE_RIO_NEW_MODE = { "MODE", 4, "Mode", "READ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_AIDA_TREE_RIO_NEW_parameters[] = {
 &_AIDA_TREE_RIO_NEW_NAME, &_AIDA_TREE_RIO_NEW_FNAME, &_AIDA_TREE_RIO_NEW_MODE
 };
static char *_AIDA_TREE_RIO_NEW_guidance[] = { "Open a RIO file." };
static char *_AIDA_TREE_RIO_NEW_keyword[] = { "RIO", "ROOT", "open" };
static KmCommand _AIDA_TREE_RIO_NEW = {  (KmCommand*)0, "/AIDA/TREE/RIO/NEW",
 "NEW", 0, 3, 3, 3, _AIDA_TREE_RIO_NEW_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_TREE_RIO_NEW_guidance, 3,
 _AIDA_TREE_RIO_NEW_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static char *_AIDA_TREE_RIO_guidance[] = { "RIO menu" };
static KmMenu _AIDA_TREE_RIO = {  (KmMenu*)0,  (KmMenu*)0, "/AIDA/TREE/RIO",
 "RIO", 3, &_AIDA_TREE_RIO_NEW, 1, _AIDA_TREE_RIO_guidance, 0, (char**)0, 0,
 (char**)0 };

static KmParameter _AIDA_TREE_LS_NAME = { "NAME", 4, "Tree name", (char*)0,
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_AIDA_TREE_LS_parameters[] = { &_AIDA_TREE_LS_NAME };
static char *_AIDA_TREE_LS_guidance[] = {
 "List objects in the current directory/container of the current tree." };
static char *_AIDA_TREE_LS_keyword[] = { "dir", "Directory" };
static KmCommand _AIDA_TREE_LS = {  (KmCommand*)0, "/AIDA/TREE/LS", "LS", 0,
 2, 1, 1, _AIDA_TREE_LS_parameters, 1, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_TREE_LS_guidance, 2,
 _AIDA_TREE_LS_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_TREE_CD_NAME = { "NAME", 4, "Tree name", (char*)0,
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _AIDA_TREE_CD_CHPATH = { "CHPATH", 6, "Path name", " ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_AIDA_TREE_CD_parameters[] = { &_AIDA_TREE_CD_NAME,
 &_AIDA_TREE_CD_CHPATH };
static char *_AIDA_TREE_CD_guidance[] = {
 "Change the current working directory in current Tree.",
 "If CHPATH is given make it the new CWD.",
 "Otherwise, print the pathname of the CWD.",
 " Ex.  CD dir1         ; make DIR1 the new CWD",
 "      CD ..           ; go up.",
 "      CD              ; print the name of the CWD" };
static char *_AIDA_TREE_CD_keyword[] = { "dir", "directory" };
static KmCommand _AIDA_TREE_CD = { &_AIDA_TREE_LS, "/AIDA/TREE/CD", "CD", 0,
 2, 2, 2, _AIDA_TREE_CD_parameters, 1, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 6, _AIDA_TREE_CD_guidance, 2,
 _AIDA_TREE_CD_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_TREE_DELETE_NAME = { "NAME", 4, "Tree name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_TREE_DELETE_parameters[] = { &_AIDA_TREE_DELETE_NAME
 };
static char *_AIDA_TREE_DELETE_guidance[] = {
 "Delete current tree. Close associated store..." };
static char *_AIDA_TREE_DELETE_keyword[] = { "delete" };
static KmCommand _AIDA_TREE_DELETE = { &_AIDA_TREE_CD, "/AIDA/TREE/DELETE",
 "DELETE", 0, 2, 1, 1, _AIDA_TREE_DELETE_parameters, 1, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_TREE_DELETE_guidance, 1,
 _AIDA_TREE_DELETE_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_HISTOGRAM_1D_NEW_NAME = { "NAME", 4,
 "Histogram name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_HISTOGRAM_1D_NEW_LABEL = { "LABEL", 5, "Label", " ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParInt    _AIDA_HISTOGRAM_1D_NEW_NCX_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_1D_NEW_NCX = { "NCX", 3,
 "Number of channels", "100", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_AIDA_HISTOGRAM_1D_NEW_NCX_type };
static KmParReal   _AIDA_HISTOGRAM_1D_NEW_XMIN_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_1D_NEW_XMIN = { "XMIN", 4, "Low edge",
 "0.", (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_HISTOGRAM_1D_NEW_XMIN_type };
static KmParReal   _AIDA_HISTOGRAM_1D_NEW_XMAX_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_1D_NEW_XMAX = { "XMAX", 4, "Upper edge",
 "100.", (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_HISTOGRAM_1D_NEW_XMAX_type };
static KmParameter *_AIDA_HISTOGRAM_1D_NEW_parameters[] = {
 &_AIDA_HISTOGRAM_1D_NEW_NAME, &_AIDA_HISTOGRAM_1D_NEW_LABEL,
 &_AIDA_HISTOGRAM_1D_NEW_NCX, &_AIDA_HISTOGRAM_1D_NEW_XMIN,
 &_AIDA_HISTOGRAM_1D_NEW_XMAX };
static char *_AIDA_HISTOGRAM_1D_NEW_guidance[] = {
 "Create a one dimensional histogram.", "The contents are set to zero." };
static char *_AIDA_HISTOGRAM_1D_NEW_keyword[] = { "channel" };
static KmCommand _AIDA_HISTOGRAM_1D_NEW = {  (KmCommand*)0,
 "/AIDA/HISTOGRAM/1D/NEW", "NEW", 0, 3, 5, 1,
 _AIDA_HISTOGRAM_1D_NEW_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 2, _AIDA_HISTOGRAM_1D_NEW_guidance, 1,
 _AIDA_HISTOGRAM_1D_NEW_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_HISTOGRAM_1D_GET_NAME = { "NAME", 4,
 "Histogram name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_HISTOGRAM_1D_GET_TREENAME = { "TREENAME", 8,
 "Tree name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_HISTOGRAM_1D_GET_parameters[] = {
 &_AIDA_HISTOGRAM_1D_GET_NAME, &_AIDA_HISTOGRAM_1D_GET_TREENAME };
static char *_AIDA_HISTOGRAM_1D_GET_guidance[] = {
 "Read histogram from the current data base directory to memory." };
static char *_AIDA_HISTOGRAM_1D_GET_keyword[] = { "Read", "memory", "disk" };
static KmCommand _AIDA_HISTOGRAM_1D_GET = { &_AIDA_HISTOGRAM_1D_NEW,
 "/AIDA/HISTOGRAM/1D/GET", "GET", 0, 3, 2, 2,
 _AIDA_HISTOGRAM_1D_GET_parameters, 2, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_HISTOGRAM_1D_GET_guidance, 3,
 _AIDA_HISTOGRAM_1D_GET_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_HISTOGRAM_2D_NEW_NAME = { "NAME", 4,
 "Histogram name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_LABEL = { "LABEL", 5, "Label", " ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParInt    _AIDA_HISTOGRAM_2D_NEW_NCX_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_NCX = { "NCX", 3,
 "X number of channels", "100", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_AIDA_HISTOGRAM_2D_NEW_NCX_type };
static KmParReal   _AIDA_HISTOGRAM_2D_NEW_XMIN_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_XMIN = { "XMIN", 4, "X low edge",
 "0.", (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_HISTOGRAM_2D_NEW_XMIN_type };
static KmParReal   _AIDA_HISTOGRAM_2D_NEW_XMAX_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_XMAX = { "XMAX", 4, "X upper edge",
 "100.", (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_HISTOGRAM_2D_NEW_XMAX_type };
static KmParInt    _AIDA_HISTOGRAM_2D_NEW_NCY_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_NCY = { "NCY", 3,
 "Y number of channels", "100", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_AIDA_HISTOGRAM_2D_NEW_NCY_type };
static KmParReal   _AIDA_HISTOGRAM_2D_NEW_YMIN_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_YMIN = { "YMIN", 4, "Y low edge",
 "0.", (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_HISTOGRAM_2D_NEW_YMIN_type };
static KmParReal   _AIDA_HISTOGRAM_2D_NEW_YMAX_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_HISTOGRAM_2D_NEW_YMAX = { "YMAX", 4, "Y upper edge",
 "100.", (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_HISTOGRAM_2D_NEW_YMAX_type };
static KmParameter *_AIDA_HISTOGRAM_2D_NEW_parameters[] = {
 &_AIDA_HISTOGRAM_2D_NEW_NAME, &_AIDA_HISTOGRAM_2D_NEW_LABEL,
 &_AIDA_HISTOGRAM_2D_NEW_NCX, &_AIDA_HISTOGRAM_2D_NEW_XMIN,
 &_AIDA_HISTOGRAM_2D_NEW_XMAX, &_AIDA_HISTOGRAM_2D_NEW_NCY,
 &_AIDA_HISTOGRAM_2D_NEW_YMIN, &_AIDA_HISTOGRAM_2D_NEW_YMAX };
static char *_AIDA_HISTOGRAM_2D_NEW_guidance[] = {
 "Create a one dimensional histogram.", "The contents are set to zero." };
static char *_AIDA_HISTOGRAM_2D_NEW_keyword[] = { "channel" };
static KmCommand _AIDA_HISTOGRAM_2D_NEW = {  (KmCommand*)0,
 "/AIDA/HISTOGRAM/2D/NEW", "NEW", 0, 3, 8, 1,
 _AIDA_HISTOGRAM_2D_NEW_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 2, _AIDA_HISTOGRAM_2D_NEW_guidance, 1,
 _AIDA_HISTOGRAM_2D_NEW_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_HISTOGRAM_2D_GET_NAME = { "NAME", 4,
 "Histogram name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_HISTOGRAM_2D_GET_TREENAME = { "TREENAME", 8,
 "Tree name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_HISTOGRAM_2D_GET_parameters[] = {
 &_AIDA_HISTOGRAM_2D_GET_NAME, &_AIDA_HISTOGRAM_2D_GET_TREENAME };
static char *_AIDA_HISTOGRAM_2D_GET_guidance[] = {
 "Read histogram from the current data base directory to memory." };
static char *_AIDA_HISTOGRAM_2D_GET_keyword[] = { "Read", "memory", "disk" };
static KmCommand _AIDA_HISTOGRAM_2D_GET = { &_AIDA_HISTOGRAM_2D_NEW,
 "/AIDA/HISTOGRAM/2D/GET", "GET", 0, 3, 2, 2,
 _AIDA_HISTOGRAM_2D_GET_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_HISTOGRAM_2D_GET_guidance, 3,
 _AIDA_HISTOGRAM_2D_GET_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static char *_AIDA_HISTOGRAM_2D_guidance[] = { "Things specific to 1D histos."
 };
static KmMenu _AIDA_HISTOGRAM_2D = {  (KmMenu*)0,  (KmMenu*)0,
 "/AIDA/HISTOGRAM/2D", "2D", 3, &_AIDA_HISTOGRAM_2D_GET, 1,
 _AIDA_HISTOGRAM_2D_guidance, 0, (char**)0, 0, (char**)0 };

static char *_AIDA_HISTOGRAM_1D_guidance[] = { "Things specific to 1D histos."
 };
static KmMenu _AIDA_HISTOGRAM_1D = { &_AIDA_HISTOGRAM_2D,  (KmMenu*)0,
 "/AIDA/HISTOGRAM/1D", "1D", 3, &_AIDA_HISTOGRAM_1D_GET, 1,
 _AIDA_HISTOGRAM_1D_guidance, 0, (char**)0, 0, (char**)0 };

static KmParameter _AIDA_HISTOGRAM_DELETE_NAME = { "NAME", 4,
 "Histogram name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_HISTOGRAM_DELETE_parameters[] = {
 &_AIDA_HISTOGRAM_DELETE_NAME };
static char *_AIDA_HISTOGRAM_DELETE_guidance[] = {
 "Delete histogram in memory." };
static char *_AIDA_HISTOGRAM_DELETE_keyword[] = { "delete" };
static KmCommand _AIDA_HISTOGRAM_DELETE = {  (KmCommand*)0,
 "/AIDA/HISTOGRAM/DELETE", "DELETE", 0, 2, 1, 1,
 _AIDA_HISTOGRAM_DELETE_parameters, 1, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_HISTOGRAM_DELETE_guidance, 1,
 _AIDA_HISTOGRAM_DELETE_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_HISTOGRAM_SHOW_NAME = { "NAME", 4, "Histogram name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)2,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_HISTOGRAM_SHOW_parameters[] = {
 &_AIDA_HISTOGRAM_SHOW_NAME };
static char *_AIDA_HISTOGRAM_SHOW_guidance[] = { "Plot an histogram." };
static char *_AIDA_HISTOGRAM_SHOW_keyword[] = { "graphics", "draw", "channel",
 "axis" };
static KmCommand _AIDA_HISTOGRAM_SHOW = { &_AIDA_HISTOGRAM_DELETE,
 "/AIDA/HISTOGRAM/SHOW", "SHOW", 0, 2, 1, 1, _AIDA_HISTOGRAM_SHOW_parameters,
 1, 0, (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _AIDA_HISTOGRAM_SHOW_guidance, 4, _AIDA_HISTOGRAM_SHOW_keyword, 0, (char**)0,
 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_TUPLE_PROJECT_2D_NAMET = { "NAMET", 5, "Tuple name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_2D_NAMEH = { "NAMEH", 5,
 "Histo name to fill", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_2D_XEXP = { "XEXP", 4,
 "Expression of tuple variables to X fill histogram", (char*)0, (char*)0, 20,
 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_2D_YEXP = { "YEXP", 4,
 "Expression of tuple variables to Y fill histogram", (char*)0, (char*)0, 20,
 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_2D_CUT = { "CUT", 3,
 "Cuts over tuple variables", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_TUPLE_PROJECT_2D_parameters[] = {
 &_AIDA_TUPLE_PROJECT_2D_NAMET, &_AIDA_TUPLE_PROJECT_2D_NAMEH,
 &_AIDA_TUPLE_PROJECT_2D_XEXP, &_AIDA_TUPLE_PROJECT_2D_YEXP,
 &_AIDA_TUPLE_PROJECT_2D_CUT };
static char *_AIDA_TUPLE_PROJECT_2D_guidance[] = {
 "Project a tuple onto a 1-Dim.",
 "The histogram is not reset before filling. This allows",
 "several PROJECTs from different tuples." };
static char *_AIDA_TUPLE_PROJECT_2D_keyword[] = { "projection" };
static KmCommand _AIDA_TUPLE_PROJECT_2D = {  (KmCommand*)0,
 "/AIDA/TUPLE/PROJECT/2D", "2D", 0, 3, 5, 4,
 _AIDA_TUPLE_PROJECT_2D_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 3, _AIDA_TUPLE_PROJECT_2D_guidance, 1,
 _AIDA_TUPLE_PROJECT_2D_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_TUPLE_PROJECT_1D_NAMET = { "NAMET", 5, "Tuple name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_1D_NAMEH = { "NAMEH", 5,
 "Histo name to fill", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_1D_EXP = { "EXP", 3,
 "Expression of tuple variables to fill histogram", (char*)0, (char*)0, 20, 0,
 (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_TUPLE_PROJECT_1D_CUT = { "CUT", 3,
 "Cuts over tuple variables", (char*)0, (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_TUPLE_PROJECT_1D_parameters[] = {
 &_AIDA_TUPLE_PROJECT_1D_NAMET, &_AIDA_TUPLE_PROJECT_1D_NAMEH,
 &_AIDA_TUPLE_PROJECT_1D_EXP, &_AIDA_TUPLE_PROJECT_1D_CUT };
static char *_AIDA_TUPLE_PROJECT_1D_guidance[] = {
 "Project a tuple onto a 1-Dim.",
 "The histogram is not reset before filling. This allows",
 "several PROJECTs from different tuples." };
static char *_AIDA_TUPLE_PROJECT_1D_keyword[] = { "projection" };
static KmCommand _AIDA_TUPLE_PROJECT_1D = { &_AIDA_TUPLE_PROJECT_2D,
 "/AIDA/TUPLE/PROJECT/1D", "1D", 0, 3, 4, 3,
 _AIDA_TUPLE_PROJECT_1D_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 3, _AIDA_TUPLE_PROJECT_1D_guidance, 1,
 _AIDA_TUPLE_PROJECT_1D_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static char *_AIDA_TUPLE_PROJECT_guidance[] = {
 "Projection of a tuple over an histogram." };
static KmMenu _AIDA_TUPLE_PROJECT = {  (KmMenu*)0,  (KmMenu*)0,
 "/AIDA/TUPLE/PROJECT", "PROJECT", 3, &_AIDA_TUPLE_PROJECT_1D, 1,
 _AIDA_TUPLE_PROJECT_guidance, 0, (char**)0, 0, (char**)0 };

static KmParameter _AIDA_TUPLE_SHOW_NAME = { "NAME", 4, "Tuple name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_TUPLE_SHOW_parameters[] = { &_AIDA_TUPLE_SHOW_NAME };
static char *_AIDA_TUPLE_SHOW_guidance[] = { "Print a summary about a tuple.",
 "Number of entries, variables names and limits are listed." };
static char *_AIDA_TUPLE_SHOW_keyword[] = { "printer", "plotter" };
static KmCommand _AIDA_TUPLE_SHOW = {  (KmCommand*)0, "/AIDA/TUPLE/SHOW",
 "SHOW", 0, 2, 1, 1, _AIDA_TUPLE_SHOW_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 2, _AIDA_TUPLE_SHOW_guidance, 2,
 _AIDA_TUPLE_SHOW_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_TUPLE_DELETE_NAME = { "NAME", 4, "Tuple name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_TUPLE_DELETE_parameters[] = {
 &_AIDA_TUPLE_DELETE_NAME };
static char *_AIDA_TUPLE_DELETE_guidance[] = { "Delete a tuple." };
static KmCommand _AIDA_TUPLE_DELETE = { &_AIDA_TUPLE_SHOW,
 "/AIDA/TUPLE/DELETE", "DELETE", 0, 2, 1, 1, _AIDA_TUPLE_DELETE_parameters, 0,
 0, (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _AIDA_TUPLE_DELETE_guidance, 0, (char**)0, 0, (char**)0, 0, (char**)0,
 (char*)0, (int*)0 };

static KmParameter _AIDA_TUPLE_GET_NAME = { "NAME", 4, "Tuple name", (char*)0,
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _AIDA_TUPLE_GET_TREENAME = { "TREENAME", 8, "Tree name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_TUPLE_GET_parameters[] = { &_AIDA_TUPLE_GET_NAME,
 &_AIDA_TUPLE_GET_TREENAME };
static char *_AIDA_TUPLE_GET_guidance[] = {
 "Read tuple from the current data base directory to memory." };
static char *_AIDA_TUPLE_GET_keyword[] = { "Read", "memory", "disk" };
static KmCommand _AIDA_TUPLE_GET = { &_AIDA_TUPLE_DELETE, "/AIDA/TUPLE/GET",
 "GET", 0, 2, 2, 2, _AIDA_TUPLE_GET_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_TUPLE_GET_guidance, 3,
 _AIDA_TUPLE_GET_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_FUNCTION_NEW_NAME = { "NAME", 4, "Function name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_FUNCTION_NEW_LABEL = { "LABEL", 5, "Label", " ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _AIDA_FUNCTION_NEW_TYPE = { "TYPE", 4, "Type", "Gaussian",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_AIDA_FUNCTION_NEW_parameters[] = {
 &_AIDA_FUNCTION_NEW_NAME, &_AIDA_FUNCTION_NEW_LABEL, &_AIDA_FUNCTION_NEW_TYPE
 };
static char *_AIDA_FUNCTION_NEW_guidance[] = { "Create a fit function." };
static char *_AIDA_FUNCTION_NEW_keyword[] = { "fit" };
static KmCommand _AIDA_FUNCTION_NEW = {  (KmCommand*)0, "/AIDA/FUNCTION/NEW",
 "NEW", 0, 2, 3, 1, _AIDA_FUNCTION_NEW_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_FUNCTION_NEW_guidance, 1,
 _AIDA_FUNCTION_NEW_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_FUNCTION_DELETE_NAME = { "NAME", 4, "Function name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_FUNCTION_DELETE_parameters[] = {
 &_AIDA_FUNCTION_DELETE_NAME };
static char *_AIDA_FUNCTION_DELETE_guidance[] = { "Delete function in memory."
 };
static char *_AIDA_FUNCTION_DELETE_keyword[] = { "delete" };
static KmCommand _AIDA_FUNCTION_DELETE = { &_AIDA_FUNCTION_NEW,
 "/AIDA/FUNCTION/DELETE", "DELETE", 0, 2, 1, 1,
 _AIDA_FUNCTION_DELETE_parameters, 1, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_FUNCTION_DELETE_guidance, 1,
 _AIDA_FUNCTION_DELETE_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_FUNCTION_SHOW_NAME = { "NAME", 4, "Function name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)2,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_FUNCTION_SHOW_parameters[] = {
 &_AIDA_FUNCTION_SHOW_NAME };
static char *_AIDA_FUNCTION_SHOW_guidance[] = { "Plot a function." };
static char *_AIDA_FUNCTION_SHOW_keyword[] = { "graphics", "draw", "channel",
 "axis" };
static KmCommand _AIDA_FUNCTION_SHOW = { &_AIDA_FUNCTION_DELETE,
 "/AIDA/FUNCTION/SHOW", "SHOW", 0, 2, 1, 1, _AIDA_FUNCTION_SHOW_parameters, 1,
 0, (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _AIDA_FUNCTION_SHOW_guidance, 4, _AIDA_FUNCTION_SHOW_keyword, 0, (char**)0,
 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_FITRESULT_DELETE_NAME = { "NAME", 4,
 "Fit result name", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_FITRESULT_DELETE_parameters[] = {
 &_AIDA_FITRESULT_DELETE_NAME };
static char *_AIDA_FITRESULT_DELETE_keyword[] = { "delete" };
static KmCommand _AIDA_FITRESULT_DELETE = {  (KmCommand*)0,
 "/AIDA/FITRESULT/DELETE", "DELETE", 0, 2, 1, 1,
 _AIDA_FITRESULT_DELETE_parameters, 1, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 1,
 _AIDA_FITRESULT_DELETE_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_FITTER_FIT_NAME = { "NAME", 4, "Fitter name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_FITTER_FIT_TYPE = { "TYPE", 4, "Fitting type",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_FITTER_FIT_NAMEH = { "NAMEH", 5, "Histogram name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_FITTER_FIT_NAMER = { "NAMER", 5, "Fit result name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_FITTER_FIT_parameters[] = { &_AIDA_FITTER_FIT_NAME,
 &_AIDA_FITTER_FIT_TYPE, &_AIDA_FITTER_FIT_NAMEH, &_AIDA_FITTER_FIT_NAMER };
static char *_AIDA_FITTER_FIT_guidance[] = { "Fit over an histogram." };
static char *_AIDA_FITTER_FIT_keyword[] = { "fit", "histogram" };
static KmCommand _AIDA_FITTER_FIT = {  (KmCommand*)0, "/AIDA/FITTER/FIT",
 "FIT", 0, 2, 4, 4, _AIDA_FITTER_FIT_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_FITTER_FIT_guidance, 2,
 _AIDA_FITTER_FIT_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_FITTER_DELETE_NAME = { "NAME", 4, "Fitter name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_FITTER_DELETE_parameters[] = {
 &_AIDA_FITTER_DELETE_NAME };
static char *_AIDA_FITTER_DELETE_keyword[] = { "delete" };
static KmCommand _AIDA_FITTER_DELETE = { &_AIDA_FITTER_FIT,
 "/AIDA/FITTER/DELETE", "DELETE", 0, 2, 1, 1, _AIDA_FITTER_DELETE_parameters,
 1, 0, (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0,
 1, _AIDA_FITTER_DELETE_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0
 };

static KmParameter _AIDA_FITTER_NEW_NAME = { "NAME", 4, "Name of the fitter",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_FITTER_NEW_parameters[] = { &_AIDA_FITTER_NEW_NAME };
static char *_AIDA_FITTER_NEW_guidance[] = { "Create a fitter." };
static char *_AIDA_FITTER_NEW_keyword[] = { "new", "create" };
static KmCommand _AIDA_FITTER_NEW = { &_AIDA_FITTER_DELETE,
 "/AIDA/FITTER/NEW", "NEW", 0, 2, 1, 1, _AIDA_FITTER_NEW_parameters, 0, 0,
 (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _AIDA_FITTER_NEW_guidance, 2, _AIDA_FITTER_NEW_keyword, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_REGION_SETPARAMETER_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_REGION_SETPARAMETER_PARAMETER = {
 "PARAMETER", 9, "Parameter name", " ", (char*)0, 20, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_REGION_SETPARAMETER_VALUE = { "VALUE", 5,
 "Parameter value", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_REGION_SETPARAMETER_parameters[] = {
 &_AIDA_PLOTTER_REGION_SETPARAMETER_NAME,
 &_AIDA_PLOTTER_REGION_SETPARAMETER_PARAMETER,
 &_AIDA_PLOTTER_REGION_SETPARAMETER_VALUE };
static char *_AIDA_PLOTTER_REGION_SETPARAMETER_guidance[] = {
 "Set plotter region parameter." };
static char *_AIDA_PLOTTER_REGION_SETPARAMETER_keyword[] = { "parameter" };
static KmCommand _AIDA_PLOTTER_REGION_SETPARAMETER = {  (KmCommand*)0,
 "/AIDA/PLOTTER/REGION/SETPARAMETER", "SETPARAMETER", 0, 3, 3, 3,
 _AIDA_PLOTTER_REGION_SETPARAMETER_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_PLOTTER_REGION_SETPARAMETER_guidance,
 1, _AIDA_PLOTTER_REGION_SETPARAMETER_keyword, 0, (char**)0, 0, (char**)0,
 (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_REGION_CLEAR_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_REGION_CLEAR_parameters[] = {
 &_AIDA_PLOTTER_REGION_CLEAR_NAME };
static KmCommand _AIDA_PLOTTER_REGION_CLEAR = {
 &_AIDA_PLOTTER_REGION_SETPARAMETER, "/AIDA/PLOTTER/REGION/CLEAR", "CLEAR", 0,
 3, 1, 1, _AIDA_PLOTTER_REGION_CLEAR_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 0, (char**)0, 0,
 (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_REGION_SET_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParInt    _AIDA_PLOTTER_REGION_SET_N_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_SET_N = { "N", 1,
 "Region ID to set as current one", "0", (char*)0, 8, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_INT, &_AIDA_PLOTTER_REGION_SET_N_type };
static KmParameter *_AIDA_PLOTTER_REGION_SET_parameters[] = {
 &_AIDA_PLOTTER_REGION_SET_NAME, &_AIDA_PLOTTER_REGION_SET_N };
static char *_AIDA_PLOTTER_REGION_SET_guidance[] = {
 "Set current region in a page." };
static KmCommand _AIDA_PLOTTER_REGION_SET = { &_AIDA_PLOTTER_REGION_CLEAR,
 "/AIDA/PLOTTER/REGION/SET", "SET", 0, 3, 2, 1,
 _AIDA_PLOTTER_REGION_SET_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_PLOTTER_REGION_SET_guidance, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_REGION_CREATE_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParReal   _AIDA_PLOTTER_REGION_CREATE_X_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_CREATE_X = { "X", 1, "x", "0",
 (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_PLOTTER_REGION_CREATE_X_type };
static KmParReal   _AIDA_PLOTTER_REGION_CREATE_Y_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_CREATE_Y = { "Y", 1, "y", "0",
 (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_PLOTTER_REGION_CREATE_Y_type };
static KmParReal   _AIDA_PLOTTER_REGION_CREATE_W_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_CREATE_W = { "W", 1, "width", "1",
 (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_PLOTTER_REGION_CREATE_W_type };
static KmParReal   _AIDA_PLOTTER_REGION_CREATE_H_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_CREATE_H = { "H", 1, "height", "1",
 (char*)0, 12, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_REAL,
 &_AIDA_PLOTTER_REGION_CREATE_H_type };
static KmParameter *_AIDA_PLOTTER_REGION_CREATE_parameters[] = {
 &_AIDA_PLOTTER_REGION_CREATE_NAME, &_AIDA_PLOTTER_REGION_CREATE_X,
 &_AIDA_PLOTTER_REGION_CREATE_Y, &_AIDA_PLOTTER_REGION_CREATE_W,
 &_AIDA_PLOTTER_REGION_CREATE_H };
static char *_AIDA_PLOTTER_REGION_CREATE_guidance[] = { "Create a region" };
static KmCommand _AIDA_PLOTTER_REGION_CREATE = { &_AIDA_PLOTTER_REGION_SET,
 "/AIDA/PLOTTER/REGION/CREATE", "CREATE", 0, 3, 5, 1,
 _AIDA_PLOTTER_REGION_CREATE_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_PLOTTER_REGION_CREATE_guidance, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_REGION_GRID_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParInt    _AIDA_PLOTTER_REGION_GRID_NC_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_GRID_NC = { "NC", 2,
 "Number of columns", "1", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_AIDA_PLOTTER_REGION_GRID_NC_type };
static KmParInt    _AIDA_PLOTTER_REGION_GRID_NR_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_GRID_NR = { "NR", 2, "Number of rows",
 "1", (char*)0, 8, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_INT,
 &_AIDA_PLOTTER_REGION_GRID_NR_type };
static KmParInt    _AIDA_PLOTTER_REGION_GRID_I_type = { (char*)0, (char*)0,
 (char*)0, (char*)0, 0 };
static KmParameter _AIDA_PLOTTER_REGION_GRID_I = { "I", 1,
 "Index of current region", "0", (char*)0, 8, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_INT, &_AIDA_PLOTTER_REGION_GRID_I_type };
static KmParameter *_AIDA_PLOTTER_REGION_GRID_parameters[] = {
 &_AIDA_PLOTTER_REGION_GRID_NAME, &_AIDA_PLOTTER_REGION_GRID_NC,
 &_AIDA_PLOTTER_REGION_GRID_NR, &_AIDA_PLOTTER_REGION_GRID_I };
static char *_AIDA_PLOTTER_REGION_GRID_guidance[] = {
 "Create a grid of regions" };
static KmCommand _AIDA_PLOTTER_REGION_GRID = { &_AIDA_PLOTTER_REGION_CREATE,
 "/AIDA/PLOTTER/REGION/GRID", "GRID", 0, 3, 4, 1,
 _AIDA_PLOTTER_REGION_GRID_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_PLOTTER_REGION_GRID_guidance, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_PLOT_FITRESULT_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_PLOT_FITRESULT_NAMER = { "NAMER", 5,
 "Fit result to plot", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_PLOT_FITRESULT_parameters[] = {
 &_AIDA_PLOTTER_PLOT_FITRESULT_NAME, &_AIDA_PLOTTER_PLOT_FITRESULT_NAMER };
static char *_AIDA_PLOTTER_PLOT_FITRESULT_keyword[] = { "plot", "draw", "fit",
 "result" };
static KmCommand _AIDA_PLOTTER_PLOT_FITRESULT = {  (KmCommand*)0,
 "/AIDA/PLOTTER/PLOT/FITRESULT", "FITRESULT", 0, 3, 2, 2,
 _AIDA_PLOTTER_PLOT_FITRESULT_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 4,
 _AIDA_PLOTTER_PLOT_FITRESULT_keyword, 0, (char**)0, 0, (char**)0, (char*)0,
 (int*)0 };

static KmParameter _AIDA_PLOTTER_PLOT_FUNCTION_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_PLOT_FUNCTION_NAMEF = { "NAMEF", 5,
 "Function to plot", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_PLOT_FUNCTION_parameters[] = {
 &_AIDA_PLOTTER_PLOT_FUNCTION_NAME, &_AIDA_PLOTTER_PLOT_FUNCTION_NAMEF };
static char *_AIDA_PLOTTER_PLOT_FUNCTION_keyword[] = { "plot", "draw",
 "function" };
static KmCommand _AIDA_PLOTTER_PLOT_FUNCTION = {
 &_AIDA_PLOTTER_PLOT_FITRESULT, "/AIDA/PLOTTER/PLOT/FUNCTION", "FUNCTION", 0,
 3, 2, 2, _AIDA_PLOTTER_PLOT_FUNCTION_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 3,
 _AIDA_PLOTTER_PLOT_FUNCTION_keyword, 0, (char**)0, 0, (char**)0, (char*)0,
 (int*)0 };

static KmParameter _AIDA_PLOTTER_PLOT_HISTOGRAM_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_PLOT_HISTOGRAM_NAMEH = { "NAMEH", 5,
 "Histogram to plot", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_PLOT_HISTOGRAM_parameters[] = {
 &_AIDA_PLOTTER_PLOT_HISTOGRAM_NAME, &_AIDA_PLOTTER_PLOT_HISTOGRAM_NAMEH };
static char *_AIDA_PLOTTER_PLOT_HISTOGRAM_keyword[] = { "plot", "draw",
 "histogram" };
static KmCommand _AIDA_PLOTTER_PLOT_HISTOGRAM = {
 &_AIDA_PLOTTER_PLOT_FUNCTION, "/AIDA/PLOTTER/PLOT/HISTOGRAM", "HISTOGRAM", 0,
 3, 2, 2, _AIDA_PLOTTER_PLOT_HISTOGRAM_parameters, 0, 0, (SUBROUTINE*)0,
 onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 3,
 _AIDA_PLOTTER_PLOT_HISTOGRAM_keyword, 0, (char**)0, 0, (char**)0, (char*)0,
 (int*)0 };

static char *_AIDA_PLOTTER_PLOT_guidance[] = { "Things specific to 1D histos."
 };
static KmMenu _AIDA_PLOTTER_PLOT = {  (KmMenu*)0,  (KmMenu*)0,
 "/AIDA/PLOTTER/PLOT", "PLOT", 3, &_AIDA_PLOTTER_PLOT_HISTOGRAM, 1,
 _AIDA_PLOTTER_PLOT_guidance, 0, (char**)0, 0, (char**)0 };

static char *_AIDA_PLOTTER_REGION_guidance[] = {
 "Things specific to 1D histos." };
static KmMenu _AIDA_PLOTTER_REGION = { &_AIDA_PLOTTER_PLOT,  (KmMenu*)0,
 "/AIDA/PLOTTER/REGION", "REGION", 3, &_AIDA_PLOTTER_REGION_GRID, 1,
 _AIDA_PLOTTER_REGION_guidance, 0, (char**)0, 0, (char**)0 };

static KmParameter _AIDA_PLOTTER_SETPARAMETER_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_SETPARAMETER_PARAMETER = { "PARAMETER", 9,
 "Parameter name", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_SETPARAMETER_VALUE = { "VALUE", 5,
 "Parameter value", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_SETPARAMETER_parameters[] = {
 &_AIDA_PLOTTER_SETPARAMETER_NAME, &_AIDA_PLOTTER_SETPARAMETER_PARAMETER,
 &_AIDA_PLOTTER_SETPARAMETER_VALUE };
static char *_AIDA_PLOTTER_SETPARAMETER_guidance[] = {
 "Set plotter parameter." };
static char *_AIDA_PLOTTER_SETPARAMETER_keyword[] = { "parameter" };
static KmCommand _AIDA_PLOTTER_SETPARAMETER = {  (KmCommand*)0,
 "/AIDA/PLOTTER/SETPARAMETER", "SETPARAMETER", 0, 2, 3, 3,
 _AIDA_PLOTTER_SETPARAMETER_parameters, 0, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _AIDA_PLOTTER_SETPARAMETER_guidance, 1,
 _AIDA_PLOTTER_SETPARAMETER_keyword, 0, (char**)0, 0, (char**)0, (char*)0,
 (int*)0 };

static char *_AIDA_PLOTTER_NEXT_guidance[] = {
 "Set current region to the next one." };
static KmCommand _AIDA_PLOTTER_NEXT = { &_AIDA_PLOTTER_SETPARAMETER,
 "/AIDA/PLOTTER/NEXT", "NEXT", 0, 2, 0, 0, (KmParameter**)0, 0, 0,
 (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _AIDA_PLOTTER_NEXT_guidance, 0, (char**)0, 0, (char**)0, 0, (char**)0,
 (char*)0, (int*)0 };

static KmCommand _AIDA_PLOTTER_CLEAR = { &_AIDA_PLOTTER_NEXT,
 "/AIDA/PLOTTER/CLEAR", "CLEAR", 0, 2, 0, 0, (KmParameter**)0, 0, 0,
 (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_DELETE_NAME = { "NAME", 4, "plotter name",
 (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_AIDA_PLOTTER_DELETE_parameters[] = {
 &_AIDA_PLOTTER_DELETE_NAME };
static char *_AIDA_PLOTTER_DELETE_keyword[] = { "delete" };
static KmCommand _AIDA_PLOTTER_DELETE = { &_AIDA_PLOTTER_CLEAR,
 "/AIDA/PLOTTER/DELETE", "DELETE", 0, 2, 1, 1,
 _AIDA_PLOTTER_DELETE_parameters, 1, 0, (SUBROUTINE*)0, onxlab_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 1, _AIDA_PLOTTER_DELETE_keyword,
 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _AIDA_PLOTTER_NEW_NAME = { "NAME", 4,
 "Name of the plotter", (char*)0, (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _AIDA_PLOTTER_NEW_WIDGET = { "WIDGET", 6, "Widget name",
 " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_AIDA_PLOTTER_NEW_parameters[] = {
 &_AIDA_PLOTTER_NEW_NAME, &_AIDA_PLOTTER_NEW_WIDGET };
static char *_AIDA_PLOTTER_NEW_guidance[] = {
 "Create a plotter or find one in a GUI." };
static char *_AIDA_PLOTTER_NEW_keyword[] = { "new", "create" };
static KmCommand _AIDA_PLOTTER_NEW = { &_AIDA_PLOTTER_DELETE,
 "/AIDA/PLOTTER/NEW", "NEW", 0, 2, 2, 1, _AIDA_PLOTTER_NEW_parameters, 0, 0,
 (SUBROUTINE*)0, onxlab_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _AIDA_PLOTTER_NEW_guidance, 2, _AIDA_PLOTTER_NEW_keyword, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static char *_AIDA_PLOTTER_guidance[] = { "Manipulation of plotters." };
static char *_AIDA_PLOTTER_keyword[] = { "plotter" };
static KmMenu _AIDA_PLOTTER = {  (KmMenu*)0, &_AIDA_PLOTTER_REGION,
 "/AIDA/PLOTTER", "PLOTTER", 2, &_AIDA_PLOTTER_NEW, 1, _AIDA_PLOTTER_guidance,
 1, _AIDA_PLOTTER_keyword, 0, (char**)0 };

static char *_AIDA_FITTER_guidance[] = { "Manipulation of fitters." };
static char *_AIDA_FITTER_keyword[] = { "fitter" };
static KmMenu _AIDA_FITTER = { &_AIDA_PLOTTER,  (KmMenu*)0, "/AIDA/FITTER",
 "FITTER", 2, &_AIDA_FITTER_NEW, 1, _AIDA_FITTER_guidance, 1,
 _AIDA_FITTER_keyword, 0, (char**)0 };

static char *_AIDA_FITRESULT_guidance[] = { "Manipulation of fitters." };
static char *_AIDA_FITRESULT_keyword[] = { "fitter" };
static KmMenu _AIDA_FITRESULT = { &_AIDA_FITTER,  (KmMenu*)0,
 "/AIDA/FITRESULT", "FITRESULT", 2, &_AIDA_FITRESULT_DELETE, 1,
 _AIDA_FITRESULT_guidance, 1, _AIDA_FITRESULT_keyword, 0, (char**)0 };

static char *_AIDA_FUNCTION_guidance[] = { "Manipulation of functions." };
static char *_AIDA_FUNCTION_keyword[] = { "function" };
static KmMenu _AIDA_FUNCTION = { &_AIDA_FITRESULT,  (KmMenu*)0,
 "/AIDA/FUNCTION", "FUNCTION", 2, &_AIDA_FUNCTION_SHOW, 1,
 _AIDA_FUNCTION_guidance, 1, _AIDA_FUNCTION_keyword, 0, (char**)0 };

static char *_AIDA_TUPLE_guidance[] = { "Tuple related operations." };
static KmMenu _AIDA_TUPLE = { &_AIDA_FUNCTION, &_AIDA_TUPLE_PROJECT,
 "/AIDA/TUPLE", "TUPLE", 2, &_AIDA_TUPLE_GET, 1, _AIDA_TUPLE_guidance, 0,
 (char**)0, 0, (char**)0 };

static char *_AIDA_HISTOGRAM_guidance[] = { "Manipulation of histograms." };
static char *_AIDA_HISTOGRAM_keyword[] = { "histo" };
static KmMenu _AIDA_HISTOGRAM = { &_AIDA_TUPLE, &_AIDA_HISTOGRAM_1D,
 "/AIDA/HISTOGRAM", "HISTOGRAM", 2, &_AIDA_HISTOGRAM_SHOW, 1,
 _AIDA_HISTOGRAM_guidance, 1, _AIDA_HISTOGRAM_keyword, 0, (char**)0 };

static char *_AIDA_TREE_guidance[] = { "Interfaces to data base." };
static KmMenu _AIDA_TREE = { &_AIDA_HISTOGRAM, &_AIDA_TREE_RIO, "/AIDA/TREE",
 "TREE", 2, &_AIDA_TREE_DELETE, 1, _AIDA_TREE_guidance, 0, (char**)0, 0,
 (char**)0 };

static KmMenu _AIDA = {  (KmMenu*)0, &_AIDA_TREE, "/AIDA", "AIDA", 1, 
 (KmCommand*)0, 0, (char**)0, 0, (char**)0, 0, (char**)0 };

  klnkmenu( &_AIDA, 950303 );
}


