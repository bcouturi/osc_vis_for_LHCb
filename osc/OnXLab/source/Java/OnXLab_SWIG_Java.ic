/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN AIDA::ITree *AIDA_IAnalysisFactory_find_memoryTree(AIDA::IAnalysisFactory *self){
    return amanip::find_mem(*self);
  }
SWIGINTERN AIDA::ITree *AIDA_IAnalysisFactory_create_tree__SWIG_0(AIDA::IAnalysisFactory *self,std::string const &aStoreName,std::string const &aStoreType,bool aReadOnly,bool aCreateNew,std::string const &aOptions=""){
    return amanip::create_tree(*self,aStoreName,aStoreType,
	  	       aReadOnly,aCreateNew,aOptions);
  }
SWIGINTERN AIDA::IHistogram1D *AIDA_IAnalysisFactory_create_histogram1D(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aName,std::string const &aTitle,int aXnumber,double aXmin,double aXmax){
    return amanip::create_histogram_1D(*self,aTree,aName,aTitle,
                              aXnumber,aXmin,aXmax);
  }
SWIGINTERN AIDA::IHistogram1D *AIDA_IAnalysisFactory_copy_histogram1D(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aPath,AIDA::IHistogram1D &aHisto){
    return amanip::copy_histogram_1D(*self,aTree,aPath,aHisto);
  }
SWIGINTERN AIDA::IHistogram2D *AIDA_IAnalysisFactory_copy_histogram2D(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aPath,AIDA::IHistogram2D &aHisto){
    return amanip::copy_histogram_2D(*self,aTree,aPath,aHisto);
  }
SWIGINTERN AIDA::IBaseHistogram *AIDA_IAnalysisFactory_copy_baseHistogram(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aPath,AIDA::IBaseHistogram &aHisto){
    return amanip::copy_base_histogram(*self,aTree,aPath,aHisto);
  }
SWIGINTERN AIDA::IHistogram2D *AIDA_IAnalysisFactory_create_histogram2D(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aName,std::string const &aTitle,int aXnumber,double aXmin,double aXmax,int aYnumber,double aYmin,double aYmax){
    return amanip::create_histogram_2D(*self,aTree,aName,aTitle,
                              aXnumber,aXmin,aXmax,
                              aYnumber,aYmin,aYmax);
  }
SWIGINTERN AIDA::IHistogram3D *AIDA_IAnalysisFactory_create_histogram3D(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aName,std::string const &aTitle,int aXnumber,double aXmin,double aXmax,int aYnumber,double aYmin,double aYmax,int aZnumber,double aZmin,double aZmax){
    return amanip::create_histogram_3D(*self,aTree,aName,aTitle,
                              aXnumber,aXmin,aXmax,
                              aYnumber,aYmin,aYmax,
                              aZnumber,aZmin,aZmax);
  }
SWIGINTERN AIDA::ICloud2D *AIDA_IAnalysisFactory_create_cloud2D__SWIG_0(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aName,std::string const &aTitle,int aLimit=-1,std::string const &aOptions=""){
    return amanip::create_cloud_2D
             (*self,aTree,aName,aTitle,aLimit,aOptions);
  }
SWIGINTERN AIDA::IDataPointSet *AIDA_IAnalysisFactory_create_dataPointSet(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aName,std::string const &aTitle,int aDimension){
    return amanip::create_data_point_set
             (*self,aTree,aName,aTitle,aDimension);
  }
SWIGINTERN AIDA::IFitter *AIDA_IAnalysisFactory_create_fitter__SWIG_0(AIDA::IAnalysisFactory *self,std::string const &aEngine=""){
    return amanip::create_fitter(*self,aEngine);
  }
SWIGINTERN AIDA::IFunction *AIDA_IAnalysisFactory_create_function(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aPath,std::string const &aTitle,std::string const &aModel){
    return amanip::create_function(*self,aTree,aPath,aTitle,aModel);
  }
SWIGINTERN AIDA::IFunction *AIDA_IAnalysisFactory_create_scripted_function(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aName,int aDimension,std::string const &aScript){
    return amanip::create_scripted_function
             (*self,aTree,aName,aDimension,aScript);
  }
SWIGINTERN AIDA::ITuple *AIDA_IAnalysisFactory_create_tuple__SWIG_0(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aPath,std::string const &aTitle,std::string const &aColumnNames,std::string const &aOptions=""){
    return amanip::create_tuple
             (*self,aTree,aPath,aTitle,aColumnNames,aOptions);
  }
SWIGINTERN AIDA::IFilter *AIDA_IAnalysisFactory_create_filter(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aExpression){
    return amanip::create_filter(*self,aTree,aExpression);
  }
SWIGINTERN AIDA::IEvaluator *AIDA_IAnalysisFactory_create_evaluator(AIDA::IAnalysisFactory *self,AIDA::ITree &aTree,std::string const &aExpression){
    return amanip::create_evaluator(*self,aTree,aExpression);
  }
SWIGINTERN AIDA::IPlotter *AIDA_IAnalysisFactory_create_plotter(AIDA::IAnalysisFactory *self,std::string const &aWhere){
    return amanip::create_plotter(*self,aWhere);
  }
SWIGINTERN AIDA::IAnalysisFactory *AIDA_IAnalysisFactory_create(){
    return new OnXLab::Main(); 
  }
SWIGINTERN AIDA::IHistogram1D *AIDA_IBaseHistogram_cast_IHistogram1D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::IHistogram1D);
  }
SWIGINTERN AIDA::IHistogram2D *AIDA_IBaseHistogram_cast_IHistogram2D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::IHistogram2D);
  }
SWIGINTERN AIDA::IHistogram3D *AIDA_IBaseHistogram_cast_IHistogram3D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::IHistogram3D);
  }
SWIGINTERN AIDA::IProfile1D *AIDA_IBaseHistogram_cast_IProfile1D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::IProfile1D);
  }
SWIGINTERN AIDA::IProfile2D *AIDA_IBaseHistogram_cast_IProfile2D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::IProfile2D);
  }
SWIGINTERN AIDA::ICloud1D *AIDA_IBaseHistogram_cast_ICloud1D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::ICloud1D);
  }
SWIGINTERN AIDA::ICloud2D *AIDA_IBaseHistogram_cast_ICloud2D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::ICloud2D);
  }
SWIGINTERN AIDA::ICloud3D *AIDA_IBaseHistogram_cast_ICloud3D(AIDA::IBaseHistogram *self){
    return INLIB_CAST(*self,AIDA::ICloud3D);
  }
SWIGINTERN AIDA::IBaseHistogram *AIDA_IManagedObject_cast_IBaseHistogram(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IBaseHistogram);
  }
SWIGINTERN AIDA::IHistogram1D *AIDA_IManagedObject_cast_IHistogram1D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IHistogram1D);
  }
SWIGINTERN AIDA::IHistogram2D *AIDA_IManagedObject_cast_IHistogram2D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IHistogram2D);
  }
SWIGINTERN AIDA::IHistogram3D *AIDA_IManagedObject_cast_IHistogram3D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IHistogram3D);
  }
SWIGINTERN AIDA::IProfile1D *AIDA_IManagedObject_cast_IProfile1D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IProfile1D);
  }
SWIGINTERN AIDA::IProfile2D *AIDA_IManagedObject_cast_IProfile2D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IProfile2D);
  }
SWIGINTERN AIDA::ICloud1D *AIDA_IManagedObject_cast_ICloud1D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::ICloud1D);
  }
SWIGINTERN AIDA::ICloud2D *AIDA_IManagedObject_cast_ICloud2D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::ICloud2D);
  }
SWIGINTERN AIDA::ICloud3D *AIDA_IManagedObject_cast_ICloud3D(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::ICloud3D);
  }
SWIGINTERN AIDA::IDataPointSet *AIDA_IManagedObject_cast_IDataPointSet(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IDataPointSet);
  }
SWIGINTERN AIDA::ITuple *AIDA_IManagedObject_cast_ITuple(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::ITuple);
  }
SWIGINTERN AIDA::IFunction *AIDA_IManagedObject_cast_IFunction(AIDA::IManagedObject *self){
    return INLIB_CAST(*self,AIDA::IFunction);
  }
SWIGINTERN AIDA::IBaseHistogram *AIDA_ITree_find_baseHistogram(AIDA::ITree *self,std::string const &aName){
    return amanip::find_base_histogram(*self,aName);
  }
SWIGINTERN AIDA::IHistogram1D *AIDA_ITree_find_histogram1D(AIDA::ITree *self,std::string const &aName){
    return amanip::find_histogram_1D(*self,aName);
  }
SWIGINTERN AIDA::IHistogram2D *AIDA_ITree_find_histogram2D(AIDA::ITree *self,std::string const &aName){
    return amanip::find_histogram_2D(*self,aName);
  }
SWIGINTERN AIDA::IFunction *AIDA_ITree_find_function(AIDA::ITree *self,std::string const &aName){
    return amanip::find_function(*self,aName);
  }
SWIGINTERN AIDA::ITuple *AIDA_ITree_find_tuple(AIDA::ITree *self,std::string const &aName){
    return amanip::find_tuple(*self,aName);
  }
SWIGINTERN AIDA::ITuple *AIDA_ITupleEntry_cast_ITuple(AIDA::ITupleEntry *self){
    return dynamic_cast<AIDA::ITuple*>(self);
  }

AIDA::IAnalysisFactory* find_aida(Slash::Core::ISession& aSession){
  return Slash::find_AIDA(aSession);
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IANALYSISFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IAnalysisFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createTreeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITreeFactory *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  result = (AIDA::ITreeFactory *)(arg1)->createTreeFactory(); *(AIDA::ITreeFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createHistogramFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  AIDA::IHistogramFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::IHistogramFactory *)(arg1)->createHistogramFactory(*arg2); *(AIDA::IHistogramFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createDataPointSetFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  AIDA::IDataPointSetFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::IDataPointSetFactory *)(arg1)->createDataPointSetFactory(*arg2);
  *(AIDA::IDataPointSetFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createTupleFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  AIDA::ITupleFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::ITupleFactory *)(arg1)->createTupleFactory(*arg2); *(AIDA::ITupleFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createFunctionFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  AIDA::IFunctionFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::IFunctionFactory *)(arg1)->createFunctionFactory(*arg2); *(AIDA::IFunctionFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createPlotterFactory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; int arg2 ; char **arg3 = (char **) 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(char ***)&jarg3;  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createPlotterFactory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; int arg2 ; char **arg3 = (char **) 0 ;
  std::string *arg4 = 0 ; AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(char ***)&jarg3;  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2,arg3,(std::string const &)*arg4);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createPlotterFactory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; int arg2 ; char **arg3 = (char **) 0 ;
  AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = *(char ***)&jarg3;  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2,arg3);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createPlotterFactory_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; int arg2 ;
  AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  arg2 = (int)jarg2;  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createPlotterFactory_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::IPlotterFactory *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(); *(AIDA::IPlotterFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1createFitFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::IFitFactory *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  result = (AIDA::IFitFactory *)(arg1)->createFitFactory(); *(AIDA::IFitFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1find_1memoryTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  result = (AIDA::ITree *)AIDA_IAnalysisFactory_find_memoryTree(arg1); *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1tree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool arg4 ; bool arg5 ; std::string *arg6 = 0 ; AIDA::ITree *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false;  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::ITree *)AIDA_IAnalysisFactory_create_tree__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1tree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool arg4 ; bool arg5 ; AIDA::ITree *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false; 
  result = (AIDA::ITree *)AIDA_IAnalysisFactory_create_tree__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1histogram1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; int arg5 ; double arg6 ; double arg7 ; AIDA::IHistogram1D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  arg6 = (double)jarg6;  arg7 = (double)jarg7; 
  result = (AIDA::IHistogram1D *)AIDA_IAnalysisFactory_create_histogram1D(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1copy_1histogram1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::IHistogram1D *arg4 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg4_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(AIDA::IHistogram1D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)AIDA_IAnalysisFactory_copy_histogram1D(arg1,*arg2,(std::string const &)*arg3,*arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1copy_1histogram2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::IHistogram2D *arg4 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg4_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(AIDA::IHistogram2D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)AIDA_IAnalysisFactory_copy_histogram2D(arg1,*arg2,(std::string const &)*arg3,*arg4);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1copy_1baseHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::IBaseHistogram *arg4 = 0 ; AIDA::IBaseHistogram *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg4_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(AIDA::IBaseHistogram **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram & reference is null"); return 0; }  
  result = (AIDA::IBaseHistogram *)AIDA_IAnalysisFactory_copy_baseHistogram(arg1,*arg2,(std::string const &)*arg3,*arg4);
  *(AIDA::IBaseHistogram **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1histogram2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jint jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; int arg5 ; double arg6 ; double arg7 ; int arg8 ; double arg9 ; double arg10 ;
  AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  arg6 = (double)jarg6;  arg7 = (double)jarg7;  arg8 = (int)jarg8;  arg9 = (double)jarg9;  arg10 = (double)jarg10; 
  result = (AIDA::IHistogram2D *)AIDA_IAnalysisFactory_create_histogram2D(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1histogram3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jint jarg8, jdouble jarg9, jdouble jarg10, jint jarg11, jdouble jarg12, jdouble jarg13) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; int arg5 ; double arg6 ; double arg7 ; int arg8 ; double arg9 ; double arg10 ;
  int arg11 ; double arg12 ; double arg13 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  arg6 = (double)jarg6;  arg7 = (double)jarg7;  arg8 = (int)jarg8;  arg9 = (double)jarg9;  arg10 = (double)jarg10; 
  arg11 = (int)jarg11;  arg12 = (double)jarg12;  arg13 = (double)jarg13; 
  result = (AIDA::IHistogram3D *)AIDA_IAnalysisFactory_create_histogram3D(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1cloud2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; int arg5 ; std::string *arg6 = 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  if(!jarg6) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::ICloud2D *)AIDA_IAnalysisFactory_create_cloud2D__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1cloud2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; int arg5 ; AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  result = (AIDA::ICloud2D *)AIDA_IAnalysisFactory_create_cloud2D__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1cloud2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::ICloud2D *)AIDA_IAnalysisFactory_create_cloud2D__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1dataPointSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; int arg5 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  result = (AIDA::IDataPointSet *)AIDA_IAnalysisFactory_create_dataPointSet(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1fitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IFitter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IFitter *)AIDA_IAnalysisFactory_create_fitter__SWIG_0(arg1,(std::string const &)*arg2);
  *(AIDA::IFitter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1fitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::IFitter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  result = (AIDA::IFitter *)AIDA_IAnalysisFactory_create_fitter__SWIG_0(arg1); *(AIDA::IFitter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1function(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; std::string *arg5 = 0 ; AIDA::IFunction *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::IFunction *)AIDA_IAnalysisFactory_create_function(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1scripted_1function(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; std::string *arg5 = 0 ; AIDA::IFunction *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  if(!jarg5) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::IFunction *)AIDA_IAnalysisFactory_create_scripted_function(arg1,*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1tuple_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; std::string *arg5 = 0 ; std::string *arg6 = 0 ; AIDA::ITuple *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1; 
  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr);  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::ITuple *)AIDA_IAnalysisFactory_create_tuple__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1tuple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string *arg4 = 0 ; std::string *arg5 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::ITuple *)AIDA_IAnalysisFactory_create_tuple__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::IFilter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IFilter *)AIDA_IAnalysisFactory_create_filter(arg1,*arg2,(std::string const &)*arg3);
  *(AIDA::IFilter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1evaluator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; AIDA::ITree *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::IEvaluator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IEvaluator *)AIDA_IAnalysisFactory_create_evaluator(arg1,*arg2,(std::string const &)*arg3);
  *(AIDA::IEvaluator **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create_1plotter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IAnalysisFactory *arg1 = (AIDA::IAnalysisFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IPlotter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnalysisFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IPlotter *)AIDA_IAnalysisFactory_create_plotter(arg1,(std::string const &)*arg2);
  *(AIDA::IPlotter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAnalysisFactory_1create(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  AIDA::IAnalysisFactory *result = 0 ; (void)jenv; (void)jcls;
  result = (AIDA::IAnalysisFactory *)AIDA_IAnalysisFactory_create(); *(AIDA::IAnalysisFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IANNOTATION_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IAnnotation **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1addItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->addItem((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1addItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->addItem((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1removeItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->removeItem((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; std::string *arg2 = 0 ; std::string result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IAnnotation const *)arg1)->value((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setValue((std::string const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1setSticky(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; std::string *arg2 = 0 ; bool arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAnnotation **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  (arg1)->setSticky((std::string const &)*arg2,arg3); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAnnotation **)&jarg1;  result = (int)((AIDA::IAnnotation const *)arg1)->size(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; int arg2 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  arg2 = (int)jarg2; 
  result = ((AIDA::IAnnotation const *)arg1)->key(arg2); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; int arg2 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IAnnotation **)&jarg1;  arg2 = (int)jarg2; 
  result = ((AIDA::IAnnotation const *)arg1)->value(arg2); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IAnnotation_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IAnnotation *arg1 = (AIDA::IAnnotation *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAnnotation **)&jarg1;  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IAXIS_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IAxis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IAxis **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAxis_1isFixedBinning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  result = (bool)((AIDA::IAxis const *)arg1)->isFixedBinning(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IAxis_1lowerEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  result = (double)((AIDA::IAxis const *)arg1)->lowerEdge(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IAxis_1upperEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  result = (double)((AIDA::IAxis const *)arg1)->upperEdge(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IAxis_1bins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  result = (int)((AIDA::IAxis const *)arg1)->bins(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IAxis_1binLowerEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  arg2 = (int)jarg2;  result = (double)((AIDA::IAxis const *)arg1)->binLowerEdge(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IAxis_1binUpperEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  arg2 = (int)jarg2;  result = (double)((AIDA::IAxis const *)arg1)->binUpperEdge(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IAxis_1binWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  arg2 = (int)jarg2;  result = (double)((AIDA::IAxis const *)arg1)->binWidth(arg2);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IAxis_1coordToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IAxis *arg1 = (AIDA::IAxis *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxis **)&jarg1;  arg2 = (double)jarg2;  result = (int)((AIDA::IAxis const *)arg1)->coordToIndex(arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IAxis_1UNDERFLOW_1BIN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)AIDA::IAxis::UNDERFLOW_BIN; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IAxis_1OVERFLOW_1BIN_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)AIDA::IAxis::OVERFLOW_BIN; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IBASEHISTOGRAM_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IBaseHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  delete arg1; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1;  result = ((AIDA::IBaseHistogram const *)arg1)->title();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setTitle((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1annotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::IAnnotation *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1;  { AIDA::IAnnotation &_result_ref = (arg1)->annotation();
    result = (AIDA::IAnnotation *) &_result_ref; }  *(AIDA::IAnnotation **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IBaseHistogram **)&jarg1;  result = (int)((AIDA::IBaseHistogram const *)arg1)->dimension();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1;  result = (bool)(arg1)->reset(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IBaseHistogram **)&jarg1;  result = (int)((AIDA::IBaseHistogram const *)arg1)->entries();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; std::string *arg2 = 0 ; void *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((AIDA::IBaseHistogram const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1IHistogram1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::IHistogram1D *)AIDA_IBaseHistogram_cast_IHistogram1D(arg1); *(AIDA::IHistogram1D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1IHistogram2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::IHistogram2D *)AIDA_IBaseHistogram_cast_IHistogram2D(arg1); *(AIDA::IHistogram2D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1IHistogram3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::IHistogram3D *)AIDA_IBaseHistogram_cast_IHistogram3D(arg1); *(AIDA::IHistogram3D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1IProfile1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::IProfile1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::IProfile1D *)AIDA_IBaseHistogram_cast_IProfile1D(arg1); *(AIDA::IProfile1D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1IProfile2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::IProfile2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::IProfile2D *)AIDA_IBaseHistogram_cast_IProfile2D(arg1); *(AIDA::IProfile2D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1ICloud1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::ICloud1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::ICloud1D *)AIDA_IBaseHistogram_cast_ICloud1D(arg1); *(AIDA::ICloud1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1ICloud2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::ICloud2D *)AIDA_IBaseHistogram_cast_ICloud2D(arg1); *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IBaseHistogram_1cast_1ICloud3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IBaseHistogram *arg1 = (AIDA::IBaseHistogram *) 0 ; AIDA::ICloud3D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseHistogram **)&jarg1; 
  result = (AIDA::ICloud3D *)AIDA_IBaseHistogram_cast_ICloud3D(arg1); *(AIDA::ICloud3D **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ICLOUD_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ICloud(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ICloud *arg1 = (AIDA::ICloud *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ICloud **)&jarg1;  delete arg1; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud_1sumOfWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud *arg1 = (AIDA::ICloud *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud **)&jarg1;  result = (double)((AIDA::ICloud const *)arg1)->sumOfWeights(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud_1convertToHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ICloud *arg1 = (AIDA::ICloud *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud **)&jarg1;  result = (bool)(arg1)->convertToHistogram(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud_1isConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ICloud *arg1 = (AIDA::ICloud *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud **)&jarg1;  result = (bool)((AIDA::ICloud const *)arg1)->isConverted(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ICloud_1maxEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::ICloud *arg1 = (AIDA::ICloud *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud **)&jarg1;  result = (int)((AIDA::ICloud const *)arg1)->maxEntries(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::ICloud *arg1 = (AIDA::ICloud *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->scale(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ICLOUD1D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ICloud1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ICloud1D **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; double arg2 ; double arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->fill(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1lowerEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud1D **)&jarg1;  result = (double)((AIDA::ICloud1D const *)arg1)->lowerEdge(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1upperEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud1D **)&jarg1;  result = (double)((AIDA::ICloud1D const *)arg1)->upperEdge(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud1D const *)arg1)->value(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud1D const *)arg1)->weight(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1mean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud1D **)&jarg1;  result = (double)((AIDA::ICloud1D const *)arg1)->mean(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1rms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud1D **)&jarg1;  result = (double)((AIDA::ICloud1D const *)arg1)->rms(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1convert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; int arg2 ; double arg3 ; double arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  result = (bool)(arg1)->convert(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1convert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; std::vector<double > *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2);
    arg2 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) {
      arg2->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); } 
  result = (bool)(arg1)->convert((std::vector<double > const &)*arg2); jresult = (jboolean)result;  { delete arg2; } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1histogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud1D **)&jarg1;  {
    AIDA::IHistogram1D const &_result_ref = ((AIDA::ICloud1D const *)arg1)->histogram();
    result = (AIDA::IHistogram1D *) &_result_ref; }  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud1D_1fillHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::ICloud1D *arg1 = (AIDA::ICloud1D *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::ICloud1D **)&jarg1;  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D & reference is null"); return 0; }  
  result = (bool)((AIDA::ICloud1D const *)arg1)->fillHistogram(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ICLOUD2D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ICloud2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ICloud2D **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double arg2 ; double arg3 ; double arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  result = (bool)(arg1)->fill(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double arg2 ; double arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1lowerEdgeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->lowerEdgeX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1lowerEdgeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->lowerEdgeY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1upperEdgeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->upperEdgeX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1upperEdgeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->upperEdgeY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1valueX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud2D const *)arg1)->valueX(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1valueY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud2D const *)arg1)->valueY(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud2D const *)arg1)->weight(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1meanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->meanX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1meanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->meanY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1rmsX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->rmsX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1rmsY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud2D **)&jarg1;  result = (double)((AIDA::ICloud2D const *)arg1)->rmsY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1convert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  jboolean jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; int arg2 ; double arg3 ; double arg4 ; int arg5 ;
  double arg6 ; double arg7 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (int)jarg5;  arg6 = (double)jarg6; 
  arg7 = (double)jarg7;  result = (bool)(arg1)->convert(arg2,arg3,arg4,arg5,arg6,arg7); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1convert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jboolean jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; std::vector<double > *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  {
    int i = 0; jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg3);
    arg3 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) {
      arg3->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); } 
  result = (bool)(arg1)->convert((std::vector<double > const &)*arg2,(std::vector<double > const &)*arg3);
  jresult = (jboolean)result;  { delete arg2; }  { delete arg3; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1histogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud2D **)&jarg1;  {
    AIDA::IHistogram2D const &_result_ref = ((AIDA::ICloud2D const *)arg1)->histogram();
    result = (AIDA::IHistogram2D *) &_result_ref; }  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud2D_1fillHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::ICloud2D *arg1 = (AIDA::ICloud2D *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::ICloud2D **)&jarg1;  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D & reference is null"); return 0; }  
  result = (bool)((AIDA::ICloud2D const *)arg1)->fillHistogram(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ICLOUD3D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ICloud3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ICloud3D **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double arg2 ; double arg3 ; double arg4 ; double arg5 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5;  result = (bool)(arg1)->fill(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double arg2 ; double arg3 ; double arg4 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  arg4 = (double)jarg4;  result = (bool)(arg1)->fill(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1lowerEdgeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->lowerEdgeX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1lowerEdgeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->lowerEdgeY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1lowerEdgeZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->lowerEdgeZ(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1upperEdgeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->upperEdgeX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1upperEdgeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->upperEdgeY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1upperEdgeZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->upperEdgeZ(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1valueX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud3D const *)arg1)->valueX(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1valueY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud3D const *)arg1)->valueY(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1valueZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud3D const *)arg1)->valueZ(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ICloud3D const *)arg1)->weight(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1meanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->meanX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1meanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->meanY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1meanZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->meanZ(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1rmsX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->rmsX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1rmsY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->rmsY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1rmsZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  result = (double)((AIDA::ICloud3D const *)arg1)->rmsZ(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1convert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jint jarg8, jdouble jarg9, jdouble jarg10) {
  jboolean jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; int arg2 ; double arg3 ; double arg4 ; int arg5 ;
  double arg6 ; double arg7 ; int arg8 ; double arg9 ; double arg10 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (int)jarg5; 
  arg6 = (double)jarg6;  arg7 = (double)jarg7;  arg8 = (int)jarg8;  arg9 = (double)jarg9;  arg10 = (double)jarg10; 
  result = (bool)(arg1)->convert(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1convert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jboolean jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; std::vector<double > *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ICloud3D **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg3);
    arg3 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) {
      arg3->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (bool)(arg1)->convert((std::vector<double > const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4);
  jresult = (jboolean)result;  { delete arg2; }  { delete arg3; }  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1histogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ICloud3D **)&jarg1;  {
    AIDA::IHistogram3D const &_result_ref = ((AIDA::ICloud3D const *)arg1)->histogram();
    result = (AIDA::IHistogram3D *) &_result_ref; }  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ICloud3D_1fillHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::ICloud3D *arg1 = (AIDA::ICloud3D *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::ICloud3D **)&jarg1;  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D & reference is null"); return 0; }  
  result = (bool)((AIDA::ICloud3D const *)arg1)->fillHistogram(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ICONSTANTS_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_AIDA_1VERSION_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *) "3.2.1";
  if(result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1VERSION_1MAJOR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 3; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1VERSION_1MINOR_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 2; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IDATAPOINT_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IDataPoint *arg1 = (AIDA::IDataPoint *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IDataPoint **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IDataPoint_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IDataPoint *arg1 = (AIDA::IDataPoint *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPoint **)&jarg1;  result = (int)((AIDA::IDataPoint const *)arg1)->dimension(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPoint_1coordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::IDataPoint *arg1 = (AIDA::IDataPoint *) 0 ; int arg2 ; AIDA::IMeasurement *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPoint **)&jarg1;  arg2 = (int)jarg2; 
  result = (AIDA::IMeasurement *)(arg1)->coordinate(arg2); *(AIDA::IMeasurement **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IDATAPOINTSET_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IDataPointSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IDataPointSet **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1annotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; AIDA::IAnnotation *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  { AIDA::IAnnotation &_result_ref = (arg1)->annotation();
    result = (AIDA::IAnnotation *) &_result_ref; }  *(AIDA::IAnnotation **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  result = ((AIDA::IDataPointSet const *)arg1)->title();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setTitle((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSet **)&jarg1;  result = (int)((AIDA::IDataPointSet const *)arg1)->dimension();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSet **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSet **)&jarg1;  result = (int)((AIDA::IDataPointSet const *)arg1)->size(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int arg2 ; AIDA::IDataPoint *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (int)jarg2; 
  result = (AIDA::IDataPoint *)(arg1)->point(arg2); *(AIDA::IDataPoint **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1setCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int arg2 ; std::vector<double > *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1; 
  arg2 = (int)jarg2;  { int i = 0; jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (bool)(arg1)->setCoordinate(arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4);
  jresult = (jboolean)result;  { delete arg3; }  { delete arg4; }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1setCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int arg2 ; std::vector<double > *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (int)jarg2;  { int i = 0; jint size = jenv->GetArrayLength(jarg3);
    arg3 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) {
      arg3->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (bool)(arg1)->setCoordinate(arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  jresult = (jboolean)result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1addPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; AIDA::IDataPoint *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  result = (AIDA::IDataPoint *)(arg1)->addPoint();
  *(AIDA::IDataPoint **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1addPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; AIDA::IDataPoint *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IDataPointSet **)&jarg1; 
  arg2 = *(AIDA::IDataPoint **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPoint const & reference is null"); return 0; }  
  result = (bool)(arg1)->addPoint((AIDA::IDataPoint const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1removePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->removePoint(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1lowerExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IDataPointSet const *)arg1)->lowerExtent(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1upperExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; int arg2 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IDataPointSet const *)arg1)->upperExtent(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->scale(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1scaleValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->scaleValues(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1scaleErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->scaleErrors(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSet_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IDataPointSet *arg1 = (AIDA::IDataPointSet *) 0 ; std::string *arg2 = 0 ; void *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSet **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((AIDA::IDataPointSet const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IDATAPOINTSETFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IDataPointSetFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,arg3); *(AIDA::IDataPointSet **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; AIDA::IDataPointSet *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createY((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createY((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createY_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createY((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createY_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) { arg5->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createY((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; AIDA::IDataPointSet *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createX((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createX((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createX_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createX((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createX_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) { arg5->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createX((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  std::vector<double > *arg7 = 0 ; std::vector<double > *arg8 = 0 ; std::vector<double > *arg9 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg7);
    arg7 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) {
      arg7->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg8); arg8 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg8, 0); for (i = 0; i<size; i++) { arg8->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg8, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg9);
    arg9 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg9, 0); for (i = 0; i<size; i++) {
      arg9->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg9, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXY((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7,(std::vector<double > const &)*arg8,(std::vector<double > const &)*arg9);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  { delete arg7; }  {
    delete arg8; }  { delete arg9; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  std::vector<double > *arg7 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg7);
    arg7 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) {
      arg7->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXY((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  { delete arg7; } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXY_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ;
  std::vector<double > *arg6 = 0 ; std::vector<double > *arg7 = 0 ; std::vector<double > *arg8 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) { arg5->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg6);
    arg6 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) {
      arg6->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg7); arg7 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) { arg7->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg8);
    arg8 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg8, 0); for (i = 0; i<size; i++) {
      arg8->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg8, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXY((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7,(std::vector<double > const &)*arg8);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  { delete arg6; }  {
    delete arg7; }  { delete arg8; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXY_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ;
  std::vector<double > *arg6 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) { arg5->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg6);
    arg6 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) {
      arg6->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXY((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  { delete arg6; } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXYZ_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11, jdoubleArray jarg12) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  std::vector<double > *arg7 = 0 ; std::vector<double > *arg8 = 0 ; std::vector<double > *arg9 = 0 ;
  std::vector<double > *arg10 = 0 ; std::vector<double > *arg11 = 0 ; std::vector<double > *arg12 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg7);
    arg7 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) {
      arg7->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg8); arg8 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg8, 0); for (i = 0; i<size; i++) { arg8->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg8, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg9);
    arg9 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg9, 0); for (i = 0; i<size; i++) {
      arg9->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg9, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg10); arg10 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg10, 0); for (i = 0; i<size; i++) { arg10->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg10, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg11);
    arg11 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg11, 0); for (i = 0; i<size; i++) {
      arg11->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg11, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg12); arg12 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg12, 0); for (i = 0; i<size; i++) { arg12->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg12, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXYZ((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7,(std::vector<double > const &)*arg8,(std::vector<double > const &)*arg9,(std::vector<double > const &)*arg10,(std::vector<double > const &)*arg11,(std::vector<double > const &)*arg12);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  { delete arg7; }  {
    delete arg8; }  { delete arg9; }  { delete arg10; }  { delete arg11; }  { delete arg12; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXYZ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  std::vector<double > *arg7 = 0 ; std::vector<double > *arg8 = 0 ; std::vector<double > *arg9 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg7);
    arg7 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) {
      arg7->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg8); arg8 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg8, 0); for (i = 0; i<size; i++) { arg8->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg8, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg9);
    arg9 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg9, 0); for (i = 0; i<size; i++) {
      arg9->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg9, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXYZ((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7,(std::vector<double > const &)*arg8,(std::vector<double > const &)*arg9);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  { delete arg7; }  {
    delete arg8; }  { delete arg9; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXYZ_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8, jdoubleArray jarg9, jdoubleArray jarg10, jdoubleArray jarg11) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ;
  std::vector<double > *arg6 = 0 ; std::vector<double > *arg7 = 0 ; std::vector<double > *arg8 = 0 ;
  std::vector<double > *arg9 = 0 ; std::vector<double > *arg10 = 0 ; std::vector<double > *arg11 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) { arg5->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg6);
    arg6 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) {
      arg6->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg7); arg7 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) { arg7->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg8);
    arg8 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg8, 0); for (i = 0; i<size; i++) {
      arg8->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg8, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg9); arg9 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg9, 0); for (i = 0; i<size; i++) { arg9->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg9, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg10);
    arg10 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg10, 0); for (i = 0; i<size; i++) {
      arg10->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg10, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg11); arg11 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg11, 0); for (i = 0; i<size; i++) { arg11->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg11, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXYZ((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7,(std::vector<double > const &)*arg8,(std::vector<double > const &)*arg9,(std::vector<double > const &)*arg10,(std::vector<double > const &)*arg11);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  { delete arg6; }  {
    delete arg7; }  { delete arg8; }  { delete arg9; }  { delete arg10; }  { delete arg11; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createXYZ_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7, jdoubleArray jarg8) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  std::vector<double > *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ;
  std::vector<double > *arg6 = 0 ; std::vector<double > *arg7 = 0 ; std::vector<double > *arg8 = 0 ;
  AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg3, 0); for (i = 0; i<size; i++) { arg3->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg3, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg4);
    arg4 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) {
      arg4->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) { arg5->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg6);
    arg6 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) {
      arg6->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg7); arg7 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg7, 0); for (i = 0; i<size; i++) { arg7->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg7, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg8);
    arg8 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg8, 0); for (i = 0; i<size; i++) {
      arg8->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg8, j_double, 0); } 
  result = (AIDA::IDataPointSet *)(arg1)->createXYZ((std::string const &)*arg2,(std::vector<double > const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::vector<double > const &)*arg7,(std::vector<double > const &)*arg8);
  *(AIDA::IDataPointSet **)&jresult = result;  { delete arg3; }  { delete arg4; }  { delete arg5; }  { delete arg6; }  {
    delete arg7; }  { delete arg8; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1createCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IDataPointSet *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IDataPointSet **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::IDataPointSet const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ;
  AIDA::IDataPointSet *arg2 = (AIDA::IDataPointSet *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  arg2 = *(AIDA::IDataPointSet **)&jarg2;  result = (bool)(arg1)->destroy(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud1D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::ICloud1D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud1D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::ICloud1D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud2D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::ICloud2D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud2D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::ICloud2D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud3D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::ICloud3D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud3D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::ICloud3D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IProfile1D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IProfile1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IProfile1D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IProfile1D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IProfile1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IProfile1D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IProfile2D *arg3 = 0 ; std::string *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IProfile2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IProfile2D const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1create_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IProfile2D *arg3 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IProfile2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->create((std::string const &)*arg2,(AIDA::IProfile2D const &)*arg3);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IDataPointSet *arg3 = 0 ; AIDA::IDataPointSet *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IDataPointSet **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg4 = *(AIDA::IDataPointSet **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->add((std::string const &)*arg2,(AIDA::IDataPointSet const &)*arg3,(AIDA::IDataPointSet const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IDataPointSet *arg3 = 0 ; AIDA::IDataPointSet *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IDataPointSet **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg4 = *(AIDA::IDataPointSet **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->subtract((std::string const &)*arg2,(AIDA::IDataPointSet const &)*arg3,(AIDA::IDataPointSet const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IDataPointSet *arg3 = 0 ; AIDA::IDataPointSet *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IDataPointSet **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg4 = *(AIDA::IDataPointSet **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->multiply((std::string const &)*arg2,(AIDA::IDataPointSet const &)*arg3,(AIDA::IDataPointSet const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1divide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IDataPointSet *arg3 = 0 ; AIDA::IDataPointSet *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IDataPointSet **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg4 = *(AIDA::IDataPointSet **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->divide((std::string const &)*arg2,(AIDA::IDataPointSet const &)*arg3,(AIDA::IDataPointSet const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataPointSetFactory_1weightedMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IDataPointSetFactory *arg1 = (AIDA::IDataPointSetFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IDataPointSet *arg3 = 0 ; AIDA::IDataPointSet *arg4 = 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IDataPointSetFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IDataPointSet **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg4 = *(AIDA::IDataPointSet **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (AIDA::IDataPointSet *)(arg1)->weightedMean((std::string const &)*arg2,(AIDA::IDataPointSet const &)*arg3,(AIDA::IDataPointSet const &)*arg4);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IEVALUATOR_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IEvaluator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IEvaluator *arg1 = (AIDA::IEvaluator *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IEvaluator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IEvaluator_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IEvaluator *arg1 = (AIDA::IEvaluator *) 0 ; AIDA::ITuple *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IEvaluator **)&jarg1;  arg2 = *(AIDA::ITuple **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITuple & reference is null"); return 0; }  
  result = (bool)(arg1)->initialize(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IEvaluator_1evaluateDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IEvaluator *arg1 = (AIDA::IEvaluator *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IEvaluator **)&jarg1;  result = (double)((AIDA::IEvaluator const *)arg1)->evaluateDouble();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IEvaluator_1expression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IEvaluator *arg1 = (AIDA::IEvaluator *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IEvaluator **)&jarg1;  result = ((AIDA::IEvaluator const *)arg1)->expression();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFILTER_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFilter *arg1 = (AIDA::IFilter *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFilter **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFilter_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFilter *arg1 = (AIDA::IFilter *) 0 ; AIDA::ITuple *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFilter **)&jarg1;  arg2 = *(AIDA::ITuple **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITuple & reference is null"); return 0; }  
  result = (bool)(arg1)->initialize(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFilter_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IFilter *arg1 = (AIDA::IFilter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFilter **)&jarg1;  result = (bool)((AIDA::IFilter const *)arg1)->accept(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFilter_1expression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFilter *arg1 = (AIDA::IFilter *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFilter **)&jarg1;  result = ((AIDA::IFilter const *)arg1)->expression();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFITDATA_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFitData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFitData **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create1DConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create1DConnection((AIDA::IHistogram1D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create1DConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ICloud1D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::ICloud1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create1DConnection((AIDA::ICloud1D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create1DConnection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IProfile1D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::IProfile1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create1DConnection((AIDA::IProfile1D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create1DConnection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; int arg3 ; int arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4; 
  result = (bool)(arg1)->create1DConnection((AIDA::IDataPointSet const &)*arg2,arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create2DConnection((AIDA::IHistogram2D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; int arg3 ; int arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4; 
  result = (bool)(arg1)->create2DConnection((AIDA::IHistogram2D const &)*arg2,arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ICloud2D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::ICloud2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create2DConnection((AIDA::ICloud2D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ICloud2D *arg2 = 0 ; int arg3 ; int arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::ICloud2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  result = (bool)(arg1)->create2DConnection((AIDA::ICloud2D const &)*arg2,arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IProfile2D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create2DConnection((AIDA::IProfile2D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IProfile2D *arg2 = 0 ; int arg3 ; int arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  result = (bool)(arg1)->create2DConnection((AIDA::IProfile2D const &)*arg2,arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create2DConnection_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; int arg3 ; int arg4 ;
  int arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (bool)(arg1)->create2DConnection((AIDA::IDataPointSet const &)*arg2,arg3,arg4,arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create3DConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create3DConnection((AIDA::IHistogram3D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create3DConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; int arg3 ; int arg4 ;
  int arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (bool)(arg1)->create3DConnection((AIDA::IHistogram3D const &)*arg2,arg3,arg4,arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create3DConnection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ICloud3D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::ICloud3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D const & reference is null"); return 0; }  
  result = (bool)(arg1)->create3DConnection((AIDA::ICloud3D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create3DConnection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ICloud3D *arg2 = 0 ; int arg3 ; int arg4 ;
  int arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::ICloud3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (bool)(arg1)->create3DConnection((AIDA::ICloud3D const &)*arg2,arg3,arg4,arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1create3DConnection_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; int arg3 ; int arg4 ;
  int arg5 ; int arg6 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  arg6 = (int)jarg6; 
  result = (bool)(arg1)->create3DConnection((AIDA::IDataPointSet const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1createConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ITuple *arg2 = 0 ; std::vector<std::string > arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::ITuple **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITuple const & reference is null"); return 0; }   {
    int i = 0; jint size = jenv->GetArrayLength(jarg3); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg3, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); (&arg3)->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (bool)(arg1)->createConnection((AIDA::ITuple const &)*arg2,arg3); jresult = (jboolean)result;  { }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1createConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::ITuple *arg2 = 0 ;
  std::vector<AIDA::IEvaluator * > *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = *(AIDA::ITuple **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITuple const & reference is null"); return 0; }  
  arg3 = *(std::vector<AIDA::IEvaluator * > **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<AIDA::IEvaluator * > & reference is null");
    return 0; }   result = (bool)(arg1)->createConnection((AIDA::ITuple const &)*arg2,*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitData_1createConnection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jintArray jarg3, jint jarg4) {
  jboolean jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; std::vector<int > arg3 ;
  int arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitData **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  { int i = 0; jint size = jenv->GetArrayLength(jarg3); jint* j_int = jenv->GetIntArrayElements(jarg3, 0);
    for (i = 0; i<size; i++) { (&arg3)->push_back(j_int[i]); }  jenv->ReleaseIntArrayElements(jarg3, j_int, 0); } 
  arg4 = (int)jarg4;  result = (bool)(arg1)->createConnection((AIDA::IDataPointSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result;  { }  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitData_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitData **)&jarg1; 
  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IFitData_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitData **)&jarg1;  result = (int)((AIDA::IFitData const *)arg1)->dimension(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitData_1dataDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitData **)&jarg1;  result = ((AIDA::IFitData const *)arg1)->dataDescription();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitData_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::IFitData *arg1 = (AIDA::IFitData *) 0 ; int arg2 ; AIDA::IRangeSet *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitData **)&jarg1;  arg2 = (int)jarg2;  {
    AIDA::IRangeSet &_result_ref = ((AIDA::IFitData const *)arg1)->range(arg2); result = (AIDA::IRangeSet *) &_result_ref; } 
  *(AIDA::IRangeSet **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFITFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFitFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFitFactory *arg1 = (AIDA::IFitFactory *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFitFactory **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitFactory_1createFitData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IFitFactory *arg1 = (AIDA::IFitFactory *) 0 ; AIDA::IFitData *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitFactory **)&jarg1;  result = (AIDA::IFitData *)(arg1)->createFitData();
  *(AIDA::IFitData **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitFactory_1createFitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ; AIDA::IFitFactory *arg1 = (AIDA::IFitFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; AIDA::IFitter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IFitter *)(arg1)->createFitter((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(AIDA::IFitter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitFactory_1createFitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IFitFactory *arg1 = (AIDA::IFitFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  AIDA::IFitter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IFitter *)(arg1)->createFitter((std::string const &)*arg2,(std::string const &)*arg3);
  *(AIDA::IFitter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitFactory_1createFitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IFitFactory *arg1 = (AIDA::IFitFactory *) 0 ; std::string *arg2 = 0 ; AIDA::IFitter *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IFitter *)(arg1)->createFitter((std::string const &)*arg2); *(AIDA::IFitter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitFactory_1createFitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IFitFactory *arg1 = (AIDA::IFitFactory *) 0 ; AIDA::IFitter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitFactory **)&jarg1;  result = (AIDA::IFitter *)(arg1)->createFitter();
  *(AIDA::IFitter **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFITPARAMETERSETTINGS_1H_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ; int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFitParameterSettings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1; 
  result = ((AIDA::IFitParameterSettings const *)arg1)->name(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1stepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1; 
  result = (double)((AIDA::IFitParameterSettings const *)arg1)->stepSize(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1upperBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1; 
  result = (double)((AIDA::IFitParameterSettings const *)arg1)->upperBound(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1lowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1; 
  result = (double)((AIDA::IFitParameterSettings const *)arg1)->lowerBound(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1isBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1; 
  result = (bool)((AIDA::IFitParameterSettings const *)arg1)->isBound(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1isFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1; 
  result = (bool)((AIDA::IFitParameterSettings const *)arg1)->isFixed(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1setStepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  arg2 = (double)jarg2;  (arg1)->setStepSize(arg2); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1setBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double arg2 ; double arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  (arg1)->setBounds(arg2,arg3); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1removeBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  (arg1)->removeBounds(); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1setFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->setFixed(arg2); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1setLowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  arg2 = (double)jarg2;  (arg1)->setLowerBound(arg2); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1setUpperBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  arg2 = (double)jarg2;  (arg1)->setUpperBound(arg2); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitParameterSettings_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IFitParameterSettings *arg1 = (AIDA::IFitParameterSettings *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitParameterSettings **)&jarg1;  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFITRESULT_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFitResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFitResult **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitResult **)&jarg1;  result = (bool)(arg1)->isValid(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fitStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitResult **)&jarg1;  result = (int)(arg1)->fitStatus(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fittedFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; AIDA::IFunction *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  { AIDA::IFunction &_result_ref = (arg1)->fittedFunction();
    result = (AIDA::IFunction *) &_result_ref; }  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1quality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitResult **)&jarg1;  result = (double)(arg1)->quality(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1ndf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitResult **)&jarg1;  result = (int)(arg1)->ndf(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1covMatrixElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)(arg1)->covMatrixElement(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fitMethodName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  result = (arg1)->fitMethodName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1engineName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  result = (arg1)->engineName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1dataDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  result = (arg1)->dataDescription();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1constraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  result = (arg1)->constraints(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fitParameterSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::string *arg2 = 0 ;
  AIDA::IFitParameterSettings *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IFitParameterSettings *)(arg1)->fitParameterSettings((std::string const &)*arg2);
  *(AIDA::IFitParameterSettings **)&jresult = result;  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fittedParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  {
    std::vector<double > const &_result_ref = ((AIDA::IFitResult const *)arg1)->fittedParameters();
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fittedParameterNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1; 
  result = ((AIDA::IFitResult const *)arg1)->fittedParameterNames(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1fittedParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::string *arg2 = 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)(arg1)->fittedParameter((std::string const &)*arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1errors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  {
    std::vector<double > const &_result_ref = ((AIDA::IFitResult const *)arg1)->errors();
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1errorsPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  {
    std::vector<double > const &_result_ref = ((AIDA::IFitResult const *)arg1)->errorsPlus();
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IFitResult_1errorsMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IFitResult *arg1 = (AIDA::IFitResult *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitResult **)&jarg1;  {
    std::vector<double > const &_result_ref = ((AIDA::IFitResult const *)arg1)->errorsMinus();
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFITTER_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFitter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFitter **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IFitData *arg2 = 0 ; AIDA::IFunction *arg3 = 0 ;
  AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IFitData **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFitData & reference is null"); return 0; }  
  arg3 = *(AIDA::IFunction **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction & reference is null"); return 0; }  
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,*arg3); *(AIDA::IFitResult **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ; AIDA::IFunction *arg3 = 0 ;
  AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram & reference is null"); return 0; }  
  arg3 = *(AIDA::IFunction **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction & reference is null"); return 0; }  
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,*arg3); *(AIDA::IFitResult **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ; std::string *arg3 = 0 ;
  AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitter **)&jarg1; 
  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,(std::string const &)*arg3); *(AIDA::IFitResult **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ; AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IFitResult **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; AIDA::IFunction *arg3 = 0 ;
  AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet & reference is null"); return 0; }  
  arg3 = *(AIDA::IFunction **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction & reference is null"); return 0; }  
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,*arg3); *(AIDA::IFitResult **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; std::string *arg3 = 0 ;
  AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitter **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,(std::string const &)*arg3); *(AIDA::IFitResult **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ; AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IFitResult **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IFitData *arg2 = 0 ; std::string *arg3 = 0 ;
  AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFitter **)&jarg1; 
  arg2 = *(AIDA::IFitData **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFitData & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,(std::string const &)*arg3); *(AIDA::IFitResult **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fit_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IFitData *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ; AIDA::IFitResult *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IFitData **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFitData & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IFitResult *)(arg1)->fit(*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IFitResult **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitter_1setEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setEngine((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitter_1engineName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitter **)&jarg1;  result = (arg1)->engineName(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fitParameterSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::string *arg2 = 0 ;
  AIDA::IFitParameterSettings *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  {
    AIDA::IFitParameterSettings &_result_ref = (arg1)->fitParameterSettings((std::string const &)*arg2);
    result = (AIDA::IFitParameterSettings *) &_result_ref; }  *(AIDA::IFitParameterSettings **)&jresult = result; 
  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFitter_1listParameterSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1;  result = (arg1)->listParameterSettings(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitter_1resetParameterSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1; 
  (arg1)->resetParameterSettings(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitter_1setConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setConstraint((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFitter_1constraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1;  result = (arg1)->constraints(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitter_1resetConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1; 
  (arg1)->resetConstraints(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitter_1setFitMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFitter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setFitMethod((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFitter_1fitMethodName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitter **)&jarg1;  result = (arg1)->fitMethodName(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1createScan1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IFitData *arg2 = 0 ; AIDA::IFunction *arg3 = 0 ;
  std::string *arg4 = 0 ; int arg5 ; double arg6 ; double arg7 ; AIDA::IDataPointSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IFitData **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFitData & reference is null"); return 0; }  
  arg3 = *(AIDA::IFunction **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  arg5 = (int)jarg5; 
  arg6 = (double)jarg6;  arg7 = (double)jarg7; 
  result = (AIDA::IDataPointSet *)(arg1)->createScan1D(*arg2,*arg3,(std::string const &)*arg4,arg5,arg6,arg7);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFitter_1createContour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; AIDA::IFitData *arg2 = 0 ; AIDA::IFitResult *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; int arg6 ; double arg7 ; AIDA::IDataPointSet *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = *(AIDA::IFitData **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFitData & reference is null"); return 0; }  
  arg3 = *(AIDA::IFitResult **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFitResult & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr);  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (AIDA::IDataPointSet *)(arg1)->createContour(*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7);
  *(AIDA::IDataPointSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFitter_1setUseFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitter **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->setUseFunctionGradient(arg2); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFitter_1useFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IFitter *arg1 = (AIDA::IFitter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFitter **)&jarg1;  result = (bool)(arg1)->useFunctionGradient(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFUNCTION_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFunction **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFunction_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  result = ((AIDA::IFunction const *)arg1)->title();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunction_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setTitle((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFunction_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jdouble jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::vector<double > *arg2 = 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  { int i = 0;
    jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); } 
  result = (double)((AIDA::IFunction const *)arg1)->value((std::vector<double > const &)*arg2); jresult = (jdouble)result;  {
    delete arg2; }  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IFunction_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFunction **)&jarg1;  result = (int)((AIDA::IFunction const *)arg1)->dimension(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunction_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; AIDA::IFunction *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IFunction **)&jarg1;  arg2 = *(AIDA::IFunction **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction const & reference is null"); return 0; }  
  result = (bool)((AIDA::IFunction const *)arg1)->isEqual((AIDA::IFunction const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IFunction_1gradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jdoubleArray jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::vector<double > *arg2 = 0 ;
  std::vector<double > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  { int i = 0;
    jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); }  {
    std::vector<double > const &_result_ref = ((AIDA::IFunction const *)arg1)->gradient((std::vector<double > const &)*arg2);
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  { delete arg2; } 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunction_1providesGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFunction **)&jarg1;  result = (bool)((AIDA::IFunction const *)arg1)->providesGradient();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFunction_1variableName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; int arg2 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  arg2 = (int)jarg2; 
  result = ((AIDA::IFunction const *)arg1)->variableName(arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFunction_1variableNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  result = ((AIDA::IFunction const *)arg1)->variableNames(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunction_1setParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::vector<double > *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  { int i = 0;
    jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); } 
  result = (bool)(arg1)->setParameters((std::vector<double > const &)*arg2); jresult = (jboolean)result;  { delete arg2; } 
  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IFunction_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  {
    std::vector<double > const &_result_ref = ((AIDA::IFunction const *)arg1)->parameters();
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IFunction_1numberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFunction **)&jarg1;  result = (int)((AIDA::IFunction const *)arg1)->numberOfParameters();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFunction_1parameterNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  result = ((AIDA::IFunction const *)arg1)->parameterNames(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunction_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string *arg2 = 0 ; double arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IFunction_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string *arg2 = 0 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((AIDA::IFunction const *)arg1)->parameter((std::string const &)*arg2); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IFunction_1indexOfParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string *arg2 = 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((AIDA::IFunction const *)arg1)->indexOfParameter((std::string const &)*arg2); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunction_1annotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; AIDA::IAnnotation *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  { AIDA::IAnnotation &_result_ref = (arg1)->annotation();
    result = (AIDA::IAnnotation *) &_result_ref; }  *(AIDA::IAnnotation **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFunction_1codeletString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  result = ((AIDA::IFunction const *)arg1)->codeletString();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunction_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IFunction *arg1 = (AIDA::IFunction *) 0 ; std::string *arg2 = 0 ; void *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunction **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((AIDA::IFunction const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFUNCTIONCATALOG_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFunctionCatalog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(AIDA::IFunctionCatalog **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunctionCatalog_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; std::string arg2 ;
  AIDA::IFunction *arg3 = (AIDA::IFunction *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IFunctionCatalog **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = *(AIDA::IFunction **)&jarg3; 
  result = (bool)(arg1)->add(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunctionCatalog_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; std::string arg2 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunctionCatalog **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->add(arg2,(std::string const &)*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFunctionCatalog_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunctionCatalog **)&jarg1;  result = (arg1)->list(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IFunctionCatalog_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFunctionCatalog **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->remove((std::string const &)*arg2); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunctionCatalog_1storeAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunctionCatalog **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->storeAll((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFunctionCatalog_1loadAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFunctionCatalog *arg1 = (AIDA::IFunctionCatalog *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunctionCatalog **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->loadAll((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFUNCTIONFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFunctionFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFunctionFactory *arg1 = (AIDA::IFunctionFactory *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(AIDA::IFunctionFactory **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunctionFactory_1createFunctionByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IFunctionFactory *arg1 = (AIDA::IFunctionFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::IFunction *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IFunctionFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::IFunction *)(arg1)->createFunctionByName((std::string const &)*arg2,(std::string const &)*arg3);
  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunctionFactory_1createFunctionFromScript_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ; AIDA::IFunctionFactory *arg1 = (AIDA::IFunctionFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; std::string *arg6 = 0 ; std::string *arg7 = 0 ; AIDA::IFunction *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunctionFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr);  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr);  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0);  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr); arg7 = &arg7_str; jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (AIDA::IFunction *)(arg1)->createFunctionFromScript((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunctionFactory_1createFunctionFromScript_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::IFunctionFactory *arg1 = (AIDA::IFunctionFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; std::string *arg6 = 0 ; AIDA::IFunction *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFunctionFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr);  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::IFunction *)(arg1)->createFunctionFromScript((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunctionFactory_1cloneFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IFunctionFactory *arg1 = (AIDA::IFunctionFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IFunction *arg3 = 0 ; AIDA::IFunction *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IFunctionFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IFunction **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction & reference is null"); return 0; }  
  result = (AIDA::IFunction *)(arg1)->cloneFunction((std::string const &)*arg2,*arg3); *(AIDA::IFunction **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IFunctionFactory_1catalog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IFunctionFactory *arg1 = (AIDA::IFunctionFactory *) 0 ; AIDA::IFunctionCatalog *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFunctionFactory **)&jarg1; 
  result = (AIDA::IFunctionCatalog *)(arg1)->catalog(); *(AIDA::IFunctionCatalog **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IHISTOGRAM_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IHistogram **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1allEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (int)((AIDA::IHistogram const *)arg1)->allEntries(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1extraEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (int)((AIDA::IHistogram const *)arg1)->extraEntries(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1equivalentBinEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (double)((AIDA::IHistogram const *)arg1)->equivalentBinEntries();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1sumBinHeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (double)((AIDA::IHistogram const *)arg1)->sumBinHeights();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1sumAllBinHeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (double)((AIDA::IHistogram const *)arg1)->sumAllBinHeights();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1sumExtraBinHeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (double)((AIDA::IHistogram const *)arg1)->sumExtraBinHeights();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1minBinHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (double)((AIDA::IHistogram const *)arg1)->minBinHeight();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1maxBinHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogram **)&jarg1;  result = (double)((AIDA::IHistogram const *)arg1)->maxBinHeight();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IHistogram *arg1 = (AIDA::IHistogram *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->scale(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IHISTOGRAM1D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IHistogram1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IHistogram1D **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; double arg2 ; double arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->fill(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1binMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram1D const *)arg1)->binMean(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1binEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IHistogram1D const *)arg1)->binEntries(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1binHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram1D const *)arg1)->binHeight(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1binError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram1D const *)arg1)->binError(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1mean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  result = (double)((AIDA::IHistogram1D const *)arg1)->mean();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1rms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  result = (double)((AIDA::IHistogram1D const *)arg1)->rms();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1axis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IHistogram1D const *)arg1)->axis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1coordToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram1D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IHistogram1D const *)arg1)->coordToIndex(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram1D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IHistogram1D *arg1 = (AIDA::IHistogram1D *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IHistogram1D **)&jarg1; 
  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (bool)(arg1)->add((AIDA::IHistogram1D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IHISTOGRAM2D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IHistogram2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IHistogram2D **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  result = (bool)(arg1)->fill(arg2,arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double arg2 ; double arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binMeanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IHistogram2D const *)arg1)->binMeanX(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binMeanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IHistogram2D const *)arg1)->binMeanY(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int arg3 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (int)((AIDA::IHistogram2D const *)arg1)->binEntries(arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binEntriesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IHistogram2D const *)arg1)->binEntriesX(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binEntriesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IHistogram2D const *)arg1)->binEntriesY(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IHistogram2D const *)arg1)->binHeight(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binHeightX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram2D const *)arg1)->binHeightX(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binHeightY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram2D const *)arg1)->binHeightY(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1binError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IHistogram2D const *)arg1)->binError(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1meanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  result = (double)((AIDA::IHistogram2D const *)arg1)->meanX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1meanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  result = (double)((AIDA::IHistogram2D const *)arg1)->meanY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1rmsX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  result = (double)((AIDA::IHistogram2D const *)arg1)->rmsX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1rmsY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  result = (double)((AIDA::IHistogram2D const *)arg1)->rmsY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1xAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IHistogram2D const *)arg1)->xAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1yAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IHistogram2D const *)arg1)->yAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1coordToIndexX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IHistogram2D const *)arg1)->coordToIndexX(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1coordToIndexY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram2D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IHistogram2D const *)arg1)->coordToIndexY(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram2D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IHistogram2D *arg1 = (AIDA::IHistogram2D *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IHistogram2D **)&jarg1; 
  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (bool)(arg1)->add((AIDA::IHistogram2D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IHISTOGRAM3D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IHistogram3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IHistogram3D **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  double arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5; 
  result = (bool)(arg1)->fill(arg2,arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  result = (bool)(arg1)->fill(arg2,arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binMeanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int arg3 ; int arg4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (double)((AIDA::IHistogram3D const *)arg1)->binMeanX(arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binMeanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int arg3 ; int arg4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (double)((AIDA::IHistogram3D const *)arg1)->binMeanY(arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binMeanZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int arg3 ; int arg4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (double)((AIDA::IHistogram3D const *)arg1)->binMeanZ(arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int arg3 ; int arg4 ; int result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (int)((AIDA::IHistogram3D const *)arg1)->binEntries(arg2,arg3,arg4); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binEntriesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IHistogram3D const *)arg1)->binEntriesX(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binEntriesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IHistogram3D const *)arg1)->binEntriesY(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binEntriesZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IHistogram3D const *)arg1)->binEntriesZ(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int arg3 ; int arg4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (double)((AIDA::IHistogram3D const *)arg1)->binHeight(arg2,arg3,arg4);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binHeightX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram3D const *)arg1)->binHeightX(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binHeightY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram3D const *)arg1)->binHeightY(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binHeightZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IHistogram3D const *)arg1)->binHeightZ(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1binError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; int arg2 ; int arg3 ; int arg4 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (double)((AIDA::IHistogram3D const *)arg1)->binError(arg2,arg3,arg4); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1meanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  result = (double)((AIDA::IHistogram3D const *)arg1)->meanX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1meanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  result = (double)((AIDA::IHistogram3D const *)arg1)->meanY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1meanZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  result = (double)((AIDA::IHistogram3D const *)arg1)->meanZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1rmsX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  result = (double)((AIDA::IHistogram3D const *)arg1)->rmsX();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1rmsY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  result = (double)((AIDA::IHistogram3D const *)arg1)->rmsY();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1rmsZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  result = (double)((AIDA::IHistogram3D const *)arg1)->rmsZ();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1xAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IHistogram3D const *)arg1)->xAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1yAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IHistogram3D const *)arg1)->yAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1zAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IHistogram3D const *)arg1)->zAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1coordToIndexX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IHistogram3D const *)arg1)->coordToIndexX(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1coordToIndexY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IHistogram3D const *)arg1)->coordToIndexY(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1coordToIndexZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogram3D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IHistogram3D const *)arg1)->coordToIndexZ(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogram3D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IHistogram3D *arg1 = (AIDA::IHistogram3D *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IHistogram3D **)&jarg1; 
  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (bool)(arg1)->add((AIDA::IHistogram3D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IHISTOGRAMFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IHistogramFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ;
  AIDA::IBaseHistogram *arg2 = (AIDA::IBaseHistogram *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  arg2 = *(AIDA::IBaseHistogram **)&jarg2;  result = (bool)(arg1)->destroy(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; std::string *arg5 = 0 ; AIDA::ICloud1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  if(!jarg5) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::ICloud1D *)(arg1)->createCloud1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  *(AIDA::ICloud1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; AIDA::ICloud1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  result = (AIDA::ICloud1D *)(arg1)->createCloud1D((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(AIDA::ICloud1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud1D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::ICloud1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::ICloud1D *)(arg1)->createCloud1D((std::string const &)*arg2,(std::string const &)*arg3);
  *(AIDA::ICloud1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud1D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::ICloud1D *)(arg1)->createCloud1D((std::string const &)*arg2); *(AIDA::ICloud1D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud1D *arg3 = 0 ; AIDA::ICloud1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D const & reference is null"); return 0; }  
  result = (AIDA::ICloud1D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::ICloud1D const &)*arg3);
  *(AIDA::ICloud1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; std::string *arg5 = 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  if(!jarg5) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::ICloud2D *)(arg1)->createCloud2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  result = (AIDA::ICloud2D *)(arg1)->createCloud2D((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::ICloud2D *)(arg1)->createCloud2D((std::string const &)*arg2,(std::string const &)*arg3);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud2D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::ICloud2D *)(arg1)->createCloud2D((std::string const &)*arg2); *(AIDA::ICloud2D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud2D *arg3 = 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D const & reference is null"); return 0; }  
  result = (AIDA::ICloud2D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::ICloud2D const &)*arg3);
  *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; std::string *arg5 = 0 ; AIDA::ICloud3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  if(!jarg5) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::ICloud3D *)(arg1)->createCloud3D((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  *(AIDA::ICloud3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; AIDA::ICloud3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  result = (AIDA::ICloud3D *)(arg1)->createCloud3D((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(AIDA::ICloud3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud3D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; AIDA::ICloud3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::ICloud3D *)(arg1)->createCloud3D((std::string const &)*arg2,(std::string const &)*arg3);
  *(AIDA::ICloud3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCloud3D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::ICloud3D *)(arg1)->createCloud3D((std::string const &)*arg2); *(AIDA::ICloud3D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::ICloud3D *arg3 = 0 ; AIDA::ICloud3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ICloud3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D const & reference is null"); return 0; }  
  result = (AIDA::ICloud3D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::ICloud3D const &)*arg3);
  *(AIDA::ICloud3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jstring jarg7) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; std::string *arg7 = 0 ; AIDA::IHistogram1D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0);  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr); arg7 = &arg7_str; jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (AIDA::IHistogram1D *)(arg1)->createHistogram1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,(std::string const &)*arg7);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  result = (AIDA::IHistogram1D *)(arg1)->createHistogram1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram1D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5; 
  result = (AIDA::IHistogram1D *)(arg1)->createHistogram1D((std::string const &)*arg2,arg3,arg4,arg5);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram1D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::string *arg5 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::IHistogram1D *)(arg1)->createHistogram1D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::string const &)*arg5);
  *(AIDA::IHistogram1D **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram1D_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IHistogram1D *)(arg1)->createHistogram1D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jstring jarg10) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ; std::string *arg10 = 0 ;
  AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9;  if(!jarg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg10_pstr = (const char *)jenv->GetStringUTFChars(jarg10, 0);  if (!arg10_pstr) return 0;
  std::string arg10_str(arg10_pstr); arg10 = &arg10_str; jenv->ReleaseStringUTFChars(jarg10, arg10_pstr); 
  result = (AIDA::IHistogram2D *)(arg1)->createHistogram2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::string const &)*arg10);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ;
  AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9; 
  result = (AIDA::IHistogram2D *)(arg1)->createHistogram2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jint jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; int arg6 ; double arg7 ; double arg8 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (int)jarg6;  arg7 = (double)jarg7;  arg8 = (double)jarg8; 
  result = (AIDA::IHistogram2D *)(arg1)->createHistogram2D((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram2D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::string *arg6 = 0 ;
  AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::IHistogram2D *)(arg1)->createHistogram2D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::string const &)*arg6);
  *(AIDA::IHistogram2D **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram2D_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; AIDA::IHistogram2D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (AIDA::IHistogram2D *)(arg1)->createHistogram2D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  *(AIDA::IHistogram2D **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jint jarg10, jdouble jarg11, jdouble jarg12, jstring jarg13) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ; int arg10 ;
  double arg11 ; double arg12 ; std::string *arg13 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9; 
  arg10 = (int)jarg10;  arg11 = (double)jarg11;  arg12 = (double)jarg12;  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg13_pstr = (const char *)jenv->GetStringUTFChars(jarg13, 0);  if (!arg13_pstr) return 0;
  std::string arg13_str(arg13_pstr); arg13 = &arg13_str; jenv->ReleaseStringUTFChars(jarg13, arg13_pstr); 
  result = (AIDA::IHistogram3D *)(arg1)->createHistogram3D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(std::string const &)*arg13);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jint jarg10, jdouble jarg11, jdouble jarg12) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ; int arg10 ;
  double arg11 ; double arg12 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9; 
  arg10 = (int)jarg10;  arg11 = (double)jarg11;  arg12 = (double)jarg12; 
  result = (AIDA::IHistogram3D *)(arg1)->createHistogram3D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram3D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jint jarg6, jdouble jarg7, jdouble jarg8, jint jarg9, jdouble jarg10, jdouble jarg11) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; int arg6 ; double arg7 ; double arg8 ; int arg9 ; double arg10 ; double arg11 ;
  AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (int)jarg6;  arg7 = (double)jarg7;  arg8 = (double)jarg8; 
  arg9 = (int)jarg9;  arg10 = (double)jarg10;  arg11 = (double)jarg11; 
  result = (AIDA::IHistogram3D *)(arg1)->createHistogram3D((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram3D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jstring jarg7) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  std::string *arg7 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); }  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0);  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr); arg7 = &arg7_str; jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (AIDA::IHistogram3D *)(arg1)->createHistogram3D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6,(std::string const &)*arg7);
  *(AIDA::IHistogram3D **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createHistogram3D_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::vector<double > *arg6 = 0 ;
  AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg6); arg6 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg6, 0); for (i = 0; i<size; i++) { arg6->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg6, j_double, 0); } 
  result = (AIDA::IHistogram3D *)(arg1)->createHistogram3D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::vector<double > const &)*arg6);
  *(AIDA::IHistogram3D **)&jresult = result;  { delete arg4; }  { delete arg5; }  { delete arg6; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram3D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jstring jarg7) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; std::string *arg7 = 0 ; AIDA::IProfile1D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0);  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr); arg7 = &arg7_str; jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,(std::string const &)*arg7);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jstring jarg9) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; double arg7 ; double arg8 ; std::string *arg9 = 0 ;
  AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (double)jarg7;  arg8 = (double)jarg8;  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0);  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr); arg9 = &arg9_str; jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; double arg7 ; double arg8 ; AIDA::IProfile1D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (double)jarg7;  arg8 = (double)jarg8; 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::string *arg5 = 0 ; AIDA::IProfile1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::string const &)*arg5);
  *(AIDA::IProfile1D **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); } 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4);
  *(AIDA::IProfile1D **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdouble jarg5, jdouble jarg6, jstring jarg7) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; double arg5 ; double arg6 ; std::string *arg7 = 0 ;
  AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  arg5 = (double)jarg5;  arg6 = (double)jarg6;  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0);  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr); arg7 = &arg7_str; jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,arg5,arg6,(std::string const &)*arg7);
  *(AIDA::IProfile1D **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; double arg5 ; double arg6 ; AIDA::IProfile1D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  arg5 = (double)jarg5;  arg6 = (double)jarg6; 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,arg5,arg6);
  *(AIDA::IProfile1D **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5; 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,arg3,arg4,arg5);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile1D_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; double arg6 ; double arg7 ; AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (double)jarg7; 
  result = (AIDA::IProfile1D *)(arg1)->createProfile1D((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IProfile1D *arg3 = 0 ; AIDA::IProfile1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IProfile1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D const & reference is null"); return 0; }  
  result = (AIDA::IProfile1D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::IProfile1D const &)*arg3);
  *(AIDA::IProfile1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jstring jarg10) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ; std::string *arg10 = 0 ;
  AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9;  if(!jarg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg10_pstr = (const char *)jenv->GetStringUTFChars(jarg10, 0);  if (!arg10_pstr) return 0;
  std::string arg10_str(arg10_pstr); arg10 = &arg10_str; jenv->ReleaseStringUTFChars(jarg10, arg10_pstr); 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::string const &)*arg10);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ;
  AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9; 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jstring jarg12) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ; double arg10 ;
  double arg11 ; std::string *arg12 = 0 ; AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9; 
  arg10 = (double)jarg10;  arg11 = (double)jarg11;  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg12_pstr = (const char *)jenv->GetStringUTFChars(jarg12, 0);  if (!arg12_pstr) return 0;
  std::string arg12_str(arg12_pstr); arg12 = &arg12_str; jenv->ReleaseStringUTFChars(jarg12, arg12_pstr); 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(std::string const &)*arg12);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; int arg4 ; double arg5 ; double arg6 ; int arg7 ; double arg8 ; double arg9 ; double arg10 ;
  double arg11 ; AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  arg5 = (double)jarg5;  arg6 = (double)jarg6;  arg7 = (int)jarg7;  arg8 = (double)jarg8;  arg9 = (double)jarg9; 
  arg10 = (double)jarg10;  arg11 = (double)jarg11; 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; std::string *arg6 = 0 ;
  AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,(std::string const &)*arg6);
  *(AIDA::IProfile2D **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; AIDA::IProfile2D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); } 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5);
  *(AIDA::IProfile2D **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdouble jarg6, jdouble jarg7, jstring jarg8) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; double arg6 ; double arg7 ;
  std::string *arg8 = 0 ; AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  arg6 = (double)jarg6; 
  arg7 = (double)jarg7;  if(!jarg8) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0);  if (!arg8_pstr) return 0;
  std::string arg8_str(arg8_pstr); arg8 = &arg8_str; jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,arg6,arg7,(std::string const &)*arg8);
  *(AIDA::IProfile2D **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::vector<double > *arg4 = 0 ; std::vector<double > *arg5 = 0 ; double arg6 ; double arg7 ;
  AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg4, 0); for (i = 0; i<size; i++) { arg4->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg4, j_double, 0); }  { int i = 0; jint size = jenv->GetArrayLength(jarg5);
    arg5 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg5, 0); for (i = 0; i<size; i++) {
      arg5->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg5, j_double, 0); }  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<double > const &)*arg4,(std::vector<double > const &)*arg5,arg6,arg7);
  *(AIDA::IProfile2D **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jint jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; int arg6 ; double arg7 ; double arg8 ; AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (int)jarg6;  arg7 = (double)jarg7;  arg8 = (double)jarg8; 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createProfile2D_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jint jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  double arg4 ; double arg5 ; int arg6 ; double arg7 ; double arg8 ; double arg9 ; double arg10 ; AIDA::IProfile2D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (double)jarg4;  arg5 = (double)jarg5;  arg6 = (int)jarg6;  arg7 = (double)jarg7;  arg8 = (double)jarg8; 
  arg9 = (double)jarg9;  arg10 = (double)jarg10; 
  result = (AIDA::IProfile2D *)(arg1)->createProfile2D((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1createCopy_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IProfile2D *arg3 = 0 ; AIDA::IProfile2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IProfile2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D const & reference is null"); return 0; }  
  result = (AIDA::IProfile2D *)(arg1)->createCopy((std::string const &)*arg2,(AIDA::IProfile2D const &)*arg3);
  *(AIDA::IProfile2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; AIDA::IHistogram1D *arg4 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram1D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->add((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3,(AIDA::IHistogram1D const &)*arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; AIDA::IHistogram1D *arg4 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram1D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->subtract((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3,(AIDA::IHistogram1D const &)*arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; AIDA::IHistogram1D *arg4 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram1D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->multiply((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3,(AIDA::IHistogram1D const &)*arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram1D *arg3 = 0 ; AIDA::IHistogram1D *arg4 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram1D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram1D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->divide((std::string const &)*arg2,(AIDA::IHistogram1D const &)*arg3,(AIDA::IHistogram1D const &)*arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram2D *arg4 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram2D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->add((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,(AIDA::IHistogram2D const &)*arg4);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram2D *arg4 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram2D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->subtract((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,(AIDA::IHistogram2D const &)*arg4);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram2D *arg4 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram2D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->multiply((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,(AIDA::IHistogram2D const &)*arg4);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram2D *arg4 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram2D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->divide((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,(AIDA::IHistogram2D const &)*arg4);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram3D *arg4 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram3D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram3D *)(arg1)->add((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,(AIDA::IHistogram3D const &)*arg4);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram3D *arg4 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram3D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram3D *)(arg1)->subtract((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,(AIDA::IHistogram3D const &)*arg4);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram3D *arg4 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram3D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram3D *)(arg1)->multiply((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,(AIDA::IHistogram3D const &)*arg4);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram3D *arg4 = 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = *(AIDA::IHistogram3D **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram3D *)(arg1)->divide((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,(AIDA::IHistogram3D const &)*arg4);
  *(AIDA::IHistogram3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1projectionX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->projectionX((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1projectionY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram1D *)(arg1)->projectionY((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; int arg4 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = (int)jarg4; 
  result = (AIDA::IHistogram1D *)(arg1)->sliceX((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; int arg4 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = (int)jarg4; 
  result = (AIDA::IHistogram1D *)(arg1)->sliceY((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,arg4);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; int arg4 ; int arg5 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (AIDA::IHistogram1D *)(arg1)->sliceX((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,arg4,arg5);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram2D *arg3 = 0 ; int arg4 ; int arg5 ; AIDA::IHistogram1D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram2D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D const & reference is null"); return 0; }  
  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (AIDA::IHistogram1D *)(arg1)->sliceY((std::string const &)*arg2,(AIDA::IHistogram2D const &)*arg3,arg4,arg5);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1projectionXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->projectionXY((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1projectionXZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->projectionXZ((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1projectionYZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  result = (AIDA::IHistogram2D *)(arg1)->projectionYZ((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceXY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; int arg4 ; int arg5 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (AIDA::IHistogram2D *)(arg1)->sliceXY((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,arg4,arg5);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceXZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; int arg4 ; int arg5 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (AIDA::IHistogram2D *)(arg1)->sliceXZ((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,arg4,arg5);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IHistogramFactory_1sliceYZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; AIDA::IHistogramFactory *arg1 = (AIDA::IHistogramFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IHistogram3D *arg3 = 0 ; int arg4 ; int arg5 ; AIDA::IHistogram2D *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg3_; arg1 = *(AIDA::IHistogramFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::IHistogram3D **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D const & reference is null"); return 0; }  
  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (AIDA::IHistogram2D *)(arg1)->sliceYZ((std::string const &)*arg2,(AIDA::IHistogram3D const &)*arg3,arg4,arg5);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IINFO_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IInfo *arg1 = (AIDA::IInfo *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IInfo **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IInfo_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IInfo *arg1 = (AIDA::IInfo *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IInfo **)&jarg1; 
  (arg1)->clear(); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IInfo_1addText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AIDA::IInfo *arg1 = (AIDA::IInfo *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IInfo **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addText((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IInfo_1addLegend_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  AIDA::IInfo *arg1 = (AIDA::IInfo *) 0 ; AIDA::IMarkerStyle *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IInfo **)&jarg1;  arg2 = *(AIDA::IMarkerStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IMarkerStyle const & reference is null"); return ; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addLegend((AIDA::IMarkerStyle const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IInfo_1addLegend_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  AIDA::IInfo *arg1 = (AIDA::IInfo *) 0 ; AIDA::ILineStyle *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IInfo **)&jarg1;  arg2 = *(AIDA::ILineStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ILineStyle const & reference is null"); return ; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addLegend((AIDA::ILineStyle const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IInfo_1addLegend_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  AIDA::IInfo *arg1 = (AIDA::IInfo *) 0 ; AIDA::IFillStyle *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IInfo **)&jarg1;  arg2 = *(AIDA::IFillStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFillStyle const & reference is null"); return ; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addLegend((AIDA::IFillStyle const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IMANAGEDOBJECT_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IManagedObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  delete arg1; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1;  result = ((AIDA::IManagedObject const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; std::string *arg2 = 0 ; void *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((AIDA::IManagedObject const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IBaseHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IBaseHistogram *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IBaseHistogram *)AIDA_IManagedObject_cast_IBaseHistogram(arg1); *(AIDA::IBaseHistogram **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IHistogram1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IHistogram1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IHistogram1D *)AIDA_IManagedObject_cast_IHistogram1D(arg1); *(AIDA::IHistogram1D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IHistogram2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IHistogram2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IHistogram2D *)AIDA_IManagedObject_cast_IHistogram2D(arg1); *(AIDA::IHistogram2D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IHistogram3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IHistogram3D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IHistogram3D *)AIDA_IManagedObject_cast_IHistogram3D(arg1); *(AIDA::IHistogram3D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IProfile1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IProfile1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IProfile1D *)AIDA_IManagedObject_cast_IProfile1D(arg1); *(AIDA::IProfile1D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IProfile2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IProfile2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IProfile2D *)AIDA_IManagedObject_cast_IProfile2D(arg1); *(AIDA::IProfile2D **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1ICloud1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::ICloud1D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::ICloud1D *)AIDA_IManagedObject_cast_ICloud1D(arg1); *(AIDA::ICloud1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1ICloud2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::ICloud2D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::ICloud2D *)AIDA_IManagedObject_cast_ICloud2D(arg1); *(AIDA::ICloud2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1ICloud3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::ICloud3D *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::ICloud3D *)AIDA_IManagedObject_cast_ICloud3D(arg1); *(AIDA::ICloud3D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IDataPointSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IDataPointSet *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IDataPointSet *)AIDA_IManagedObject_cast_IDataPointSet(arg1); *(AIDA::IDataPointSet **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1ITuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::ITuple *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::ITuple *)AIDA_IManagedObject_cast_ITuple(arg1); *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IManagedObject_1cast_1IFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IManagedObject *arg1 = (AIDA::IManagedObject *) 0 ; AIDA::IFunction *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IManagedObject **)&jarg1; 
  result = (AIDA::IFunction *)AIDA_IManagedObject_cast_IFunction(arg1); *(AIDA::IFunction **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IMEASUREMENT_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IMeasurement **)&jarg1; 
  delete arg1; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IMeasurement_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IMeasurement **)&jarg1;  result = (double)((AIDA::IMeasurement const *)arg1)->value();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IMeasurement_1errorPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IMeasurement **)&jarg1;  result = (double)((AIDA::IMeasurement const *)arg1)->errorPlus();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IMeasurement_1errorMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IMeasurement **)&jarg1;  result = (double)((AIDA::IMeasurement const *)arg1)->errorMinus();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IMeasurement_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IMeasurement **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setValue(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IMeasurement_1setErrorPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IMeasurement **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setErrorPlus(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IMeasurement_1setErrorMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IMeasurement *arg1 = (AIDA::IMeasurement *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IMeasurement **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setErrorMinus(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IMODELFUNCTION_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IModelFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IModelFunction **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1providesNormalization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IModelFunction **)&jarg1; 
  result = (bool)((AIDA::IModelFunction const *)arg1)->providesNormalization(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IModelFunction **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->normalize(arg2); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1isNormalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IModelFunction **)&jarg1;  result = (bool)((AIDA::IModelFunction const *)arg1)->isNormalized();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1parameterGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jdoubleArray jresult = 0 ; AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; std::vector<double > *arg2 = 0 ;
  std::vector<double > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IModelFunction **)&jarg1;  {
    int i = 0; jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); }  {
    std::vector<double > const &_result_ref = ((AIDA::IModelFunction const *)arg1)->parameterGradient((std::vector<double > const &)*arg2);
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  { delete arg2; } 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1providesParameterGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IModelFunction **)&jarg1; 
  result = (bool)((AIDA::IModelFunction const *)arg1)->providesParameterGradient(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1normalizationRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; int arg2 ; AIDA::IRangeSet *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IModelFunction **)&jarg1;  arg2 = (int)jarg2;  {
    AIDA::IRangeSet &_result_ref = (arg1)->normalizationRange(arg2); result = (AIDA::IRangeSet *) &_result_ref; } 
  *(AIDA::IRangeSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1includeNormalizationAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IModelFunction **)&jarg1;  (arg1)->includeNormalizationAll(); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IModelFunction_1excludeNormalizationAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IModelFunction *arg1 = (AIDA::IModelFunction *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IModelFunction **)&jarg1;  (arg1)->excludeNormalizationAll(); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPLOTTER_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IPlotter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IPlotter **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; double arg2 ; double arg3 ; double arg4 ; double arg5 ;
  AIDA::IPlotterRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5; 
  result = (AIDA::IPlotterRegion *)(arg1)->createRegion(arg2,arg3,arg4,arg5); *(AIDA::IPlotterRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  AIDA::IPlotterRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  result = (AIDA::IPlotterRegion *)(arg1)->createRegion(arg2,arg3,arg4); *(AIDA::IPlotterRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; double arg2 ; double arg3 ;
  AIDA::IPlotterRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1; 
  arg2 = (double)jarg2;  arg3 = (double)jarg3;  result = (AIDA::IPlotterRegion *)(arg1)->createRegion(arg2,arg3);
  *(AIDA::IPlotterRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; double arg2 ; AIDA::IPlotterRegion *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = (double)jarg2; 
  result = (AIDA::IPlotterRegion *)(arg1)->createRegion(arg2); *(AIDA::IPlotterRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegion_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; AIDA::IPlotterRegion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  result = (AIDA::IPlotterRegion *)(arg1)->createRegion();
  *(AIDA::IPlotterRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int arg2 ; int arg3 ; int arg4 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4; 
  result = (bool)(arg1)->createRegions(arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int arg2 ; int arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (bool)(arg1)->createRegions(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegions_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->createRegions(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1createRegions_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (bool)(arg1)->createRegions(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1currentRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; AIDA::IPlotterRegion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  {
    AIDA::IPlotterRegion &_result_ref = ((AIDA::IPlotter const *)arg1)->currentRegion();
    result = (AIDA::IPlotterRegion *) &_result_ref; }  *(AIDA::IPlotterRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1currentRegionNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (int)((AIDA::IPlotter const *)arg1)->currentRegionNumber();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1numberOfRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (int)((AIDA::IPlotter const *)arg1)->numberOfRegions(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1setCurrentRegionNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->setCurrentRegionNumber(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; AIDA::IPlotterRegion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  { AIDA::IPlotterRegion &_result_ref = (arg1)->next();
    result = (AIDA::IPlotterRegion *) &_result_ref; }  *(AIDA::IPlotterRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1region(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; int arg2 ; AIDA::IPlotterRegion *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = (int)jarg2; 
  result = (AIDA::IPlotterRegion *)((AIDA::IPlotter const *)arg1)->region(arg2); *(AIDA::IPlotterRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1destroyRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1; 
  (arg1)->destroyRegions(); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1clearRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1; 
  (arg1)->clearRegions(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1setParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1setParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1parameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IPlotter const *)arg1)->parameterValue((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1availableParameterOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobjectArray jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ;
  std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IPlotter const *)arg1)->availableParameterOptions((std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1availableParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  result = ((AIDA::IPlotter const *)arg1)->availableParameters();
  { const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1show(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (bool)(arg1)->show(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (bool)(arg1)->refresh(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1hide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (bool)(arg1)->hide(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1interact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  result = (bool)(arg1)->interact(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1writeToFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->writeToFile((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1writeToFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->writeToFile((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotter **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTitle((std::string const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1titleStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; AIDA::ITitleStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotter **)&jarg1;  { AIDA::ITitleStyle &_result_ref = (arg1)->titleStyle();
    result = (AIDA::ITitleStyle *) &_result_ref; }  *(AIDA::ITitleStyle **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotter_1setTitleStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AIDA::IPlotter *arg1 = (AIDA::IPlotter *) 0 ; AIDA::ITitleStyle *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(AIDA::IPlotter **)&jarg1;  arg2 = *(AIDA::ITitleStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITitleStyle const & reference is null"); return ; }  
  (arg1)->setTitleStyle((AIDA::ITitleStyle const &)*arg2); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPLOTTERFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IPlotterFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IPlotterFactory **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IPlotter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IPlotter *)(arg1)->create((std::string const &)*arg2); *(AIDA::IPlotter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::IPlotter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::IPlotter *)(arg1)->create();
  *(AIDA::IPlotter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createMarkerStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::IMarkerStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1; 
  result = (AIDA::IMarkerStyle *)(arg1)->createMarkerStyle(); *(AIDA::IMarkerStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createTextStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::ITextStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::ITextStyle *)(arg1)->createTextStyle();
  *(AIDA::ITextStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::ILineStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::ILineStyle *)(arg1)->createLineStyle();
  *(AIDA::ILineStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createFillStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::IFillStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::IFillStyle *)(arg1)->createFillStyle();
  *(AIDA::IFillStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createDataStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::IDataStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::IDataStyle *)(arg1)->createDataStyle();
  *(AIDA::IDataStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createAxisStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::IAxisStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::IAxisStyle *)(arg1)->createAxisStyle();
  *(AIDA::IAxisStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createTitleStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::ITitleStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1;  result = (AIDA::ITitleStyle *)(arg1)->createTitleStyle();
  *(AIDA::ITitleStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterFactory_1createPlotterStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterFactory *arg1 = (AIDA::IPlotterFactory *) 0 ; AIDA::IPlotterStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterFactory **)&jarg1; 
  result = (AIDA::IPlotterStyle *)(arg1)->createPlotterStyle(); *(AIDA::IPlotterStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPLOTTERLAYOUT_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IPlotterLayout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IPlotterLayout *arg1 = (AIDA::IPlotterLayout *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IPlotterLayout **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotterLayout_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IPlotterLayout *arg1 = (AIDA::IPlotterLayout *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotterLayout **)&jarg1;  (arg1)->reset(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterLayout_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterLayout *arg1 = (AIDA::IPlotterLayout *) 0 ; std::string *arg2 = 0 ; double arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterLayout **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IPlotterLayout_1parameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ; AIDA::IPlotterLayout *arg1 = (AIDA::IPlotterLayout *) 0 ; std::string *arg2 = 0 ; double result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterLayout **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)(arg1)->parameterValue((std::string const &)*arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IPlotterLayout_1availableParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IPlotterLayout *arg1 = (AIDA::IPlotterLayout *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterLayout **)&jarg1; 
  result = ((AIDA::IPlotterLayout const *)arg1)->availableParameters(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPLOTTERREGION_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IPlotterRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram const & reference is null"); return 0; }
    if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->plot((AIDA::IBaseHistogram const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram const & reference is null"); return 0; }
    result = (bool)(arg1)->plot((AIDA::IBaseHistogram const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ;
  AIDA::IPlotterStyle *arg3 = 0 ; std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram const & reference is null"); return 0; }
    arg3 = *(AIDA::IPlotterStyle **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->plot((AIDA::IBaseHistogram const &)*arg2,(AIDA::IPlotterStyle const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ;
  AIDA::IPlotterStyle *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram const & reference is null"); return 0; }
    arg3 = *(AIDA::IPlotterStyle **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->plot((AIDA::IBaseHistogram const &)*arg2,(AIDA::IPlotterStyle const &)*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IFunction *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IFunction **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction const & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->plot((AIDA::IFunction const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IFunction *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IFunction **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction const & reference is null"); return 0; }  
  result = (bool)(arg1)->plot((AIDA::IFunction const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IFunction *arg2 = 0 ;
  AIDA::IPlotterStyle *arg3 = 0 ; std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IFunction **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction const & reference is null"); return 0; }  
  arg3 = *(AIDA::IPlotterStyle **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->plot((AIDA::IFunction const &)*arg2,(AIDA::IPlotterStyle const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IFunction *arg2 = 0 ;
  AIDA::IPlotterStyle *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IFunction **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction const & reference is null"); return 0; }  
  arg3 = *(AIDA::IPlotterStyle **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->plot((AIDA::IFunction const &)*arg2,(AIDA::IPlotterStyle const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IDataPointSet *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->plot((AIDA::IDataPointSet const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (bool)(arg1)->plot((AIDA::IDataPointSet const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IDataPointSet *arg2 = 0 ;
  AIDA::IPlotterStyle *arg3 = 0 ; std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg3 = *(AIDA::IPlotterStyle **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->plot((AIDA::IDataPointSet const &)*arg2,(AIDA::IPlotterStyle const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1plot_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IDataPointSet *arg2 = 0 ;
  AIDA::IPlotterStyle *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  arg3 = *(AIDA::IPlotterStyle **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->plot((AIDA::IDataPointSet const &)*arg2,(AIDA::IPlotterStyle const &)*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IBaseHistogram *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IBaseHistogram **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IBaseHistogram const & reference is null"); return 0; }
    result = (bool)(arg1)->remove((AIDA::IBaseHistogram const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IFunction *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IFunction **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFunction const & reference is null"); return 0; }  
  result = (bool)(arg1)->remove((AIDA::IFunction const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1remove_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IDataPointSet *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IDataPointSet **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataPointSet const & reference is null"); return 0; }  
  result = (bool)(arg1)->remove((AIDA::IDataPointSet const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1parameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; std::string *arg2 = 0 ; std::string result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IPlotterRegion const *)arg1)->parameterValue((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1availableParameterOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobjectArray jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; std::string *arg2 = 0 ;
  std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IPlotterRegion const *)arg1)->availableParameterOptions((std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1availableParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  result = ((AIDA::IPlotterRegion const *)arg1)->availableParameters(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1style(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IPlotterStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  { AIDA::IPlotterStyle &_result_ref = (arg1)->style();
    result = (AIDA::IPlotterStyle *) &_result_ref; }  *(AIDA::IPlotterStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IPlotterStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IPlotterStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setStyle((AIDA::IPlotterStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1applyStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IPlotterStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IPlotterStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->applyStyle((AIDA::IPlotterStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IPlotterRegion **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTitle((std::string const &)*arg2); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setXLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; double arg2 ; double arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setXLimits(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setXLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setXLimits(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setXLimits_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  result = (bool)(arg1)->setXLimits(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setYLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; double arg2 ; double arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setYLimits(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setYLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setYLimits(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setYLimits_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  result = (bool)(arg1)->setYLimits(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setZLimits_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; double arg2 ; double arg3 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->setZLimits(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setZLimits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; double arg2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setZLimits(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setZLimits_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  result = (bool)(arg1)->setZLimits(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IPlotterLayout *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  { AIDA::IPlotterLayout &_result_ref = (arg1)->layout();
    result = (AIDA::IPlotterLayout *) &_result_ref; }  *(AIDA::IPlotterLayout **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1setLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IPlotterLayout *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterRegion **)&jarg1; 
  arg2 = *(AIDA::IPlotterLayout **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IPlotterLayout const & reference is null"); return 0; }
    result = (bool)(arg1)->setLayout((AIDA::IPlotterLayout const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterRegion_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterRegion *arg1 = (AIDA::IPlotterRegion *) 0 ; AIDA::IInfo *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterRegion **)&jarg1;  { AIDA::IInfo &_result_ref = (arg1)->info();
    result = (AIDA::IInfo *) &_result_ref; }  *(AIDA::IInfo **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPROFILE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IProfile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IProfile **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile_1allEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (int)((AIDA::IProfile const *)arg1)->allEntries(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile_1extraEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (int)((AIDA::IProfile const *)arg1)->extraEntries(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile_1sumBinHeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (double)((AIDA::IProfile const *)arg1)->sumBinHeights();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile_1sumAllBinHeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (double)((AIDA::IProfile const *)arg1)->sumAllBinHeights();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile_1sumExtraBinHeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (double)((AIDA::IProfile const *)arg1)->sumExtraBinHeights();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile_1minBinHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (double)((AIDA::IProfile const *)arg1)->minBinHeight();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile_1maxBinHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile *arg1 = (AIDA::IProfile *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile **)&jarg1;  result = (double)((AIDA::IProfile const *)arg1)->maxBinHeight();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPROFILE1D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IProfile1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IProfile1D **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  result = (bool)(arg1)->fill(arg2,arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; double arg2 ; double arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1binMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IProfile1D const *)arg1)->binMean(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1binEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IProfile1D const *)arg1)->binEntries(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1binHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IProfile1D const *)arg1)->binHeight(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1binError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IProfile1D const *)arg1)->binError(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1binRms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IProfile1D const *)arg1)->binRms(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1mean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile1D **)&jarg1;  result = (double)((AIDA::IProfile1D const *)arg1)->mean(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1rms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile1D **)&jarg1;  result = (double)((AIDA::IProfile1D const *)arg1)->rms(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1axis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IProfile1D const *)arg1)->axis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1coordToIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IProfile1D const *)arg1)->coordToIndex(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IProfile1D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IProfile1D *arg1 = (AIDA::IProfile1D *) 0 ; AIDA::IProfile1D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IProfile1D **)&jarg1;  arg2 = *(AIDA::IProfile1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D const & reference is null"); return 0; }  
  result = (bool)(arg1)->add((AIDA::IProfile1D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPROFILE2D_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IProfile2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IProfile2D **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  double arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  arg5 = (double)jarg5;  result = (bool)(arg1)->fill(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (double)jarg2; 
  arg3 = (double)jarg3;  arg4 = (double)jarg4;  result = (bool)(arg1)->fill(arg2,arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binMeanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binMeanX(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binMeanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binMeanY(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int arg3 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (int)((AIDA::IProfile2D const *)arg1)->binEntries(arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binEntriesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IProfile2D const *)arg1)->binEntriesX(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binEntriesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (int)((AIDA::IProfile2D const *)arg1)->binEntriesY(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binHeight(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binHeightX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binHeightX(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binHeightY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binHeightY(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binError(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1binRms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; int arg2 ; int arg3 ; double result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (double)((AIDA::IProfile2D const *)arg1)->binRms(arg2,arg3); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1meanX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile2D **)&jarg1;  result = (double)((AIDA::IProfile2D const *)arg1)->meanX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1meanY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile2D **)&jarg1;  result = (double)((AIDA::IProfile2D const *)arg1)->meanY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1rmsX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile2D **)&jarg1;  result = (double)((AIDA::IProfile2D const *)arg1)->rmsX(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1rmsY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IProfile2D **)&jarg1;  result = (double)((AIDA::IProfile2D const *)arg1)->rmsY(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1xAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IProfile2D const *)arg1)->xAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1yAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; AIDA::IAxis *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  {
    AIDA::IAxis const &_result_ref = ((AIDA::IProfile2D const *)arg1)->yAxis(); result = (AIDA::IAxis *) &_result_ref; } 
  *(AIDA::IAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1coordToIndexX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IProfile2D const *)arg1)->coordToIndexX(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1coordToIndexY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; double arg2 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = (double)jarg2; 
  result = (int)((AIDA::IProfile2D const *)arg1)->coordToIndexY(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IProfile2D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IProfile2D *arg1 = (AIDA::IProfile2D *) 0 ; AIDA::IProfile2D *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IProfile2D **)&jarg1;  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D const & reference is null"); return 0; }  
  result = (bool)(arg1)->add((AIDA::IProfile2D const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IRANGESET_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IRangeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IRangeSet **)&jarg1;  delete arg1; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1lowerBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IRangeSet **)&jarg1;  {
    std::vector<double > const &_result_ref = (arg1)->lowerBounds(); result = (std::vector<double > *) &_result_ref; }  {
    int len = result->size(); jresult = jenv->NewDoubleArray(len);  for (int i=0; i<len; i++) {
      jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1upperBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IRangeSet **)&jarg1;  {
    std::vector<double > const &_result_ref = (arg1)->upperBounds(); result = (std::vector<double > *) &_result_ref; }  {
    int len = result->size(); jresult = jenv->NewDoubleArray(len);  for (int i=0; i<len; i++) {
      jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1include(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; double arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IRangeSet **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  (arg1)->include(arg2,arg3); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1exclude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; double arg2 ; double arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IRangeSet **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  (arg1)->exclude(arg2,arg3); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1includeAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IRangeSet **)&jarg1; 
  (arg1)->includeAll(); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1excludeAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IRangeSet **)&jarg1; 
  (arg1)->excludeAll(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1isInRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IRangeSet **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->isInRange(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IRangeSet **)&jarg1;  result = (int)(arg1)->size(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1PLUS_1INF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IRangeSet **)&jarg1;  result = (double)(arg1)->PLUS_INF(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IRangeSet_1MINUS_1INF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IRangeSet *arg1 = (AIDA::IRangeSet *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IRangeSet **)&jarg1;  result = (double)(arg1)->MINUS_INF(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITREE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITree **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITree_1storeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITree **)&jarg1;  result = ((AIDA::ITree const *)arg1)->storeName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::IManagedObject *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IManagedObject *)(arg1)->find((std::string const &)*arg2); *(AIDA::IManagedObject **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1findTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::ITree *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::ITree *)(arg1)->findTree((std::string const &)*arg2); *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1cd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->cd((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITree_1pwd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITree **)&jarg1;  result = ((AIDA::ITree const *)arg1)->pwd();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1ls_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool arg3 ; std::ostream *arg4 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  arg4 = *(std::ostream **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null"); return 0; }  
  result = (bool)((AIDA::ITree const *)arg1)->ls((std::string const &)*arg2,arg3,*arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1ls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  result = (bool)((AIDA::ITree const *)arg1)->ls((std::string const &)*arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1ls_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((AIDA::ITree const *)arg1)->ls((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1ls_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITree **)&jarg1;  result = (bool)((AIDA::ITree const *)arg1)->ls(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITree_1listObjectNames_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jobjectArray jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool arg3 ;
  std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  result = ((AIDA::ITree const *)arg1)->listObjectNames((std::string const &)*arg2,arg3); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITree_1listObjectNames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobjectArray jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::ITree const *)arg1)->listObjectNames((std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITree_1listObjectNames_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::vector<std::string > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  result = ((AIDA::ITree const *)arg1)->listObjectNames(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITree_1listObjectTypes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jobjectArray jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool arg3 ;
  std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  result = ((AIDA::ITree const *)arg1)->listObjectTypes((std::string const &)*arg2,arg3); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITree_1listObjectTypes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobjectArray jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::ITree const *)arg1)->listObjectTypes((std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITree_1listObjectTypes_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::vector<std::string > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  result = ((AIDA::ITree const *)arg1)->listObjectTypes(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1mkdir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->mkdir((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1mkdirs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->mkdirs((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1rmdir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->rmdir((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->rm((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITree_1findPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; AIDA::IManagedObject *arg2 = 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::ITree **)&jarg1;  arg2 = *(AIDA::IManagedObject **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IManagedObject const & reference is null"); return 0; }
    result = ((AIDA::ITree const *)arg1)->findPath((AIDA::IManagedObject const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1mv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->mv((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1commit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITree **)&jarg1;  result = (bool)(arg1)->commit(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_ITree_1setOverwrite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1; 
  arg2 = jarg2 ? true : false;  (arg1)->setOverwrite(arg2); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_ITree_1setOverwrite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1; 
  (arg1)->setOverwrite(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1cp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool arg4 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->cp((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1cp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->cp((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1symlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->symlink((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1mount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::ITree *arg3 = 0 ;
  std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; arg1 = *(AIDA::ITree **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ITree **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }   if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->mount((std::string const &)*arg2,*arg3,(std::string const &)*arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1unmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->unmount((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITree_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITree **)&jarg1;  result = (bool)(arg1)->close(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; void *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((AIDA::ITree const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1find_1baseHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::IBaseHistogram *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IBaseHistogram *)AIDA_ITree_find_baseHistogram(arg1,(std::string const &)*arg2);
  *(AIDA::IBaseHistogram **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1find_1histogram1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::IHistogram1D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IHistogram1D *)AIDA_ITree_find_histogram1D(arg1,(std::string const &)*arg2);
  *(AIDA::IHistogram1D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1find_1histogram2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::IHistogram2D *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IHistogram2D *)AIDA_ITree_find_histogram2D(arg1,(std::string const &)*arg2);
  *(AIDA::IHistogram2D **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1find_1function(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::IFunction *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IFunction *)AIDA_ITree_find_function(arg1,(std::string const &)*arg2);
  *(AIDA::IFunction **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITree_1find_1tuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITree *arg1 = (AIDA::ITree *) 0 ; std::string *arg2 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITree **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::ITuple *)AIDA_ITree_find_tuple(arg1,(std::string const &)*arg2); *(AIDA::ITuple **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITREEFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITreeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITreeFactory **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITreeFactory_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; AIDA::ITree *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITreeFactory **)&jarg1;  result = (AIDA::ITree *)(arg1)->create();
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITreeFactory_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool arg5 ; std::string *arg6 = 0 ; AIDA::ITree *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITreeFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false;  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::ITree *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITreeFactory_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ; AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool arg5 ; AIDA::ITree *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITreeFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false; 
  result = (AIDA::ITree *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITreeFactory_1create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ; AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; AIDA::ITree *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITreeFactory **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (AIDA::ITree *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITreeFactory_1create_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  AIDA::ITree *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITreeFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (AIDA::ITree *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3);
  *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITreeFactory_1create_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITreeFactory *arg1 = (AIDA::ITreeFactory *) 0 ; std::string *arg2 = 0 ; AIDA::ITree *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITreeFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::ITree *)(arg1)->create((std::string const &)*arg2); *(AIDA::ITree **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITUPLEENTRY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITupleEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITupleEntry *arg1 = (AIDA::ITupleEntry *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITupleEntry **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleEntry_1cast_1ITuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ITupleEntry *arg1 = (AIDA::ITupleEntry *) 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITupleEntry **)&jarg1;  result = (AIDA::ITuple *)AIDA_ITupleEntry_cast_ITuple(arg1);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_new_1ITupleEntry(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  AIDA::ITupleEntry *result = 0 ; (void)jenv; (void)jcls; result = (AIDA::ITupleEntry *)new AIDA::ITupleEntry();
  *(AIDA::ITupleEntry **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITUPLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; int result;
  (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITuple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITuple **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITuple_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  result = ((AIDA::ITuple const *)arg1)->title();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setTitle((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITuple_1annotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IAnnotation *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  { AIDA::IAnnotation &_result_ref = (arg1)->annotation();
    result = (AIDA::IAnnotation *) &_result_ref; }  *(AIDA::IAnnotation **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; double arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = (double)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; float arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = (float)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; int arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; short arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = (short)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1long(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; long arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = (long)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; char arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = (char)jarg3; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; bool arg3 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->fill(arg2,arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; std::string *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->fill(arg2,(std::string const &)*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; AIDA::ITupleEntry *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = *(AIDA::ITupleEntry **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITupleEntry const & reference is null"); return 0; }  
  result = (bool)(arg1)->fill(arg2,(AIDA::ITupleEntry const &)*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::vector<double > *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2);
    arg2 = new std::vector<double>(); jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) {
      arg2->push_back(j_double[i]); }  jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); } 
  result = (bool)(arg1)->fill((std::vector<double > const &)*arg2); jresult = (jboolean)result;  { delete arg2; } 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1fill_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::vector<float > *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(std::vector<float > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<float > const & reference is null"); return 0; }  
  result = (bool)(arg1)->fill((std::vector<float > const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1addRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  result = (bool)(arg1)->addRow(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_ITuple_1resetRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1; 
  (arg1)->resetRow(); }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_ITuple_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1; 
  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ITuple_1rows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  result = (int)((AIDA::ITuple const *)arg1)->rows(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_ITuple_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1; 
  (arg1)->start(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1skip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->skip(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  result = (bool)(arg1)->next(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1setRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->setRow(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ITuple_1findColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::string *arg2 = 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((AIDA::ITuple const *)arg1)->findColumn((std::string const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ITuple const *)arg1)->getDouble(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jfloat JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (float)((AIDA::ITuple const *)arg1)->getFloat(arg2);
  jresult = (jfloat)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (int)((AIDA::ITuple const *)arg1)->getInt(arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jshort JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; short result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (short)((AIDA::ITuple const *)arg1)->getShort(arg2);
  jresult = (jshort)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; long result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (long)((AIDA::ITuple const *)arg1)->getLong(arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jchar JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; char result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (char)((AIDA::ITuple const *)arg1)->getChar(arg2);
  jresult = (jchar)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (bool)((AIDA::ITuple const *)arg1)->getBoolean(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = ((AIDA::ITuple const *)arg1)->getString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; AIDA::ITupleEntry *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  result = (AIDA::ITupleEntry *)((AIDA::ITuple const *)arg1)->getObject(arg2); *(AIDA::ITupleEntry **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITuple_1getTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = (AIDA::ITuple *)(arg1)->getTuple(arg2);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITuple **)&jarg1;  result = (int)((AIDA::ITuple const *)arg1)->columns(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = ((AIDA::ITuple const *)arg1)->columnName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::vector<std::string > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  result = ((AIDA::ITuple const *)arg1)->columnNames(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2;  result = ((AIDA::ITuple const *)arg1)->columnType(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::vector<std::string > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  result = ((AIDA::ITuple const *)arg1)->columnTypes(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ITuple const *)arg1)->columnMin(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ITuple const *)arg1)->columnMax(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ITuple const *)arg1)->columnMean(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ITuple_1columnRms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; int arg2 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = (int)jarg2; 
  result = (double)((AIDA::ITuple const *)arg1)->columnRms(arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IFilter *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IFilter **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IFilter *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IFilter **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IFilter *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IFilter **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IFilter *arg5 = 0 ; AIDA::IEvaluator *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IHistogram2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IFilter **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg6 = *(AIDA::IEvaluator **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IFilter *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IFilter **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IEvaluator *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IEvaluator **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IHistogram3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IFilter *arg6 = 0 ; AIDA::IEvaluator *arg7 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; (void)jarg7_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IHistogram3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IHistogram3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IFilter **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg7 = *(AIDA::IEvaluator **)&jarg7; if(!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::ICloud1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IFilter *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IFilter **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IFilter *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IFilter **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IFilter *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IFilter **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IFilter *arg5 = 0 ; AIDA::IEvaluator *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::ICloud2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IFilter **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg6 = *(AIDA::IEvaluator **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IFilter *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::ICloud3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IFilter **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IEvaluator *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::ICloud3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IEvaluator **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::ICloud3D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IFilter *arg6 = 0 ; AIDA::IEvaluator *arg7 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; (void)jarg7_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::ICloud3D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ICloud3D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IFilter **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg7 = *(AIDA::IEvaluator **)&jarg7; if(!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IProfile1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IFilter *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IProfile1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IFilter **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IProfile1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile1D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IFilter *arg5 = 0 ; AIDA::IEvaluator *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IProfile1D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile1D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IFilter **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg6 = *(AIDA::IEvaluator **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  (void)jarg3_; (void)jarg4_; (void)jarg5_; arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IFilter *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IFilter **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IEvaluator *arg6 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; arg1 = *(AIDA::ITuple **)&jarg1; 
  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IEvaluator **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITuple_1project_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; AIDA::IProfile2D *arg2 = 0 ; AIDA::IEvaluator *arg3 = 0 ;
  AIDA::IEvaluator *arg4 = 0 ; AIDA::IEvaluator *arg5 = 0 ; AIDA::IFilter *arg6 = 0 ; AIDA::IEvaluator *arg7 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; (void)jarg5_; (void)jarg6_; (void)jarg7_;
  arg1 = *(AIDA::ITuple **)&jarg1;  arg2 = *(AIDA::IProfile2D **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IProfile2D & reference is null"); return 0; }  
  arg3 = *(AIDA::IEvaluator **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg4 = *(AIDA::IEvaluator **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg5 = *(AIDA::IEvaluator **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  arg6 = *(AIDA::IFilter **)&jarg6; if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  arg7 = *(AIDA::IEvaluator **)&jarg7; if(!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IEvaluator & reference is null"); return 0; }  
  result = (bool)(arg1)->project(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITuple_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITuple *arg1 = (AIDA::ITuple *) 0 ; std::string *arg2 = 0 ; void *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITuple **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((AIDA::ITuple const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITUPLEFACTORY_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITupleFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITupleFactory **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobjectArray jarg4, jobjectArray jarg5, jstring jarg6) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ; std::vector<std::string > *arg5 = 0 ; std::string *arg6 = 0 ; AIDA::ITuple *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg4->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg5, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg5->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0);  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr); arg6 = &arg6_str; jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (AIDA::ITuple *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<std::string > const &)*arg4,(std::vector<std::string > const &)*arg5,(std::string const &)*arg6);
  *(AIDA::ITuple **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobjectArray jarg4, jobjectArray jarg5) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ; std::vector<std::string > *arg5 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg4->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  { int i = 0;
    jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg5, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg5->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (AIDA::ITuple *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<std::string > const &)*arg4,(std::vector<std::string > const &)*arg5);
  *(AIDA::ITuple **)&jresult = result;  { delete arg4; }  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::ITuple *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::ITuple *)(arg1)->create((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createChained_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<AIDA::ITuple * > *arg4 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector<AIDA::ITuple * > **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<AIDA::ITuple * > const & reference is null");
    return 0; }  
  result = (AIDA::ITuple *)(arg1)->createChained((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<AIDA::ITuple * > const &)*arg4);
  *(AIDA::ITuple **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createChained_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg4); arg4 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg4, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg4->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (AIDA::ITuple *)(arg1)->createChained((std::string const &)*arg2,(std::string const &)*arg3,(std::vector<std::string > const &)*arg4);
  *(AIDA::ITuple **)&jresult = result;  { delete arg4; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createFiltered_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; AIDA::ITuple *arg3 = 0 ;
  AIDA::IFilter *arg4 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; (void)jarg4_;
  arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ITuple **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITuple & reference is null"); return 0; }  
  arg4 = *(AIDA::IFilter **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }  
  result = (AIDA::ITuple *)(arg1)->createFiltered((std::string const &)*arg2,*arg3,*arg4); *(AIDA::ITuple **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createFiltered_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jobjectArray jarg5) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; AIDA::ITuple *arg3 = 0 ;
  AIDA::IFilter *arg4 = 0 ; std::vector<std::string > *arg5 = 0 ; AIDA::ITuple *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; (void)jarg4_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(AIDA::ITuple **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITuple & reference is null"); return 0; }  
  arg4 = *(AIDA::IFilter **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFilter & reference is null"); return 0; }   {
    int i = 0; jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg5, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg5->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (AIDA::ITuple *)(arg1)->createFiltered((std::string const &)*arg2,*arg3,*arg4,(std::vector<std::string > const &)*arg5);
  *(AIDA::ITuple **)&jresult = result;  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createFilter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IFilter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IFilter *)(arg1)->createFilter((std::string const &)*arg2); *(AIDA::IFilter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createFilter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ; int arg4 ;
  AIDA::IFilter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  arg4 = (int)jarg4;  result = (AIDA::IFilter *)(arg1)->createFilter((std::string const &)*arg2,arg3,arg4);
  *(AIDA::IFilter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createFilter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ; int arg3 ;
  AIDA::IFilter *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  result = (AIDA::IFilter *)(arg1)->createFilter((std::string const &)*arg2,arg3); *(AIDA::IFilter **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITupleFactory_1createEvaluator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; AIDA::ITupleFactory *arg1 = (AIDA::ITupleFactory *) 0 ; std::string *arg2 = 0 ;
  AIDA::IEvaluator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITupleFactory **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (AIDA::IEvaluator *)(arg1)->createEvaluator((std::string const &)*arg2); *(AIDA::IEvaluator **)&jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IBASESTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IBaseStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IBaseStyle **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IBaseStyle_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseStyle **)&jarg1; 
  (arg1)->reset(); }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IBaseStyle_1setParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IBaseStyle_1setParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IBaseStyle_1parameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; std::string *arg2 = 0 ; std::string result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IBaseStyle const *)arg1)->parameterValue((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IBaseStyle_1availableParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseStyle **)&jarg1; 
  result = ((AIDA::IBaseStyle const *)arg1)->availableParameters(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IBaseStyle_1availableParameterOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobjectArray jresult = 0 ; AIDA::IBaseStyle *arg1 = (AIDA::IBaseStyle *) 0 ; std::string *arg2 = 0 ;
  std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBaseStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((AIDA::IBaseStyle const *)arg1)->availableParameterOptions((std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IBRUSHSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IBrushStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IBrushStyle *arg1 = (AIDA::IBrushStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IBrushStyle **)&jarg1; 
  delete arg1; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IBrushStyle_1availableColors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IBrushStyle *arg1 = (AIDA::IBrushStyle *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBrushStyle **)&jarg1; 
  result = ((AIDA::IBrushStyle const *)arg1)->availableColors(); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IBrushStyle_1color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IBrushStyle *arg1 = (AIDA::IBrushStyle *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IBrushStyle **)&jarg1;  result = ((AIDA::IBrushStyle const *)arg1)->color();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_IBrushStyle_1opacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::IBrushStyle *arg1 = (AIDA::IBrushStyle *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IBrushStyle **)&jarg1;  result = (double)((AIDA::IBrushStyle const *)arg1)->opacity();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IBrushStyle_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IBrushStyle *arg1 = (AIDA::IBrushStyle *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IBrushStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setColor((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IBrushStyle_1setOpacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::IBrushStyle *arg1 = (AIDA::IBrushStyle *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IBrushStyle **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->setOpacity(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IDATASTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IDataStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IDataStyle **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataStyle_1lineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; AIDA::ILineStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataStyle **)&jarg1;  { AIDA::ILineStyle &_result_ref = (arg1)->lineStyle();
    result = (AIDA::ILineStyle *) &_result_ref; }  *(AIDA::ILineStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataStyle_1markerStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; AIDA::IMarkerStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataStyle **)&jarg1;  { AIDA::IMarkerStyle &_result_ref = (arg1)->markerStyle();
    result = (AIDA::IMarkerStyle *) &_result_ref; }  *(AIDA::IMarkerStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IDataStyle_1fillStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; AIDA::IFillStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IDataStyle **)&jarg1;  { AIDA::IFillStyle &_result_ref = (arg1)->fillStyle();
    result = (AIDA::IFillStyle *) &_result_ref; }  *(AIDA::IFillStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataStyle_1setLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; AIDA::ILineStyle *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IDataStyle **)&jarg1;  arg2 = *(AIDA::ILineStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ILineStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setLineStyle((AIDA::ILineStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataStyle_1setMarkerStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; AIDA::IMarkerStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IDataStyle **)&jarg1; 
  arg2 = *(AIDA::IMarkerStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IMarkerStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setMarkerStyle((AIDA::IMarkerStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IDataStyle_1setFillStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IDataStyle *arg1 = (AIDA::IDataStyle *) 0 ; AIDA::IFillStyle *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IDataStyle **)&jarg1;  arg2 = *(AIDA::IFillStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IFillStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setFillStyle((AIDA::IFillStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IFILLSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IFillStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IFillStyle *arg1 = (AIDA::IFillStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IFillStyle **)&jarg1;  delete arg1; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IFillStyle_1availablePatterns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IFillStyle *arg1 = (AIDA::IFillStyle *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFillStyle **)&jarg1; 
  result = ((AIDA::IFillStyle const *)arg1)->availablePatterns(); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IFillStyle_1pattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IFillStyle *arg1 = (AIDA::IFillStyle *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IFillStyle **)&jarg1;  result = ((AIDA::IFillStyle const *)arg1)->pattern();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IFillStyle_1setPattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IFillStyle *arg1 = (AIDA::IFillStyle *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IFillStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setPattern((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IINFOSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IInfoStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IInfoStyle *arg1 = (AIDA::IInfoStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IInfoStyle **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IInfoStyle_1textStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IInfoStyle *arg1 = (AIDA::IInfoStyle *) 0 ; AIDA::ITextStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IInfoStyle **)&jarg1;  { AIDA::ITextStyle &_result_ref = (arg1)->textStyle();
    result = (AIDA::ITextStyle *) &_result_ref; }  *(AIDA::ITextStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IInfoStyle_1setTextStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IInfoStyle *arg1 = (AIDA::IInfoStyle *) 0 ; AIDA::ITextStyle *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IInfoStyle **)&jarg1;  arg2 = *(AIDA::ITextStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITextStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setTextStyle((AIDA::ITextStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ILINESTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ILineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ILineStyle *arg1 = (AIDA::ILineStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ILineStyle **)&jarg1;  delete arg1; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ILineStyle_1availableLineTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::ILineStyle *arg1 = (AIDA::ILineStyle *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ILineStyle **)&jarg1; 
  result = ((AIDA::ILineStyle const *)arg1)->availableLineTypes(); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ILineStyle_1lineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::ILineStyle *arg1 = (AIDA::ILineStyle *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ILineStyle **)&jarg1;  result = ((AIDA::ILineStyle const *)arg1)->lineType();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_ILineStyle_1thickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; AIDA::ILineStyle *arg1 = (AIDA::ILineStyle *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ILineStyle **)&jarg1;  result = (int)((AIDA::ILineStyle const *)arg1)->thickness(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ILineStyle_1setLineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ILineStyle *arg1 = (AIDA::ILineStyle *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ILineStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setLineType((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ILineStyle_1setThickness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ; AIDA::ILineStyle *arg1 = (AIDA::ILineStyle *) 0 ; int arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ILineStyle **)&jarg1;  arg2 = (int)jarg2;  result = (bool)(arg1)->setThickness(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITEXTSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITextStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITextStyle **)&jarg1;  delete arg1; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1availableFonts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  result = ((AIDA::ITextStyle const *)arg1)->availableFonts(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jdouble JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1fontSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (double)((AIDA::ITextStyle const *)arg1)->fontSize();
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setFontSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; double arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  arg2 = (double)jarg2;  result = (bool)(arg1)->setFontSize(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1font(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  result = ((AIDA::ITextStyle const *)arg1)->font();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setFont((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1isBold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (bool)((AIDA::ITextStyle const *)arg1)->isBold(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1isItalic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (bool)((AIDA::ITextStyle const *)arg1)->isItalic();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1isUnderlined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (bool)((AIDA::ITextStyle const *)arg1)->isUnderlined();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setBold_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->setBold(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setBold_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (bool)(arg1)->setBold(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setItalic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->setItalic(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setItalic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (bool)(arg1)->setItalic(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setUnderlined_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITextStyle **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->setUnderlined(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITextStyle_1setUnderlined_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; AIDA::ITextStyle *arg1 = (AIDA::ITextStyle *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::ITextStyle **)&jarg1;  result = (bool)(arg1)->setUnderlined(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1ITITLESTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1ITitleStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::ITitleStyle *arg1 = (AIDA::ITitleStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::ITitleStyle **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_ITitleStyle_1textStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::ITitleStyle *arg1 = (AIDA::ITitleStyle *) 0 ; AIDA::ITextStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::ITitleStyle **)&jarg1;  { AIDA::ITextStyle &_result_ref = (arg1)->textStyle();
    result = (AIDA::ITextStyle *) &_result_ref; }  *(AIDA::ITextStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_ITitleStyle_1setTextStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::ITitleStyle *arg1 = (AIDA::ITitleStyle *) 0 ; AIDA::ITextStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::ITitleStyle **)&jarg1; 
  arg2 = *(AIDA::ITextStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITextStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setTextStyle((AIDA::ITextStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IAXISSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IAxisStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IAxisStyle **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1lineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; AIDA::ILineStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IAxisStyle **)&jarg1;  { AIDA::ILineStyle &_result_ref = (arg1)->lineStyle();
    result = (AIDA::ILineStyle *) &_result_ref; }  *(AIDA::ILineStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1tickLabelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; AIDA::ITextStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IAxisStyle **)&jarg1;  { AIDA::ITextStyle &_result_ref = (arg1)->tickLabelStyle();
    result = (AIDA::ITextStyle *) &_result_ref; }  *(AIDA::ITextStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1labelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; AIDA::ITextStyle *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IAxisStyle **)&jarg1;  { AIDA::ITextStyle &_result_ref = (arg1)->labelStyle();
    result = (AIDA::ITextStyle *) &_result_ref; }  *(AIDA::ITextStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1setlineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; AIDA::ILineStyle *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAxisStyle **)&jarg1;  arg2 = *(AIDA::ILineStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ILineStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setlineStyle((AIDA::ILineStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1setTickLabelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; AIDA::ITextStyle *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAxisStyle **)&jarg1;  arg2 = *(AIDA::ITextStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITextStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setTickLabelStyle((AIDA::ITextStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1setLabelStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; AIDA::ITextStyle *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IAxisStyle **)&jarg1;  arg2 = *(AIDA::ITextStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITextStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setLabelStyle((AIDA::ITextStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_IAxisStyle_1setLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AIDA::IAxisStyle *arg1 = (AIDA::IAxisStyle *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(AIDA::IAxisStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setLabel((std::string const &)*arg2); }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IMARKERSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IMarkerStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IMarkerStyle *arg1 = (AIDA::IMarkerStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IMarkerStyle **)&jarg1; 
  delete arg1; }
SWIGEXPORT jobjectArray JNICALL Java_hep_aida_OnXLabJNI_IMarkerStyle_1availableShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; AIDA::IMarkerStyle *arg1 = (AIDA::IMarkerStyle *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IMarkerStyle **)&jarg1; 
  result = ((AIDA::IMarkerStyle const *)arg1)->availableShapes(); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_hep_aida_OnXLabJNI_IMarkerStyle_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; AIDA::IMarkerStyle *arg1 = (AIDA::IMarkerStyle *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(AIDA::IMarkerStyle **)&jarg1;  result = ((AIDA::IMarkerStyle const *)arg1)->shape();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IMarkerStyle_1setShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; AIDA::IMarkerStyle *arg1 = (AIDA::IMarkerStyle *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IMarkerStyle **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setShape((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_hep_aida_OnXLabJNI_AIDA_1IPLOTTERSTYLE_1H_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1IPlotterStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1dataStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IDataStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterStyle **)&jarg1;  { AIDA::IDataStyle &_result_ref = (arg1)->dataStyle();
    result = (AIDA::IDataStyle *) &_result_ref; }  *(AIDA::IDataStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1xAxisStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IAxisStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterStyle **)&jarg1;  { AIDA::IAxisStyle &_result_ref = (arg1)->xAxisStyle();
    result = (AIDA::IAxisStyle *) &_result_ref; }  *(AIDA::IAxisStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1yAxisStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IAxisStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterStyle **)&jarg1;  { AIDA::IAxisStyle &_result_ref = (arg1)->yAxisStyle();
    result = (AIDA::IAxisStyle *) &_result_ref; }  *(AIDA::IAxisStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1zAxisStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IAxisStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterStyle **)&jarg1;  { AIDA::IAxisStyle &_result_ref = (arg1)->zAxisStyle();
    result = (AIDA::IAxisStyle *) &_result_ref; }  *(AIDA::IAxisStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1titleStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::ITitleStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterStyle **)&jarg1;  { AIDA::ITitleStyle &_result_ref = (arg1)->titleStyle();
    result = (AIDA::ITitleStyle *) &_result_ref; }  *(AIDA::ITitleStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1infoStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IInfoStyle *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(AIDA::IPlotterStyle **)&jarg1;  { AIDA::IInfoStyle &_result_ref = (arg1)->infoStyle();
    result = (AIDA::IInfoStyle *) &_result_ref; }  *(AIDA::IInfoStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1setDataStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IDataStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  arg2 = *(AIDA::IDataStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IDataStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setDataStyle((AIDA::IDataStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1setAxisStyleX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IAxisStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  arg2 = *(AIDA::IAxisStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IAxisStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setAxisStyleX((AIDA::IAxisStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1setAxisStyleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IAxisStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  arg2 = *(AIDA::IAxisStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IAxisStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setAxisStyleY((AIDA::IAxisStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1setAxisStyleZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IAxisStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  arg2 = *(AIDA::IAxisStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IAxisStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setAxisStyleZ((AIDA::IAxisStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1setTitleStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::ITitleStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  arg2 = *(AIDA::ITitleStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITitleStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setTitleStyle((AIDA::ITitleStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_IPlotterStyle_1setInfoStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; AIDA::IPlotterStyle *arg1 = (AIDA::IPlotterStyle *) 0 ; AIDA::IInfoStyle *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(AIDA::IPlotterStyle **)&jarg1; 
  arg2 = *(AIDA::IInfoStyle **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::IInfoStyle const & reference is null"); return 0; }  
  result = (bool)(arg1)->setInfoStyle((AIDA::IInfoStyle const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createTreeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::ITreeFactory *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  result = (AIDA::ITreeFactory *)(arg1)->createTreeFactory();
  *(AIDA::ITreeFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createHistogramFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::ITree *arg2 = 0 ; AIDA::IHistogramFactory *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OnXLab::Main **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::IHistogramFactory *)(arg1)->createHistogramFactory(*arg2); *(AIDA::IHistogramFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createTupleFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::ITree *arg2 = 0 ; AIDA::ITupleFactory *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OnXLab::Main **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::ITupleFactory *)(arg1)->createTupleFactory(*arg2); *(AIDA::ITupleFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createFunctionFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::ITree *arg2 = 0 ; AIDA::IFunctionFactory *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OnXLab::Main **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::IFunctionFactory *)(arg1)->createFunctionFactory(*arg2); *(AIDA::IFunctionFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createPlotterFactory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; int arg2 ; char **arg3 = (char **) 0 ; std::string *arg4 = 0 ;
  std::string *arg5 = 0 ; AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnXLab::Main **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(char ***)&jarg3;  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createPlotterFactory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; int arg2 ; char **arg3 = (char **) 0 ; std::string *arg4 = 0 ;
  AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = *(char ***)&jarg3;  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2,arg3,(std::string const &)*arg4);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createPlotterFactory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; int arg2 ; char **arg3 = (char **) 0 ;
  AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = *(char ***)&jarg3;  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2,arg3);
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createPlotterFactory_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; int arg2 ; AIDA::IPlotterFactory *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  arg2 = (int)jarg2; 
  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory(arg2); *(AIDA::IPlotterFactory **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createPlotterFactory_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::IPlotterFactory *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  result = (AIDA::IPlotterFactory *)(arg1)->createPlotterFactory();
  *(AIDA::IPlotterFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createDataPointSetFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::ITree *arg2 = 0 ; AIDA::IDataPointSetFactory *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(OnXLab::Main **)&jarg1;  arg2 = *(AIDA::ITree **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AIDA::ITree & reference is null"); return 0; }  
  result = (AIDA::IDataPointSetFactory *)(arg1)->createDataPointSetFactory(*arg2);
  *(AIDA::IDataPointSetFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createFitFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; AIDA::IFitFactory *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  result = (AIDA::IFitFactory *)(arg1)->createFitFactory();
  *(AIDA::IFitFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_new_1Main_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ; std::vector<std::string > *arg1 = 0 ; OnXLab::Main *result = 0 ; (void)jenv; (void)jcls; { int i = 0;
    jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (OnXLab::Main *)new OnXLab::Main((std::vector<std::string > const &)*arg1); *(OnXLab::Main **)&jresult = result;  {
    delete arg1; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_new_1Main_1_1SWIG_11(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OnXLab::Main *result = 0 ; (void)jenv; (void)jcls; result = (OnXLab::Main *)new OnXLab::Main();
  *(OnXLab::Main **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_hep_aida_OnXLabJNI_delete_1Main(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; (void)jenv; (void)jcls; arg1 = *(OnXLab::Main **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1createUI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool arg4 ;
  Slash::UI::IUI *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (Slash::UI::IUI *)(arg1)->createUI((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(Slash::UI::IUI **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_Main_1ui(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; Slash::UI::IUI *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  result = (Slash::UI::IUI *)((OnXLab::Main const *)arg1)->ui();
  *(Slash::UI::IUI **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_Main_1loadInterpreter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; std::string *arg2 = 0 ; bool arg3 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  result = (bool)((OnXLab::Main const *)arg1)->loadInterpreter((std::string const &)*arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_hep_aida_OnXLabJNI_Main_1loadInterpreter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; OnXLab::Main *arg1 = (OnXLab::Main *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnXLab::Main **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OnXLab::Main const *)arg1)->loadInterpreter((std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_find_1aida(JNIEnv *jenv, jclass jcls, jlong jarg1) { jlong jresult = 0 ;
  Slash::Core::ISession *arg1 = 0 ; AIDA::IAnalysisFactory *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Slash::Core::ISession **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::Core::ISession & reference is null"); return 0; }  
  result = (AIDA::IAnalysisFactory *)find_aida(*arg1); *(AIDA::IAnalysisFactory **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGICloudUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseHistogram **)&baseptr = *(AIDA::ICloud **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGICloud1DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::ICloud **)&baseptr = *(AIDA::ICloud1D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGICloud2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::ICloud **)&baseptr = *(AIDA::ICloud2D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGICloud3DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::ICloud **)&baseptr = *(AIDA::ICloud3D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIHistogramUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseHistogram **)&baseptr = *(AIDA::IHistogram **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIHistogram1DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IHistogram **)&baseptr = *(AIDA::IHistogram1D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIHistogram2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IHistogram **)&baseptr = *(AIDA::IHistogram2D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIHistogram3DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IHistogram **)&baseptr = *(AIDA::IHistogram3D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIModelFunctionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IFunction **)&baseptr = *(AIDA::IModelFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIProfileUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseHistogram **)&baseptr = *(AIDA::IProfile **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIProfile1DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IProfile **)&baseptr = *(AIDA::IProfile1D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIProfile2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IProfile **)&baseptr = *(AIDA::IProfile2D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIBrushStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseStyle **)&baseptr = *(AIDA::IBrushStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIDataStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseStyle **)&baseptr = *(AIDA::IDataStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIFillStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBrushStyle **)&baseptr = *(AIDA::IFillStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIInfoStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseStyle **)&baseptr = *(AIDA::IInfoStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGILineStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBrushStyle **)&baseptr = *(AIDA::ILineStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGITextStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBrushStyle **)&baseptr = *(AIDA::ITextStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGITitleStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseStyle **)&baseptr = *(AIDA::ITitleStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIAxisStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseStyle **)&baseptr = *(AIDA::IAxisStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIMarkerStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBrushStyle **)&baseptr = *(AIDA::IMarkerStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGIPlotterStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IBaseStyle **)&baseptr = *(AIDA::IPlotterStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_hep_aida_OnXLabJNI_SWIGMainUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AIDA::IAnalysisFactory **)&baseptr = *(OnXLab::Main **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

