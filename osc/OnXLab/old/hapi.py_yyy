# hapi is for Handy API.

import AIDA

# Do the below try/execpt in case of : 
#   OS> python -i hapi.py
#   >>> import hapi
# In this case the 'import hapi' reexecutes
# the content of hapi and then g_aida is no
# more a singleton.
try:
  import __main__
  g_aida = __main__.g_aida
except AttributeError:
  g_aida = AIDA.createAnalysisFactory()

# in principle the upper g_aida is going
# to be deleted after all the instances
# of the below classes.

class H1D:
#   __swig_setmethods__ = {}
#   for _s in [IBaseHistogram]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
#   __setattr__ = lambda self, name, value: _swig_setattr(self, IHistogram, name, value)
#   __swig_getmethods__ = {}
#   for _s in [IBaseHistogram]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
#   __getattr__ = lambda self, name: _swig_getattr(self, IHistogram, name)
#   def __init__(self): raise AttributeError, "No constructor defined"
#   __repr__ = _swig_repr
#   __swig_destroy__ = OnXLab_SWIG_Python.delete_IHistogram
#   __del__ = lambda self : None;

  def __init__(self,a_name,a_title,a_n,a_min,a_max):
    tf = g_aida.createTreeFactory()
    tree = tf.create()
    del tf
    hf = g_aida.createHistogramFactory(tree)
    self.m_h = hf.createHistogram1D(a_name,a_title,a_n,a_min,a_max)
    del hf
  def __del__(self):
    del self.m_h
  def fill(self,a_value, a_weight = 1):
    self.m_h.fill(a_value,a_weight)
  #INTERNAL:
  def get_m_h(self):
    return self.m_h;

class Plotter:
  def __init__(self,a_title = ''):
    pf = g_aida.createPlotterFactory()
    self.m_plotter = pf.create('')
    del pf
    self.m_plotter.createRegions(1,1,0)
    self.m_plotter.setTitle(a_title)
    self.m_plotter.show()
  def __del__(self):
    del self.m_plotter
  def show(self):
    self.m_plotter.show()
  def interact(self):
    self.m_plotter.interact()
  def plot(self,a_histo):
    region = self.m_plotter.currentRegion()
    region.plot(a_histo.get_m_h())
    self.m_plotter.refresh()
    import OnX
    ui = OnX.session().ui()
    if ui != None : OnX.set_PyOS_InputHook(ui)
  def clear(self):
    region = self.m_plotter.currentRegion()
    region.clear()
  def title(self,a_title):
    region = self.m_plotter.currentRegion()
    region.setTitle(a_title)
  def x_label(self,a_label):
    region = self.m_plotter.currentRegion()
    region.style().xAxisStyle().setLabel(a_label)
  def y_label(self,a_label):
    region = self.m_plotter.currentRegion()
    region.style().yAxisStyle().setLabel(a_label)



