#
# Technical note :
# --------------
#  With SWIG, we have not createed a "%module AIDA"
# but a "%module OnXLab". Then the DLL is OnXLab_SWIG_Python
# and the generated .py is OnXLab.py and not
# this AIDA.py. In order to "namespace" to AIDA we
# do the below "form OnXLab import *".
#  The SWIG files are in OnXLab/source/SWIG and the
# main one (%module) is OnXLab_SWIG.i.
#

from OnXLab import *

class H1D:
  def __init__(self,a_aida,a_name,a_title,a_n,a_min,a_max):
    tf = a_aida.createTreeFactory()
    tree = tf.create()
    del tf
    hf = a_aida.createHistogramFactory(tree)
    self.m_h = hf.createHistogram1D(a_name,a_title,a_n,a_min,a_max)
    del hf
  def __del__(self):
    del self.m_h
  def fill(self,a_value, a_weight = 1):
    self.m_h.fill(a_value,a_weight)
  #INTERNAL:
  def get_m_h(self):
    return self.m_h;

class Plotter:
  def __init__(self,a_aida):
    pf = a_aida.createPlotterFactory()
    self.m_plotter = pf.create('')
    del pf
    self.m_plotter.createRegions(1,1,0)
    self.m_plotter.show()
  def __del__(self):
    print 'debug : ~AIDA::Plotter'
    del self.m_plotter
  def show(self):
    self.m_plotter.show()
  def interact(self):
    self.m_plotter.interact()
  def plot(self,a_histo):
    region = self.m_plotter.currentRegion()
    region.plot(a_histo.get_m_h())
    self.m_plotter.refresh()
  def clear(self):
    region = self.m_plotter.currentRegion()
    region.clear()
  def set_title(self,a_title):
    region = self.m_plotter.currentRegion()
    region.setTitle(a_title)
  def set_x_label(self,a_label):
    region = self.m_plotter.currentRegion()
    region.style().xAxisStyle().setLabel(a_label)
  def set_y_label(self,a_label):
    region = self.m_plotter.currentRegion()
    region.style().yAxisStyle().setLabel(a_label)

