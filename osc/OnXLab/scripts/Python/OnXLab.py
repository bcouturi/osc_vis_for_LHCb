# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import OnXLab_SWIG_Python
else:
    import OnXLab_SWIG_Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_SwigPyIterator

    def value(self):
        return OnXLab_SWIG_Python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return OnXLab_SWIG_Python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return OnXLab_SWIG_Python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return OnXLab_SWIG_Python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return OnXLab_SWIG_Python.SwigPyIterator_equal(self, x)

    def copy(self):
        return OnXLab_SWIG_Python.SwigPyIterator_copy(self)

    def next(self):
        return OnXLab_SWIG_Python.SwigPyIterator_next(self)

    def __next__(self):
        return OnXLab_SWIG_Python.SwigPyIterator___next__(self)

    def previous(self):
        return OnXLab_SWIG_Python.SwigPyIterator_previous(self)

    def advance(self, n):
        return OnXLab_SWIG_Python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return OnXLab_SWIG_Python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return OnXLab_SWIG_Python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return OnXLab_SWIG_Python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return OnXLab_SWIG_Python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return OnXLab_SWIG_Python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return OnXLab_SWIG_Python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.SwigPyIterator_swigregister(SwigPyIterator)

AIDA_IANALYSISFACTORY_H = OnXLab_SWIG_Python.AIDA_IANALYSISFACTORY_H
class IAnalysisFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IAnalysisFactory

    def createTreeFactory(self):
        return OnXLab_SWIG_Python.IAnalysisFactory_createTreeFactory(self)

    def createHistogramFactory(self, tree):
        return OnXLab_SWIG_Python.IAnalysisFactory_createHistogramFactory(self, tree)

    def createDataPointSetFactory(self, tree):
        return OnXLab_SWIG_Python.IAnalysisFactory_createDataPointSetFactory(self, tree)

    def createTupleFactory(self, tree):
        return OnXLab_SWIG_Python.IAnalysisFactory_createTupleFactory(self, tree)

    def createFunctionFactory(self, tree):
        return OnXLab_SWIG_Python.IAnalysisFactory_createFunctionFactory(self, tree)

    def createPlotterFactory(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_createPlotterFactory(self, *args)

    def createFitFactory(self):
        return OnXLab_SWIG_Python.IAnalysisFactory_createFitFactory(self)

    def find_memoryTree(self):
        return OnXLab_SWIG_Python.IAnalysisFactory_find_memoryTree(self)

    def create_tree(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_tree(self, *args)

    def create_histogram1D(self, aTree, aName, aTitle, aXnumber, aXmin, aXmax):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_histogram1D(self, aTree, aName, aTitle, aXnumber, aXmin, aXmax)

    def copy_histogram1D(self, aTree, aPath, aHisto):
        return OnXLab_SWIG_Python.IAnalysisFactory_copy_histogram1D(self, aTree, aPath, aHisto)

    def copy_histogram2D(self, aTree, aPath, aHisto):
        return OnXLab_SWIG_Python.IAnalysisFactory_copy_histogram2D(self, aTree, aPath, aHisto)

    def copy_baseHistogram(self, aTree, aPath, aHisto):
        return OnXLab_SWIG_Python.IAnalysisFactory_copy_baseHistogram(self, aTree, aPath, aHisto)

    def create_histogram2D(self, aTree, aName, aTitle, aXnumber, aXmin, aXmax, aYnumber, aYmin, aYmax):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_histogram2D(self, aTree, aName, aTitle, aXnumber, aXmin, aXmax, aYnumber, aYmin, aYmax)

    def create_histogram3D(self, aTree, aName, aTitle, aXnumber, aXmin, aXmax, aYnumber, aYmin, aYmax, aZnumber, aZmin, aZmax):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_histogram3D(self, aTree, aName, aTitle, aXnumber, aXmin, aXmax, aYnumber, aYmin, aYmax, aZnumber, aZmin, aZmax)

    def create_profile1D(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_profile1D(self, *args)

    def create_profile2D(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_profile2D(self, *args)

    def create_cloud2D(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_cloud2D(self, *args)

    def create_dataPointSet(self, aTree, aName, aTitle, aDimension):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_dataPointSet(self, aTree, aName, aTitle, aDimension)

    def create_fitter(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_fitter(self, *args)

    def create_function(self, aTree, aPath, aTitle, aModel):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_function(self, aTree, aPath, aTitle, aModel)

    def create_scripted_function(self, aTree, aName, aDimension, aScript):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_scripted_function(self, aTree, aName, aDimension, aScript)

    def create_tuple(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_tuple(self, *args)

    def create_filter(self, aTree, aExpression):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_filter(self, aTree, aExpression)

    def create_evaluator(self, aTree, aExpression):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_evaluator(self, aTree, aExpression)

    def create_plotter(self, *args):
        return OnXLab_SWIG_Python.IAnalysisFactory_create_plotter(self, *args)

# Register IAnalysisFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IAnalysisFactory_swigregister(IAnalysisFactory)

AIDA_IANNOTATION_H = OnXLab_SWIG_Python.AIDA_IANNOTATION_H
class IAnnotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IAnnotation

    def addItem(self, key, value, sticky=False):
        return OnXLab_SWIG_Python.IAnnotation_addItem(self, key, value, sticky)

    def removeItem(self, key):
        return OnXLab_SWIG_Python.IAnnotation_removeItem(self, key)

    def setValue(self, key, value):
        return OnXLab_SWIG_Python.IAnnotation_setValue(self, key, value)

    def setSticky(self, key, sticky):
        return OnXLab_SWIG_Python.IAnnotation_setSticky(self, key, sticky)

    def size(self):
        return OnXLab_SWIG_Python.IAnnotation_size(self)

    def key(self, index):
        return OnXLab_SWIG_Python.IAnnotation_key(self, index)

    def value(self, *args):
        return OnXLab_SWIG_Python.IAnnotation_value(self, *args)

    def reset(self):
        return OnXLab_SWIG_Python.IAnnotation_reset(self)

# Register IAnnotation in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IAnnotation_swigregister(IAnnotation)

AIDA_IAXIS_H = OnXLab_SWIG_Python.AIDA_IAXIS_H
class IAxis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IAxis

    def isFixedBinning(self):
        return OnXLab_SWIG_Python.IAxis_isFixedBinning(self)

    def lowerEdge(self):
        return OnXLab_SWIG_Python.IAxis_lowerEdge(self)

    def upperEdge(self):
        return OnXLab_SWIG_Python.IAxis_upperEdge(self)

    def bins(self):
        return OnXLab_SWIG_Python.IAxis_bins(self)

    def binLowerEdge(self, index):
        return OnXLab_SWIG_Python.IAxis_binLowerEdge(self, index)

    def binUpperEdge(self, index):
        return OnXLab_SWIG_Python.IAxis_binUpperEdge(self, index)

    def binWidth(self, index):
        return OnXLab_SWIG_Python.IAxis_binWidth(self, index)

    def coordToIndex(self, coord):
        return OnXLab_SWIG_Python.IAxis_coordToIndex(self, coord)
    UNDERFLOW_BIN = OnXLab_SWIG_Python.IAxis_UNDERFLOW_BIN
    OVERFLOW_BIN = OnXLab_SWIG_Python.IAxis_OVERFLOW_BIN

# Register IAxis in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IAxis_swigregister(IAxis)

AIDA_IBASEHISTOGRAM_H = OnXLab_SWIG_Python.AIDA_IBASEHISTOGRAM_H
class IBaseHistogram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IBaseHistogram

    def title(self):
        return OnXLab_SWIG_Python.IBaseHistogram_title(self)

    def setTitle(self, title):
        return OnXLab_SWIG_Python.IBaseHistogram_setTitle(self, title)

    def annotation(self):
        return OnXLab_SWIG_Python.IBaseHistogram_annotation(self)

    def dimension(self):
        return OnXLab_SWIG_Python.IBaseHistogram_dimension(self)

    def reset(self):
        return OnXLab_SWIG_Python.IBaseHistogram_reset(self)

    def entries(self):
        return OnXLab_SWIG_Python.IBaseHistogram_entries(self)

    def cast(self, className):
        return OnXLab_SWIG_Python.IBaseHistogram_cast(self, className)

    def cast_IHistogram1D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_IHistogram1D(self)

    def cast_IHistogram2D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_IHistogram2D(self)

    def cast_IHistogram3D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_IHistogram3D(self)

    def cast_IProfile1D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_IProfile1D(self)

    def cast_IProfile2D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_IProfile2D(self)

    def cast_ICloud1D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_ICloud1D(self)

    def cast_ICloud2D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_ICloud2D(self)

    def cast_ICloud3D(self):
        return OnXLab_SWIG_Python.IBaseHistogram_cast_ICloud3D(self)

# Register IBaseHistogram in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IBaseHistogram_swigregister(IBaseHistogram)

AIDA_ICLOUD_H = OnXLab_SWIG_Python.AIDA_ICLOUD_H
class ICloud(IBaseHistogram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ICloud

    def sumOfWeights(self):
        return OnXLab_SWIG_Python.ICloud_sumOfWeights(self)

    def convertToHistogram(self):
        return OnXLab_SWIG_Python.ICloud_convertToHistogram(self)

    def isConverted(self):
        return OnXLab_SWIG_Python.ICloud_isConverted(self)

    def maxEntries(self):
        return OnXLab_SWIG_Python.ICloud_maxEntries(self)

    def scale(self, scaleFactor):
        return OnXLab_SWIG_Python.ICloud_scale(self, scaleFactor)

# Register ICloud in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ICloud_swigregister(ICloud)

AIDA_ICLOUD1D_H = OnXLab_SWIG_Python.AIDA_ICLOUD1D_H
class ICloud1D(ICloud):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ICloud1D

    def fill(self, x, weight=1.):
        return OnXLab_SWIG_Python.ICloud1D_fill(self, x, weight)

    def lowerEdge(self):
        return OnXLab_SWIG_Python.ICloud1D_lowerEdge(self)

    def upperEdge(self):
        return OnXLab_SWIG_Python.ICloud1D_upperEdge(self)

    def value(self, index):
        return OnXLab_SWIG_Python.ICloud1D_value(self, index)

    def weight(self, index):
        return OnXLab_SWIG_Python.ICloud1D_weight(self, index)

    def mean(self):
        return OnXLab_SWIG_Python.ICloud1D_mean(self)

    def rms(self):
        return OnXLab_SWIG_Python.ICloud1D_rms(self)

    def convert(self, *args):
        return OnXLab_SWIG_Python.ICloud1D_convert(self, *args)

    def histogram(self):
        return OnXLab_SWIG_Python.ICloud1D_histogram(self)

    def fillHistogram(self, hist):
        return OnXLab_SWIG_Python.ICloud1D_fillHistogram(self, hist)

# Register ICloud1D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ICloud1D_swigregister(ICloud1D)

AIDA_ICLOUD2D_H = OnXLab_SWIG_Python.AIDA_ICLOUD2D_H
class ICloud2D(ICloud):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ICloud2D

    def fill(self, x, y, weight=1.):
        return OnXLab_SWIG_Python.ICloud2D_fill(self, x, y, weight)

    def lowerEdgeX(self):
        return OnXLab_SWIG_Python.ICloud2D_lowerEdgeX(self)

    def lowerEdgeY(self):
        return OnXLab_SWIG_Python.ICloud2D_lowerEdgeY(self)

    def upperEdgeX(self):
        return OnXLab_SWIG_Python.ICloud2D_upperEdgeX(self)

    def upperEdgeY(self):
        return OnXLab_SWIG_Python.ICloud2D_upperEdgeY(self)

    def valueX(self, index):
        return OnXLab_SWIG_Python.ICloud2D_valueX(self, index)

    def valueY(self, index):
        return OnXLab_SWIG_Python.ICloud2D_valueY(self, index)

    def weight(self, index):
        return OnXLab_SWIG_Python.ICloud2D_weight(self, index)

    def meanX(self):
        return OnXLab_SWIG_Python.ICloud2D_meanX(self)

    def meanY(self):
        return OnXLab_SWIG_Python.ICloud2D_meanY(self)

    def rmsX(self):
        return OnXLab_SWIG_Python.ICloud2D_rmsX(self)

    def rmsY(self):
        return OnXLab_SWIG_Python.ICloud2D_rmsY(self)

    def convert(self, *args):
        return OnXLab_SWIG_Python.ICloud2D_convert(self, *args)

    def histogram(self):
        return OnXLab_SWIG_Python.ICloud2D_histogram(self)

    def fillHistogram(self, hist):
        return OnXLab_SWIG_Python.ICloud2D_fillHistogram(self, hist)

# Register ICloud2D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ICloud2D_swigregister(ICloud2D)

AIDA_ICLOUD3D_H = OnXLab_SWIG_Python.AIDA_ICLOUD3D_H
class ICloud3D(ICloud):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ICloud3D

    def fill(self, x, y, z, weight=1.):
        return OnXLab_SWIG_Python.ICloud3D_fill(self, x, y, z, weight)

    def lowerEdgeX(self):
        return OnXLab_SWIG_Python.ICloud3D_lowerEdgeX(self)

    def lowerEdgeY(self):
        return OnXLab_SWIG_Python.ICloud3D_lowerEdgeY(self)

    def lowerEdgeZ(self):
        return OnXLab_SWIG_Python.ICloud3D_lowerEdgeZ(self)

    def upperEdgeX(self):
        return OnXLab_SWIG_Python.ICloud3D_upperEdgeX(self)

    def upperEdgeY(self):
        return OnXLab_SWIG_Python.ICloud3D_upperEdgeY(self)

    def upperEdgeZ(self):
        return OnXLab_SWIG_Python.ICloud3D_upperEdgeZ(self)

    def valueX(self, index):
        return OnXLab_SWIG_Python.ICloud3D_valueX(self, index)

    def valueY(self, index):
        return OnXLab_SWIG_Python.ICloud3D_valueY(self, index)

    def valueZ(self, index):
        return OnXLab_SWIG_Python.ICloud3D_valueZ(self, index)

    def weight(self, index):
        return OnXLab_SWIG_Python.ICloud3D_weight(self, index)

    def meanX(self):
        return OnXLab_SWIG_Python.ICloud3D_meanX(self)

    def meanY(self):
        return OnXLab_SWIG_Python.ICloud3D_meanY(self)

    def meanZ(self):
        return OnXLab_SWIG_Python.ICloud3D_meanZ(self)

    def rmsX(self):
        return OnXLab_SWIG_Python.ICloud3D_rmsX(self)

    def rmsY(self):
        return OnXLab_SWIG_Python.ICloud3D_rmsY(self)

    def rmsZ(self):
        return OnXLab_SWIG_Python.ICloud3D_rmsZ(self)

    def convert(self, *args):
        return OnXLab_SWIG_Python.ICloud3D_convert(self, *args)

    def histogram(self):
        return OnXLab_SWIG_Python.ICloud3D_histogram(self)

    def fillHistogram(self, hist):
        return OnXLab_SWIG_Python.ICloud3D_fillHistogram(self, hist)

# Register ICloud3D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ICloud3D_swigregister(ICloud3D)

AIDA_ICONSTANTS_H = OnXLab_SWIG_Python.AIDA_ICONSTANTS_H
AIDA_VERSION = OnXLab_SWIG_Python.AIDA_VERSION
AIDA_VERSION_MAJOR = OnXLab_SWIG_Python.AIDA_VERSION_MAJOR
AIDA_VERSION_MINOR = OnXLab_SWIG_Python.AIDA_VERSION_MINOR
AIDA_IDATAPOINT_H = OnXLab_SWIG_Python.AIDA_IDATAPOINT_H
class IDataPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IDataPoint

    def dimension(self):
        return OnXLab_SWIG_Python.IDataPoint_dimension(self)

    def coordinate(self, coord):
        return OnXLab_SWIG_Python.IDataPoint_coordinate(self, coord)

# Register IDataPoint in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IDataPoint_swigregister(IDataPoint)

AIDA_IDATAPOINTSET_H = OnXLab_SWIG_Python.AIDA_IDATAPOINTSET_H
class IDataPointSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IDataPointSet

    def annotation(self):
        return OnXLab_SWIG_Python.IDataPointSet_annotation(self)

    def title(self):
        return OnXLab_SWIG_Python.IDataPointSet_title(self)

    def setTitle(self, title):
        return OnXLab_SWIG_Python.IDataPointSet_setTitle(self, title)

    def dimension(self):
        return OnXLab_SWIG_Python.IDataPointSet_dimension(self)

    def clear(self):
        return OnXLab_SWIG_Python.IDataPointSet_clear(self)

    def size(self):
        return OnXLab_SWIG_Python.IDataPointSet_size(self)

    def point(self, index):
        return OnXLab_SWIG_Python.IDataPointSet_point(self, index)

    def setCoordinate(self, *args):
        return OnXLab_SWIG_Python.IDataPointSet_setCoordinate(self, *args)

    def addPoint(self, *args):
        return OnXLab_SWIG_Python.IDataPointSet_addPoint(self, *args)

    def removePoint(self, index):
        return OnXLab_SWIG_Python.IDataPointSet_removePoint(self, index)

    def lowerExtent(self, coord):
        return OnXLab_SWIG_Python.IDataPointSet_lowerExtent(self, coord)

    def upperExtent(self, coord):
        return OnXLab_SWIG_Python.IDataPointSet_upperExtent(self, coord)

    def scale(self, scaleFactor):
        return OnXLab_SWIG_Python.IDataPointSet_scale(self, scaleFactor)

    def scaleValues(self, scaleFactor):
        return OnXLab_SWIG_Python.IDataPointSet_scaleValues(self, scaleFactor)

    def scaleErrors(self, scaleFactor):
        return OnXLab_SWIG_Python.IDataPointSet_scaleErrors(self, scaleFactor)

    def cast(self, className):
        return OnXLab_SWIG_Python.IDataPointSet_cast(self, className)

# Register IDataPointSet in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IDataPointSet_swigregister(IDataPointSet)

AIDA_IDATAPOINTSETFACTORY_H = OnXLab_SWIG_Python.AIDA_IDATAPOINTSETFACTORY_H
class IDataPointSetFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IDataPointSetFactory

    def createY(self, *args):
        return OnXLab_SWIG_Python.IDataPointSetFactory_createY(self, *args)

    def createX(self, *args):
        return OnXLab_SWIG_Python.IDataPointSetFactory_createX(self, *args)

    def createXY(self, *args):
        return OnXLab_SWIG_Python.IDataPointSetFactory_createXY(self, *args)

    def createXYZ(self, *args):
        return OnXLab_SWIG_Python.IDataPointSetFactory_createXYZ(self, *args)

    def createCopy(self, path, dataPointSet):
        return OnXLab_SWIG_Python.IDataPointSetFactory_createCopy(self, path, dataPointSet)

    def destroy(self, dataPointSet):
        return OnXLab_SWIG_Python.IDataPointSetFactory_destroy(self, dataPointSet)

    def create(self, *args):
        return OnXLab_SWIG_Python.IDataPointSetFactory_create(self, *args)

    def add(self, path, dataPointSet1, dataPointSet2):
        return OnXLab_SWIG_Python.IDataPointSetFactory_add(self, path, dataPointSet1, dataPointSet2)

    def subtract(self, path, dataPointSet1, dataPointSet2):
        return OnXLab_SWIG_Python.IDataPointSetFactory_subtract(self, path, dataPointSet1, dataPointSet2)

    def multiply(self, path, dataPointSet1, dataPointSet2):
        return OnXLab_SWIG_Python.IDataPointSetFactory_multiply(self, path, dataPointSet1, dataPointSet2)

    def divide(self, path, dataPointSet1, dataPointSet2):
        return OnXLab_SWIG_Python.IDataPointSetFactory_divide(self, path, dataPointSet1, dataPointSet2)

    def weightedMean(self, path, dataPointSet1, dataPointSet2):
        return OnXLab_SWIG_Python.IDataPointSetFactory_weightedMean(self, path, dataPointSet1, dataPointSet2)

# Register IDataPointSetFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IDataPointSetFactory_swigregister(IDataPointSetFactory)

AIDA_IEVALUATOR_H = OnXLab_SWIG_Python.AIDA_IEVALUATOR_H
class IEvaluator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IEvaluator

    def initialize(self, tuple):
        return OnXLab_SWIG_Python.IEvaluator_initialize(self, tuple)

    def evaluateDouble(self):
        return OnXLab_SWIG_Python.IEvaluator_evaluateDouble(self)

    def expression(self):
        return OnXLab_SWIG_Python.IEvaluator_expression(self)

# Register IEvaluator in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IEvaluator_swigregister(IEvaluator)

AIDA_IFILTER_H = OnXLab_SWIG_Python.AIDA_IFILTER_H
class IFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFilter

    def initialize(self, tuple):
        return OnXLab_SWIG_Python.IFilter_initialize(self, tuple)

    def accept(self):
        return OnXLab_SWIG_Python.IFilter_accept(self)

    def expression(self):
        return OnXLab_SWIG_Python.IFilter_expression(self)

# Register IFilter in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFilter_swigregister(IFilter)

AIDA_IFITDATA_H = OnXLab_SWIG_Python.AIDA_IFITDATA_H
class IFitData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFitData

    def create1DConnection(self, *args):
        return OnXLab_SWIG_Python.IFitData_create1DConnection(self, *args)

    def create2DConnection(self, *args):
        return OnXLab_SWIG_Python.IFitData_create2DConnection(self, *args)

    def create3DConnection(self, *args):
        return OnXLab_SWIG_Python.IFitData_create3DConnection(self, *args)

    def createConnection(self, *args):
        return OnXLab_SWIG_Python.IFitData_createConnection(self, *args)

    def reset(self):
        return OnXLab_SWIG_Python.IFitData_reset(self)

    def dimension(self):
        return OnXLab_SWIG_Python.IFitData_dimension(self)

    def dataDescription(self):
        return OnXLab_SWIG_Python.IFitData_dataDescription(self)

    def range(self, index):
        return OnXLab_SWIG_Python.IFitData_range(self, index)

# Register IFitData in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFitData_swigregister(IFitData)

AIDA_IFITFACTORY_H = OnXLab_SWIG_Python.AIDA_IFITFACTORY_H
class IFitFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFitFactory

    def createFitData(self):
        return OnXLab_SWIG_Python.IFitFactory_createFitData(self)

    def createFitter(self, *args):
        return OnXLab_SWIG_Python.IFitFactory_createFitter(self, *args)

# Register IFitFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFitFactory_swigregister(IFitFactory)

AIDA_IFITPARAMETERSETTINGS_H = OnXLab_SWIG_Python.AIDA_IFITPARAMETERSETTINGS_H
class IFitParameterSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFitParameterSettings

    def name(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_name(self)

    def stepSize(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_stepSize(self)

    def upperBound(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_upperBound(self)

    def lowerBound(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_lowerBound(self)

    def isBound(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_isBound(self)

    def isFixed(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_isFixed(self)

    def setStepSize(self, step):
        return OnXLab_SWIG_Python.IFitParameterSettings_setStepSize(self, step)

    def setBounds(self, lo, up):
        return OnXLab_SWIG_Python.IFitParameterSettings_setBounds(self, lo, up)

    def removeBounds(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_removeBounds(self)

    def setFixed(self, isFixed):
        return OnXLab_SWIG_Python.IFitParameterSettings_setFixed(self, isFixed)

    def setLowerBound(self, lowerBound):
        return OnXLab_SWIG_Python.IFitParameterSettings_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        return OnXLab_SWIG_Python.IFitParameterSettings_setUpperBound(self, upperBound)

    def reset(self):
        return OnXLab_SWIG_Python.IFitParameterSettings_reset(self)

# Register IFitParameterSettings in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFitParameterSettings_swigregister(IFitParameterSettings)

AIDA_IFITRESULT_H = OnXLab_SWIG_Python.AIDA_IFITRESULT_H
class IFitResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFitResult

    def isValid(self):
        return OnXLab_SWIG_Python.IFitResult_isValid(self)

    def fitStatus(self):
        return OnXLab_SWIG_Python.IFitResult_fitStatus(self)

    def fittedFunction(self):
        return OnXLab_SWIG_Python.IFitResult_fittedFunction(self)

    def quality(self):
        return OnXLab_SWIG_Python.IFitResult_quality(self)

    def ndf(self):
        return OnXLab_SWIG_Python.IFitResult_ndf(self)

    def covMatrixElement(self, i, j):
        return OnXLab_SWIG_Python.IFitResult_covMatrixElement(self, i, j)

    def fitMethodName(self):
        return OnXLab_SWIG_Python.IFitResult_fitMethodName(self)

    def engineName(self):
        return OnXLab_SWIG_Python.IFitResult_engineName(self)

    def dataDescription(self):
        return OnXLab_SWIG_Python.IFitResult_dataDescription(self)

    def constraints(self):
        return OnXLab_SWIG_Python.IFitResult_constraints(self)

    def fitParameterSettings(self, name):
        return OnXLab_SWIG_Python.IFitResult_fitParameterSettings(self, name)

    def fittedParameters(self):
        return OnXLab_SWIG_Python.IFitResult_fittedParameters(self)

    def fittedParameterNames(self):
        return OnXLab_SWIG_Python.IFitResult_fittedParameterNames(self)

    def fittedParameter(self, name):
        return OnXLab_SWIG_Python.IFitResult_fittedParameter(self, name)

    def errors(self):
        return OnXLab_SWIG_Python.IFitResult_errors(self)

    def errorsPlus(self):
        return OnXLab_SWIG_Python.IFitResult_errorsPlus(self)

    def errorsMinus(self):
        return OnXLab_SWIG_Python.IFitResult_errorsMinus(self)

# Register IFitResult in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFitResult_swigregister(IFitResult)

AIDA_IFITTER_H = OnXLab_SWIG_Python.AIDA_IFITTER_H
class IFitter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFitter

    def fit(self, *args):
        return OnXLab_SWIG_Python.IFitter_fit(self, *args)

    def setEngine(self, name):
        return OnXLab_SWIG_Python.IFitter_setEngine(self, name)

    def engineName(self):
        return OnXLab_SWIG_Python.IFitter_engineName(self)

    def fitParameterSettings(self, name):
        return OnXLab_SWIG_Python.IFitter_fitParameterSettings(self, name)

    def listParameterSettings(self):
        return OnXLab_SWIG_Python.IFitter_listParameterSettings(self)

    def resetParameterSettings(self):
        return OnXLab_SWIG_Python.IFitter_resetParameterSettings(self)

    def setConstraint(self, expr):
        return OnXLab_SWIG_Python.IFitter_setConstraint(self, expr)

    def constraints(self):
        return OnXLab_SWIG_Python.IFitter_constraints(self)

    def resetConstraints(self):
        return OnXLab_SWIG_Python.IFitter_resetConstraints(self)

    def setFitMethod(self, name):
        return OnXLab_SWIG_Python.IFitter_setFitMethod(self, name)

    def fitMethodName(self):
        return OnXLab_SWIG_Python.IFitter_fitMethodName(self)

    def createScan1D(self, d, f, par, npts, pmin, pmax):
        return OnXLab_SWIG_Python.IFitter_createScan1D(self, d, f, par, npts, pmin, pmax)

    def createContour(self, d, r, par1, par2, npts, up):
        return OnXLab_SWIG_Python.IFitter_createContour(self, d, r, par1, par2, npts, up)

    def setUseFunctionGradient(self, useGrad):
        return OnXLab_SWIG_Python.IFitter_setUseFunctionGradient(self, useGrad)

    def useFunctionGradient(self):
        return OnXLab_SWIG_Python.IFitter_useFunctionGradient(self)

# Register IFitter in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFitter_swigregister(IFitter)

AIDA_IFUNCTION_H = OnXLab_SWIG_Python.AIDA_IFUNCTION_H
class IFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFunction

    def title(self):
        return OnXLab_SWIG_Python.IFunction_title(self)

    def setTitle(self, title):
        return OnXLab_SWIG_Python.IFunction_setTitle(self, title)

    def value(self, x):
        return OnXLab_SWIG_Python.IFunction_value(self, x)

    def dimension(self):
        return OnXLab_SWIG_Python.IFunction_dimension(self)

    def isEqual(self, f):
        return OnXLab_SWIG_Python.IFunction_isEqual(self, f)

    def gradient(self, x):
        return OnXLab_SWIG_Python.IFunction_gradient(self, x)

    def providesGradient(self):
        return OnXLab_SWIG_Python.IFunction_providesGradient(self)

    def variableName(self, i):
        return OnXLab_SWIG_Python.IFunction_variableName(self, i)

    def variableNames(self):
        return OnXLab_SWIG_Python.IFunction_variableNames(self)

    def setParameters(self, params):
        return OnXLab_SWIG_Python.IFunction_setParameters(self, params)

    def parameters(self):
        return OnXLab_SWIG_Python.IFunction_parameters(self)

    def numberOfParameters(self):
        return OnXLab_SWIG_Python.IFunction_numberOfParameters(self)

    def parameterNames(self):
        return OnXLab_SWIG_Python.IFunction_parameterNames(self)

    def setParameter(self, name, x):
        return OnXLab_SWIG_Python.IFunction_setParameter(self, name, x)

    def parameter(self, name):
        return OnXLab_SWIG_Python.IFunction_parameter(self, name)

    def indexOfParameter(self, name):
        return OnXLab_SWIG_Python.IFunction_indexOfParameter(self, name)

    def annotation(self):
        return OnXLab_SWIG_Python.IFunction_annotation(self)

    def codeletString(self):
        return OnXLab_SWIG_Python.IFunction_codeletString(self)

    def cast(self, className):
        return OnXLab_SWIG_Python.IFunction_cast(self, className)

# Register IFunction in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFunction_swigregister(IFunction)

AIDA_IFUNCTIONCATALOG_H = OnXLab_SWIG_Python.AIDA_IFUNCTIONCATALOG_H
class IFunctionCatalog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFunctionCatalog

    def add(self, *args):
        return OnXLab_SWIG_Python.IFunctionCatalog_add(self, *args)

    def list(self):
        return OnXLab_SWIG_Python.IFunctionCatalog_list(self)

    def remove(self, nameId):
        return OnXLab_SWIG_Python.IFunctionCatalog_remove(self, nameId)

    def storeAll(self, nameOnDisk):
        return OnXLab_SWIG_Python.IFunctionCatalog_storeAll(self, nameOnDisk)

    def loadAll(self, nameOnDisk):
        return OnXLab_SWIG_Python.IFunctionCatalog_loadAll(self, nameOnDisk)

# Register IFunctionCatalog in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFunctionCatalog_swigregister(IFunctionCatalog)

AIDA_IFUNCTIONFACTORY_H = OnXLab_SWIG_Python.AIDA_IFUNCTIONFACTORY_H
class IFunctionFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFunctionFactory

    def createFunctionByName(self, path, model):
        return OnXLab_SWIG_Python.IFunctionFactory_createFunctionByName(self, path, model)

    def createFunctionFromScript(self, *args):
        return OnXLab_SWIG_Python.IFunctionFactory_createFunctionFromScript(self, *args)

    def cloneFunction(self, path, f):
        return OnXLab_SWIG_Python.IFunctionFactory_cloneFunction(self, path, f)

    def catalog(self):
        return OnXLab_SWIG_Python.IFunctionFactory_catalog(self)

# Register IFunctionFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFunctionFactory_swigregister(IFunctionFactory)

AIDA_IHISTOGRAM_H = OnXLab_SWIG_Python.AIDA_IHISTOGRAM_H
class IHistogram(IBaseHistogram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IHistogram

    def allEntries(self):
        return OnXLab_SWIG_Python.IHistogram_allEntries(self)

    def extraEntries(self):
        return OnXLab_SWIG_Python.IHistogram_extraEntries(self)

    def equivalentBinEntries(self):
        return OnXLab_SWIG_Python.IHistogram_equivalentBinEntries(self)

    def sumBinHeights(self):
        return OnXLab_SWIG_Python.IHistogram_sumBinHeights(self)

    def sumAllBinHeights(self):
        return OnXLab_SWIG_Python.IHistogram_sumAllBinHeights(self)

    def sumExtraBinHeights(self):
        return OnXLab_SWIG_Python.IHistogram_sumExtraBinHeights(self)

    def minBinHeight(self):
        return OnXLab_SWIG_Python.IHistogram_minBinHeight(self)

    def maxBinHeight(self):
        return OnXLab_SWIG_Python.IHistogram_maxBinHeight(self)

    def scale(self, scaleFactor):
        return OnXLab_SWIG_Python.IHistogram_scale(self, scaleFactor)

# Register IHistogram in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IHistogram_swigregister(IHistogram)

AIDA_IHISTOGRAM1D_H = OnXLab_SWIG_Python.AIDA_IHISTOGRAM1D_H
class IHistogram1D(IHistogram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IHistogram1D

    def fill(self, x, weight=1.):
        return OnXLab_SWIG_Python.IHistogram1D_fill(self, x, weight)

    def binMean(self, index):
        return OnXLab_SWIG_Python.IHistogram1D_binMean(self, index)

    def binEntries(self, index):
        return OnXLab_SWIG_Python.IHistogram1D_binEntries(self, index)

    def binHeight(self, index):
        return OnXLab_SWIG_Python.IHistogram1D_binHeight(self, index)

    def binError(self, index):
        return OnXLab_SWIG_Python.IHistogram1D_binError(self, index)

    def mean(self):
        return OnXLab_SWIG_Python.IHistogram1D_mean(self)

    def rms(self):
        return OnXLab_SWIG_Python.IHistogram1D_rms(self)

    def axis(self):
        return OnXLab_SWIG_Python.IHistogram1D_axis(self)

    def coordToIndex(self, coord):
        return OnXLab_SWIG_Python.IHistogram1D_coordToIndex(self, coord)

    def add(self, hist):
        return OnXLab_SWIG_Python.IHistogram1D_add(self, hist)

    def inlib_object(self):
        return OnXLab_SWIG_Python.IHistogram1D_inlib_object(self)

# Register IHistogram1D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IHistogram1D_swigregister(IHistogram1D)

AIDA_IHISTOGRAM2D_H = OnXLab_SWIG_Python.AIDA_IHISTOGRAM2D_H
class IHistogram2D(IHistogram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IHistogram2D

    def fill(self, x, y, weight=1.):
        return OnXLab_SWIG_Python.IHistogram2D_fill(self, x, y, weight)

    def binMeanX(self, indexX, indexY):
        return OnXLab_SWIG_Python.IHistogram2D_binMeanX(self, indexX, indexY)

    def binMeanY(self, indexX, indexY):
        return OnXLab_SWIG_Python.IHistogram2D_binMeanY(self, indexX, indexY)

    def binEntries(self, indexX, indexY):
        return OnXLab_SWIG_Python.IHistogram2D_binEntries(self, indexX, indexY)

    def binEntriesX(self, index):
        return OnXLab_SWIG_Python.IHistogram2D_binEntriesX(self, index)

    def binEntriesY(self, index):
        return OnXLab_SWIG_Python.IHistogram2D_binEntriesY(self, index)

    def binHeight(self, indexX, indexY):
        return OnXLab_SWIG_Python.IHistogram2D_binHeight(self, indexX, indexY)

    def binHeightX(self, index):
        return OnXLab_SWIG_Python.IHistogram2D_binHeightX(self, index)

    def binHeightY(self, index):
        return OnXLab_SWIG_Python.IHistogram2D_binHeightY(self, index)

    def binError(self, indexX, indexY):
        return OnXLab_SWIG_Python.IHistogram2D_binError(self, indexX, indexY)

    def meanX(self):
        return OnXLab_SWIG_Python.IHistogram2D_meanX(self)

    def meanY(self):
        return OnXLab_SWIG_Python.IHistogram2D_meanY(self)

    def rmsX(self):
        return OnXLab_SWIG_Python.IHistogram2D_rmsX(self)

    def rmsY(self):
        return OnXLab_SWIG_Python.IHistogram2D_rmsY(self)

    def xAxis(self):
        return OnXLab_SWIG_Python.IHistogram2D_xAxis(self)

    def yAxis(self):
        return OnXLab_SWIG_Python.IHistogram2D_yAxis(self)

    def coordToIndexX(self, coord):
        return OnXLab_SWIG_Python.IHistogram2D_coordToIndexX(self, coord)

    def coordToIndexY(self, coord):
        return OnXLab_SWIG_Python.IHistogram2D_coordToIndexY(self, coord)

    def add(self, hist):
        return OnXLab_SWIG_Python.IHistogram2D_add(self, hist)

    def inlib_object(self):
        return OnXLab_SWIG_Python.IHistogram2D_inlib_object(self)

# Register IHistogram2D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IHistogram2D_swigregister(IHistogram2D)

AIDA_IHISTOGRAM3D_H = OnXLab_SWIG_Python.AIDA_IHISTOGRAM3D_H
class IHistogram3D(IHistogram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IHistogram3D

    def fill(self, x, y, z, weight=1.):
        return OnXLab_SWIG_Python.IHistogram3D_fill(self, x, y, z, weight)

    def binMeanX(self, indexX, indexY, indexZ):
        return OnXLab_SWIG_Python.IHistogram3D_binMeanX(self, indexX, indexY, indexZ)

    def binMeanY(self, indexX, indexY, indexZ):
        return OnXLab_SWIG_Python.IHistogram3D_binMeanY(self, indexX, indexY, indexZ)

    def binMeanZ(self, indexX, indexY, indexZ):
        return OnXLab_SWIG_Python.IHistogram3D_binMeanZ(self, indexX, indexY, indexZ)

    def binEntries(self, indexX, indexY, indexZ):
        return OnXLab_SWIG_Python.IHistogram3D_binEntries(self, indexX, indexY, indexZ)

    def binEntriesX(self, index):
        return OnXLab_SWIG_Python.IHistogram3D_binEntriesX(self, index)

    def binEntriesY(self, index):
        return OnXLab_SWIG_Python.IHistogram3D_binEntriesY(self, index)

    def binEntriesZ(self, index):
        return OnXLab_SWIG_Python.IHistogram3D_binEntriesZ(self, index)

    def binHeight(self, indexX, indexY, indexZ):
        return OnXLab_SWIG_Python.IHistogram3D_binHeight(self, indexX, indexY, indexZ)

    def binHeightX(self, index):
        return OnXLab_SWIG_Python.IHistogram3D_binHeightX(self, index)

    def binHeightY(self, index):
        return OnXLab_SWIG_Python.IHistogram3D_binHeightY(self, index)

    def binHeightZ(self, index):
        return OnXLab_SWIG_Python.IHistogram3D_binHeightZ(self, index)

    def binError(self, indexX, indexY, indexZ):
        return OnXLab_SWIG_Python.IHistogram3D_binError(self, indexX, indexY, indexZ)

    def meanX(self):
        return OnXLab_SWIG_Python.IHistogram3D_meanX(self)

    def meanY(self):
        return OnXLab_SWIG_Python.IHistogram3D_meanY(self)

    def meanZ(self):
        return OnXLab_SWIG_Python.IHistogram3D_meanZ(self)

    def rmsX(self):
        return OnXLab_SWIG_Python.IHistogram3D_rmsX(self)

    def rmsY(self):
        return OnXLab_SWIG_Python.IHistogram3D_rmsY(self)

    def rmsZ(self):
        return OnXLab_SWIG_Python.IHistogram3D_rmsZ(self)

    def xAxis(self):
        return OnXLab_SWIG_Python.IHistogram3D_xAxis(self)

    def yAxis(self):
        return OnXLab_SWIG_Python.IHistogram3D_yAxis(self)

    def zAxis(self):
        return OnXLab_SWIG_Python.IHistogram3D_zAxis(self)

    def coordToIndexX(self, coord):
        return OnXLab_SWIG_Python.IHistogram3D_coordToIndexX(self, coord)

    def coordToIndexY(self, coord):
        return OnXLab_SWIG_Python.IHistogram3D_coordToIndexY(self, coord)

    def coordToIndexZ(self, coord):
        return OnXLab_SWIG_Python.IHistogram3D_coordToIndexZ(self, coord)

    def add(self, hist):
        return OnXLab_SWIG_Python.IHistogram3D_add(self, hist)

    def inlib_object(self):
        return OnXLab_SWIG_Python.IHistogram3D_inlib_object(self)

# Register IHistogram3D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IHistogram3D_swigregister(IHistogram3D)

AIDA_IHISTOGRAMFACTORY_H = OnXLab_SWIG_Python.AIDA_IHISTOGRAMFACTORY_H
class IHistogramFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IHistogramFactory

    def destroy(self, hist):
        return OnXLab_SWIG_Python.IHistogramFactory_destroy(self, hist)

    def createCloud1D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createCloud1D(self, *args)

    def createCloud2D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createCloud2D(self, *args)

    def createCloud3D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createCloud3D(self, *args)

    def createHistogram1D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createHistogram1D(self, *args)

    def createHistogram2D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createHistogram2D(self, *args)

    def createHistogram3D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createHistogram3D(self, *args)

    def createProfile1D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createProfile1D(self, *args)

    def createProfile2D(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createProfile2D(self, *args)

    def createCopy(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_createCopy(self, *args)

    def add(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_add(self, *args)

    def subtract(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_subtract(self, *args)

    def multiply(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_multiply(self, *args)

    def divide(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_divide(self, *args)

    def projectionX(self, path, hist):
        return OnXLab_SWIG_Python.IHistogramFactory_projectionX(self, path, hist)

    def projectionY(self, path, hist):
        return OnXLab_SWIG_Python.IHistogramFactory_projectionY(self, path, hist)

    def sliceX(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_sliceX(self, *args)

    def sliceY(self, *args):
        return OnXLab_SWIG_Python.IHistogramFactory_sliceY(self, *args)

    def projectionXY(self, path, hist):
        return OnXLab_SWIG_Python.IHistogramFactory_projectionXY(self, path, hist)

    def projectionXZ(self, path, hist):
        return OnXLab_SWIG_Python.IHistogramFactory_projectionXZ(self, path, hist)

    def projectionYZ(self, path, hist):
        return OnXLab_SWIG_Python.IHistogramFactory_projectionYZ(self, path, hist)

    def sliceXY(self, path, hist, index1, index2):
        return OnXLab_SWIG_Python.IHistogramFactory_sliceXY(self, path, hist, index1, index2)

    def sliceXZ(self, path, hist, index1, index2):
        return OnXLab_SWIG_Python.IHistogramFactory_sliceXZ(self, path, hist, index1, index2)

    def sliceYZ(self, path, hist, index1, index2):
        return OnXLab_SWIG_Python.IHistogramFactory_sliceYZ(self, path, hist, index1, index2)

# Register IHistogramFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IHistogramFactory_swigregister(IHistogramFactory)

AIDA_IINFO_H = OnXLab_SWIG_Python.AIDA_IINFO_H
class IInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IInfo

    def clear(self):
        return OnXLab_SWIG_Python.IInfo_clear(self)

    def addText(self, text):
        return OnXLab_SWIG_Python.IInfo_addText(self, text)

    def addLegend(self, *args):
        return OnXLab_SWIG_Python.IInfo_addLegend(self, *args)

# Register IInfo in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IInfo_swigregister(IInfo)

AIDA_IMANAGEDOBJECT_H = OnXLab_SWIG_Python.AIDA_IMANAGEDOBJECT_H
class IManagedObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IManagedObject

    def name(self):
        return OnXLab_SWIG_Python.IManagedObject_name(self)

    def cast(self, className):
        return OnXLab_SWIG_Python.IManagedObject_cast(self, className)

    def cast_IBaseHistogram(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IBaseHistogram(self)

    def cast_IHistogram1D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IHistogram1D(self)

    def cast_IHistogram2D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IHistogram2D(self)

    def cast_IHistogram3D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IHistogram3D(self)

    def cast_IProfile1D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IProfile1D(self)

    def cast_IProfile2D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IProfile2D(self)

    def cast_ICloud1D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_ICloud1D(self)

    def cast_ICloud2D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_ICloud2D(self)

    def cast_ICloud3D(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_ICloud3D(self)

    def cast_IDataPointSet(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IDataPointSet(self)

    def cast_ITuple(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_ITuple(self)

    def cast_IFunction(self):
        return OnXLab_SWIG_Python.IManagedObject_cast_IFunction(self)

    def smartCast(self):
      for convertor in (
        self.cast_IHistogram1D,
        self.cast_IHistogram2D,
        self.cast_IHistogram3D,
        self.cast_IProfile1D,
        self.cast_IProfile2D,
        self.cast_ICloud1D,
        self.cast_ICloud2D,
        self.cast_ICloud3D,
        self.cast_IDataPointSet,
        self.cast_ITuple,
        self.cast_IFunction):
        a = convertor()
        if a: 
          return a #a non-null value means it worked


# Register IManagedObject in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IManagedObject_swigregister(IManagedObject)

AIDA_IMEASUREMENT_H = OnXLab_SWIG_Python.AIDA_IMEASUREMENT_H
class IMeasurement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IMeasurement

    def value(self):
        return OnXLab_SWIG_Python.IMeasurement_value(self)

    def errorPlus(self):
        return OnXLab_SWIG_Python.IMeasurement_errorPlus(self)

    def errorMinus(self):
        return OnXLab_SWIG_Python.IMeasurement_errorMinus(self)

    def setValue(self, value):
        return OnXLab_SWIG_Python.IMeasurement_setValue(self, value)

    def setErrorPlus(self, errorPlus):
        return OnXLab_SWIG_Python.IMeasurement_setErrorPlus(self, errorPlus)

    def setErrorMinus(self, errorMinus):
        return OnXLab_SWIG_Python.IMeasurement_setErrorMinus(self, errorMinus)

# Register IMeasurement in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IMeasurement_swigregister(IMeasurement)

AIDA_IMODELFUNCTION_H = OnXLab_SWIG_Python.AIDA_IMODELFUNCTION_H
class IModelFunction(IFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IModelFunction

    def providesNormalization(self):
        return OnXLab_SWIG_Python.IModelFunction_providesNormalization(self)

    def normalize(self, on):
        return OnXLab_SWIG_Python.IModelFunction_normalize(self, on)

    def isNormalized(self):
        return OnXLab_SWIG_Python.IModelFunction_isNormalized(self)

    def parameterGradient(self, x):
        return OnXLab_SWIG_Python.IModelFunction_parameterGradient(self, x)

    def providesParameterGradient(self):
        return OnXLab_SWIG_Python.IModelFunction_providesParameterGradient(self)

    def normalizationRange(self, iAxis):
        return OnXLab_SWIG_Python.IModelFunction_normalizationRange(self, iAxis)

    def includeNormalizationAll(self):
        return OnXLab_SWIG_Python.IModelFunction_includeNormalizationAll(self)

    def excludeNormalizationAll(self):
        return OnXLab_SWIG_Python.IModelFunction_excludeNormalizationAll(self)

# Register IModelFunction in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IModelFunction_swigregister(IModelFunction)

AIDA_IPLOTTER_H = OnXLab_SWIG_Python.AIDA_IPLOTTER_H
class IPlotter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IPlotter

    def createRegion(self, x=0, y=0, w=1.0, h=1.0):
        return OnXLab_SWIG_Python.IPlotter_createRegion(self, x, y, w, h)

    def createRegions(self, columns=1, rows=1, index=0):
        return OnXLab_SWIG_Python.IPlotter_createRegions(self, columns, rows, index)

    def currentRegion(self):
        return OnXLab_SWIG_Python.IPlotter_currentRegion(self)

    def currentRegionNumber(self):
        return OnXLab_SWIG_Python.IPlotter_currentRegionNumber(self)

    def numberOfRegions(self):
        return OnXLab_SWIG_Python.IPlotter_numberOfRegions(self)

    def setCurrentRegionNumber(self, index):
        return OnXLab_SWIG_Python.IPlotter_setCurrentRegionNumber(self, index)

    def next(self):
        return OnXLab_SWIG_Python.IPlotter_next(self)

    def region(self, index):
        return OnXLab_SWIG_Python.IPlotter_region(self, index)

    def destroyRegions(self):
        return OnXLab_SWIG_Python.IPlotter_destroyRegions(self)

    def clearRegions(self):
        return OnXLab_SWIG_Python.IPlotter_clearRegions(self)

    def setParameter(self, *args):
        return OnXLab_SWIG_Python.IPlotter_setParameter(self, *args)

    def parameterValue(self, parameter):
        return OnXLab_SWIG_Python.IPlotter_parameterValue(self, parameter)

    def availableParameterOptions(self, parameter):
        return OnXLab_SWIG_Python.IPlotter_availableParameterOptions(self, parameter)

    def availableParameters(self):
        return OnXLab_SWIG_Python.IPlotter_availableParameters(self)

    def show(self):
        return OnXLab_SWIG_Python.IPlotter_show(self)

    def refresh(self):
        return OnXLab_SWIG_Python.IPlotter_refresh(self)

    def hide(self):
        return OnXLab_SWIG_Python.IPlotter_hide(self)

    def interact(self):
        return OnXLab_SWIG_Python.IPlotter_interact(self)

    def writeToFile(self, *args):
        return OnXLab_SWIG_Python.IPlotter_writeToFile(self, *args)

    def setTitle(self, title):
        return OnXLab_SWIG_Python.IPlotter_setTitle(self, title)

    def titleStyle(self):
        return OnXLab_SWIG_Python.IPlotter_titleStyle(self)

    def setTitleStyle(self, style):
        return OnXLab_SWIG_Python.IPlotter_setTitleStyle(self, style)

    def cast_Slash_UI_IPlotter(self):
        return OnXLab_SWIG_Python.IPlotter_cast_Slash_UI_IPlotter(self)

# Register IPlotter in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IPlotter_swigregister(IPlotter)

AIDA_IPLOTTERFACTORY_H = OnXLab_SWIG_Python.AIDA_IPLOTTERFACTORY_H
class IPlotterFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IPlotterFactory

    def create(self, *args):
        return OnXLab_SWIG_Python.IPlotterFactory_create(self, *args)

    def createMarkerStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createMarkerStyle(self)

    def createTextStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createTextStyle(self)

    def createLineStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createLineStyle(self)

    def createFillStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createFillStyle(self)

    def createDataStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createDataStyle(self)

    def createAxisStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createAxisStyle(self)

    def createTitleStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createTitleStyle(self)

    def createPlotterStyle(self):
        return OnXLab_SWIG_Python.IPlotterFactory_createPlotterStyle(self)

# Register IPlotterFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IPlotterFactory_swigregister(IPlotterFactory)

AIDA_IPLOTTERLAYOUT_H = OnXLab_SWIG_Python.AIDA_IPLOTTERLAYOUT_H
class IPlotterLayout(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IPlotterLayout

    def reset(self):
        return OnXLab_SWIG_Python.IPlotterLayout_reset(self)

    def setParameter(self, paramName, paramValue):
        return OnXLab_SWIG_Python.IPlotterLayout_setParameter(self, paramName, paramValue)

    def parameterValue(self, paramName):
        return OnXLab_SWIG_Python.IPlotterLayout_parameterValue(self, paramName)

    def availableParameters(self):
        return OnXLab_SWIG_Python.IPlotterLayout_availableParameters(self)

# Register IPlotterLayout in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IPlotterLayout_swigregister(IPlotterLayout)

AIDA_IPLOTTERREGION_H = OnXLab_SWIG_Python.AIDA_IPLOTTERREGION_H
class IPlotterRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IPlotterRegion

    def plot(self, *args):
        return OnXLab_SWIG_Python.IPlotterRegion_plot(self, *args)

    def remove(self, *args):
        return OnXLab_SWIG_Python.IPlotterRegion_remove(self, *args)

    def clear(self):
        return OnXLab_SWIG_Python.IPlotterRegion_clear(self)

    def setParameter(self, *args):
        return OnXLab_SWIG_Python.IPlotterRegion_setParameter(self, *args)

    def parameterValue(self, parameter):
        return OnXLab_SWIG_Python.IPlotterRegion_parameterValue(self, parameter)

    def availableParameterOptions(self, parameter):
        return OnXLab_SWIG_Python.IPlotterRegion_availableParameterOptions(self, parameter)

    def availableParameters(self):
        return OnXLab_SWIG_Python.IPlotterRegion_availableParameters(self)

    def style(self):
        return OnXLab_SWIG_Python.IPlotterRegion_style(self)

    def setStyle(self, style):
        return OnXLab_SWIG_Python.IPlotterRegion_setStyle(self, style)

    def applyStyle(self, style):
        return OnXLab_SWIG_Python.IPlotterRegion_applyStyle(self, style)

    def setTitle(self, title):
        return OnXLab_SWIG_Python.IPlotterRegion_setTitle(self, title)

    def setXLimits(self, min=0, max=0):
        return OnXLab_SWIG_Python.IPlotterRegion_setXLimits(self, min, max)

    def setYLimits(self, min=0, max=0):
        return OnXLab_SWIG_Python.IPlotterRegion_setYLimits(self, min, max)

    def setZLimits(self, min=0, max=0):
        return OnXLab_SWIG_Python.IPlotterRegion_setZLimits(self, min, max)

    def layout(self):
        return OnXLab_SWIG_Python.IPlotterRegion_layout(self)

    def setLayout(self, layout):
        return OnXLab_SWIG_Python.IPlotterRegion_setLayout(self, layout)

    def info(self):
        return OnXLab_SWIG_Python.IPlotterRegion_info(self)

# Register IPlotterRegion in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IPlotterRegion_swigregister(IPlotterRegion)

AIDA_IPROFILE_H = OnXLab_SWIG_Python.AIDA_IPROFILE_H
class IProfile(IBaseHistogram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IProfile

    def allEntries(self):
        return OnXLab_SWIG_Python.IProfile_allEntries(self)

    def extraEntries(self):
        return OnXLab_SWIG_Python.IProfile_extraEntries(self)

    def sumBinHeights(self):
        return OnXLab_SWIG_Python.IProfile_sumBinHeights(self)

    def sumAllBinHeights(self):
        return OnXLab_SWIG_Python.IProfile_sumAllBinHeights(self)

    def sumExtraBinHeights(self):
        return OnXLab_SWIG_Python.IProfile_sumExtraBinHeights(self)

    def minBinHeight(self):
        return OnXLab_SWIG_Python.IProfile_minBinHeight(self)

    def maxBinHeight(self):
        return OnXLab_SWIG_Python.IProfile_maxBinHeight(self)

# Register IProfile in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IProfile_swigregister(IProfile)

AIDA_IPROFILE1D_H = OnXLab_SWIG_Python.AIDA_IPROFILE1D_H
class IProfile1D(IProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IProfile1D

    def fill(self, x, y, weight=1):
        return OnXLab_SWIG_Python.IProfile1D_fill(self, x, y, weight)

    def binMean(self, index):
        return OnXLab_SWIG_Python.IProfile1D_binMean(self, index)

    def binEntries(self, index):
        return OnXLab_SWIG_Python.IProfile1D_binEntries(self, index)

    def binHeight(self, index):
        return OnXLab_SWIG_Python.IProfile1D_binHeight(self, index)

    def binError(self, index):
        return OnXLab_SWIG_Python.IProfile1D_binError(self, index)

    def binRms(self, index):
        return OnXLab_SWIG_Python.IProfile1D_binRms(self, index)

    def mean(self):
        return OnXLab_SWIG_Python.IProfile1D_mean(self)

    def rms(self):
        return OnXLab_SWIG_Python.IProfile1D_rms(self)

    def axis(self):
        return OnXLab_SWIG_Python.IProfile1D_axis(self)

    def coordToIndex(self, coord):
        return OnXLab_SWIG_Python.IProfile1D_coordToIndex(self, coord)

    def add(self, profile):
        return OnXLab_SWIG_Python.IProfile1D_add(self, profile)

    def inlib_object(self):
        return OnXLab_SWIG_Python.IProfile1D_inlib_object(self)

# Register IProfile1D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IProfile1D_swigregister(IProfile1D)

AIDA_IPROFILE2D_H = OnXLab_SWIG_Python.AIDA_IPROFILE2D_H
class IProfile2D(IProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IProfile2D

    def fill(self, x, y, z, weight=1):
        return OnXLab_SWIG_Python.IProfile2D_fill(self, x, y, z, weight)

    def binMeanX(self, indexX, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binMeanX(self, indexX, indexY)

    def binMeanY(self, indexX, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binMeanY(self, indexX, indexY)

    def binEntries(self, indexX, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binEntries(self, indexX, indexY)

    def binEntriesX(self, indexX):
        return OnXLab_SWIG_Python.IProfile2D_binEntriesX(self, indexX)

    def binEntriesY(self, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binEntriesY(self, indexY)

    def binHeight(self, indexX, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binHeight(self, indexX, indexY)

    def binHeightX(self, indexX):
        return OnXLab_SWIG_Python.IProfile2D_binHeightX(self, indexX)

    def binHeightY(self, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binHeightY(self, indexY)

    def binError(self, indexX, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binError(self, indexX, indexY)

    def binRms(self, indexX, indexY):
        return OnXLab_SWIG_Python.IProfile2D_binRms(self, indexX, indexY)

    def meanX(self):
        return OnXLab_SWIG_Python.IProfile2D_meanX(self)

    def meanY(self):
        return OnXLab_SWIG_Python.IProfile2D_meanY(self)

    def rmsX(self):
        return OnXLab_SWIG_Python.IProfile2D_rmsX(self)

    def rmsY(self):
        return OnXLab_SWIG_Python.IProfile2D_rmsY(self)

    def xAxis(self):
        return OnXLab_SWIG_Python.IProfile2D_xAxis(self)

    def yAxis(self):
        return OnXLab_SWIG_Python.IProfile2D_yAxis(self)

    def coordToIndexX(self, coordX):
        return OnXLab_SWIG_Python.IProfile2D_coordToIndexX(self, coordX)

    def coordToIndexY(self, coordY):
        return OnXLab_SWIG_Python.IProfile2D_coordToIndexY(self, coordY)

    def add(self, h):
        return OnXLab_SWIG_Python.IProfile2D_add(self, h)

    def inlib_object(self):
        return OnXLab_SWIG_Python.IProfile2D_inlib_object(self)

# Register IProfile2D in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IProfile2D_swigregister(IProfile2D)

AIDA_IRANGESET_H = OnXLab_SWIG_Python.AIDA_IRANGESET_H
class IRangeSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IRangeSet

    def lowerBounds(self):
        return OnXLab_SWIG_Python.IRangeSet_lowerBounds(self)

    def upperBounds(self):
        return OnXLab_SWIG_Python.IRangeSet_upperBounds(self)

    def include(self, xMin, xMax):
        return OnXLab_SWIG_Python.IRangeSet_include(self, xMin, xMax)

    def exclude(self, xMin, xMax):
        return OnXLab_SWIG_Python.IRangeSet_exclude(self, xMin, xMax)

    def includeAll(self):
        return OnXLab_SWIG_Python.IRangeSet_includeAll(self)

    def excludeAll(self):
        return OnXLab_SWIG_Python.IRangeSet_excludeAll(self)

    def isInRange(self, point):
        return OnXLab_SWIG_Python.IRangeSet_isInRange(self, point)

    def size(self):
        return OnXLab_SWIG_Python.IRangeSet_size(self)

    def PLUS_INF(self):
        return OnXLab_SWIG_Python.IRangeSet_PLUS_INF(self)

    def MINUS_INF(self):
        return OnXLab_SWIG_Python.IRangeSet_MINUS_INF(self)

# Register IRangeSet in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IRangeSet_swigregister(IRangeSet)

AIDA_ITREE_H = OnXLab_SWIG_Python.AIDA_ITREE_H
class ITree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITree

    def storeName(self):
        return OnXLab_SWIG_Python.ITree_storeName(self)

    def find(self, path):
        return OnXLab_SWIG_Python.ITree_find(self, path)

    def findTree(self, path):
        return OnXLab_SWIG_Python.ITree_findTree(self, path)

    def cd(self, path):
        return OnXLab_SWIG_Python.ITree_cd(self, path)

    def pwd(self):
        return OnXLab_SWIG_Python.ITree_pwd(self)

    def ls(self, *args):
        return OnXLab_SWIG_Python.ITree_ls(self, *args)

    def listObjectNames(self, *args):
        return OnXLab_SWIG_Python.ITree_listObjectNames(self, *args)

    def listObjectTypes(self, *args):
        return OnXLab_SWIG_Python.ITree_listObjectTypes(self, *args)

    def mkdir(self, path):
        return OnXLab_SWIG_Python.ITree_mkdir(self, path)

    def mkdirs(self, path):
        return OnXLab_SWIG_Python.ITree_mkdirs(self, path)

    def rmdir(self, path):
        return OnXLab_SWIG_Python.ITree_rmdir(self, path)

    def rm(self, path):
        return OnXLab_SWIG_Python.ITree_rm(self, path)

    def findPath(self, object):
        return OnXLab_SWIG_Python.ITree_findPath(self, object)

    def mv(self, oldPath, newPath):
        return OnXLab_SWIG_Python.ITree_mv(self, oldPath, newPath)

    def commit(self):
        return OnXLab_SWIG_Python.ITree_commit(self)

    def setOverwrite(self, overwrite=True):
        return OnXLab_SWIG_Python.ITree_setOverwrite(self, overwrite)

    def cp(self, oldPath, newPath, recursive=False):
        return OnXLab_SWIG_Python.ITree_cp(self, oldPath, newPath, recursive)

    def symlink(self, path, alias):
        return OnXLab_SWIG_Python.ITree_symlink(self, path, alias)

    def mount(self, path, tree, treePath):
        return OnXLab_SWIG_Python.ITree_mount(self, path, tree, treePath)

    def unmount(self, path):
        return OnXLab_SWIG_Python.ITree_unmount(self, path)

    def close(self):
        return OnXLab_SWIG_Python.ITree_close(self)

    def cast(self, className):
        return OnXLab_SWIG_Python.ITree_cast(self, className)

    def find_baseHistogram(self, aName):
        return OnXLab_SWIG_Python.ITree_find_baseHistogram(self, aName)

    def find_histogram1D(self, aName):
        return OnXLab_SWIG_Python.ITree_find_histogram1D(self, aName)

    def find_histogram2D(self, aName):
        return OnXLab_SWIG_Python.ITree_find_histogram2D(self, aName)

    def find_function(self, aName):
        return OnXLab_SWIG_Python.ITree_find_function(self, aName)

    def find_tuple(self, aName):
        return OnXLab_SWIG_Python.ITree_find_tuple(self, aName)

    def smartFind(self, *args, **kwargs):
      return self.find(*args, **kwargs).smartCast()


    def cast_Slash_Store_ITree(self):
        return OnXLab_SWIG_Python.ITree_cast_Slash_Store_ITree(self)

    def cast_Slash_Core_IManager(self):
        return OnXLab_SWIG_Python.ITree_cast_Slash_Core_IManager(self)

    def cast_Slash_Core_IHierarchy(self):
        return OnXLab_SWIG_Python.ITree_cast_Slash_Core_IHierarchy(self)

# Register ITree in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITree_swigregister(ITree)

AIDA_ITREEFACTORY_H = OnXLab_SWIG_Python.AIDA_ITREEFACTORY_H
class ITreeFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITreeFactory

    def create(self, *args):
        return OnXLab_SWIG_Python.ITreeFactory_create(self, *args)

# Register ITreeFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITreeFactory_swigregister(ITreeFactory)

AIDA_ITUPLEENTRY_H = OnXLab_SWIG_Python.AIDA_ITUPLEENTRY_H
class ITupleEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITupleEntry

    def cast_ITuple(self):
        return OnXLab_SWIG_Python.ITupleEntry_cast_ITuple(self)

    def __init__(self):
        OnXLab_SWIG_Python.ITupleEntry_swiginit(self, OnXLab_SWIG_Python.new_ITupleEntry())

# Register ITupleEntry in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITupleEntry_swigregister(ITupleEntry)

AIDA_ITUPLE_H = OnXLab_SWIG_Python.AIDA_ITUPLE_H
class ITuple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITuple

    def title(self):
        return OnXLab_SWIG_Python.ITuple_title(self)

    def setTitle(self, title):
        return OnXLab_SWIG_Python.ITuple_setTitle(self, title)

    def annotation(self):
        return OnXLab_SWIG_Python.ITuple_annotation(self)

    def fill(self, *args):
        return OnXLab_SWIG_Python.ITuple_fill(self, *args)

    def addRow(self):
        return OnXLab_SWIG_Python.ITuple_addRow(self)

    def resetRow(self):
        return OnXLab_SWIG_Python.ITuple_resetRow(self)

    def reset(self):
        return OnXLab_SWIG_Python.ITuple_reset(self)

    def rows(self):
        return OnXLab_SWIG_Python.ITuple_rows(self)

    def start(self):
        return OnXLab_SWIG_Python.ITuple_start(self)

    def skip(self, rows):
        return OnXLab_SWIG_Python.ITuple_skip(self, rows)

    def next(self):
        return OnXLab_SWIG_Python.ITuple_next(self)

    def setRow(self, rowIndex):
        return OnXLab_SWIG_Python.ITuple_setRow(self, rowIndex)

    def findColumn(self, name):
        return OnXLab_SWIG_Python.ITuple_findColumn(self, name)

    def getDouble(self, column):
        return OnXLab_SWIG_Python.ITuple_getDouble(self, column)

    def getFloat(self, column):
        return OnXLab_SWIG_Python.ITuple_getFloat(self, column)

    def getInt(self, column):
        return OnXLab_SWIG_Python.ITuple_getInt(self, column)

    def getShort(self, column):
        return OnXLab_SWIG_Python.ITuple_getShort(self, column)

    def getLong(self, column):
        return OnXLab_SWIG_Python.ITuple_getLong(self, column)

    def getChar(self, column):
        return OnXLab_SWIG_Python.ITuple_getChar(self, column)

    def getBoolean(self, column):
        return OnXLab_SWIG_Python.ITuple_getBoolean(self, column)

    def getString(self, column):
        return OnXLab_SWIG_Python.ITuple_getString(self, column)

    def getObject(self, column):
        return OnXLab_SWIG_Python.ITuple_getObject(self, column)

    def getTuple(self, column):
        return OnXLab_SWIG_Python.ITuple_getTuple(self, column)

    def columns(self):
        return OnXLab_SWIG_Python.ITuple_columns(self)

    def columnName(self, column):
        return OnXLab_SWIG_Python.ITuple_columnName(self, column)

    def columnNames(self):
        return OnXLab_SWIG_Python.ITuple_columnNames(self)

    def columnType(self, column):
        return OnXLab_SWIG_Python.ITuple_columnType(self, column)

    def columnTypes(self):
        return OnXLab_SWIG_Python.ITuple_columnTypes(self)

    def columnMin(self, column):
        return OnXLab_SWIG_Python.ITuple_columnMin(self, column)

    def columnMax(self, column):
        return OnXLab_SWIG_Python.ITuple_columnMax(self, column)

    def columnMean(self, column):
        return OnXLab_SWIG_Python.ITuple_columnMean(self, column)

    def columnRms(self, column):
        return OnXLab_SWIG_Python.ITuple_columnRms(self, column)

    def project(self, *args):
        return OnXLab_SWIG_Python.ITuple_project(self, *args)

    def cast(self, className):
        return OnXLab_SWIG_Python.ITuple_cast(self, className)

# Register ITuple in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITuple_swigregister(ITuple)

AIDA_ITUPLEFACTORY_H = OnXLab_SWIG_Python.AIDA_ITUPLEFACTORY_H
class ITupleFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITupleFactory

    def create(self, *args):
        return OnXLab_SWIG_Python.ITupleFactory_create(self, *args)

    def createChained(self, *args):
        return OnXLab_SWIG_Python.ITupleFactory_createChained(self, *args)

    def createFiltered(self, *args):
        return OnXLab_SWIG_Python.ITupleFactory_createFiltered(self, *args)

    def createFilter(self, *args):
        return OnXLab_SWIG_Python.ITupleFactory_createFilter(self, *args)

    def createEvaluator(self, expression):
        return OnXLab_SWIG_Python.ITupleFactory_createEvaluator(self, expression)

# Register ITupleFactory in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITupleFactory_swigregister(ITupleFactory)

AIDA_IBASESTYLE_H = OnXLab_SWIG_Python.AIDA_IBASESTYLE_H
class IBaseStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IBaseStyle

    def reset(self):
        return OnXLab_SWIG_Python.IBaseStyle_reset(self)

    def setParameter(self, *args):
        return OnXLab_SWIG_Python.IBaseStyle_setParameter(self, *args)

    def parameterValue(self, parameter):
        return OnXLab_SWIG_Python.IBaseStyle_parameterValue(self, parameter)

    def availableParameters(self):
        return OnXLab_SWIG_Python.IBaseStyle_availableParameters(self)

    def availableParameterOptions(self, paramName):
        return OnXLab_SWIG_Python.IBaseStyle_availableParameterOptions(self, paramName)

# Register IBaseStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IBaseStyle_swigregister(IBaseStyle)

AIDA_IBRUSHSTYLE_H = OnXLab_SWIG_Python.AIDA_IBRUSHSTYLE_H
class IBrushStyle(IBaseStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IBrushStyle

    def availableColors(self):
        return OnXLab_SWIG_Python.IBrushStyle_availableColors(self)

    def color(self):
        return OnXLab_SWIG_Python.IBrushStyle_color(self)

    def opacity(self):
        return OnXLab_SWIG_Python.IBrushStyle_opacity(self)

    def setColor(self, newColor):
        return OnXLab_SWIG_Python.IBrushStyle_setColor(self, newColor)

    def setOpacity(self, newOpacity):
        return OnXLab_SWIG_Python.IBrushStyle_setOpacity(self, newOpacity)

# Register IBrushStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IBrushStyle_swigregister(IBrushStyle)

AIDA_IDATASTYLE_H = OnXLab_SWIG_Python.AIDA_IDATASTYLE_H
class IDataStyle(IBaseStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IDataStyle

    def lineStyle(self):
        return OnXLab_SWIG_Python.IDataStyle_lineStyle(self)

    def markerStyle(self):
        return OnXLab_SWIG_Python.IDataStyle_markerStyle(self)

    def fillStyle(self):
        return OnXLab_SWIG_Python.IDataStyle_fillStyle(self)

    def setLineStyle(self, lineStyle):
        return OnXLab_SWIG_Python.IDataStyle_setLineStyle(self, lineStyle)

    def setMarkerStyle(self, markerStyle):
        return OnXLab_SWIG_Python.IDataStyle_setMarkerStyle(self, markerStyle)

    def setFillStyle(self, fillStyle):
        return OnXLab_SWIG_Python.IDataStyle_setFillStyle(self, fillStyle)

# Register IDataStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IDataStyle_swigregister(IDataStyle)

AIDA_IFILLSTYLE_H = OnXLab_SWIG_Python.AIDA_IFILLSTYLE_H
class IFillStyle(IBrushStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IFillStyle

    def availablePatterns(self):
        return OnXLab_SWIG_Python.IFillStyle_availablePatterns(self)

    def pattern(self):
        return OnXLab_SWIG_Python.IFillStyle_pattern(self)

    def setPattern(self, pattern):
        return OnXLab_SWIG_Python.IFillStyle_setPattern(self, pattern)

# Register IFillStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IFillStyle_swigregister(IFillStyle)

AIDA_IINFOSTYLE_H = OnXLab_SWIG_Python.AIDA_IINFOSTYLE_H
class IInfoStyle(IBaseStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IInfoStyle

    def textStyle(self):
        return OnXLab_SWIG_Python.IInfoStyle_textStyle(self)

    def setTextStyle(self, textStyle):
        return OnXLab_SWIG_Python.IInfoStyle_setTextStyle(self, textStyle)

# Register IInfoStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IInfoStyle_swigregister(IInfoStyle)

AIDA_ILINESTYLE_H = OnXLab_SWIG_Python.AIDA_ILINESTYLE_H
class ILineStyle(IBrushStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ILineStyle

    def availableLineTypes(self):
        return OnXLab_SWIG_Python.ILineStyle_availableLineTypes(self)

    def lineType(self):
        return OnXLab_SWIG_Python.ILineStyle_lineType(self)

    def thickness(self):
        return OnXLab_SWIG_Python.ILineStyle_thickness(self)

    def setLineType(self, newLineType):
        return OnXLab_SWIG_Python.ILineStyle_setLineType(self, newLineType)

    def setThickness(self, newThickness):
        return OnXLab_SWIG_Python.ILineStyle_setThickness(self, newThickness)

# Register ILineStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ILineStyle_swigregister(ILineStyle)

AIDA_ITEXTSTYLE_H = OnXLab_SWIG_Python.AIDA_ITEXTSTYLE_H
class ITextStyle(IBrushStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITextStyle

    def availableFonts(self):
        return OnXLab_SWIG_Python.ITextStyle_availableFonts(self)

    def fontSize(self):
        return OnXLab_SWIG_Python.ITextStyle_fontSize(self)

    def setFontSize(self, size):
        return OnXLab_SWIG_Python.ITextStyle_setFontSize(self, size)

    def font(self):
        return OnXLab_SWIG_Python.ITextStyle_font(self)

    def setFont(self, font):
        return OnXLab_SWIG_Python.ITextStyle_setFont(self, font)

    def isBold(self):
        return OnXLab_SWIG_Python.ITextStyle_isBold(self)

    def isItalic(self):
        return OnXLab_SWIG_Python.ITextStyle_isItalic(self)

    def isUnderlined(self):
        return OnXLab_SWIG_Python.ITextStyle_isUnderlined(self)

    def setBold(self, bold=True):
        return OnXLab_SWIG_Python.ITextStyle_setBold(self, bold)

    def setItalic(self, italic=True):
        return OnXLab_SWIG_Python.ITextStyle_setItalic(self, italic)

    def setUnderlined(self, underlined=True):
        return OnXLab_SWIG_Python.ITextStyle_setUnderlined(self, underlined)

# Register ITextStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITextStyle_swigregister(ITextStyle)

AIDA_ITITLESTYLE_H = OnXLab_SWIG_Python.AIDA_ITITLESTYLE_H
class ITitleStyle(IBaseStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_ITitleStyle

    def textStyle(self):
        return OnXLab_SWIG_Python.ITitleStyle_textStyle(self)

    def setTextStyle(self, textStyle):
        return OnXLab_SWIG_Python.ITitleStyle_setTextStyle(self, textStyle)

# Register ITitleStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.ITitleStyle_swigregister(ITitleStyle)

AIDA_IAXISSTYLE_H = OnXLab_SWIG_Python.AIDA_IAXISSTYLE_H
class IAxisStyle(IBaseStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IAxisStyle

    def lineStyle(self):
        return OnXLab_SWIG_Python.IAxisStyle_lineStyle(self)

    def tickLabelStyle(self):
        return OnXLab_SWIG_Python.IAxisStyle_tickLabelStyle(self)

    def labelStyle(self):
        return OnXLab_SWIG_Python.IAxisStyle_labelStyle(self)

    def setlineStyle(self, lineStyle):
        return OnXLab_SWIG_Python.IAxisStyle_setlineStyle(self, lineStyle)

    def setTickLabelStyle(self, tickLabelStyle):
        return OnXLab_SWIG_Python.IAxisStyle_setTickLabelStyle(self, tickLabelStyle)

    def setLabelStyle(self, labelStyle):
        return OnXLab_SWIG_Python.IAxisStyle_setLabelStyle(self, labelStyle)

    def setLabel(self, label):
        return OnXLab_SWIG_Python.IAxisStyle_setLabel(self, label)

# Register IAxisStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IAxisStyle_swigregister(IAxisStyle)

AIDA_IMARKERSTYLE_H = OnXLab_SWIG_Python.AIDA_IMARKERSTYLE_H
class IMarkerStyle(IBrushStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IMarkerStyle

    def availableShapes(self):
        return OnXLab_SWIG_Python.IMarkerStyle_availableShapes(self)

    def shape(self):
        return OnXLab_SWIG_Python.IMarkerStyle_shape(self)

    def setShape(self, shape):
        return OnXLab_SWIG_Python.IMarkerStyle_setShape(self, shape)

# Register IMarkerStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IMarkerStyle_swigregister(IMarkerStyle)

AIDA_IPLOTTERSTYLE_H = OnXLab_SWIG_Python.AIDA_IPLOTTERSTYLE_H
class IPlotterStyle(IBaseStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IPlotterStyle

    def dataStyle(self):
        return OnXLab_SWIG_Python.IPlotterStyle_dataStyle(self)

    def xAxisStyle(self):
        return OnXLab_SWIG_Python.IPlotterStyle_xAxisStyle(self)

    def yAxisStyle(self):
        return OnXLab_SWIG_Python.IPlotterStyle_yAxisStyle(self)

    def zAxisStyle(self):
        return OnXLab_SWIG_Python.IPlotterStyle_zAxisStyle(self)

    def titleStyle(self):
        return OnXLab_SWIG_Python.IPlotterStyle_titleStyle(self)

    def infoStyle(self):
        return OnXLab_SWIG_Python.IPlotterStyle_infoStyle(self)

    def setDataStyle(self, dataStyle):
        return OnXLab_SWIG_Python.IPlotterStyle_setDataStyle(self, dataStyle)

    def setAxisStyleX(self, xAxisStyle):
        return OnXLab_SWIG_Python.IPlotterStyle_setAxisStyleX(self, xAxisStyle)

    def setAxisStyleY(self, yAxisStyle):
        return OnXLab_SWIG_Python.IPlotterStyle_setAxisStyleY(self, yAxisStyle)

    def setAxisStyleZ(self, zAxisStyle):
        return OnXLab_SWIG_Python.IPlotterStyle_setAxisStyleZ(self, zAxisStyle)

    def setTitleStyle(self, textStyle):
        return OnXLab_SWIG_Python.IPlotterStyle_setTitleStyle(self, textStyle)

    def setInfoStyle(self, infoStyle):
        return OnXLab_SWIG_Python.IPlotterStyle_setInfoStyle(self, infoStyle)

# Register IPlotterStyle in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IPlotterStyle_swigregister(IPlotterStyle)

class Main(IAnalysisFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cast(self, arg2):
        return OnXLab_SWIG_Python.Main_cast(self, arg2)

    def createTreeFactory(self):
        return OnXLab_SWIG_Python.Main_createTreeFactory(self)

    def createHistogramFactory(self, arg2):
        return OnXLab_SWIG_Python.Main_createHistogramFactory(self, arg2)

    def createTupleFactory(self, arg2):
        return OnXLab_SWIG_Python.Main_createTupleFactory(self, arg2)

    def createFunctionFactory(self, arg2):
        return OnXLab_SWIG_Python.Main_createFunctionFactory(self, arg2)

    def createPlotterFactory(self, *args):
        return OnXLab_SWIG_Python.Main_createPlotterFactory(self, *args)

    def createDataPointSetFactory(self, arg2):
        return OnXLab_SWIG_Python.Main_createDataPointSetFactory(self, arg2)

    def createFitFactory(self):
        return OnXLab_SWIG_Python.Main_createFitFactory(self)

    def __init__(self, *args):
        OnXLab_SWIG_Python.Main_swiginit(self, OnXLab_SWIG_Python.new_Main(*args))
    __swig_destroy__ = OnXLab_SWIG_Python.delete_Main

    def createUI(self, driver, file, arg4):
        return OnXLab_SWIG_Python.Main_createUI(self, driver, file, arg4)

    def ui(self):
        return OnXLab_SWIG_Python.Main_ui(self)

    def loadInterpreter(self, arg2, aQuiet=False):
        return OnXLab_SWIG_Python.Main_loadInterpreter(self, arg2, aQuiet)

    def cast_Slash_Core_ISession(self):
        return OnXLab_SWIG_Python.Main_cast_Slash_Core_ISession(self)

# Register Main in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.Main_swigregister(Main)


def find_aida(aSession):
    return OnXLab_SWIG_Python.find_aida(aSession)


#  print('debug : OnXLab_SWIG.i')

#
# Script execution context :
# ------------------------
#  An AIDA .py is of the form :
#      import AIDA
#      aida = AIDA.createAnalysisFactory()
#      ...
#      del aida
# This kind of script can be executed in various contexts.
# For example it can be executed "from scratch"
# from the python shell with :
#    OS> <setup AIDA implementation>
#    OS> <start python shell>
#    >>> import my_aida
# or it can be executed in a "Python callback" of
# an OnX interactive program which had not been started
# from Python. For example, someone can execute
# the script from an OnX Python callback, with OnX
# having been started with :
#    OS> <setup AIDA implementation>
#    OS> osc-gui-viewer my_gui.onx
#    GUI> <click in a button executing my_aida.py>
#  It is clear that the AIDA.createAnalysisFactory
# procedure must take into account all these
# possible contexts.
# 

def createAnalysisFactory():
  import OnX
  comment = 0 # FIXME : OnX could have been started, but the
  comment = 0 # OnX Python plugin may be not yet activated, so
  comment = 0 # the below OnX.session is still None...
  if OnX.session() == None:  # Start from scratch :
    OnX.set_env(OnX.Slash_cout())
    comment = 0 # FIXME : case of OnX started without OnXPython loaded ?
    import OnXLab
    import sys
    args = sys.argv
    comment = 0 # args.append('-verbose')  
    comment = 0 # 0 = do not create UI now. 
    comment = 0 # The UI creation,if needed, is delegated to the plotter factory.
    comment = 0 # The plotter factory will use the OnXLab/scripts/OnX/Plotter.onx GUI.
    onxlab_main = OnXLab.Main(args) 
    onxlab_main.loadInterpreter('Python');
    return onxlab_main
  else: # OnX started :
    if OnX.session().findManager('AnalysisFactory') != None:
      import OnXLab
      return OnXLab.find_aida(OnX.session())
    else:
      print('Found OnX, but there is no AnalysisFactory manager !')
      return None


class IManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnXLab_SWIG_Python.delete_IManager

    def cast(self, arg2):
        return OnXLab_SWIG_Python.IManager_cast(self, arg2)

    def name(self):
        return OnXLab_SWIG_Python.IManager_name(self)

    def cast_Slash_AIDA_IAnalysisFactory(self):
        return OnXLab_SWIG_Python.IManager_cast_Slash_AIDA_IAnalysisFactory(self)

    def cast_AIDA_ITree(self):
        return OnXLab_SWIG_Python.IManager_cast_AIDA_ITree(self)

# Register IManager in OnXLab_SWIG_Python:
OnXLab_SWIG_Python.IManager_swigregister(IManager)



