
////////////////////////////////////////////////////////
  To install a binary kit :
////////////////////////////////////////////////////////

 - pick some <kit>-<version>-<platform>.zip
   <kit> being for osc_batch, osc_iv or osc_vis.
 - unzip. (In general people unzip from /usr/local on a UNIX).
 - On UNIX : 
     cd <kit>/<version>
    (chmod a+x install)
     ./install

////////////////////////////////////////////////////////
  To use a binary kit :
////////////////////////////////////////////////////////
    csh> source <install_path>/<kit>/<version>/setup.csh
  (  sh> . <install_path>/<kit>/<version>/setup.sh )
  ( DOS> call <install_path>\<kit>\<version>\setup.bat )
     OS> <run application>
 for example :
     OS> aida-config        # with any kit
     OS> AIDA_example_Store # with any kit
 and with an osc_vis kit :
     OS> osc-plot 
   ( OS> osc-plot <aida, root, hbook data file> )
     OS> opaw
   ( OS> opaw <.kumac file> )
     OS> osc-config

////////////////////////////////////////////////////////
  To build from source :
////////////////////////////////////////////////////////
 After unzipping one of :
     osc_batch_source-<version>.zip
     osc_iv_source-<version>.zip
     osc_vis_source-<version>.zip
 go under the directory
     OpenScientist/<kit>/obuild
 and follow instructions found in the README file. The build
 should produce at end something having the similar structure
 than a binary kit. When done, simply move this new local binary
 kit (then a zip file) where you want and follow the same upper 
 instructions than installing a downloadable binary kit. In fact
 if you had build a osc_batch, osc_iv or an osc_vis kit on some platform
 not in the distribution, you can even send us the zip file that
 we can put on the download area.

  For the batch kit, since the code is in principle ANSI C/C++ and
 does not rely on "foreign" packages (according the obuild terminology), 
 the construction should be straightforward on all platforms.

 (A foreign package is one that a kit may use but which is
 not coming with the source distribution. For example X11,
 OpenGL, Motif, Qt, gtk, CLHEP, Geant4, etc...)

  The construction of a osc_iv or osc_vis may need more tuning, 
 especially to find the foreign packages : Motif, Qt, etc... 
 In general we arrange that the default build by using foreign
 packages that we are sure to find on a typical platform.
 For example on a Windows, the default GUI is the Win32 one.
 There is more instructions under the @ref osc_build section.

////////////////////////////////////////////////////////
  Notes :
////////////////////////////////////////////////////////
  The osc_batch kits are targeted for "data capturing" in batch programs.
 Then mainly to book, fill and save histograms and tuples in files 
 at various formats by using the AIDA interfaces. There is no 
 interactivity and visualization in the batch kits. If building
 from source, since the code is in principle ANSI C/C++ and does
 not rely on "foreign" (or "external") packages, the construction
 should be straightforward on all platforms.

  The osc_iv kits contain Inventor related material. Then mainly
 CoinGL, the So[Xt,Win,Qt,gtk,] to glue to various GUI toolkits
 and the HEPVis package. (OnX is not in this kind of kit).
 These kits can be very usefull for someone wanting to start
 quickly with Inventor.

  The osc_vis kits contain the batch kits packages plus programs 
 (as the osc-plot) to do some plotting and have some interactivity 
 over the files produced by batch programs. (Obviously someone can 
 build programs, by using the AIDA interfaces, that book, fill
 histograms and tuples and plot them too in one single program). 
 The vis kits contain also material to do advanced visualization
 by using the coin3d and HEPVis libraries.

  At installation on a UNIX of a binary kit the ./install 
 simply enforces the installation path in the various user
 setup scripts ([aida-,py-]setup.[sh,csh]). And this is not
 needed under Windows/DOS since a setup.bat can know where
 it had been installed (by using %~d0%~p0) (!).

  The source kits are your number one insurance, then even
 if installing a binary kit, keep a copy of the corresponding 
 source kit.

////////////////////////////////////////////////////////
  Geant4 notes :
////////////////////////////////////////////////////////
  We attempt to have in the osc_vis kits the material to work
 with Geant4. In principle the osc-g4-vis program should be here
 to help instrumenting some of the Geant4 examples with high level
 visualization. By cloning what osc-g4-vis does on some novice
 Geant4 example, someone can then quickly have some high level
 GUI and visualization for its own Geant4 application.
 Note that CLHEP and Geant4 themselves do not come
 with an osc_vis kit and that they must be installed on their own.
 They are considered "foreign" according the obuild terminology.
 The material related to CLHEP and Geant4 is in the G4Lab package
 and this package have to be built with the "-group Geant4" option.
 It is not build by default. (In particular OpenScientist
 can't be said then to rely on CLHEP). It is obvious that the 
 CLHEP and Geant4 installed version must be compatible with the
 version used to build the osc_vis facitilies (G4Lab) for Geant4.
 The used CLHEP and Geant4 versions are put in A_GEANT4_README.
