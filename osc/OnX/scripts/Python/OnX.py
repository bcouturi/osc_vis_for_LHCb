# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import OnX_SWIG_Python
else:
    import OnX_SWIG_Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_SwigPyIterator

    def value(self):
        return OnX_SWIG_Python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return OnX_SWIG_Python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return OnX_SWIG_Python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return OnX_SWIG_Python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return OnX_SWIG_Python.SwigPyIterator_equal(self, x)

    def copy(self):
        return OnX_SWIG_Python.SwigPyIterator_copy(self)

    def next(self):
        return OnX_SWIG_Python.SwigPyIterator_next(self)

    def __next__(self):
        return OnX_SWIG_Python.SwigPyIterator___next__(self)

    def previous(self):
        return OnX_SWIG_Python.SwigPyIterator_previous(self)

    def advance(self, n):
        return OnX_SWIG_Python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return OnX_SWIG_Python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return OnX_SWIG_Python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return OnX_SWIG_Python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return OnX_SWIG_Python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return OnX_SWIG_Python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return OnX_SWIG_Python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in OnX_SWIG_Python:
OnX_SWIG_Python.SwigPyIterator_swigregister(SwigPyIterator)

class IClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IClass

    def name(self):
        return OnX_SWIG_Python.IClass_name(self)

    def version(self):
        return OnX_SWIG_Python.IClass_version(self)

    def create(self):
        return OnX_SWIG_Python.IClass_create(self)

# Register IClass in OnX_SWIG_Python:
OnX_SWIG_Python.IClass_swigregister(IClass)

class IDictionary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IDictionary

    def find(self, aName):
        return OnX_SWIG_Python.IDictionary_find(self, aName)

    def add(self, aClass):
        return OnX_SWIG_Python.IDictionary_add(self, aClass)

    def numberOfClasses(self):
        return OnX_SWIG_Python.IDictionary_numberOfClasses(self)

    def getClass(self, index):
        return OnX_SWIG_Python.IDictionary_getClass(self, index)

# Register IDictionary in OnX_SWIG_Python:
OnX_SWIG_Python.IDictionary_swigregister(IDictionary)

class IReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IReader

    def read(self, *args):
        return OnX_SWIG_Python.IReader_read(self, *args)

    def sread(self, aBuffer, aLength, aStringLength):
        return OnX_SWIG_Python.IReader_sread(self, aBuffer, aLength, aStringLength)

    def rewind(self):
        return OnX_SWIG_Python.IReader_rewind(self)

    def disable(self):
        return OnX_SWIG_Python.IReader_disable(self)

    def enable(self):
        return OnX_SWIG_Python.IReader_enable(self)

    def enabled(self):
        return OnX_SWIG_Python.IReader_enabled(self)

# Register IReader in OnX_SWIG_Python:
OnX_SWIG_Python.IReader_swigregister(IReader)

class IWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IWriter

    def write(self, aString):
        return OnX_SWIG_Python.IWriter_write(self, aString)

    def disable(self):
        return OnX_SWIG_Python.IWriter_disable(self)

    def enable(self):
        return OnX_SWIG_Python.IWriter_enable(self)

    def enabled(self):
        return OnX_SWIG_Python.IWriter_enabled(self)

    def flush(self):
        return OnX_SWIG_Python.IWriter_flush(self)

# Register IWriter in OnX_SWIG_Python:
OnX_SWIG_Python.IWriter_swigregister(IWriter)

class IManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IManager

    def cast(self, arg2):
        return OnX_SWIG_Python.IManager_cast(self, arg2)

    def name(self):
        return OnX_SWIG_Python.IManager_name(self)

    def cast_Slash_Core_IHierarchy(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Core_IHierarchy(self)

    def cast_Slash_Core_ILibraryManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Core_ILibraryManager(self)

    def cast_Slash_Core_IOpaqueManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Core_IOpaqueManager(self)

    def cast_Slash_Core_IParameterManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Core_IParameterManager(self)

    def cast_Slash_Core_IRelationManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Core_IRelationManager(self)

    def cast_Slash_Data_IProcessor(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Data_IProcessor(self)

    def cast_Slash_Data_IFunctionManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Data_IFunctionManager(self)

    def cast_Slash_Meta_IDictionary(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Meta_IDictionary(self)

    def cast_Slash_Net_INetManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Net_INetManager(self)

    def cast_Slash_UI_IPlotterManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_UI_IPlotterManager(self)

    def cast_Slash_UI_IScriptManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_UI_IScriptManager(self)

    def cast_Slash_UI_IStyleManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_UI_IStyleManager(self)

    def cast_Slash_UI_IUI_Manager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_UI_IUI_Manager(self)

    def cast_Slash_Store_IStoreManager(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Store_IStoreManager(self)

    def cast_Slash_Store_ITree(self):
        return OnX_SWIG_Python.IManager_cast_Slash_Store_ITree(self)

    def cast_Lib_IProcessor(self):
        return OnX_SWIG_Python.IManager_cast_Lib_IProcessor(self)

# Register IManager in OnX_SWIG_Python:
OnX_SWIG_Python.IManager_swigregister(IManager)

class ISession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ISession

    def cast(self, arg2):
        return OnX_SWIG_Python.ISession_cast(self, arg2)

    def addManager(self, arg2):
        return OnX_SWIG_Python.ISession_addManager(self, arg2)

    def removeManager(self, arg2):
        return OnX_SWIG_Python.ISession_removeManager(self, arg2)

    def findManager(self, aName, forward=True):
        return OnX_SWIG_Python.ISession_findManager(self, aName, forward)

    def destroyManager(self, aName):
        return OnX_SWIG_Python.ISession_destroyManager(self, aName)

    def printer(self):
        return OnX_SWIG_Python.ISession_printer(self)

    def out(self):
        return OnX_SWIG_Python.ISession_out(self)

    def cout(self):
        return OnX_SWIG_Python.ISession_cout(self)

    def load(self, aFile, aPackage):
        return OnX_SWIG_Python.ISession_load(self, aFile, aPackage)

    def redirectOutput(self, aRedirect):
        return OnX_SWIG_Python.ISession_redirectOutput(self, aRedirect)

    def setParameter(self, aKey, aValue):
        return OnX_SWIG_Python.ISession_setParameter(self, aKey, aValue)

    def removeParameter(self, aKey):
        return OnX_SWIG_Python.ISession_removeParameter(self, aKey)

    def availableParameters(self):
        return OnX_SWIG_Python.ISession_availableParameters(self)

    def flush(self):
        return OnX_SWIG_Python.ISession_flush(self)

    def setVerboseLevel(self, aVerbosity):
        return OnX_SWIG_Python.ISession_setVerboseLevel(self, aVerbosity)

    def verboseLevel(self):
        return OnX_SWIG_Python.ISession_verboseLevel(self)

    def numberOfManagers(self):
        return OnX_SWIG_Python.ISession_numberOfManagers(self)

    def manager(self, arg2):
        return OnX_SWIG_Python.ISession_manager(self, arg2)

    def managerNames(self):
        return OnX_SWIG_Python.ISession_managerNames(self)

    def arguments(self):
        return OnX_SWIG_Python.ISession_arguments(self)

    def parameterValue(self, *args):
        return OnX_SWIG_Python.ISession_parameterValue(self, *args)

    def setColor(self, *args):
        return OnX_SWIG_Python.ISession_setColor(self, *args)

    def ui(self):
        return OnX_SWIG_Python.ISession_ui(self)

    def createUI(self, *args):
        return OnX_SWIG_Python.ISession_createUI(self, *args)

    def loadInterpreter(self, aInterp, aQuiet=False):
        return OnX_SWIG_Python.ISession_loadInterpreter(self, aInterp, aQuiet)

    def libraryManager(self):
        return OnX_SWIG_Python.ISession_libraryManager(self)

    def dictionary(self):
        return OnX_SWIG_Python.ISession_dictionary(self)

    def relationManager(self):
        return OnX_SWIG_Python.ISession_relationManager(self)

    def styleManager(self):
        return OnX_SWIG_Python.ISession_styleManager(self)

    def scriptManager(self):
        return OnX_SWIG_Python.ISession_scriptManager(self)

    def uiManager(self):
        return OnX_SWIG_Python.ISession_uiManager(self)

    def accessorManager(self):
        return OnX_SWIG_Python.ISession_accessorManager(self)

    def netManager(self):
        return OnX_SWIG_Python.ISession_netManager(self)

    def memoryTree(self):
        return OnX_SWIG_Python.ISession_memoryTree(self)

    def functionManager(self):
        return OnX_SWIG_Python.ISession_functionManager(self)

    def sceneHandler(self):
        return OnX_SWIG_Python.ISession_sceneHandler(self)

# Register ISession in OnX_SWIG_Python:
OnX_SWIG_Python.ISession_swigregister(ISession)


def Slash_create_session(*args):
    return OnX_SWIG_Python.Slash_create_session(*args)
class ILibrary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ILibrary

    def isInitialized(self):
        return OnX_SWIG_Python.ILibrary_isInitialized(self)

    def name(self):
        return OnX_SWIG_Python.ILibrary_name(self)

    def findProcedure(self, arg2, quiet=False):
        return OnX_SWIG_Python.ILibrary_findProcedure(self, arg2, quiet)

# Register ILibrary in OnX_SWIG_Python:
OnX_SWIG_Python.ILibrary_swigregister(ILibrary)

class ILibraryManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ILibraryManager

    def addLibrary(self, arg2, arg3, arg4, arg5=False):
        return OnX_SWIG_Python.ILibraryManager_addLibrary(self, arg2, arg3, arg4, arg5)

    def findLibrary(self, arg2):
        return OnX_SWIG_Python.ILibraryManager_findLibrary(self, arg2)

# Register ILibraryManager in OnX_SWIG_Python:
OnX_SWIG_Python.ILibraryManager_swigregister(ILibraryManager)

class IRelation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IRelation

    def cast(self, arg2):
        return OnX_SWIG_Python.IRelation_cast(self, arg2)

    def name(self):
        return OnX_SWIG_Python.IRelation_name(self)

    def schedule(self):
        return OnX_SWIG_Python.IRelation_schedule(self)

    def unSchedule(self):
        return OnX_SWIG_Python.IRelation_unSchedule(self)

    def first(self):
        return OnX_SWIG_Python.IRelation_first(self)

    def second(self):
        return OnX_SWIG_Python.IRelation_second(self)

# Register IRelation in OnX_SWIG_Python:
OnX_SWIG_Python.IRelation_swigregister(IRelation)

class IRelationVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IRelationVisitor

    def visit(self, arg2):
        return OnX_SWIG_Python.IRelationVisitor_visit(self, arg2)

# Register IRelationVisitor in OnX_SWIG_Python:
OnX_SWIG_Python.IRelationVisitor_swigregister(IRelationVisitor)

class IRelationManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IRelationManager

    def add(self, arg2):
        return OnX_SWIG_Python.IRelationManager_add(self, arg2)

    def visit(self, arg2):
        return OnX_SWIG_Python.IRelationManager_visit(self, arg2)

    def remove(self, arg2, schedule=False):
        return OnX_SWIG_Python.IRelationManager_remove(self, arg2, schedule)

    def removeWith(self, arg2):
        return OnX_SWIG_Python.IRelationManager_removeWith(self, arg2)

    def isValid(self, arg2):
        return OnX_SWIG_Python.IRelationManager_isValid(self, arg2)

# Register IRelationManager in OnX_SWIG_Python:
OnX_SWIG_Python.IRelationManager_swigregister(IRelationManager)

class IDirectoryVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IDirectoryVisitor

    def directory(self, arg2, arg3):
        return OnX_SWIG_Python.IDirectoryVisitor_directory(self, arg2, arg3)

    def file(self, arg2):
        return OnX_SWIG_Python.IDirectoryVisitor_file(self, arg2)

# Register IDirectoryVisitor in OnX_SWIG_Python:
OnX_SWIG_Python.IDirectoryVisitor_swigregister(IDirectoryVisitor)

class IAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IAction

    def cast(self, arg2):
        return OnX_SWIG_Python.IAction_cast(self, arg2)

    def name(self):
        return OnX_SWIG_Python.IAction_name(self)

    def execute(self, arg2):
        return OnX_SWIG_Python.IAction_execute(self, arg2)

    def cast_Slash_Core_IVisualizeAction(self):
        return OnX_SWIG_Python.IAction_cast_Slash_Core_IVisualizeAction(self)

# Register IAction in OnX_SWIG_Python:
OnX_SWIG_Python.IAction_swigregister(IAction)

class IMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IMessage

    def cast(self, arg2):
        return OnX_SWIG_Python.IMessage_cast(self, arg2)

    def message(self):
        return OnX_SWIG_Python.IMessage_message(self)

# Register IMessage in OnX_SWIG_Python:
OnX_SWIG_Python.IMessage_swigregister(IMessage)

class IFileGetter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IFileGetter

    def fetch(self, arg2, arg3, arg4):
        return OnX_SWIG_Python.IFileGetter_fetch(self, arg2, arg3, arg4)

    def exists(self, arg2, arg3):
        return OnX_SWIG_Python.IFileGetter_exists(self, arg2, arg3)

# Register IFileGetter in OnX_SWIG_Python:
OnX_SWIG_Python.IFileGetter_swigregister(IFileGetter)

Slash_Core_typedefs_h = OnX_SWIG_Python.Slash_Core_typedefs_h
SLASH_INT32_FORMAT = OnX_SWIG_Python.SLASH_INT32_FORMAT
SLASH_INT64_FORMAT = OnX_SWIG_Python.SLASH_INT64_FORMAT
SLASH_UINT32_FORMAT = OnX_SWIG_Python.SLASH_UINT32_FORMAT
SLASH_UINT64_FORMAT = OnX_SWIG_Python.SLASH_UINT64_FORMAT
class IValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IValue

    def cast(self, arg2):
        return OnX_SWIG_Python.IValue_cast(self, arg2)
    NONE = OnX_SWIG_Python.IValue_NONE
    UNSIGNED_CHAR = OnX_SWIG_Python.IValue_UNSIGNED_CHAR
    CHAR = OnX_SWIG_Python.IValue_CHAR
    UNSIGNED_SHORT = OnX_SWIG_Python.IValue_UNSIGNED_SHORT
    SHORT = OnX_SWIG_Python.IValue_SHORT
    UNSIGNED_INT = OnX_SWIG_Python.IValue_UNSIGNED_INT
    INT = OnX_SWIG_Python.IValue_INT
    UNSIGNED_INT64 = OnX_SWIG_Python.IValue_UNSIGNED_INT64
    INT64 = OnX_SWIG_Python.IValue_INT64
    FLOAT = OnX_SWIG_Python.IValue_FLOAT
    DOUBLE = OnX_SWIG_Python.IValue_DOUBLE
    BOOL = OnX_SWIG_Python.IValue_BOOL
    STRING = OnX_SWIG_Python.IValue_STRING
    VOID_STAR = OnX_SWIG_Python.IValue_VOID_STAR
    DOUBLE_STAR = OnX_SWIG_Python.IValue_DOUBLE_STAR
    FLOAT_STAR = OnX_SWIG_Python.IValue_FLOAT_STAR
    INT_STAR = OnX_SWIG_Python.IValue_INT_STAR
    ARRAY_UNSIGNED_CHAR = OnX_SWIG_Python.IValue_ARRAY_UNSIGNED_CHAR
    ARRAY_CHAR = OnX_SWIG_Python.IValue_ARRAY_CHAR
    ARRAY_UNSIGNED_SHORT = OnX_SWIG_Python.IValue_ARRAY_UNSIGNED_SHORT
    ARRAY_SHORT = OnX_SWIG_Python.IValue_ARRAY_SHORT
    ARRAY_UNSIGNED_INT = OnX_SWIG_Python.IValue_ARRAY_UNSIGNED_INT
    ARRAY_INT = OnX_SWIG_Python.IValue_ARRAY_INT
    ARRAY_UNSIGNED_INT64 = OnX_SWIG_Python.IValue_ARRAY_UNSIGNED_INT64
    ARRAY_INT64 = OnX_SWIG_Python.IValue_ARRAY_INT64
    ARRAY_FLOAT = OnX_SWIG_Python.IValue_ARRAY_FLOAT
    ARRAY_DOUBLE = OnX_SWIG_Python.IValue_ARRAY_DOUBLE
    ARRAY_BOOL = OnX_SWIG_Python.IValue_ARRAY_BOOL
    ARRAY_STRING = OnX_SWIG_Python.IValue_ARRAY_STRING

    def setType(self, arg2):
        return OnX_SWIG_Python.IValue_setType(self, arg2)

    def type(self):
        return OnX_SWIG_Python.IValue_type(self)

    def stype(self):
        return OnX_SWIG_Python.IValue_stype(self)

    def get_unsigned_char(self):
        return OnX_SWIG_Python.IValue_get_unsigned_char(self)

    def get_char(self):
        return OnX_SWIG_Python.IValue_get_char(self)

    def get_unsigned_int(self):
        return OnX_SWIG_Python.IValue_get_unsigned_int(self)

    def get_int(self):
        return OnX_SWIG_Python.IValue_get_int(self)

    def get_unsigned_int64(self):
        return OnX_SWIG_Python.IValue_get_unsigned_int64(self)

    def get_int64(self):
        return OnX_SWIG_Python.IValue_get_int64(self)

    def get_unsigned_short(self):
        return OnX_SWIG_Python.IValue_get_unsigned_short(self)

    def get_short(self):
        return OnX_SWIG_Python.IValue_get_short(self)

    def get_float(self):
        return OnX_SWIG_Python.IValue_get_float(self)

    def get_double(self):
        return OnX_SWIG_Python.IValue_get_double(self)

    def get_void_star(self):
        return OnX_SWIG_Python.IValue_get_void_star(self)

    def get_double_star(self):
        return OnX_SWIG_Python.IValue_get_double_star(self)

    def get_float_star(self):
        return OnX_SWIG_Python.IValue_get_float_star(self)

    def get_int_star(self):
        return OnX_SWIG_Python.IValue_get_int_star(self)

    def get_bool(self):
        return OnX_SWIG_Python.IValue_get_bool(self)

    def get_string(self):
        return OnX_SWIG_Python.IValue_get_string(self)

    def setNone(self):
        return OnX_SWIG_Python.IValue_setNone(self)

    def setLabel(self, arg2):
        return OnX_SWIG_Python.IValue_setLabel(self, arg2)

    def label(self):
        return OnX_SWIG_Python.IValue_label(self)

    def setDimension(self, arg2):
        return OnX_SWIG_Python.IValue_setDimension(self, arg2)

    def dimension(self):
        return OnX_SWIG_Python.IValue_dimension(self)

    def get_array_unsigned_char(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_unsigned_char(self, arg2)

    def get_array_char(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_char(self, arg2)

    def get_array_unsigned_short(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_unsigned_short(self, arg2)

    def get_array_short(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_short(self, arg2)

    def get_array_unsigned_int(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_unsigned_int(self, arg2)

    def get_array_int(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_int(self, arg2)

    def get_array_unsigned_int64(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_unsigned_int64(self, arg2)

    def get_array_int64(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_int64(self, arg2)

    def get_array_float(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_float(self, arg2)

    def get_array_double(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_double(self, arg2)

    def get_array_bool(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_bool(self, arg2)

    def set(self, *args):
        return OnX_SWIG_Python.IValue_set(self, *args)

    def get_array_string(self, arg2):
        return OnX_SWIG_Python.IValue_get_array_string(self, arg2)

    def toString(self):
        return OnX_SWIG_Python.IValue_toString(self)

# Register IValue in OnX_SWIG_Python:
OnX_SWIG_Python.IValue_swigregister(IValue)

class IParameterManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IParameterManager

    def setParameter(self, arg2, arg3):
        return OnX_SWIG_Python.IParameterManager_setParameter(self, arg2, arg3)

    def parameterValue(self, arg2, arg3):
        return OnX_SWIG_Python.IParameterManager_parameterValue(self, arg2, arg3)

# Register IParameterManager in OnX_SWIG_Python:
OnX_SWIG_Python.IParameterManager_swigregister(IParameterManager)

class IHierarchy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IHierarchy

    def hierarchy(self, *args):
        return OnX_SWIG_Python.IHierarchy_hierarchy(self, *args)

# Register IHierarchy in OnX_SWIG_Python:
OnX_SWIG_Python.IHierarchy_swigregister(IHierarchy)

class IOpaqueManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IOpaqueManager

    def find(self, arg2):
        return OnX_SWIG_Python.IOpaqueManager_find(self, arg2)

    def add(self, aObject, aID, aOwner=False):
        return OnX_SWIG_Python.IOpaqueManager_add(self, aObject, aID, aOwner)

    def isOwner(self, arg2):
        return OnX_SWIG_Python.IOpaqueManager_isOwner(self, arg2)

    def destroy(self, arg2):
        return OnX_SWIG_Python.IOpaqueManager_destroy(self, arg2)

# Register IOpaqueManager in OnX_SWIG_Python:
OnX_SWIG_Python.IOpaqueManager_swigregister(IOpaqueManager)

class IMutex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IMutex

    def lock(self):
        return OnX_SWIG_Python.IMutex_lock(self)

    def unlock(self):
        return OnX_SWIG_Python.IMutex_unlock(self)

# Register IMutex in OnX_SWIG_Python:
OnX_SWIG_Python.IMutex_swigregister(IMutex)

class IInterpreter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IInterpreter

    def name(self):
        return OnX_SWIG_Python.IInterpreter_name(self)

    def pck(self):
        return OnX_SWIG_Python.IInterpreter_pck(self)

    def suffix(self):
        return OnX_SWIG_Python.IInterpreter_suffix(self)

    def execFileCommand(self):
        return OnX_SWIG_Python.IInterpreter_execFileCommand(self)

    def setFunction(self, arg2, arg3):
        return OnX_SWIG_Python.IInterpreter_setFunction(self, arg2, arg3)

    def function(self, arg2):
        return OnX_SWIG_Python.IInterpreter_function(self, arg2)

    def executeScript(self, arg2, arg3):
        return OnX_SWIG_Python.IInterpreter_executeScript(self, arg2, arg3)

    def isOperational(self):
        return OnX_SWIG_Python.IInterpreter_isOperational(self)

    def load(self, quiet=False):
        return OnX_SWIG_Python.IInterpreter_load(self, quiet)

    def addAlias(self, alias, value):
        return OnX_SWIG_Python.IInterpreter_addAlias(self, alias, value)

    def setCompleter(self, arg2, arg3):
        return OnX_SWIG_Python.IInterpreter_setCompleter(self, arg2, arg3)

    def completer(self, arg2):
        return OnX_SWIG_Python.IInterpreter_completer(self, arg2)

    def complete(self, arg2, arg3):
        return OnX_SWIG_Python.IInterpreter_complete(self, arg2, arg3)

# Register IInterpreter in OnX_SWIG_Python:
OnX_SWIG_Python.IInterpreter_swigregister(IInterpreter)

class IScriptManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IScriptManager

    def addInterpreter(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10=None, arg11=None):
        return OnX_SWIG_Python.IScriptManager_addInterpreter(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)

    def findInterpreter(self, arg2):
        return OnX_SWIG_Python.IScriptManager_findInterpreter(self, arg2)

    def findInterpreterFromSuffix(self, arg2):
        return OnX_SWIG_Python.IScriptManager_findInterpreterFromSuffix(self, arg2)

    def executeScript(self, arg2, arg3, arg4):
        return OnX_SWIG_Python.IScriptManager_executeScript(self, arg2, arg3, arg4)

    def recordExecutedScripts(self, arg2):
        return OnX_SWIG_Python.IScriptManager_recordExecutedScripts(self, arg2)

    def record(self, arg2, arg3):
        return OnX_SWIG_Python.IScriptManager_record(self, arg2, arg3)

    def names(self):
        return OnX_SWIG_Python.IScriptManager_names(self)

    def removeInterpreter(self, arg2):
        return OnX_SWIG_Python.IScriptManager_removeInterpreter(self, arg2)

# Register IScriptManager in OnX_SWIG_Python:
OnX_SWIG_Python.IScriptManager_swigregister(IScriptManager)

class IStyleManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IStyleManager

    def isStyle(self, arg2):
        return OnX_SWIG_Python.IStyleManager_isStyle(self, arg2)

    def styles(self):
        return OnX_SWIG_Python.IStyleManager_styles(self)

    def removeStyle(self, name):
        return OnX_SWIG_Python.IStyleManager_removeStyle(self, name)

    def loadFile(self, arg2):
        return OnX_SWIG_Python.IStyleManager_loadFile(self, arg2)

    def loadString(self, arg2):
        return OnX_SWIG_Python.IStyleManager_loadString(self, arg2)

    def addStyle(self, name, value):
        return OnX_SWIG_Python.IStyleManager_addStyle(self, name, value)

    def findStyle(self, arg2, arg3):
        return OnX_SWIG_Python.IStyleManager_findStyle(self, arg2, arg3)

# Register IStyleManager in OnX_SWIG_Python:
OnX_SWIG_Python.IStyleManager_swigregister(IStyleManager)

class ICallbackData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ICallbackData

    def widget(self):
        return OnX_SWIG_Python.ICallbackData_widget(self)

    def component(self):
        return OnX_SWIG_Python.ICallbackData_component(self)

    def value(self):
        return OnX_SWIG_Python.ICallbackData_value(self)

    def event(self):
        return OnX_SWIG_Python.ICallbackData_event(self)

    def x(self):
        return OnX_SWIG_Python.ICallbackData_x(self)

    def y(self):
        return OnX_SWIG_Python.ICallbackData_y(self)

    def copy(self, arg2):
        return OnX_SWIG_Python.ICallbackData_copy(self, arg2)

# Register ICallbackData in OnX_SWIG_Python:
OnX_SWIG_Python.ICallbackData_swigregister(ICallbackData)

class IWidgetFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IWidgetFactory

    def createComponent(self, aName, aClass, aParent):
        return OnX_SWIG_Python.IWidgetFactory_createComponent(self, aName, aClass, aParent)

    def createWidget(self, *args):
        return OnX_SWIG_Python.IWidgetFactory_createWidget(self, *args)

# Register IWidgetFactory in OnX_SWIG_Python:
OnX_SWIG_Python.IWidgetFactory_swigregister(IWidgetFactory)

class IWidgetClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IWidgetClass

    def name(self):
        return OnX_SWIG_Python.IWidgetClass_name(self)

    def attributes(self):
        return OnX_SWIG_Python.IWidgetClass_attributes(self)

    def children(self):
        return OnX_SWIG_Python.IWidgetClass_children(self)

    def properties(self):
        return OnX_SWIG_Python.IWidgetClass_properties(self)

    def callbacks(self):
        return OnX_SWIG_Python.IWidgetClass_callbacks(self)

    def setAttributes(self, arg2):
        return OnX_SWIG_Python.IWidgetClass_setAttributes(self, arg2)

# Register IWidgetClass in OnX_SWIG_Python:
OnX_SWIG_Python.IWidgetClass_swigregister(IWidgetClass)

class IWidget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IWidget

    def cast(self, className):
        return OnX_SWIG_Python.IWidget_cast(self, className)

    def widgetClass(self):
        return OnX_SWIG_Python.IWidget_widgetClass(self)

    def name(self):
        return OnX_SWIG_Python.IWidget_name(self)

    def nativeWidget(self):
        return OnX_SWIG_Python.IWidget_nativeWidget(self)

    def executeCallbacks(self, callbackName):
        return OnX_SWIG_Python.IWidget_executeCallbacks(self, callbackName)

    def size(self, width, height):
        return OnX_SWIG_Python.IWidget_size(self, width, height)

    def position(self, x, y):
        return OnX_SWIG_Python.IWidget_position(self, x, y)

    def write(self, *args):
        return OnX_SWIG_Python.IWidget_write(self, *args)

    def setParameter(self, arg2, arg3):
        return OnX_SWIG_Python.IWidget_setParameter(self, arg2, arg3)

    def parameterValue(self, arg2, arg3):
        return OnX_SWIG_Python.IWidget_parameterValue(self, arg2, arg3)

    def refresh(self):
        return OnX_SWIG_Python.IWidget_refresh(self)

    def manage(self, arg2):
        return OnX_SWIG_Python.IWidget_manage(self, arg2)

    def show(self):
        return OnX_SWIG_Python.IWidget_show(self)

    def hide(self):
        return OnX_SWIG_Python.IWidget_hide(self)

    def cast_Slash_UI_ISoViewer(self):
        return OnX_SWIG_Python.IWidget_cast_Slash_UI_ISoViewer(self)

    def cast_ISoViewer(self):
        return OnX_SWIG_Python.IWidget_cast_ISoViewer(self)

# Register IWidget in OnX_SWIG_Python:
OnX_SWIG_Python.IWidget_swigregister(IWidget)

class IUI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IUI

    def cast(self, arg2):
        return OnX_SWIG_Python.IUI_cast(self, arg2)

    def isValid(self):
        return OnX_SWIG_Python.IUI_isValid(self)

    def executeScript(self, *args):
        return OnX_SWIG_Python.IUI_executeScript(self, *args)

    def put(self, arg2):
        return OnX_SWIG_Python.IUI_put(self, arg2)

    def steer(self):
        return OnX_SWIG_Python.IUI_steer(self)

    def steerLevel(self):
        return OnX_SWIG_Python.IUI_steerLevel(self)

    def synchronize(self):
        return OnX_SWIG_Python.IUI_synchronize(self)

    def exit(self, arg2=0):
        return OnX_SWIG_Python.IUI_exit(self, arg2)

    def steerModal(self):
        return OnX_SWIG_Python.IUI_steerModal(self)

    def exitModal(self):
        return OnX_SWIG_Python.IUI_exitModal(self)

    def lock(self):
        return OnX_SWIG_Python.IUI_lock(self)

    def unlock(self):
        return OnX_SWIG_Python.IUI_unlock(self)

    def echo(self, arg2):
        return OnX_SWIG_Python.IUI_echo(self, arg2)

    def warn(self, arg2):
        return OnX_SWIG_Python.IUI_warn(self, arg2)

    def ask(self, arg2):
        return OnX_SWIG_Python.IUI_ask(self, arg2)

    def addDispatcher(self, arg2):
        return OnX_SWIG_Python.IUI_addDispatcher(self, arg2)

    def setCallback(self, aName, aCallback, aInterpreter, aScript, aIndex=0):
        return OnX_SWIG_Python.IUI_setCallback(self, aName, aCallback, aInterpreter, aScript, aIndex)

    def removeCallback(self, aName, aCallback, aIndex=0):
        return OnX_SWIG_Python.IUI_removeCallback(self, aName, aCallback, aIndex)

    def callbackValue(self):
        return OnX_SWIG_Python.IUI_callbackValue(self)

    def callbackData(self):
        return OnX_SWIG_Python.IUI_callbackData(self)

    def setCallbackData(self, arg2):
        return OnX_SWIG_Python.IUI_setCallbackData(self, arg2)

    def setParameter(self, arg2, arg3):
        return OnX_SWIG_Python.IUI_setParameter(self, arg2, arg3)

    def executeCallbacks(self, arg2, arg3):
        return OnX_SWIG_Python.IUI_executeCallbacks(self, arg2, arg3)

    def save(self):
        return OnX_SWIG_Python.IUI_save(self)

    def deleteChildren(self, arg2):
        return OnX_SWIG_Python.IUI_deleteChildren(self, arg2)

    def createCyclic(self, arg2, arg3, arg4, arg5):
        return OnX_SWIG_Python.IUI_createCyclic(self, arg2, arg3, arg4, arg5)

    def findCyclic(self, arg2):
        return OnX_SWIG_Python.IUI_findCyclic(self, arg2)

    def removeCyclic(self, arg2):
        return OnX_SWIG_Python.IUI_removeCyclic(self, arg2)

    def createWidgetName(self):
        return OnX_SWIG_Python.IUI_createWidgetName(self)

    def findWidgetClass(self, arg2):
        return OnX_SWIG_Python.IUI_findWidgetClass(self, arg2)

    def findWidget(self, arg2):
        return OnX_SWIG_Python.IUI_findWidget(self, arg2)

    def createWidget(self, *args):
        return OnX_SWIG_Python.IUI_createWidget(self, *args)

    def destroyWidget(self, arg2):
        return OnX_SWIG_Python.IUI_destroyWidget(self, arg2)

    def findWidgetByAttribute(self, atb, value, up_down=True, left_right=True):
        return OnX_SWIG_Python.IUI_findWidgetByAttribute(self, atb, value, up_down, left_right)

    def load(self, *args):
        return OnX_SWIG_Python.IUI_load(self, *args)

    def currentWidget(self):
        return OnX_SWIG_Python.IUI_currentWidget(self)

    def setCurrentWidget(self, arg2):
        return OnX_SWIG_Python.IUI_setCurrentWidget(self, arg2)

    def createComponent(self, aName, aClass, aParent):
        return OnX_SWIG_Python.IUI_createComponent(self, aName, aClass, aParent)

    def destroyComponent(self, aName):
        return OnX_SWIG_Python.IUI_destroyComponent(self, aName)

    def copyComponent(self, aName, aComponent, aParent):
        return OnX_SWIG_Python.IUI_copyComponent(self, aName, aComponent, aParent)

    def findChildren(self, aComponent, aWhat, aParameter):
        return OnX_SWIG_Python.IUI_findChildren(self, aComponent, aWhat, aParameter)

    def findParent(self, aComponent, aWhat, aParameter):
        return OnX_SWIG_Python.IUI_findParent(self, aComponent, aWhat, aParameter)

    def isComponent(self, aName):
        return OnX_SWIG_Python.IUI_isComponent(self, aName)

    def session(self):
        return OnX_SWIG_Python.IUI_session(self)

    def notify(self, aMessage):
        return OnX_SWIG_Python.IUI_notify(self, aMessage)

    def beingDestroyed(self):
        return OnX_SWIG_Python.IUI_beingDestroyed(self)

    def enableTerminal(self, prompt, interp):
        return OnX_SWIG_Python.IUI_enableTerminal(self, prompt, interp)

    def disableTerminal(self):
        return OnX_SWIG_Python.IUI_disableTerminal(self)

    def redirectAskToTerminal(self, arg2):
        return OnX_SWIG_Python.IUI_redirectAskToTerminal(self, arg2)

    def lockScreen(self, *args):
        return OnX_SWIG_Python.IUI_lockScreen(self, *args)

    def atat(self, arg2, arg3):
        return OnX_SWIG_Python.IUI_atat(self, arg2, arg3)

    def show(self, *args):
        return OnX_SWIG_Python.IUI_show(self, *args)

    def parameterValue(self, *args):
        return OnX_SWIG_Python.IUI_parameterValue(self, *args)

    def setTreeItems(self, aTreeWidget, aFile):
        return OnX_SWIG_Python.IUI_setTreeItems(self, aTreeWidget, aFile)

    def showHelp(self, aFile):
        return OnX_SWIG_Python.IUI_showHelp(self, aFile)

    def showDialog(self, aFile, aDialog):
        return OnX_SWIG_Python.IUI_showDialog(self, aFile, aDialog)

    def findSoViewer(self, where):
        return OnX_SWIG_Python.IUI_findSoViewer(self, where)

    def findSoNode(self, where, interest):
        return OnX_SWIG_Python.IUI_findSoNode(self, where, interest)

    def findSoPage(self, where):
        return OnX_SWIG_Python.IUI_findSoPage(self, where)

    def findSoRegion(self, where):
        return OnX_SWIG_Python.IUI_findSoRegion(self, where)

    def currentPage(self):
        return OnX_SWIG_Python.IUI_currentPage(self)

# Register IUI in OnX_SWIG_Python:
OnX_SWIG_Python.IUI_swigregister(IUI)

class IUI_Manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IUI_Manager

    def create(self, driver, file, args, show):
        return OnX_SWIG_Python.IUI_Manager_create(self, driver, file, args, show)

    def find(self, name):
        return OnX_SWIG_Python.IUI_Manager_find(self, name)

    def add(self, arg2):
        return OnX_SWIG_Python.IUI_Manager_add(self, arg2)

# Register IUI_Manager in OnX_SWIG_Python:
OnX_SWIG_Python.IUI_Manager_swigregister(IUI_Manager)

class ISceneHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ISceneHandler

    def setViewer(self, viewer):
        return OnX_SWIG_Python.ISceneHandler_setViewer(self, viewer)

    def addScene(self, placement, what):
        return OnX_SWIG_Python.ISceneHandler_addScene(self, placement, what)

    def clear(self, viewer, placement):
        return OnX_SWIG_Python.ISceneHandler_clear(self, viewer, placement)

    def find(self, viewer, placement):
        return OnX_SWIG_Python.ISceneHandler_find(self, viewer, placement)

# Register ISceneHandler in OnX_SWIG_Python:
OnX_SWIG_Python.ISceneHandler_swigregister(ISceneHandler)

class ICyclicCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ICyclicCallback

    def execute(self):
        return OnX_SWIG_Python.ICyclicCallback_execute(self)

# Register ICyclicCallback in OnX_SWIG_Python:
OnX_SWIG_Python.ICyclicCallback_swigregister(ICyclicCallback)

class ICyclic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ICyclic

    def name(self):
        return OnX_SWIG_Python.ICyclic_name(self)

    def setDelay(self, arg2):
        return OnX_SWIG_Python.ICyclic_setDelay(self, arg2)

    def setCallback(self, arg2):
        return OnX_SWIG_Python.ICyclic_setCallback(self, arg2)

    def setScript(self, arg2, arg3):
        return OnX_SWIG_Python.ICyclic_setScript(self, arg2, arg3)

    def start(self):
        return OnX_SWIG_Python.ICyclic_start(self)

    def stop(self):
        return OnX_SWIG_Python.ICyclic_stop(self)

    def execute(self):
        return OnX_SWIG_Python.ICyclic_execute(self)

    def delay(self):
        return OnX_SWIG_Python.ICyclic_delay(self)

    def iterations(self):
        return OnX_SWIG_Python.ICyclic_iterations(self)

    def started(self):
        return OnX_SWIG_Python.ICyclic_started(self)

    def interpreter(self):
        return OnX_SWIG_Python.ICyclic_interpreter(self)

    def script(self):
        return OnX_SWIG_Python.ICyclic_script(self)

# Register ICyclic in OnX_SWIG_Python:
OnX_SWIG_Python.ICyclic_swigregister(ICyclic)

class IPlotter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IPlotter

    def cast(self, arg2):
        return OnX_SWIG_Python.IPlotter_cast(self, arg2)

    def nodeOfInterest(self, what):
        return OnX_SWIG_Python.IPlotter_nodeOfInterest(self, what)

# Register IPlotter in OnX_SWIG_Python:
OnX_SWIG_Python.IPlotter_swigregister(IPlotter)

class IPlotterManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IPlotterManager

    def setArguments(self, arg2):
        return OnX_SWIG_Python.IPlotterManager_setArguments(self, arg2)

    def create(self, arg2):
        return OnX_SWIG_Python.IPlotterManager_create(self, arg2)

# Register IPlotterManager in OnX_SWIG_Python:
OnX_SWIG_Python.IPlotterManager_swigregister(IPlotterManager)

class ISoViewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ISoViewer

    def setTitle(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setTitle(self, arg2)

    def setBackgroundColor(self, red, green, blue):
        return OnX_SWIG_Python.ISoViewer_setBackgroundColor(self, red, green, blue)

    def render(self):
        return OnX_SWIG_Python.ISoViewer_render(self)

    def viewportRegion(self):
        return OnX_SWIG_Python.ISoViewer_viewportRegion(self)

    def sceneGraph(self):
        return OnX_SWIG_Python.ISoViewer_sceneGraph(self)

    def getGLRenderAction(self):
        return OnX_SWIG_Python.ISoViewer_getGLRenderAction(self)

    def setGLRenderAction(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setGLRenderAction(self, arg2)

    def setTransparencyType(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setTransparencyType(self, arg2)

    def transparencyType(self, arg2):
        return OnX_SWIG_Python.ISoViewer_transparencyType(self, arg2)

    def setHeadlight(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setHeadlight(self, arg2)

    def viewAll(self):
        return OnX_SWIG_Python.ISoViewer_viewAll(self)

    def setViewing(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setViewing(self, arg2)

    def setAutoClipping(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setAutoClipping(self, arg2)

    def setDecoration(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setDecoration(self, arg2)

    def setAnimation(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setAnimation(self, arg2)

    def stopAnimating(self):
        return OnX_SWIG_Python.ISoViewer_stopAnimating(self)

    def setFeedbackVisibility(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setFeedbackVisibility(self, arg2)

    def setSmoothing(self, arg2):
        return OnX_SWIG_Python.ISoViewer_setSmoothing(self, arg2)

    def readScene(self, file, format, placement):
        return OnX_SWIG_Python.ISoViewer_readScene(self, file, format, placement)

    def clear(self, *args):
        return OnX_SWIG_Python.ISoViewer_clear(self, *args)

    def removeManips(self, *args):
        return OnX_SWIG_Python.ISoViewer_removeManips(self, *args)

    def detectIntersections(self, *args):
        return OnX_SWIG_Python.ISoViewer_detectIntersections(self, *args)

    def collect(self, arg2, arg3, arg4, arg5):
        return OnX_SWIG_Python.ISoViewer_collect(self, arg2, arg3, arg4, arg5)

    def nodeOfInterest(self, what):
        return OnX_SWIG_Python.ISoViewer_nodeOfInterest(self, what)

# Register ISoViewer in OnX_SWIG_Python:
OnX_SWIG_Python.ISoViewer_swigregister(ISoViewer)

class IIB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IIB

    def tree(self):
        return OnX_SWIG_Python.IIB_tree(self)

    def parseDecorations(self, arg2):
        return OnX_SWIG_Python.IIB_parseDecorations(self, arg2)

    def callbackLanguageList(self):
        return OnX_SWIG_Python.IIB_callbackLanguageList(self)

    def propertyType(self, arg2, arg3):
        return OnX_SWIG_Python.IIB_propertyType(self, arg2, arg3)

    def loadReferenceFile(self, arg2, arg3):
        return OnX_SWIG_Python.IIB_loadReferenceFile(self, arg2, arg3)

    def topItemML(self):
        return OnX_SWIG_Python.IIB_topItemML(self)

# Register IIB in OnX_SWIG_Python:
OnX_SWIG_Python.IIB_swigregister(IIB)

class IConsole(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IConsole

    def out(self):
        return OnX_SWIG_Python.IConsole_out(self)

    def beginOut(self):
        return OnX_SWIG_Python.IConsole_beginOut(self)

    def endOut(self):
        return OnX_SWIG_Python.IConsole_endOut(self)

# Register IConsole in OnX_SWIG_Python:
OnX_SWIG_Python.IConsole_swigregister(IConsole)

class IStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IStyle

    def set(self, key, value):
        return OnX_SWIG_Python.IStyle_set(self, key, value)

    def remove(self, key):
        return OnX_SWIG_Python.IStyle_remove(self, key)

    def value(self, key, value):
        return OnX_SWIG_Python.IStyle_value(self, key, value)

    def items(self):
        return OnX_SWIG_Python.IStyle_items(self)

    def copy(self, srcFrom):
        return OnX_SWIG_Python.IStyle_copy(self, srcFrom)

    def toString(self):
        return OnX_SWIG_Python.IStyle_toString(self)

# Register IStyle in OnX_SWIG_Python:
OnX_SWIG_Python.IStyle_swigregister(IStyle)

class IAccessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IAccessor

    def cast(self, arg2):
        return OnX_SWIG_Python.IAccessor_cast(self, arg2)

    def name(self):
        return OnX_SWIG_Python.IAccessor_name(self)

    def numberOfProperties(self):
        return OnX_SWIG_Python.IAccessor_numberOfProperties(self)

    def property(self, arg2):
        return OnX_SWIG_Python.IAccessor_property(self, arg2)

    def iterator(self):
        return OnX_SWIG_Python.IAccessor_iterator(self)

    def findValue(self, arg2, arg3, arg4):
        return OnX_SWIG_Python.IAccessor_findValue(self, arg2, arg3, arg4)

    def setName(self, arg2):
        return OnX_SWIG_Python.IAccessor_setName(self, arg2)

    def setIterator(self, arg2):
        return OnX_SWIG_Python.IAccessor_setIterator(self, arg2)

    def setIteratorArguments(self, arg2):
        return OnX_SWIG_Python.IAccessor_setIteratorArguments(self, arg2)

    def setExecuteArguments(self, arg2):
        return OnX_SWIG_Python.IAccessor_setExecuteArguments(self, arg2)

    def destroy(self, arg2, arg3):
        return OnX_SWIG_Python.IAccessor_destroy(self, arg2, arg3)

    def set(self, arg2, arg3, arg4, arg5):
        return OnX_SWIG_Python.IAccessor_set(self, arg2, arg3, arg4, arg5)

    def calculate(self, arg2, arg3, arg4, arg5):
        return OnX_SWIG_Python.IAccessor_calculate(self, arg2, arg3, arg4, arg5)

# Register IAccessor in OnX_SWIG_Python:
OnX_SWIG_Python.IAccessor_swigregister(IAccessor)

class IHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IHandler

    def type(self):
        return OnX_SWIG_Python.IHandler_type(self)

    def object(self):
        return OnX_SWIG_Python.IHandler_object(self)

    def tag(self):
        return OnX_SWIG_Python.IHandler_tag(self)

    def isEqual(self, arg2):
        return OnX_SWIG_Python.IHandler_isEqual(self, arg2)

# Register IHandler in OnX_SWIG_Python:
OnX_SWIG_Python.IHandler_swigregister(IHandler)

class IHandlersIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IHandlersIterator

    def handler(self):
        return OnX_SWIG_Python.IHandlersIterator_handler(self)

    def next(self):
        return OnX_SWIG_Python.IHandlersIterator_next(self)

# Register IHandlersIterator in OnX_SWIG_Python:
OnX_SWIG_Python.IHandlersIterator_swigregister(IHandlersIterator)

class IIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IIterator

    def object(self):
        return OnX_SWIG_Python.IIterator_object(self)

    def tag(self):
        return OnX_SWIG_Python.IIterator_tag(self)

    def next(self):
        return OnX_SWIG_Python.IIterator_next(self)

# Register IIterator in OnX_SWIG_Python:
OnX_SWIG_Python.IIterator_swigregister(IIterator)

class IProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IProcessor

    def out(self):
        return OnX_SWIG_Python.IProcessor_out(self)

    def setVerboseLevel(self, arg2):
        return OnX_SWIG_Python.IProcessor_setVerboseLevel(self, arg2)

    def verboseLevel(self):
        return OnX_SWIG_Python.IProcessor_verboseLevel(self)

    def addAccessor(self, arg2):
        return OnX_SWIG_Python.IProcessor_addAccessor(self, arg2)

    def removeAccessor(self, arg2):
        return OnX_SWIG_Python.IProcessor_removeAccessor(self, arg2)

    def findAccessor(self, arg2):
        return OnX_SWIG_Python.IProcessor_findAccessor(self, arg2)

    def accessorNames(self):
        return OnX_SWIG_Python.IProcessor_accessorNames(self)

    def accessors(self):
        return OnX_SWIG_Python.IProcessor_accessors(self)

    def addAction(self, arg2):
        return OnX_SWIG_Python.IProcessor_addAction(self, arg2)

    def removeAction(self, arg2):
        return OnX_SWIG_Python.IProcessor_removeAction(self, arg2)

    def findAction(self, arg2):
        return OnX_SWIG_Python.IProcessor_findAction(self, arg2)

    def actionNames(self):
        return OnX_SWIG_Python.IProcessor_actionNames(self)

    def execute(self, arg2, arg3):
        return OnX_SWIG_Python.IProcessor_execute(self, arg2, arg3)

    def addHandler(self, arg2, arg3, arg4):
        return OnX_SWIG_Python.IProcessor_addHandler(self, arg2, arg3, arg4)

    def numberOfHandlers(self):
        return OnX_SWIG_Python.IProcessor_numberOfHandlers(self)

    def handlersIterator(self):
        return OnX_SWIG_Python.IProcessor_handlersIterator(self)

    def eraseHandlers(self):
        return OnX_SWIG_Python.IProcessor_eraseHandlers(self)

    def addOutHandler(self, arg2, arg3, arg4):
        return OnX_SWIG_Python.IProcessor_addOutHandler(self, arg2, arg3, arg4)

    def outHandlersIterator(self):
        return OnX_SWIG_Python.IProcessor_outHandlersIterator(self)

    def eraseOutHandlers(self):
        return OnX_SWIG_Python.IProcessor_eraseOutHandlers(self)

    def swapHandlers(self):
        return OnX_SWIG_Python.IProcessor_swapHandlers(self)

    def handlersAccessors(self):
        return OnX_SWIG_Python.IProcessor_handlersAccessors(self)

    def type_id_tag(self, arg2, arg3, arg4, arg5):
        return OnX_SWIG_Python.IProcessor_type_id_tag(self, arg2, arg3, arg4, arg5)

    def collect(self, *args):
        return OnX_SWIG_Python.IProcessor_collect(self, *args)

    def visualize(self, *args):
        return OnX_SWIG_Python.IProcessor_visualize(self, *args)

    def number(self):
        return OnX_SWIG_Python.IProcessor_number(self)

    def values(self, aWhat):
        return OnX_SWIG_Python.IProcessor_values(self, aWhat)

    def dump(self, *args):
        return OnX_SWIG_Python.IProcessor_dump(self, *args)

    def filter(self, *args):
        return OnX_SWIG_Python.IProcessor_filter(self, *args)

    def set(self, aWhat, aValue):
        return OnX_SWIG_Python.IProcessor_set(self, aWhat, aValue)

    def destroy(self):
        return OnX_SWIG_Python.IProcessor_destroy(self)

# Register IProcessor in OnX_SWIG_Python:
OnX_SWIG_Python.IProcessor_swigregister(IProcessor)

class IProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IProperty
    NONE = OnX_SWIG_Python.IProperty_NONE
    INTEGER = OnX_SWIG_Python.IProperty_INTEGER
    DOUBLE = OnX_SWIG_Python.IProperty_DOUBLE
    STRING = OnX_SWIG_Python.IProperty_STRING
    POINTER = OnX_SWIG_Python.IProperty_POINTER
    BOOLEAN = OnX_SWIG_Python.IProperty_BOOLEAN
    INT64 = OnX_SWIG_Python.IProperty_INT64
    VECTOR_INTEGER = OnX_SWIG_Python.IProperty_VECTOR_INTEGER
    VECTOR_DOUBLE = OnX_SWIG_Python.IProperty_VECTOR_DOUBLE
    VECTOR_STRING = OnX_SWIG_Python.IProperty_VECTOR_STRING
    VECTOR_BOOLEAN = OnX_SWIG_Python.IProperty_VECTOR_BOOLEAN

    def name(self):
        return OnX_SWIG_Python.IProperty_name(self)

    def label(self):
        return OnX_SWIG_Python.IProperty_label(self)

    def header(self):
        return OnX_SWIG_Python.IProperty_header(self)

    def dress(self, arg2):
        return OnX_SWIG_Python.IProperty_dress(self, arg2)

    def type(self):
        return OnX_SWIG_Python.IProperty_type(self)

    def typeString(self):
        return OnX_SWIG_Python.IProperty_typeString(self)

# Register IProperty in OnX_SWIG_Python:
OnX_SWIG_Python.IProperty_swigregister(IProperty)

class IVisualizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IVisualizer

    def beginVisualize(self, *args):
        return OnX_SWIG_Python.IVisualizer_beginVisualize(self, *args)

    def visualize(self, arg2, arg3):
        return OnX_SWIG_Python.IVisualizer_visualize(self, arg2, arg3)

    def endVisualize(self):
        return OnX_SWIG_Python.IVisualizer_endVisualize(self)

# Register IVisualizer in OnX_SWIG_Python:
OnX_SWIG_Python.IVisualizer_swigregister(IVisualizer)

class IFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IFunction

    def file(self):
        return OnX_SWIG_Python.IFunction_file(self)

    def model(self):
        return OnX_SWIG_Python.IFunction_model(self)

    def address(self):
        return OnX_SWIG_Python.IFunction_address(self)

    def dimension(self):
        return OnX_SWIG_Python.IFunction_dimension(self)

    def numberOfParameters(self):
        return OnX_SWIG_Python.IFunction_numberOfParameters(self)

    def value(self, *args):
        return OnX_SWIG_Python.IFunction_value(self, *args)

    def signature(self, arg2):
        return OnX_SWIG_Python.IFunction_signature(self, arg2)

# Register IFunction in OnX_SWIG_Python:
OnX_SWIG_Python.IFunction_swigregister(IFunction)

class IFunctionManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IFunctionManager

    def findFunction(self, arg2):
        return OnX_SWIG_Python.IFunctionManager_findFunction(self, arg2)

    def load(self, *args):
        return OnX_SWIG_Python.IFunctionManager_load(self, *args)

# Register IFunctionManager in OnX_SWIG_Python:
OnX_SWIG_Python.IFunctionManager_swigregister(IFunctionManager)

class IArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IArray

    def title(self):
        return OnX_SWIG_Python.IArray_title(self)

    def setTitle(self, title):
        return OnX_SWIG_Python.IArray_setTitle(self, title)

    def dimension(self):
        return OnX_SWIG_Python.IArray_dimension(self)

    def size(self):
        return OnX_SWIG_Python.IArray_size(self)

    def orders(self):
        return OnX_SWIG_Python.IArray_orders(self)

    def setValue(self, arg2, arg3):
        return OnX_SWIG_Python.IArray_setValue(self, arg2, arg3)

    def value(self, arg2, arg3):
        return OnX_SWIG_Python.IArray_value(self, arg2, arg3)

    def fill(self, arg2, arg3=None):
        return OnX_SWIG_Python.IArray_fill(self, arg2, arg3)

    def copy(self, aFrom):
        return OnX_SWIG_Python.IArray_copy(self, aFrom)

    def subtract(self, aArray):
        return OnX_SWIG_Python.IArray_subtract(self, aArray)

    def divide(self, aArray):
        return OnX_SWIG_Python.IArray_divide(self, aArray)

    def add(self, *args):
        return OnX_SWIG_Python.IArray_add(self, *args)

    def multiply(self, *args):
        return OnX_SWIG_Python.IArray_multiply(self, *args)

    def invert(self):
        return OnX_SWIG_Python.IArray_invert(self)

    def indices(self, arg2, arg3):
        return OnX_SWIG_Python.IArray_indices(self, arg2, arg3)

    def vector(self):
        return OnX_SWIG_Python.IArray_vector(self)

    def accept(self, arg2, arg3):
        return OnX_SWIG_Python.IArray_accept(self, arg2, arg3)

    def cast(self, className):
        return OnX_SWIG_Python.IArray_cast(self, className)

# Register IArray in OnX_SWIG_Python:
OnX_SWIG_Python.IArray_swigregister(IArray)

class IArrayFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IArrayFactory

    def create(self, *args):
        return OnX_SWIG_Python.IArrayFactory_create(self, *args)

    def subtract(self, *args):
        return OnX_SWIG_Python.IArrayFactory_subtract(self, *args)

    def divide(self, *args):
        return OnX_SWIG_Python.IArrayFactory_divide(self, *args)

    def add(self, *args):
        return OnX_SWIG_Python.IArrayFactory_add(self, *args)

    def multiply(self, *args):
        return OnX_SWIG_Python.IArrayFactory_multiply(self, *args)

# Register IArrayFactory in OnX_SWIG_Python:
OnX_SWIG_Python.IArrayFactory_swigregister(IArrayFactory)

class IVisualizeAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IVisualizeAction

    def execute(self, arg2, arg3):
        return OnX_SWIG_Python.IVisualizeAction_execute(self, arg2, arg3)

# Register IVisualizeAction in OnX_SWIG_Python:
OnX_SWIG_Python.IVisualizeAction_swigregister(IVisualizeAction)

class IDumpAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IDumpAction

    def execute(self, arg2, arg3):
        return OnX_SWIG_Python.IDumpAction_execute(self, arg2, arg3)

# Register IDumpAction in OnX_SWIG_Python:
OnX_SWIG_Python.IDumpAction_swigregister(IDumpAction)

class IObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IObject

    def cast(self, arg2):
        return OnX_SWIG_Python.IObject_cast(self, arg2)

    def storeClassName(self):
        return OnX_SWIG_Python.IObject_storeClassName(self)

    def name(self):
        return OnX_SWIG_Python.IObject_name(self)

    def setFolder(self, arg2):
        return OnX_SWIG_Python.IObject_setFolder(self, arg2)

    def copy(self):
        return OnX_SWIG_Python.IObject_copy(self)

    def setName(self, arg2):
        return OnX_SWIG_Python.IObject_setName(self, arg2)

    def title(self):
        return OnX_SWIG_Python.IObject_title(self)

# Register IObject in OnX_SWIG_Python:
OnX_SWIG_Python.IObject_swigregister(IObject)

class ITree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_ITree

    def cast(self, arg2):
        return OnX_SWIG_Python.ITree_cast(self, arg2)

    def storeName(self):
        return OnX_SWIG_Python.ITree_storeName(self)

    def storeType(self):
        return OnX_SWIG_Python.ITree_storeType(self)

    def manageObject(self, arg2, arg3):
        return OnX_SWIG_Python.ITree_manageObject(self, arg2, arg3)

    def emitUpdate(self):
        return OnX_SWIG_Python.ITree_emitUpdate(self)

    def isObjectValid(self, arg2):
        return OnX_SWIG_Python.ITree_isObjectValid(self, arg2)

    def findObject(self, arg2):
        return OnX_SWIG_Python.ITree_findObject(self, arg2)

    def addObject(self, arg2, arg3):
        return OnX_SWIG_Python.ITree_addObject(self, arg2, arg3)

# Register ITree in OnX_SWIG_Python:
OnX_SWIG_Python.ITree_swigregister(ITree)

class IFolder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IFolder

    def cast(self, arg2):
        return OnX_SWIG_Python.IFolder_cast(self, arg2)

    def parent(self):
        return OnX_SWIG_Python.IFolder_parent(self)

    def name(self):
        return OnX_SWIG_Python.IFolder_name(self)

    def setName(self, arg2):
        return OnX_SWIG_Python.IFolder_setName(self, arg2)

    def add(self, *args):
        return OnX_SWIG_Python.IFolder_add(self, *args)

    def remove(self, *args):
        return OnX_SWIG_Python.IFolder_remove(self, *args)

    def numberOfObjects(self):
        return OnX_SWIG_Python.IFolder_numberOfObjects(self)

    def numberOfFolders(self):
        return OnX_SWIG_Python.IFolder_numberOfFolders(self)

    def objects(self):
        return OnX_SWIG_Python.IFolder_objects(self)

    def folders(self):
        return OnX_SWIG_Python.IFolder_folders(self)

    def findInTree(self, arg2, arg3):
        return OnX_SWIG_Python.IFolder_findInTree(self, arg2, arg3)

    def findObject(self, arg2):
        return OnX_SWIG_Python.IFolder_findObject(self, arg2)

    def isValid(self, arg2):
        return OnX_SWIG_Python.IFolder_isValid(self, arg2)

    def clear(self):
        return OnX_SWIG_Python.IFolder_clear(self)

    def mkdir(self, arg2):
        return OnX_SWIG_Python.IFolder_mkdir(self, arg2)

    def findFolder(self, arg2):
        return OnX_SWIG_Python.IFolder_findFolder(self, arg2)

    def ls(self, arg2):
        return OnX_SWIG_Python.IFolder_ls(self, arg2)

    def path(self):
        return OnX_SWIG_Python.IFolder_path(self)

    def visit(self, arg2):
        return OnX_SWIG_Python.IFolder_visit(self, arg2)

    def setParent(self, arg2):
        return OnX_SWIG_Python.IFolder_setParent(self, arg2)

    def tree(self):
        return OnX_SWIG_Python.IFolder_tree(self)

    def link(self, arg2, arg3):
        return OnX_SWIG_Python.IFolder_link(self, arg2, arg3)

    def unlink(self, arg2):
        return OnX_SWIG_Python.IFolder_unlink(self, arg2)

    def linkingFolder(self):
        return OnX_SWIG_Python.IFolder_linkingFolder(self)

    def setLinkingFolder(self, arg2):
        return OnX_SWIG_Python.IFolder_setLinkingFolder(self, arg2)

    def linkingPath(self):
        return OnX_SWIG_Python.IFolder_linkingPath(self)

# Register IFolder in OnX_SWIG_Python:
OnX_SWIG_Python.IFolder_swigregister(IFolder)

class IFolderIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IFolderIterator

    def folder(self):
        return OnX_SWIG_Python.IFolderIterator_folder(self)

    def next(self):
        return OnX_SWIG_Python.IFolderIterator_next(self)

# Register IFolderIterator in OnX_SWIG_Python:
OnX_SWIG_Python.IFolderIterator_swigregister(IFolderIterator)

class IFolderVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IFolderVisitor

    def visit(self, arg2, arg3):
        return OnX_SWIG_Python.IFolderVisitor_visit(self, arg2, arg3)

    def beginVisit(self, arg2, arg3):
        return OnX_SWIG_Python.IFolderVisitor_beginVisit(self, arg2, arg3)

    def endVisit(self, arg2, arg3):
        return OnX_SWIG_Python.IFolderVisitor_endVisit(self, arg2, arg3)

    def isRecursive(self):
        return OnX_SWIG_Python.IFolderVisitor_isRecursive(self)

# Register IFolderVisitor in OnX_SWIG_Python:
OnX_SWIG_Python.IFolderVisitor_swigregister(IFolderVisitor)

class IObjectIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IObjectIterator

    def object(self):
        return OnX_SWIG_Python.IObjectIterator_object(self)

    def next(self):
        return OnX_SWIG_Python.IObjectIterator_next(self)

# Register IObjectIterator in OnX_SWIG_Python:
OnX_SWIG_Python.IObjectIterator_swigregister(IObjectIterator)

class IStoreManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IStoreManager

    def createTree(self, *args):
        return OnX_SWIG_Python.IStoreManager_createTree(self, *args)

    def createObject(self, *args):
        return OnX_SWIG_Python.IStoreManager_createObject(self, *args)

# Register IStoreManager in OnX_SWIG_Python:
OnX_SWIG_Python.IStoreManager_swigregister(IStoreManager)

class IStorable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IStorable

    def cast(self, arg2):
        return OnX_SWIG_Python.IStorable_cast(self, arg2)

    def visit(self, arg2):
        return OnX_SWIG_Python.IStorable_visit(self, arg2)

    def read(self, arg2):
        return OnX_SWIG_Python.IStorable_read(self, arg2)

# Register IStorable in OnX_SWIG_Python:
OnX_SWIG_Python.IStorable_swigregister(IStorable)

class IVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IVisitor

    def begin(self, arg2):
        return OnX_SWIG_Python.IVisitor_begin(self, arg2)

    def end(self, arg2):
        return OnX_SWIG_Python.IVisitor_end(self, arg2)

    def visit(self, *args):
        return OnX_SWIG_Python.IVisitor_visit(self, *args)

    def visit_double(self, arg2):
        return OnX_SWIG_Python.IVisitor_visit_double(self, arg2)

    def session(self):
        return OnX_SWIG_Python.IVisitor_session(self)

# Register IVisitor in OnX_SWIG_Python:
OnX_SWIG_Python.IVisitor_swigregister(IVisitor)

class IConstVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_IConstVisitor

    def begin(self, arg2, arg3, arg4):
        return OnX_SWIG_Python.IConstVisitor_begin(self, arg2, arg3, arg4)

    def end(self, arg2):
        return OnX_SWIG_Python.IConstVisitor_end(self, arg2)

    def visit_double(self, arg2, arg3):
        return OnX_SWIG_Python.IConstVisitor_visit_double(self, arg2, arg3)

    def visit(self, *args):
        return OnX_SWIG_Python.IConstVisitor_visit(self, *args)

# Register IConstVisitor in OnX_SWIG_Python:
OnX_SWIG_Python.IConstVisitor_swigregister(IConstVisitor)

class INetManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_INetManager

    def socket(self):
        return OnX_SWIG_Python.INetManager_socket(self)

# Register INetManager in OnX_SWIG_Python:
OnX_SWIG_Python.INetManager_swigregister(INetManager)

class Style(IStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set(self, aKey, aValue):
        return OnX_SWIG_Python.Style_set(self, aKey, aValue)

    def remove(self, aKey):
        return OnX_SWIG_Python.Style_remove(self, aKey)

    def value(self, aKey, aValue):
        return OnX_SWIG_Python.Style_value(self, aKey, aValue)

    def items(self):
        return OnX_SWIG_Python.Style_items(self)

    def copy(self, aFrom):
        return OnX_SWIG_Python.Style_copy(self, aFrom)

    def toString(self):
        return OnX_SWIG_Python.Style_toString(self)

    def __init__(self, *args):
        OnX_SWIG_Python.Style_swiginit(self, OnX_SWIG_Python.new_Style(*args))
    __swig_destroy__ = OnX_SWIG_Python.delete_Style

# Register Style in OnX_SWIG_Python:
OnX_SWIG_Python.Style_swigregister(Style)


def create_session(a_args = []):
  set_env(Slash_cout())
  session = Slash_create_session(a_args)
  session.loadInterpreter('Python');
  return session


def Slash_cout():
    return OnX_SWIG_Python.Slash_cout()

def Slash_cerr():
    return OnX_SWIG_Python.Slash_cerr()
class smanip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def p2sx(a_value):
        return OnX_SWIG_Python.smanip_p2sx(a_value)

    @staticmethod
    def lines(aString):
        return OnX_SWIG_Python.smanip_lines(aString)

    @staticmethod
    def torgbs(aString):
        return OnX_SWIG_Python.smanip_torgbs(aString)

    @staticmethod
    def pathNameSuffix(aPath):
        return OnX_SWIG_Python.smanip_pathNameSuffix(aPath)

    def __init__(self):
        OnX_SWIG_Python.smanip_swiginit(self, OnX_SWIG_Python.new_smanip())
    __swig_destroy__ = OnX_SWIG_Python.delete_smanip

# Register smanip in OnX_SWIG_Python:
OnX_SWIG_Python.smanip_swigregister(smanip)

def smanip_p2sx(a_value):
    return OnX_SWIG_Python.smanip_p2sx(a_value)

def smanip_lines(aString):
    return OnX_SWIG_Python.smanip_lines(aString)

def smanip_torgbs(aString):
    return OnX_SWIG_Python.smanip_torgbs(aString)

def smanip_pathNameSuffix(aPath):
    return OnX_SWIG_Python.smanip_pathNameSuffix(aPath)

class fmanip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def read(aFile):
        return OnX_SWIG_Python.fmanip_read(aFile)

    def __init__(self):
        OnX_SWIG_Python.fmanip_swiginit(self, OnX_SWIG_Python.new_fmanip())
    __swig_destroy__ = OnX_SWIG_Python.delete_fmanip

# Register fmanip in OnX_SWIG_Python:
OnX_SWIG_Python.fmanip_swigregister(fmanip)

def fmanip_read(aFile):
    return OnX_SWIG_Python.fmanip_read(aFile)


def OnX_cast_ISession(aString):
    return OnX_SWIG_Python.OnX_cast_ISession(aString)

def OnX_p2sx(a_value):
    return OnX_SWIG_Python.OnX_p2sx(a_value)

def set_env(a_out):
    return OnX_SWIG_Python.set_env(a_out)

def set_PyOS_InputHook(aUI):
    return OnX_SWIG_Python.set_PyOS_InputHook(aUI)

def reset_PyOS_InputHook():
    return OnX_SWIG_Python.reset_PyOS_InputHook()

# print('debug : OnX_SWIG_OnX.i')

def sys_import(aModule):
  import sys
  if sys.modules.has_key(aModule):
    reload(sys.modules[aModule])
  else:
    exec('import %s' % aModule)

# WARNING : take care of having defined no "x" variable before the below ; else
#           a OnX.x('<module>') will not call the below !
def x(aModule): # very short cut.
  sys_import(aModule)

def xn(aModule,aCount):
  import OnX
  for i in range(0,aCount):
    OnX.x(aModule)

def import_py(a_dir,a_name):
  comment = 0 # Example : OnX.import_py('$ONXROOT/examples/Python','OnX_exa_detector')
  if fmanip.exists(a_name+'.pyc') == 0 : 
    comment = 0 # Have a local copy of the .py file. 
    comment = 0 # Else the .pyc may be attempted to be created on a 
    comment = 0 # non-writable area (for example the one of the release area).
    if fmanip.exists(a_name+'.py') == 0 : 
      if fmanip.exists(a_dir+'/'+a_name+'.py') == 0 : 
        print('File '+a_dir+'/'+a_name+'.py does not exist.')
        return
      else :
        import compiler
        if fmanip.copy(fmanip.name(a_dir+'/'+a_name+'.py'),'.') == 0 :
          print('Copy of file '+a_dir+'/'+a_name+'.py failed.')
          return
        compiler.compileFile(a_name+'.py')
        fmanip.remove(a_name+'.py')
    else :
      import compiler
      compiler.compileFile(a_name+'.py')
  sys.path.append('') # THE trick to load from current directory.
  sys_import(a_name)
  del sys.path[-1]

def x_exa(a_name):
  import_py('$ONXROOT/examples/Python',a_name)

def dumpMain():
  import sys
  print(dir(sys.modules['__main__']))

def exists(name):
  try:
    eval(name)
    return 1
  except NameError:
    return 0

def sys2onx():
  comment = 0 # Use this function to redirect properly the output to the "UI console".  
  comment = 0 # On some platform (Darwin,Windows), if the OnX::Session redirect 
  comment = 0 # std[out,err] to session.printer (by using the OnX::Session::stdoutToOnX()
  comment = 0 # method), the Python output does not follow. Doing a :
  comment = 0 #   import OnX;OnX.sys2onx() 
  comment = 0 # on a callback, redirect the Python output properly.
  import sys
  sys.stdout = session().printer() 
  sys.stderr = session().printer()

def save2sys():
  import sys
  sys.stdout = onx_stdout_save
  sys.stderr = onx_stderr_save

# Lonely actions done in this module.
import sys
onx_stderr_save = sys.stderr
onx_stdout_save = sys.stdout

def session():
  import sys
  try:
    import OnX_PythonManager # could fail if the OnX Python driver not loaded.
    comment = 0 # The below could fail even if the OnX_PythonManager module exists.
    comment = 0 # This happens when OnX is deleted. This induces the
    comment = 0 # destruction of the OnX::PythonManager
    comment = 0 # that will remove the "sessionPointer" function from
    comment = 0 # the OnX_PythonManager module dictionary.
    string_session = OnX_PythonManager.sessionPointer()
    comment = 0 # print(string_session)
    return OnX_cast_ISession(string_session)
  except: # case of OnX having not yet loaded the Python interpreter.
    return None

def ui_parameterValue(aWhat):
  comment = 0 # Used by palettes that uses Python on their ok callback.
  comment = 0 # See : OnX::BaseUI::createInputDialog(
  return session().ui().parameterValue(aWhat)


class charp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.charp_swiginit(self, OnX_SWIG_Python.new_charp())
    __swig_destroy__ = OnX_SWIG_Python.delete_charp

    def assign(self, value):
        return OnX_SWIG_Python.charp_assign(self, value)

    def value(self):
        return OnX_SWIG_Python.charp_value(self)

    def cast(self):
        return OnX_SWIG_Python.charp_cast(self)

    @staticmethod
    def frompointer(t):
        return OnX_SWIG_Python.charp_frompointer(t)

# Register charp in OnX_SWIG_Python:
OnX_SWIG_Python.charp_swigregister(charp)
cast = OnX_SWIG_Python.cast

def charp_frompointer(t):
    return OnX_SWIG_Python.charp_frompointer(t)

class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.intp_swiginit(self, OnX_SWIG_Python.new_intp())
    __swig_destroy__ = OnX_SWIG_Python.delete_intp

    def assign(self, value):
        return OnX_SWIG_Python.intp_assign(self, value)

    def value(self):
        return OnX_SWIG_Python.intp_value(self)

    def cast(self):
        return OnX_SWIG_Python.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return OnX_SWIG_Python.intp_frompointer(t)

# Register intp in OnX_SWIG_Python:
OnX_SWIG_Python.intp_swigregister(intp)

def intp_frompointer(t):
    return OnX_SWIG_Python.intp_frompointer(t)

class longp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.longp_swiginit(self, OnX_SWIG_Python.new_longp())
    __swig_destroy__ = OnX_SWIG_Python.delete_longp

    def assign(self, value):
        return OnX_SWIG_Python.longp_assign(self, value)

    def value(self):
        return OnX_SWIG_Python.longp_value(self)

    def cast(self):
        return OnX_SWIG_Python.longp_cast(self)

    @staticmethod
    def frompointer(t):
        return OnX_SWIG_Python.longp_frompointer(t)

# Register longp in OnX_SWIG_Python:
OnX_SWIG_Python.longp_swigregister(longp)

def longp_frompointer(t):
    return OnX_SWIG_Python.longp_frompointer(t)

class floatp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.floatp_swiginit(self, OnX_SWIG_Python.new_floatp())
    __swig_destroy__ = OnX_SWIG_Python.delete_floatp

    def assign(self, value):
        return OnX_SWIG_Python.floatp_assign(self, value)

    def value(self):
        return OnX_SWIG_Python.floatp_value(self)

    def cast(self):
        return OnX_SWIG_Python.floatp_cast(self)

    @staticmethod
    def frompointer(t):
        return OnX_SWIG_Python.floatp_frompointer(t)

# Register floatp in OnX_SWIG_Python:
OnX_SWIG_Python.floatp_swigregister(floatp)

def floatp_frompointer(t):
    return OnX_SWIG_Python.floatp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.doublep_swiginit(self, OnX_SWIG_Python.new_doublep())
    __swig_destroy__ = OnX_SWIG_Python.delete_doublep

    def assign(self, value):
        return OnX_SWIG_Python.doublep_assign(self, value)

    def value(self):
        return OnX_SWIG_Python.doublep_value(self)

    def cast(self):
        return OnX_SWIG_Python.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return OnX_SWIG_Python.doublep_frompointer(t)

# Register doublep in OnX_SWIG_Python:
OnX_SWIG_Python.doublep_swigregister(doublep)

def doublep_frompointer(t):
    return OnX_SWIG_Python.doublep_frompointer(t)

FALSE = OnX_SWIG_Python.FALSE
TRUE = OnX_SWIG_Python.TRUE
HAVE_INTTYPES_H = OnX_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = OnX_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = OnX_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = OnX_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = OnX_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = OnX_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = OnX_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = OnX_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = OnX_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = OnX_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = OnX_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = OnX_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = OnX_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = OnX_SWIG_Python.HAVE_UINTPTR_T
M_E = OnX_SWIG_Python.M_E
M_LOG2E = OnX_SWIG_Python.M_LOG2E
M_LOG10E = OnX_SWIG_Python.M_LOG10E
M_LN2 = OnX_SWIG_Python.M_LN2
M_LN10 = OnX_SWIG_Python.M_LN10
M_PI = OnX_SWIG_Python.M_PI
M_TWOPI = OnX_SWIG_Python.M_TWOPI
M_PI_2 = OnX_SWIG_Python.M_PI_2
M_PI_4 = OnX_SWIG_Python.M_PI_4
M_3PI_4 = OnX_SWIG_Python.M_3PI_4
M_SQRTPI = OnX_SWIG_Python.M_SQRTPI
M_1_PI = OnX_SWIG_Python.M_1_PI
M_2_PI = OnX_SWIG_Python.M_2_PI
M_2_SQRTPI = OnX_SWIG_Python.M_2_SQRTPI
M_SQRT2 = OnX_SWIG_Python.M_SQRT2
M_SQRT1_2 = OnX_SWIG_Python.M_SQRT1_2
M_LN2LO = OnX_SWIG_Python.M_LN2LO
M_LN2HI = OnX_SWIG_Python.M_LN2HI
M_SQRT3 = OnX_SWIG_Python.M_SQRT3
M_IVLN10 = OnX_SWIG_Python.M_IVLN10
M_LOG2_E = OnX_SWIG_Python.M_LOG2_E
M_INVLN2 = OnX_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = OnX_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = OnX_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = OnX_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = OnX_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = OnX_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = OnX_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        OnX_SWIG_Python.SbDict_swiginit(self, OnX_SWIG_Python.new_SbDict(*args))
    __swig_destroy__ = OnX_SWIG_Python.delete_SbDict

    def applyToAll(self, *args):
        return OnX_SWIG_Python.SbDict_applyToAll(self, *args)

    def clear(self):
        return OnX_SWIG_Python.SbDict_clear(self)

    def enter(self, key, value):
        return OnX_SWIG_Python.SbDict_enter(self, key, value)

    def find(self, key, value):
        return OnX_SWIG_Python.SbDict_find(self, key, value)

    def makePList(self, keys, values):
        return OnX_SWIG_Python.SbDict_makePList(self, keys, values)

    def remove(self, key):
        return OnX_SWIG_Python.SbDict_remove(self, key)

    def setHashingFunction(self, func):
        return OnX_SWIG_Python.SbDict_setHashingFunction(self, func)

# Register SbDict in OnX_SWIG_Python:
OnX_SWIG_Python.SbDict_swigregister(SbDict)

class SoType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromName(name):
        return OnX_SWIG_Python.SoType_fromName(name)

    def getName(self):
        return OnX_SWIG_Python.SoType_getName(self)

    def getParent(self):
        return OnX_SWIG_Python.SoType_getParent(self)

    def isDerivedFrom(self, type):
        return OnX_SWIG_Python.SoType_isDerivedFrom(self, type)

    @staticmethod
    def getAllDerivedFrom(type, list):
        return OnX_SWIG_Python.SoType_getAllDerivedFrom(type, list)

    def canCreateInstance(self):
        return OnX_SWIG_Python.SoType_canCreateInstance(self)

    def getData(self):
        return OnX_SWIG_Python.SoType_getData(self)

    def getKey(self):
        return OnX_SWIG_Python.SoType_getKey(self)

    def __eq__(self, type):
        return OnX_SWIG_Python.SoType___eq__(self, type)

    def __ne__(self, type):
        return OnX_SWIG_Python.SoType___ne__(self, type)

    def __lt__(self, type):
        return OnX_SWIG_Python.SoType___lt__(self, type)

    def __le__(self, type):
        return OnX_SWIG_Python.SoType___le__(self, type)

    def __ge__(self, type):
        return OnX_SWIG_Python.SoType___ge__(self, type)

    def __gt__(self, type):
        return OnX_SWIG_Python.SoType___gt__(self, type)

    @staticmethod
    def init():
        return OnX_SWIG_Python.SoType_init()

    @staticmethod
    def fromKey(key):
        return OnX_SWIG_Python.SoType_fromKey(key)

    @staticmethod
    def badType():
        return OnX_SWIG_Python.SoType_badType()

    def isBad(self):
        return OnX_SWIG_Python.SoType_isBad(self)

    def makeInternal(self):
        return OnX_SWIG_Python.SoType_makeInternal(self)

    def isInternal(self):
        return OnX_SWIG_Python.SoType_isInternal(self)

    @staticmethod
    def getNumTypes():
        return OnX_SWIG_Python.SoType_getNumTypes()

    def getInstantiationMethod(self):
        return OnX_SWIG_Python.SoType_getInstantiationMethod(self)

    def createInstance(self):
        return OnX_SWIG_Python.SoType_createInstance(self)

    def __init__(self):
        OnX_SWIG_Python.SoType_swiginit(self, OnX_SWIG_Python.new_SoType())
    __swig_destroy__ = OnX_SWIG_Python.delete_SoType

# Register SoType in OnX_SWIG_Python:
OnX_SWIG_Python.SoType_swigregister(SoType)

def SoType_fromName(name):
    return OnX_SWIG_Python.SoType_fromName(name)

def SoType_getAllDerivedFrom(type, list):
    return OnX_SWIG_Python.SoType_getAllDerivedFrom(type, list)

def SoType_init():
    return OnX_SWIG_Python.SoType_init()

def SoType_fromKey(key):
    return OnX_SWIG_Python.SoType_fromKey(key)

def SoType_badType():
    return OnX_SWIG_Python.SoType_badType()

def SoType_getNumTypes():
    return OnX_SWIG_Python.SoType_getNumTypes()

class SbVec2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        OnX_SWIG_Python.SbVec2s_swiginit(self, OnX_SWIG_Python.new_SbVec2s(*args))

    def dot(self, v):
        return OnX_SWIG_Python.SbVec2s_dot(self, v)

    def getValue(self):
        return OnX_SWIG_Python.SbVec2s_getValue(self)

    def negate(self):
        return OnX_SWIG_Python.SbVec2s_negate(self)

    def setValue(self, *args):
        return OnX_SWIG_Python.SbVec2s_setValue(self, *args)

    def __imul__(self, *args):
        return OnX_SWIG_Python.SbVec2s___imul__(self, *args)

    def __itruediv__(self, *args):
        return OnX_SWIG_Python.SbVec2s___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, u):
        return OnX_SWIG_Python.SbVec2s___iadd__(self, u)

    def __isub__(self, u):
        return OnX_SWIG_Python.SbVec2s___isub__(self, u)

    def __neg__(self):
        return OnX_SWIG_Python.SbVec2s___neg__(self)

    def output(self, fp):
        return OnX_SWIG_Python.SbVec2s_output(self, fp)

    def __add__(self, u):
        return OnX_SWIG_Python.SbVec2s___add__(self, u)

    def __sub__(self, u):
        return OnX_SWIG_Python.SbVec2s___sub__(self, u)

    def __mul__(self, d):
        return OnX_SWIG_Python.SbVec2s___mul__(self, d)

    def __rmul__(self, d):
        return OnX_SWIG_Python.SbVec2s___rmul__(self, d)

    def __div__(self, d):
        return OnX_SWIG_Python.SbVec2s___div__(self, d)

    def __eq__(self, u):
        return OnX_SWIG_Python.SbVec2s___eq__(self, u)

    def __nq__(self, u):
        return OnX_SWIG_Python.SbVec2s___nq__(self, u)

    def __getitem__(self, i):
        return OnX_SWIG_Python.SbVec2s___getitem__(self, i)

    def __setitem__(self, i, value):
        return OnX_SWIG_Python.SbVec2s___setitem__(self, i, value)
    __swig_destroy__ = OnX_SWIG_Python.delete_SbVec2s

# Register SbVec2s in OnX_SWIG_Python:
OnX_SWIG_Python.SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        OnX_SWIG_Python.SbPList_swiginit(self, OnX_SWIG_Python.new_SbPList(*args))
    __swig_destroy__ = OnX_SWIG_Python.delete_SbPList

    def copy(self, l):
        return OnX_SWIG_Python.SbPList_copy(self, l)

    def fit(self):
        return OnX_SWIG_Python.SbPList_fit(self)

    def append(self, item):
        return OnX_SWIG_Python.SbPList_append(self, item)

    def find(self, item):
        return OnX_SWIG_Python.SbPList_find(self, item)

    def insert(self, item, insertbefore):
        return OnX_SWIG_Python.SbPList_insert(self, item, insertbefore)

    def removeItem(self, item):
        return OnX_SWIG_Python.SbPList_removeItem(self, item)

    def remove(self, index):
        return OnX_SWIG_Python.SbPList_remove(self, index)

    def removeFast(self, index):
        return OnX_SWIG_Python.SbPList_removeFast(self, index)

    def getLength(self):
        return OnX_SWIG_Python.SbPList_getLength(self)

    def truncate(self, length, fit=0):
        return OnX_SWIG_Python.SbPList_truncate(self, length, fit)

    def getArrayPtr(self, start=0):
        return OnX_SWIG_Python.SbPList_getArrayPtr(self, start)

    def __eq__(self, l):
        return OnX_SWIG_Python.SbPList___eq__(self, l)

    def __ne__(self, l):
        return OnX_SWIG_Python.SbPList___ne__(self, l)

    def get(self, index):
        return OnX_SWIG_Python.SbPList_get(self, index)

    def set(self, index, item):
        return OnX_SWIG_Python.SbPList_set(self, index, item)

    def __getitem__(self, i):
        return OnX_SWIG_Python.SbPList___getitem__(self, i)

    def __setitem__(self, i, val):
        return OnX_SWIG_Python.SbPList___setitem__(self, i, val)

    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]


# Register SbPList in OnX_SWIG_Python:
OnX_SWIG_Python.SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        OnX_SWIG_Python.SbIntList_swiginit(self, OnX_SWIG_Python.new_SbIntList(*args))

    def append(self, item):
        return OnX_SWIG_Python.SbIntList_append(self, item)

    def find(self, item):
        return OnX_SWIG_Python.SbIntList_find(self, item)

    def insert(self, item, addbefore):
        return OnX_SWIG_Python.SbIntList_insert(self, item, addbefore)

    def __setitem__(self, i, value):
        return OnX_SWIG_Python.SbIntList___setitem__(self, i, value)

    def __getitem__(self, i):
        return OnX_SWIG_Python.SbIntList___getitem__(self, i)

    def get(self, i):
        return OnX_SWIG_Python.SbIntList_get(self, i)
    __swig_destroy__ = OnX_SWIG_Python.delete_SbIntList

# Register SbIntList in OnX_SWIG_Python:
OnX_SWIG_Python.SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        OnX_SWIG_Python.SbString_swiginit(self, OnX_SWIG_Python.new_SbString(*args))
    __swig_destroy__ = OnX_SWIG_Python.delete_SbString

    @staticmethod
    def hash(*args):
        return OnX_SWIG_Python.SbString_hash(*args)

    def getLength(self):
        return OnX_SWIG_Python.SbString_getLength(self)

    def makeEmpty(self, freeold=1):
        return OnX_SWIG_Python.SbString_makeEmpty(self, freeold)

    def getString(self):
        return OnX_SWIG_Python.SbString_getString(self)

    def getSubString(self, startidx, endidx=-1):
        return OnX_SWIG_Python.SbString_getSubString(self, startidx, endidx)

    def deleteSubString(self, startidx, endidx=-1):
        return OnX_SWIG_Python.SbString_deleteSubString(self, startidx, endidx)

    def addIntString(self, value):
        return OnX_SWIG_Python.SbString_addIntString(self, value)

    def __iadd__(self, *args):
        return OnX_SWIG_Python.SbString___iadd__(self, *args)

    def compareSubString(self, text, offset=0):
        return OnX_SWIG_Python.SbString_compareSubString(self, text, offset)

    def sprintf(self, formatstr):
        return OnX_SWIG_Python.SbString_sprintf(self, formatstr)

    def apply(self, func):
        return OnX_SWIG_Python.SbString_apply(self, func)

    def find(self, s):
        return OnX_SWIG_Python.SbString_find(self, s)

    def findAll(self, s, found):
        return OnX_SWIG_Python.SbString_findAll(self, s, found)

    def __eq__(self, *args):
        return OnX_SWIG_Python.SbString___eq__(self, *args)

    def __nq__(self, *args):
        return OnX_SWIG_Python.SbString___nq__(self, *args)

    def __getitem__(self, i):
        return OnX_SWIG_Python.SbString___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return OnX_SWIG_Python.SbString___repr__(self)

# Register SbString in OnX_SWIG_Python:
OnX_SWIG_Python.SbString_swigregister(SbString)

def SbString_hash(*args):
    return OnX_SWIG_Python.SbString_hash(*args)

class SbName(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        OnX_SWIG_Python.SbName_swiginit(self, OnX_SWIG_Python.new_SbName(*args))
    __swig_destroy__ = OnX_SWIG_Python.delete_SbName

    def getString(self):
        return OnX_SWIG_Python.SbName_getString(self)

    def getLength(self):
        return OnX_SWIG_Python.SbName_getLength(self)

    @staticmethod
    def isIdentStartChar(c):
        return OnX_SWIG_Python.SbName_isIdentStartChar(c)

    @staticmethod
    def isIdentChar(c):
        return OnX_SWIG_Python.SbName_isIdentChar(c)

    @staticmethod
    def isBaseNameStartChar(c):
        return OnX_SWIG_Python.SbName_isBaseNameStartChar(c)

    @staticmethod
    def isBaseNameChar(c):
        return OnX_SWIG_Python.SbName_isBaseNameChar(c)

    def __eq__(self, *args):
        return OnX_SWIG_Python.SbName___eq__(self, *args)

    def __nq__(self, *args):
        return OnX_SWIG_Python.SbName___nq__(self, *args)

    def __getitem__(self, i):
        return OnX_SWIG_Python.SbName___getitem__(self, i)

    def __iter__(self):
      return getString().__iter__()


    def __repr__(self):
        return OnX_SWIG_Python.SbName___repr__(self)

# Register SbName in OnX_SWIG_Python:
OnX_SWIG_Python.SbName_swigregister(SbName)

def SbName_isIdentStartChar(c):
    return OnX_SWIG_Python.SbName_isIdentStartChar(c)

def SbName_isIdentChar(c):
    return OnX_SWIG_Python.SbName_isIdentChar(c)

def SbName_isBaseNameStartChar(c):
    return OnX_SWIG_Python.SbName_isBaseNameStartChar(c)

def SbName_isBaseNameChar(c):
    return OnX_SWIG_Python.SbName_isBaseNameChar(c)

class SbTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        OnX_SWIG_Python.SbTime_swiginit(self, OnX_SWIG_Python.new_SbTime(*args))

    @staticmethod
    def getTimeOfDay():
        return OnX_SWIG_Python.SbTime_getTimeOfDay()

    def setToTimeOfDay(self):
        return OnX_SWIG_Python.SbTime_setToTimeOfDay(self)

    @staticmethod
    def zero():
        return OnX_SWIG_Python.SbTime_zero()

    @staticmethod
    def max():
        return OnX_SWIG_Python.SbTime_max()

    @staticmethod
    def maxTime():
        return OnX_SWIG_Python.SbTime_maxTime()

    def setValue(self, *args):
        return OnX_SWIG_Python.SbTime_setValue(self, *args)

    def setMsecValue(self, msec):
        return OnX_SWIG_Python.SbTime_setMsecValue(self, msec)

    def getValue(self, *args):
        return OnX_SWIG_Python.SbTime_getValue(self, *args)

    def getMsecValue(self):
        return OnX_SWIG_Python.SbTime_getMsecValue(self)

    def format(self, *args):
        return OnX_SWIG_Python.SbTime_format(self, *args)

    def formatDate(self, fmt=None):
        return OnX_SWIG_Python.SbTime_formatDate(self, fmt)

    def parsedate(self, date):
        return OnX_SWIG_Python.SbTime_parsedate(self, date)

    def __iadd__(self, tm):
        return OnX_SWIG_Python.SbTime___iadd__(self, tm)

    def __isub__(self, tm):
        return OnX_SWIG_Python.SbTime___isub__(self, tm)

    def __neg__(self):
        return OnX_SWIG_Python.SbTime___neg__(self)

    def __imul__(self, s):
        return OnX_SWIG_Python.SbTime___imul__(self, s)

    def __itruediv__(self, *args):
        return OnX_SWIG_Python.SbTime___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return OnX_SWIG_Python.SbTime___truediv__(self, *args)
    __div__ = __truediv__



    def __mod__(self, tm):
        return OnX_SWIG_Python.SbTime___mod__(self, tm)

    def __eq__(self, tm):
        return OnX_SWIG_Python.SbTime___eq__(self, tm)

    def __ne__(self, tm):
        return OnX_SWIG_Python.SbTime___ne__(self, tm)

    def __lt__(self, tm):
        return OnX_SWIG_Python.SbTime___lt__(self, tm)

    def __gt__(self, tm):
        return OnX_SWIG_Python.SbTime___gt__(self, tm)

    def __le__(self, tm):
        return OnX_SWIG_Python.SbTime___le__(self, tm)

    def __ge__(self, tm):
        return OnX_SWIG_Python.SbTime___ge__(self, tm)

    def output(self, fp):
        return OnX_SWIG_Python.SbTime_output(self, fp)

    def __add__(self, u):
        return OnX_SWIG_Python.SbTime___add__(self, u)

    def __sub__(self, u):
        return OnX_SWIG_Python.SbTime___sub__(self, u)

    def __mul__(self, d):
        return OnX_SWIG_Python.SbTime___mul__(self, d)

    def __rmul__(self, d):
        return OnX_SWIG_Python.SbTime___rmul__(self, d)

    def __div__(self, d):
        return OnX_SWIG_Python.SbTime___div__(self, d)
    __swig_destroy__ = OnX_SWIG_Python.delete_SbTime

# Register SbTime in OnX_SWIG_Python:
OnX_SWIG_Python.SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay():
    return OnX_SWIG_Python.SbTime_getTimeOfDay()

def SbTime_zero():
    return OnX_SWIG_Python.SbTime_zero()

def SbTime_max():
    return OnX_SWIG_Python.SbTime_max()

def SbTime_maxTime():
    return OnX_SWIG_Python.SbTime_maxTime()

class SoEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.SoEvent_swiginit(self, OnX_SWIG_Python.new_SoEvent())
    __swig_destroy__ = OnX_SWIG_Python.delete_SoEvent

    def isOfType(self, type):
        return OnX_SWIG_Python.SoEvent_isOfType(self, type)

    @staticmethod
    def getClassTypeId():
        return OnX_SWIG_Python.SoEvent_getClassTypeId()

    def getTypeId(self):
        return OnX_SWIG_Python.SoEvent_getTypeId(self)

    def setTime(self, t):
        return OnX_SWIG_Python.SoEvent_setTime(self, t)

    def getTime(self):
        return OnX_SWIG_Python.SoEvent_getTime(self)

    def setPosition(self, p):
        return OnX_SWIG_Python.SoEvent_setPosition(self, p)

    def getPosition(self, *args):
        return OnX_SWIG_Python.SoEvent_getPosition(self, *args)

    def getNormalizedPosition(self, vpRgn):
        return OnX_SWIG_Python.SoEvent_getNormalizedPosition(self, vpRgn)

    def setShiftDown(self, isDown):
        return OnX_SWIG_Python.SoEvent_setShiftDown(self, isDown)

    def wasShiftDown(self):
        return OnX_SWIG_Python.SoEvent_wasShiftDown(self)

    def setCtrlDown(self, isDown):
        return OnX_SWIG_Python.SoEvent_setCtrlDown(self, isDown)

    def wasCtrlDown(self):
        return OnX_SWIG_Python.SoEvent_wasCtrlDown(self)

    def setAltDown(self, isDown):
        return OnX_SWIG_Python.SoEvent_setAltDown(self, isDown)

    def wasAltDown(self):
        return OnX_SWIG_Python.SoEvent_wasAltDown(self)

    @staticmethod
    def initClass():
        return OnX_SWIG_Python.SoEvent_initClass()

# Register SoEvent in OnX_SWIG_Python:
OnX_SWIG_Python.SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId():
    return OnX_SWIG_Python.SoEvent_getClassTypeId()

def SoEvent_initClass():
    return OnX_SWIG_Python.SoEvent_initClass()

class SoNotRec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONTAINER = OnX_SWIG_Python.SoNotRec_CONTAINER
    PARENT = OnX_SWIG_Python.SoNotRec_PARENT
    SENSOR = OnX_SWIG_Python.SoNotRec_SENSOR
    FIELD = OnX_SWIG_Python.SoNotRec_FIELD
    ENGINE = OnX_SWIG_Python.SoNotRec_ENGINE

    def __init__(self, notifbase):
        OnX_SWIG_Python.SoNotRec_swiginit(self, OnX_SWIG_Python.new_SoNotRec(notifbase))

    def setType(self, type):
        return OnX_SWIG_Python.SoNotRec_setType(self, type)

    def getBase(self):
        return OnX_SWIG_Python.SoNotRec_getBase(self)

    def getType(self):
        return OnX_SWIG_Python.SoNotRec_getType(self)

    def getPrevious(self):
        return OnX_SWIG_Python.SoNotRec_getPrevious(self)

    def setPrevious(self, prev):
        return OnX_SWIG_Python.SoNotRec_setPrevious(self, prev)

    def output(self, file):
        return OnX_SWIG_Python.SoNotRec_output(self, file)
    __swig_destroy__ = OnX_SWIG_Python.delete_SoNotRec

# Register SoNotRec in OnX_SWIG_Python:
OnX_SWIG_Python.SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        OnX_SWIG_Python.SoNotList_swiginit(self, OnX_SWIG_Python.new_SoNotList(*args))

    def append(self, *args):
        return OnX_SWIG_Python.SoNotList_append(self, *args)

    def setLastType(self, type):
        return OnX_SWIG_Python.SoNotList_setLastType(self, type)

    def getFirstRec(self):
        return OnX_SWIG_Python.SoNotList_getFirstRec(self)

    def getLastRec(self):
        return OnX_SWIG_Python.SoNotList_getLastRec(self)

    def getFirstRecAtNode(self):
        return OnX_SWIG_Python.SoNotList_getFirstRecAtNode(self)

    def getLastField(self):
        return OnX_SWIG_Python.SoNotList_getLastField(self)

    def getLastEngineOutput(self):
        return OnX_SWIG_Python.SoNotList_getLastEngineOutput(self)

    def getTimeStamp(self):
        return OnX_SWIG_Python.SoNotList_getTimeStamp(self)

    def output(self, *args):
        return OnX_SWIG_Python.SoNotList_output(self, *args)
    __swig_destroy__ = OnX_SWIG_Python.delete_SoNotList

# Register SoNotList in OnX_SWIG_Python:
OnX_SWIG_Python.SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_SoField

    @staticmethod
    def initClass():
        return OnX_SWIG_Python.SoField_initClass()

    @staticmethod
    def initClasses():
        return OnX_SWIG_Python.SoField_initClasses()

    def setIgnored(self, ignore):
        return OnX_SWIG_Python.SoField_setIgnored(self, ignore)

    def isIgnored(self):
        return OnX_SWIG_Python.SoField_isIgnored(self)

    def setDefault(self, _def):
        return OnX_SWIG_Python.SoField_setDefault(self, _def)

    def isDefault(self):
        return OnX_SWIG_Python.SoField_isDefault(self)

    def getTypeId(self):
        return OnX_SWIG_Python.SoField_getTypeId(self)

    @staticmethod
    def getClassTypeId():
        return OnX_SWIG_Python.SoField_getClassTypeId()

    def isOfType(self, type):
        return OnX_SWIG_Python.SoField_isOfType(self, type)

    def enableConnection(self, flag):
        return OnX_SWIG_Python.SoField_enableConnection(self, flag)

    def isConnectionEnabled(self):
        return OnX_SWIG_Python.SoField_isConnectionEnabled(self)

    def isConnectedFromEngine(self):
        return OnX_SWIG_Python.SoField_isConnectedFromEngine(self)

    def getConnectedEngine(self, master):
        return OnX_SWIG_Python.SoField_getConnectedEngine(self, master)

    def connectFrom(self, *args):
        return OnX_SWIG_Python.SoField_connectFrom(self, *args)

    def appendConnection(self, *args):
        return OnX_SWIG_Python.SoField_appendConnection(self, *args)

    def isConnectedFromField(self):
        return OnX_SWIG_Python.SoField_isConnectedFromField(self)

    def getConnectedField(self, master):
        return OnX_SWIG_Python.SoField_getConnectedField(self, master)

    def getNumConnections(self):
        return OnX_SWIG_Python.SoField_getNumConnections(self)

    def getForwardConnections(self, slavelist):
        return OnX_SWIG_Python.SoField_getForwardConnections(self, slavelist)

    def getConnections(self, masterlist):
        return OnX_SWIG_Python.SoField_getConnections(self, masterlist)

    def disconnect(self, *args):
        return OnX_SWIG_Python.SoField_disconnect(self, *args)

    def isConnected(self):
        return OnX_SWIG_Python.SoField_isConnected(self)

    def setContainer(self, cont):
        return OnX_SWIG_Python.SoField_setContainer(self, cont)

    def getContainer(self):
        return OnX_SWIG_Python.SoField_getContainer(self)

    def set(self, valuestring):
        return OnX_SWIG_Python.SoField_set(self, valuestring)

    def shouldWrite(self):
        return OnX_SWIG_Python.SoField_shouldWrite(self)

    def touch(self):
        return OnX_SWIG_Python.SoField_touch(self)

    def startNotify(self):
        return OnX_SWIG_Python.SoField_startNotify(self)

    def notify(self, nlist):
        return OnX_SWIG_Python.SoField_notify(self, nlist)

    def enableNotify(self, on):
        return OnX_SWIG_Python.SoField_enableNotify(self, on)

    def isNotifyEnabled(self):
        return OnX_SWIG_Python.SoField_isNotifyEnabled(self)

    def addAuditor(self, f, type):
        return OnX_SWIG_Python.SoField_addAuditor(self, f, type)

    def removeAuditor(self, f, type):
        return OnX_SWIG_Python.SoField_removeAuditor(self, f, type)

    def __eq__(self, f):
        return OnX_SWIG_Python.SoField___eq__(self, f)

    def __ne__(self, f):
        return OnX_SWIG_Python.SoField___ne__(self, f)

    def connectionStatusChanged(self, numconnections):
        return OnX_SWIG_Python.SoField_connectionStatusChanged(self, numconnections)

    def isReadOnly(self):
        return OnX_SWIG_Python.SoField_isReadOnly(self)

    def isSame(self, f):
        return OnX_SWIG_Python.SoField_isSame(self, f)

    def copyFrom(self, f):
        return OnX_SWIG_Python.SoField_copyFrom(self, f)

    def fixCopy(self, copyconnections):
        return OnX_SWIG_Python.SoField_fixCopy(self, copyconnections)

    def referencesCopy(self):
        return OnX_SWIG_Python.SoField_referencesCopy(self)

    def copyConnection(self, fromfield):
        return OnX_SWIG_Python.SoField_copyConnection(self, fromfield)

    def read(self, _in, name):
        return OnX_SWIG_Python.SoField_read(self, _in, name)

    def write(self, out, name):
        return OnX_SWIG_Python.SoField_write(self, out, name)

    def countWriteRefs(self, out):
        return OnX_SWIG_Python.SoField_countWriteRefs(self, out)
    NORMAL_FIELD = OnX_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = OnX_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = OnX_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = OnX_SWIG_Python.SoField_EXPOSED_FIELD

    def setFieldType(self, type):
        return OnX_SWIG_Python.SoField_setFieldType(self, type)

    def getFieldType(self):
        return OnX_SWIG_Python.SoField_getFieldType(self)

    def getDirty(self):
        return OnX_SWIG_Python.SoField_getDirty(self)

    def setDirty(self, dirty):
        return OnX_SWIG_Python.SoField_setDirty(self, dirty)

    def evaluate(self):
        return OnX_SWIG_Python.SoField_evaluate(self)

    def get(self):
        return OnX_SWIG_Python.SoField_get(self)

# Register SoField in OnX_SWIG_Python:
OnX_SWIG_Python.SoField_swigregister(SoField)

def SoField_initClass():
    return OnX_SWIG_Python.SoField_initClass()

def SoField_initClasses():
    return OnX_SWIG_Python.SoField_initClasses()

def SoField_getClassTypeId():
    return OnX_SWIG_Python.SoField_getClassTypeId()

class SoSField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_SoSField

    @staticmethod
    def initClass():
        return OnX_SWIG_Python.SoSField_initClass()

    @staticmethod
    def getClassTypeId():
        return OnX_SWIG_Python.SoSField_getClassTypeId()

# Register SoSField in OnX_SWIG_Python:
OnX_SWIG_Python.SoSField_swigregister(SoSField)

def SoSField_initClass():
    return OnX_SWIG_Python.SoSField_initClass()

def SoSField_getClassTypeId():
    return OnX_SWIG_Python.SoSField_getClassTypeId()

class SoMField(SoField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = OnX_SWIG_Python.delete_SoMField

    @staticmethod
    def getClassTypeId():
        return OnX_SWIG_Python.SoMField_getClassTypeId()

    def getNum(self):
        return OnX_SWIG_Python.SoMField_getNum(self)

    def setNum(self, num):
        return OnX_SWIG_Python.SoMField_setNum(self, num)

    def deleteValues(self, start, num=-1):
        return OnX_SWIG_Python.SoMField_deleteValues(self, start, num)

    def insertSpace(self, start, num):
        return OnX_SWIG_Python.SoMField_insertSpace(self, start, num)

    def set1(self, index, valuestring):
        return OnX_SWIG_Python.SoMField_set1(self, index, valuestring)

    def get1(self, index, valuestring):
        return OnX_SWIG_Python.SoMField_get1(self, index, valuestring)

    @staticmethod
    def initClass():
        return OnX_SWIG_Python.SoMField_initClass()

    def enableDeleteValues(self):
        return OnX_SWIG_Python.SoMField_enableDeleteValues(self)

    def isDeleteValuesEnabled(self):
        return OnX_SWIG_Python.SoMField_isDeleteValuesEnabled(self)

    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1


    def __len__(self):
        return OnX_SWIG_Python.SoMField___len__(self)

# Register SoMField in OnX_SWIG_Python:
OnX_SWIG_Python.SoMField_swigregister(SoMField)

def SoMField_getClassTypeId():
    return OnX_SWIG_Python.SoMField_getClassTypeId()

def SoMField_initClass():
    return OnX_SWIG_Python.SoMField_initClass()

class OnX_wrap_fields_dummy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.OnX_wrap_fields_dummy_swiginit(self, OnX_SWIG_Python.new_OnX_wrap_fields_dummy())
    __swig_destroy__ = OnX_SWIG_Python.delete_OnX_wrap_fields_dummy
    dummy_orientationX = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_orientationX_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_orientationX_set)
    dummy_SoSFBool = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFBool_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFBool_set)
    dummy_SoSFBox3s = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFBox3s_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFBox3s_set)
    dummy_SoSFColor = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFColor_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFColor_set)
    dummy_SoSFEnum = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFEnum_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFEnum_set)
    dummy_SoSFBitMask = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFBitMask_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFBitMask_set)
    dummy_SoSFFloat = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFFloat_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFFloat_set)
    dummy_SoSFImage = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFImage_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFImage_set)
    dummy_SoSFImage3 = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFImage3_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFImage3_set)
    dummy_SoSFInt32 = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFInt32_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFInt32_set)
    dummy_SoSFMatrix = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFMatrix_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFMatrix_set)
    dummy_SoSFName = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFName_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFName_set)
    dummy_SoSFNode = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFNode_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFNode_set)
    dummy_SoSFPath = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFPath_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFPath_set)
    dummy_SoSFPlane = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFPlane_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFPlane_set)
    dummy_SoSFRotation = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFRotation_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFRotation_set)
    dummy_SoSFShort = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFShort_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFShort_set)
    dummy_SoSFString = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFString_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFString_set)
    dummy_SoSFTime = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFTime_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFTime_set)
    dummy_SoSFTrigger = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFTrigger_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFTrigger_set)
    dummy_SoSFUInt32 = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFUInt32_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFUInt32_set)
    dummy_SoSFUShort = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFUShort_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFUShort_set)
    dummy_SoSFVec2f = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec2f_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec2f_set)
    dummy_SoSFVec2s = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec2s_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec2s_set)
    dummy_SoSFVec3d = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec3d_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec3d_set)
    dummy_SoSFVec3f = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec3f_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec3f_set)
    dummy_SoSFVec3s = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec3s_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec3s_set)
    dummy_SoSFVec4f = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec4f_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFVec4f_set)
    dummy_SoSFEngine = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFEngine_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoSFEngine_set)
    dummy_SoMFBool = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFBool_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFBool_set)
    dummy_SoMFColor = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFColor_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFColor_set)
    dummy_SoMFEngine = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFEngine_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFEngine_set)
    dummy_SoMFEnum = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFEnum_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFEnum_set)
    dummy_SoMFBitMask = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFBitMask_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFBitMask_set)
    dummy_SoMFFloat = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFFloat_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFFloat_set)
    dummy_SoMFInt32 = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFInt32_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFInt32_set)
    dummy_SoMFMatrix = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFMatrix_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFMatrix_set)
    dummy_SoMFName = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFName_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFName_set)
    dummy_SoMFNode = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFNode_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFNode_set)
    dummy_SoMFPath = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFPath_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFPath_set)
    dummy_SoMFPlane = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFPlane_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFPlane_set)
    dummy_SoMFRotation = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFRotation_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFRotation_set)
    dummy_SoMFShort = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFShort_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFShort_set)
    dummy_SoMFString = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFString_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFString_set)
    dummy_SoMFTime = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFTime_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFTime_set)
    dummy_SoMFUInt32 = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFUInt32_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFUInt32_set)
    dummy_SoMFUShort = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFUShort_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFUShort_set)
    dummy_SoMFVec2f = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec2f_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec2f_set)
    dummy_SoMFVec3d = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec3d_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec3d_set)
    dummy_SoMFVec3f = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec3f_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec3f_set)
    dummy_SoMFVec4f = property(OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec4f_get, OnX_SWIG_Python.OnX_wrap_fields_dummy_dummy_SoMFVec4f_set)

# Register OnX_wrap_fields_dummy in OnX_SWIG_Python:
OnX_SWIG_Python.OnX_wrap_fields_dummy_swigregister(OnX_wrap_fields_dummy)


import CoinPython as Inventor
for xxx in list(locals().values()):  # python3.6 : add list().
  if isinstance(xxx, type) and issubclass(xxx, Inventor.SoFieldContainer):
    for name, thing in list(xxx.__dict__.items()):  # python3.6 : add list().
      if isinstance(thing, property):
        delattr(xxx, name)


def cast_SoSeparator(aNode):
    return OnX_SWIG_Python.cast_SoSeparator(aNode)
class OnX_SWIG_Test(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        OnX_SWIG_Python.OnX_SWIG_Test_swiginit(self, OnX_SWIG_Python.new_OnX_SWIG_Test())
    __swig_destroy__ = OnX_SWIG_Python.delete_OnX_SWIG_Test

    def arg_const_std_vec_string(self, aVector):
        return OnX_SWIG_Python.OnX_SWIG_Test_arg_const_std_vec_string(self, aVector)

    def arg_std_vec_string(self, aVector):
        return OnX_SWIG_Python.OnX_SWIG_Test_arg_std_vec_string(self, aVector)

    def ret_std_vec_string(self):
        return OnX_SWIG_Python.OnX_SWIG_Test_ret_std_vec_string(self)

    def ret_const_std_vec_string(self):
        return OnX_SWIG_Python.OnX_SWIG_Test_ret_const_std_vec_string(self)

    def arg_const_std_vec_double(self, aVector):
        return OnX_SWIG_Python.OnX_SWIG_Test_arg_const_std_vec_double(self, aVector)

    def arg_std_vec_double(self, aVector):
        return OnX_SWIG_Python.OnX_SWIG_Test_arg_std_vec_double(self, aVector)

    def ret_std_vec_double(self):
        return OnX_SWIG_Python.OnX_SWIG_Test_ret_std_vec_double(self)

    def ret_const_std_vec_double(self):
        return OnX_SWIG_Python.OnX_SWIG_Test_ret_const_std_vec_double(self)

    def arg_const_std_vec_int(self, aVector):
        return OnX_SWIG_Python.OnX_SWIG_Test_arg_const_std_vec_int(self, aVector)

    def arg_std_vec_int(self, aVector):
        return OnX_SWIG_Python.OnX_SWIG_Test_arg_std_vec_int(self, aVector)

    def ret_std_vec_int(self):
        return OnX_SWIG_Python.OnX_SWIG_Test_ret_std_vec_int(self)

    def ret_const_std_vec_int(self):
        return OnX_SWIG_Python.OnX_SWIG_Test_ret_const_std_vec_int(self)

# Register OnX_SWIG_Test in OnX_SWIG_Python:
OnX_SWIG_Python.OnX_SWIG_Test_swigregister(OnX_SWIG_Test)



