# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import OnXTemplateTwo_SWIG_Python
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = OnXTemplateTwo_SWIG_Python.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_value(*args)
    def incr(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_incr(*args)
    def decr(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_decr(*args)
    def distance(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_distance(*args)
    def equal(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_equal(*args)
    def copy(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_copy(*args)
    def next(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_next(*args)
    def previous(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_previous(*args)
    def advance(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator_advance(*args)
    def __eq__(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator___eq__(*args)
    def __ne__(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator___ne__(*args)
    def __iadd__(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator___iadd__(*args)
    def __isub__(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator___isub__(*args)
    def __add__(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator___add__(*args)
    def __sub__(*args): return OnXTemplateTwo_SWIG_Python.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = OnXTemplateTwo_SWIG_Python.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ISession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISession, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = OnXTemplateTwo_SWIG_Python.delete_ISession
    __del__ = lambda self : None;
    def cast(*args): return OnXTemplateTwo_SWIG_Python.ISession_cast(*args)
    def addManager(*args): return OnXTemplateTwo_SWIG_Python.ISession_addManager(*args)
    def removeManager(*args): return OnXTemplateTwo_SWIG_Python.ISession_removeManager(*args)
    def findManager(*args): return OnXTemplateTwo_SWIG_Python.ISession_findManager(*args)
    def destroyManager(*args): return OnXTemplateTwo_SWIG_Python.ISession_destroyManager(*args)
    def printer(*args): return OnXTemplateTwo_SWIG_Python.ISession_printer(*args)
    def cout(*args): return OnXTemplateTwo_SWIG_Python.ISession_cout(*args)
    def load(*args): return OnXTemplateTwo_SWIG_Python.ISession_load(*args)
    def redirectOutput(*args): return OnXTemplateTwo_SWIG_Python.ISession_redirectOutput(*args)
    def setParameter(*args): return OnXTemplateTwo_SWIG_Python.ISession_setParameter(*args)
    def parameterValue(*args): return OnXTemplateTwo_SWIG_Python.ISession_parameterValue(*args)
    def removeParameter(*args): return OnXTemplateTwo_SWIG_Python.ISession_removeParameter(*args)
    def availableParameters(*args): return OnXTemplateTwo_SWIG_Python.ISession_availableParameters(*args)
    def flush(*args): return OnXTemplateTwo_SWIG_Python.ISession_flush(*args)
    def setVerboseLevel(*args): return OnXTemplateTwo_SWIG_Python.ISession_setVerboseLevel(*args)
    def verboseLevel(*args): return OnXTemplateTwo_SWIG_Python.ISession_verboseLevel(*args)
    def numberOfManagers(*args): return OnXTemplateTwo_SWIG_Python.ISession_numberOfManagers(*args)
    def manager(*args): return OnXTemplateTwo_SWIG_Python.ISession_manager(*args)
    def managerNames(*args): return OnXTemplateTwo_SWIG_Python.ISession_managerNames(*args)
    def arguments(*args): return OnXTemplateTwo_SWIG_Python.ISession_arguments(*args)
ISession_swigregister = OnXTemplateTwo_SWIG_Python.ISession_swigregister
ISession_swigregister(ISession)

Slash_create_session = OnXTemplateTwo_SWIG_Python.Slash_create_session
class Hello(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hello, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hello, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = OnXTemplateTwo_SWIG_Python.new_Hello(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = OnXTemplateTwo_SWIG_Python.delete_Hello
    __del__ = lambda self : None;
    def hello(*args): return OnXTemplateTwo_SWIG_Python.Hello_hello(*args)
Hello_swigregister = OnXTemplateTwo_SWIG_Python.Hello_swigregister
Hello_swigregister(Hello)



