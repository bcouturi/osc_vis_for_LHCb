/*
 * This file has been generated by the KUIP compiler.  Do NOT change it!
 *
 * KUIP header: 950303      Generation date: Sat Jul 18 17:13:46 2009
 *
 * Input file: CDF.cdf
 */

#if !defined(F77_LCASE) && !defined(F77_UCASE) && !defined(F77_USCORE)
#  if defined(__EXTENDED__) && !defined(IBM370) && !defined(_IBMR2)
#    define IBM370
#  endif
#  if defined(CRAY) || defined(IBM370) || defined(vms)
#    define F77_UCASE
#  else
#    if ( defined(apollo) || defined(__apollo) ) && defined(APOFTN)
#      define F77_LCASE
#    else
#      define F77_USCORE
#    endif
#  endif
#endif

typedef int     IntFunc();
typedef char*   CharFunc();
typedef char** pCharFunc();
typedef void    SUBROUTINE();
#ifdef IBM370
#  pragma linkage(SUBROUTINE,FORTRAN)
#endif

extern void klnkmenu();
extern void klnkbrcl();
extern void klnkkmcl();
extern void klnkicon();
extern void klnkbutt();

typedef unsigned long KmPixmap; /* Pixmap from <X11/X.h>                   */
 typedef void *KmWidget;         /* Widget from <X11/Intrinsic.h>           */
 typedef void *KmCalldata;       /* XmAnyCallbackStruct from <Motif/Xm.h>   */
                                 /*                                         */
 typedef enum {                  /*                                         */
   BRACT_OPEN = 0,               /*                                         */
   BRACT_ROOT = 1,               /*                                         */
   BRACT_CONT = 2,               /*                                         */
   BRACT_GRAF = 3                /*                                         */
 } BrActTag;                     /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   BrActUpdate    = 0x01,        /* browser window has to be updated ('!')  */
   BrActSeparator = 0x02,        /* put separator in menu ('/')             */
   BrActToggle    = 0x04,        /* register as toggle button               */
   BrActToggleOn  = 0x08,        /* toggle state is on                      */
   BrActSensitive = 0x10         /* button is sensitive                     */
 } BrActFlag;                    /*                                         */
                                 /*                                         */ 

typedef struct _BrAction {      /*                                         */ 
  struct _BrAction *next;       /* link to next action binding             */ 
  BrActFlag   flags;            /*                                         */ 
  char       *text;             /* text line in menu                       */ 
  char       *user_text;        /* user text overriding CDF text (malloced)*/ 
  char       *accel;            /* accelerator                             */ 
  char       *exec;             /* action commands                         */ 
  SUBROUTINE *call_F;           /* action routine                          */ 
  IntFunc    *call_C;           /* action function                         */ 
  BrActTag    tag;              /* for which window the action is defined  */ 
  struct _BrClass *class;       /* pointer to BrClass in case of open menu */
 } BrAction;                     /*                                         */
                                 /*                                         */
 typedef struct _BrClass {       /*                                         */
   struct _BrClass *next;        /* link to next browsable class            */
   char       *name;             /* unique identifier name                  */
   char       *title;            /* title for popup menu (maybe NULL)       */
   SUBROUTINE *scan_km_F;        /* user function scanning the directory    */
   pCharFunc  *scan_km_C;        /* user function scanning the directory    */
   SUBROUTINE *scan_br_F;        /* user function scanning for browsables   */
   pCharFunc  *scan_br_C;        /* user function scanning for browsables   */
   BrAction   *root;             /* list of actions in root window          */
   BrAction   *open;             /* list of actions in open menu            */
 } BrClass;                      /*                                         */
                                 /*                                         */ 

typedef struct _KmIcon {        /*                                         */ 
  struct _KmIcon *next;         /* link to next icon                       */ 
  char       *name;             /* unique identifier name                  */ 
  int         width;            /* width of the pixmap                     */ 
  int         height;           /* height of the pixmap                    */ 
  char       *bitmap;           /* bitmap data                             */ 
  KmPixmap    pix;              /* filled in Motif part                    */ 
  KmPixmap    hi_pix;           /* high lighted pixmap                     */
 } KmIcon;                       /*                                         */
                                 /*                                         */
 typedef struct _KmClass {       /*                                         */
   struct _KmClass *next;        /* link to next object class               */
   int         is_dir;           /* flag if class has is a directory        */
   char       *name;             /* unique identifier name                  */
   char       *title;            /* title for popup menu (maybe NULL)       */
   char       *big_icon;         /* name of the big icon                    */
   KmIcon     *bicon;            /* pointer to the big icon structure       */
   char       *sm_icon;          /* name of the small icon                  */
   KmIcon     *sicon;            /* pointer to the small icon structure     */
   SUBROUTINE *user_icon_F;      /* user function to return icon bitmap     */
   IntFunc    *user_icon_C;      /* user function to return icon bitmap     */
   BrAction   *cont;             /* list of actions in content window       */
   BrAction   *graf;             /* list of actions in graphics window      */
   int         obj_count;        /* number of objects in content window     */
 } KmClass;                      /*                                         */
                                 /*                                         */ 

typedef enum {                  /*                                         */ 
  KmButtSensitive       = 0x00, /* sensitive button                        */ 
  KmButtNonSensitive    = 0x01, /* non-sensitive button ('NS')             */ 
  KmButtToggleSensitive = 0x02, /* toggle-sensitive button ('TS')          */ 
  KmButtSensitivityMask = 0x03, /* mask for sensitivity type               */ 
  KmButtSeparator       = 0x04, /* put separator in menu ('/')             */ 
  KmButtBrowser         = 0x08  /* button is in main browser ('BR')        */
 } KmButtFlag;                   /*                                         */
                                 /*                                         */
 typedef struct _KmButton {      /*                                         */
   struct _KmButton *next;       /* button label or menu item               */
   char       *menu;             /* menu name or NULL for buttons           */
   char       *label;            /* button label or menu item               */
   SUBROUTINE *call_F;           /* callback routine (FORTRAN)              */
   IntFunc    *call_C;           /* callback routine (C)                    */
   char       *action;           /* name of callback routine                */
   char       *mnemo;            /* button mnemonic                         */
   char       *accel;            /* button accelerator                      */
   char       *accel_text;       /* button accelerator text                 */
   KmButtFlag  flags;            /* sensitivity type etc.                   */
   KmWidget    widget;           /* Motif widget ID                         */
 } KmButton;                     /*                                         */
                                 /*                                         */ 

struct {                        /*                                         */ 
  /* indirect calls to avoid linking HIGZ                                  */ 
  IntFunc    *graf_info_C;      /* pass display, open and close (ixmotif)  */ 
  SUBROUTINE *graf_size_F;      /* resize window (IGRSIZ)                  */ 
  SUBROUTINE *graf_pick_F;      /* identifying graphics objects (IGOBJ)    */ 
  SUBROUTINE *graf_attr_F;      /* set attributes (IGSET)                  */ 
  SUBROUTINE *graf_close_F;     /* close workstation (ICLWK)               */ 
  /* optional routines for Motif customization                             */ 
  pCharFunc  *user_FallBk_C;    /* get application fallbacks               */ 
  IntFunc    *user_TopWid_C;    /* pass toplevel widget identifiers        */
 } klnkaddr;                     /*                                         */ 

typedef enum {                  /*                                         */ 
  KmFLAG_FORGET = 0x01,         /* last value is not kept for Motif panels */ 
  KmFLAG_MINUS  = 0x02,         /* -VALUE is not an abbrev for CHOPT=VALUE */ 
  KmFLAG_QUOTE  = 0x04,         /* do not remove quotes                    */ 
  KmFLAG_VARARG = 0x08,         /* append additional args to this param.   */ 
  KmFLAG_CONST  = 0x10,         /* do not allow to assign a value          */ 
  KmFLAG_HIDDEN = 0x20,         /* do not show in menus                    */ 
  KmFLAG_SEPARATE = 0x40        /* treat arguments as separate tokens      */
 } KmParFlag;                    /*                                         */
                                 /*                                         */
 typedef enum {                  /*                                         */
   KmTYPE_CHAR   = 'C',          /* character string                        */
   KmTYPE_FILE   = 'F',          /* file name                               */
   KmTYPE_INT    = 'I',          /* integer                                 */
   KmTYPE_OPTION = 'O',          /* option                                  */
   KmTYPE_REAL   = 'R'           /* real                                    */
 } KmParType;                    /*                                         */
                                 /*                                         */ 

typedef struct {                /* file name                               */ 
  char         *filter_default; /* filter wildcard                         */ 
  char         *filter_current; /* current filter                          */
 } KmParFile;                    /*                                         */
                                 /*                                         */
 typedef struct {                /*                                         */
   char         *range_lower;    /* lower value of range                    */
   char         *range_upper;    /* upper value of range                    */
   char         *slider_lower;   /* lower limit for slider                  */
   char         *slider_upper;   /* upper limit for slider                  */
   int           decimals;       /* number of decimals used for slider      */
 } KmParInt;                     /*                                         */
                                 /*                                         */
 typedef struct {                /* option                                  */
   char        **text;           /* explanations (parallel to range_value)  */
   int          *mutex;          /* mutex group to which text belongs       */
   int          *radio;          /* radio group to which text belongs       */
 } KmParOption;                  /*                                         */
                                 /*                                         */ 

typedef KmParInt KmParReal;     /* real and int have the same fields       */ 
                                /*                                         */
 typedef struct {                /*                                         */
   char         *name;           /* parameter name                          */
   int           abbrev;         /* minimum length that name is recognized  */
   char         *prompt;         /* prompt string                           */
   char         *dfault;         /* default value                           */
   char         *last;           /* last value for Motif panel (malloced)   */
   int           width;          /* width of input field                    */
   int           range_count;    /* number of items in range_value          */
   char        **range_value;    /* list of allowed values                  */
   int           select_count;   /* number of items in select_count         */
   char        **select_value;   /* list of values for selection box        */
   KmParFlag     flags;          /* special flags                           */
   KmParType     type;           /* parameter type                          */
   void        *ptype;           /* structure pointer selected by type      */
 } KmParameter;                  /*                                         */
                                 /*                                         */ 

typedef struct _KmCommand {     /*                                         */ 
  struct _KmCommand *next;      /* link to next command                    */ 
  char         *path;           /* command path                            */ 
  char         *name;           /* command name                            */ 
  int           hidden;         /* flag if command is invisible            */ 
  int           level;          /* depth of submenus                       */ 
  int           total;          /* total number of parameters              */ 
  int           mandatory;      /* number of mandatory parameters          */ 
  KmParameter **par;            /* list of total parameter descriptions    */ 
  int           list_par;       /* index+1 of parameter taking a list      */ 
  int           xcount;         /* count number of action calls            */ 
  SUBROUTINE   *action_F;       /* action routine                          */ 
  IntFunc      *action_C;       /* action routine                          */ 
  SUBROUTINE   *user_help_F;    /* user help routine                       */ 
  pCharFunc    *user_help_C;    /* user help routine                       */ 
  int          nguidance;       /* number of lines in guidance text        */ 
  char        **guidance;       /* help text                               */ 
  int          nkeyword;        /* number of lines for keywords            */ 
  char        **keyword;        /* list of keywords                        */ 
  int          nhlink;          /* number of lines for links               */ 
  char        **hlink;          /* list of links                           */ 
  int           argc;           /* number of arguments entered             */ 
  char        **argv;           /* argc argument values                    */ 
  char         *argline;        /* argument line as entered                */ 
  int          *argoffs;        /* argc offsets into argline for KUGETE    */
 } KmCommand;                    /*                                         */ 

typedef struct _KmMenu {        /*                                         */ 
  struct _KmMenu *next;         /* link to next menu                       */ 
  struct _KmMenu *down;         /* link to submenu                         */ 
  char         *path;           /* path of parent menu                     */ 
  char         *name;           /* menu name                               */ 
  int           level;          /* depth of submenus                       */ 
  KmCommand    *cmds;           /* link to first command                   */ 
  int          nguidance;       /* number of lines in guidance text        */ 
  char        **guidance;       /* help text                               */ 
  int          nkeyword;        /* number of lines for keywords            */ 
  char        **keyword;        /* list of keywords                        */ 
  int          nhlink;          /* number of lines for links               */ 
  char        **hlink;          /* list of links                           */
 } KmMenu;                       /*                                         */
                                 /*                                         */
 extern void klnkbrcl();         /*                                         */
 extern void klnkicon();         /*                                         */
 extern void klnkkmcl();         /*                                         */
 extern void klnkmenu();         /*                                         */
                                 /*                                         */ 

#ifdef F77_LCASE
#  define onx_kuip_def_ onx_kuip_def
#endif

#ifdef F77_UCASE
#  define onx_kuip_def_ ONX_KUIP_DEF
#endif

#ifdef IBM370
#  pragma linkage(ONX_KUIP_DEF,FORTRAN)
#endif

extern void onx_kuip_def_();

extern int onx_kuip();

void onx_kuip_def_()
{

static KmParameter _SLASH_UI_SET_PARAMETER_WHAT = { "WHAT", 4, "param name",
 " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_UI_SET_PARAMETER_VALUE = { "VALUE", 5,
 "Field value", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_UI_SET_PARAMETER_parameters[] = {
 &_SLASH_UI_SET_PARAMETER_WHAT, &_SLASH_UI_SET_PARAMETER_VALUE };
static char *_SLASH_UI_SET_PARAMETER_guidance[] = { "Set UI parameter value."
 };
static char *_SLASH_UI_SET_PARAMETER_keyword[] = { "field" };
static KmCommand _SLASH_UI_SET_PARAMETER = {  (KmCommand*)0,
 "/SLASH/UI/SET_PARAMETER", "SET_PARAMETER", 0, 2, 2, 2,
 _SLASH_UI_SET_PARAMETER_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _SLASH_UI_SET_PARAMETER_guidance, 1,
 _SLASH_UI_SET_PARAMETER_keyword, 0, (char**)0, 0, (char**)0, (char*)0,
 (int*)0 };

static KmParameter _SLASH_UI_DIALOG_NAME = { "NAME", 4, "Name of the dialog",
 " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_SLASH_UI_DIALOG_parameters[] = { &_SLASH_UI_DIALOG_NAME };
static char *_SLASH_UI_DIALOG_guidance[] = { " Map a dialog box.",
 "  Exa : /SLASH/UI/DIALOG print" };
static char *_SLASH_UI_DIALOG_keyword[] = { "GUI", "dialog" };
static KmCommand _SLASH_UI_DIALOG = { &_SLASH_UI_SET_PARAMETER,
 "/SLASH/UI/DIALOG", "DIALOG", 0, 2, 1, 1, _SLASH_UI_DIALOG_parameters, 0, 0,
 (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 2,
 _SLASH_UI_DIALOG_guidance, 2, _SLASH_UI_DIALOG_keyword, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_UI_SHOW_WIDGET = { "WIDGET", 6, "Widget", " ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_SLASH_UI_SHOW_parameters[] = { &_SLASH_UI_SHOW_WIDGET };
static char *_SLASH_UI_SHOW_guidance[] = { "Show a shell widget.",
 " Ex.  /SLASH/UI/SHOW OnX_InputPrint_dialog" };
static char *_SLASH_UI_SHOW_keyword[] = { "widget" };
static KmCommand _SLASH_UI_SHOW = { &_SLASH_UI_DIALOG, "/SLASH/UI/SHOW",
 "SHOW", 0, 2, 1, 1, _SLASH_UI_SHOW_parameters, 0, 0, (SUBROUTINE*)0,
 onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 2, _SLASH_UI_SHOW_guidance, 1,
 _SLASH_UI_SHOW_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_UI_LOAD_FILE = { "FILE", 4, "File", " ", (char*)0,
 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_UI_LOAD_parameters[] = { &_SLASH_UI_LOAD_FILE };
static char *_SLASH_UI_LOAD_guidance[] = { "Load a GUI file",
 " Ex.  /SLASH/UI/LOAD $ONXROOT/scripts/OnX/InputPrint.onx" };
static char *_SLASH_UI_LOAD_keyword[] = { "GUI", "file" };
static KmCommand _SLASH_UI_LOAD = { &_SLASH_UI_SHOW, "/SLASH/UI/LOAD", "LOAD",
 0, 2, 1, 1, _SLASH_UI_LOAD_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 2, _SLASH_UI_LOAD_guidance, 2,
 _SLASH_UI_LOAD_keyword, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static char *_SLASH_UI_SYNCHRONIZE_guidance[] = {
 "Flush and wait execution of screen manager events." };
static KmCommand _SLASH_UI_SYNCHRONIZE = { &_SLASH_UI_LOAD,
 "/SLASH/UI/SYNCHRONIZE", "SYNCHRONIZE", 0, 2, 0, 0, (KmParameter**)0, 0, 0,
 (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _SLASH_UI_SYNCHRONIZE_guidance, 0, (char**)0, 0, (char**)0, 0, (char**)0,
 (char*)0, (int*)0 };

static KmParameter _SLASH_VIEWER_READ_SCENE_NAME = { "NAME", 4,
 "Name of the viewer", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_VIEWER_READ_SCENE_FILE = { "FILE", 4, "file", " ",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_VIEWER_READ_SCENE_FORMAT = { "FORMAT", 6, "file",
 "guessed", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_VIEWER_READ_SCENE_PLACEMENT = { "PLACEMENT", 9,
 "file", "staticScene", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_VIEWER_READ_SCENE_parameters[] = {
 &_SLASH_VIEWER_READ_SCENE_NAME, &_SLASH_VIEWER_READ_SCENE_FILE,
 &_SLASH_VIEWER_READ_SCENE_FORMAT, &_SLASH_VIEWER_READ_SCENE_PLACEMENT };
static char *_SLASH_VIEWER_READ_SCENE_guidance[] = {
 "Read a file at various format (typically an Inventor file)." };
static KmCommand _SLASH_VIEWER_READ_SCENE = {  (KmCommand*)0,
 "/SLASH/VIEWER/READ_SCENE", "READ_SCENE", 0, 2, 4, 2,
 _SLASH_VIEWER_READ_SCENE_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _SLASH_VIEWER_READ_SCENE_guidance, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_NAME = { "NAME", 4,
 "Name of the viewer", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_VALUE = { "VALUE", 5,
 "param value", "TRUE", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_parameters[] = {
 &_SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_NAME,
 &_SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_VALUE };
static char *_SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_guidance[] = {
 "Set or not the feedback visiblity. Available only for examiner viewers." };
static KmCommand _SLASH_VIEWER_SET_FEEDBACK_VISIBILITY = {
 &_SLASH_VIEWER_READ_SCENE, "/SLASH/VIEWER/SET_FEEDBACK_VISIBILITY",
 "SET_FEEDBACK_VISIBILITY", 0, 2, 2, 2,
 _SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_parameters, 0, 0, (SUBROUTINE*)0,
 onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _SLASH_VIEWER_SET_FEEDBACK_VISIBILITY_guidance, 0, (char**)0, 0, (char**)0,
 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_VIEWER_SET_VIEWING_NAME = { "NAME", 4,
 "Name of the viewer", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_VIEWER_SET_VIEWING_VALUE = { "VALUE", 5,
 "param value", "TRUE", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_VIEWER_SET_VIEWING_parameters[] = {
 &_SLASH_VIEWER_SET_VIEWING_NAME, &_SLASH_VIEWER_SET_VIEWING_VALUE };
static char *_SLASH_VIEWER_SET_VIEWING_guidance[] = {
 "Set or not the viewing mode." };
static KmCommand _SLASH_VIEWER_SET_VIEWING = {
 &_SLASH_VIEWER_SET_FEEDBACK_VISIBILITY, "/SLASH/VIEWER/SET_VIEWING",
 "SET_VIEWING", 0, 2, 2, 2, _SLASH_VIEWER_SET_VIEWING_parameters, 0, 0,
 (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _SLASH_VIEWER_SET_VIEWING_guidance, 0, (char**)0, 0, (char**)0, 0, (char**)0,
 (char*)0, (int*)0 };

static KmParameter _SLASH_VIEWER_SET_DECORATION_NAME = { "NAME", 4,
 "Name of the viewer", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_VIEWER_SET_DECORATION_VALUE = { "VALUE", 5,
 "param value", "TRUE", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_VIEWER_SET_DECORATION_parameters[] = {
 &_SLASH_VIEWER_SET_DECORATION_NAME, &_SLASH_VIEWER_SET_DECORATION_VALUE };
static char *_SLASH_VIEWER_SET_DECORATION_guidance[] = {
 "Set or not the decorations of the viewer." };
static KmCommand _SLASH_VIEWER_SET_DECORATION = { &_SLASH_VIEWER_SET_VIEWING,
 "/SLASH/VIEWER/SET_DECORATION", "SET_DECORATION", 0, 2, 2, 2,
 _SLASH_VIEWER_SET_DECORATION_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _SLASH_VIEWER_SET_DECORATION_guidance, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_VIEWER_RENDER_NAME = { "NAME", 4,
 "Name of the viewer", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_VIEWER_RENDER_parameters[] = {
 &_SLASH_VIEWER_RENDER_NAME };
static char *_SLASH_VIEWER_RENDER_guidance[] = {
 "Force a redraw. By default it works on the \"current\" widget." };
static KmCommand _SLASH_VIEWER_RENDER = { &_SLASH_VIEWER_SET_DECORATION,
 "/SLASH/VIEWER/RENDER", "RENDER", 0, 2, 1, 1,
 _SLASH_VIEWER_RENDER_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 1, _SLASH_VIEWER_RENDER_guidance, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_VIEWER_VIEW_ALL_NAME = { "NAME", 4,
 "Name of the viewer", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_VIEWER_VIEW_ALL_parameters[] = {
 &_SLASH_VIEWER_VIEW_ALL_NAME };
static KmCommand _SLASH_VIEWER_VIEW_ALL = { &_SLASH_VIEWER_RENDER,
 "/SLASH/VIEWER/VIEW_ALL", "VIEW_ALL", 0, 2, 1, 1,
 _SLASH_VIEWER_VIEW_ALL_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 0, (char**)0, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE_NAME = { "NAME", 4,
 "Name of the page", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE_VALUE = { "VALUE", 5,
 "param value", "TRUE", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE_parameters[] = {
 &_SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE_NAME,
 &_SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE_VALUE };
static KmCommand _SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE = {  (KmCommand*)0,
 "/SLASH/PAGE/SET_REGIONS_HIGHLIGHTABLE", "SET_REGIONS_HIGHLIGHTABLE", 0, 2,
 2, 2, _SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE_parameters, 0, 0, (SUBROUTINE*)0,
 onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 0, (char**)0, 0,
 (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_PAGE_SET_PARAMETER_NAME = { "NAME", 4,
 "Name of the page", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_PAGE_SET_PARAMETER_WHAT = { "WHAT", 4, "param name",
 " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_PAGE_SET_PARAMETER_VALUE = { "VALUE", 5,
 "param value", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_PAGE_SET_PARAMETER_parameters[] = {
 &_SLASH_PAGE_SET_PARAMETER_NAME, &_SLASH_PAGE_SET_PARAMETER_WHAT,
 &_SLASH_PAGE_SET_PARAMETER_VALUE };
static char *_SLASH_PAGE_SET_PARAMETER_guidance[] = { "Set page field value.",
 " Ex.  PAGE/SET_PARAMETER titleVisible TRUE",
 " Ex.  PAGE/SET_PARAMETER title Hello" };
static char *_SLASH_PAGE_SET_PARAMETER_keyword[] = { "field" };
static KmCommand _SLASH_PAGE_SET_PARAMETER = {
 &_SLASH_PAGE_SET_REGIONS_HIGHLIGHTABLE, "/SLASH/PAGE/SET_PARAMETER",
 "SET_PARAMETER", 0, 2, 3, 3, _SLASH_PAGE_SET_PARAMETER_parameters, 0, 0,
 (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 3,
 _SLASH_PAGE_SET_PARAMETER_guidance, 1, _SLASH_PAGE_SET_PARAMETER_keyword, 0,
 (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_PAGE_SET_CURRENT_REGION_NAME = { "NAME", 4,
 "Name of the page", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParInt    _SLASH_PAGE_SET_CURRENT_REGION_N_type = { (char*)0,
 (char*)0, (char*)0, (char*)0, 0 };
static KmParameter _SLASH_PAGE_SET_CURRENT_REGION_N = { "N", 1,
 "Region ID to set as current one", "0", (char*)0, 8, 0, (char**)0, 0,
 (char**)0, (KmParFlag)0, KmTYPE_INT, &_SLASH_PAGE_SET_CURRENT_REGION_N_type };
static KmParameter *_SLASH_PAGE_SET_CURRENT_REGION_parameters[] = {
 &_SLASH_PAGE_SET_CURRENT_REGION_NAME, &_SLASH_PAGE_SET_CURRENT_REGION_N };
static char *_SLASH_PAGE_SET_CURRENT_REGION_guidance[] = {
 "Set current region in a page." };
static KmCommand _SLASH_PAGE_SET_CURRENT_REGION = {
 &_SLASH_PAGE_SET_PARAMETER, "/SLASH/PAGE/SET_CURRENT_REGION",
 "SET_CURRENT_REGION", 0, 2, 2, 1, _SLASH_PAGE_SET_CURRENT_REGION_parameters,
 0, 0, (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _SLASH_PAGE_SET_CURRENT_REGION_guidance, 0, (char**)0, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_PAGE_CREATE_REGION_NAME = { "NAME", 4,
 "Name of the page", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_PAGE_CREATE_REGION_CLASS = { "CLASS", 5,
 "Class of region to create", "SoDisplayRegion", (char*)0, 20, 0, (char**)0,
 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_PAGE_CREATE_REGION_X = { "X", 1, "x", "0.25",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_PAGE_CREATE_REGION_Y = { "Y", 1, "x", "0.25",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_PAGE_CREATE_REGION_W = { "W", 1, "x", "0.5",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_PAGE_CREATE_REGION_H = { "H", 1, "x", "0.5",
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_PAGE_CREATE_REGION_SET_CURRENT = { "SET_CURRENT",
 11, "file", "TRUE", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_PAGE_CREATE_REGION_parameters[] = {
 &_SLASH_PAGE_CREATE_REGION_NAME, &_SLASH_PAGE_CREATE_REGION_CLASS,
 &_SLASH_PAGE_CREATE_REGION_X, &_SLASH_PAGE_CREATE_REGION_Y,
 &_SLASH_PAGE_CREATE_REGION_W, &_SLASH_PAGE_CREATE_REGION_H,
 &_SLASH_PAGE_CREATE_REGION_SET_CURRENT };
static char *_SLASH_PAGE_CREATE_REGION_guidance[] = { "Create a region." };
static KmCommand _SLASH_PAGE_CREATE_REGION = {
 &_SLASH_PAGE_SET_CURRENT_REGION, "/SLASH/PAGE/CREATE_REGION",
 "CREATE_REGION", 0, 2, 7, 0, _SLASH_PAGE_CREATE_REGION_parameters, 0, 0,
 (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 1,
 _SLASH_PAGE_CREATE_REGION_guidance, 0, (char**)0, 0, (char**)0, 0, (char**)0,
 (char*)0, (int*)0 };

static KmParameter _SLASH_PAGE_CLEAR_NAME = { "NAME", 4, "Name of the page",
 "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_PAGE_CLEAR_parameters[] = { &_SLASH_PAGE_CLEAR_NAME
 };
static KmCommand _SLASH_PAGE_CLEAR = { &_SLASH_PAGE_CREATE_REGION,
 "/SLASH/PAGE/CLEAR", "CLEAR", 0, 2, 1, 1, _SLASH_PAGE_CLEAR_parameters, 0, 0,
 (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0, 0,
 (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_PAGE_REFRESH_NAME = { "NAME", 4, "Name of the page",
 "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_PAGE_REFRESH_parameters[] = {
 &_SLASH_PAGE_REFRESH_NAME };
static KmCommand _SLASH_PAGE_REFRESH = { &_SLASH_PAGE_CLEAR,
 "/SLASH/PAGE/REFRESH", "REFRESH", 0, 2, 1, 1, _SLASH_PAGE_REFRESH_parameters,
 0, 0, (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0,
 0, (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_REGION_SET_PARAMETER_NAME = { "NAME", 4,
 "Name of the region", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_REGION_SET_PARAMETER_WHAT = { "WHAT", 4,
 "param name", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter _SLASH_REGION_SET_PARAMETER_VALUE = { "VALUE", 5,
 "param value", " ", (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0,
 KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_REGION_SET_PARAMETER_parameters[] = {
 &_SLASH_REGION_SET_PARAMETER_NAME, &_SLASH_REGION_SET_PARAMETER_WHAT,
 &_SLASH_REGION_SET_PARAMETER_VALUE };
static char *_SLASH_REGION_SET_PARAMETER_guidance[] = {
 "Set page field value.",
 " Ex.  REGION/SET_PARAMETER ! infosRegionVisible TRUE" };
static char *_SLASH_REGION_SET_PARAMETER_keyword[] = { "field" };
static KmCommand _SLASH_REGION_SET_PARAMETER = {  (KmCommand*)0,
 "/SLASH/REGION/SET_PARAMETER", "SET_PARAMETER", 0, 2, 3, 3,
 _SLASH_REGION_SET_PARAMETER_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip,
 (SUBROUTINE*)0, (pCharFunc*)0, 2, _SLASH_REGION_SET_PARAMETER_guidance, 1,
 _SLASH_REGION_SET_PARAMETER_keyword, 0, (char**)0, 0, (char**)0, (char*)0,
 (int*)0 };

static KmParameter _SLASH_REGION_CLEAR_NAME = { "NAME", 4,
 "Name of the region", "@current@", (char*)0, 20, 0, (char**)0, 0, (char**)0,
 (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_REGION_CLEAR_parameters[] = {
 &_SLASH_REGION_CLEAR_NAME };
static KmCommand _SLASH_REGION_CLEAR = { &_SLASH_REGION_SET_PARAMETER,
 "/SLASH/REGION/CLEAR", "CLEAR", 0, 2, 1, 1, _SLASH_REGION_CLEAR_parameters,
 0, 0, (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0, (pCharFunc*)0, 0, (char**)0,
 0, (char**)0, 0, (char**)0, 0, (char**)0, (char*)0, (int*)0 };

static char *_SLASH_REGION_guidance[] = { "To manipulate an SoRegion." };
static KmMenu _SLASH_REGION = {  (KmMenu*)0,  (KmMenu*)0, "/SLASH/REGION",
 "REGION", 2, &_SLASH_REGION_CLEAR, 1, _SLASH_REGION_guidance, 0, (char**)0,
 0, (char**)0 };

static char *_SLASH_PAGE_guidance[] = { "To manipulate an SoPage." };
static KmMenu _SLASH_PAGE = { &_SLASH_REGION,  (KmMenu*)0, "/SLASH/PAGE",
 "PAGE", 2, &_SLASH_PAGE_REFRESH, 1, _SLASH_PAGE_guidance, 0, (char**)0, 0,
 (char**)0 };

static char *_SLASH_VIEWER_guidance[] = { "To work on a viewer widget." };
static KmMenu _SLASH_VIEWER = { &_SLASH_PAGE,  (KmMenu*)0, "/SLASH/VIEWER",
 "VIEWER", 2, &_SLASH_VIEWER_VIEW_ALL, 1, _SLASH_VIEWER_guidance, 0,
 (char**)0, 0, (char**)0 };

static char *_SLASH_UI_guidance[] = { "Interface to the Slash::UI::IUI class."
 };
static KmMenu _SLASH_UI = { &_SLASH_VIEWER,  (KmMenu*)0, "/SLASH/UI", "UI", 2,
 &_SLASH_UI_SYNCHRONIZE, 1, _SLASH_UI_guidance, 0, (char**)0, 0, (char**)0 };

static KmParameter _SLASH_LOAD_LIB = { "LIB", 3, "Librairie", (char*)0,
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter _SLASH_LOAD_PACK = { "PACK", 4, "Package", (char*)0,
 (char*)0, 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR, 
 (void*)0 };
static KmParameter *_SLASH_LOAD_parameters[] = { &_SLASH_LOAD_LIB,
 &_SLASH_LOAD_PACK };
static char *_SLASH_LOAD_guidance[] = { "Load a KUIP DLL." };
static KmCommand _SLASH_LOAD = {  (KmCommand*)0, "/SLASH/LOAD", "LOAD", 0, 1,
 2, 2, _SLASH_LOAD_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0,
 (pCharFunc*)0, 1, _SLASH_LOAD_guidance, 0, (char**)0, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static KmParameter _SLASH_WGET_FILE = { "FILE", 4, "File", (char*)0, (char*)0,
 20, 0, (char**)0, 0, (char**)0, (KmParFlag)0, KmTYPE_CHAR,  (void*)0 };
static KmParameter *_SLASH_WGET_parameters[] = { &_SLASH_WGET_FILE };
static char *_SLASH_WGET_guidance[] = { "get a file on the web." };
static KmCommand _SLASH_WGET = { &_SLASH_LOAD, "/SLASH/WGET", "WGET", 0, 1, 1,
 1, _SLASH_WGET_parameters, 0, 0, (SUBROUTINE*)0, onx_kuip, (SUBROUTINE*)0,
 (pCharFunc*)0, 1, _SLASH_WGET_guidance, 0, (char**)0, 0, (char**)0, 0,
 (char**)0, (char*)0, (int*)0 };

static KmMenu _SLASH = {  (KmMenu*)0, &_SLASH_UI, "/SLASH", "SLASH", 1,
 &_SLASH_WGET, 0, (char**)0, 0, (char**)0, 0, (char**)0 };

  klnkmenu( &_SLASH, 950303 );
}


