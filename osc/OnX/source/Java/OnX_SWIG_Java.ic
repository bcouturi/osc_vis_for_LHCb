/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN Slash::Data::IProcessor *Slash_Core_IManager_cast_Lib_IProcessor(Slash::Core::IManager *self){
    return INLIB_CAST(*self,Slash::Data::IProcessor);
  }
SWIGINTERN std::string Slash_Core_ISession_parameterValue__SWIG_1(Slash::Core::ISession *self,std::string const &aKey){
    std::string s;
    self->parameterValue(aKey,s);
    return s;
  }
SWIGINTERN void Slash_Core_ISession_setColor__SWIG_0(Slash::Core::ISession *self,double aR,double aG,double aB){
    std::string s;
    Lib::smanip::printf(s,128,"%g %g %g",aR,aG,aB);
    self->setParameter("modeling.color",s);
  }
SWIGINTERN void Slash_Core_ISession_setColor__SWIG_1(Slash::Core::ISession *self,std::string const &aColor){
    self->setParameter("modeling.color",aColor);
  }
SWIGINTERN Slash::Data::IProcessor *Slash_Core_ISession_accessorManager(Slash::Core::ISession *self){
    return Slash::accessorManager(*self);
  }
SWIGINTERN Slash::UI::IScriptManager *Slash_Core_ISession_scriptManager(Slash::Core::ISession *self){
    return Slash::scriptManager(*self);
  }
SWIGINTERN Slash::UI::IUI_Manager *Slash_Core_ISession_uiManager(Slash::Core::ISession *self){
    return Slash::uiManager(*self);
  }
SWIGINTERN Slash::UI::IUI *Slash_Core_ISession_ui(Slash::Core::ISession *self){
    Slash::UI::IUI_Manager* mgr = Slash::uiManager(*self);
    if(!mgr) return 0;
    return mgr->find("default");
  }
SWIGINTERN Slash::UI::IUI *Slash_Core_ISession_createUI__SWIG_0(Slash::Core::ISession *self,std::string const &a_file="@empty@",bool a_show=true,std::string const &a_tk=""){
    Slash::UI::IUI_Manager* mgr = Slash::uiManager(*self);
    if(!mgr) return 0;
    std::vector<std::string> args;
    return mgr->create(a_tk,a_file,args,a_show);
  }
SWIGINTERN bool Slash_Core_ISession_loadInterpreter__SWIG_0(Slash::Core::ISession *self,std::string const &aInterp,bool aQuiet=false){
    Slash::UI::IScriptManager* sm = Slash::scriptManager(*self);
    if(!sm) return false;
    Slash::UI::IInterpreter* interp = sm->findInterpreter(aInterp);
    if(!interp) return false;
    return interp->load(aQuiet);
  }
SWIGINTERN std::string Slash_UI_IUI_parameterValue__SWIG_1(Slash::UI::IUI *self,std::string const &aKey){
    std::string s;
    self->parameterValue(aKey,s);
    return s;
  }
SWIGINTERN bool Slash_UI_IUI_setTreeItems(Slash::UI::IUI *self,std::string const &aTreeWidget,std::string const &aFile){
    std::vector<std::string> lines;
    if(!Lib::fmanip::read(aFile,lines)) return false;
    self->setParameter(aTreeWidget+".items",Lib::smanip::tostring(lines,"\n"));
    return true;
  }
SWIGINTERN void Slash_UI_IUI_showHelp(Slash::UI::IUI *self,std::string const &aFile){
    self->executeScript("DLD","OnX ui_help_file "+aFile);
  }
SWIGINTERN void Slash_UI_IUI_showDialog(Slash::UI::IUI *self,std::string const &aFile,std::string const &aDialog){
    self->executeScript("DLD","OnX ui_show_dialog "+aFile+" "+aDialog);
  }
SWIGINTERN SoPage *Slash_UI_IUI_currentPage(Slash::UI::IUI *self){ 
    return ui_SoPage(*self);
  }
SWIGINTERN void Slash_UI_IUI_dumpNode(Slash::UI::IUI *self,SoNode &aNode){
    SbString ss;
    aNode.get(ss);
    self->echo(ss.getString());
  }
SWIGINTERN Slash::UI::ISoViewer *Slash_UI_IWidget_cast_ISoViewer(Slash::UI::IWidget *self){
    return INLIB_CAST(*self,Slash::UI::ISoViewer);
  }
SWIGINTERN void Slash_Data_IProcessor_collect__SWIG_0(Slash::Data::IProcessor *self,std::string const &aWhat,std::string const &aCuts=""){
    std::vector<std::string> ss;
    ss.push_back(aWhat);
    ss.push_back(aCuts);
    self->execute("collect",ss);
  }
SWIGINTERN void Slash_Data_IProcessor_visualize__SWIG_0(Slash::Data::IProcessor *self,std::string const &where="@current@"){
    std::vector<std::string> ss;
    ss.push_back("where="+where);
    self->execute("visualize",ss);
  }
SWIGINTERN int Slash_Data_IProcessor_number(Slash::Data::IProcessor *self){
    std::vector<std::string> ss;
    std::string s = self->execute("number",ss);
    int number;
    if(!Lib::smanip::toint(s,number)) return 0;
    return number;  
  }
SWIGINTERN std::vector<std::string > Slash_Data_IProcessor_values(Slash::Data::IProcessor *self,std::string const &aWhat){
    std::vector<std::string> ss;
    ss.push_back(aWhat);
    return Lib::smanip::words(self->execute("values",ss),"\n");
  }
SWIGINTERN void Slash_Data_IProcessor_dump__SWIG_0(Slash::Data::IProcessor *self,std::string const &aFormat="table"){
    std::vector<std::string> ss;
    ss.push_back(aFormat);
    self->execute("dump",ss);
  }
SWIGINTERN void Slash_Data_IProcessor_filter__SWIG_0(Slash::Data::IProcessor *self,std::string const &aWhat,std::string const &aFilter=""){
    std::vector<std::string> ss;
    ss.push_back(aWhat);
    ss.push_back(aFilter);
    self->execute("filter",ss);
  }
SWIGINTERN void Slash_Data_IProcessor_set(Slash::Data::IProcessor *self,std::string const &aWhat,std::string const &aValue){
    std::vector<std::string> ss;
    ss.push_back(aWhat);
    ss.push_back(aValue);
    self->execute("set",ss);
  }
SWIGINTERN void Slash_Data_IProcessor_destroy(Slash::Data::IProcessor *self){
    std::vector<std::string> ss;
    self->execute("destroy",ss);
  }

std::ostream& Slash_cout() {return std::cout;}
std::ostream& Slash_cerr() {return std::cerr;}

SWIGINTERN std::vector<std::string > Lib_smanip_lines__SWIG_1(std::string const &aString){
    std::vector<std::string> vs;
    Lib::smanip::lines(aString,vs); //FIXME : if(!) throw ?
    return vs;
  }
SWIGINTERN std::string Lib_smanip_torgbs__SWIG_1(std::string const &aString){
    std::string s;
    Lib::smanip::torgbs(aString,s);
    return s;
  }
SWIGINTERN std::vector<std::string > Lib_smanip_pathNameSuffix__SWIG_1(std::string const &aPath){
    std::vector<std::string> vs;
    std::string p,n,s;
    Lib::smanip::pathNameSuffix(aPath,p,n,s);
    vs.push_back(p);
    vs.push_back(n);
    vs.push_back(s);
    return vs;
  }
SWIGINTERN std::vector<std::string > Lib_fmanip_read__SWIG_2(std::string const &aFile){
    std::vector<std::string> vs;
    Lib::fmanip::read(aFile,vs);
    return vs;
  }


// Tcl :
// In OnXTcl/Tcl.cxx we define the OnX_sessionPointer
// Tcl command that returns on a string the 
// session address. With the below, we can
// reconvert it to a SWIG wrapped pointer in the
// OnX/scripts/Tcl/init.tcl script.
Slash::Core::ISession* OnX_cast_ISession(const std::string& aString) {
  void* p;
  // Read with %lx and, if failure, with %lu.
  if(!Lib::smanip::topointer(aString,p)) return 0;
  return (Slash::Core::ISession*)p;
}


SWIGINTERN SoNode *SoType_createInstance(SoType const *self){
    return (SoNode*)self->createInstance();
  }
SWIGINTERN void delete_SoBase(SoBase *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoBase,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoNode(SoNode *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoNode,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN SoSeparator *SoNode_cast_SoSeparator(SoNode *self){
    SoType soType = SoType::fromName("SoSeparator");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoSeparator*)self;
  }
SWIGINTERN SoCylinder *SoNode_cast_SoCylinder(SoNode *self){
    SoType soType = SoType::fromName("SoCylinder");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoCylinder*)self;
  }
SWIGINTERN SoCube *SoNode_cast_SoCube(SoNode *self){
    SoType soType = SoType::fromName("SoCube");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoCube*)self;
  }
SWIGINTERN SoDisplayRegion *SoNode_cast_SoDisplayRegion(SoNode *self){
    SoType soType = SoType::fromName("SoDisplayRegion");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoDisplayRegion*)self;
  }
SWIGINTERN SoImageRegion *SoNode_cast_SoImageRegion(SoNode *self){
    SoType soType = SoType::fromName("SoImageRegion");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoImageRegion*)self;
  }
SWIGINTERN SoTextRegion *SoNode_cast_SoTextRegion(SoNode *self){
    SoType soType = SoType::fromName("SoTextRegion");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoTextRegion*)self;
  }
SWIGINTERN SoPlotterRegion *SoNode_cast_SoPlotterRegion(SoNode *self){
    SoType soType = SoType::fromName("SoPlotterRegion");
    if(self->isOfType(soType)==FALSE) return 0;
    return (SoPlotterRegion*)self;
  }
SWIGINTERN void delete_SoGroup(SoGroup *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoGroup,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoSeparator(SoSeparator *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoSeparator,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoArray(SoArray *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoArray,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoShape(SoShape *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoShape,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoVertexShape(SoVertexShape *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoVertexShape,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoNonIndexedShape(SoNonIndexedShape *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoNonIndexedShape,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCube(SoCube *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCube,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCylinder(SoCylinder *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCylinder,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCamera(SoCamera *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCamera,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoOrthographicCamera(SoOrthographicCamera *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoOrthographicCamera,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPerspectiveCamera(SoPerspectiveCamera *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPerspectiveCamera,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoMaterial(SoMaterial *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoMaterial,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTransformation(SoTransformation *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTransformation,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoScale(SoScale *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoScale,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTranslation(SoTranslation *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTranslation,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoRotation(SoRotation *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoRotation,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoRotationXYZ(SoRotationXYZ *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoRotationXYZ,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoResetTransform(SoResetTransform *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoResetTransform,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoLight(SoLight *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoLight,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoDirectionalLight(SoDirectionalLight *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoDirectionalLight,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoLightModel(SoLightModel *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoLightModel,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCoordinate3(SoCoordinate3 *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCoordinate3,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoLineSet(SoLineSet *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoLineSet,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoBaseKit(SoBaseKit *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoBaseKit,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoViewportRegion(SoViewportRegion *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoViewportRegion,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoImageWriter(SoImageWriter *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoImageWriter,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_HEPVis_SoImage(HEPVis_SoImage *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#HEPVis_SoImage,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoStyle(SoStyle *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoStyle,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoLineStyle(SoLineStyle *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoLineStyle,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoAreaStyle(SoAreaStyle *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoAreaStyle,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTextStyle(SoTextStyle *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTextStyle,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTextHershey(SoTextHershey *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTextHershey,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTextTTF(SoTextTTF *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTextTTF,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoGrid(SoGrid *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoGrid,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTextVtk(SoTextVtk *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTextVtk,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPyramid(SoPyramid *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPyramid,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoSplineCurve(SoSplineCurve *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoSplineCurve,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoHighlightMaterial(SoHighlightMaterial *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoHighlightMaterial,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoStyleCache(SoStyleCache *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoStyleCache,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoRegion(SoRegion *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoRegion,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoDisplayRegion(SoDisplayRegion *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoDisplayRegion,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoImageRegion(SoImageRegion *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoImageRegion,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTextRegion(SoTextRegion *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTextRegion,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCanvas(SoCanvas *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCanvas,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPage(SoPage *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPage,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoAxis(SoAxis *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoAxis,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoAxes2D(SoAxes2D *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoAxes2D,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoAxes3D(SoAxes3D *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoAxes3D,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTubs(SoTubs *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTubs,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoBox(SoBox *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoBox,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCons(SoCons *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCons,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTrap(SoTrap *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTrap,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTrd(SoTrd *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTrd,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoTorus(SoTorus *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoTorus,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPcon(SoPcon *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPcon,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoWedge(SoWedge *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoWedge,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPolyVol(SoPolyVol *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPolyVol,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPolyhedron(SoPolyhedron *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPolyhedron,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoArrow(SoArrow *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoArrow,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoEllipsoid(SoEllipsoid *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoEllipsoid,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoEllipsoidSegment(SoEllipsoidSegment *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoEllipsoidSegment,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoEllipticalPrism(SoEllipticalPrism *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoEllipticalPrism,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_So3DErrorBar(So3DErrorBar *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#So3DErrorBar,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoCoordinateAxis(SoCoordinateAxis *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoCoordinateAxis,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoDetectorExample(SoDetectorExample *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoDetectorExample,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoDetectorTreeKit(SoDetectorTreeKit *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoDetectorTreeKit,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPlotter(SoPlotter *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPlotter,(unsigned long)self);
      self->unref(); 
    }
SWIGINTERN void delete_SoPlotterRegion(SoPlotterRegion *self){ 
      //printf("debug : SWIG : dstor %s %lu\n",#SoPlotterRegion,(unsigned long)self);
      self->unref(); 
    }


// To test technicalities (mainly typemaps) :

class OnX_SWIG_Test {
public:
  OnX_SWIG_Test() {
    fVectorString.push_back("Item 1");
    fVectorString.push_back("Item 2");
    fVectorString.push_back("Item 3");

    fVectorDouble.push_back(1.1);
    fVectorDouble.push_back(2.2);
    fVectorDouble.push_back(3.3);

    fVectorInt.push_back(1);
    fVectorInt.push_back(2);
    fVectorInt.push_back(3);
  } 
  virtual ~OnX_SWIG_Test() {}
  // std::vector<std::string> : 
  void arg_const_std_vec_string(const std::vector<std::string>& aVector) {
    printf("OnX_SWIG_Test::arg_const_std_vec_string : %d\n",
      (int)aVector.size());
    for(unsigned int index=0;index<aVector.size();index++){
      printf("%s\n",aVector[index].c_str());
    }
  }
  void arg_std_vec_string(std::vector<std::string> aVector) {
    printf("OnX_SWIG_Test::arg_std_vec_string : %d\n",
      (int)aVector.size());
    for(unsigned int index=0;index<aVector.size();index++){
      printf("%s\n",aVector[index].c_str());
    }
  }
  std::vector<std::string> ret_std_vec_string() const { return fVectorString;}
  const std::vector<std::string>& ret_const_std_vec_string() const { 
    return fVectorString;
  }
  // std::vector<double> : 
  void arg_const_std_vec_double(const std::vector<double>& aVector) {
    printf("OnX_SWIG_Test::arg_const_std_vec_double : %d\n",
      (int)aVector.size());
    for(unsigned int index=0;index<aVector.size();index++){
      printf("%g\n",aVector[index]);
    }
  }
  void arg_std_vec_double(std::vector<double> aVector) {
    printf("OnX_SWIG_Test::arg_std_vec_double : %d\n",
      (int)aVector.size());
    for(unsigned int index=0;index<aVector.size();index++){
      printf("%g\n",aVector[index]);
    }
  }
  std::vector<double> ret_std_vec_double() const { return fVectorDouble;}
  const std::vector<double>& ret_const_std_vec_double() const { 
    return fVectorDouble;
  }

  // std::vector<int> : 
  void arg_const_std_vec_int(const std::vector<int>& aVector) {
    printf("OnX_SWIG_Test::arg_const_std_vec_int : %d\n",
      (int)aVector.size());
    for(unsigned int index=0;index<aVector.size();index++){
      printf("%d\n",aVector[index]);
    }
  }
  void arg_std_vec_int(std::vector<int> aVector) {
    printf("OnX_SWIG_Test::arg_std_vec_int : %d\n",
      (int)aVector.size());
    for(unsigned int index=0;index<aVector.size();index++){
      printf("%d\n",aVector[index]);
    }
  }
  std::vector<int> ret_std_vec_int() const { return fVectorInt;}
  const std::vector<int>& ret_const_std_vec_int() const { 
    return fVectorInt;
  }
private:
  std::vector<std::string> fVectorString;
  std::vector<double> fVectorDouble;
  std::vector<int> fVectorInt;
};



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1IManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Slash::Core::IManager *arg1 = (Slash::Core::IManager *) 0 ; (void)jenv; (void)jcls; arg1 = *(Slash::Core::IManager **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IManager_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::Core::IManager *arg1 = (Slash::Core::IManager *) 0 ; std::string *arg2 = 0 ; void *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::IManager **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((Slash::Core::IManager const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IManager_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; Slash::Core::IManager *arg1 = (Slash::Core::IManager *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Core::IManager **)&jarg1;  result = ((Slash::Core::IManager const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IManager_1cast_1Lib_1IProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::IManager *arg1 = (Slash::Core::IManager *) 0 ; Slash::Data::IProcessor *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::IManager **)&jarg1; 
  result = (Slash::Data::IProcessor *)Slash_Core_IManager_cast_Lib_IProcessor(arg1);
  *(Slash::Data::IProcessor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1ISession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; (void)jenv; (void)jcls; arg1 = *(Slash::Core::ISession **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; void *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((Slash::Core::ISession const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1addManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::Core::IManager *arg2 = (Slash::Core::IManager *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  arg2 = *(Slash::Core::IManager **)&jarg2;  (arg1)->addManager(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1removeManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::Core::IManager *arg2 = (Slash::Core::IManager *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  arg2 = *(Slash::Core::IManager **)&jarg2;  (arg1)->removeManager(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1findManager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; bool arg3 ;
  Slash::Core::IManager *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (Slash::Core::IManager *)((Slash::Core::ISession const *)arg1)->findManager((std::string const &)*arg2,arg3);
  *(Slash::Core::IManager **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1findManager_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ;
  Slash::Core::IManager *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Slash::Core::IManager *)((Slash::Core::ISession const *)arg1)->findManager((std::string const &)*arg2);
  *(Slash::Core::IManager **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1destroyManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->destroyManager((std::string const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1printer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::Core::IWriter *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  { Slash::Core::IWriter &_result_ref = (arg1)->printer();
    result = (Slash::Core::IWriter *) &_result_ref; }  *(Slash::Core::IWriter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::ostream *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  { std::ostream &_result_ref = (arg1)->out();
    result = (std::ostream *) &_result_ref; }  *(std::ostream **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1cout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::ostream *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  { std::ostream &_result_ref = (arg1)->cout();
    result = (std::ostream *) &_result_ref; }  *(std::ostream **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->load((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1redirectOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; bool arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Core::ISession **)&jarg1;  arg2 = jarg2 ? true : false;  (arg1)->redirectOutput(arg2); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1parameterValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)(arg1)->parameterValue((std::string const &)*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1removeParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->removeParameter((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_ISession_1availableParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = ((Slash::Core::ISession const *)arg1)->availableParameters(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  result = (bool)(arg1)->flush(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1setVerboseLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Core::ISession **)&jarg1;  arg2 = (int)jarg2;  (arg1)->setVerboseLevel(arg2); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_ISession_1verboseLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  result = (int)((Slash::Core::ISession const *)arg1)->verboseLevel();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1numberOfManagers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = (unsigned int)((Slash::Core::ISession const *)arg1)->numberOfManagers(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1manager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; unsigned int arg2 ;
  Slash::Core::IManager *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  arg2 = (unsigned int)jarg2;  result = (Slash::Core::IManager *)((Slash::Core::ISession const *)arg1)->manager(arg2);
  *(Slash::Core::IManager **)&jresult = result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_ISession_1managerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = ((Slash::Core::ISession const *)arg1)->managerNames(); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1arguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ;
  SwigValueWrapper< std::vector<std::pair<std::string,std::string > > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Core::ISession **)&jarg1;  result = ((Slash::Core::ISession const *)arg1)->arguments();
  *(std::vector<std::pair<std::string,std::string > > **)&jresult = new std::vector<std::pair<std::string,std::string > >((std::vector<std::pair<std::string,std::string > > &)result); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_ISession_1parameterValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; std::string result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Slash_Core_ISession_parameterValue__SWIG_1(arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1setColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; double arg2 ; double arg3 ; double arg4 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  arg2 = (double)jarg2;  arg3 = (double)jarg3;  arg4 = (double)jarg4; 
  Slash_Core_ISession_setColor__SWIG_0(arg1,arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_ISession_1setColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  Slash_Core_ISession_setColor__SWIG_1(arg1,(std::string const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1accessorManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::Data::IProcessor *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = (Slash::Data::IProcessor *)Slash_Core_ISession_accessorManager(arg1);
  *(Slash::Data::IProcessor **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1scriptManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::UI::IScriptManager *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = (Slash::UI::IScriptManager *)Slash_Core_ISession_scriptManager(arg1);
  *(Slash::UI::IScriptManager **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1uiManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::UI::IUI_Manager *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = (Slash::UI::IUI_Manager *)Slash_Core_ISession_uiManager(arg1); *(Slash::UI::IUI_Manager **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1ui(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::UI::IUI *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  result = (Slash::UI::IUI *)Slash_Core_ISession_ui(arg1);
  *(Slash::UI::IUI **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1createUI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; bool arg3 ;
  std::string *arg4 = 0 ; Slash::UI::IUI *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (Slash::UI::IUI *)Slash_Core_ISession_createUI__SWIG_0(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
  *(Slash::UI::IUI **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1createUI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; bool arg3 ;
  Slash::UI::IUI *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (Slash::UI::IUI *)Slash_Core_ISession_createUI__SWIG_0(arg1,(std::string const &)*arg2,arg3);
  *(Slash::UI::IUI **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1createUI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ;
  Slash::UI::IUI *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Slash::UI::IUI *)Slash_Core_ISession_createUI__SWIG_0(arg1,(std::string const &)*arg2);
  *(Slash::UI::IUI **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_ISession_1createUI_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; Slash::UI::IUI *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1; 
  result = (Slash::UI::IUI *)Slash_Core_ISession_createUI__SWIG_0(arg1); *(Slash::UI::IUI **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1loadInterpreter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; bool arg3 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)Slash_Core_ISession_loadInterpreter__SWIG_0(arg1,(std::string const &)*arg2,arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_ISession_1loadInterpreter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::Core::ISession *arg1 = (Slash::Core::ISession *) 0 ; std::string *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Core::ISession **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Slash_Core_ISession_loadInterpreter__SWIG_0(arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_Slash_1create_1session(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ; std::vector<std::string > const &arg1_defvalue = std::vector<std::string >() ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) &arg1_defvalue ; Slash::Core::ISession *result = 0 ;
  (void)jenv; (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (Slash::Core::ISession *)Slash_create_session((std::vector<std::string > const &)*arg1);
  *(Slash::Core::ISession **)&jresult = result;  { delete arg1; }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1IUI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; (void)jenv; (void)jcls; arg1 = *(Slash::UI::IUI **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; void *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((Slash::UI::IUI const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)((Slash::UI::IUI const *)arg1)->isValid(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1executeScript_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  Slash::UI::IUI::Options *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Slash::UI::IUI::Options **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IUI::Options const & reference is null");
    return 0; }  
  result = (bool)(arg1)->executeScript((std::string const &)*arg2,(std::string const &)*arg3,(Slash::UI::IUI::Options const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1executeScript_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->executeScript((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->put((std::string const &)*arg2); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_IUI_1steer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) { jint jresult = 0 ;
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (int)(arg1)->steer(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_IUI_1steerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (int)((Slash::UI::IUI const *)arg1)->steerLevel(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1synchronize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  (arg1)->synchronize(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1exit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = (int)jarg2;  (arg1)->exit(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1exit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  (arg1)->exit(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1steerModal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  (arg1)->steerModal(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1exitModal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  (arg1)->exitModal(); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1show_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)(arg1)->show(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)(arg1)->lock(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)(arg1)->unlock(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1echo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->echo((std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1warn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->warn((std::string const &)*arg2); }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IUI_1ask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->ask((std::string const &)*arg2); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1addDispatcher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IUI::Dispatcher arg2 = (Slash::UI::IUI::Dispatcher) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = *(Slash::UI::IUI::Dispatcher *)&jarg2; 
  (arg1)->addDispatcher(arg2); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1setCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; int arg6 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr);  arg6 = (int)jarg6; 
  result = (bool)(arg1)->setCallback((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1setCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string *arg5 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (bool)(arg1)->setCallback((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1removeCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  int arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  arg4 = (int)jarg4; 
  result = (bool)(arg1)->removeCallback((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1removeCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->removeCallback((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IUI_1callbackValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (arg1)->callbackValue(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1callbackData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::ICallbackData *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  {
    Slash::UI::ICallbackData const &_result_ref = (arg1)->callbackData(); result = (Slash::UI::ICallbackData *) &_result_ref; } 
  *(Slash::UI::ICallbackData **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1setCallbackData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::ICallbackData *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = *(Slash::UI::ICallbackData **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::ICallbackData const & reference is null");
    return 0; }   result = (bool)(arg1)->setCallbackData((Slash::UI::ICallbackData const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1parameterValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)(arg1)->parameterValue((std::string const &)*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1executeCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->executeCallbacks((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->load((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->load((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->load((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)(arg1)->save(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1deleteChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->deleteChildren((std::string const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1createCyclic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; int arg3 ; std::string *arg4 = 0 ;
  std::string *arg5 = 0 ; Slash::UI::ICyclic *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  arg3 = (int)jarg3; 
  if(!jarg4) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr);  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0);  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr); arg5 = &arg5_str; jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (Slash::UI::ICyclic *)(arg1)->createCyclic((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(Slash::UI::ICyclic **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1findCyclic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; Slash::UI::ICyclic *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Slash::UI::ICyclic *)((Slash::UI::IUI const *)arg1)->findCyclic((std::string const &)*arg2);
  *(Slash::UI::ICyclic **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1removeCyclic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::ICyclic **arg2 = 0 ; bool result;
  Slash::UI::ICyclic *temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  temp2 = *(Slash::UI::ICyclic **)&jarg2; arg2 = &temp2;  result = (bool)(arg1)->removeCyclic(*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IUI_1createWidgetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (arg1)->createWidgetName(); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1findWidgetClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ;
  Slash::UI::IWidgetClass *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Slash::UI::IWidgetClass *)((Slash::UI::IUI const *)arg1)->findWidgetClass((std::string const &)*arg2);
  *(Slash::UI::IWidgetClass **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1findWidget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; Slash::UI::IWidget *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Slash::UI::IWidget *)((Slash::UI::IUI const *)arg1)->findWidget((std::string const &)*arg2);
  *(Slash::UI::IWidget **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1createWidget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jobjectArray jarg5) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidgetClass *arg2 = 0 ; std::string *arg3 = 0 ;
  Slash::UI::IWidget *arg4 = 0 ; std::vector<std::string > *arg5 = 0 ; Slash::UI::IWidget *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg4_; arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = *(Slash::UI::IWidgetClass **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidgetClass const & reference is null");
    return 0; }   if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Slash::UI::IWidget **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidget & reference is null"); return 0; }   {
    int i = 0; jint size = jenv->GetArrayLength(jarg5); arg5 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg5, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg5->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (Slash::UI::IWidget *)(arg1)->createWidget((Slash::UI::IWidgetClass const &)*arg2,(std::string const &)*arg3,*arg4,(std::vector<std::string > const &)*arg5);
  *(Slash::UI::IWidget **)&jresult = result;  { delete arg5; }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1createWidget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidgetClass *arg2 = 0 ; std::string *arg3 = 0 ;
  Slash::UI::IWidget *arg4 = 0 ; Slash::UI::IWidget *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg4_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = *(Slash::UI::IWidgetClass **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidgetClass const & reference is null");
    return 0; }   if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Slash::UI::IWidget **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidget & reference is null"); return 0; }  
  result = (Slash::UI::IWidget *)(arg1)->createWidget((Slash::UI::IWidgetClass const &)*arg2,(std::string const &)*arg3,*arg4);
  *(Slash::UI::IWidget **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1destroyWidget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidget **arg2 = 0 ; bool result;
  Slash::UI::IWidget *temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  temp2 = *(Slash::UI::IWidget **)&jarg2; arg2 = &temp2;  result = (bool)(arg1)->destroyWidget(*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1findWidgetByAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool arg4 ;
  bool arg5 ; Slash::UI::IWidget *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false; 
  result = (Slash::UI::IWidget *)((Slash::UI::IUI const *)arg1)->findWidgetByAttribute((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  *(Slash::UI::IWidget **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1findWidgetByAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool arg4 ;
  Slash::UI::IWidget *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (Slash::UI::IWidget *)((Slash::UI::IUI const *)arg1)->findWidgetByAttribute((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(Slash::UI::IWidget **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1findWidgetByAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  Slash::UI::IWidget *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (Slash::UI::IWidget *)((Slash::UI::IUI const *)arg1)->findWidgetByAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  *(Slash::UI::IWidget **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1load_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidget *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool arg5 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  arg2 = *(Slash::UI::IWidget **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidget & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->load(*arg2,(std::string const &)*arg3,arg4,arg5); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1load_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidget *arg2 = 0 ; std::string *arg3 = 0 ;
  bool arg4 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  arg2 = *(Slash::UI::IWidget **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidget & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false;  result = (bool)(arg1)->load(*arg2,(std::string const &)*arg3,arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1load_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidget *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  arg2 = *(Slash::UI::IWidget **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::UI::IWidget & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->load(*arg2,(std::string const &)*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1currentWidget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidget *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  result = (Slash::UI::IWidget *)((Slash::UI::IUI const *)arg1)->currentWidget(); *(Slash::UI::IWidget **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1setCurrentWidget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::UI::IWidget *arg2 = (Slash::UI::IWidget *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(Slash::UI::IUI **)&jarg1; 
  arg2 = *(Slash::UI::IWidget **)&jarg2;  result = (bool)(arg1)->setCurrentWidget(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1createComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->createComponent((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1destroyComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->destroyComponent((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1copyComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->copyComponent((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_IUI_1findChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jobjectArray jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((Slash::UI::IUI const *)arg1)->findChildren((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  { const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_IUI_1findParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jobjectArray jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((Slash::UI::IUI const *)arg1)->findParent((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  { const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1isComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->isComponent((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1session(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; Slash::Core::ISession *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  { Slash::Core::ISession &_result_ref = (arg1)->session();
    result = (Slash::Core::ISession *) &_result_ref; }  *(Slash::Core::ISession **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1notify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ;
  Slash::Core::IMessage *arg2 = (Slash::Core::IMessage *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = *(Slash::Core::IMessage **)&jarg2;  result = (bool)(arg1)->notify(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1beingDestroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)((Slash::UI::IUI const *)arg1)->beingDestroyed();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1enableTerminal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->enableTerminal((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1disableTerminal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (bool)(arg1)->disableTerminal(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1redirectAskToTerminal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->redirectAskToTerminal(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1lockScreen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->lockScreen((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1lockScreen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->lockScreen((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1lockScreen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->lockScreen((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1atat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)((Slash::UI::IUI const *)arg1)->atat((std::string const &)*arg2,*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1show_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->show((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IUI_1parameterValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Slash_UI_IUI_parameterValue__SWIG_1(arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IUI_1setTreeItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)Slash_UI_IUI_setTreeItems(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1showHelp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  Slash_UI_IUI_showHelp(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1showDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IUI **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  Slash_UI_IUI_showDialog(arg1,(std::string const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IUI_1currentPage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; SoPage *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  result = (SoPage *)Slash_UI_IUI_currentPage(arg1); *(SoPage **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IUI_1dumpNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Slash::UI::IUI *arg1 = (Slash::UI::IUI *) 0 ; SoNode *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(Slash::UI::IUI **)&jarg1;  arg2 = *(SoNode **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SoNode & reference is null"); return ; }  
  Slash_UI_IUI_dumpNode(arg1,*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1IWidget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; (void)jenv; (void)jcls; arg1 = *(Slash::UI::IWidget **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IWidget_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string *arg2 = 0 ; void *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (void *)((Slash::UI::IWidget const *)arg1)->cast((std::string const &)*arg2); *(void **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IWidget_1widgetClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; Slash::UI::IWidgetClass *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  {
    Slash::UI::IWidgetClass const &_result_ref = ((Slash::UI::IWidget const *)arg1)->widgetClass();
    result = (Slash::UI::IWidgetClass *) &_result_ref; }  *(Slash::UI::IWidgetClass **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IWidget_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  result = ((Slash::UI::IWidget const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IWidget_1nativeWidget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; void *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  result = (void *)((Slash::UI::IWidget const *)arg1)->nativeWidget();
  *(void **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1executeCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->executeCallbacks((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; unsigned int *arg2 = 0 ; unsigned int *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  arg2 = *(unsigned int **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  arg3 = *(unsigned int **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  result = (bool)(arg1)->size(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; int *arg2 = 0 ; int *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  arg2 = *(int **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return 0; }  
  arg3 = *(int **)&jarg3; if(!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0; }   result = (bool)(arg1)->position(*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->write((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->write((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->setParameter((std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1parameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)(arg1)->parameterValue((std::string const &)*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  result = (bool)(arg1)->refresh(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1manage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; bool arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  arg2 = jarg2 ? true : false;  result = (bool)(arg1)->manage(arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1show(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  result = (bool)(arg1)->show(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IWidget_1hide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1;  result = (bool)(arg1)->hide(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IWidget_1cast_1ISoViewer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::UI::IWidget *arg1 = (Slash::UI::IWidget *) 0 ; Slash::UI::ISoViewer *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::UI::IWidget **)&jarg1; 
  result = (Slash::UI::ISoViewer *)Slash_UI_IWidget_cast_ISoViewer(arg1); *(Slash::UI::ISoViewer **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1IProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::ostream *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  { std::ostream &_result_ref = (arg1)->out();
    result = (std::ostream *) &_result_ref; }  *(std::ostream **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1setVerboseLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  arg2 = (int)jarg2;  (arg1)->setVerboseLevel(arg2); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_IProcessor_1verboseLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  result = (int)((Slash::Data::IProcessor const *)arg1)->verboseLevel(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1addAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; Slash::Data::IAccessor *arg2 = (Slash::Data::IAccessor *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  arg2 = *(Slash::Data::IAccessor **)&jarg2; 
  (arg1)->addAccessor(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1removeAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeAccessor((std::string const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1findAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ;
  Slash::Data::IAccessor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Slash::Data::IAccessor *)(arg1)->findAccessor((std::string const &)*arg2);
  *(Slash::Data::IAccessor **)&jresult = result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_IProcessor_1accessorNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  result = ((Slash::Data::IProcessor const *)arg1)->accessorNames(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1accessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ;
  SwigValueWrapper< std::vector<Slash::Data::IAccessor * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  result = ((Slash::Data::IProcessor const *)arg1)->accessors();
  *(std::vector<Slash::Data::IAccessor * > **)&jresult = new std::vector<Slash::Data::IAccessor * >((std::vector<Slash::Data::IAccessor * > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1addAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; Slash::Core::IAction *arg2 = (Slash::Core::IAction *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  arg2 = *(Slash::Core::IAction **)&jarg2; 
  (arg1)->addAction(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1removeAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeAction((std::string const &)*arg2); }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_IProcessor_1actionNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  result = ((Slash::Data::IProcessor const *)arg1)->actionNames(); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_IProcessor_1execute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobjectArray jarg3) {
  jstring jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ;
  std::vector<std::string > *arg3 = 0 ; std::string result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg3); arg3 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg3, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg3->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (arg1)->execute((std::string const &)*arg2,(std::vector<std::string > const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str());  { delete arg3; }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1addHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; Slash::Data::IAccessor *arg2 = (Slash::Data::IAccessor *) 0 ;
  Slash::Data::IAccessor::Data arg3 ; void *arg4 = (void *) 0 ; Slash::Data::IAccessor::Data *argp3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  arg2 = *(Slash::Data::IAccessor **)&jarg2; 
  argp3 = *(Slash::Data::IAccessor::Data **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Slash::Data::IAccessor::Data");
    return ; }  arg3 = *argp3;  arg4 = *(void **)&jarg4;  (arg1)->addHandler(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1numberOfHandlers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  result = (unsigned int)((Slash::Data::IProcessor const *)arg1)->numberOfHandlers(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1handlersIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ;
  Slash::Data::IHandlersIterator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  result = (Slash::Data::IHandlersIterator *)((Slash::Data::IProcessor const *)arg1)->handlersIterator();
  *(Slash::Data::IHandlersIterator **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1eraseHandlers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  (arg1)->eraseHandlers(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1addOutHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; Slash::Data::IAccessor *arg2 = (Slash::Data::IAccessor *) 0 ;
  Slash::Data::IAccessor::Data arg3 ; void *arg4 = (void *) 0 ; Slash::Data::IAccessor::Data *argp3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  arg2 = *(Slash::Data::IAccessor **)&jarg2; 
  argp3 = *(Slash::Data::IAccessor::Data **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Slash::Data::IAccessor::Data");
    return ; }  arg3 = *argp3;  arg4 = *(void **)&jarg4;  (arg1)->addOutHandler(arg2,arg3,arg4); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1outHandlersIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ;
  Slash::Data::IHandlersIterator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  result = (Slash::Data::IHandlersIterator *)((Slash::Data::IProcessor const *)arg1)->outHandlersIterator();
  *(Slash::Data::IHandlersIterator **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1eraseOutHandlers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  (arg1)->eraseOutHandlers(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1swapHandlers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  (arg1)->swapHandlers(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_IProcessor_1handlersAccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ;
  SwigValueWrapper< std::vector<Slash::Data::IAccessor * > > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  result = ((Slash::Data::IProcessor const *)arg1)->handlersAccessors();
  *(std::vector<Slash::Data::IAccessor * > **)&jresult = new std::vector<Slash::Data::IAccessor * >((std::vector<Slash::Data::IAccessor * > &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_IProcessor_1type_1id_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ;
  Slash::Data::IAccessor **arg3 = 0 ; void **arg4 = 0 ; void **arg5 = 0 ; bool result; Slash::Data::IAccessor *temp3 = 0 ;
  void *temp4 = 0 ; void *temp5 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = *(Slash::Data::IAccessor **)&jarg3; arg3 = &temp3;  temp4 = *(void **)&jarg4; arg4 = &temp4; 
  temp5 = *(void **)&jarg5; arg5 = &temp5;  result = (bool)(arg1)->type_id_tag((std::string const &)*arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1collect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  Slash_Data_IProcessor_collect__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1collect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  Slash_Data_IProcessor_collect__SWIG_0(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1visualize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  Slash_Data_IProcessor_visualize__SWIG_0(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1visualize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  Slash_Data_IProcessor_visualize__SWIG_0(arg1); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_IProcessor_1number(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  result = (int)Slash_Data_IProcessor_number(arg1);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_IProcessor_1values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobjectArray jresult = 0 ; Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ;
  std::vector<std::string > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Slash_Data_IProcessor_values(arg1,(std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1dump_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  Slash_Data_IProcessor_dump__SWIG_0(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1dump_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  Slash_Data_IProcessor_dump__SWIG_0(arg1); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1filter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  Slash_Data_IProcessor_filter__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1filter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  Slash_Data_IProcessor_filter__SWIG_0(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(Slash::Data::IProcessor **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  Slash_Data_IProcessor_set(arg1,(std::string const &)*arg2,(std::string const &)*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_IProcessor_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Slash::Data::IProcessor *arg1 = (Slash::Data::IProcessor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Slash::Data::IProcessor **)&jarg1;  Slash_Data_IProcessor_destroy(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_Slash_1cout(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; std::ostream *result = 0 ;
  (void)jenv; (void)jcls; { std::ostream &_result_ref = Slash_cout(); result = (std::ostream *) &_result_ref; } 
  *(std::ostream **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_Slash_1cerr(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; std::ostream *result = 0 ;
  (void)jenv; (void)jcls; { std::ostream &_result_ref = Slash_cerr(); result = (std::ostream *) &_result_ref; } 
  *(std::ostream **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1strip_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jchar jarg3) {
  std::string *arg1 = 0 ; Lib::smanip::what arg2 ; char arg3 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1;
  if(!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  arg2 = (Lib::smanip::what)jarg2;  arg3 = (char)jarg3;  Lib::smanip::strip(*arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1strip_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  std::string *arg1 = 0 ; Lib::smanip::what arg2 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  arg2 = (Lib::smanip::what)jarg2;  Lib::smanip::strip(*arg1,arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1strip_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  Lib::smanip::strip(*arg1); }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1strp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jchar jarg3) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; Lib::smanip::what arg2 ; char arg3 ; std::string result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (Lib::smanip::what)jarg2;  arg3 = (char)jarg3;  result = Lib::smanip::strp((std::string const &)*arg1,arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1strp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; Lib::smanip::what arg2 ; std::string result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (Lib::smanip::what)jarg2;  result = Lib::smanip::strp((std::string const &)*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1strp_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::strp((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1justify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; unsigned int arg2 ; Lib::smanip::side arg3 ; bool result; (void)jenv;
  (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg2 = (unsigned int)jarg2;  arg3 = (Lib::smanip::side)jarg3;  result = (bool)Lib::smanip::justify(*arg1,arg2,arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1justify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; unsigned int arg2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg2 = (unsigned int)jarg2;  result = (bool)Lib::smanip::justify(*arg1,arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::smanip::match((std::string const &)*arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1prepend(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > *arg2 = 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg2->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = Lib::smanip::prepend((std::string const &)*arg1,(std::vector<std::string > const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  { delete arg2; }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1append(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  jobjectArray jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Lib::smanip::append((std::vector<std::string > const &)*arg1,(std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  { delete arg1; }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  jobjectArray jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Lib::smanip::match((std::vector<std::string > const &)*arg1,(std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  { delete arg1; }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1getenv(JNIEnv *jenv, jclass jcls, jlong jarg1) { jboolean jresult = 0 ;
  std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::getenv(*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1replace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)Lib::smanip::replace(*arg1,(std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1printf(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; int arg2 ; char *arg3 = (char *) 0 ; void *arg4 = 0 ; bool result; (void)jenv;
  (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg2 = (int)jarg2;  arg3 = 0; if (jarg3) { arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (bool)Lib::smanip::printf(*arg1,arg2,(char const *)arg3,arg4); jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1toint(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; int *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(int **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return 0; }  
  result = (bool)Lib::smanip::toint((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1touint(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; unsigned int *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(unsigned int **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  result = (bool)Lib::smanip::touint((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1touintx(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; unsigned int *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(unsigned int **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  result = (bool)Lib::smanip::touintx((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1topointer(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; void **arg2 = 0 ; bool result; void *temp2 = 0 ; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  temp2 = *(void **)&jarg2;
  arg2 = &temp2;  result = (bool)Lib::smanip::topointer((std::string const &)*arg1,*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1tobool(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; bool *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(bool **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null"); return 0; }  
  result = (bool)Lib::smanip::tobool((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1tofloat(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; float *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(float **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  result = (bool)Lib::smanip::tofloat((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1todouble(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; double *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(double **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  result = (bool)Lib::smanip::todouble((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1touint64(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; Lib::uint64 *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Lib::uint64 **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Lib::uint64 & reference is null"); return 0; }  
  result = (bool)Lib::smanip::touint64((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1toint64(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; Lib::int64 *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Lib::int64 **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Lib::int64 & reference is null"); return 0; }  
  result = (bool)Lib::smanip::toint64((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1toints(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<int > *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<int > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null"); return 0; }  
  result = (bool)Lib::smanip::toints((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1todoubles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::vector<double > *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  arg2 = *(std::vector<double > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double > & reference is null"); return 0; }  
  result = (bool)Lib::smanip::todoubles((std::vector<std::string > const &)*arg1,*arg2); jresult = (jboolean)result;  {
    delete arg1; }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1todoubles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<double > *arg2 = 0 ; std::string *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<double > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double > & reference is null"); return 0; }  
  if(!jarg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)Lib::smanip::todoubles((std::string const &)*arg1,*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1todoubles_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<double > *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<double > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double > & reference is null"); return 0; }  
  result = (bool)Lib::smanip::todoubles((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1tolowercase(JNIEnv *jenv, jclass jcls, jlong jarg1) { std::string *arg1 = 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  Lib::smanip::tolowercase(*arg1); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1touppercase(JNIEnv *jenv, jclass jcls, jlong jarg1) { std::string *arg1 = 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  Lib::smanip::touppercase(*arg1); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1togeometry(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; int *arg2 = 0 ; int *arg3 = 0 ; int *arg4 = 0 ; int *arg5 = 0 ; bool result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(int **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return 0; }  
  arg3 = *(int **)&jarg3; if(!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0; }   arg4 = *(int **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return 0; }  
  arg5 = *(int **)&jarg5; if(!arg5) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0; }   result = (bool)Lib::smanip::togeometry((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tocstring(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; char *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (char *)Lib::smanip::tocstring((std::string const &)*arg1);
  if(result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1polynomialDegree(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; int *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(int **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return 0; }  
  result = (bool)Lib::smanip::polynomialDegree((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_smanip_1axtoi(JNIEnv *jenv, jclass jcls, jstring jarg1) { jint jresult = 0 ;
  std::string *arg1 = 0 ; int result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)Lib::smanip::axtoi((std::string const &)*arg1); jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1pathNameSuffix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string *arg4 = 0 ;
  bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg4 = *(std::string **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::pathNameSuffix((std::string const &)*arg1,*arg2,*arg3,*arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1isAbsolutePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::smanip::isAbsolutePath((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1pathWords(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > *arg2 = 0 ; bool *arg3 = 0 ; bool *arg4 = 0 ;
  std::string *arg5 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<std::string > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  arg3 = *(bool **)&jarg3; if(!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0; }   arg4 = *(bool **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null"); return 0; }  
  arg5 = *(std::string **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::pathWords((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1suffix(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::suffix((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1nosuffix(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::nosuffix((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1words_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool arg3 ; std::vector<std::string > result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false;  result = Lib::smanip::words((std::string const &)*arg1,(std::string const &)*arg2,arg3); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1words_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Lib::smanip::words((std::string const &)*arg1,(std::string const &)*arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1words_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jboolean jarg4) {
  std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > *arg3 = 0 ; bool arg4 ; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector<std::string > **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  arg4 = jarg4 ? true : false;  Lib::smanip::words((std::string const &)*arg1,(std::string const &)*arg2,*arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1words_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > *arg3 = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector<std::string > **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::words((std::string const &)*arg1,(std::string const &)*arg2,*arg3); }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1text(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::text((std::string const &)*arg1); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1dump_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string *arg1 = 0 ; Slash::Core::IWriter *arg2 = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Slash::Core::IWriter **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::Core::IWriter & reference is null"); return ; }  
  Lib::smanip::dump((std::string const &)*arg1,*arg2); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::smanip::remove(*arg1,(std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1removeLinesWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::smanip::removeLinesWith(*arg1,(std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1unique(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::string > *arg1 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::unique(*arg1); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1lineIndex(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; unsigned int *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(unsigned int **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null"); return 0; }  
  result = (bool)Lib::smanip::lineIndex((std::vector<std::string > const &)*arg1,(std::string const &)*arg2,*arg3);
  jresult = (jboolean)result;  { delete arg1; }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1belong(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; {
    int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::smanip::belong((std::vector<std::string > const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result;  { delete arg1; }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1write(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jlong jarg2) {
  std::vector<std::string > *arg1 = 0 ; Slash::Core::IWriter *arg2 = 0 ; (void)jenv; (void)jcls; { int i = 0;
    jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  arg2 = *(Slash::Core::IWriter **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::Core::IWriter & reference is null"); return ; }  
  Lib::smanip::write((std::vector<std::string > const &)*arg1,*arg2); { delete arg1; }  }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1torgb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; bool result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(double **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  arg3 = *(double **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  arg4 = *(double **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  result = (bool)Lib::smanip::torgb((std::string const &)*arg1,*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1torgba_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ;
  bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(double **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  arg3 = *(double **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  arg4 = *(double **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  arg5 = *(double **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null"); return 0; }  
  result = (bool)Lib::smanip::torgba((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1torgbs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::torgbs((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1torgb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; bool result; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(float **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  arg4 = *(float **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  result = (bool)Lib::smanip::torgb((std::string const &)*arg1,*arg2,*arg3,*arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1torgba_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; float *arg5 = 0 ;
  bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(float **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  arg4 = *(float **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  arg5 = *(float **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  result = (bool)Lib::smanip::torgba((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1justifylines(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jlong jarg2) {
  std::vector<std::string > *arg1 = 0 ; std::vector<std::string > *arg2 = 0 ; (void)jenv; (void)jcls; { int i = 0;
    jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  arg2 = *(std::vector<std::string > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::justifylines((std::vector<std::string > const &)*arg1,*arg2); { delete arg1; }  }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1strip_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jchar jarg3) {
  std::vector<std::string > *arg1 = 0 ; Lib::smanip::what arg2 ; char arg3 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  arg2 = (Lib::smanip::what)jarg2;  arg3 = (char)jarg3;  Lib::smanip::strip(*arg1,arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1strip_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  std::vector<std::string > *arg1 = 0 ; Lib::smanip::what arg2 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  arg2 = (Lib::smanip::what)jarg2;  Lib::smanip::strip(*arg1,arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1strip_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::string > *arg1 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::strip(*arg1); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1replace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)Lib::smanip::replace(*arg1,(std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1sort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  std::vector<std::string > *arg1 = 0 ; bool arg2 ; (void)jenv; (void)jcls; arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return ; }   arg2 = jarg2 ? true : false;  Lib::smanip::sort(*arg1,arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1sort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::string > *arg1 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::sort(*arg1); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1cmpsort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::string > *arg1 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector<std::string > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::cmpsort(*arg1); }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; bool arg3 ; std::string result;
  (void)jenv; (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = Lib::smanip::tostring((std::vector<std::string > const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str());  { delete arg1; }  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  jstring jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; std::string result; (void)jenv;
  (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Lib::smanip::tostring((std::vector<std::string > const &)*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  { delete arg1; }  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jstring jresult = 0 ; unsigned char arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (unsigned char)jarg1; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jstring jresult = 0 ; char arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (char)jarg1; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; unsigned int arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ; int arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (int)jarg1; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; Lib::uint64 arg1 ; std::string result; Lib::uint64 *argp1 ; (void)jenv; (void)jcls;
  argp1 = *(Lib::uint64 **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Lib::uint64"); return 0; } 
  arg1 = *argp1;  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; Lib::int64 arg1 ; std::string result; Lib::int64 *argp1 ; (void)jenv; (void)jcls;
  argp1 = *(Lib::int64 **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Lib::int64"); return 0; } 
  arg1 = *argp1;  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jstring jresult = 0 ; float arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (float)jarg1; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jstring jresult = 0 ; double arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jstring jresult = 0 ; bool arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = jarg1 ? true : false; 
  result = Lib::smanip::tostring(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::tostring((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jstring jresult = 0 ; char *arg1 = (char *) 0 ; unsigned int arg2 ; std::string result; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = (unsigned int)jarg2; 
  result = Lib::smanip::tostring((char const *)arg1,arg2); jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostring_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ; unsigned int arg1 ; char **arg2 ; std::string result; (void)jenv; (void)jcls;
  arg1 = (unsigned int)jarg1;  arg2 = *(char ***)&jarg2;  result = Lib::smanip::tostring(arg1,(char const *(*))arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1tostringx(JNIEnv *jenv, jclass jcls, jlong jarg1) { jstring jresult = 0 ;
  unsigned int arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  result = Lib::smanip::tostringx(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1p2s(JNIEnv *jenv, jclass jcls, jlong jarg1) { jstring jresult = 0 ;
  void *arg1 = (void *) 0 ; std::string result; (void)jenv; (void)jcls; arg1 = *(void **)&jarg1; 
  result = Lib::smanip::p2s(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1p2sx(JNIEnv *jenv, jclass jcls, jlong jarg1) { jstring jresult = 0 ;
  void *arg1 = (void *) 0 ; std::string result; (void)jenv; (void)jcls; arg1 = *(void **)&jarg1; 
  result = Lib::smanip::p2sx(arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1dump_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<std::pair<std::string,std::string > > *arg1 = 0 ; Slash::Core::IWriter *arg2 = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector<std::pair<std::string,std::string > > **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<std::string,std::string > > const & reference is null");
    return ; }   arg2 = *(Slash::Core::IWriter **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Slash::Core::IWriter & reference is null"); return ; }  
  Lib::smanip::dump((std::vector<std::pair<std::string,std::string > > const &)*arg1,*arg2); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1version(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<unsigned int > *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<unsigned int > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null"); return 0; }
    result = (bool)Lib::smanip::version((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1version_1to_1dot(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::version_to_dot((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1isVariable(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::smanip::isVariable((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1binRoot(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::binRoot((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1nameArgs(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg3 = *(std::vector<std::string > **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  result = (bool)Lib::smanip::nameArgs((std::string const &)*arg1,*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1parseArray(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; int *arg3 = 0 ; bool result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  arg3 = *(int **)&jarg3; if(!arg3) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0; }   result = (bool)Lib::smanip::parseArray((std::string const &)*arg1,*arg2,*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1int2coord(JNIEnv *jenv, jclass jcls, jint jarg1) { jstring jresult = 0 ;
  int arg1 ; std::string result; (void)jenv; (void)jcls; arg1 = (int)jarg1;  result = Lib::smanip::int2coord(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1coord2int(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; int *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = *(int **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return 0; }  
  result = (bool)Lib::smanip::coord2int((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1toxml(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::toxml((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1tovector(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jobjectArray jresult = 0 ; int arg1 ; char **arg2 = (char **) 0 ; std::vector<std::string > result; (void)jenv; (void)jcls;
  arg1 = (int)jarg1;  arg2 = *(char ***)&jarg2;  result = Lib::smanip::tovector(arg1,arg2); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1newArgcv(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jlong jarg2, jlong jarg3) {
  std::vector<std::string > *arg1 = 0 ; int *arg2 = 0 ; char ***arg3 = 0 ; char **temp3 = 0 ; (void)jenv; (void)jcls; {
    int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  arg2 = *(int **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }  
  temp3 = *(char ***)&jarg3; arg3 = &temp3;  Lib::smanip::newArgcv((std::vector<std::string > const &)*arg1,*arg2,*arg3); {
    delete arg1; }  }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1delArgcv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) { int *arg1 = 0 ;
  char ***arg2 = 0 ; char **temp2 = 0 ; (void)jenv; (void)jcls; arg1 = *(int **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }  
  temp2 = *(char ***)&jarg2; arg2 = &temp2;  Lib::smanip::delArgcv(*arg1,*arg2); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1beginWith(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::beginWith((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1removeVersions(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::removeVersions((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1dirname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; unsigned int arg2 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2;  result = Lib::smanip::dirname((std::string const &)*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1dirname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::dirname((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1basename(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::basename((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1equal(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; char *arg2 = (char *) 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; } 
  result = (bool)Lib::smanip::equal((std::string const &)*arg1,(char const *)arg2); jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_smanip_1bracketed(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2, jchar jarg3, jlong jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; char arg2 ; char arg3 ; std::string *arg4 = 0 ; bool result; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = (char)jarg2; 
  arg3 = (char)jarg3;  arg4 = *(std::string **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::smanip::bracketed((std::string const &)*arg1,arg2,arg3,*arg4); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1quote(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::smanip::quote((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_smanip_1lines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string *arg1 = 0 ; std::vector<std::string > *arg2 = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return ; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<std::string > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return ; }  
  Lib::smanip::lines((std::string const &)*arg1,*arg2); }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1lines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib_smanip_lines__SWIG_1((std::string const &)*arg1); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_smanip_1torgbs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib_smanip_torgbs__SWIG_1((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_smanip_1pathNameSuffix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib_smanip_pathNameSuffix__SWIG_1((std::string const &)*arg1); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1smanip(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; Lib::smanip *result = 0 ;
  (void)jenv; (void)jcls; result = (Lib::smanip *)new Lib::smanip(); *(Lib::smanip **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1smanip(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lib::smanip *arg1 = (Lib::smanip *) 0 ; (void)jenv; (void)jcls; arg1 = *(Lib::smanip **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_fmanip_1name(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::fmanip::name((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1exists(JNIEnv *jenv, jclass jcls, jstring jarg1) { jboolean jresult = 0 ;
  std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::fmanip::exists((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1remove(JNIEnv *jenv, jclass jcls, jstring jarg1) { jboolean jresult = 0 ;
  std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::fmanip::remove((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1rename(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::fmanip::rename((std::string const &)*arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1copy(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::fmanip::copy((std::string const &)*arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1tmpname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string *arg4 = 0 ;
  bool result; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)Lib::fmanip::tmpname(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1tmpname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)Lib::fmanip::tmpname(*arg1,(std::string const &)*arg2,(std::string const &)*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1tmpname_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }   if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::fmanip::tmpname(*arg1,(std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1tmpname_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1;
  if(!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::tmpname(*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<double > *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<double > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double > & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::read((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  { int i = 0;
    jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg2->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  result = (bool)Lib::fmanip::write((std::string const &)*arg1,(std::vector<std::string > const &)*arg2);
  jresult = (jboolean)result;  { delete arg2; }  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::fmanip::write((std::string const &)*arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector<std::string > **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::read((std::string const &)*arg1,*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1replace(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector<std::string > **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::replace((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1replace_1if(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string *arg4 = 0 ;
  std::vector<std::string > *arg5 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0);  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr); arg4 = &arg4_str; jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::vector<std::string > **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::replace_if((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1removeLines(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::fmanip::removeLines((std::string const &)*arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1if_1rm_1eol(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector<std::string > **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::if_rm_eol((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,*arg4);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1found(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::vector<std::string > *arg3 = 0 ; bool result;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector<std::string > **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::found((std::string const &)*arg1,(std::string const &)*arg2,*arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1is_1f77(JNIEnv *jenv, jclass jcls, jstring jarg1) { jboolean jresult = 0 ;
  std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::fmanip::is_f77((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1is_1cpp(JNIEnv *jenv, jclass jcls, jstring jarg1) { jboolean jresult = 0 ;
  std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::fmanip::is_cpp((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_fmanip_1fortranLink(JNIEnv *jenv, jclass jcls, jlong jarg1) { std::string *arg1 = 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::string **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return ; }  
  Lib::fmanip::fortranLink(*arg1); }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1bindToFortranUnit(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; int arg2 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = (int)jarg2; 
  result = (bool)Lib::fmanip::bindToFortranUnit((std::string const &)*arg1,arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1move(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)Lib::fmanip::move((std::string const &)*arg1,(std::string const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1rm(JNIEnv *jenv, jclass jcls, jstring jarg1) { jboolean jresult = 0 ;
  std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)Lib::fmanip::rm((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1readBytes(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; char **arg2 = 0 ; uint64 *arg3 = 0 ; bool result; char *temp2 = 0 ; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  temp2 = *(char **)&jarg2;
  arg2 = &temp2;  arg3 = *(uint64 **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint64 & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::readBytes((std::string const &)*arg1,*arg2,*arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1writeBytes(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; char *arg2 = (char *) 0 ; uint64 arg3 ; bool result; uint64 *argp3 ;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0; }  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  argp3 = *(uint64 **)&jarg3;  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64"); return 0; } 
  arg3 = *argp3;  result = (bool)Lib::fmanip::writeBytes((std::string const &)*arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result;  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_fmanip_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2) {
  jstring jresult = 0 ; std::vector<std::string > *arg1 = 0 ; std::string *arg2 = 0 ; std::string result; (void)jenv;
  (void)jcls; { int i = 0; jint size = jenv->GetArrayLength(jarg1); arg1 = new std::vector<std::string>();
    for (i = 0; i<size; i++) { jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg1, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg1->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Lib::fmanip::find((std::vector<std::string > const &)*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str());  { delete arg1; }  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_fmanip_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string result; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = Lib::fmanip::find((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_fmanip_1towin(JNIEnv *jenv, jclass jcls, jstring jarg1) { jstring jresult = 0 ;
  std::string *arg1 = 0 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib::fmanip::towin((std::string const &)*arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1findResource(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool result; (void)jenv;
  (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null"); return 0; }  
  result = (bool)Lib::fmanip::findResource((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1chmod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; unsigned int arg2 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2;  result = (bool)Lib::fmanip::chmod((std::string const &)*arg1,arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1chmod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; Lib::fmanip::eWho arg2 ; Lib::fmanip::eOperation arg3 ;
  Lib::fmanip::eWhat arg4 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (Lib::fmanip::eWho)jarg2;  arg3 = (Lib::fmanip::eOperation)jarg3;  arg4 = (Lib::fmanip::eWhat)jarg4; 
  result = (bool)Lib::fmanip::chmod((std::string const &)*arg1,arg2,arg3,arg4); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_OnX_OnXJNI_fmanip_1header(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; unsigned char *arg2 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(unsigned char **)&jarg2;  result = (bool)Lib::fmanip::header((std::string const &)*arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_fmanip_1read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobjectArray jresult = 0 ; std::string *arg1 = 0 ; std::vector<std::string > result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Lib_fmanip_read__SWIG_2((std::string const &)*arg1); { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result.size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1fmanip(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; Lib::fmanip *result = 0 ;
  (void)jenv; (void)jcls; result = (Lib::fmanip *)new Lib::fmanip(); *(Lib::fmanip **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1fmanip(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lib::fmanip *arg1 = (Lib::fmanip *) 0 ; (void)jenv; (void)jcls; arg1 = *(Lib::fmanip **)&jarg1;  delete arg1; }
SWIGEXPORT jdouble JNICALL Java_OnX_OnXJNI_RandomFlat_1shoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; Lib::RandomFlat *arg1 = (Lib::RandomFlat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Lib::RandomFlat **)&jarg1;  result = (double)(arg1)->shoot(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomFlat(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  Lib::RandomFlat *result = 0 ; (void)jenv; (void)jcls; result = (Lib::RandomFlat *)new Lib::RandomFlat();
  *(Lib::RandomFlat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1RandomFlat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lib::RandomFlat *arg1 = (Lib::RandomFlat *) 0 ; (void)jenv; (void)jcls; arg1 = *(Lib::RandomFlat **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomGauss_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; Lib::RandomGauss *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  arg2 = (double)jarg2;  result = (Lib::RandomGauss *)new Lib::RandomGauss(arg1,arg2); *(Lib::RandomGauss **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomGauss_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; Lib::RandomGauss *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (Lib::RandomGauss *)new Lib::RandomGauss(arg1); *(Lib::RandomGauss **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomGauss_1_1SWIG_12(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  Lib::RandomGauss *result = 0 ; (void)jenv; (void)jcls; result = (Lib::RandomGauss *)new Lib::RandomGauss();
  *(Lib::RandomGauss **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_OnX_OnXJNI_RandomGauss_1shoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; Lib::RandomGauss *arg1 = (Lib::RandomGauss *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(Lib::RandomGauss **)&jarg1;  result = (double)(arg1)->shoot(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1RandomGauss(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lib::RandomGauss *arg1 = (Lib::RandomGauss *) 0 ; (void)jenv; (void)jcls; arg1 = *(Lib::RandomGauss **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomBreitWigner_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ; double arg1 ; double arg2 ; Lib::RandomBreitWigner *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (double)jarg1;  arg2 = (double)jarg2;  result = (Lib::RandomBreitWigner *)new Lib::RandomBreitWigner(arg1,arg2);
  *(Lib::RandomBreitWigner **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomBreitWigner_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; Lib::RandomBreitWigner *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (Lib::RandomBreitWigner *)new Lib::RandomBreitWigner(arg1); *(Lib::RandomBreitWigner **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomBreitWigner_1_1SWIG_12(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  Lib::RandomBreitWigner *result = 0 ; (void)jenv; (void)jcls; result = (Lib::RandomBreitWigner *)new Lib::RandomBreitWigner();
  *(Lib::RandomBreitWigner **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_OnX_OnXJNI_RandomBreitWigner_1shoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; Lib::RandomBreitWigner *arg1 = (Lib::RandomBreitWigner *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Lib::RandomBreitWigner **)&jarg1;  result = (double)(arg1)->shoot(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1RandomBreitWigner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lib::RandomBreitWigner *arg1 = (Lib::RandomBreitWigner *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(Lib::RandomBreitWigner **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomExponential_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ; double arg1 ; Lib::RandomExponential *result = 0 ; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (Lib::RandomExponential *)new Lib::RandomExponential(arg1); *(Lib::RandomExponential **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1RandomExponential_1_1SWIG_11(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  Lib::RandomExponential *result = 0 ; (void)jenv; (void)jcls; result = (Lib::RandomExponential *)new Lib::RandomExponential();
  *(Lib::RandomExponential **)&jresult = result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_OnX_OnXJNI_RandomExponential_1shoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; Lib::RandomExponential *arg1 = (Lib::RandomExponential *) 0 ; double result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(Lib::RandomExponential **)&jarg1;  result = (double)(arg1)->shoot(); jresult = (jdouble)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1RandomExponential(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lib::RandomExponential *arg1 = (Lib::RandomExponential *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(Lib::RandomExponential **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_OnX_1cast_1ISession(JNIEnv *jenv, jclass jcls, jstring jarg1) { jlong jresult = 0 ;
  std::string *arg1 = 0 ; Slash::Core::ISession *result = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Slash::Core::ISession *)OnX_cast_ISession((std::string const &)*arg1);
  *(Slash::Core::ISession **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbString *result = 0 ; (void)jenv; (void)jcls; result = (SbString *)new SbString(); *(SbString **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; SbString *result = 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  result = (SbString *)new SbString((char const *)arg1); *(SbString **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; int arg2 ; int arg3 ; SbString *result = 0 ; (void)jenv; (void)jcls; arg1 = 0;
  if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (SbString *)new SbString((char const *)arg1,arg2,arg3); *(SbString **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbString_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbString *arg1 = 0 ; SbString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbString **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbString *)new SbString((SbString const &)*arg1); *(SbString **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbString_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) { jlong jresult = 0 ;
  int arg1 ; SbString *result = 0 ; (void)jenv; (void)jcls; arg1 = (int)jarg1;  result = (SbString *)new SbString(arg1);
  *(SbString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SbString *arg1 = (SbString *) 0 ; (void)jenv; (void)jcls; arg1 = *(SbString **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_SbString_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; SbString *arg1 = (SbString *) 0 ; char *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbString **)&jarg1;  result = (char *)((SbString const *)arg1)->getString();
  if(result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SbString_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SbString *arg1 = (SbString *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbString **)&jarg1;  result = (int)((SbString const *)arg1)->getLength(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbName_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbName *result = 0 ; (void)jenv; (void)jcls; result = (SbName *)new SbName(); *(SbName **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) { jlong jresult = 0 ;
  char *arg1 = (char *) 0 ; SbName *result = 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  result = (SbName *)new SbName((char const *)arg1);
  *(SbName **)&jresult = result;  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbName_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbString *arg1 = 0 ; SbName *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbString **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbName *)new SbName((SbString const &)*arg1); *(SbName **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbName_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbName *arg1 = 0 ; SbName *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbName **)&jarg1;
  if(!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbName const & reference is null"); return 0; }  
  result = (SbName *)new SbName((SbName const &)*arg1); *(SbName **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbName(JNIEnv *jenv, jclass jcls, jlong jarg1) { SbName *arg1 = (SbName *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SbName **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_OnX_OnXJNI_SbName_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; SbName *arg1 = (SbName *) 0 ; char *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbName **)&jarg1;  result = (char *)((SbName const *)arg1)->getString();
  if(result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SbName_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SbName *arg1 = (SbName *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbName **)&jarg1; 
  result = (int)((SbName const *)arg1)->getLength(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbVec2f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbVec2f *result = 0 ; (void)jenv; (void)jcls; result = (SbVec2f *)new SbVec2f(); *(SbVec2f **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbVec2f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) { jlong jresult = 0 ;
  float *arg1 ; SbVec2f *result = 0 ; (void)jenv; (void)jcls; arg1 = *(float **)&jarg1; 
  result = (SbVec2f *)new SbVec2f((float const (*))arg1); *(SbVec2f **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbVec2f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ; float arg1 ; float arg2 ; SbVec2f *result = 0 ; (void)jenv; (void)jcls; arg1 = (float)jarg1; 
  arg2 = (float)jarg2;  result = (SbVec2f *)new SbVec2f(arg1,arg2); *(SbVec2f **)&jresult = result;  return jresult; }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec2f_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; SbVec2f *arg2 = 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SbVec2f **)&jarg1;  arg2 = *(SbVec2f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec2f const & reference is null"); return 0; }  
  result = (float)((SbVec2f const *)arg1)->dot((SbVec2f const &)*arg2); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SbVec2f_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jint jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; SbVec2f *arg2 = 0 ; float arg3 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SbVec2f **)&jarg1;  arg2 = *(SbVec2f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec2f const & reference is null"); return 0; }  
  arg3 = (float)jarg3;  result = (SbBool)((SbVec2f const *)arg1)->equals((SbVec2f const &)*arg2,arg3); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec2f_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; float *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec2f **)&jarg1;  result = (float *)((SbVec2f const *)arg1)->getValue(); *(float **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbVec2f_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  SbVec2f *arg1 = (SbVec2f *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec2f **)&jarg1;  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  ((SbVec2f const *)arg1)->getValue(*arg2,*arg3); }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec2f_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec2f **)&jarg1;  result = (float)((SbVec2f const *)arg1)->length(); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbVec2f_1negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SbVec2f *arg1 = (SbVec2f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbVec2f **)&jarg1;  (arg1)->negate(); }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec2f_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec2f **)&jarg1;  result = (float)(arg1)->normalize(); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec2f_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; float *arg2 ; SbVec2f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec2f **)&jarg1;  arg2 = *(float **)&jarg2;  { SbVec2f &_result_ref = (arg1)->setValue((float const (*))arg2);
    result = (SbVec2f *) &_result_ref; }  *(SbVec2f **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec2f_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ; SbVec2f *arg1 = (SbVec2f *) 0 ; float arg2 ; float arg3 ; SbVec2f *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SbVec2f **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  {
    SbVec2f &_result_ref = (arg1)->setValue(arg2,arg3); result = (SbVec2f *) &_result_ref; }  *(SbVec2f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SbVec2f *arg1 = (SbVec2f *) 0 ; (void)jenv; (void)jcls; arg1 = *(SbVec2f **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbVec3f_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbVec3f *result = 0 ; (void)jenv; (void)jcls; result = (SbVec3f *)new SbVec3f(); *(SbVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbVec3f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) { jlong jresult = 0 ;
  float *arg1 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; arg1 = *(float **)&jarg1; 
  result = (SbVec3f *)new SbVec3f((float const (*))arg1); *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbVec3f_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ; float arg1 ; float arg2 ; float arg3 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; arg1 = (float)jarg1; 
  arg2 = (float)jarg2;  arg3 = (float)jarg3;  result = (SbVec3f *)new SbVec3f(arg1,arg2,arg3); *(SbVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec3f_1cross(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; SbVec3f *arg2 = 0 ; SbVec3f result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SbVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  result = ((SbVec3f const *)arg1)->cross((SbVec3f const &)*arg2); *(SbVec3f **)&jresult = new SbVec3f((SbVec3f &)result); 
  return jresult; }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec3f_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; SbVec3f *arg2 = 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SbVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  result = (float)((SbVec3f const *)arg1)->dot((SbVec3f const &)*arg2); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SbVec3f_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jint jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; SbVec3f *arg2 = 0 ; float arg3 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SbVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg3 = (float)jarg3;  result = (SbBool)((SbVec3f const *)arg1)->equals((SbVec3f const &)*arg2,arg3); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec3f_1getClosestAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; SbVec3f result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  result = ((SbVec3f const *)arg1)->getClosestAxis();
  *(SbVec3f **)&jresult = new SbVec3f((SbVec3f &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec3f_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; float *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  result = (float *)((SbVec3f const *)arg1)->getValue(); *(float **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbVec3f_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  SbVec3f *arg1 = (SbVec3f *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg4 = *(float **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  ((SbVec3f const *)arg1)->getValue(*arg2,*arg3,*arg4); }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec3f_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  result = (float)((SbVec3f const *)arg1)->length(); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec3f_1sqrLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  result = (float)((SbVec3f const *)arg1)->sqrLength(); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbVec3f_1negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SbVec3f *arg1 = (SbVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbVec3f **)&jarg1;  (arg1)->negate(); }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SbVec3f_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  result = (float)(arg1)->normalize(); jresult = (jfloat)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec3f_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; float *arg2 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1;  arg2 = *(float **)&jarg2;  { SbVec3f &_result_ref = (arg1)->setValue((float const (*))arg2);
    result = (SbVec3f *) &_result_ref; }  *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec3f_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; float arg2 ; float arg3 ; float arg4 ; SbVec3f *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SbVec3f **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4;  {
    SbVec3f &_result_ref = (arg1)->setValue(arg2,arg3,arg4); result = (SbVec3f *) &_result_ref; } 
  *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbVec3f_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ; SbVec3f *arg1 = (SbVec3f *) 0 ; SbVec3f *arg2 = 0 ; SbVec3f *arg3 = 0 ; SbVec3f *arg4 = 0 ;
  SbVec3f *arg5 = 0 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_;
  (void)jarg5_; arg1 = *(SbVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg3 = *(SbVec3f **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg4 = *(SbVec3f **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg5 = *(SbVec3f **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }   {
    SbVec3f &_result_ref = (arg1)->setValue((SbVec3f const &)*arg2,(SbVec3f const &)*arg3,(SbVec3f const &)*arg4,(SbVec3f const &)*arg5);
    result = (SbVec3f *) &_result_ref; }  *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SbVec3f *arg1 = (SbVec3f *) 0 ; (void)jenv; (void)jcls; arg1 = *(SbVec3f **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbColor *result = 0 ; (void)jenv; (void)jcls; result = (SbColor *)new SbColor(); *(SbColor **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbVec3f *arg1 = 0 ; SbColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  result = (SbColor *)new SbColor((SbVec3f const &)*arg1); *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) { jlong jresult = 0 ;
  float *arg1 = (float *) (float *)0 ; SbColor *result = 0 ; (void)jenv; (void)jcls; arg1 = *(float **)&jarg1; 
  result = (SbColor *)new SbColor((float const *)arg1); *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbColor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ; float arg1 ; float arg2 ; float arg3 ; SbColor *result = 0 ; (void)jenv; (void)jcls; arg1 = (float)jarg1; 
  arg2 = (float)jarg2;  arg3 = (float)jarg3;  result = (SbColor *)new SbColor(arg1,arg2,arg3); *(SbColor **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbColor_1setHSVValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ; SbColor *arg1 = (SbColor *) 0 ; float arg2 ; float arg3 ; float arg4 ; SbColor *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SbColor **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4;  {
    SbColor &_result_ref = (arg1)->setHSVValue(arg2,arg3,arg4); result = (SbColor *) &_result_ref; } 
  *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbColor_1setHSVValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SbColor *arg1 = (SbColor *) 0 ; float *arg2 ; SbColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbColor **)&jarg1;  arg2 = *(float **)&jarg2;  { SbColor &_result_ref = (arg1)->setHSVValue((float const (*))arg2);
    result = (SbColor *) &_result_ref; }  *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbColor_1getHSVValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  SbColor *arg1 = (SbColor *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbColor **)&jarg1;  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg4 = *(float **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  ((SbColor const *)arg1)->getHSVValue(*arg2,*arg3,*arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbColor_1getHSVValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SbColor *arg1 = (SbColor *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbColor **)&jarg1; 
  arg2 = *(float **)&jarg2;  ((SbColor const *)arg1)->getHSVValue(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SbColor *arg1 = (SbColor *) 0 ; (void)jenv; (void)jcls; arg1 = *(SbColor **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbRotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbRotation *result = 0 ; (void)jenv; (void)jcls; result = (SbRotation *)new SbRotation(); *(SbRotation **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbRotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ; SbVec3f *arg1 = 0 ; float arg2 ; SbRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbVec3f **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg2 = (float)jarg2;  result = (SbRotation *)new SbRotation((SbVec3f const &)*arg1,arg2); *(SbRotation **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbRotation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; float *arg1 ; SbRotation *result = 0 ; (void)jenv; (void)jcls; arg1 = *(float **)&jarg1; 
  result = (SbRotation *)new SbRotation((float const (*))arg1); *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbRotation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ; float arg1 ; float arg2 ; float arg3 ; float arg4 ; SbRotation *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (float)jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  result = (SbRotation *)new SbRotation(arg1,arg2,arg3,arg4); *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbRotation_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SbVec3f *arg1 = 0 ; SbVec3f *arg2 = 0 ; SbRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SbVec3f **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  result = (SbRotation *)new SbRotation((SbVec3f const &)*arg1,(SbVec3f const &)*arg2); *(SbRotation **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; float *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbRotation **)&jarg1;  result = (float *)((SbRotation const *)arg1)->getValue(); *(float **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbRotation_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  SbRotation *arg1 = (SbRotation *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; float *arg5 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg4 = *(float **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  arg5 = *(float **)&jarg5; if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  ((SbRotation const *)arg1)->getValue(*arg2,*arg3,*arg4,*arg5); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SbRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbRotation **)&jarg1;  arg2 = (float)jarg2; 
  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5;  {
    SbRotation &_result_ref = (arg1)->setValue(arg2,arg3,arg4,arg5); result = (SbRotation *) &_result_ref; } 
  *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbRotation_1getValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  SbRotation *arg1 = (SbRotation *) 0 ; SbVec3f *arg2 = 0 ; float *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return ; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  ((SbRotation const *)arg1)->getValue(*arg2,*arg3); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1invert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; SbRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbRotation **)&jarg1;  { SbRotation &_result_ref = (arg1)->invert(); result = (SbRotation *) &_result_ref; } 
  *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; SbRotation result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SbRotation **)&jarg1;  result = ((SbRotation const *)arg1)->inverse();
  *(SbRotation **)&jresult = new SbRotation((SbRotation &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; float *arg2 ; SbRotation *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(float **)&jarg2;  {
    SbRotation &_result_ref = (arg1)->setValue((float const (*))arg2); result = (SbRotation *) &_result_ref; } 
  *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; SbVec3f *arg2 = 0 ; float arg3 ; SbRotation *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg3 = (float)jarg3;  { SbRotation &_result_ref = (arg1)->setValue((SbVec3f const &)*arg2,arg3);
    result = (SbRotation *) &_result_ref; }  *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; SbVec3f *arg2 = 0 ; SbVec3f *arg3 = 0 ; SbRotation *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(SbVec3f **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }  
  arg3 = *(SbVec3f **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return 0; }   {
    SbRotation &_result_ref = (arg1)->setValue((SbVec3f const &)*arg2,(SbVec3f const &)*arg3);
    result = (SbRotation *) &_result_ref; }  *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SbRotation_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jint jresult = 0 ; SbRotation *arg1 = (SbRotation *) 0 ; SbRotation *arg2 = 0 ; float arg3 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(SbRotation **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbRotation const & reference is null"); return 0; }  
  arg3 = (float)jarg3;  result = (SbBool)((SbRotation const *)arg1)->equals((SbRotation const &)*arg2,arg3);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbRotation_1multVec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  SbRotation *arg1 = (SbRotation *) 0 ; SbVec3f *arg2 = 0 ; SbVec3f *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg3_; arg1 = *(SbRotation **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return ; }  
  arg3 = *(SbVec3f **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return ; }  
  ((SbRotation const *)arg1)->multVec((SbVec3f const &)*arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SbRotation_1scaleAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SbRotation *arg1 = (SbRotation *) 0 ; float arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SbRotation **)&jarg1; 
  arg2 = (float)jarg2;  (arg1)->scaleAngle(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1slerp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ; SbRotation *arg1 = 0 ; SbRotation *arg2 = 0 ; float arg3 ; SbRotation result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SbRotation **)&jarg1; if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbRotation const & reference is null"); return 0; }  
  arg2 = *(SbRotation **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbRotation const & reference is null"); return 0; }  
  arg3 = (float)jarg3;  result = SbRotation::slerp((SbRotation const &)*arg1,(SbRotation const &)*arg2,arg3);
  *(SbRotation **)&jresult = new SbRotation((SbRotation &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbRotation_1identity(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SbRotation result; (void)jenv; (void)jcls; result = SbRotation::identity();
  *(SbRotation **)&jresult = new SbRotation((SbRotation &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbRotation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SbRotation *arg1 = (SbRotation *) 0 ; (void)jenv; (void)jcls; arg1 = *(SbRotation **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoType_1fromName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SbName arg1 ; SoType result; SbName const *argp1 ; (void)jenv; (void)jcls; (void)jarg1_;
  argp1 = *(SbName **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SbName const"); return 0; } 
  arg1 = *argp1;  result = SoType::fromName(arg1); *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoType_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoType *arg1 = (SoType *) 0 ; SbName result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoType **)&jarg1;  result = ((SoType const *)arg1)->getName(); *(SbName **)&jresult = new SbName((SbName &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoType_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoType *arg1 = (SoType *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoType **)&jarg1;  result = ((SoType const *)arg1)->getParent();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoType_1isDerivedFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoType *arg1 = (SoType *) 0 ; SoType arg2 ; SbBool result; SoType const *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoType **)&jarg1;  argp2 = *(SoType **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SoType const"); return 0; } 
  arg2 = *argp2;  result = (SbBool)((SoType const *)arg1)->isDerivedFrom(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoType_1canCreateInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoType *arg1 = (SoType *) 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoType **)&jarg1;  result = (SbBool)((SoType const *)arg1)->canCreateInstance(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoType_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoType *arg1 = (SoType *) 0 ; SoNode *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoType **)&jarg1;  result = (SoNode *)SoType_createInstance((SoType const *)arg1); *(SoNode **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoType(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType *result = 0 ;
  (void)jenv; (void)jcls; result = (SoType *)new SoType(); *(SoType **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoType(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoType *arg1 = (SoType *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoType **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoField *arg1 = (SoField *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoField **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoField_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoField *arg1 = (SoField *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoField **)&jarg1;  result = ((SoField const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoField_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoField::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoField_1isOfType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoField *arg1 = (SoField *) 0 ; SoType arg2 ; SbBool result; SoType const *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoField **)&jarg1;  argp2 = *(SoType **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SoType const"); return 0; } 
  arg2 = *argp2;  result = (SbBool)((SoField const *)arg1)->isOfType(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoField_1setIgnored(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoField *arg1 = (SoField *) 0 ; SbBool arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoField **)&jarg1; 
  arg2 = (SbBool)jarg2;  (arg1)->setIgnored(arg2); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoField_1isIgnored(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoField *arg1 = (SoField *) 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoField **)&jarg1;  result = (SbBool)((SoField const *)arg1)->isIgnored(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoField_1setDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoField *arg1 = (SoField *) 0 ; SbBool arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoField **)&jarg1; 
  arg2 = (SbBool)jarg2;  (arg1)->setDefault(arg2); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoField_1isDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoField *arg1 = (SoField *) 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoField **)&jarg1;  result = (SbBool)((SoField const *)arg1)->isDefault(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoField_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; SoField *arg1 = (SoField *) 0 ; char *arg2 = (char *) 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoField **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0; }  result = (SbBool)(arg1)->set((char const *)arg2); jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoField_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoField *arg1 = (SoField *) 0 ; SbString *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoField **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return ; }  
  (arg1)->get(*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoField_1touch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoField *arg1 = (SoField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoField **)&jarg1;  (arg1)->touch(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoField_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoField *arg1 = (SoField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoField **)&jarg1; 
  ((SoField const *)arg1)->evaluate(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSField *arg1 = (SoSField *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSField **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSField_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSField::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFBool(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFBool *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFBool *)new SoSFBool(); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFBool *arg1 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFBool **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFBool_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFBool::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFBool_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFBool *arg1 = (SoSFBool *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFBool **)&jarg1;  result = ((SoSFBool const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSFBool_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoSFBool *arg1 = (SoSFBool *) 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFBool **)&jarg1;  result = (SbBool)((SoSFBool const *)arg1)->getValue(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFBool_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoSFBool *arg1 = (SoSFBool *) 0 ; SbBool arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFBool **)&jarg1; 
  arg2 = (SbBool)jarg2;  (arg1)->setValue(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFShort(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFShort *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFShort *)new SoSFShort(); *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFShort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFShort *arg1 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFShort **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFShort_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFShort::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFShort_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFShort *arg1 = (SoSFShort *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFShort **)&jarg1;  result = ((SoSFShort const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jshort JNICALL Java_OnX_OnXJNI_SoSFShort_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ; SoSFShort *arg1 = (SoSFShort *) 0 ; short result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFShort **)&jarg1;  result = (short)((SoSFShort const *)arg1)->getValue(); jresult = (jshort)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFShort_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  SoSFShort *arg1 = (SoSFShort *) 0 ; short arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFShort **)&jarg1; 
  arg2 = (short)jarg2;  (arg1)->setValue(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFFloat(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFFloat *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFFloat *)new SoSFFloat(); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFFloat *arg1 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFFloat **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFFloat_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFFloat::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFFloat_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFFloat *arg1 = (SoSFFloat *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFFloat **)&jarg1;  result = ((SoSFFloat const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jfloat JNICALL Java_OnX_OnXJNI_SoSFFloat_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ; SoSFFloat *arg1 = (SoSFFloat *) 0 ; float result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFFloat **)&jarg1;  result = (float)((SoSFFloat const *)arg1)->getValue(); jresult = (jfloat)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFFloat_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SoSFFloat *arg1 = (SoSFFloat *) 0 ; float arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFFloat **)&jarg1; 
  arg2 = (float)jarg2;  (arg1)->setValue(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFInt32(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFInt32 *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFInt32 *)new SoSFInt32(); *(SoSFInt32 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFInt32 *arg1 = (SoSFInt32 *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFInt32 **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFInt32_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFInt32::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFInt32_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFInt32 *arg1 = (SoSFInt32 *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFInt32 **)&jarg1;  result = ((SoSFInt32 const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSFInt32_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoSFInt32 *arg1 = (SoSFInt32 *) 0 ; int32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFInt32 **)&jarg1;  result = (int32_t)((SoSFInt32 const *)arg1)->getValue(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFInt32_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoSFInt32 *arg1 = (SoSFInt32 *) 0 ; int32_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFInt32 **)&jarg1; 
  arg2 = (int32_t)jarg2;  (arg1)->setValue(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFBitMask(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoSFBitMask *result = 0 ; (void)jenv; (void)jcls; result = (SoSFBitMask *)new SoSFBitMask();
  *(SoSFBitMask **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFBitMask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFBitMask *arg1 = (SoSFBitMask *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFBitMask **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFBitMask_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFBitMask::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFBitMask_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFBitMask *arg1 = (SoSFBitMask *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFBitMask **)&jarg1;  result = ((SoSFBitMask const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSFBitMask_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoSFBitMask *arg1 = (SoSFBitMask *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFBitMask **)&jarg1;  result = (int)((SoSFBitMask const *)arg1)->getValue(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFBitMask_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoSFBitMask *arg1 = (SoSFBitMask *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFBitMask **)&jarg1; 
  arg2 = (int)jarg2;  (arg1)->setValue(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFEnum(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFEnum *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFEnum *)new SoSFEnum(); *(SoSFEnum **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFEnum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFEnum *arg1 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFEnum **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFEnum_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFEnum::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFEnum_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFEnum *arg1 = (SoSFEnum *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFEnum **)&jarg1;  result = ((SoSFEnum const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSFEnum_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoSFEnum *arg1 = (SoSFEnum *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFEnum **)&jarg1;  result = (int)((SoSFEnum const *)arg1)->getValue(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFEnum_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoSFEnum *arg1 = (SoSFEnum *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFEnum **)&jarg1; 
  arg2 = (int)jarg2;  (arg1)->setValue(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFEnum_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFEnum *arg1 = (SoSFEnum *) 0 ; SbName arg2 ; SbName const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFEnum **)&jarg1;  argp2 = *(SbName **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SbName const"); return ; } 
  arg2 = *argp2;  (arg1)->setValue(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFEnum_1setEnums(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  SoSFEnum *arg1 = (SoSFEnum *) 0 ; int arg2 ; int *arg3 = (int *) 0 ; SbName *arg4 = (SbName *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg4_; arg1 = *(SoSFEnum **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(int **)&jarg3; 
  arg4 = *(SbName **)&jarg4;  (arg1)->setEnums(arg2,(int const *)arg3,(SbName const *)arg4); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSFEnum_1getNumEnums(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoSFEnum *arg1 = (SoSFEnum *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFEnum **)&jarg1;  result = (int)((SoSFEnum const *)arg1)->getNumEnums(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSFEnum_1getEnum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ; SoSFEnum *arg1 = (SoSFEnum *) 0 ; int arg2 ; SbName *arg3 = 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg3_; arg1 = *(SoSFEnum **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SbName **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbName & reference is null"); return 0; }  
  result = (int)((SoSFEnum const *)arg1)->getEnum(arg2,*arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFString(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoSFString *result = 0 ; (void)jenv; (void)jcls; result = (SoSFString *)new SoSFString(); *(SoSFString **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFString *arg1 = (SoSFString *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFString **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFString_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFString::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFString_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFString *arg1 = (SoSFString *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFString **)&jarg1;  result = ((SoSFString const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFString_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFString *arg1 = (SoSFString *) 0 ; SbString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFString **)&jarg1;  { SbString const &_result_ref = ((SoSFString const *)arg1)->getValue();
    result = (SbString *) &_result_ref; }  *(SbString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFString_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFString *arg1 = (SoSFString *) 0 ; SbString *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFString **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return ; }  
  (arg1)->setValue((SbString const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFString_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SoSFString *arg1 = (SoSFString *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFString **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }
   (arg1)->setValue((char const *)arg2); if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFVec2f(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFVec2f *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFVec2f *)new SoSFVec2f(); *(SoSFVec2f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFVec2f *arg1 = (SoSFVec2f *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFVec2f **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFVec2f_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFVec2f::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFVec2f_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFVec2f *arg1 = (SoSFVec2f *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFVec2f **)&jarg1;  result = ((SoSFVec2f const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFVec2f_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFVec2f *arg1 = (SoSFVec2f *) 0 ; SbVec2f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFVec2f **)&jarg1;  { SbVec2f const &_result_ref = ((SoSFVec2f const *)arg1)->getValue();
    result = (SbVec2f *) &_result_ref; }  *(SbVec2f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFVec2f_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFVec2f *arg1 = (SoSFVec2f *) 0 ; SbVec2f *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFVec2f **)&jarg1;  arg2 = *(SbVec2f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec2f const & reference is null"); return ; }  
  (arg1)->setValue((SbVec2f const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFVec2f_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  SoSFVec2f *arg1 = (SoSFVec2f *) 0 ; float arg2 ; float arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFVec2f **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  (arg1)->setValue(arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFVec2f_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoSFVec2f *arg1 = (SoSFVec2f *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFVec2f **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setValue((float const (*))arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFVec3f(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFVec3f *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFVec3f *)new SoSFVec3f(); *(SoSFVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFVec3f *arg1 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFVec3f **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFVec3f_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFVec3f::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFVec3f_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFVec3f *arg1 = (SoSFVec3f *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFVec3f **)&jarg1;  result = ((SoSFVec3f const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFVec3f_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFVec3f *arg1 = (SoSFVec3f *) 0 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFVec3f **)&jarg1;  { SbVec3f const &_result_ref = ((SoSFVec3f const *)arg1)->getValue();
    result = (SbVec3f *) &_result_ref; }  *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFVec3f_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFVec3f *arg1 = (SoSFVec3f *) 0 ; SbVec3f *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return ; }  
  (arg1)->setValue((SbVec3f const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFVec3f_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  SoSFVec3f *arg1 = (SoSFVec3f *) 0 ; float arg2 ; float arg3 ; float arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFVec3f **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  (arg1)->setValue(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFVec3f_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoSFVec3f *arg1 = (SoSFVec3f *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFVec3f **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setValue((float const (*))arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFColor(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoSFColor *result = 0 ;
  (void)jenv; (void)jcls; result = (SoSFColor *)new SoSFColor(); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFColor **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFColor_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFColor::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFColor_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFColor *arg1 = (SoSFColor *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFColor **)&jarg1;  result = ((SoSFColor const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFColor_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFColor *arg1 = (SoSFColor *) 0 ; SbColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFColor **)&jarg1;  { SbColor const &_result_ref = ((SoSFColor const *)arg1)->getValue();
    result = (SbColor *) &_result_ref; }  *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFColor_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; SbColor *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFColor **)&jarg1;  arg2 = *(SbColor **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbColor const & reference is null"); return ; }  
  (arg1)->setValue((SbColor const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFColor_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; SbVec3f *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFColor **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return ; }  
  (arg1)->setValue((SbVec3f const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFColor_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; float arg2 ; float arg3 ; float arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFColor **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  (arg1)->setValue(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFColor_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFColor **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setValue((float const (*))arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFColor_1setHSVValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; float arg2 ; float arg3 ; float arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFColor **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  (arg1)->setHSVValue(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFColor_1setHSVValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoSFColor *arg1 = (SoSFColor *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoSFColor **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setHSVValue((float const (*))arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSFRotation(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoSFRotation *result = 0 ; (void)jenv; (void)jcls; result = (SoSFRotation *)new SoSFRotation();
  *(SoSFRotation **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSFRotation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSFRotation *arg1 = (SoSFRotation *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSFRotation **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFRotation_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSFRotation::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFRotation_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFRotation *arg1 = (SoSFRotation *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFRotation **)&jarg1;  result = ((SoSFRotation const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSFRotation_1getValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSFRotation *arg1 = (SoSFRotation *) 0 ; SbRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFRotation **)&jarg1;  { SbRotation const &_result_ref = ((SoSFRotation const *)arg1)->getValue();
    result = (SbRotation *) &_result_ref; }  *(SbRotation **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFRotation_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSFRotation *arg1 = (SoSFRotation *) 0 ; SbRotation *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFRotation **)&jarg1;  arg2 = *(SbRotation **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbRotation const & reference is null"); return ; }  
  (arg1)->setValue((SbRotation const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFRotation_1getValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  SoSFRotation *arg1 = (SoSFRotation *) 0 ; SbVec3f *arg2 = 0 ; float *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoSFRotation **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return ; }  
  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  ((SoSFRotation const *)arg1)->getValue(*arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFRotation_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  SoSFRotation *arg1 = (SoSFRotation *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoSFRotation **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  arg5 = (float)jarg5;  (arg1)->setValue(arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFRotation_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoSFRotation *arg1 = (SoSFRotation *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSFRotation **)&jarg1;  arg2 = *(float **)&jarg2;  (arg1)->setValue((float const (*))arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSFRotation_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  SoSFRotation *arg1 = (SoSFRotation *) 0 ; SbVec3f *arg2 = 0 ; float arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSFRotation **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return ; }  
  arg3 = (float)jarg3;  (arg1)->setValue((SbVec3f const &)*arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMField *arg1 = (SoMField *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMField **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMField_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMField::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMField_1getNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoMField *arg1 = (SoMField *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMField **)&jarg1;  result = (int)((SoMField const *)arg1)->getNum(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMField_1setNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoMField *arg1 = (SoMField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMField **)&jarg1; 
  arg2 = (int)jarg2;  (arg1)->setNum(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMField_1deleteValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  SoMField *arg1 = (SoMField *) 0 ; int arg2 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMField **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  (arg1)->deleteValues(arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMField_1deleteValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoMField *arg1 = (SoMField *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMField **)&jarg1; 
  arg2 = (int)jarg2;  (arg1)->deleteValues(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMField_1insertSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  SoMField *arg1 = (SoMField *) 0 ; int arg2 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMField **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  (arg1)->insertSpace(arg2,arg3); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMField_1set1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jint jresult = 0 ; SoMField *arg1 = (SoMField *) 0 ; int arg2 ; char *arg3 = (char *) (char *)0 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SoMField **)&jarg1;  arg2 = (int)jarg2;  arg3 = 0; if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0); if (!arg3) return 0; } 
  result = (SbBool)(arg1)->set1(arg2,(char const *)arg3); jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3); return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMField_1get1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  SoMField *arg1 = (SoMField *) 0 ; int arg2 ; SbString *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(SoMField **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return ; }  
  (arg1)->get1(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMField_1enableDeleteValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoMField *arg1 = (SoMField *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMField **)&jarg1; 
  (arg1)->enableDeleteValues(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMField_1isDeleteValuesEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoMField *arg1 = (SoMField *) 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMField **)&jarg1;  result = (SbBool)(arg1)->isDeleteValuesEnabled(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFFloat_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMFFloat::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFFloat_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFFloat *arg1 = (SoMFFloat *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFFloat **)&jarg1;  result = ((SoMFFloat const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFFloat_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoMFFloat *arg1 = (SoMFFloat *) 0 ; int arg2 ; float *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFFloat **)&jarg1;  arg2 = (int)jarg2;  result = (float *)((SoMFFloat const *)arg1)->getValues(arg2);
  *(float **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFFloat_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ; SoMFFloat *arg1 = (SoMFFloat *) 0 ; float *arg2 = 0 ; SbBool arg3 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoMFFloat **)&jarg1;  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  arg3 = (SbBool)jarg3;  result = (int)(arg1)->find(*arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFFloat_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; SoMFFloat *arg1 = (SoMFFloat *) 0 ; float *arg2 = 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFFloat **)&jarg1;  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return 0; }  
  result = (int)(arg1)->find(*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFFloat_1setValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  SoMFFloat *arg1 = (SoMFFloat *) 0 ; int arg2 ; int arg3 ; float *arg4 = (float *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFFloat **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(float **)&jarg4; 
  (arg1)->setValues(arg2,arg3,(float const *)arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFFloat_1set1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  SoMFFloat *arg1 = (SoMFFloat *) 0 ; int arg2 ; float *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFFloat **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(float **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  (arg1)->set1Value(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFFloat_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoMFFloat *arg1 = (SoMFFloat *) 0 ; float *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFFloat **)&jarg1; 
  arg2 = *(float **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null"); return ; }  
  (arg1)->setValue(*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFFloat_1startEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFFloat *arg1 = (SoMFFloat *) 0 ; float *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFFloat **)&jarg1;  result = (float *)(arg1)->startEditing(); *(float **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFFloat_1finishEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoMFFloat *arg1 = (SoMFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFFloat **)&jarg1; 
  (arg1)->finishEditing(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoMFFloat(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoMFFloat *result = 0 ;
  (void)jenv; (void)jcls; result = (SoMFFloat *)new SoMFFloat(); *(SoMFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMFFloat *arg1 = (SoMFFloat *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMFFloat **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFInt32_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMFInt32::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFInt32_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFInt32 **)&jarg1;  result = ((SoMFInt32 const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFInt32_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int arg2 ; int32_t *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFInt32 **)&jarg1;  arg2 = (int)jarg2;  result = (int32_t *)((SoMFInt32 const *)arg1)->getValues(arg2);
  *(int32_t **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFInt32_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ; SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int32_t *arg2 = 0 ; SbBool arg3 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoMFInt32 **)&jarg1;  arg2 = *(int32_t **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null"); return 0; }  
  arg3 = (SbBool)jarg3;  result = (int)(arg1)->find(*arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFInt32_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int32_t *arg2 = 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFInt32 **)&jarg1;  arg2 = *(int32_t **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null"); return 0; }  
  result = (int)(arg1)->find(*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFInt32_1setValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int arg2 ; int arg3 ; int32_t *arg4 = (int32_t *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoMFInt32 **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(int32_t **)&jarg4; 
  (arg1)->setValues(arg2,arg3,(int32_t const *)arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFInt32_1set1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int arg2 ; int32_t *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFInt32 **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(int32_t **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null"); return ; }  
  (arg1)->set1Value(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFInt32_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int32_t *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFInt32 **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int32_t & reference is null"); return ; }  
  (arg1)->setValue(*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFInt32_1startEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; int32_t *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFInt32 **)&jarg1;  result = (int32_t *)(arg1)->startEditing(); *(int32_t **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFInt32_1finishEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFInt32 **)&jarg1; 
  (arg1)->finishEditing(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoMFInt32(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoMFInt32 *result = 0 ;
  (void)jenv; (void)jcls; result = (SoMFInt32 *)new SoMFInt32(); *(SoMFInt32 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMFInt32 *arg1 = (SoMFInt32 *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMFInt32 **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFString_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMFString::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFString_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFString *arg1 = (SoMFString *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFString **)&jarg1;  result = ((SoMFString const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFString_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoMFString *arg1 = (SoMFString *) 0 ; int arg2 ; SbString *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoMFString **)&jarg1;  arg2 = (int)jarg2; 
  result = (SbString *)((SoMFString const *)arg1)->getValues(arg2); *(SbString **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFString_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ; SoMFString *arg1 = (SoMFString *) 0 ; SbString *arg2 = 0 ; SbBool arg3 ; int result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoMFString **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return 0; }  
  arg3 = (SbBool)jarg3;  result = (int)(arg1)->find(*arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFString_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoMFString *arg1 = (SoMFString *) 0 ; SbString *arg2 = 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoMFString **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return 0; }  
  result = (int)(arg1)->find(*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1setValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  SoMFString *arg1 = (SoMFString *) 0 ; int arg2 ; int arg3 ; SbString *arg4 = (SbString *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg4_; arg1 = *(SoMFString **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = *(SbString **)&jarg4;  (arg1)->setValues(arg2,arg3,(SbString const *)arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1set1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  SoMFString *arg1 = (SoMFString *) 0 ; int arg2 ; SbString *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(SoMFString **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return ; }  
  (arg1)->set1Value(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMFString *arg1 = (SoMFString *) 0 ; SbString *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMFString **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return ; }  
  (arg1)->setValue(*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFString_1startEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFString *arg1 = (SoMFString *) 0 ; SbString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFString **)&jarg1;  result = (SbString *)(arg1)->startEditing(); *(SbString **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1finishEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoMFString *arg1 = (SoMFString *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFString **)&jarg1; 
  (arg1)->finishEditing(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1setValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  SoMFString *arg1 = (SoMFString *) 0 ; int arg2 ; int arg3 ; char **arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFString **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(char ***)&jarg4; 
  (arg1)->setValues(arg2,arg3,(char const *(*))arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SoMFString *arg1 = (SoMFString *) 0 ; char *arg2 = (char *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFString **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return ; }
   (arg1)->setValue((char const *)arg2); if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFString_1deleteText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  SoMFString *arg1 = (SoMFString *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFString **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  (arg1)->deleteText(arg2,arg3,arg4,arg5); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoMFString(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoMFString *result = 0 ; (void)jenv; (void)jcls; result = (SoMFString *)new SoMFString(); *(SoMFString **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMFString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMFString *arg1 = (SoMFString *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMFString **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFColor_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMFColor::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFColor_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFColor *arg1 = (SoMFColor *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  result = ((SoMFColor const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFColor_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; SbColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  result = (SbColor *)((SoMFColor const *)arg1)->getValues(arg2);
  *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFColor_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ; SoMFColor *arg1 = (SoMFColor *) 0 ; SbColor *arg2 = 0 ; SbBool arg3 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoMFColor **)&jarg1;  arg2 = *(SbColor **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbColor & reference is null"); return 0; }  
  arg3 = (SbBool)jarg3;  result = (int)(arg1)->find(*arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFColor_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoMFColor *arg1 = (SoMFColor *) 0 ; SbColor *arg2 = 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoMFColor **)&jarg1;  arg2 = *(SbColor **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbColor & reference is null"); return 0; }  
  result = (int)(arg1)->find(*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; int arg3 ; SbColor *arg4 = (SbColor *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg4_; arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = *(SbColor **)&jarg4;  (arg1)->setValues(arg2,arg3,(SbColor const *)arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1set1Value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; SbColor *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SbColor **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbColor & reference is null"); return ; }  
  (arg1)->set1Value(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; SbColor *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = *(SbColor **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbColor & reference is null"); return ; }  
  (arg1)->setValue(*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFColor_1startEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFColor *arg1 = (SoMFColor *) 0 ; SbColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  result = (SbColor *)(arg1)->startEditing(); *(SbColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1finishEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFColor **)&jarg1; 
  (arg1)->finishEditing(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; int arg3 ; float (*arg4)[3] ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(float (**)[3])&jarg4; 
  (arg1)->setValues(arg2,arg3,(float const (*)[3])arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setHSVValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; int arg3 ; float (*arg4)[3] ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(float (**)[3])&jarg4; 
  (arg1)->setHSVValues(arg2,arg3,(float const (*)[3])arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; SbVec3f *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return ; }  
  (arg1)->setValue((SbVec3f const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; float arg2 ; float arg3 ; float arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  (arg1)->setValue(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFColor **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setValue((float const (*))arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setHSVValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; float arg2 ; float arg3 ; float arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  (arg1)->setHSVValue(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1setHSVValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFColor **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setHSVValue((float const (*))arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1set1Value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; SbVec3f *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SbVec3f **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f const & reference is null"); return ; }  
  (arg1)->set1Value(arg2,(SbVec3f const &)*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1set1Value_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; float arg3 ; float arg4 ; float arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5; 
  (arg1)->set1Value(arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1set1Value_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; float *arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(float **)&jarg3;  (arg1)->set1Value(arg2,(float const (*))arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1set1HSVValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; float arg3 ; float arg4 ; float arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5; 
  (arg1)->set1HSVValue(arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFColor_1set1HSVValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; int arg2 ; float *arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFColor **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(float **)&jarg3; 
  (arg1)->set1HSVValue(arg2,(float const (*))arg3); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoMFColor(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoMFColor *result = 0 ;
  (void)jenv; (void)jcls; result = (SoMFColor *)new SoMFColor(); *(SoMFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMFColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMFColor *arg1 = (SoMFColor *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMFColor **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFVec3f_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMFVec3f::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFVec3f_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  result = ((SoMFVec3f const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFVec3f_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; int arg2 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (int)jarg2;  result = (SbVec3f *)((SoMFVec3f const *)arg1)->getValues(arg2);
  *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFVec3f_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ; SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; SbVec3f *arg2 = 0 ; SbBool arg3 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoMFVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return 0; }  
  arg3 = (SbBool)jarg3;  result = (int)(arg1)->find(*arg2,arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoMFVec3f_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; SbVec3f *arg2 = 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoMFVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return 0; }  
  result = (int)(arg1)->find(*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1setValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; int arg2 ; int arg3 ; SbVec3f *arg4 = (SbVec3f *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg4_; arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  arg4 = *(SbVec3f **)&jarg4;  (arg1)->setValues(arg2,arg3,(SbVec3f const *)arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1set1Value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; int arg2 ; SbVec3f *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SbVec3f **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return ; }  
  (arg1)->set1Value(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; SbVec3f *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = *(SbVec3f **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return ; }  
  (arg1)->setValue(*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMFVec3f_1startEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; SbVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  result = (SbVec3f *)(arg1)->startEditing(); *(SbVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1finishEditing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFVec3f **)&jarg1; 
  (arg1)->finishEditing(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1setValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; int arg2 ; int arg3 ; float (*arg4)[3] ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3;  arg4 = *(float (**)[3])&jarg4; 
  (arg1)->setValues(arg2,arg3,(float const (*)[3])arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1set1Value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; int arg2 ; float arg3 ; float arg4 ; float arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (int)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5; 
  (arg1)->set1Value(arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1set1Value_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; int arg2 ; float *arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(float **)&jarg3;  (arg1)->set1Value(arg2,(float const (*))arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; float arg2 ; float arg3 ; float arg4 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMFVec3f **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4; 
  (arg1)->setValue(arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMFVec3f_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; float *arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoMFVec3f **)&jarg1; 
  arg2 = *(float **)&jarg2;  (arg1)->setValue((float const (*))arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoMFVec3f(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoMFVec3f *result = 0 ;
  (void)jenv; (void)jcls; result = (SoMFVec3f *)new SoMFVec3f(); *(SoMFVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMFVec3f *arg1 = (SoMFVec3f *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMFVec3f **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoInput(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoInput *result = 0 ;
  (void)jenv; (void)jcls; result = (SoInput *)new SoInput(); *(SoInput **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoInput *arg1 = (SoInput *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoInput **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoInput_1openFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ; SoInput *arg1 = (SoInput *) 0 ; char *arg2 = (char *) 0 ; SbBool arg3 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SoInput **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  arg3 = (SbBool)jarg3; 
  result = (SbBool)(arg1)->openFile((char const *)arg2,arg3); jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoInput_1openFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; SoInput *arg1 = (SoInput *) 0 ; char *arg2 = (char *) 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoInput **)&jarg1;  arg2 = 0; if (jarg2) { arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0; }  result = (SbBool)(arg1)->openFile((char const *)arg2); jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDB_1readAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoInput *arg1 = (SoInput *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoInput **)&jarg1;  result = (SoSeparator *)SoDB::readAll(arg1); *(SoSeparator **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoDB(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoDB *result = 0 ;
  (void)jenv; (void)jcls; result = (SoDB *)new SoDB(); *(SoDB **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoDB(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoDB *arg1 = (SoDB *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoDB **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoBase_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoBase *arg1 = (SoBase *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoBase **)&jarg1;  result = ((SoBase const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoBase_1isOfType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoBase *arg1 = (SoBase *) 0 ; SoType arg2 ; SbBool result; SoType *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoBase **)&jarg1;  argp2 = *(SoType **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SoType"); return 0; } 
  arg2 = *argp2;  result = (SbBool)((SoBase const *)arg1)->isOfType(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoBase_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoBase::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoBase_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoBase *arg1 = (SoBase *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoBase **)&jarg1; 
  ((SoBase const *)arg1)->ref(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoBase_1unref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoBase *arg1 = (SoBase *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoBase **)&jarg1; 
  ((SoBase const *)arg1)->unref(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoBase_1unrefNoDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoBase *arg1 = (SoBase *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoBase **)&jarg1; 
  ((SoBase const *)arg1)->unrefNoDelete(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoBase_1getRefCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoBase *arg1 = (SoBase *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoBase **)&jarg1; 
  result = (int)((SoBase const *)arg1)->getRefCount(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoBase_1touch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoBase *arg1 = (SoBase *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoBase **)&jarg1;  (arg1)->touch(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoBase_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoBase *arg1 = (SoBase *) 0 ; SbName result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoBase **)&jarg1;  result = ((SoBase const *)arg1)->getName(); *(SbName **)&jresult = new SbName((SbName &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoBase_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoBase *arg1 = (SoBase *) 0 ; SbName *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoBase **)&jarg1;  arg2 = *(SbName **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbName const & reference is null"); return ; }  
  (arg1)->setName((SbName const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoBase(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoBase *arg1 = (SoBase *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoBase **)&jarg1;  delete_SoBase(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoFieldContainer_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoFieldContainer::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoFieldContainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ; SoFieldContainer *arg1 = (SoFieldContainer *) 0 ; char *arg2 = (char *) 0 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SoFieldContainer **)&jarg1;  arg2 = 0; if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!arg2) return 0; }  result = (SbBool)(arg1)->set((char const *)arg2);
  jresult = (jint)result;  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2); return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoFieldContainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoFieldContainer *arg1 = (SoFieldContainer *) 0 ; SbString *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoFieldContainer **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return ; }  
  (arg1)->get(*arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoFieldContainer_1getField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoFieldContainer *arg1 = (SoFieldContainer *) 0 ; SbName *arg2 = 0 ; SoField *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoFieldContainer **)&jarg1;  arg2 = *(SbName **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbName const & reference is null"); return 0; }  
  result = (SoField *)((SoFieldContainer const *)arg1)->getField((SbName const &)*arg2); *(SoField **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoNode::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoNode_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoNode *arg1 = (SoNode *) 0 ; SoGetBoundingBoxAction *arg2 = (SoGetBoundingBoxAction *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoNode **)&jarg1;  arg2 = *(SoGetBoundingBoxAction **)&jarg2;  (arg1)->getBoundingBox(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoNode(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoNode *arg1 = (SoNode *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoNode **)&jarg1;  delete_SoNode(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoSeparator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoSeparator *)SoNode_cast_SoSeparator(arg1); *(SoSeparator **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoCylinder *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoCylinder *)SoNode_cast_SoCylinder(arg1); *(SoCylinder **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoCube(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoCube *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoCube *)SoNode_cast_SoCube(arg1); *(SoCube **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoDisplayRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoDisplayRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoDisplayRegion *)SoNode_cast_SoDisplayRegion(arg1);
  *(SoDisplayRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoImageRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoImageRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoImageRegion *)SoNode_cast_SoImageRegion(arg1); *(SoImageRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoTextRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoTextRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoTextRegion *)SoNode_cast_SoTextRegion(arg1); *(SoTextRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNode_1cast_1SoPlotterRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SoPlotterRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNode **)&jarg1;  result = (SoPlotterRegion *)SoNode_cast_SoPlotterRegion(arg1);
  *(SoPlotterRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoGroup(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoGroup *result = 0 ;
  (void)jenv; (void)jcls; result = (SoGroup *)new SoGroup(); *(SoGroup **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoGroup_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoGroup::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoGroup_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoGroup *arg1 = (SoGroup *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoGroup **)&jarg1;  result = ((SoGroup const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGroup_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoGroup *arg1 = (SoGroup *) 0 ; SoNode *arg2 = (SoNode *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoGroup **)&jarg1;  arg2 = *(SoNode **)&jarg2;  (arg1)->addChild(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGroup_1insertChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  SoGroup *arg1 = (SoGroup *) 0 ; SoNode *arg2 = (SoNode *) 0 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoGroup **)&jarg1;  arg2 = *(SoNode **)&jarg2;  arg3 = (int)jarg3;  (arg1)->insertChild(arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoGroup_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoGroup *arg1 = (SoGroup *) 0 ; int arg2 ; SoNode *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoGroup **)&jarg1;  arg2 = (int)jarg2;  result = (SoNode *)((SoGroup const *)arg1)->getChild(arg2);
  *(SoNode **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoGroup_1findChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoGroup *arg1 = (SoGroup *) 0 ; SoNode *arg2 = (SoNode *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoGroup **)&jarg1;  arg2 = *(SoNode **)&jarg2; 
  result = (int)((SoGroup const *)arg1)->findChild((SoNode const *)arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoGroup_1getNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoGroup *arg1 = (SoGroup *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoGroup **)&jarg1;  result = (int)(arg1)->getNumChildren(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGroup_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoGroup *arg1 = (SoGroup *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoGroup **)&jarg1; 
  arg2 = (int)jarg2;  (arg1)->removeChild(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGroup_1removeAllChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoGroup *arg1 = (SoGroup *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoGroup **)&jarg1; 
  (arg1)->removeAllChildren(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGroup_1replaceChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  SoGroup *arg1 = (SoGroup *) 0 ; int arg2 ; SoNode *arg3 = (SoNode *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(SoGroup **)&jarg1;  arg2 = (int)jarg2;  arg3 = *(SoNode **)&jarg3;  (arg1)->replaceChild(arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGroup_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoGroup *arg1 = (SoGroup *) 0 ; SoGetBoundingBoxAction *arg2 = (SoGetBoundingBoxAction *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoGroup **)&jarg1;  arg2 = *(SoGetBoundingBoxAction **)&jarg2;  (arg1)->getBoundingBox(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoGroup *arg1 = (SoGroup *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoGroup **)&jarg1;  delete_SoGroup(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSeparator(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoSeparator *result = 0 ; (void)jenv; (void)jcls; result = (SoSeparator *)new SoSeparator();
  *(SoSeparator **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSeparator_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSeparator::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSeparator_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSeparator *arg1 = (SoSeparator *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSeparator **)&jarg1;  result = ((SoSeparator const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSeparator_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoSeparator *arg1 = (SoSeparator *) 0 ; SoGetBoundingBoxAction *arg2 = (SoGetBoundingBoxAction *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoSeparator **)&jarg1;  arg2 = *(SoGetBoundingBoxAction **)&jarg2;  (arg1)->getBoundingBox(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSeparator_1renderCaching_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSeparator **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->renderCaching = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSeparator_1renderCaching_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSeparator **)&jarg1;  result = (SoSFEnum *)& ((arg1)->renderCaching); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSeparator_1boundingBoxCaching_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSeparator **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->boundingBoxCaching = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSeparator_1boundingBoxCaching_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSeparator **)&jarg1;  result = (SoSFEnum *)& ((arg1)->boundingBoxCaching); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSeparator_1renderCulling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSeparator **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->renderCulling = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSeparator_1renderCulling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSeparator **)&jarg1;  result = (SoSFEnum *)& ((arg1)->renderCulling); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSeparator_1pickCulling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoSeparator **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->pickCulling = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSeparator_1pickCulling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSeparator *arg1 = (SoSeparator *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSeparator **)&jarg1;  result = (SoSFEnum *)& ((arg1)->pickCulling); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSeparator_1setNumRenderCaches(JNIEnv *jenv, jclass jcls, jint jarg1) { int arg1 ;
  (void)jenv; (void)jcls; arg1 = (int)jarg1;  SoSeparator::setNumRenderCaches(arg1); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoSeparator_1getNumRenderCaches(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)SoSeparator::getNumRenderCaches(); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSeparator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSeparator *arg1 = (SoSeparator *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSeparator **)&jarg1;  delete_SoSeparator(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoArray(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoArray *result = 0 ;
  (void)jenv; (void)jcls; result = (SoArray *)new SoArray(); *(SoArray **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoArray::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = ((SoArray const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1origin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->origin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1origin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFEnum *)& ((arg1)->origin); *(SoSFEnum **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1numElements1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->numElements1 = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1numElements1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFShort *)& ((arg1)->numElements1); *(SoSFShort **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1numElements2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->numElements2 = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1numElements2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFShort *)& ((arg1)->numElements2); *(SoSFShort **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1numElements3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->numElements3 = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1numElements3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFShort *)& ((arg1)->numElements3); *(SoSFShort **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1separation1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2;  if (arg1) (arg1)->separation1 = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1separation1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->separation1); *(SoSFVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1separation2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2;  if (arg1) (arg1)->separation2 = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1separation2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->separation2); *(SoSFVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArray_1separation3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoArray *arg1 = (SoArray *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoArray **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2;  if (arg1) (arg1)->separation3 = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArray_1separation3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArray *arg1 = (SoArray *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArray **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->separation3); *(SoSFVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoArray *arg1 = (SoArray *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoArray **)&jarg1;  delete_SoArray(arg1); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoAction *arg1 = (SoAction *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoAction **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAction_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoAction::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAction_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoAction::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAction_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAction *arg1 = (SoAction *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAction **)&jarg1;  result = ((SoAction const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoAction_1isOfType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoAction *arg1 = (SoAction *) 0 ; SoType arg2 ; SbBool result; SoType *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoAction **)&jarg1;  argp2 = *(SoType **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SoType"); return 0; } 
  arg2 = *argp2;  result = (SbBool)((SoAction const *)arg1)->isOfType(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoShape_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoShape::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoShape_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoShape *arg1 = (SoShape *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoShape **)&jarg1;  result = ((SoShape const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoShape_1computeBBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  SoShape *arg1 = (SoShape *) 0 ; SoAction *arg2 = (SoAction *) 0 ; SbBox3f *arg3 = 0 ; SbVec3f *arg4 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg4_; arg1 = *(SoShape **)&jarg1;  arg2 = *(SoAction **)&jarg2; 
  arg3 = *(SbBox3f **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbBox3f & reference is null"); return ; }  
  arg4 = *(SbVec3f **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbVec3f & reference is null"); return ; }  
  (arg1)->computeBBox(arg2,*arg3,*arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoShape_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoShape *arg1 = (SoShape *) 0 ; SoGetBoundingBoxAction *arg2 = (SoGetBoundingBoxAction *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoShape **)&jarg1;  arg2 = *(SoGetBoundingBoxAction **)&jarg2;  (arg1)->getBoundingBox(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoShape *arg1 = (SoShape *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoShape **)&jarg1;  delete_SoShape(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoVertexShape_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoVertexShape::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoVertexShape_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoVertexShape *arg1 = (SoVertexShape *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoVertexShape **)&jarg1;  result = ((SoVertexShape const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoVertexShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoVertexShape *arg1 = (SoVertexShape *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoVertexShape **)&jarg1; 
  delete_SoVertexShape(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNonIndexedShape_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoNonIndexedShape::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNonIndexedShape_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNonIndexedShape *arg1 = (SoNonIndexedShape *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoNonIndexedShape **)&jarg1;  result = ((SoNonIndexedShape const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoNonIndexedShape_1startIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoNonIndexedShape *arg1 = (SoNonIndexedShape *) 0 ; SoSFInt32 *arg2 = (SoSFInt32 *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoNonIndexedShape **)&jarg1;  arg2 = *(SoSFInt32 **)&jarg2;  if (arg1) (arg1)->startIndex = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoNonIndexedShape_1startIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoNonIndexedShape *arg1 = (SoNonIndexedShape *) 0 ; SoSFInt32 *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoNonIndexedShape **)&jarg1;  result = (SoSFInt32 *)& ((arg1)->startIndex);
  *(SoSFInt32 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoNonIndexedShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoNonIndexedShape *arg1 = (SoNonIndexedShape *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoNonIndexedShape **)&jarg1; 
  delete_SoNonIndexedShape(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoCube(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoCube *result = 0 ;
  (void)jenv; (void)jcls; result = (SoCube *)new SoCube(); *(SoCube **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCube_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoCube::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCube_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCube *arg1 = (SoCube *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCube **)&jarg1;  result = ((SoCube const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCube_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCube *arg1 = (SoCube *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCube **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->width = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCube_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCube *arg1 = (SoCube *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCube **)&jarg1;  result = (SoSFFloat *)& ((arg1)->width); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCube_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCube *arg1 = (SoCube *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCube **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->height = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCube_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCube *arg1 = (SoCube *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCube **)&jarg1;  result = (SoSFFloat *)& ((arg1)->height); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCube_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCube *arg1 = (SoCube *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCube **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->depth = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCube_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCube *arg1 = (SoCube *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCube **)&jarg1;  result = (SoSFFloat *)& ((arg1)->depth); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCube(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoCube *arg1 = (SoCube *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoCube **)&jarg1;  delete_SoCube(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoCylinder(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoCylinder *result = 0 ; (void)jenv; (void)jcls; result = (SoCylinder *)new SoCylinder(); *(SoCylinder **)&jresult = result; 
  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCylinder_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoCylinder::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCylinder_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCylinder *arg1 = (SoCylinder *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCylinder **)&jarg1;  result = ((SoCylinder const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCylinder_1SIDES_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoCylinder::Part result; (void)jenv; (void)jcls; result = (SoCylinder::Part)SoCylinder::SIDES; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCylinder_1TOP_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoCylinder::Part result; (void)jenv; (void)jcls; result = (SoCylinder::Part)SoCylinder::TOP; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCylinder_1BOTTOM_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoCylinder::Part result; (void)jenv; (void)jcls; result = (SoCylinder::Part)SoCylinder::BOTTOM; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCylinder_1ALL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoCylinder::Part result; (void)jenv; (void)jcls; result = (SoCylinder::Part)SoCylinder::ALL; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCylinder_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCylinder *arg1 = (SoCylinder *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCylinder **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->radius = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCylinder_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCylinder *arg1 = (SoCylinder *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCylinder **)&jarg1;  result = (SoSFFloat *)& ((arg1)->radius); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCylinder_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCylinder *arg1 = (SoCylinder *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCylinder **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->height = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCylinder_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCylinder *arg1 = (SoCylinder *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCylinder **)&jarg1;  result = (SoSFFloat *)& ((arg1)->height); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCylinder_1parts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCylinder *arg1 = (SoCylinder *) 0 ; SoSFBitMask *arg2 = (SoSFBitMask *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoCylinder **)&jarg1;  arg2 = *(SoSFBitMask **)&jarg2;  if (arg1) (arg1)->parts = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCylinder_1parts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCylinder *arg1 = (SoCylinder *) 0 ; SoSFBitMask *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCylinder **)&jarg1;  result = (SoSFBitMask *)& ((arg1)->parts); *(SoSFBitMask **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCylinder_1addPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoCylinder *arg1 = (SoCylinder *) 0 ; SoCylinder::Part arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCylinder **)&jarg1;  arg2 = (SoCylinder::Part)jarg2;  (arg1)->addPart(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCylinder_1removePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SoCylinder *arg1 = (SoCylinder *) 0 ; SoCylinder::Part arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCylinder **)&jarg1;  arg2 = (SoCylinder::Part)jarg2;  (arg1)->removePart(arg2); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCylinder_1hasPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; SoCylinder *arg1 = (SoCylinder *) 0 ; SoCylinder::Part arg2 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoCylinder **)&jarg1;  arg2 = (SoCylinder::Part)jarg2; 
  result = (SbBool)((SoCylinder const *)arg1)->hasPart(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoCylinder *arg1 = (SoCylinder *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoCylinder **)&jarg1;  delete_SoCylinder(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoCamera::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = ((SoCamera const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1scaleHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SoCamera *arg1 = (SoCamera *) 0 ; float arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCamera **)&jarg1; 
  arg2 = (float)jarg2;  (arg1)->scaleHeight(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1viewportMapping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->viewportMapping = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1viewportMapping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFEnum *)& ((arg1)->viewportMapping); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2;  if (arg1) (arg1)->position = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->position); *(SoSFVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1orientation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFRotation *arg2 = (SoSFRotation *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFRotation **)&jarg2;  if (arg1) (arg1)->orientation = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1orientation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFRotation *)& ((arg1)->orientation); *(SoSFRotation **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1aspectRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->aspectRatio = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1aspectRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFFloat *)& ((arg1)->aspectRatio); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1nearDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->nearDistance = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1nearDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFFloat *)& ((arg1)->nearDistance); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1farDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->farDistance = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1farDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFFloat *)& ((arg1)->farDistance); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCamera_1focalDistance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCamera **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->focalDistance = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCamera_1focalDistance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCamera *arg1 = (SoCamera *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCamera **)&jarg1;  result = (SoSFFloat *)& ((arg1)->focalDistance); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCamera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoCamera *arg1 = (SoCamera *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoCamera **)&jarg1;  delete_SoCamera(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoOrthographicCamera(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoOrthographicCamera *result = 0 ; (void)jenv; (void)jcls; result = (SoOrthographicCamera *)new SoOrthographicCamera();
  *(SoOrthographicCamera **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoOrthographicCamera_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoOrthographicCamera::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoOrthographicCamera_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoOrthographicCamera *arg1 = (SoOrthographicCamera *) 0 ; SoType result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoOrthographicCamera **)&jarg1;  result = ((SoOrthographicCamera const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoOrthographicCamera_1scaleHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SoOrthographicCamera *arg1 = (SoOrthographicCamera *) 0 ; float arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoOrthographicCamera **)&jarg1;  arg2 = (float)jarg2;  (arg1)->scaleHeight(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoOrthographicCamera_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoOrthographicCamera *arg1 = (SoOrthographicCamera *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoOrthographicCamera **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2; 
  if (arg1) (arg1)->height = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoOrthographicCamera_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoOrthographicCamera *arg1 = (SoOrthographicCamera *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoOrthographicCamera **)&jarg1;  result = (SoSFFloat *)& ((arg1)->height);
  *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoOrthographicCamera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoOrthographicCamera *arg1 = (SoOrthographicCamera *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoOrthographicCamera **)&jarg1; 
  delete_SoOrthographicCamera(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPerspectiveCamera(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoPerspectiveCamera *result = 0 ; (void)jenv; (void)jcls; result = (SoPerspectiveCamera *)new SoPerspectiveCamera();
  *(SoPerspectiveCamera **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPerspectiveCamera_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoPerspectiveCamera::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPerspectiveCamera_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPerspectiveCamera *arg1 = (SoPerspectiveCamera *) 0 ; SoType result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoPerspectiveCamera **)&jarg1;  result = ((SoPerspectiveCamera const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPerspectiveCamera_1scaleHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  SoPerspectiveCamera *arg1 = (SoPerspectiveCamera *) 0 ; float arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPerspectiveCamera **)&jarg1;  arg2 = (float)jarg2;  (arg1)->scaleHeight(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPerspectiveCamera_1heightAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPerspectiveCamera *arg1 = (SoPerspectiveCamera *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoPerspectiveCamera **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2; 
  if (arg1) (arg1)->heightAngle = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPerspectiveCamera_1heightAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPerspectiveCamera *arg1 = (SoPerspectiveCamera *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoPerspectiveCamera **)&jarg1;  result = (SoSFFloat *)& ((arg1)->heightAngle);
  *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPerspectiveCamera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoPerspectiveCamera *arg1 = (SoPerspectiveCamera *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoPerspectiveCamera **)&jarg1; 
  delete_SoPerspectiveCamera(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoMaterial(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoMaterial *result = 0 ; (void)jenv; (void)jcls; result = (SoMaterial *)new SoMaterial(); *(SoMaterial **)&jresult = result; 
  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoMaterial::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = ((SoMaterial const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMaterial_1ambientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *arg2 = (SoMFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMaterial **)&jarg1;  arg2 = *(SoMFColor **)&jarg2;  if (arg1) (arg1)->ambientColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1ambientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = (SoMFColor *)& ((arg1)->ambientColor); *(SoMFColor **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMaterial_1diffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *arg2 = (SoMFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMaterial **)&jarg1;  arg2 = *(SoMFColor **)&jarg2;  if (arg1) (arg1)->diffuseColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1diffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = (SoMFColor *)& ((arg1)->diffuseColor); *(SoMFColor **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMaterial_1specularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *arg2 = (SoMFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMaterial **)&jarg1;  arg2 = *(SoMFColor **)&jarg2;  if (arg1) (arg1)->specularColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1specularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = (SoMFColor *)& ((arg1)->specularColor); *(SoMFColor **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMaterial_1emissiveColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *arg2 = (SoMFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMaterial **)&jarg1;  arg2 = *(SoMFColor **)&jarg2;  if (arg1) (arg1)->emissiveColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1emissiveColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = (SoMFColor *)& ((arg1)->emissiveColor); *(SoMFColor **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMaterial_1shininess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFFloat *arg2 = (SoMFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMaterial **)&jarg1;  arg2 = *(SoMFFloat **)&jarg2;  if (arg1) (arg1)->shininess = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1shininess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = (SoMFFloat *)& ((arg1)->shininess); *(SoMFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoMaterial_1transparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFFloat *arg2 = (SoMFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoMaterial **)&jarg1;  arg2 = *(SoMFFloat **)&jarg2;  if (arg1) (arg1)->transparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoMaterial_1transparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoMaterial *arg1 = (SoMaterial *) 0 ; SoMFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoMaterial **)&jarg1;  result = (SoMFFloat *)& ((arg1)->transparency); *(SoMFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoMaterial *arg1 = (SoMaterial *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoMaterial **)&jarg1;  delete_SoMaterial(arg1); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTransformation *arg1 = (SoTransformation *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTransformation **)&jarg1; 
  delete_SoTransformation(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoScale(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoScale *result = 0 ;
  (void)jenv; (void)jcls; result = (SoScale *)new SoScale(); *(SoScale **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoScale_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoScale::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoScale_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoScale *arg1 = (SoScale *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoScale **)&jarg1;  result = ((SoScale const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoScale_1scaleFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoScale *arg1 = (SoScale *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoScale **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2;  if (arg1) (arg1)->scaleFactor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoScale_1scaleFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoScale *arg1 = (SoScale *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoScale **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->scaleFactor); *(SoSFVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoScale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoScale *arg1 = (SoScale *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoScale **)&jarg1;  delete_SoScale(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTranslation(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoTranslation *result = 0 ; (void)jenv; (void)jcls; result = (SoTranslation *)new SoTranslation();
  *(SoTranslation **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTranslation_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoTranslation::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTranslation_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTranslation *arg1 = (SoTranslation *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTranslation **)&jarg1;  result = ((SoTranslation const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTranslation_1translation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoTranslation *arg1 = (SoTranslation *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoTranslation **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2;  if (arg1) (arg1)->translation = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTranslation_1translation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTranslation *arg1 = (SoTranslation *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTranslation **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->translation); *(SoSFVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTranslation *arg1 = (SoTranslation *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTranslation **)&jarg1; 
  delete_SoTranslation(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoRotation(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoRotation *result = 0 ; (void)jenv; (void)jcls; result = (SoRotation *)new SoRotation(); *(SoRotation **)&jresult = result; 
  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotation_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoRotation::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotation_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRotation *arg1 = (SoRotation *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRotation **)&jarg1;  result = ((SoRotation const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRotation_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRotation *arg1 = (SoRotation *) 0 ; SoSFRotation *arg2 = (SoSFRotation *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoRotation **)&jarg1;  arg2 = *(SoSFRotation **)&jarg2;  if (arg1) (arg1)->rotation = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotation_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRotation *arg1 = (SoRotation *) 0 ; SoSFRotation *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRotation **)&jarg1;  result = (SoSFRotation *)& ((arg1)->rotation); *(SoSFRotation **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoRotation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoRotation *arg1 = (SoRotation *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoRotation **)&jarg1;  delete_SoRotation(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoRotationXYZ(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoRotationXYZ *result = 0 ; (void)jenv; (void)jcls; result = (SoRotationXYZ *)new SoRotationXYZ();
  *(SoRotationXYZ **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoRotationXYZ::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRotationXYZ **)&jarg1;  result = ((SoRotationXYZ const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1axis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoRotationXYZ **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->axis = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1axis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRotationXYZ **)&jarg1;  result = (SoSFEnum *)& ((arg1)->axis); *(SoSFEnum **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoRotationXYZ **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->angle = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRotationXYZ **)&jarg1;  result = (SoSFFloat *)& ((arg1)->angle); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRotationXYZ_1getRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; SbRotation result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRotationXYZ **)&jarg1;  result = ((SoRotationXYZ const *)arg1)->getRotation();
  *(SbRotation **)&jresult = new SbRotation((SbRotation &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoRotationXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoRotationXYZ *arg1 = (SoRotationXYZ *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoRotationXYZ **)&jarg1; 
  delete_SoRotationXYZ(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoResetTransform(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoResetTransform *result = 0 ; (void)jenv; (void)jcls; result = (SoResetTransform *)new SoResetTransform();
  *(SoResetTransform **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoResetTransform_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoResetTransform::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoResetTransform_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoResetTransform *arg1 = (SoResetTransform *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoResetTransform **)&jarg1;  result = ((SoResetTransform const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoResetTransform_1TRANSFORM_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoResetTransform::ResetType result; (void)jenv; (void)jcls; result = (SoResetTransform::ResetType)SoResetTransform::TRANSFORM;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoResetTransform_1BBOX_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoResetTransform::ResetType result; (void)jenv; (void)jcls; result = (SoResetTransform::ResetType)SoResetTransform::BBOX;
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoResetTransform_1whatToReset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoResetTransform *arg1 = (SoResetTransform *) 0 ; SoSFBitMask *arg2 = (SoSFBitMask *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoResetTransform **)&jarg1;  arg2 = *(SoSFBitMask **)&jarg2; 
  if (arg1) (arg1)->whatToReset = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoResetTransform_1whatToReset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoResetTransform *arg1 = (SoResetTransform *) 0 ; SoSFBitMask *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoResetTransform **)&jarg1;  result = (SoSFBitMask *)& ((arg1)->whatToReset);
  *(SoSFBitMask **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoResetTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoResetTransform *arg1 = (SoResetTransform *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoResetTransform **)&jarg1; 
  delete_SoResetTransform(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLight_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoLight::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLight_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLight *arg1 = (SoLight *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLight **)&jarg1;  result = ((SoLight const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLight_1on_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLight *arg1 = (SoLight *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoLight **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->on = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLight_1on_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLight *arg1 = (SoLight *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLight **)&jarg1;  result = (SoSFBool *)& ((arg1)->on); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLight_1intensity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLight *arg1 = (SoLight *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoLight **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->intensity = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLight_1intensity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLight *arg1 = (SoLight *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLight **)&jarg1;  result = (SoSFFloat *)& ((arg1)->intensity); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLight_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLight *arg1 = (SoLight *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoLight **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->color = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLight_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLight *arg1 = (SoLight *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLight **)&jarg1;  result = (SoSFColor *)& ((arg1)->color); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoLight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoLight *arg1 = (SoLight *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoLight **)&jarg1;  delete_SoLight(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoDirectionalLight(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoDirectionalLight *result = 0 ; (void)jenv; (void)jcls; result = (SoDirectionalLight *)new SoDirectionalLight();
  *(SoDirectionalLight **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDirectionalLight_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoDirectionalLight::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDirectionalLight_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDirectionalLight *arg1 = (SoDirectionalLight *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDirectionalLight **)&jarg1;  result = ((SoDirectionalLight const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoDirectionalLight_1direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoDirectionalLight *arg1 = (SoDirectionalLight *) 0 ; SoSFVec3f *arg2 = (SoSFVec3f *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoDirectionalLight **)&jarg1;  arg2 = *(SoSFVec3f **)&jarg2; 
  if (arg1) (arg1)->direction = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDirectionalLight_1direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDirectionalLight *arg1 = (SoDirectionalLight *) 0 ; SoSFVec3f *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoDirectionalLight **)&jarg1;  result = (SoSFVec3f *)& ((arg1)->direction);
  *(SoSFVec3f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoDirectionalLight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoDirectionalLight *arg1 = (SoDirectionalLight *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoDirectionalLight **)&jarg1; 
  delete_SoDirectionalLight(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoLightModel(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoLightModel *result = 0 ; (void)jenv; (void)jcls; result = (SoLightModel *)new SoLightModel();
  *(SoLightModel **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLightModel_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoLightModel::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLightModel_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLightModel *arg1 = (SoLightModel *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLightModel **)&jarg1;  result = ((SoLightModel const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLightModel_1model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLightModel *arg1 = (SoLightModel *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoLightModel **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->model = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLightModel_1model_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLightModel *arg1 = (SoLightModel *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLightModel **)&jarg1;  result = (SoSFEnum *)& ((arg1)->model); *(SoSFEnum **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoLightModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoLightModel *arg1 = (SoLightModel *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoLightModel **)&jarg1; 
  delete_SoLightModel(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoDrawStyle(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoDrawStyle *result = 0 ; (void)jenv; (void)jcls; result = (SoDrawStyle *)new SoDrawStyle();
  *(SoDrawStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDrawStyle_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoDrawStyle::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDrawStyle_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDrawStyle *arg1 = (SoDrawStyle *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDrawStyle **)&jarg1;  result = ((SoDrawStyle const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoDrawStyle_1pointSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoDrawStyle *arg1 = (SoDrawStyle *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoDrawStyle **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->pointSize = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDrawStyle_1pointSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDrawStyle *arg1 = (SoDrawStyle *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDrawStyle **)&jarg1;  result = (SoSFFloat *)& ((arg1)->pointSize); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoDrawStyle_1lineWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoDrawStyle *arg1 = (SoDrawStyle *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoDrawStyle **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->lineWidth = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDrawStyle_1lineWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDrawStyle *arg1 = (SoDrawStyle *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDrawStyle **)&jarg1;  result = (SoSFFloat *)& ((arg1)->lineWidth); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoCoordinate3(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoCoordinate3 *result = 0 ; (void)jenv; (void)jcls; result = (SoCoordinate3 *)new SoCoordinate3();
  *(SoCoordinate3 **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCoordinate3_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoCoordinate3::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCoordinate3_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCoordinate3 *arg1 = (SoCoordinate3 *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCoordinate3 **)&jarg1;  result = ((SoCoordinate3 const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCoordinate3_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCoordinate3 *arg1 = (SoCoordinate3 *) 0 ; SoMFVec3f *arg2 = (SoMFVec3f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoCoordinate3 **)&jarg1;  arg2 = *(SoMFVec3f **)&jarg2;  if (arg1) (arg1)->point = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCoordinate3_1point_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCoordinate3 *arg1 = (SoCoordinate3 *) 0 ; SoMFVec3f *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCoordinate3 **)&jarg1;  result = (SoMFVec3f *)& ((arg1)->point); *(SoMFVec3f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCoordinate3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoCoordinate3 *arg1 = (SoCoordinate3 *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoCoordinate3 **)&jarg1; 
  delete_SoCoordinate3(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoLineSet(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoLineSet *result = 0 ;
  (void)jenv; (void)jcls; result = (SoLineSet *)new SoLineSet(); *(SoLineSet **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineSet_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoLineSet::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineSet_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineSet *arg1 = (SoLineSet *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineSet **)&jarg1;  result = ((SoLineSet const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineSet_1numVertices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLineSet *arg1 = (SoLineSet *) 0 ; SoMFInt32 *arg2 = (SoMFInt32 *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoLineSet **)&jarg1;  arg2 = *(SoMFInt32 **)&jarg2;  if (arg1) (arg1)->numVertices = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineSet_1numVertices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineSet *arg1 = (SoLineSet *) 0 ; SoMFInt32 *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineSet **)&jarg1;  result = (SoMFInt32 *)& ((arg1)->numVertices); *(SoMFInt32 **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoLineSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoLineSet *arg1 = (SoLineSet *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoLineSet **)&jarg1;  delete_SoLineSet(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoBaseKit_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoBaseKit *arg1 = (SoBaseKit *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoBaseKit **)&jarg1;  result = ((SoBaseKit const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoBaseKit(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoBaseKit *result = 0 ;
  (void)jenv; (void)jcls; result = (SoBaseKit *)new SoBaseKit(); *(SoBaseKit **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoBaseKit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoBaseKit *arg1 = (SoBaseKit *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoBaseKit **)&jarg1;  delete_SoBaseKit(arg1); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_FALSE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; SbBool result; (void)jenv;
  (void)jcls; result = (SbBool) 0; jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_TRUE_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ; SbBool result; (void)jenv;
  (void)jcls; result = (SbBool) 1; jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoAlternateRepAction(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoAlternateRepAction *result = 0 ; (void)jenv; (void)jcls; result = (SoAlternateRepAction *)new SoAlternateRepAction();
  *(SoAlternateRepAction **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoAlternateRepAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoAlternateRepAction *arg1 = (SoAlternateRepAction *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoAlternateRepAction **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAlternateRepAction_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAlternateRepAction *arg1 = (SoAlternateRepAction *) 0 ; SoType result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoAlternateRepAction **)&jarg1;  result = ((SoAlternateRepAction const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAlternateRepAction_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoAlternateRepAction::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAlternateRepAction_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoAlternateRepAction::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTools_1searchNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SbString *arg2 = 0 ; SoNode *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoNode **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SoNode *)SoTools::searchNode(arg1,(SbString const &)*arg2); *(SoNode **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoTools_1setKitPartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ; SoBaseKit *arg1 = (SoBaseKit *) 0 ; SbString *arg2 = 0 ; SbString *arg3 = 0 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(SoBaseKit **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)SoTools::setKitPartValue(arg1,(SbString const &)*arg2,(SbString const &)*arg3); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoTools_1getKitPartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ; SoBaseKit *arg1 = (SoBaseKit *) 0 ; SbString *arg2 = 0 ; SbString *arg3 = 0 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(SoBaseKit **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString & reference is null"); return 0; }  
  result = (SbBool)SoTools::getKitPartValue(arg1,(SbString const &)*arg2,*arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoTools_1toggleKitPartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoBaseKit *arg1 = (SoBaseKit *) 0 ; SbString *arg2 = 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoBaseKit **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)SoTools::toggleKitPartValue(arg1,(SbString const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTools_1resetHighlight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoNode *arg1 = (SoNode *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoNode **)&jarg1; 
  SoTools::resetHighlight(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTools(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTools *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTools *)new SoTools(); *(SoTools **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTools(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTools *arg1 = (SoTools *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTools **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoViewportRegion(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoViewportRegion *result = 0 ; (void)jenv; (void)jcls; result = (SoViewportRegion *)new SoViewportRegion();
  *(SoViewportRegion **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoViewportRegion **)&jarg1;  result = ((SoViewportRegion const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoViewportRegion::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoViewportRegion::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1originUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->originUnit = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1originUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFEnum *)& ((arg1)->originUnit);
  *(SoSFEnum **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1sizeUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->sizeUnit = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1sizeUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFEnum *)& ((arg1)->sizeUnit);
  *(SoSFEnum **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1origin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFVec2f *arg2 = (SoSFVec2f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFVec2f **)&jarg2;  if (arg1) (arg1)->origin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1origin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFVec2f *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFVec2f *)& ((arg1)->origin);
  *(SoSFVec2f **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFVec2f *arg2 = (SoSFVec2f *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFVec2f **)&jarg2;  if (arg1) (arg1)->size = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFVec2f *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFVec2f *)& ((arg1)->size); *(SoSFVec2f **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalBorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2; 
  if (arg1) (arg1)->horizontalBorder = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalBorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->horizontalBorder);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalBorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->verticalBorder = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalBorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->verticalBorder);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1background_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->background = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1background_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFBool *)& ((arg1)->background);
  *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1backgroundColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->backgroundColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1backgroundColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFColor *)& ((arg1)->backgroundColor);
  *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1borderColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->borderColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1borderColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFColor *)& ((arg1)->borderColor);
  *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1highlighted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->highlighted = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1highlighted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFBool *)& ((arg1)->highlighted);
  *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1highlightColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->highlightColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1highlightColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFColor *)& ((arg1)->highlightColor);
  *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalHighlightBorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2; 
  if (arg1) (arg1)->horizontalHighlightBorder = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalHighlightBorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->horizontalHighlightBorder);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalHighlightBorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2; 
  if (arg1) (arg1)->verticalHighlightBorder = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalHighlightBorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->verticalHighlightBorder);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalShadow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2; 
  if (arg1) (arg1)->horizontalShadow = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalShadow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->horizontalShadow);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalShadow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->verticalShadow = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalShadow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->verticalShadow);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1sensitiveBorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->sensitiveBorder = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1sensitiveBorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFBool *)& ((arg1)->sensitiveBorder);
  *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalOriginOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2; 
  if (arg1) (arg1)->horizontalOriginOffset = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1horizontalOriginOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->horizontalOriginOffset);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalOriginOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoViewportRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2; 
  if (arg1) (arg1)->verticalOriginOffset = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoViewportRegion_1verticalOriginOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoViewportRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->verticalOriginOffset);
  *(SoSFShort **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoViewportRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoViewportRegion *arg1 = (SoViewportRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoViewportRegion **)&jarg1; 
  delete_SoViewportRegion(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoImageWriter(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoImageWriter *result = 0 ; (void)jenv; (void)jcls; result = (SoImageWriter *)new SoImageWriter();
  *(SoImageWriter **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoImageWriter_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoImageWriter *arg1 = (SoImageWriter *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoImageWriter **)&jarg1;  result = ((SoImageWriter const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoImageWriter_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoImageWriter::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoImageWriter_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoImageWriter::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoImageWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoImageWriter *arg1 = (SoImageWriter *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoImageWriter **)&jarg1; 
  delete_SoImageWriter(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1HEPVis_1SoImage(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  HEPVis_SoImage *result = 0 ; (void)jenv; (void)jcls; result = (HEPVis_SoImage *)new HEPVis_SoImage();
  *(HEPVis_SoImage **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; HEPVis_SoImage *arg1 = (HEPVis_SoImage *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(HEPVis_SoImage **)&jarg1;  result = ((HEPVis_SoImage const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = HEPVis_SoImage::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  HEPVis_SoImage::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HEPVis_SoImage *arg1 = (HEPVis_SoImage *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(HEPVis_SoImage **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->format = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; HEPVis_SoImage *arg1 = (HEPVis_SoImage *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(HEPVis_SoImage **)&jarg1;  result = (SoSFEnum *)& ((arg1)->format); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1fileName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HEPVis_SoImage *arg1 = (HEPVis_SoImage *) 0 ; SoSFString *arg2 = (SoSFString *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(HEPVis_SoImage **)&jarg1;  arg2 = *(SoSFString **)&jarg2;  if (arg1) (arg1)->fileName = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_HEPVis_1SoImage_1fileName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; HEPVis_SoImage *arg1 = (HEPVis_SoImage *) 0 ; SoSFString *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(HEPVis_SoImage **)&jarg1;  result = (SoSFString *)& ((arg1)->fileName);
  *(SoSFString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1HEPVis_1SoImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HEPVis_SoImage *arg1 = (HEPVis_SoImage *) 0 ; (void)jenv; (void)jcls; arg1 = *(HEPVis_SoImage **)&jarg1; 
  delete_HEPVis_SoImage(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoStyle(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoStyle *result = 0 ;
  (void)jenv; (void)jcls; result = (SoStyle *)new SoStyle(); *(SoStyle **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyle_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoStyle *arg1 = (SoStyle *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoStyle **)&jarg1;  result = ((SoStyle const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyle_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoStyle::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoStyle_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoStyle::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoStyle *arg1 = (SoStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoStyle **)&jarg1;  delete_SoStyle(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoLineStyle(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoLineStyle *result = 0 ; (void)jenv; (void)jcls; result = (SoLineStyle *)new SoLineStyle();
  *(SoLineStyle **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result = ((SoLineStyle const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoLineStyle::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoLineStyle::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoLineStyle **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->color = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result = (SoSFColor *)& ((arg1)->color); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1transparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoLineStyle **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->transparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1transparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result = (SoSFFloat *)& ((arg1)->transparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFInt32 *arg2 = (SoSFInt32 *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoLineStyle **)&jarg1;  arg2 = *(SoSFInt32 **)&jarg2;  if (arg1) (arg1)->width = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFInt32 *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result = (SoSFInt32 *)& ((arg1)->width); *(SoSFInt32 **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1pattern_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFUShort arg2 ; SoSFUShort *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  argp2 = *(SoSFUShort **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SoSFUShort"); return ; } 
  arg2 = *argp2;  if (arg1) (arg1)->pattern = arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1pattern_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFUShort result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result =  ((arg1)->pattern);
  *(SoSFUShort **)&jresult = new SoSFUShort((SoSFUShort &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1visible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoLineStyle **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->visible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1visible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result = (SoSFBool *)& ((arg1)->visible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoLineStyle_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoLineStyle **)&jarg1; 
  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoLineStyle_1setFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SbString *arg2 = 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoLineStyle **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->setFromString((SbString const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoLineStyle_1getSbStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoLineStyle *arg1 = (SoLineStyle *) 0 ; SbStyle result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoLineStyle **)&jarg1;  result = ((SoLineStyle const *)arg1)->getSbStyle();
  *(SbStyle **)&jresult = new SbStyle((SbStyle &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoLineStyle *arg1 = (SoLineStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoLineStyle **)&jarg1;  delete_SoLineStyle(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoAreaStyle(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoAreaStyle *result = 0 ; (void)jenv; (void)jcls; result = (SoAreaStyle *)new SoAreaStyle();
  *(SoAreaStyle **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAreaStyle_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAreaStyle **)&jarg1;  result = ((SoAreaStyle const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAreaStyle_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoAreaStyle::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAreaStyle_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoAreaStyle::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAreaStyle_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoAreaStyle **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->color = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAreaStyle_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAreaStyle **)&jarg1;  result = (SoSFColor *)& ((arg1)->color); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAreaStyle_1transparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoAreaStyle **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->transparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAreaStyle_1transparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAreaStyle **)&jarg1;  result = (SoSFFloat *)& ((arg1)->transparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAreaStyle_1visible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAreaStyle **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->visible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAreaStyle_1visible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAreaStyle **)&jarg1;  result = (SoSFBool *)& ((arg1)->visible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAreaStyle_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoAreaStyle **)&jarg1; 
  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoAreaStyle_1setFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SbString *arg2 = 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoAreaStyle **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->setFromString((SbString const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAreaStyle_1getSbStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; SbStyle result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAreaStyle **)&jarg1;  result = ((SoAreaStyle const *)arg1)->getSbStyle();
  *(SbStyle **)&jresult = new SbStyle((SbStyle &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoAreaStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoAreaStyle *arg1 = (SoAreaStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoAreaStyle **)&jarg1;  delete_SoAreaStyle(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTextStyle(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoTextStyle *result = 0 ; (void)jenv; (void)jcls; result = (SoTextStyle *)new SoTextStyle();
  *(SoTextStyle **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextStyle_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextStyle **)&jarg1;  result = ((SoTextStyle const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextStyle_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoTextStyle::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextStyle_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTextStyle::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextStyle_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoTextStyle **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->color = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextStyle_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextStyle **)&jarg1;  result = (SoSFColor *)& ((arg1)->color); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextStyle_1transparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoTextStyle **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->transparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextStyle_1transparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextStyle **)&jarg1;  result = (SoSFFloat *)& ((arg1)->transparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextStyle_1visible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoTextStyle **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->visible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextStyle_1visible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextStyle *arg1 = (SoTextStyle *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextStyle **)&jarg1;  result = (SoSFBool *)& ((arg1)->visible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextStyle_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoTextStyle *arg1 = (SoTextStyle *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoTextStyle **)&jarg1; 
  (arg1)->reset(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoTextStyle_1setFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoTextStyle *arg1 = (SoTextStyle *) 0 ; SbString *arg2 = 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoTextStyle **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->setFromString((SbString const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextStyle_1getSbStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextStyle *arg1 = (SoTextStyle *) 0 ; SbStyle result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextStyle **)&jarg1;  result = ((SoTextStyle const *)arg1)->getSbStyle();
  *(SbStyle **)&jresult = new SbStyle((SbStyle &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTextStyle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTextStyle *arg1 = (SoTextStyle *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTextStyle **)&jarg1;  delete_SoTextStyle(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTextHershey(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoTextHershey *result = 0 ; (void)jenv; (void)jcls; result = (SoTextHershey *)new SoTextHershey();
  *(SoTextHershey **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextHershey_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextHershey *arg1 = (SoTextHershey *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextHershey **)&jarg1;  result = ((SoTextHershey const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextHershey_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoTextHershey::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextHershey_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTextHershey::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTextHershey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTextHershey *arg1 = (SoTextHershey *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTextHershey **)&jarg1; 
  delete_SoTextHershey(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTextTTF(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTextTTF *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTextTTF *)new SoTextTTF(); *(SoTextTTF **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextTTF_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextTTF *arg1 = (SoTextTTF *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextTTF **)&jarg1;  result = ((SoTextTTF const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextTTF_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoTextTTF::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextTTF_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTextTTF::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTextTTF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTextTTF *arg1 = (SoTextTTF *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTextTTF **)&jarg1;  delete_SoTextTTF(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoGrid(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoGrid *result = 0 ;
  (void)jenv; (void)jcls; result = (SoGrid *)new SoGrid(); *(SoGrid **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoGrid_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoGrid *arg1 = (SoGrid *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoGrid **)&jarg1;  result = ((SoGrid const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoGrid_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoGrid::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoGrid_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoGrid::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoGrid *arg1 = (SoGrid *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoGrid **)&jarg1;  delete_SoGrid(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTextVtk(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTextVtk *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTextVtk *)new SoTextVtk(); *(SoTextVtk **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextVtk_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextVtk *arg1 = (SoTextVtk *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextVtk **)&jarg1;  result = ((SoTextVtk const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextVtk_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoTextVtk::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextVtk_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTextVtk::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTextVtk(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTextVtk *arg1 = (SoTextVtk *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTextVtk **)&jarg1;  delete_SoTextVtk(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPyramid(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoPyramid *result = 0 ;
  (void)jenv; (void)jcls; result = (SoPyramid *)new SoPyramid(); *(SoPyramid **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPyramid_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPyramid *arg1 = (SoPyramid *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPyramid **)&jarg1;  result = ((SoPyramid const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPyramid_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoPyramid::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPyramid_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPyramid::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPyramid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoPyramid *arg1 = (SoPyramid *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoPyramid **)&jarg1;  delete_SoPyramid(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoSplineCurve(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoSplineCurve *result = 0 ; (void)jenv; (void)jcls; result = (SoSplineCurve *)new SoSplineCurve();
  *(SoSplineCurve **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSplineCurve_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoSplineCurve *arg1 = (SoSplineCurve *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoSplineCurve **)&jarg1;  result = ((SoSplineCurve const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoSplineCurve_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoSplineCurve::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoSplineCurve_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoSplineCurve::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoSplineCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoSplineCurve *arg1 = (SoSplineCurve *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoSplineCurve **)&jarg1; 
  delete_SoSplineCurve(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoHighlightMaterial(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoHighlightMaterial *result = 0 ; (void)jenv; (void)jcls; result = (SoHighlightMaterial *)new SoHighlightMaterial();
  *(SoHighlightMaterial **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoHighlightMaterial_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoHighlightMaterial *arg1 = (SoHighlightMaterial *) 0 ; SoType result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoHighlightMaterial **)&jarg1;  result = ((SoHighlightMaterial const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoHighlightMaterial_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoHighlightMaterial::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoHighlightMaterial_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoHighlightMaterial::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoHighlightMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoHighlightMaterial *arg1 = (SoHighlightMaterial *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoHighlightMaterial **)&jarg1; 
  delete_SoHighlightMaterial(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoStyleCache(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoStyleCache *result = 0 ; (void)jenv; (void)jcls; result = (SoStyleCache *)new SoStyleCache();
  *(SoStyleCache **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SoMaterial *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoStyleCache **)&jarg1;  arg2 = (float)jarg2; 
  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5; 
  result = (SoMaterial *)(arg1)->getMaterial(arg2,arg3,arg4,arg5); *(SoMaterial **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getHighlightMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; float arg8 ; SoHighlightMaterial *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoStyleCache **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5; 
  arg6 = (float)jarg6;  arg7 = (float)jarg7;  arg8 = (float)jarg8; 
  result = (SoHighlightMaterial *)(arg1)->getHighlightMaterial(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(SoHighlightMaterial **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; SbLinePattern arg2 ; float arg3 ; SoDrawStyle *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoStyleCache **)&jarg1;  arg2 = (SbLinePattern)jarg2;  arg3 = (float)jarg3; 
  result = (SoDrawStyle *)(arg1)->getLineStyle(arg2,arg3); *(SoDrawStyle **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getFilled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; SoDrawStyle *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoStyleCache **)&jarg1;  result = (SoDrawStyle *)(arg1)->getFilled(); *(SoDrawStyle **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getLightModelPhong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; SoLightModel *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoStyleCache **)&jarg1;  result = (SoLightModel *)(arg1)->getLightModelPhong(); *(SoLightModel **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getLightModelBaseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; SoLightModel *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoStyleCache **)&jarg1;  result = (SoLightModel *)(arg1)->getLightModelBaseColor();
  *(SoLightModel **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoStyleCache_1getResetTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoStyleCache *arg1 = (SoStyleCache *) 0 ; SoResetTransform *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoStyleCache **)&jarg1;  result = (SoResetTransform *)(arg1)->getResetTransform();
  *(SoResetTransform **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoStyleCache(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoStyleCache *arg1 = (SoStyleCache *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoStyleCache **)&jarg1; 
  delete_SoStyleCache(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbDoIt_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SbDoIt *arg1 = (SbDoIt *) 0 ; SbString *arg2 = 0 ; void *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SbDoIt **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (void *)((SbDoIt const *)arg1)->cast((SbString const &)*arg2); *(void **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbDoIt(JNIEnv *jenv, jclass jcls, jlong jarg1) { SbDoIt *arg1 = (SbDoIt *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SbDoIt **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SbAddNode_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SbAddNode *arg1 = (SbAddNode *) 0 ; SbString *arg2 = 0 ; void *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SbAddNode **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (void *)((SbAddNode const *)arg1)->cast((SbString const &)*arg2); *(void **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SbAddNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoNode *arg1 = (SoNode *) 0 ; SbString *arg2 = 0 ; SbAddNode *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoNode **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbAddNode *)new SbAddNode(arg1,(SbString const &)*arg2); *(SbAddNode **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SbAddNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SbAddNode *arg1 = (SbAddNode *) 0 ; (void)jenv; (void)jcls; arg1 = *(SbAddNode **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoRegion(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoRegion *result = 0 ;
  (void)jenv; (void)jcls; result = (SoRegion *)new SoRegion(); *(SoRegion **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = ((SoRegion const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoRegion::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoRegion::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1getViewportRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoViewportRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoViewportRegion *)((SoRegion const *)arg1)->getViewportRegion();
  *(SoViewportRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1findPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SbName *arg2 = 0 ; SoNode *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoRegion **)&jarg1;  arg2 = *(SbName **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbName const & reference is null"); return 0; }  
  result = (SoNode *)(arg1)->findPart((SbName const &)*arg2); *(SoNode **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1findNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SbString *arg2 = 0 ; SbString *arg3 = 0 ; SoNode *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(SoRegion **)&jarg1;  arg2 = *(SbString **)&jarg2;
  if(!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SoNode *)(arg1)->findNode((SbString const &)*arg2,(SbString const &)*arg3); *(SoNode **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1styleCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoStyleCache *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoStyleCache *)((SoRegion const *)arg1)->styleCache();
  *(SoStyleCache **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1getCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoCamera *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoCamera *)((SoRegion const *)arg1)->getCamera(); *(SoCamera **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRegion *arg1 = (SoRegion *) 0 ; SbString *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return ; }  
  (arg1)->clear((SbString const &)*arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoRegion *arg1 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoRegion **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoRegion *arg1 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoRegion **)&jarg1;  (arg1)->refresh(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoRegion_1doIt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SbDoIt *arg2 = 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoRegion **)&jarg1;  arg2 = *(SbDoIt **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbDoIt const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->doIt((SbDoIt const &)*arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1undo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoRegion *arg1 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoRegion **)&jarg1;  (arg1)->undo(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1resetUndo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoRegion *arg1 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoRegion **)&jarg1;  (arg1)->resetUndo(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoRegion_1connectFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoRegion **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SbBool)(arg1)->connectFrom(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoRegion_1setNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SbString *arg2 = 0 ; SbString *arg3 = 0 ; SbString *arg4 = 0 ;
  SbBool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(SoRegion **)&jarg1; 
  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg4 = *(SbString **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->setNode((SbString const &)*arg2,(SbString const &)*arg3,(SbString const &)*arg4);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  SoRegion *arg1 = (SoRegion *) 0 ; float arg2 ; float arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  (arg1)->setPosition(arg2,arg3); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  SoRegion *arg1 = (SoRegion *) 0 ; float arg2 ; float arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = (float)jarg2;  arg3 = (float)jarg3;  (arg1)->setSize(arg2,arg3); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoRegion_1readScene_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SbString *arg2 = 0 ; SbString *arg3 = 0 ; SbString *arg4 = 0 ;
  SbBool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; (void)jarg4_; arg1 = *(SoRegion **)&jarg1; 
  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg4 = *(SbString **)&jarg4; if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->readScene((SbString const &)*arg2,(SbString const &)*arg3,(SbString const &)*arg4);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoRegion_1readScene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SbString *arg2 = 0 ; SbString *arg3 = 0 ; SbBool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg3_; arg1 = *(SoRegion **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = *(SbString **)&jarg3; if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  result = (SbBool)(arg1)->readScene((SbString const &)*arg2,(SbString const &)*arg3); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1visible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRegion *arg1 = (SoRegion *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->visible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1visible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoSFBool *)& ((arg1)->visible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRegion *arg1 = (SoRegion *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->verbose = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoSFBool *)& ((arg1)->verbose); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRegion *arg1 = (SoRegion *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->color = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoSFColor *)& ((arg1)->color); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1horizontalMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRegion *arg1 = (SoRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->horizontalMargin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1horizontalMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->horizontalMargin); *(SoSFShort **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoRegion_1verticalMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoRegion *arg1 = (SoRegion *) 0 ; SoSFShort *arg2 = (SoSFShort *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoRegion **)&jarg1;  arg2 = *(SoSFShort **)&jarg2;  if (arg1) (arg1)->verticalMargin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoRegion_1verticalMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoRegion *arg1 = (SoRegion *) 0 ; SoSFShort *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoRegion **)&jarg1;  result = (SoSFShort *)& ((arg1)->verticalMargin); *(SoSFShort **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoRegion *arg1 = (SoRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoRegion **)&jarg1;  delete_SoRegion(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoDisplayRegion(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoDisplayRegion *result = 0 ; (void)jenv; (void)jcls; result = (SoDisplayRegion *)new SoDisplayRegion();
  *(SoDisplayRegion **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDisplayRegion_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDisplayRegion *arg1 = (SoDisplayRegion *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDisplayRegion **)&jarg1;  result = ((SoDisplayRegion const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDisplayRegion_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoDisplayRegion::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoDisplayRegion_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoDisplayRegion::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDisplayRegion_1getStaticScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDisplayRegion *arg1 = (SoDisplayRegion *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoDisplayRegion **)&jarg1;  result = (SoSeparator *)((SoDisplayRegion const *)arg1)->getStaticScene();
  *(SoSeparator **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDisplayRegion_1getDynamicScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDisplayRegion *arg1 = (SoDisplayRegion *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoDisplayRegion **)&jarg1;  result = (SoSeparator *)((SoDisplayRegion const *)arg1)->getDynamicScene();
  *(SoSeparator **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoDisplayRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoDisplayRegion *arg1 = (SoDisplayRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoDisplayRegion **)&jarg1; 
  delete_SoDisplayRegion(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoImageRegion(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoImageRegion *result = 0 ; (void)jenv; (void)jcls; result = (SoImageRegion *)new SoImageRegion();
  *(SoImageRegion **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoImageRegion_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoImageRegion *arg1 = (SoImageRegion *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoImageRegion **)&jarg1;  result = ((SoImageRegion const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoImageRegion_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoImageRegion::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoImageRegion_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoImageRegion::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoImageRegion_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoImageRegion *arg1 = (SoImageRegion *) 0 ; HEPVis_SoImage *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoImageRegion **)&jarg1;  result = (HEPVis_SoImage *)((SoImageRegion const *)arg1)->getImage();
  *(HEPVis_SoImage **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoImageRegion_1getCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoImageRegion *arg1 = (SoImageRegion *) 0 ; SoCamera *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoImageRegion **)&jarg1;  result = (SoCamera *)((SoImageRegion const *)arg1)->getCamera();
  *(SoCamera **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoImageRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoImageRegion *arg1 = (SoImageRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoImageRegion **)&jarg1; 
  delete_SoImageRegion(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTextRegion(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoTextRegion *result = 0 ; (void)jenv; (void)jcls; result = (SoTextRegion *)new SoTextRegion();
  *(SoTextRegion **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextRegion_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTextRegion *arg1 = (SoTextRegion *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTextRegion **)&jarg1;  result = ((SoTextRegion const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTextRegion_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoTextRegion::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTextRegion_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTextRegion::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTextRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTextRegion *arg1 = (SoTextRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTextRegion **)&jarg1; 
  delete_SoTextRegion(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoCanvas(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoCanvas *result = 0 ;
  (void)jenv; (void)jcls; result = (SoCanvas *)new SoCanvas(); *(SoCanvas **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  result = ((SoCanvas const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoCanvas::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoCanvas::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1createRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SbString *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  SoRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1; 
  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = (float)jarg3;  arg4 = (float)jarg4;  arg5 = (float)jarg5;  arg6 = (float)jarg6; 
  result = (SoRegion *)(arg1)->createRegion((SbString const &)*arg2,arg3,arg4,arg5,arg6); *(SoRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1deleteRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2;  (arg1)->deleteRegion(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1clearRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCanvas **)&jarg1;  (arg1)->clearRegions(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1deleteRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCanvas **)&jarg1; 
  (arg1)->deleteRegions(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1refreshRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCanvas **)&jarg1; 
  (arg1)->refreshRegions(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1getNumberOfRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  result = (int)((SoCanvas const *)arg1)->getNumberOfRegions(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int arg2 ; SoRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = (int)jarg2;  result = (SoRegion *)((SoCanvas const *)arg1)->getRegion(arg2);
  *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1getRegionIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (int)((SoCanvas const *)arg1)->getRegionIndex(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getNextRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SoRegion *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SoRegion *)((SoCanvas const *)arg1)->getNextRegion(arg2); *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getPreviousRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SoRegion *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SoRegion *)((SoCanvas const *)arg1)->getPreviousRegion(arg2); *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1setRegionOnTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2;  (arg1)->setRegionOnTop(arg2); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getPickedRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int arg2 ; int arg3 ; SoRegion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoCanvas **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  result = (SoRegion *)((SoCanvas const *)arg1)->getPickedRegion(arg2,arg3); *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getHighlightedRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  result = (SoRegion *)((SoCanvas const *)arg1)->getHighlightedRegion();
  *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1highlightRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2;  (arg1)->highlightRegion(arg2); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1highlightNextRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCanvas **)&jarg1; 
  (arg1)->highlightNextRegion(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1highlightPreviousRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCanvas **)&jarg1; 
  (arg1)->highlightPreviousRegion(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1deleteHighlightedRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoCanvas **)&jarg1; 
  (arg1)->deleteHighlightedRegion(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1getNumberOfRootRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  result = (int)((SoCanvas const *)arg1)->getNumberOfRootRegions(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1isRootRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SbBool)((SoCanvas const *)arg1)->isRootRegion(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getRootRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int arg2 ; SoRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = (int)jarg2;  result = (SoRegion *)((SoCanvas const *)arg1)->getRootRegion(arg2);
  *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1getRootRegionIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; int result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (int)((SoCanvas const *)arg1)->getRootRegionIndex(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getNextRootRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SoRegion *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SoRegion *)((SoCanvas const *)arg1)->getNextRootRegion(arg2); *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1getPreviousRootRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SoRegion *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SoRegion *)((SoCanvas const *)arg1)->getPreviousRootRegion(arg2); *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1currentRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  result = (SoRegion *)((SoCanvas const *)arg1)->currentRegion();
  *(SoRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1setCurrentRegion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int arg2 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = (int)jarg2;  result = (SbBool)(arg1)->setCurrentRegion(arg2); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1setCurrentRegion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoRegion *arg2 = (SoRegion *) 0 ; SbBool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoRegion **)&jarg2; 
  result = (SbBool)(arg1)->setCurrentRegion(arg2); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoCanvas_1connectCurrentRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; int arg2 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = (int)jarg2;  result = (SbBool)(arg1)->connectCurrentRegion(arg2);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCanvas_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoCanvas **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->verbose = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCanvas_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCanvas *arg1 = (SoCanvas *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCanvas **)&jarg1;  result = (SoSFBool *)& ((arg1)->verbose); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCanvas(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoCanvas *arg1 = (SoCanvas *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoCanvas **)&jarg1;  delete_SoCanvas(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPage(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoPage *result = 0 ;
  (void)jenv; (void)jcls; result = (SoPage *)new SoPage(); *(SoPage **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = ((SoPage const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoPage::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPage::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1createRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  SoPage *arg1 = (SoPage *) 0 ; SbString *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(SoPage **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return ; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5;  (arg1)->createRegions((SbString const &)*arg2,arg3,arg4,arg5); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1addRegions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  SoPage *arg1 = (SoPage *) 0 ; SbString *arg2 = 0 ; int arg3 ; int arg4 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return ; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  (arg1)->addRegions((SbString const &)*arg2,arg3,arg4); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1mapHighlightedRegionToPage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoPage *arg1 = (SoPage *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoPage **)&jarg1; 
  (arg1)->mapHighlightedRegionToPage(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1createGridRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SbString *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; SoRegion *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(SoPage **)&jarg1;  arg2 = *(SbString **)&jarg2; if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SbString const & reference is null"); return 0; }  
  arg3 = (int)jarg3;  arg4 = (int)jarg4;  arg5 = (int)jarg5; 
  result = (SoRegion *)(arg1)->createGridRegion((SbString const &)*arg2,arg3,arg4,arg5); *(SoRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoMFString *arg2 = (SoMFString *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoMFString **)&jarg2;  if (arg1) (arg1)->title = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoMFString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoMFString *)& ((arg1)->title); *(SoMFString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1titleVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->titleVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1titleVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFBool *)& ((arg1)->titleVisible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1titleHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->titleHeight = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1titleHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->titleHeight); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1regionsResizePolicy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->regionsResizePolicy = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1regionsResizePolicy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFEnum *)& ((arg1)->regionsResizePolicy); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1pageWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->pageWidth = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1pageWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->pageWidth); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1pageHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->pageHeight = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1pageHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->pageHeight); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1leftMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->leftMargin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1leftMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->leftMargin); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1rightMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->rightMargin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1rightMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->rightMargin); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1bottomMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->bottomMargin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1bottomMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->bottomMargin); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1topMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->topMargin = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1topMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->topMargin); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1horizontalSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->horizontalSpacing = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1horizontalSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->horizontalSpacing); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPage_1verticalSpacing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoPage **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->verticalSpacing = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPage_1verticalSpacing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPage *arg1 = (SoPage *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPage **)&jarg1;  result = (SoSFFloat *)& ((arg1)->verticalSpacing); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPage(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoPage *arg1 = (SoPage *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoPage **)&jarg1;  delete_SoPage(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoAxis(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoAxis *result = 0 ;
  (void)jenv; (void)jcls; result = (SoAxis *)new SoAxis(); *(SoAxis **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = ((SoAxis const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoAxis::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoAxis::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoAxis *arg1 = (SoAxis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoAxis **)&jarg1;  (arg1)->reset(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1updateChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SoAxis *arg1 = (SoAxis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SoAxis **)&jarg1;  (arg1)->updateChildren(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->verbose = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFBool *)& ((arg1)->verbose); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1modeling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFString *arg2 = (SoSFString *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFString **)&jarg2;  if (arg1) (arg1)->modeling = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1modeling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFString *)& ((arg1)->modeling); *(SoSFString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->width = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->width); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1minimumValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->minimumValue = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1minimumValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->minimumValue); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1maximumValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->maximumValue = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1maximumValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->maximumValue); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1logScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->logScale = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1logScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFBool *)& ((arg1)->logScale); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1tickUp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->tickUp = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1tickUp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFBool *)& ((arg1)->tickUp); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1tickLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->tickLength = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1tickLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->tickLength); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1labelToAxis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->labelToAxis = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1labelToAxis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->labelToAxis); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1labelHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->labelHeight = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1labelHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->labelHeight); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFString *arg2 = (SoSFString *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFString **)&jarg2;  if (arg1) (arg1)->title = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFString *)& ((arg1)->title); *(SoSFString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1titleToAxis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->titleToAxis = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1titleToAxis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->titleToAxis); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1titleHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->titleHeight = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1titleHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->titleHeight); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoAxis_1LEFT_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoAxis::Justification result; (void)jenv; (void)jcls; result = (SoAxis::Justification)SoAxis::LEFT; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoAxis_1CENTER_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoAxis::Justification result; (void)jenv; (void)jcls; result = (SoAxis::Justification)SoAxis::CENTER; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoAxis_1RIGHT_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoAxis::Justification result; (void)jenv; (void)jcls; result = (SoAxis::Justification)SoAxis::RIGHT; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1titleToAxisJustification_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFEnum *arg2 = (SoSFEnum *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFEnum **)&jarg2;  if (arg1) (arg1)->titleToAxisJustification = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1titleToAxisJustification_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFEnum *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFEnum *)& ((arg1)->titleToAxisJustification); *(SoSFEnum **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1ttfScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->ttfScale = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1ttfScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoSFFloat *)& ((arg1)->ttfScale); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1labels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoMFString *arg2 = (SoMFString *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoMFString **)&jarg2;  if (arg1) (arg1)->labels = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1labels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoMFString *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoMFString *)& ((arg1)->labels); *(SoMFString **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoMFFloat *arg2 = (SoMFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoMFFloat **)&jarg2;  if (arg1) (arg1)->values = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoMFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoMFFloat *)& ((arg1)->values); *(SoMFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxis_1coords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxis *arg1 = (SoAxis *) 0 ; SoMFFloat *arg2 = (SoMFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxis **)&jarg1;  arg2 = *(SoMFFloat **)&jarg2;  if (arg1) (arg1)->coords = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxis_1coords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxis *arg1 = (SoAxis *) 0 ; SoMFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxis **)&jarg1;  result = (SoMFFloat *)& ((arg1)->coords); *(SoMFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoAxis(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoAxis *arg1 = (SoAxis *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoAxis **)&jarg1;  delete_SoAxis(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoAxes2D(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoAxes2D *result = 0 ;
  (void)jenv; (void)jcls; result = (SoAxes2D *)new SoAxes2D(); *(SoAxes2D **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = ((SoAxes2D const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoAxes2D::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoAxes2D::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1getXAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoAxis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoAxis *)(arg1)->getXAxis(); *(SoAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1getYAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoAxis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoAxis *)(arg1)->getYAxis(); *(SoAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoAxes2D_1SOLID_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  SoAxes2D::LineType result; (void)jenv; (void)jcls; result = (SoAxes2D::LineType)SoAxes2D::SOLID; jresult = (jint)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1gridColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->gridColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1gridColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFColor *)& ((arg1)->gridColor); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1gridTransparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->gridTransparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1gridTransparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->gridTransparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1gridVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->gridVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1gridVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFBool *)& ((arg1)->gridVisible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->wallColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFColor *)& ((arg1)->wallColor); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallTransparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->wallTransparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallTransparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->wallTransparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->wallOffset = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->wallOffset); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->wallVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1wallVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFBool *)& ((arg1)->wallVisible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1topAxisVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->topAxisVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1topAxisVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFBool *)& ((arg1)->topAxisVisible); *(SoSFBool **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1topAxisY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->topAxisY = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1topAxisY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->topAxisY); *(SoSFFloat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1rightAxisVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->rightAxisVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1rightAxisVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFBool *)& ((arg1)->rightAxisVisible); *(SoSFBool **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes2D_1rightAxisX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes2D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->rightAxisX = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes2D_1rightAxisX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes2D *arg1 = (SoAxes2D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes2D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->rightAxisX); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoAxes2D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoAxes2D *arg1 = (SoAxes2D *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoAxes2D **)&jarg1;  delete_SoAxes2D(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoAxes3D(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoAxes3D *result = 0 ;
  (void)jenv; (void)jcls; result = (SoAxes3D *)new SoAxes3D(); *(SoAxes3D **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = ((SoAxes3D const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoAxes3D::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoAxes3D::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1getXAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoAxis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoAxis *)(arg1)->getXAxis(); *(SoAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1getYAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoAxis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoAxis *)(arg1)->getYAxis(); *(SoAxis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1getZAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoAxis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoAxis *)(arg1)->getZAxis(); *(SoAxis **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1gridColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->gridColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1gridColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFColor *)& ((arg1)->gridColor); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1gridTransparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->gridTransparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1gridTransparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->gridTransparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1gridVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->gridVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1gridVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFBool *)& ((arg1)->gridVisible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFColor *arg2 = (SoSFColor *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFColor **)&jarg2;  if (arg1) (arg1)->wallColor = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFColor *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFColor *)& ((arg1)->wallColor); *(SoSFColor **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallTransparency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->wallTransparency = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallTransparency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->wallTransparency); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFFloat *arg2 = (SoSFFloat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFFloat **)&jarg2;  if (arg1) (arg1)->wallOffset = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFFloat *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFFloat *)& ((arg1)->wallOffset); *(SoSFFloat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallVisible_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFBool *arg2 = (SoSFBool *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(SoAxes3D **)&jarg1;  arg2 = *(SoSFBool **)&jarg2;  if (arg1) (arg1)->wallVisible = *arg2; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoAxes3D_1wallVisible_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoAxes3D *arg1 = (SoAxes3D *) 0 ; SoSFBool *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoAxes3D **)&jarg1;  result = (SoSFBool *)& ((arg1)->wallVisible); *(SoSFBool **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoAxes3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoAxes3D *arg1 = (SoAxes3D *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoAxes3D **)&jarg1;  delete_SoAxes3D(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTubs(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTubs *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTubs *)new SoTubs(); *(SoTubs **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTubs_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTubs *arg1 = (SoTubs *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTubs **)&jarg1;  result = ((SoTubs const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTubs_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoTubs::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTubs_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTubs::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTubs(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoTubs *arg1 = (SoTubs *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoTubs **)&jarg1;  delete_SoTubs(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoBox(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoBox *result = 0 ;
  (void)jenv; (void)jcls; result = (SoBox *)new SoBox(); *(SoBox **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoBox_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoBox *arg1 = (SoBox *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoBox **)&jarg1;  result = ((SoBox const *)arg1)->getTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoBox_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoBox::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoBox_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoBox::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoBox(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoBox *arg1 = (SoBox *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoBox **)&jarg1;  delete_SoBox(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoCons(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoCons *result = 0 ;
  (void)jenv; (void)jcls; result = (SoCons *)new SoCons(); *(SoCons **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCons_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCons *arg1 = (SoCons *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCons **)&jarg1;  result = ((SoCons const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCons_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoCons::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCons_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoCons::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCons(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoCons *arg1 = (SoCons *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoCons **)&jarg1;  delete_SoCons(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTrap(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTrap *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTrap *)new SoTrap(); *(SoTrap **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTrap_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTrap *arg1 = (SoTrap *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTrap **)&jarg1;  result = ((SoTrap const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTrap_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoTrap::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTrap_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTrap::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTrap(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoTrap *arg1 = (SoTrap *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoTrap **)&jarg1;  delete_SoTrap(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTrd(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTrd *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTrd *)new SoTrd(); *(SoTrd **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTrd_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTrd *arg1 = (SoTrd *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTrd **)&jarg1;  result = ((SoTrd const *)arg1)->getTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTrd_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoTrd::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTrd_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTrd::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTrd(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoTrd *arg1 = (SoTrd *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoTrd **)&jarg1;  delete_SoTrd(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoTorus(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoTorus *result = 0 ;
  (void)jenv; (void)jcls; result = (SoTorus *)new SoTorus(); *(SoTorus **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTorus_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoTorus *arg1 = (SoTorus *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoTorus **)&jarg1;  result = ((SoTorus const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoTorus_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoTorus::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoTorus_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoTorus::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoTorus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoTorus *arg1 = (SoTorus *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoTorus **)&jarg1;  delete_SoTorus(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPcon(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoPcon *result = 0 ;
  (void)jenv; (void)jcls; result = (SoPcon *)new SoPcon(); *(SoPcon **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPcon_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPcon *arg1 = (SoPcon *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPcon **)&jarg1;  result = ((SoPcon const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPcon_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoPcon::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPcon_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPcon::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPcon(JNIEnv *jenv, jclass jcls, jlong jarg1) { SoPcon *arg1 = (SoPcon *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(SoPcon **)&jarg1;  delete_SoPcon(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoWedge(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoWedge *result = 0 ;
  (void)jenv; (void)jcls; result = (SoWedge *)new SoWedge(); *(SoWedge **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoWedge_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoWedge *arg1 = (SoWedge *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoWedge **)&jarg1;  result = ((SoWedge const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoWedge_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoWedge::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoWedge_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoWedge::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoWedge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoWedge *arg1 = (SoWedge *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoWedge **)&jarg1;  delete_SoWedge(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPolyVol(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoPolyVol *result = 0 ;
  (void)jenv; (void)jcls; result = (SoPolyVol *)new SoPolyVol(); *(SoPolyVol **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPolyVol_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPolyVol *arg1 = (SoPolyVol *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPolyVol **)&jarg1;  result = ((SoPolyVol const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPolyVol_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoPolyVol::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPolyVol_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPolyVol::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPolyVol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoPolyVol *arg1 = (SoPolyVol *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoPolyVol **)&jarg1;  delete_SoPolyVol(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPolyhedron(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoPolyhedron *result = 0 ; (void)jenv; (void)jcls; result = (SoPolyhedron *)new SoPolyhedron();
  *(SoPolyhedron **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPolyhedron_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPolyhedron *arg1 = (SoPolyhedron *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPolyhedron **)&jarg1;  result = ((SoPolyhedron const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPolyhedron_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoPolyhedron::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPolyhedron_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPolyhedron::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPolyhedron(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoPolyhedron *arg1 = (SoPolyhedron *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoPolyhedron **)&jarg1; 
  delete_SoPolyhedron(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoArrow(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoArrow *result = 0 ;
  (void)jenv; (void)jcls; result = (SoArrow *)new SoArrow(); *(SoArrow **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArrow_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoArrow *arg1 = (SoArrow *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoArrow **)&jarg1;  result = ((SoArrow const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoArrow_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoType result;
  (void)jenv; (void)jcls; result = SoArrow::getClassTypeId(); *(SoType **)&jresult = new SoType((SoType &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoArrow_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoArrow::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoArrow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoArrow *arg1 = (SoArrow *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoArrow **)&jarg1;  delete_SoArrow(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoEllipsoid(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoEllipsoid *result = 0 ; (void)jenv; (void)jcls; result = (SoEllipsoid *)new SoEllipsoid();
  *(SoEllipsoid **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoEllipsoid_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoEllipsoid *arg1 = (SoEllipsoid *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoEllipsoid **)&jarg1;  result = ((SoEllipsoid const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoEllipsoid_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoEllipsoid::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoEllipsoid_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoEllipsoid::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoEllipsoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoEllipsoid *arg1 = (SoEllipsoid *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoEllipsoid **)&jarg1;  delete_SoEllipsoid(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoEllipsoidSegment(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoEllipsoidSegment *result = 0 ; (void)jenv; (void)jcls; result = (SoEllipsoidSegment *)new SoEllipsoidSegment();
  *(SoEllipsoidSegment **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoEllipsoidSegment_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoEllipsoidSegment *arg1 = (SoEllipsoidSegment *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoEllipsoidSegment **)&jarg1;  result = ((SoEllipsoidSegment const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoEllipsoidSegment_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoEllipsoidSegment::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoEllipsoidSegment_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoEllipsoidSegment::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoEllipsoidSegment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoEllipsoidSegment *arg1 = (SoEllipsoidSegment *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoEllipsoidSegment **)&jarg1; 
  delete_SoEllipsoidSegment(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoEllipticalPrism(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoEllipticalPrism *result = 0 ; (void)jenv; (void)jcls; result = (SoEllipticalPrism *)new SoEllipticalPrism();
  *(SoEllipticalPrism **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoEllipticalPrism_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoEllipticalPrism *arg1 = (SoEllipticalPrism *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoEllipticalPrism **)&jarg1;  result = ((SoEllipticalPrism const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoEllipticalPrism_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoEllipticalPrism::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoEllipticalPrism_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoEllipticalPrism::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoEllipticalPrism(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoEllipticalPrism *arg1 = (SoEllipticalPrism *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoEllipticalPrism **)&jarg1; 
  delete_SoEllipticalPrism(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1So3DErrorBar(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  So3DErrorBar *result = 0 ; (void)jenv; (void)jcls; result = (So3DErrorBar *)new So3DErrorBar();
  *(So3DErrorBar **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_So3DErrorBar_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; So3DErrorBar *arg1 = (So3DErrorBar *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(So3DErrorBar **)&jarg1;  result = ((So3DErrorBar const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_So3DErrorBar_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = So3DErrorBar::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_So3DErrorBar_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  So3DErrorBar::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1So3DErrorBar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  So3DErrorBar *arg1 = (So3DErrorBar *) 0 ; (void)jenv; (void)jcls; arg1 = *(So3DErrorBar **)&jarg1; 
  delete_So3DErrorBar(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoCoordinateAxis(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoCoordinateAxis *result = 0 ; (void)jenv; (void)jcls; result = (SoCoordinateAxis *)new SoCoordinateAxis();
  *(SoCoordinateAxis **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCoordinateAxis_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoCoordinateAxis *arg1 = (SoCoordinateAxis *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoCoordinateAxis **)&jarg1;  result = ((SoCoordinateAxis const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoCoordinateAxis_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoCoordinateAxis::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoCoordinateAxis_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoCoordinateAxis::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoCoordinateAxis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoCoordinateAxis *arg1 = (SoCoordinateAxis *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoCoordinateAxis **)&jarg1; 
  delete_SoCoordinateAxis(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoDetectorExample(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoDetectorExample *result = 0 ; (void)jenv; (void)jcls; result = (SoDetectorExample *)new SoDetectorExample();
  *(SoDetectorExample **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDetectorExample_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDetectorExample *arg1 = (SoDetectorExample *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDetectorExample **)&jarg1;  result = ((SoDetectorExample const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDetectorExample_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoDetectorExample::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoDetectorExample_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoDetectorExample::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoDetectorExample(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoDetectorExample *arg1 = (SoDetectorExample *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoDetectorExample **)&jarg1; 
  delete_SoDetectorExample(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoDetectorTreeKit(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoDetectorTreeKit *result = 0 ; (void)jenv; (void)jcls; result = (SoDetectorTreeKit *)new SoDetectorTreeKit();
  *(SoDetectorTreeKit **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDetectorTreeKit_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoDetectorTreeKit *arg1 = (SoDetectorTreeKit *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoDetectorTreeKit **)&jarg1;  result = ((SoDetectorTreeKit const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoDetectorTreeKit_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoDetectorTreeKit::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoDetectorTreeKit_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoDetectorTreeKit::initClass(); }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoDetectorTreeKit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoDetectorTreeKit *arg1 = (SoDetectorTreeKit *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoDetectorTreeKit **)&jarg1; 
  delete_SoDetectorTreeKit(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPlotter(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ; SoPlotter *result = 0 ;
  (void)jenv; (void)jcls; result = (SoPlotter *)new SoPlotter(); *(SoPlotter **)&jresult = result;  {  result->ref();  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotter_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotter *arg1 = (SoPlotter *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPlotter **)&jarg1;  result = ((SoPlotter const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotter_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoPlotter::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPlotter_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPlotter::initClass(); }
SWIGEXPORT jint JNICALL Java_OnX_OnXJNI_SoPlotter_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; SoPlotter *arg1 = (SoPlotter *) 0 ; SbBool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPlotter **)&jarg1;  result = (SbBool)((SoPlotter const *)arg1)->isEmpty(); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotter_1getEtcSeparator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotter *arg1 = (SoPlotter *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPlotter **)&jarg1;  result = (SoSeparator *)((SoPlotter const *)arg1)->getEtcSeparator();
  *(SoSeparator **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotter_1getEtcDataSeparator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotter *arg1 = (SoPlotter *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPlotter **)&jarg1;  result = (SoSeparator *)((SoPlotter const *)arg1)->getEtcDataSeparator();
  *(SoSeparator **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPlotter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoPlotter *arg1 = (SoPlotter *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoPlotter **)&jarg1;  delete_SoPlotter(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1SoPlotterRegion(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoPlotterRegion *result = 0 ; (void)jenv; (void)jcls; result = (SoPlotterRegion *)new SoPlotterRegion();
  *(SoPlotterRegion **)&jresult = result;  {  result->ref();  }  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1getTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotterRegion *arg1 = (SoPlotterRegion *) 0 ; SoType result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SoPlotterRegion **)&jarg1;  result = ((SoPlotterRegion const *)arg1)->getTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1getClassTypeId(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SoType result; (void)jenv; (void)jcls; result = SoPlotterRegion::getClassTypeId();
  *(SoType **)&jresult = new SoType((SoType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1initClass(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SoPlotterRegion::initClass(); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1getPlotter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotterRegion *arg1 = (SoPlotterRegion *) 0 ; SoPlotter *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoPlotterRegion **)&jarg1;  result = (SoPlotter *)((SoPlotterRegion const *)arg1)->getPlotter();
  *(SoPlotter **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1getInfosRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotterRegion *arg1 = (SoPlotterRegion *) 0 ; SoTextRegion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoPlotterRegion **)&jarg1;  result = (SoTextRegion *)((SoPlotterRegion const *)arg1)->getInfosRegion();
  *(SoTextRegion **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1getLegendRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotterRegion *arg1 = (SoPlotterRegion *) 0 ; SoTextRegion *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoPlotterRegion **)&jarg1; 
  result = (SoTextRegion *)((SoPlotterRegion const *)arg1)->getLegendRegion(); *(SoTextRegion **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SoPlotterRegion_1getEtcSeparator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SoPlotterRegion *arg1 = (SoPlotterRegion *) 0 ; SoSeparator *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SoPlotterRegion **)&jarg1;  result = (SoSeparator *)((SoPlotterRegion const *)arg1)->getEtcSeparator();
  *(SoSeparator **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1SoPlotterRegion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SoPlotterRegion *arg1 = (SoPlotterRegion *) 0 ; (void)jenv; (void)jcls; arg1 = *(SoPlotterRegion **)&jarg1; 
  delete_SoPlotterRegion(arg1); }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_new_1OnX_1SWIG_1Test(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  OnX_SWIG_Test *result = 0 ; (void)jenv; (void)jcls; result = (OnX_SWIG_Test *)new OnX_SWIG_Test();
  *(OnX_SWIG_Test **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_delete_1OnX_1SWIG_1Test(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; (void)jenv; (void)jcls; arg1 = *(OnX_SWIG_Test **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1arg_1const_1std_1vec_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<std::string > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnX_SWIG_Test **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2);
    arg2 = new std::vector<std::string>(); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); arg2->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  } 
  (arg1)->arg_const_std_vec_string((std::vector<std::string > const &)*arg2); { delete arg2; }  }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1arg_1std_1vec_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<std::string > arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnX_SWIG_Test **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2); for (i = 0; i<size; i++) {
      jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
      const char* c_string = jenv->GetStringUTFChars(j_string, 0); (&arg2)->push_back(c_string);
      jenv->ReleaseStringUTFChars(j_string, c_string); jenv->DeleteLocalRef(j_string); }  }  (arg1)->arg_std_vec_string(arg2); {
    }  }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1ret_1std_1vec_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<std::string > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OnX_SWIG_Test **)&jarg1;  result = ((OnX_SWIG_Test const *)arg1)->ret_std_vec_string(); {
    const jclass jsclass = jenv->FindClass("java/lang/String"); int len = result.size();
    jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF(result[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT jobjectArray JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1ret_1const_1std_1vec_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobjectArray jresult = 0 ; OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<std::string > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OnX_SWIG_Test **)&jarg1;  {
    std::vector<std::string > const &_result_ref = ((OnX_SWIG_Test const *)arg1)->ret_const_std_vec_string();
    result = (std::vector<std::string > *) &_result_ref; }  { const jclass jsclass = jenv->FindClass("java/lang/String");
    int len = result->size(); jresult = jenv->NewObjectArray(len, jsclass, NULL);  for (int i=0; i<len; i++) {
      jstring j_string = jenv->NewStringUTF((*result)[i].c_str()); jenv->SetObjectArrayElement(jresult, i, j_string);
      jenv->DeleteLocalRef(j_string); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1arg_1const_1std_1vec_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<double > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnX_SWIG_Test **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<double>();
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); } 
  (arg1)->arg_const_std_vec_double((std::vector<double > const &)*arg2); { delete arg2; }  }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1arg_1std_1vec_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<double > arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnX_SWIG_Test **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2);
    jdouble* j_double = jenv->GetDoubleArrayElements(jarg2, 0); for (i = 0; i<size; i++) { (&arg2)->push_back(j_double[i]); } 
    jenv->ReleaseDoubleArrayElements(jarg2, j_double, 0); }  (arg1)->arg_std_vec_double(arg2); { }  }
SWIGEXPORT jdoubleArray JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1ret_1std_1vec_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<double > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnX_SWIG_Test **)&jarg1;  result = ((OnX_SWIG_Test const *)arg1)->ret_std_vec_double(); {
    int len = result.size(); jresult = jenv->NewDoubleArray(len);  for (int i=0; i<len; i++) {
      jenv->SetDoubleArrayRegion(jresult, i, 1, &(result[i])); }  }  return jresult; }
SWIGEXPORT jdoubleArray JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1ret_1const_1std_1vec_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ; OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(OnX_SWIG_Test **)&jarg1;  {
    std::vector<double > const &_result_ref = ((OnX_SWIG_Test const *)arg1)->ret_const_std_vec_double();
    result = (std::vector<double > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewDoubleArray(len); 
    for (int i=0; i<len; i++) { jenv->SetDoubleArrayRegion(jresult, i, 1, &((*result)[i])); }  }  return jresult; }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1arg_1const_1std_1vec_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<int > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnX_SWIG_Test **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2); arg2 = new std::vector<int>();
    jint* j_int = jenv->GetIntArrayElements(jarg2, 0); for (i = 0; i<size; i++) { arg2->push_back(j_int[i]); } 
    jenv->ReleaseIntArrayElements(jarg2, j_int, 0); }  (arg1)->arg_const_std_vec_int((std::vector<int > const &)*arg2); {
    delete arg2; }  }
SWIGEXPORT void JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1arg_1std_1vec_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<int > arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(OnX_SWIG_Test **)&jarg1;  { int i = 0; jint size = jenv->GetArrayLength(jarg2);
    jint* j_int = jenv->GetIntArrayElements(jarg2, 0); for (i = 0; i<size; i++) { (&arg2)->push_back(j_int[i]); } 
    jenv->ReleaseIntArrayElements(jarg2, j_int, 0); }  (arg1)->arg_std_vec_int(arg2); { }  }
SWIGEXPORT jintArray JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1ret_1std_1vec_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ; OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<int > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnX_SWIG_Test **)&jarg1;  result = ((OnX_SWIG_Test const *)arg1)->ret_std_vec_int(); {
    int len = result.size(); jresult = jenv->NewIntArray(len);  for (int i=0; i<len; i++) { jint j_int = result[i]; 
      jenv->SetIntArrayRegion(jresult, i, 1, &j_int); }  }  return jresult; }
SWIGEXPORT jintArray JNICALL Java_OnX_OnXJNI_OnX_1SWIG_1Test_1ret_1const_1std_1vec_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ; OnX_SWIG_Test *arg1 = (OnX_SWIG_Test *) 0 ; std::vector<int > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(OnX_SWIG_Test **)&jarg1;  {
    std::vector<int > const &_result_ref = ((OnX_SWIG_Test const *)arg1)->ret_const_std_vec_int();
    result = (std::vector<int > *) &_result_ref; }  { int len = result->size(); jresult = jenv->NewIntArray(len); 
    for (int i=0; i<len; i++) { jint j_int = (*result)[i];  jenv->SetIntArrayRegion(jresult, i, 1, &j_int); }  } 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSbColorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SbVec3f **)&baseptr = *(SbColor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFieldUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoField **)&baseptr = *(SoSField **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFBoolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFBool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFShortUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFShort **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFFloatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFFloat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFInt32Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFInt32 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFBitMaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFBitMask **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFEnumUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFEnum **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFStringUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFString **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFVec2fUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFVec2f **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFVec3fUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFVec3f **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFColorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFColor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSFRotationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoSField **)&baseptr = *(SoSFRotation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMFieldUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoField **)&baseptr = *(SoMField **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMFFloatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoMField **)&baseptr = *(SoMFFloat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMFInt32Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoMField **)&baseptr = *(SoMFInt32 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMFStringUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoMField **)&baseptr = *(SoMFString **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMFColorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoMField **)&baseptr = *(SoMFColor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMFVec3fUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoMField **)&baseptr = *(SoMFVec3f **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoFieldContainerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBase **)&baseptr = *(SoFieldContainer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoNodeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoFieldContainer **)&baseptr = *(SoNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoGroupUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoGroup **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSeparatorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoGroup **)&baseptr = *(SoSeparator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoArrayUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoGroup **)&baseptr = *(SoArray **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoShapeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoVertexShapeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoVertexShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoNonIndexedShapeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoVertexShape **)&baseptr = *(SoNonIndexedShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoCubeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoCube **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoCylinderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoCylinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoCameraUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoCamera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoOrthographicCameraUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoCamera **)&baseptr = *(SoOrthographicCamera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPerspectiveCameraUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoCamera **)&baseptr = *(SoPerspectiveCamera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoMaterialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoMaterial **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTransformationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoTransformation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoScaleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoTransformation **)&baseptr = *(SoScale **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTranslationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoTransformation **)&baseptr = *(SoTranslation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoRotationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoTransformation **)&baseptr = *(SoRotation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoRotationXYZUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoTransformation **)&baseptr = *(SoRotationXYZ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoResetTransformUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoTransformation **)&baseptr = *(SoResetTransform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoLightUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoLight **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoDirectionalLightUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoLight **)&baseptr = *(SoDirectionalLight **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoLightModelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoLightModel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoDrawStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoDrawStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoCoordinate3Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoCoordinate3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoLineSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNonIndexedShape **)&baseptr = *(SoLineSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoBaseKitUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoBaseKit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoAlternateRepActionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoAction **)&baseptr = *(SoAlternateRepAction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoViewportRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoViewportRegion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoImageWriterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoImageWriter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGHEPVis_1SoImageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(HEPVis_SoImage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoLineStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoLineStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoAreaStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoAreaStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTextStyleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoNode **)&baseptr = *(SoTextStyle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTextHersheyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTextHershey **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTextTTFUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTextTTF **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoGridUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoGrid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTextVtkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTextVtk **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPyramidUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoPyramid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoSplineCurveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoSplineCurve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoHighlightMaterialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoMaterial **)&baseptr = *(SoHighlightMaterial **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoStyleCacheUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoGroup **)&baseptr = *(SoStyleCache **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSbAddNodeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SbDoIt **)&baseptr = *(SbAddNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoRegion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoDisplayRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoRegion **)&baseptr = *(SoDisplayRegion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoImageRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoRegion **)&baseptr = *(SoImageRegion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTextRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoRegion **)&baseptr = *(SoTextRegion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoCanvasUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoCanvas **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoCanvas **)&baseptr = *(SoPage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoAxisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoAxis **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoAxes2DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoAxes2D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoAxes3DUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoAxes3D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTubsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTubs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoBoxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoConsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoCons **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTrapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTrap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTrdUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTrd **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoTorusUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoTorus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPconUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoPcon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoWedgeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoWedge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPolyVolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoPolyVol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPolyhedronUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoPolyhedron **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoArrowUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoArrow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoEllipsoidUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoEllipsoid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoEllipsoidSegmentUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoEllipsoidSegment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoEllipticalPrismUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoEllipticalPrism **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSo3DErrorBarUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(So3DErrorBar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoCoordinateAxisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoShape **)&baseptr = *(SoCoordinateAxis **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoDetectorExampleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoDetectorExample **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoDetectorTreeKitUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoDetectorTreeKit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPlotterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoBaseKit **)&baseptr = *(SoPlotter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_OnX_OnXJNI_SWIGSoPlotterRegionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SoRegion **)&baseptr = *(SoPlotterRegion **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

