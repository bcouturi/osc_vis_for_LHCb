
#include <TROOT.h>
#include <TGApplication.h>

#include <TGFrame.h>
#include <TGMenu.h>
#include <TGFileDialog.h>
#include <TGCanvas.h>
#include <TGButton.h>

#define HasInventor

#ifdef HasInventor
#include <OnX/ROOT/TGSoExaminerViewer.h>
//#include <OnX/ROOT/TGSoViewerDialog.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoCube.h>
#endif

TROOT root("RootGui_test","RootGui_test");

enum ETestCommandIdentifiers {
  M_FILE_OPEN,
  M_FILE_EXIT
};

const char* sFiletypes[] = { "All files",     "*",
                             "ROOT files",    "*.root",
                             "ROOT macros",   "*.C",
                             0,               0 };

class TestMainFrame : public TGMainFrame {
public:
  TestMainFrame(const TGWindow *p, UInt_t w, UInt_t h):TGMainFrame(p, w, h){
  }
  virtual ~TestMainFrame(){
  }
  
  virtual void CloseWindow(){
    // Got close message for this MainFrame. Calls parent CloseWindow()
    // (which destroys the window) and terminate the application.
    // The close message is generated by the window manager when its close
    // window menu item is selected.
    printf("debug : TestMainFrame::CloseWindow\n");
    TGMainFrame::CloseWindow();
    gApplication->Terminate(0);
  }
  virtual Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t){
    // Handle messages send to the TestMainFrame object. E.g. all menu button
    // messages.
    
    switch (GET_MSG(msg)) {
    case kC_COMMAND:
      switch (GET_SUBMSG(msg)) {
      case kCM_BUTTON:
        printf("Button was pressed, id = %ld\n", parm1);
        break;
      case kCM_MENU:
        switch (parm1) {
        case M_FILE_OPEN:{
          TGFileInfo fi;
          fi.fFileTypes = (char**)sFiletypes;
          new TGFileDialog(fClient->GetRoot(), this, kFDOpen,&fi);
          }break;
        case M_FILE_EXIT:
          CloseWindow();   // this also terminates theApp
          break;
        default:
          break;
        }
      default:
        break;
      }
    default:
      break;
    }
   return kTRUE;
}
};

int main(int aArgc,char** aArgv)
{
  //TRootApplication rootApplication("RootGui_test",&aArgc,aArgv);

  TGApplication app("RootGui_test",&aArgc,aArgv);

  // Create widgets :
  TestMainFrame* mainFrame =
    new TestMainFrame(gClient->GetRoot(), 400, 220);

  /*
  TGFrame* vbox = new TGFrame(mainFrame,100,100,kVerticalFrame);
  TGLayoutHints* vboxLayout = 
    new TGLayoutHints(kLHintsTop | kLHintsLeft | kLHintsExpandX, 0, 0, 1, 1);
  mainFrame->AddFrame(vbox,vboxLayout);
  */

  // Menu bar :
  TGMenuBar* menuBar = new TGMenuBar(mainFrame, 1, 1, kHorizontalFrame);
  //TGMenuBar* menuBar = new TGMenuBar(vbox, 1, 1, kHorizontalFrame);
  TGLayoutHints* menuBarLayout = 
    new TGLayoutHints(kLHintsTop | kLHintsLeft | kLHintsExpandX, 0, 0, 1, 1);
  mainFrame->AddFrame(menuBar,menuBarLayout);

  TGPopupMenu* menuFile = new TGPopupMenu(gClient->GetRoot());
  menuFile->AddEntry("&Open...", M_FILE_OPEN);
  menuFile->AddEntry("&Exit", M_FILE_EXIT);
  menuFile->Associate(mainFrame);  // Setup callback.
  TGLayoutHints* menuBarItemLayout = 
    new TGLayoutHints(kLHintsTop | kLHintsLeft, 0, 4, 0, 0);
  menuBar->AddPopup("&File",menuFile,menuBarItemLayout);

  TGCanvas* canvasWindow = new TGCanvas(mainFrame, 400, 240);
  TGCompositeFrame* container = 
    new TGCompositeFrame(canvasWindow->GetViewPort(),
                         500, 500, kHorizontalFrame, 
                         mainFrame->GetWhitePixel());
  canvasWindow->SetContainer(container);
  container->SetLayoutManager(new TGTileLayout(container, 8));
  for (int i=0; i < 10; ++i) {
    TGButton* button = new TGButton(canvasWindow->GetContainer(),i);
    button->Resize(30,30);
    button->Associate(mainFrame); // Setup callback.
    canvasWindow->AddFrame(button,
                           new TGLayoutHints(kLHintsExpandY | kLHintsRight));
  }
  mainFrame->AddFrame(canvasWindow, 
      new TGLayoutHints(kLHintsExpandX | kLHintsExpandY,0, 0, 2, 2));

#ifdef HasInventor
  TGSoExaminerViewer::initialize(aArgc,aArgv);
  TGSoExaminerViewer* soExaminerViewer = 
    new TGSoExaminerViewer(mainFrame, 400, 240);
  mainFrame->AddFrame(soExaminerViewer);
  printf("debug : Inventor\n");
  //TGSoViewerDialog* soExaminerViewer = 
  //new TGSoViewerDialog("",400,240);

  SoSeparator* separator = new SoSeparator;
  separator->ref();
  SoMaterial* material = new SoMaterial;
  material->diffuseColor.setValue(SbColor(1,0,0));
  separator->addChild(material);
  SoCube* cube = new SoCube;
  separator->addChild(cube);

  soExaminerViewer->SetBackgroundColor(0.7F,0.7F,0.7F);
  soExaminerViewer->setSceneGraph(separator);
  soExaminerViewer->viewAll();
  soExaminerViewer->show();
#endif

  // Manage widgets :
  mainFrame->MapSubwindows();
  // we need to use GetDefault...() to initialize the layout algorithm...
  mainFrame->Resize(mainFrame->GetDefaultSize());

  mainFrame->SetWindowName("RootGui_test");

  // Map widget :
  // Should be done after Xt init, else we loose the
  // first expose event.
  mainFrame->MapWindow();

  app.Run();


  return 0;
}
